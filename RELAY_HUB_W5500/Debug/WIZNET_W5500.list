
WIZNET_W5500.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cf38  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000974  0800d0d8  0800d0d8  0000e0d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800da4c  0800da4c  0000f138  2**0
                  CONTENTS
  4 .ARM          00000008  0800da4c  0800da4c  0000ea4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800da54  0800da54  0000f138  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800da54  0800da54  0000ea54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800da58  0800da58  0000ea58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000138  20000000  0800da5c  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005838  20000138  0800db94  0000f138  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20005970  0800db94  0000f970  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000f138  2**0
                  CONTENTS, READONLY
 12 .debug_info   00020de6  00000000  00000000  0000f168  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005468  00000000  00000000  0002ff4e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001d38  00000000  00000000  000353b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000016e0  00000000  00000000  000370f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00006928  00000000  00000000  000387d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00021699  00000000  00000000  0003f0f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a142e  00000000  00000000  00060791  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00101bbf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008224  00000000  00000000  00101c04  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  00109e28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000138 	.word	0x20000138
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800d0c0 	.word	0x0800d0c0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000013c 	.word	0x2000013c
 80001dc:	0800d0c0 	.word	0x0800d0c0

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b96a 	b.w	800059c <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	460c      	mov	r4, r1
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	d14e      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ec:	4694      	mov	ip, r2
 80002ee:	458c      	cmp	ip, r1
 80002f0:	4686      	mov	lr, r0
 80002f2:	fab2 f282 	clz	r2, r2
 80002f6:	d962      	bls.n	80003be <__udivmoddi4+0xde>
 80002f8:	b14a      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fa:	f1c2 0320 	rsb	r3, r2, #32
 80002fe:	4091      	lsls	r1, r2
 8000300:	fa20 f303 	lsr.w	r3, r0, r3
 8000304:	fa0c fc02 	lsl.w	ip, ip, r2
 8000308:	4319      	orrs	r1, r3
 800030a:	fa00 fe02 	lsl.w	lr, r0, r2
 800030e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000312:	fa1f f68c 	uxth.w	r6, ip
 8000316:	fbb1 f4f7 	udiv	r4, r1, r7
 800031a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800031e:	fb07 1114 	mls	r1, r7, r4, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb04 f106 	mul.w	r1, r4, r6
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f104 30ff 	add.w	r0, r4, #4294967295
 8000336:	f080 8112 	bcs.w	800055e <__udivmoddi4+0x27e>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 810f 	bls.w	800055e <__udivmoddi4+0x27e>
 8000340:	3c02      	subs	r4, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a59      	subs	r1, r3, r1
 8000346:	fa1f f38e 	uxth.w	r3, lr
 800034a:	fbb1 f0f7 	udiv	r0, r1, r7
 800034e:	fb07 1110 	mls	r1, r7, r0, r1
 8000352:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000356:	fb00 f606 	mul.w	r6, r0, r6
 800035a:	429e      	cmp	r6, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x94>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f100 31ff 	add.w	r1, r0, #4294967295
 8000366:	f080 80fc 	bcs.w	8000562 <__udivmoddi4+0x282>
 800036a:	429e      	cmp	r6, r3
 800036c:	f240 80f9 	bls.w	8000562 <__udivmoddi4+0x282>
 8000370:	4463      	add	r3, ip
 8000372:	3802      	subs	r0, #2
 8000374:	1b9b      	subs	r3, r3, r6
 8000376:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800037a:	2100      	movs	r1, #0
 800037c:	b11d      	cbz	r5, 8000386 <__udivmoddi4+0xa6>
 800037e:	40d3      	lsrs	r3, r2
 8000380:	2200      	movs	r2, #0
 8000382:	e9c5 3200 	strd	r3, r2, [r5]
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d905      	bls.n	800039a <__udivmoddi4+0xba>
 800038e:	b10d      	cbz	r5, 8000394 <__udivmoddi4+0xb4>
 8000390:	e9c5 0100 	strd	r0, r1, [r5]
 8000394:	2100      	movs	r1, #0
 8000396:	4608      	mov	r0, r1
 8000398:	e7f5      	b.n	8000386 <__udivmoddi4+0xa6>
 800039a:	fab3 f183 	clz	r1, r3
 800039e:	2900      	cmp	r1, #0
 80003a0:	d146      	bne.n	8000430 <__udivmoddi4+0x150>
 80003a2:	42a3      	cmp	r3, r4
 80003a4:	d302      	bcc.n	80003ac <__udivmoddi4+0xcc>
 80003a6:	4290      	cmp	r0, r2
 80003a8:	f0c0 80f0 	bcc.w	800058c <__udivmoddi4+0x2ac>
 80003ac:	1a86      	subs	r6, r0, r2
 80003ae:	eb64 0303 	sbc.w	r3, r4, r3
 80003b2:	2001      	movs	r0, #1
 80003b4:	2d00      	cmp	r5, #0
 80003b6:	d0e6      	beq.n	8000386 <__udivmoddi4+0xa6>
 80003b8:	e9c5 6300 	strd	r6, r3, [r5]
 80003bc:	e7e3      	b.n	8000386 <__udivmoddi4+0xa6>
 80003be:	2a00      	cmp	r2, #0
 80003c0:	f040 8090 	bne.w	80004e4 <__udivmoddi4+0x204>
 80003c4:	eba1 040c 	sub.w	r4, r1, ip
 80003c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003cc:	fa1f f78c 	uxth.w	r7, ip
 80003d0:	2101      	movs	r1, #1
 80003d2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003d6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003da:	fb08 4416 	mls	r4, r8, r6, r4
 80003de:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003e2:	fb07 f006 	mul.w	r0, r7, r6
 80003e6:	4298      	cmp	r0, r3
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x11c>
 80003ea:	eb1c 0303 	adds.w	r3, ip, r3
 80003ee:	f106 34ff 	add.w	r4, r6, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x11a>
 80003f4:	4298      	cmp	r0, r3
 80003f6:	f200 80cd 	bhi.w	8000594 <__udivmoddi4+0x2b4>
 80003fa:	4626      	mov	r6, r4
 80003fc:	1a1c      	subs	r4, r3, r0
 80003fe:	fa1f f38e 	uxth.w	r3, lr
 8000402:	fbb4 f0f8 	udiv	r0, r4, r8
 8000406:	fb08 4410 	mls	r4, r8, r0, r4
 800040a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800040e:	fb00 f707 	mul.w	r7, r0, r7
 8000412:	429f      	cmp	r7, r3
 8000414:	d908      	bls.n	8000428 <__udivmoddi4+0x148>
 8000416:	eb1c 0303 	adds.w	r3, ip, r3
 800041a:	f100 34ff 	add.w	r4, r0, #4294967295
 800041e:	d202      	bcs.n	8000426 <__udivmoddi4+0x146>
 8000420:	429f      	cmp	r7, r3
 8000422:	f200 80b0 	bhi.w	8000586 <__udivmoddi4+0x2a6>
 8000426:	4620      	mov	r0, r4
 8000428:	1bdb      	subs	r3, r3, r7
 800042a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800042e:	e7a5      	b.n	800037c <__udivmoddi4+0x9c>
 8000430:	f1c1 0620 	rsb	r6, r1, #32
 8000434:	408b      	lsls	r3, r1
 8000436:	fa22 f706 	lsr.w	r7, r2, r6
 800043a:	431f      	orrs	r7, r3
 800043c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000440:	fa04 f301 	lsl.w	r3, r4, r1
 8000444:	ea43 030c 	orr.w	r3, r3, ip
 8000448:	40f4      	lsrs	r4, r6
 800044a:	fa00 f801 	lsl.w	r8, r0, r1
 800044e:	0c38      	lsrs	r0, r7, #16
 8000450:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000454:	fbb4 fef0 	udiv	lr, r4, r0
 8000458:	fa1f fc87 	uxth.w	ip, r7
 800045c:	fb00 441e 	mls	r4, r0, lr, r4
 8000460:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000464:	fb0e f90c 	mul.w	r9, lr, ip
 8000468:	45a1      	cmp	r9, r4
 800046a:	fa02 f201 	lsl.w	r2, r2, r1
 800046e:	d90a      	bls.n	8000486 <__udivmoddi4+0x1a6>
 8000470:	193c      	adds	r4, r7, r4
 8000472:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000476:	f080 8084 	bcs.w	8000582 <__udivmoddi4+0x2a2>
 800047a:	45a1      	cmp	r9, r4
 800047c:	f240 8081 	bls.w	8000582 <__udivmoddi4+0x2a2>
 8000480:	f1ae 0e02 	sub.w	lr, lr, #2
 8000484:	443c      	add	r4, r7
 8000486:	eba4 0409 	sub.w	r4, r4, r9
 800048a:	fa1f f983 	uxth.w	r9, r3
 800048e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000492:	fb00 4413 	mls	r4, r0, r3, r4
 8000496:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800049a:	fb03 fc0c 	mul.w	ip, r3, ip
 800049e:	45a4      	cmp	ip, r4
 80004a0:	d907      	bls.n	80004b2 <__udivmoddi4+0x1d2>
 80004a2:	193c      	adds	r4, r7, r4
 80004a4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004a8:	d267      	bcs.n	800057a <__udivmoddi4+0x29a>
 80004aa:	45a4      	cmp	ip, r4
 80004ac:	d965      	bls.n	800057a <__udivmoddi4+0x29a>
 80004ae:	3b02      	subs	r3, #2
 80004b0:	443c      	add	r4, r7
 80004b2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004b6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ba:	eba4 040c 	sub.w	r4, r4, ip
 80004be:	429c      	cmp	r4, r3
 80004c0:	46ce      	mov	lr, r9
 80004c2:	469c      	mov	ip, r3
 80004c4:	d351      	bcc.n	800056a <__udivmoddi4+0x28a>
 80004c6:	d04e      	beq.n	8000566 <__udivmoddi4+0x286>
 80004c8:	b155      	cbz	r5, 80004e0 <__udivmoddi4+0x200>
 80004ca:	ebb8 030e 	subs.w	r3, r8, lr
 80004ce:	eb64 040c 	sbc.w	r4, r4, ip
 80004d2:	fa04 f606 	lsl.w	r6, r4, r6
 80004d6:	40cb      	lsrs	r3, r1
 80004d8:	431e      	orrs	r6, r3
 80004da:	40cc      	lsrs	r4, r1
 80004dc:	e9c5 6400 	strd	r6, r4, [r5]
 80004e0:	2100      	movs	r1, #0
 80004e2:	e750      	b.n	8000386 <__udivmoddi4+0xa6>
 80004e4:	f1c2 0320 	rsb	r3, r2, #32
 80004e8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ec:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f0:	fa24 f303 	lsr.w	r3, r4, r3
 80004f4:	4094      	lsls	r4, r2
 80004f6:	430c      	orrs	r4, r1
 80004f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004fc:	fa00 fe02 	lsl.w	lr, r0, r2
 8000500:	fa1f f78c 	uxth.w	r7, ip
 8000504:	fbb3 f0f8 	udiv	r0, r3, r8
 8000508:	fb08 3110 	mls	r1, r8, r0, r3
 800050c:	0c23      	lsrs	r3, r4, #16
 800050e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000512:	fb00 f107 	mul.w	r1, r0, r7
 8000516:	4299      	cmp	r1, r3
 8000518:	d908      	bls.n	800052c <__udivmoddi4+0x24c>
 800051a:	eb1c 0303 	adds.w	r3, ip, r3
 800051e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000522:	d22c      	bcs.n	800057e <__udivmoddi4+0x29e>
 8000524:	4299      	cmp	r1, r3
 8000526:	d92a      	bls.n	800057e <__udivmoddi4+0x29e>
 8000528:	3802      	subs	r0, #2
 800052a:	4463      	add	r3, ip
 800052c:	1a5b      	subs	r3, r3, r1
 800052e:	b2a4      	uxth	r4, r4
 8000530:	fbb3 f1f8 	udiv	r1, r3, r8
 8000534:	fb08 3311 	mls	r3, r8, r1, r3
 8000538:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800053c:	fb01 f307 	mul.w	r3, r1, r7
 8000540:	42a3      	cmp	r3, r4
 8000542:	d908      	bls.n	8000556 <__udivmoddi4+0x276>
 8000544:	eb1c 0404 	adds.w	r4, ip, r4
 8000548:	f101 36ff 	add.w	r6, r1, #4294967295
 800054c:	d213      	bcs.n	8000576 <__udivmoddi4+0x296>
 800054e:	42a3      	cmp	r3, r4
 8000550:	d911      	bls.n	8000576 <__udivmoddi4+0x296>
 8000552:	3902      	subs	r1, #2
 8000554:	4464      	add	r4, ip
 8000556:	1ae4      	subs	r4, r4, r3
 8000558:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800055c:	e739      	b.n	80003d2 <__udivmoddi4+0xf2>
 800055e:	4604      	mov	r4, r0
 8000560:	e6f0      	b.n	8000344 <__udivmoddi4+0x64>
 8000562:	4608      	mov	r0, r1
 8000564:	e706      	b.n	8000374 <__udivmoddi4+0x94>
 8000566:	45c8      	cmp	r8, r9
 8000568:	d2ae      	bcs.n	80004c8 <__udivmoddi4+0x1e8>
 800056a:	ebb9 0e02 	subs.w	lr, r9, r2
 800056e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000572:	3801      	subs	r0, #1
 8000574:	e7a8      	b.n	80004c8 <__udivmoddi4+0x1e8>
 8000576:	4631      	mov	r1, r6
 8000578:	e7ed      	b.n	8000556 <__udivmoddi4+0x276>
 800057a:	4603      	mov	r3, r0
 800057c:	e799      	b.n	80004b2 <__udivmoddi4+0x1d2>
 800057e:	4630      	mov	r0, r6
 8000580:	e7d4      	b.n	800052c <__udivmoddi4+0x24c>
 8000582:	46d6      	mov	lr, sl
 8000584:	e77f      	b.n	8000486 <__udivmoddi4+0x1a6>
 8000586:	4463      	add	r3, ip
 8000588:	3802      	subs	r0, #2
 800058a:	e74d      	b.n	8000428 <__udivmoddi4+0x148>
 800058c:	4606      	mov	r6, r0
 800058e:	4623      	mov	r3, r4
 8000590:	4608      	mov	r0, r1
 8000592:	e70f      	b.n	80003b4 <__udivmoddi4+0xd4>
 8000594:	3e02      	subs	r6, #2
 8000596:	4463      	add	r3, ip
 8000598:	e730      	b.n	80003fc <__udivmoddi4+0x11c>
 800059a:	bf00      	nop

0800059c <__aeabi_idiv0>:
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop

080005a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b08a      	sub	sp, #40	@ 0x28
 80005a4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005a6:	f006 ff8d 	bl	80074c4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005aa:	f000 f861 	bl	8000670 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005ae:	f000 f931 	bl	8000814 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80005b2:	f000 f905 	bl	80007c0 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 80005b6:	f000 f8c5 	bl	8000744 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
	printf("program_Started\r\n");
 80005ba:	4825      	ldr	r0, [pc, #148]	@ (8000650 <main+0xb0>)
 80005bc:	f00b fe7e 	bl	800c2bc <puts>


	W5500Init();
 80005c0:	f006 f90e 	bl	80067e0 <W5500Init>

	//Configure PHY by software
	wiz_PhyConf phyconf;
	phyconf.by     = PHY_CONFBY_SW;
 80005c4:	2301      	movs	r3, #1
 80005c6:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
	phyconf.duplex = PHY_DUPLEX_FULL;
 80005ca:	2301      	movs	r3, #1
 80005cc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	phyconf.speed  = PHY_SPEED_10;
 80005d0:	2300      	movs	r3, #0
 80005d2:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	phyconf.mode   = PHY_MODE_AUTONEGO;
 80005d6:	2301      	movs	r3, #1
 80005d8:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
	ctlwizchip(CW_SET_PHYCONF, (void*) &phyconf);
 80005dc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80005e0:	4619      	mov	r1, r3
 80005e2:	200a      	movs	r0, #10
 80005e4:	f006 fa7e 	bl	8006ae4 <ctlwizchip>

	PHYStatusCheck();
 80005e8:	f000 fc42 	bl	8000e70 <PHYStatusCheck>
	PrintPHYConf();
 80005ec:	f000 fc66 	bl	8000ebc <PrintPHYConf>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80005f0:	f008 fe7e 	bl	80092f0 <osKernelInitialize>
  /* USER CODE BEGIN RTOS_TIMERS */
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
  mqttMessageQueueHandle = osMessageQueueNew(MQTT_EVENT_QUEUE_SIZE, sizeof(uint8_t), NULL);
 80005f4:	2200      	movs	r2, #0
 80005f6:	2101      	movs	r1, #1
 80005f8:	2040      	movs	r0, #64	@ 0x40
 80005fa:	f008 ff70 	bl	80094de <osMessageQueueNew>
 80005fe:	4603      	mov	r3, r0
 8000600:	4a14      	ldr	r2, [pc, #80]	@ (8000654 <main+0xb4>)
 8000602:	6013      	str	r3, [r2, #0]
  if (mqttMessageQueueHandle == NULL)
 8000604:	4b13      	ldr	r3, [pc, #76]	@ (8000654 <main+0xb4>)
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	2b00      	cmp	r3, #0
 800060a:	d102      	bne.n	8000612 <main+0x72>
  {
          printf("Failed to create MQTT message queue.\n");
 800060c:	4812      	ldr	r0, [pc, #72]	@ (8000658 <main+0xb8>)
 800060e:	f00b fe55 	bl	800c2bc <puts>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000612:	4a12      	ldr	r2, [pc, #72]	@ (800065c <main+0xbc>)
 8000614:	2100      	movs	r1, #0
 8000616:	4812      	ldr	r0, [pc, #72]	@ (8000660 <main+0xc0>)
 8000618:	f008 feb4 	bl	8009384 <osThreadNew>
 800061c:	4603      	mov	r3, r0
 800061e:	4a11      	ldr	r2, [pc, #68]	@ (8000664 <main+0xc4>)
 8000620:	6013      	str	r3, [r2, #0]
//  	  .name = "RelayTask",
//  	  .priority = (osPriority_t)RELAY_TASK_PRIORITY,
//  	  .stack_size = RELAY_TASK_STACK_SIZE
//  	});

  	osThreadNew(Task_MQTTHandler, NULL, &(osThreadAttr_t){
 8000622:	463b      	mov	r3, r7
 8000624:	2224      	movs	r2, #36	@ 0x24
 8000626:	2100      	movs	r1, #0
 8000628:	4618      	mov	r0, r3
 800062a:	f00b ff27 	bl	800c47c <memset>
 800062e:	4b0e      	ldr	r3, [pc, #56]	@ (8000668 <main+0xc8>)
 8000630:	603b      	str	r3, [r7, #0]
 8000632:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000636:	617b      	str	r3, [r7, #20]
 8000638:	2303      	movs	r3, #3
 800063a:	61bb      	str	r3, [r7, #24]
 800063c:	463b      	mov	r3, r7
 800063e:	461a      	mov	r2, r3
 8000640:	2100      	movs	r1, #0
 8000642:	480a      	ldr	r0, [pc, #40]	@ (800066c <main+0xcc>)
 8000644:	f008 fe9e 	bl	8009384 <osThreadNew>
  	});
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000648:	f008 fe76 	bl	8009338 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800064c:	bf00      	nop
 800064e:	e7fd      	b.n	800064c <main+0xac>
 8000650:	0800d108 	.word	0x0800d108
 8000654:	200001f8 	.word	0x200001f8
 8000658:	0800d11c 	.word	0x0800d11c
 800065c:	0800d9dc 	.word	0x0800d9dc
 8000660:	0800105d 	.word	0x0800105d
 8000664:	200001f4 	.word	0x200001f4
 8000668:	0800d144 	.word	0x0800d144
 800066c:	0800094d 	.word	0x0800094d

08000670 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	b094      	sub	sp, #80	@ 0x50
 8000674:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000676:	f107 0320 	add.w	r3, r7, #32
 800067a:	2230      	movs	r2, #48	@ 0x30
 800067c:	2100      	movs	r1, #0
 800067e:	4618      	mov	r0, r3
 8000680:	f00b fefc 	bl	800c47c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000684:	f107 030c 	add.w	r3, r7, #12
 8000688:	2200      	movs	r2, #0
 800068a:	601a      	str	r2, [r3, #0]
 800068c:	605a      	str	r2, [r3, #4]
 800068e:	609a      	str	r2, [r3, #8]
 8000690:	60da      	str	r2, [r3, #12]
 8000692:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000694:	2300      	movs	r3, #0
 8000696:	60bb      	str	r3, [r7, #8]
 8000698:	4b28      	ldr	r3, [pc, #160]	@ (800073c <SystemClock_Config+0xcc>)
 800069a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800069c:	4a27      	ldr	r2, [pc, #156]	@ (800073c <SystemClock_Config+0xcc>)
 800069e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80006a2:	6413      	str	r3, [r2, #64]	@ 0x40
 80006a4:	4b25      	ldr	r3, [pc, #148]	@ (800073c <SystemClock_Config+0xcc>)
 80006a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006a8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80006ac:	60bb      	str	r3, [r7, #8]
 80006ae:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80006b0:	2300      	movs	r3, #0
 80006b2:	607b      	str	r3, [r7, #4]
 80006b4:	4b22      	ldr	r3, [pc, #136]	@ (8000740 <SystemClock_Config+0xd0>)
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80006bc:	4a20      	ldr	r2, [pc, #128]	@ (8000740 <SystemClock_Config+0xd0>)
 80006be:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80006c2:	6013      	str	r3, [r2, #0]
 80006c4:	4b1e      	ldr	r3, [pc, #120]	@ (8000740 <SystemClock_Config+0xd0>)
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80006cc:	607b      	str	r3, [r7, #4]
 80006ce:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006d0:	2302      	movs	r3, #2
 80006d2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006d4:	2301      	movs	r3, #1
 80006d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006d8:	2310      	movs	r3, #16
 80006da:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006dc:	2302      	movs	r3, #2
 80006de:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006e0:	2300      	movs	r3, #0
 80006e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80006e4:	2308      	movs	r3, #8
 80006e6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 80006e8:	2360      	movs	r3, #96	@ 0x60
 80006ea:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80006ec:	2304      	movs	r3, #4
 80006ee:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80006f0:	2307      	movs	r3, #7
 80006f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006f4:	f107 0320 	add.w	r3, r7, #32
 80006f8:	4618      	mov	r0, r3
 80006fa:	f007 f9e3 	bl	8007ac4 <HAL_RCC_OscConfig>
 80006fe:	4603      	mov	r3, r0
 8000700:	2b00      	cmp	r3, #0
 8000702:	d001      	beq.n	8000708 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000704:	f000 fcda 	bl	80010bc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000708:	230f      	movs	r3, #15
 800070a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800070c:	2302      	movs	r3, #2
 800070e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000710:	2300      	movs	r3, #0
 8000712:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000714:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000718:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800071a:	2300      	movs	r3, #0
 800071c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800071e:	f107 030c 	add.w	r3, r7, #12
 8000722:	2101      	movs	r1, #1
 8000724:	4618      	mov	r0, r3
 8000726:	f007 fc45 	bl	8007fb4 <HAL_RCC_ClockConfig>
 800072a:	4603      	mov	r3, r0
 800072c:	2b00      	cmp	r3, #0
 800072e:	d001      	beq.n	8000734 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000730:	f000 fcc4 	bl	80010bc <Error_Handler>
  }
}
 8000734:	bf00      	nop
 8000736:	3750      	adds	r7, #80	@ 0x50
 8000738:	46bd      	mov	sp, r7
 800073a:	bd80      	pop	{r7, pc}
 800073c:	40023800 	.word	0x40023800
 8000740:	40007000 	.word	0x40007000

08000744 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000748:	4b1b      	ldr	r3, [pc, #108]	@ (80007b8 <MX_SPI1_Init+0x74>)
 800074a:	4a1c      	ldr	r2, [pc, #112]	@ (80007bc <MX_SPI1_Init+0x78>)
 800074c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800074e:	4b1a      	ldr	r3, [pc, #104]	@ (80007b8 <MX_SPI1_Init+0x74>)
 8000750:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000754:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000756:	4b18      	ldr	r3, [pc, #96]	@ (80007b8 <MX_SPI1_Init+0x74>)
 8000758:	2200      	movs	r2, #0
 800075a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800075c:	4b16      	ldr	r3, [pc, #88]	@ (80007b8 <MX_SPI1_Init+0x74>)
 800075e:	2200      	movs	r2, #0
 8000760:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000762:	4b15      	ldr	r3, [pc, #84]	@ (80007b8 <MX_SPI1_Init+0x74>)
 8000764:	2200      	movs	r2, #0
 8000766:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000768:	4b13      	ldr	r3, [pc, #76]	@ (80007b8 <MX_SPI1_Init+0x74>)
 800076a:	2200      	movs	r2, #0
 800076c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800076e:	4b12      	ldr	r3, [pc, #72]	@ (80007b8 <MX_SPI1_Init+0x74>)
 8000770:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000774:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000776:	4b10      	ldr	r3, [pc, #64]	@ (80007b8 <MX_SPI1_Init+0x74>)
 8000778:	2208      	movs	r2, #8
 800077a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800077c:	4b0e      	ldr	r3, [pc, #56]	@ (80007b8 <MX_SPI1_Init+0x74>)
 800077e:	2200      	movs	r2, #0
 8000780:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000782:	4b0d      	ldr	r3, [pc, #52]	@ (80007b8 <MX_SPI1_Init+0x74>)
 8000784:	2200      	movs	r2, #0
 8000786:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000788:	4b0b      	ldr	r3, [pc, #44]	@ (80007b8 <MX_SPI1_Init+0x74>)
 800078a:	2200      	movs	r2, #0
 800078c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 800078e:	4b0a      	ldr	r3, [pc, #40]	@ (80007b8 <MX_SPI1_Init+0x74>)
 8000790:	220a      	movs	r2, #10
 8000792:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000794:	4808      	ldr	r0, [pc, #32]	@ (80007b8 <MX_SPI1_Init+0x74>)
 8000796:	f007 fe5f 	bl	8008458 <HAL_SPI_Init>
 800079a:	4603      	mov	r3, r0
 800079c:	2b00      	cmp	r3, #0
 800079e:	d001      	beq.n	80007a4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80007a0:	f000 fc8c 	bl	80010bc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */
  __HAL_SPI_ENABLE(&hspi1);
 80007a4:	4b04      	ldr	r3, [pc, #16]	@ (80007b8 <MX_SPI1_Init+0x74>)
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	681a      	ldr	r2, [r3, #0]
 80007aa:	4b03      	ldr	r3, [pc, #12]	@ (80007b8 <MX_SPI1_Init+0x74>)
 80007ac:	681b      	ldr	r3, [r3, #0]
 80007ae:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80007b2:	601a      	str	r2, [r3, #0]
  /* USER CODE END SPI1_Init 2 */

}
 80007b4:	bf00      	nop
 80007b6:	bd80      	pop	{r7, pc}
 80007b8:	20000154 	.word	0x20000154
 80007bc:	40013000 	.word	0x40013000

080007c0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80007c4:	4b11      	ldr	r3, [pc, #68]	@ (800080c <MX_USART2_UART_Init+0x4c>)
 80007c6:	4a12      	ldr	r2, [pc, #72]	@ (8000810 <MX_USART2_UART_Init+0x50>)
 80007c8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80007ca:	4b10      	ldr	r3, [pc, #64]	@ (800080c <MX_USART2_UART_Init+0x4c>)
 80007cc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80007d0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80007d2:	4b0e      	ldr	r3, [pc, #56]	@ (800080c <MX_USART2_UART_Init+0x4c>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80007d8:	4b0c      	ldr	r3, [pc, #48]	@ (800080c <MX_USART2_UART_Init+0x4c>)
 80007da:	2200      	movs	r2, #0
 80007dc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80007de:	4b0b      	ldr	r3, [pc, #44]	@ (800080c <MX_USART2_UART_Init+0x4c>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80007e4:	4b09      	ldr	r3, [pc, #36]	@ (800080c <MX_USART2_UART_Init+0x4c>)
 80007e6:	220c      	movs	r2, #12
 80007e8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007ea:	4b08      	ldr	r3, [pc, #32]	@ (800080c <MX_USART2_UART_Init+0x4c>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007f0:	4b06      	ldr	r3, [pc, #24]	@ (800080c <MX_USART2_UART_Init+0x4c>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80007f6:	4805      	ldr	r0, [pc, #20]	@ (800080c <MX_USART2_UART_Init+0x4c>)
 80007f8:	f008 f92a 	bl	8008a50 <HAL_UART_Init>
 80007fc:	4603      	mov	r3, r0
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d001      	beq.n	8000806 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000802:	f000 fc5b 	bl	80010bc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000806:	bf00      	nop
 8000808:	bd80      	pop	{r7, pc}
 800080a:	bf00      	nop
 800080c:	200001ac 	.word	0x200001ac
 8000810:	40004400 	.word	0x40004400

08000814 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b08a      	sub	sp, #40	@ 0x28
 8000818:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800081a:	f107 0314 	add.w	r3, r7, #20
 800081e:	2200      	movs	r2, #0
 8000820:	601a      	str	r2, [r3, #0]
 8000822:	605a      	str	r2, [r3, #4]
 8000824:	609a      	str	r2, [r3, #8]
 8000826:	60da      	str	r2, [r3, #12]
 8000828:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800082a:	2300      	movs	r3, #0
 800082c:	613b      	str	r3, [r7, #16]
 800082e:	4b43      	ldr	r3, [pc, #268]	@ (800093c <MX_GPIO_Init+0x128>)
 8000830:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000832:	4a42      	ldr	r2, [pc, #264]	@ (800093c <MX_GPIO_Init+0x128>)
 8000834:	f043 0304 	orr.w	r3, r3, #4
 8000838:	6313      	str	r3, [r2, #48]	@ 0x30
 800083a:	4b40      	ldr	r3, [pc, #256]	@ (800093c <MX_GPIO_Init+0x128>)
 800083c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800083e:	f003 0304 	and.w	r3, r3, #4
 8000842:	613b      	str	r3, [r7, #16]
 8000844:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000846:	2300      	movs	r3, #0
 8000848:	60fb      	str	r3, [r7, #12]
 800084a:	4b3c      	ldr	r3, [pc, #240]	@ (800093c <MX_GPIO_Init+0x128>)
 800084c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800084e:	4a3b      	ldr	r2, [pc, #236]	@ (800093c <MX_GPIO_Init+0x128>)
 8000850:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000854:	6313      	str	r3, [r2, #48]	@ 0x30
 8000856:	4b39      	ldr	r3, [pc, #228]	@ (800093c <MX_GPIO_Init+0x128>)
 8000858:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800085a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800085e:	60fb      	str	r3, [r7, #12]
 8000860:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000862:	2300      	movs	r3, #0
 8000864:	60bb      	str	r3, [r7, #8]
 8000866:	4b35      	ldr	r3, [pc, #212]	@ (800093c <MX_GPIO_Init+0x128>)
 8000868:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800086a:	4a34      	ldr	r2, [pc, #208]	@ (800093c <MX_GPIO_Init+0x128>)
 800086c:	f043 0301 	orr.w	r3, r3, #1
 8000870:	6313      	str	r3, [r2, #48]	@ 0x30
 8000872:	4b32      	ldr	r3, [pc, #200]	@ (800093c <MX_GPIO_Init+0x128>)
 8000874:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000876:	f003 0301 	and.w	r3, r3, #1
 800087a:	60bb      	str	r3, [r7, #8]
 800087c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800087e:	2300      	movs	r3, #0
 8000880:	607b      	str	r3, [r7, #4]
 8000882:	4b2e      	ldr	r3, [pc, #184]	@ (800093c <MX_GPIO_Init+0x128>)
 8000884:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000886:	4a2d      	ldr	r2, [pc, #180]	@ (800093c <MX_GPIO_Init+0x128>)
 8000888:	f043 0302 	orr.w	r3, r3, #2
 800088c:	6313      	str	r3, [r2, #48]	@ 0x30
 800088e:	4b2b      	ldr	r3, [pc, #172]	@ (800093c <MX_GPIO_Init+0x128>)
 8000890:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000892:	f003 0302 	and.w	r3, r3, #2
 8000896:	607b      	str	r3, [r7, #4]
 8000898:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SPI1_RST_Pin|SPI1_CS_Pin|RELAY8_Pin|RELAY7_Pin, GPIO_PIN_RESET);
 800089a:	2200      	movs	r2, #0
 800089c:	f641 0103 	movw	r1, #6147	@ 0x1803
 80008a0:	4827      	ldr	r0, [pc, #156]	@ (8000940 <MX_GPIO_Init+0x12c>)
 80008a2:	f007 f8db 	bl	8007a5c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, RELAY6_Pin|RELAY3_Pin|RELAY2_Pin|RELAY1_Pin, GPIO_PIN_RESET);
 80008a6:	2200      	movs	r2, #0
 80008a8:	f44f 7158 	mov.w	r1, #864	@ 0x360
 80008ac:	4825      	ldr	r0, [pc, #148]	@ (8000944 <MX_GPIO_Init+0x130>)
 80008ae:	f007 f8d5 	bl	8007a5c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RELAY4_Pin|RELAY5_Pin, GPIO_PIN_RESET);
 80008b2:	2200      	movs	r2, #0
 80008b4:	f44f 7140 	mov.w	r1, #768	@ 0x300
 80008b8:	4823      	ldr	r0, [pc, #140]	@ (8000948 <MX_GPIO_Init+0x134>)
 80008ba:	f007 f8cf 	bl	8007a5c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80008be:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80008c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80008c4:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80008c8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ca:	2300      	movs	r3, #0
 80008cc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80008ce:	f107 0314 	add.w	r3, r7, #20
 80008d2:	4619      	mov	r1, r3
 80008d4:	481b      	ldr	r0, [pc, #108]	@ (8000944 <MX_GPIO_Init+0x130>)
 80008d6:	f006 ff3d 	bl	8007754 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_RST_Pin SPI1_CS_Pin RELAY8_Pin RELAY7_Pin */
  GPIO_InitStruct.Pin = SPI1_RST_Pin|SPI1_CS_Pin|RELAY8_Pin|RELAY7_Pin;
 80008da:	f641 0303 	movw	r3, #6147	@ 0x1803
 80008de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008e0:	2301      	movs	r3, #1
 80008e2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e4:	2300      	movs	r3, #0
 80008e6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008e8:	2300      	movs	r3, #0
 80008ea:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008ec:	f107 0314 	add.w	r3, r7, #20
 80008f0:	4619      	mov	r1, r3
 80008f2:	4813      	ldr	r0, [pc, #76]	@ (8000940 <MX_GPIO_Init+0x12c>)
 80008f4:	f006 ff2e 	bl	8007754 <HAL_GPIO_Init>

  /*Configure GPIO pins : RELAY6_Pin RELAY3_Pin RELAY2_Pin RELAY1_Pin */
  GPIO_InitStruct.Pin = RELAY6_Pin|RELAY3_Pin|RELAY2_Pin|RELAY1_Pin;
 80008f8:	f44f 7358 	mov.w	r3, #864	@ 0x360
 80008fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008fe:	2301      	movs	r3, #1
 8000900:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000902:	2300      	movs	r3, #0
 8000904:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000906:	2300      	movs	r3, #0
 8000908:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800090a:	f107 0314 	add.w	r3, r7, #20
 800090e:	4619      	mov	r1, r3
 8000910:	480c      	ldr	r0, [pc, #48]	@ (8000944 <MX_GPIO_Init+0x130>)
 8000912:	f006 ff1f 	bl	8007754 <HAL_GPIO_Init>

  /*Configure GPIO pins : RELAY4_Pin RELAY5_Pin */
  GPIO_InitStruct.Pin = RELAY4_Pin|RELAY5_Pin;
 8000916:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800091a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800091c:	2301      	movs	r3, #1
 800091e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000920:	2300      	movs	r3, #0
 8000922:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000924:	2300      	movs	r3, #0
 8000926:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000928:	f107 0314 	add.w	r3, r7, #20
 800092c:	4619      	mov	r1, r3
 800092e:	4806      	ldr	r0, [pc, #24]	@ (8000948 <MX_GPIO_Init+0x134>)
 8000930:	f006 ff10 	bl	8007754 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000934:	bf00      	nop
 8000936:	3728      	adds	r7, #40	@ 0x28
 8000938:	46bd      	mov	sp, r7
 800093a:	bd80      	pop	{r7, pc}
 800093c:	40023800 	.word	0x40023800
 8000940:	40020000 	.word	0x40020000
 8000944:	40020800 	.word	0x40020800
 8000948:	40020400 	.word	0x40020400

0800094c <Task_MQTTHandler>:

/* USER CODE BEGIN 4 */


void Task_MQTTHandler(void *argument)
{
 800094c:	b590      	push	{r4, r7, lr}
 800094e:	b09d      	sub	sp, #116	@ 0x74
 8000950:	af04      	add	r7, sp, #16
 8000952:	6078      	str	r0, [r7, #4]
    uint8_t result;
    uint8_t remote_host_ip[4];
    char message_payload[64];


    DHCP_init(SOCKET_ID_FOR_DHCP, dhcp_buffer);
 8000954:	4975      	ldr	r1, [pc, #468]	@ (8000b2c <Task_MQTTHandler+0x1e0>)
 8000956:	2007      	movs	r0, #7
 8000958:	f002 f912 	bl	8002b80 <DHCP_init>
    reg_dhcp_cbfunc(OnDHCPIPAssigned, NULL, NULL);
 800095c:	2200      	movs	r2, #0
 800095e:	2100      	movs	r1, #0
 8000960:	4873      	ldr	r0, [pc, #460]	@ (8000b30 <Task_MQTTHandler+0x1e4>)
 8000962:	f000 fe01 	bl	8001568 <reg_dhcp_cbfunc>
    printf("Obtaining IP address ...\r\n");
 8000966:	4873      	ldr	r0, [pc, #460]	@ (8000b34 <Task_MQTTHandler+0x1e8>)
 8000968:	f00b fca8 	bl	800c2bc <puts>

    // MQTT Client Configuration
    connect_data.willFlag = 0;
 800096c:	4b72      	ldr	r3, [pc, #456]	@ (8000b38 <Task_MQTTHandler+0x1ec>)
 800096e:	2200      	movs	r2, #0
 8000970:	76da      	strb	r2, [r3, #27]
    connect_data.MQTTVersion = 4;
 8000972:	4b71      	ldr	r3, [pc, #452]	@ (8000b38 <Task_MQTTHandler+0x1ec>)
 8000974:	2204      	movs	r2, #4
 8000976:	721a      	strb	r2, [r3, #8]
    connect_data.clientID.cstring = "HUBW5500";
 8000978:	4b6f      	ldr	r3, [pc, #444]	@ (8000b38 <Task_MQTTHandler+0x1ec>)
 800097a:	4a70      	ldr	r2, [pc, #448]	@ (8000b3c <Task_MQTTHandler+0x1f0>)
 800097c:	60da      	str	r2, [r3, #12]
    connect_data.username.cstring = "Nikhil";
 800097e:	4b6e      	ldr	r3, [pc, #440]	@ (8000b38 <Task_MQTTHandler+0x1ec>)
 8000980:	4a6f      	ldr	r2, [pc, #444]	@ (8000b40 <Task_MQTTHandler+0x1f4>)
 8000982:	641a      	str	r2, [r3, #64]	@ 0x40
    connect_data.password.cstring = "Nikhil8182";
 8000984:	4b6c      	ldr	r3, [pc, #432]	@ (8000b38 <Task_MQTTHandler+0x1ec>)
 8000986:	4a6f      	ldr	r2, [pc, #444]	@ (8000b44 <Task_MQTTHandler+0x1f8>)
 8000988:	64da      	str	r2, [r3, #76]	@ 0x4c
    connect_data.keepAliveInterval = 60; // seconds
 800098a:	4b6b      	ldr	r3, [pc, #428]	@ (8000b38 <Task_MQTTHandler+0x1ec>)
 800098c:	223c      	movs	r2, #60	@ 0x3c
 800098e:	831a      	strh	r2, [r3, #24]
    connect_data.cleansession = 1;
 8000990:	4b69      	ldr	r3, [pc, #420]	@ (8000b38 <Task_MQTTHandler+0x1ec>)
 8000992:	2201      	movs	r2, #1
 8000994:	769a      	strb	r2, [r3, #26]

    NewNetwork(&network, 1); // 1 is the socket number to use
 8000996:	2101      	movs	r1, #1
 8000998:	486b      	ldr	r0, [pc, #428]	@ (8000b48 <Task_MQTTHandler+0x1fc>)
 800099a:	f003 fd1f 	bl	80043dc <NewNetwork>
    DNS_init(SOCKET_ID_FOR_DNS, dns_buffer);
 800099e:	496b      	ldr	r1, [pc, #428]	@ (8000b4c <Task_MQTTHandler+0x200>)
 80009a0:	2006      	movs	r0, #6
 80009a2:	f002 fddb 	bl	800355c <DNS_init>

    while (StateChangeFlag == false)
 80009a6:	e001      	b.n	80009ac <Task_MQTTHandler+0x60>
    {
        DHCP_run();
 80009a8:	f001 fefa 	bl	80027a0 <DHCP_run>
    while (StateChangeFlag == false)
 80009ac:	4b68      	ldr	r3, [pc, #416]	@ (8000b50 <Task_MQTTHandler+0x204>)
 80009ae:	781b      	ldrb	r3, [r3, #0]
 80009b0:	f083 0301 	eor.w	r3, r3, #1
 80009b4:	b2db      	uxtb	r3, r3
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d1f6      	bne.n	80009a8 <Task_MQTTHandler+0x5c>
    }
    printf("Resolving hostname: %s\n", remote_host);
 80009ba:	4b66      	ldr	r3, [pc, #408]	@ (8000b54 <Task_MQTTHandler+0x208>)
 80009bc:	681b      	ldr	r3, [r3, #0]
 80009be:	4619      	mov	r1, r3
 80009c0:	4865      	ldr	r0, [pc, #404]	@ (8000b58 <Task_MQTTHandler+0x20c>)
 80009c2:	f00b fc13 	bl	800c1ec <iprintf>
      // MQTT Receive Loop
    while (1)
    {
    	if((tempflag== false)&&(StateChangeFlag == true))
 80009c6:	4b65      	ldr	r3, [pc, #404]	@ (8000b5c <Task_MQTTHandler+0x210>)
 80009c8:	781b      	ldrb	r3, [r3, #0]
 80009ca:	f083 0301 	eor.w	r3, r3, #1
 80009ce:	b2db      	uxtb	r3, r3
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d031      	beq.n	8000a38 <Task_MQTTHandler+0xec>
 80009d4:	4b5e      	ldr	r3, [pc, #376]	@ (8000b50 <Task_MQTTHandler+0x204>)
 80009d6:	781b      	ldrb	r3, [r3, #0]
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d02d      	beq.n	8000a38 <Task_MQTTHandler+0xec>
		{
			result = DNS_run(dns_ip, (uint8_t *)remote_host, remote_host_ip);
 80009dc:	4b5d      	ldr	r3, [pc, #372]	@ (8000b54 <Task_MQTTHandler+0x208>)
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	f107 0258 	add.w	r2, r7, #88	@ 0x58
 80009e4:	4619      	mov	r1, r3
 80009e6:	485e      	ldr	r0, [pc, #376]	@ (8000b60 <Task_MQTTHandler+0x214>)
 80009e8:	f002 fdd4 	bl	8003594 <DNS_run>
 80009ec:	4603      	mov	r3, r0
 80009ee:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			if(result!=1)
 80009f2:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80009f6:	2b01      	cmp	r3, #1
 80009f8:	d004      	beq.n	8000a04 <Task_MQTTHandler+0xb8>
			{
			printf("FAILED!");
 80009fa:	485a      	ldr	r0, [pc, #360]	@ (8000b64 <Task_MQTTHandler+0x218>)
 80009fc:	f00b fbf6 	bl	800c1ec <iprintf>
			while(1);
 8000a00:	bf00      	nop
 8000a02:	e7fd      	b.n	8000a00 <Task_MQTTHandler+0xb4>
			}
			printf("Success! The IP of %s is %d.%d.%d.%d", remote_host, remote_host_ip[0],
 8000a04:	4b53      	ldr	r3, [pc, #332]	@ (8000b54 <Task_MQTTHandler+0x208>)
 8000a06:	6819      	ldr	r1, [r3, #0]
 8000a08:	f897 3058 	ldrb.w	r3, [r7, #88]	@ 0x58
 8000a0c:	4618      	mov	r0, r3
			remote_host_ip[1], remote_host_ip[2], remote_host_ip[3]);
 8000a0e:	f897 3059 	ldrb.w	r3, [r7, #89]	@ 0x59
			printf("Success! The IP of %s is %d.%d.%d.%d", remote_host, remote_host_ip[0],
 8000a12:	461c      	mov	r4, r3
			remote_host_ip[1], remote_host_ip[2], remote_host_ip[3]);
 8000a14:	f897 305a 	ldrb.w	r3, [r7, #90]	@ 0x5a
 8000a18:	f897 205b 	ldrb.w	r2, [r7, #91]	@ 0x5b
			printf("Success! The IP of %s is %d.%d.%d.%d", remote_host, remote_host_ip[0],
 8000a1c:	9201      	str	r2, [sp, #4]
 8000a1e:	9300      	str	r3, [sp, #0]
 8000a20:	4623      	mov	r3, r4
 8000a22:	4602      	mov	r2, r0
 8000a24:	4850      	ldr	r0, [pc, #320]	@ (8000b68 <Task_MQTTHandler+0x21c>)
 8000a26:	f00b fbe1 	bl	800c1ec <iprintf>

			chk = 2;
 8000a2a:	4b50      	ldr	r3, [pc, #320]	@ (8000b6c <Task_MQTTHandler+0x220>)
 8000a2c:	2202      	movs	r2, #2
 8000a2e:	701a      	strb	r2, [r3, #0]
			tempflag = true;
 8000a30:	4b4a      	ldr	r3, [pc, #296]	@ (8000b5c <Task_MQTTHandler+0x210>)
 8000a32:	2201      	movs	r2, #1
 8000a34:	701a      	strb	r2, [r3, #0]
 8000a36:	e075      	b.n	8000b24 <Task_MQTTHandler+0x1d8>
		}
		else if( chk == 2)
 8000a38:	4b4c      	ldr	r3, [pc, #304]	@ (8000b6c <Task_MQTTHandler+0x220>)
 8000a3a:	781b      	ldrb	r3, [r3, #0]
 8000a3c:	2b02      	cmp	r3, #2
 8000a3e:	d131      	bne.n	8000aa4 <Task_MQTTHandler+0x158>
		{
			if(ConnectNetwork(&network, remote_host_ip, destination_port)!=SOCK_OK)
 8000a40:	4b4b      	ldr	r3, [pc, #300]	@ (8000b70 <Task_MQTTHandler+0x224>)
 8000a42:	881a      	ldrh	r2, [r3, #0]
 8000a44:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8000a48:	4619      	mov	r1, r3
 8000a4a:	483f      	ldr	r0, [pc, #252]	@ (8000b48 <Task_MQTTHandler+0x1fc>)
 8000a4c:	f003 fd43 	bl	80044d6 <ConnectNetwork>
 8000a50:	4603      	mov	r3, r0
 8000a52:	2b01      	cmp	r3, #1
 8000a54:	d004      	beq.n	8000a60 <Task_MQTTHandler+0x114>
			{
				printf("ERROR: Cannot connect with broker!\r\n");
 8000a56:	4847      	ldr	r0, [pc, #284]	@ (8000b74 <Task_MQTTHandler+0x228>)
 8000a58:	f00b fc30 	bl	800c2bc <puts>
				//Broker (server) not reachable
				while(1);
 8000a5c:	bf00      	nop
 8000a5e:	e7fd      	b.n	8000a5c <Task_MQTTHandler+0x110>
			}
			MQTTClientInit(&mqtt_client, &network, 1000, sendbuff, 256, receivebuff, 256);
 8000a60:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000a64:	9302      	str	r3, [sp, #8]
 8000a66:	4b44      	ldr	r3, [pc, #272]	@ (8000b78 <Task_MQTTHandler+0x22c>)
 8000a68:	9301      	str	r3, [sp, #4]
 8000a6a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000a6e:	9300      	str	r3, [sp, #0]
 8000a70:	4b42      	ldr	r3, [pc, #264]	@ (8000b7c <Task_MQTTHandler+0x230>)
 8000a72:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000a76:	4934      	ldr	r1, [pc, #208]	@ (8000b48 <Task_MQTTHandler+0x1fc>)
 8000a78:	4841      	ldr	r0, [pc, #260]	@ (8000b80 <Task_MQTTHandler+0x234>)
 8000a7a:	f002 fed9 	bl	8003830 <MQTTClientInit>

			if( MQTTConnect(&mqtt_client, &connect_data)!= MQTT_SUCCESS)
 8000a7e:	492e      	ldr	r1, [pc, #184]	@ (8000b38 <Task_MQTTHandler+0x1ec>)
 8000a80:	483f      	ldr	r0, [pc, #252]	@ (8000b80 <Task_MQTTHandler+0x234>)
 8000a82:	f003 fb17 	bl	80040b4 <MQTTConnect>
 8000a86:	4603      	mov	r3, r0
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d004      	beq.n	8000a96 <Task_MQTTHandler+0x14a>
			{
				printf("\n MQTT BROKER CONNECTION ERROR. . . \r\n");
 8000a8c:	483d      	ldr	r0, [pc, #244]	@ (8000b84 <Task_MQTTHandler+0x238>)
 8000a8e:	f00b fc15 	bl	800c2bc <puts>
				while(1);
 8000a92:	bf00      	nop
 8000a94:	e7fd      	b.n	8000a92 <Task_MQTTHandler+0x146>
			}
			printf("\n MQTT BROKER CONNECTION SUCCESS. . . \r\n");
 8000a96:	483c      	ldr	r0, [pc, #240]	@ (8000b88 <Task_MQTTHandler+0x23c>)
 8000a98:	f00b fc10 	bl	800c2bc <puts>
			chk = 3;
 8000a9c:	4b33      	ldr	r3, [pc, #204]	@ (8000b6c <Task_MQTTHandler+0x220>)
 8000a9e:	2203      	movs	r2, #3
 8000aa0:	701a      	strb	r2, [r3, #0]
 8000aa2:	e03f      	b.n	8000b24 <Task_MQTTHandler+0x1d8>
		}
		else if(chk == 3)
 8000aa4:	4b31      	ldr	r3, [pc, #196]	@ (8000b6c <Task_MQTTHandler+0x220>)
 8000aa6:	781b      	ldrb	r3, [r3, #0]
 8000aa8:	2b03      	cmp	r3, #3
 8000aaa:	d106      	bne.n	8000aba <Task_MQTTHandler+0x16e>
		{
			printf("PublishSuccess\r\n");
 8000aac:	4837      	ldr	r0, [pc, #220]	@ (8000b8c <Task_MQTTHandler+0x240>)
 8000aae:	f00b fc05 	bl	800c2bc <puts>
			//MQTTPublish(&mqtt_client, "test/topic1", &msg);
			//HAL_Delay(2000);
			chk = 4;
 8000ab2:	4b2e      	ldr	r3, [pc, #184]	@ (8000b6c <Task_MQTTHandler+0x220>)
 8000ab4:	2204      	movs	r2, #4
 8000ab6:	701a      	strb	r2, [r3, #0]
 8000ab8:	e034      	b.n	8000b24 <Task_MQTTHandler+0x1d8>
		}
		else if(chk == 4)
 8000aba:	4b2c      	ldr	r3, [pc, #176]	@ (8000b6c <Task_MQTTHandler+0x220>)
 8000abc:	781b      	ldrb	r3, [r3, #0]
 8000abe:	2b04      	cmp	r3, #4
 8000ac0:	d128      	bne.n	8000b14 <Task_MQTTHandler+0x1c8>
		{
			MQTTMessage received_message;
			received_message.payload = message_payload;
 8000ac2:	f107 0318 	add.w	r3, r7, #24
 8000ac6:	613b      	str	r3, [r7, #16]
			MQTTSubscribe(&mqtt_client, "onwords/wired001/status", QOS0, MessageArrivedHandler);
 8000ac8:	4b31      	ldr	r3, [pc, #196]	@ (8000b90 <Task_MQTTHandler+0x244>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	4931      	ldr	r1, [pc, #196]	@ (8000b94 <Task_MQTTHandler+0x248>)
 8000ace:	482c      	ldr	r0, [pc, #176]	@ (8000b80 <Task_MQTTHandler+0x234>)
 8000ad0:	f003 fbf9 	bl	80042c6 <MQTTSubscribe>
			MQTTSubscribe(&mqtt_client, "onwords/wired002/status", QOS0, MessageArrivedHandler);
 8000ad4:	4b2e      	ldr	r3, [pc, #184]	@ (8000b90 <Task_MQTTHandler+0x244>)
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	492f      	ldr	r1, [pc, #188]	@ (8000b98 <Task_MQTTHandler+0x24c>)
 8000ada:	4829      	ldr	r0, [pc, #164]	@ (8000b80 <Task_MQTTHandler+0x234>)
 8000adc:	f003 fbf3 	bl	80042c6 <MQTTSubscribe>
			if (osMessageQueuePut(mqttMessageQueueHandle, received_message.payload, 0, 0) == osOK)
 8000ae0:	4b2e      	ldr	r3, [pc, #184]	@ (8000b9c <Task_MQTTHandler+0x250>)
 8000ae2:	6818      	ldr	r0, [r3, #0]
 8000ae4:	6939      	ldr	r1, [r7, #16]
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	2200      	movs	r2, #0
 8000aea:	f008 fd6b 	bl	80095c4 <osMessageQueuePut>
 8000aee:	4603      	mov	r3, r0
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d105      	bne.n	8000b00 <Task_MQTTHandler+0x1b4>
			{
				printf("Message queued: %s\n", (char *)received_message.payload);
 8000af4:	693b      	ldr	r3, [r7, #16]
 8000af6:	4619      	mov	r1, r3
 8000af8:	4829      	ldr	r0, [pc, #164]	@ (8000ba0 <Task_MQTTHandler+0x254>)
 8000afa:	f00b fb77 	bl	800c1ec <iprintf>
 8000afe:	e002      	b.n	8000b06 <Task_MQTTHandler+0x1ba>
			}
			else
			{
				printf("Queue is full. Message dropped.\n");
 8000b00:	4828      	ldr	r0, [pc, #160]	@ (8000ba4 <Task_MQTTHandler+0x258>)
 8000b02:	f00b fbdb 	bl	800c2bc <puts>
			}
			printf("Subscribed >>>>>>>>>>>>>>\r\n");
 8000b06:	4828      	ldr	r0, [pc, #160]	@ (8000ba8 <Task_MQTTHandler+0x25c>)
 8000b08:	f00b fbd8 	bl	800c2bc <puts>
			chk = 5;
 8000b0c:	4b17      	ldr	r3, [pc, #92]	@ (8000b6c <Task_MQTTHandler+0x220>)
 8000b0e:	2205      	movs	r2, #5
 8000b10:	701a      	strb	r2, [r3, #0]
 8000b12:	e007      	b.n	8000b24 <Task_MQTTHandler+0x1d8>
		}
		else if( chk == 5)
 8000b14:	4b15      	ldr	r3, [pc, #84]	@ (8000b6c <Task_MQTTHandler+0x220>)
 8000b16:	781b      	ldrb	r3, [r3, #0]
 8000b18:	2b05      	cmp	r3, #5
 8000b1a:	d103      	bne.n	8000b24 <Task_MQTTHandler+0x1d8>
		{
			//Transfer conton to Paho for 250 milliseconds
			MQTTYield(&mqtt_client, 250);
 8000b1c:	21fa      	movs	r1, #250	@ 0xfa
 8000b1e:	4818      	ldr	r0, [pc, #96]	@ (8000b80 <Task_MQTTHandler+0x234>)
 8000b20:	f003 f9e6 	bl	8003ef0 <MQTTYield>
			//SpiDataCHK();
			//printf("checkwhile\r\n");
			//MQTTPublish(&mqtt_client, "test/topic1", &msg);
		}
    	//MQTTYield(&mqtt_client, 250);
        osDelay(100);
 8000b24:	2064      	movs	r0, #100	@ 0x64
 8000b26:	f008 fcbf 	bl	80094a8 <osDelay>
    	if((tempflag== false)&&(StateChangeFlag == true))
 8000b2a:	e74c      	b.n	80009c6 <Task_MQTTHandler+0x7a>
 8000b2c:	200001fc 	.word	0x200001fc
 8000b30:	08000f45 	.word	0x08000f45
 8000b34:	0800d150 	.word	0x0800d150
 8000b38:	20000004 	.word	0x20000004
 8000b3c:	0800d16c 	.word	0x0800d16c
 8000b40:	0800d178 	.word	0x0800d178
 8000b44:	0800d180 	.word	0x0800d180
 8000b48:	20000a64 	.word	0x20000a64
 8000b4c:	20000c74 	.word	0x20000c74
 8000b50:	20000dc4 	.word	0x20000dc4
 8000b54:	20000078 	.word	0x20000078
 8000b58:	0800d18c 	.word	0x0800d18c
 8000b5c:	20000d74 	.word	0x20000d74
 8000b60:	20000074 	.word	0x20000074
 8000b64:	0800d1a4 	.word	0x0800d1a4
 8000b68:	0800d1ac 	.word	0x0800d1ac
 8000b6c:	2000007c 	.word	0x2000007c
 8000b70:	20000000 	.word	0x20000000
 8000b74:	0800d1d4 	.word	0x0800d1d4
 8000b78:	20000b74 	.word	0x20000b74
 8000b7c:	20000a74 	.word	0x20000a74
 8000b80:	200009fc 	.word	0x200009fc
 8000b84:	0800d1f8 	.word	0x0800d1f8
 8000b88:	0800d220 	.word	0x0800d220
 8000b8c:	0800d248 	.word	0x0800d248
 8000b90:	08000bad 	.word	0x08000bad
 8000b94:	0800d258 	.word	0x0800d258
 8000b98:	0800d270 	.word	0x0800d270
 8000b9c:	200001f8 	.word	0x200001f8
 8000ba0:	0800d288 	.word	0x0800d288
 8000ba4:	0800d29c 	.word	0x0800d29c
 8000ba8:	0800d2bc 	.word	0x0800d2bc

08000bac <MessageArrivedHandler>:
    }
}

void MessageArrivedHandler(MessageData *data)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b0a4      	sub	sp, #144	@ 0x90
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	6078      	str	r0, [r7, #4]
    char received_payload[64];
    char topic_name[64];

    strncpy(topic_name, data->topicName->lenstring.data, data->topicName->lenstring.len);
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	685b      	ldr	r3, [r3, #4]
 8000bb8:	6899      	ldr	r1, [r3, #8]
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	685b      	ldr	r3, [r3, #4]
 8000bbe:	685b      	ldr	r3, [r3, #4]
 8000bc0:	461a      	mov	r2, r3
 8000bc2:	f107 030c 	add.w	r3, r7, #12
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	f00b fc7f 	bl	800c4ca <strncpy>
    topic_name[data->topicName->lenstring.len] = '\0';
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	685b      	ldr	r3, [r3, #4]
 8000bd0:	685b      	ldr	r3, [r3, #4]
 8000bd2:	3390      	adds	r3, #144	@ 0x90
 8000bd4:	443b      	add	r3, r7
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	f803 2c84 	strb.w	r2, [r3, #-132]

    strncpy(received_payload, data->message->payload, data->message->payloadlen);
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	6899      	ldr	r1, [r3, #8]
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	68da      	ldr	r2, [r3, #12]
 8000be8:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000bec:	4618      	mov	r0, r3
 8000bee:	f00b fc6c 	bl	800c4ca <strncpy>
    received_payload[data->message->payloadlen] = '\0';
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	68db      	ldr	r3, [r3, #12]
 8000bf8:	3390      	adds	r3, #144	@ 0x90
 8000bfa:	443b      	add	r3, r7
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	f803 2c44 	strb.w	r2, [r3, #-68]

    for (int i = strlen(received_payload) - 1; i >= 0; i--)
 8000c02:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000c06:	4618      	mov	r0, r3
 8000c08:	f7ff faf4 	bl	80001f4 <strlen>
 8000c0c:	4603      	mov	r3, r0
 8000c0e:	3b01      	subs	r3, #1
 8000c10:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8000c14:	e023      	b.n	8000c5e <MessageArrivedHandler+0xb2>
    {
        if (received_payload[i] == '\r' || received_payload[i] == '\n' || received_payload[i] == ' ')
 8000c16:	f107 024c 	add.w	r2, r7, #76	@ 0x4c
 8000c1a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8000c1e:	4413      	add	r3, r2
 8000c20:	781b      	ldrb	r3, [r3, #0]
 8000c22:	2b0d      	cmp	r3, #13
 8000c24:	d00f      	beq.n	8000c46 <MessageArrivedHandler+0x9a>
 8000c26:	f107 024c 	add.w	r2, r7, #76	@ 0x4c
 8000c2a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8000c2e:	4413      	add	r3, r2
 8000c30:	781b      	ldrb	r3, [r3, #0]
 8000c32:	2b0a      	cmp	r3, #10
 8000c34:	d007      	beq.n	8000c46 <MessageArrivedHandler+0x9a>
 8000c36:	f107 024c 	add.w	r2, r7, #76	@ 0x4c
 8000c3a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8000c3e:	4413      	add	r3, r2
 8000c40:	781b      	ldrb	r3, [r3, #0]
 8000c42:	2b20      	cmp	r3, #32
 8000c44:	d10f      	bne.n	8000c66 <MessageArrivedHandler+0xba>
        {
            received_payload[i] = '\0';
 8000c46:	f107 024c 	add.w	r2, r7, #76	@ 0x4c
 8000c4a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8000c4e:	4413      	add	r3, r2
 8000c50:	2200      	movs	r2, #0
 8000c52:	701a      	strb	r2, [r3, #0]
    for (int i = strlen(received_payload) - 1; i >= 0; i--)
 8000c54:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8000c58:	3b01      	subs	r3, #1
 8000c5a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8000c5e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	dad7      	bge.n	8000c16 <MessageArrivedHandler+0x6a>
        {
            break;
        }
    }

    printf("Message arrived on topic %s: %s\n", topic_name, received_payload);
 8000c66:	f107 024c 	add.w	r2, r7, #76	@ 0x4c
 8000c6a:	f107 030c 	add.w	r3, r7, #12
 8000c6e:	4619      	mov	r1, r3
 8000c70:	4860      	ldr	r0, [pc, #384]	@ (8000df4 <MessageArrivedHandler+0x248>)
 8000c72:	f00b fabb 	bl	800c1ec <iprintf>

	// Process the message based on the topic
	if (strcmp(topic_name, "onwords/wired001/status") == 0)
 8000c76:	f107 030c 	add.w	r3, r7, #12
 8000c7a:	495f      	ldr	r1, [pc, #380]	@ (8000df8 <MessageArrivedHandler+0x24c>)
 8000c7c:	4618      	mov	r0, r3
 8000c7e:	f7ff faaf 	bl	80001e0 <strcmp>
 8000c82:	4603      	mov	r3, r0
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d14d      	bne.n	8000d24 <MessageArrivedHandler+0x178>
	{
		if (strcmp(received_payload, "RELAY1") == 0)
 8000c88:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000c8c:	495b      	ldr	r1, [pc, #364]	@ (8000dfc <MessageArrivedHandler+0x250>)
 8000c8e:	4618      	mov	r0, r3
 8000c90:	f7ff faa6 	bl	80001e0 <strcmp>
 8000c94:	4603      	mov	r3, r0
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d108      	bne.n	8000cac <MessageArrivedHandler+0x100>
		{
			HAL_GPIO_TogglePin(RELAY1_GPIO_Port, RELAY1_Pin);
 8000c9a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000c9e:	4858      	ldr	r0, [pc, #352]	@ (8000e00 <MessageArrivedHandler+0x254>)
 8000ca0:	f006 fef5 	bl	8007a8e <HAL_GPIO_TogglePin>
			printf("Relay 1 toggled (Topic 1)\n");
 8000ca4:	4857      	ldr	r0, [pc, #348]	@ (8000e04 <MessageArrivedHandler+0x258>)
 8000ca6:	f00b fb09 	bl	800c2bc <puts>
 8000caa:	e091      	b.n	8000dd0 <MessageArrivedHandler+0x224>
		}
		else if (strcmp(received_payload, "RELAY2") == 0)
 8000cac:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000cb0:	4955      	ldr	r1, [pc, #340]	@ (8000e08 <MessageArrivedHandler+0x25c>)
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	f7ff fa94 	bl	80001e0 <strcmp>
 8000cb8:	4603      	mov	r3, r0
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d108      	bne.n	8000cd0 <MessageArrivedHandler+0x124>
		{
			HAL_GPIO_TogglePin(RELAY2_GPIO_Port, RELAY2_Pin);
 8000cbe:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000cc2:	484f      	ldr	r0, [pc, #316]	@ (8000e00 <MessageArrivedHandler+0x254>)
 8000cc4:	f006 fee3 	bl	8007a8e <HAL_GPIO_TogglePin>
			printf("Relay 2 toggled (Topic 1)\n");
 8000cc8:	4850      	ldr	r0, [pc, #320]	@ (8000e0c <MessageArrivedHandler+0x260>)
 8000cca:	f00b faf7 	bl	800c2bc <puts>
 8000cce:	e07f      	b.n	8000dd0 <MessageArrivedHandler+0x224>
		}
		else if (strcmp(received_payload, "RELAY3") == 0)
 8000cd0:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000cd4:	494e      	ldr	r1, [pc, #312]	@ (8000e10 <MessageArrivedHandler+0x264>)
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	f7ff fa82 	bl	80001e0 <strcmp>
 8000cdc:	4603      	mov	r3, r0
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d107      	bne.n	8000cf2 <MessageArrivedHandler+0x146>
		{
			HAL_GPIO_TogglePin(RELAY3_GPIO_Port, RELAY3_Pin);
 8000ce2:	2140      	movs	r1, #64	@ 0x40
 8000ce4:	4846      	ldr	r0, [pc, #280]	@ (8000e00 <MessageArrivedHandler+0x254>)
 8000ce6:	f006 fed2 	bl	8007a8e <HAL_GPIO_TogglePin>
			printf("Relay 3 toggled (Topic 1)\n");
 8000cea:	484a      	ldr	r0, [pc, #296]	@ (8000e14 <MessageArrivedHandler+0x268>)
 8000cec:	f00b fae6 	bl	800c2bc <puts>
 8000cf0:	e06e      	b.n	8000dd0 <MessageArrivedHandler+0x224>
		}
		else if (strcmp(received_payload, "RELAY4") == 0)
 8000cf2:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000cf6:	4948      	ldr	r1, [pc, #288]	@ (8000e18 <MessageArrivedHandler+0x26c>)
 8000cf8:	4618      	mov	r0, r3
 8000cfa:	f7ff fa71 	bl	80001e0 <strcmp>
 8000cfe:	4603      	mov	r3, r0
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d108      	bne.n	8000d16 <MessageArrivedHandler+0x16a>
		{
			HAL_GPIO_TogglePin(RELAY4_GPIO_Port, RELAY4_Pin);
 8000d04:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000d08:	4844      	ldr	r0, [pc, #272]	@ (8000e1c <MessageArrivedHandler+0x270>)
 8000d0a:	f006 fec0 	bl	8007a8e <HAL_GPIO_TogglePin>
			printf("Relay 4 toggled (Topic 1)\n");
 8000d0e:	4844      	ldr	r0, [pc, #272]	@ (8000e20 <MessageArrivedHandler+0x274>)
 8000d10:	f00b fad4 	bl	800c2bc <puts>
 8000d14:	e05c      	b.n	8000dd0 <MessageArrivedHandler+0x224>
		}
		else
		{
			printf("Unknown command on topic 1: %s\n", received_payload);
 8000d16:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000d1a:	4619      	mov	r1, r3
 8000d1c:	4841      	ldr	r0, [pc, #260]	@ (8000e24 <MessageArrivedHandler+0x278>)
 8000d1e:	f00b fa65 	bl	800c1ec <iprintf>
 8000d22:	e055      	b.n	8000dd0 <MessageArrivedHandler+0x224>
		}
	}
	else if (strcmp(topic_name, "onwords/wired002/status") == 0)
 8000d24:	f107 030c 	add.w	r3, r7, #12
 8000d28:	493f      	ldr	r1, [pc, #252]	@ (8000e28 <MessageArrivedHandler+0x27c>)
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	f7ff fa58 	bl	80001e0 <strcmp>
 8000d30:	4603      	mov	r3, r0
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d14c      	bne.n	8000dd0 <MessageArrivedHandler+0x224>
	{
		if (strcmp(received_payload, "RELAY1") == 0)
 8000d36:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000d3a:	4930      	ldr	r1, [pc, #192]	@ (8000dfc <MessageArrivedHandler+0x250>)
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	f7ff fa4f 	bl	80001e0 <strcmp>
 8000d42:	4603      	mov	r3, r0
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d108      	bne.n	8000d5a <MessageArrivedHandler+0x1ae>
		{
			HAL_GPIO_TogglePin(RELAY5_GPIO_Port, RELAY5_Pin);
 8000d48:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000d4c:	4833      	ldr	r0, [pc, #204]	@ (8000e1c <MessageArrivedHandler+0x270>)
 8000d4e:	f006 fe9e 	bl	8007a8e <HAL_GPIO_TogglePin>
			printf("Relay 1 toggled (Topic 2)\n");
 8000d52:	4836      	ldr	r0, [pc, #216]	@ (8000e2c <MessageArrivedHandler+0x280>)
 8000d54:	f00b fab2 	bl	800c2bc <puts>
 8000d58:	e03a      	b.n	8000dd0 <MessageArrivedHandler+0x224>
		}
		else if (strcmp(received_payload, "RELAY2") == 0)
 8000d5a:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000d5e:	492a      	ldr	r1, [pc, #168]	@ (8000e08 <MessageArrivedHandler+0x25c>)
 8000d60:	4618      	mov	r0, r3
 8000d62:	f7ff fa3d 	bl	80001e0 <strcmp>
 8000d66:	4603      	mov	r3, r0
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d107      	bne.n	8000d7c <MessageArrivedHandler+0x1d0>
		{
			HAL_GPIO_TogglePin(RELAY6_GPIO_Port, RELAY6_Pin);
 8000d6c:	2120      	movs	r1, #32
 8000d6e:	4824      	ldr	r0, [pc, #144]	@ (8000e00 <MessageArrivedHandler+0x254>)
 8000d70:	f006 fe8d 	bl	8007a8e <HAL_GPIO_TogglePin>
			printf("Relay 2 toggled (Topic 2)\n");
 8000d74:	482e      	ldr	r0, [pc, #184]	@ (8000e30 <MessageArrivedHandler+0x284>)
 8000d76:	f00b faa1 	bl	800c2bc <puts>
 8000d7a:	e029      	b.n	8000dd0 <MessageArrivedHandler+0x224>
		}
		else if (strcmp(received_payload, "RELAY3") == 0)
 8000d7c:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000d80:	4923      	ldr	r1, [pc, #140]	@ (8000e10 <MessageArrivedHandler+0x264>)
 8000d82:	4618      	mov	r0, r3
 8000d84:	f7ff fa2c 	bl	80001e0 <strcmp>
 8000d88:	4603      	mov	r3, r0
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d108      	bne.n	8000da0 <MessageArrivedHandler+0x1f4>
		{
			HAL_GPIO_TogglePin(RELAY7_GPIO_Port, RELAY7_Pin);
 8000d8e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000d92:	4828      	ldr	r0, [pc, #160]	@ (8000e34 <MessageArrivedHandler+0x288>)
 8000d94:	f006 fe7b 	bl	8007a8e <HAL_GPIO_TogglePin>
			printf("Relay 3 toggled (Topic 2)\n");
 8000d98:	4827      	ldr	r0, [pc, #156]	@ (8000e38 <MessageArrivedHandler+0x28c>)
 8000d9a:	f00b fa8f 	bl	800c2bc <puts>
 8000d9e:	e017      	b.n	8000dd0 <MessageArrivedHandler+0x224>
		}
		else if (strcmp(received_payload, "RELAY4") == 0)
 8000da0:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000da4:	491c      	ldr	r1, [pc, #112]	@ (8000e18 <MessageArrivedHandler+0x26c>)
 8000da6:	4618      	mov	r0, r3
 8000da8:	f7ff fa1a 	bl	80001e0 <strcmp>
 8000dac:	4603      	mov	r3, r0
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d108      	bne.n	8000dc4 <MessageArrivedHandler+0x218>
		{
			HAL_GPIO_TogglePin(RELAY8_GPIO_Port, RELAY8_Pin);
 8000db2:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000db6:	481f      	ldr	r0, [pc, #124]	@ (8000e34 <MessageArrivedHandler+0x288>)
 8000db8:	f006 fe69 	bl	8007a8e <HAL_GPIO_TogglePin>
			printf("Relay 4 toggled (Topic 2)\n");
 8000dbc:	481f      	ldr	r0, [pc, #124]	@ (8000e3c <MessageArrivedHandler+0x290>)
 8000dbe:	f00b fa7d 	bl	800c2bc <puts>
 8000dc2:	e005      	b.n	8000dd0 <MessageArrivedHandler+0x224>
		}
		else
		{
			printf("Unknown command on topic 2: %s\n", received_payload);
 8000dc4:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000dc8:	4619      	mov	r1, r3
 8000dca:	481d      	ldr	r0, [pc, #116]	@ (8000e40 <MessageArrivedHandler+0x294>)
 8000dcc:	f00b fa0e 	bl	800c1ec <iprintf>
		}
	}

    if (osMessageQueuePut(mqttMessageQueueHandle, &received_payload, 0, 0) != osOK)
 8000dd0:	4b1c      	ldr	r3, [pc, #112]	@ (8000e44 <MessageArrivedHandler+0x298>)
 8000dd2:	6818      	ldr	r0, [r3, #0]
 8000dd4:	f107 014c 	add.w	r1, r7, #76	@ 0x4c
 8000dd8:	2300      	movs	r3, #0
 8000dda:	2200      	movs	r2, #0
 8000ddc:	f008 fbf2 	bl	80095c4 <osMessageQueuePut>
 8000de0:	4603      	mov	r3, r0
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d002      	beq.n	8000dec <MessageArrivedHandler+0x240>
    {
        printf("Queue is full. Message dropped.\n");
 8000de6:	4818      	ldr	r0, [pc, #96]	@ (8000e48 <MessageArrivedHandler+0x29c>)
 8000de8:	f00b fa68 	bl	800c2bc <puts>
    }
}
 8000dec:	bf00      	nop
 8000dee:	3790      	adds	r7, #144	@ 0x90
 8000df0:	46bd      	mov	sp, r7
 8000df2:	bd80      	pop	{r7, pc}
 8000df4:	0800d2d8 	.word	0x0800d2d8
 8000df8:	0800d258 	.word	0x0800d258
 8000dfc:	0800d2fc 	.word	0x0800d2fc
 8000e00:	40020800 	.word	0x40020800
 8000e04:	0800d304 	.word	0x0800d304
 8000e08:	0800d320 	.word	0x0800d320
 8000e0c:	0800d328 	.word	0x0800d328
 8000e10:	0800d344 	.word	0x0800d344
 8000e14:	0800d34c 	.word	0x0800d34c
 8000e18:	0800d368 	.word	0x0800d368
 8000e1c:	40020400 	.word	0x40020400
 8000e20:	0800d370 	.word	0x0800d370
 8000e24:	0800d38c 	.word	0x0800d38c
 8000e28:	0800d270 	.word	0x0800d270
 8000e2c:	0800d3ac 	.word	0x0800d3ac
 8000e30:	0800d3c8 	.word	0x0800d3c8
 8000e34:	40020000 	.word	0x40020000
 8000e38:	0800d3e4 	.word	0x0800d3e4
 8000e3c:	0800d400 	.word	0x0800d400
 8000e40:	0800d41c 	.word	0x0800d41c
 8000e44:	200001f8 	.word	0x200001f8
 8000e48:	0800d29c 	.word	0x0800d29c

08000e4c <__io_putchar>:
    }
}

#define PUTCHAR  int __io_putchar(int ch)
PUTCHAR
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b082      	sub	sp, #8
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 8000e54:	1d39      	adds	r1, r7, #4
 8000e56:	f04f 33ff 	mov.w	r3, #4294967295
 8000e5a:	2201      	movs	r2, #1
 8000e5c:	4803      	ldr	r0, [pc, #12]	@ (8000e6c <__io_putchar+0x20>)
 8000e5e:	f007 fe47 	bl	8008af0 <HAL_UART_Transmit>
	return ch;
 8000e62:	687b      	ldr	r3, [r7, #4]
}
 8000e64:	4618      	mov	r0, r3
 8000e66:	3708      	adds	r7, #8
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	bd80      	pop	{r7, pc}
 8000e6c:	200001ac 	.word	0x200001ac

08000e70 <PHYStatusCheck>:

void PHYStatusCheck(void)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b082      	sub	sp, #8
 8000e74:	af00      	add	r7, sp, #0
	uint8_t tmp;
	do
	{
		printf("\r\nChecking Ethernet Cable Presence ...");
 8000e76:	480e      	ldr	r0, [pc, #56]	@ (8000eb0 <PHYStatusCheck+0x40>)
 8000e78:	f00b f9b8 	bl	800c1ec <iprintf>
		ctlwizchip(CW_GET_PHYLINK, (void*) &tmp);
 8000e7c:	1dfb      	adds	r3, r7, #7
 8000e7e:	4619      	mov	r1, r3
 8000e80:	200f      	movs	r0, #15
 8000e82:	f005 fe2f 	bl	8006ae4 <ctlwizchip>

		if(tmp == PHY_LINK_OFF)
 8000e86:	79fb      	ldrb	r3, [r7, #7]
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d106      	bne.n	8000e9a <PHYStatusCheck+0x2a>
		{
			printf("NO Cable Connected!");
 8000e8c:	4809      	ldr	r0, [pc, #36]	@ (8000eb4 <PHYStatusCheck+0x44>)
 8000e8e:	f00b f9ad 	bl	800c1ec <iprintf>
			HAL_Delay(1500);
 8000e92:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 8000e96:	f006 fb57 	bl	8007548 <HAL_Delay>
		}
	}while(tmp == PHY_LINK_OFF);
 8000e9a:	79fb      	ldrb	r3, [r7, #7]
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d0ea      	beq.n	8000e76 <PHYStatusCheck+0x6>

	printf("Good! Cable got connected!");
 8000ea0:	4805      	ldr	r0, [pc, #20]	@ (8000eb8 <PHYStatusCheck+0x48>)
 8000ea2:	f00b f9a3 	bl	800c1ec <iprintf>
}
 8000ea6:	bf00      	nop
 8000ea8:	3708      	adds	r7, #8
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	bd80      	pop	{r7, pc}
 8000eae:	bf00      	nop
 8000eb0:	0800d454 	.word	0x0800d454
 8000eb4:	0800d47c 	.word	0x0800d47c
 8000eb8:	0800d490 	.word	0x0800d490

08000ebc <PrintPHYConf>:

void PrintPHYConf(void)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b082      	sub	sp, #8
 8000ec0:	af00      	add	r7, sp, #0
	wiz_PhyConf phyconf;

	ctlwizchip(CW_GET_PHYCONF, (void*) &phyconf);
 8000ec2:	1d3b      	adds	r3, r7, #4
 8000ec4:	4619      	mov	r1, r3
 8000ec6:	200b      	movs	r0, #11
 8000ec8:	f005 fe0c 	bl	8006ae4 <ctlwizchip>

	if(phyconf.by==PHY_CONFBY_HW)
 8000ecc:	793b      	ldrb	r3, [r7, #4]
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d103      	bne.n	8000eda <PrintPHYConf+0x1e>
	{
		printf("\n\rPHY Configured by Hardware Pins");
 8000ed2:	4814      	ldr	r0, [pc, #80]	@ (8000f24 <PrintPHYConf+0x68>)
 8000ed4:	f00b f98a 	bl	800c1ec <iprintf>
 8000ed8:	e002      	b.n	8000ee0 <PrintPHYConf+0x24>
	}
	else
	{
		printf("\n\rPHY Configured by Registers");
 8000eda:	4813      	ldr	r0, [pc, #76]	@ (8000f28 <PrintPHYConf+0x6c>)
 8000edc:	f00b f986 	bl	800c1ec <iprintf>
	}

	if(phyconf.mode==PHY_MODE_AUTONEGO)
 8000ee0:	797b      	ldrb	r3, [r7, #5]
 8000ee2:	2b01      	cmp	r3, #1
 8000ee4:	d103      	bne.n	8000eee <PrintPHYConf+0x32>
	{
		printf("\n\rAutonegotiation Enabled");
 8000ee6:	4811      	ldr	r0, [pc, #68]	@ (8000f2c <PrintPHYConf+0x70>)
 8000ee8:	f00b f980 	bl	800c1ec <iprintf>
 8000eec:	e002      	b.n	8000ef4 <PrintPHYConf+0x38>
	}
	else
	{
		printf("\n\rAutonegotiation NOT Enabled");
 8000eee:	4810      	ldr	r0, [pc, #64]	@ (8000f30 <PrintPHYConf+0x74>)
 8000ef0:	f00b f97c 	bl	800c1ec <iprintf>
	}

	if(phyconf.duplex==PHY_DUPLEX_FULL)
 8000ef4:	79fb      	ldrb	r3, [r7, #7]
 8000ef6:	2b01      	cmp	r3, #1
 8000ef8:	d103      	bne.n	8000f02 <PrintPHYConf+0x46>
	{
		printf("\n\rDuplex Mode: Full");
 8000efa:	480e      	ldr	r0, [pc, #56]	@ (8000f34 <PrintPHYConf+0x78>)
 8000efc:	f00b f976 	bl	800c1ec <iprintf>
 8000f00:	e002      	b.n	8000f08 <PrintPHYConf+0x4c>
	}
	else
	{
		printf("\n\rDuplex Mode: Half");
 8000f02:	480d      	ldr	r0, [pc, #52]	@ (8000f38 <PrintPHYConf+0x7c>)
 8000f04:	f00b f972 	bl	800c1ec <iprintf>
	}

	if(phyconf.speed==PHY_SPEED_10)
 8000f08:	79bb      	ldrb	r3, [r7, #6]
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d103      	bne.n	8000f16 <PrintPHYConf+0x5a>
	{
		printf("\n\rSpeed: 10Mbps");
 8000f0e:	480b      	ldr	r0, [pc, #44]	@ (8000f3c <PrintPHYConf+0x80>)
 8000f10:	f00b f96c 	bl	800c1ec <iprintf>
	}
	else
	{
		printf("\n\rSpeed: 100Mbps");
	}
}
 8000f14:	e002      	b.n	8000f1c <PrintPHYConf+0x60>
		printf("\n\rSpeed: 100Mbps");
 8000f16:	480a      	ldr	r0, [pc, #40]	@ (8000f40 <PrintPHYConf+0x84>)
 8000f18:	f00b f968 	bl	800c1ec <iprintf>
}
 8000f1c:	bf00      	nop
 8000f1e:	3708      	adds	r7, #8
 8000f20:	46bd      	mov	sp, r7
 8000f22:	bd80      	pop	{r7, pc}
 8000f24:	0800d4ac 	.word	0x0800d4ac
 8000f28:	0800d4d0 	.word	0x0800d4d0
 8000f2c:	0800d4f0 	.word	0x0800d4f0
 8000f30:	0800d50c 	.word	0x0800d50c
 8000f34:	0800d52c 	.word	0x0800d52c
 8000f38:	0800d540 	.word	0x0800d540
 8000f3c:	0800d554 	.word	0x0800d554
 8000f40:	0800d564 	.word	0x0800d564

08000f44 <OnDHCPIPAssigned>:

void OnDHCPIPAssigned(void)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	af00      	add	r7, sp, #0

	printf("IP Obtained: \r\n");
 8000f48:	480c      	ldr	r0, [pc, #48]	@ (8000f7c <OnDHCPIPAssigned+0x38>)
 8000f4a:	f00b f9b7 	bl	800c2bc <puts>

	getIPfromDHCP(gWIZNETINFO.ip);
 8000f4e:	480c      	ldr	r0, [pc, #48]	@ (8000f80 <OnDHCPIPAssigned+0x3c>)
 8000f50:	f001 fece 	bl	8002cf0 <getIPfromDHCP>
	getGWfromDHCP(gWIZNETINFO.gw);
 8000f54:	480b      	ldr	r0, [pc, #44]	@ (8000f84 <OnDHCPIPAssigned+0x40>)
 8000f56:	f001 feeb 	bl	8002d30 <getGWfromDHCP>
	getSNfromDHCP(gWIZNETINFO.sn);
 8000f5a:	480b      	ldr	r0, [pc, #44]	@ (8000f88 <OnDHCPIPAssigned+0x44>)
 8000f5c:	f001 ff08 	bl	8002d70 <getSNfromDHCP>
	getDNSfromDHCP(gWIZNETINFO.dns);
 8000f60:	480a      	ldr	r0, [pc, #40]	@ (8000f8c <OnDHCPIPAssigned+0x48>)
 8000f62:	f001 ff25 	bl	8002db0 <getDNSfromDHCP>

	gWIZNETINFO.dhcp = NETINFO_DHCP;
 8000f66:	4b0a      	ldr	r3, [pc, #40]	@ (8000f90 <OnDHCPIPAssigned+0x4c>)
 8000f68:	2202      	movs	r2, #2
 8000f6a:	759a      	strb	r2, [r3, #22]

	ctlnetwork(CN_SET_NETINFO, (void*) &gWIZNETINFO);
 8000f6c:	4908      	ldr	r1, [pc, #32]	@ (8000f90 <OnDHCPIPAssigned+0x4c>)
 8000f6e:	2000      	movs	r0, #0
 8000f70:	f005 fe98 	bl	8006ca4 <ctlnetwork>

	DisplayNetworkConfigurations();
 8000f74:	f000 f80e 	bl	8000f94 <DisplayNetworkConfigurations>
}
 8000f78:	bf00      	nop
 8000f7a:	bd80      	pop	{r7, pc}
 8000f7c:	0800d578 	.word	0x0800d578
 8000f80:	20000062 	.word	0x20000062
 8000f84:	2000006a 	.word	0x2000006a
 8000f88:	20000066 	.word	0x20000066
 8000f8c:	2000006e 	.word	0x2000006e
 8000f90:	2000005c 	.word	0x2000005c

08000f94 <DisplayNetworkConfigurations>:


void DisplayNetworkConfigurations()
{
 8000f94:	b5b0      	push	{r4, r5, r7, lr}
 8000f96:	b084      	sub	sp, #16
 8000f98:	af04      	add	r7, sp, #16
	ctlnetwork(CN_GET_NETINFO, (void*) &gWIZNETINFO);
 8000f9a:	492a      	ldr	r1, [pc, #168]	@ (8001044 <DisplayNetworkConfigurations+0xb0>)
 8000f9c:	2001      	movs	r0, #1
 8000f9e:	f005 fe81 	bl	8006ca4 <ctlnetwork>

	printf(" MAC : %02X:%02X:%02X:%02X:%02X:%02X\r\n", gWIZNETINFO.mac[0], gWIZNETINFO.mac[1], gWIZNETINFO.mac[2], gWIZNETINFO.mac[3], gWIZNETINFO.mac[4], gWIZNETINFO.mac[5]);
 8000fa2:	4b28      	ldr	r3, [pc, #160]	@ (8001044 <DisplayNetworkConfigurations+0xb0>)
 8000fa4:	781b      	ldrb	r3, [r3, #0]
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	4b26      	ldr	r3, [pc, #152]	@ (8001044 <DisplayNetworkConfigurations+0xb0>)
 8000faa:	785b      	ldrb	r3, [r3, #1]
 8000fac:	461c      	mov	r4, r3
 8000fae:	4b25      	ldr	r3, [pc, #148]	@ (8001044 <DisplayNetworkConfigurations+0xb0>)
 8000fb0:	789b      	ldrb	r3, [r3, #2]
 8000fb2:	461d      	mov	r5, r3
 8000fb4:	4b23      	ldr	r3, [pc, #140]	@ (8001044 <DisplayNetworkConfigurations+0xb0>)
 8000fb6:	78db      	ldrb	r3, [r3, #3]
 8000fb8:	461a      	mov	r2, r3
 8000fba:	4b22      	ldr	r3, [pc, #136]	@ (8001044 <DisplayNetworkConfigurations+0xb0>)
 8000fbc:	791b      	ldrb	r3, [r3, #4]
 8000fbe:	4619      	mov	r1, r3
 8000fc0:	4b20      	ldr	r3, [pc, #128]	@ (8001044 <DisplayNetworkConfigurations+0xb0>)
 8000fc2:	795b      	ldrb	r3, [r3, #5]
 8000fc4:	9302      	str	r3, [sp, #8]
 8000fc6:	9101      	str	r1, [sp, #4]
 8000fc8:	9200      	str	r2, [sp, #0]
 8000fca:	462b      	mov	r3, r5
 8000fcc:	4622      	mov	r2, r4
 8000fce:	4601      	mov	r1, r0
 8000fd0:	481d      	ldr	r0, [pc, #116]	@ (8001048 <DisplayNetworkConfigurations+0xb4>)
 8000fd2:	f00b f90b 	bl	800c1ec <iprintf>
	printf(" IP : %d.%d.%d.%d\r\n", gWIZNETINFO.ip[0], gWIZNETINFO.ip[1], gWIZNETINFO.ip[2], gWIZNETINFO.ip[3]);
 8000fd6:	4b1b      	ldr	r3, [pc, #108]	@ (8001044 <DisplayNetworkConfigurations+0xb0>)
 8000fd8:	799b      	ldrb	r3, [r3, #6]
 8000fda:	4619      	mov	r1, r3
 8000fdc:	4b19      	ldr	r3, [pc, #100]	@ (8001044 <DisplayNetworkConfigurations+0xb0>)
 8000fde:	79db      	ldrb	r3, [r3, #7]
 8000fe0:	461a      	mov	r2, r3
 8000fe2:	4b18      	ldr	r3, [pc, #96]	@ (8001044 <DisplayNetworkConfigurations+0xb0>)
 8000fe4:	7a1b      	ldrb	r3, [r3, #8]
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	4b16      	ldr	r3, [pc, #88]	@ (8001044 <DisplayNetworkConfigurations+0xb0>)
 8000fea:	7a5b      	ldrb	r3, [r3, #9]
 8000fec:	9300      	str	r3, [sp, #0]
 8000fee:	4603      	mov	r3, r0
 8000ff0:	4816      	ldr	r0, [pc, #88]	@ (800104c <DisplayNetworkConfigurations+0xb8>)
 8000ff2:	f00b f8fb 	bl	800c1ec <iprintf>
	printf(" GW : %d.%d.%d.%d\r\n", gWIZNETINFO.gw[0], gWIZNETINFO.gw[1], gWIZNETINFO.gw[2], gWIZNETINFO.gw[3]);
 8000ff6:	4b13      	ldr	r3, [pc, #76]	@ (8001044 <DisplayNetworkConfigurations+0xb0>)
 8000ff8:	7b9b      	ldrb	r3, [r3, #14]
 8000ffa:	4619      	mov	r1, r3
 8000ffc:	4b11      	ldr	r3, [pc, #68]	@ (8001044 <DisplayNetworkConfigurations+0xb0>)
 8000ffe:	7bdb      	ldrb	r3, [r3, #15]
 8001000:	461a      	mov	r2, r3
 8001002:	4b10      	ldr	r3, [pc, #64]	@ (8001044 <DisplayNetworkConfigurations+0xb0>)
 8001004:	7c1b      	ldrb	r3, [r3, #16]
 8001006:	4618      	mov	r0, r3
 8001008:	4b0e      	ldr	r3, [pc, #56]	@ (8001044 <DisplayNetworkConfigurations+0xb0>)
 800100a:	7c5b      	ldrb	r3, [r3, #17]
 800100c:	9300      	str	r3, [sp, #0]
 800100e:	4603      	mov	r3, r0
 8001010:	480f      	ldr	r0, [pc, #60]	@ (8001050 <DisplayNetworkConfigurations+0xbc>)
 8001012:	f00b f8eb 	bl	800c1ec <iprintf>
	printf(" SN : %d.%d.%d.%d\r\n", gWIZNETINFO.sn[0], gWIZNETINFO.sn[1], gWIZNETINFO.sn[2], gWIZNETINFO.sn[3]);
 8001016:	4b0b      	ldr	r3, [pc, #44]	@ (8001044 <DisplayNetworkConfigurations+0xb0>)
 8001018:	7a9b      	ldrb	r3, [r3, #10]
 800101a:	4619      	mov	r1, r3
 800101c:	4b09      	ldr	r3, [pc, #36]	@ (8001044 <DisplayNetworkConfigurations+0xb0>)
 800101e:	7adb      	ldrb	r3, [r3, #11]
 8001020:	461a      	mov	r2, r3
 8001022:	4b08      	ldr	r3, [pc, #32]	@ (8001044 <DisplayNetworkConfigurations+0xb0>)
 8001024:	7b1b      	ldrb	r3, [r3, #12]
 8001026:	4618      	mov	r0, r3
 8001028:	4b06      	ldr	r3, [pc, #24]	@ (8001044 <DisplayNetworkConfigurations+0xb0>)
 800102a:	7b5b      	ldrb	r3, [r3, #13]
 800102c:	9300      	str	r3, [sp, #0]
 800102e:	4603      	mov	r3, r0
 8001030:	4808      	ldr	r0, [pc, #32]	@ (8001054 <DisplayNetworkConfigurations+0xc0>)
 8001032:	f00b f8db 	bl	800c1ec <iprintf>
	printf("=======================================\r\n");
 8001036:	4808      	ldr	r0, [pc, #32]	@ (8001058 <DisplayNetworkConfigurations+0xc4>)
 8001038:	f00b f940 	bl	800c2bc <puts>
}
 800103c:	bf00      	nop
 800103e:	46bd      	mov	sp, r7
 8001040:	bdb0      	pop	{r4, r5, r7, pc}
 8001042:	bf00      	nop
 8001044:	2000005c 	.word	0x2000005c
 8001048:	0800d588 	.word	0x0800d588
 800104c:	0800d5b0 	.word	0x0800d5b0
 8001050:	0800d5c4 	.word	0x0800d5c4
 8001054:	0800d5d8 	.word	0x0800d5d8
 8001058:	0800d5ec 	.word	0x0800d5ec

0800105c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b082      	sub	sp, #8
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001064:	2001      	movs	r0, #1
 8001066:	f008 fa1f 	bl	80094a8 <osDelay>
 800106a:	e7fb      	b.n	8001064 <StartDefaultTask+0x8>

0800106c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b082      	sub	sp, #8
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */
	//printf("HAL_Tick\r\n");
  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	4a0e      	ldr	r2, [pc, #56]	@ (80010b4 <HAL_TIM_PeriodElapsedCallback+0x48>)
 800107a:	4293      	cmp	r3, r2
 800107c:	d101      	bne.n	8001082 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800107e:	f006 fa43 	bl	8007508 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
  MilliTimer_Handler(); //For MQTT
 8001082:	f003 f937 	bl	80042f4 <MilliTimer_Handler>

   //One second callback for DHCP Module
   static uint16_t milli_count;
   milli_count++;
 8001086:	4b0c      	ldr	r3, [pc, #48]	@ (80010b8 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8001088:	881b      	ldrh	r3, [r3, #0]
 800108a:	3301      	adds	r3, #1
 800108c:	b29a      	uxth	r2, r3
 800108e:	4b0a      	ldr	r3, [pc, #40]	@ (80010b8 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8001090:	801a      	strh	r2, [r3, #0]

 	if(milli_count==1000)
 8001092:	4b09      	ldr	r3, [pc, #36]	@ (80010b8 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8001094:	881b      	ldrh	r3, [r3, #0]
 8001096:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800109a:	d106      	bne.n	80010aa <HAL_TIM_PeriodElapsedCallback+0x3e>
 	{
 	  milli_count=0;
 800109c:	4b06      	ldr	r3, [pc, #24]	@ (80010b8 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 800109e:	2200      	movs	r2, #0
 80010a0:	801a      	strh	r2, [r3, #0]
 	  DHCP_time_handler();
 80010a2:	f001 fe17 	bl	8002cd4 <DHCP_time_handler>
 	  DNS_time_handler();
 80010a6:	f002 fb41 	bl	800372c <DNS_time_handler>
 	}
  /* USER CODE END Callback 1 */
}
 80010aa:	bf00      	nop
 80010ac:	3708      	adds	r7, #8
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bd80      	pop	{r7, pc}
 80010b2:	bf00      	nop
 80010b4:	40010000 	.word	0x40010000
 80010b8:	20000d76 	.word	0x20000d76

080010bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010bc:	b480      	push	{r7}
 80010be:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010c0:	b672      	cpsid	i
}
 80010c2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80010c4:	bf00      	nop
 80010c6:	e7fd      	b.n	80010c4 <Error_Handler+0x8>

080010c8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b082      	sub	sp, #8
 80010cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010ce:	2300      	movs	r3, #0
 80010d0:	607b      	str	r3, [r7, #4]
 80010d2:	4b12      	ldr	r3, [pc, #72]	@ (800111c <HAL_MspInit+0x54>)
 80010d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010d6:	4a11      	ldr	r2, [pc, #68]	@ (800111c <HAL_MspInit+0x54>)
 80010d8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80010dc:	6453      	str	r3, [r2, #68]	@ 0x44
 80010de:	4b0f      	ldr	r3, [pc, #60]	@ (800111c <HAL_MspInit+0x54>)
 80010e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010e2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80010e6:	607b      	str	r3, [r7, #4]
 80010e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80010ea:	2300      	movs	r3, #0
 80010ec:	603b      	str	r3, [r7, #0]
 80010ee:	4b0b      	ldr	r3, [pc, #44]	@ (800111c <HAL_MspInit+0x54>)
 80010f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010f2:	4a0a      	ldr	r2, [pc, #40]	@ (800111c <HAL_MspInit+0x54>)
 80010f4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80010f8:	6413      	str	r3, [r2, #64]	@ 0x40
 80010fa:	4b08      	ldr	r3, [pc, #32]	@ (800111c <HAL_MspInit+0x54>)
 80010fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001102:	603b      	str	r3, [r7, #0]
 8001104:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001106:	2200      	movs	r2, #0
 8001108:	210f      	movs	r1, #15
 800110a:	f06f 0001 	mvn.w	r0, #1
 800110e:	f006 faf7 	bl	8007700 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001112:	bf00      	nop
 8001114:	3708      	adds	r7, #8
 8001116:	46bd      	mov	sp, r7
 8001118:	bd80      	pop	{r7, pc}
 800111a:	bf00      	nop
 800111c:	40023800 	.word	0x40023800

08001120 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b08a      	sub	sp, #40	@ 0x28
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001128:	f107 0314 	add.w	r3, r7, #20
 800112c:	2200      	movs	r2, #0
 800112e:	601a      	str	r2, [r3, #0]
 8001130:	605a      	str	r2, [r3, #4]
 8001132:	609a      	str	r2, [r3, #8]
 8001134:	60da      	str	r2, [r3, #12]
 8001136:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	4a19      	ldr	r2, [pc, #100]	@ (80011a4 <HAL_SPI_MspInit+0x84>)
 800113e:	4293      	cmp	r3, r2
 8001140:	d12b      	bne.n	800119a <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001142:	2300      	movs	r3, #0
 8001144:	613b      	str	r3, [r7, #16]
 8001146:	4b18      	ldr	r3, [pc, #96]	@ (80011a8 <HAL_SPI_MspInit+0x88>)
 8001148:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800114a:	4a17      	ldr	r2, [pc, #92]	@ (80011a8 <HAL_SPI_MspInit+0x88>)
 800114c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001150:	6453      	str	r3, [r2, #68]	@ 0x44
 8001152:	4b15      	ldr	r3, [pc, #84]	@ (80011a8 <HAL_SPI_MspInit+0x88>)
 8001154:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001156:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800115a:	613b      	str	r3, [r7, #16]
 800115c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800115e:	2300      	movs	r3, #0
 8001160:	60fb      	str	r3, [r7, #12]
 8001162:	4b11      	ldr	r3, [pc, #68]	@ (80011a8 <HAL_SPI_MspInit+0x88>)
 8001164:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001166:	4a10      	ldr	r2, [pc, #64]	@ (80011a8 <HAL_SPI_MspInit+0x88>)
 8001168:	f043 0301 	orr.w	r3, r3, #1
 800116c:	6313      	str	r3, [r2, #48]	@ 0x30
 800116e:	4b0e      	ldr	r3, [pc, #56]	@ (80011a8 <HAL_SPI_MspInit+0x88>)
 8001170:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001172:	f003 0301 	and.w	r3, r3, #1
 8001176:	60fb      	str	r3, [r7, #12]
 8001178:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800117a:	23e0      	movs	r3, #224	@ 0xe0
 800117c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800117e:	2302      	movs	r3, #2
 8001180:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001182:	2300      	movs	r3, #0
 8001184:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001186:	2303      	movs	r3, #3
 8001188:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800118a:	2305      	movs	r3, #5
 800118c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800118e:	f107 0314 	add.w	r3, r7, #20
 8001192:	4619      	mov	r1, r3
 8001194:	4805      	ldr	r0, [pc, #20]	@ (80011ac <HAL_SPI_MspInit+0x8c>)
 8001196:	f006 fadd 	bl	8007754 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800119a:	bf00      	nop
 800119c:	3728      	adds	r7, #40	@ 0x28
 800119e:	46bd      	mov	sp, r7
 80011a0:	bd80      	pop	{r7, pc}
 80011a2:	bf00      	nop
 80011a4:	40013000 	.word	0x40013000
 80011a8:	40023800 	.word	0x40023800
 80011ac:	40020000 	.word	0x40020000

080011b0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b08a      	sub	sp, #40	@ 0x28
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011b8:	f107 0314 	add.w	r3, r7, #20
 80011bc:	2200      	movs	r2, #0
 80011be:	601a      	str	r2, [r3, #0]
 80011c0:	605a      	str	r2, [r3, #4]
 80011c2:	609a      	str	r2, [r3, #8]
 80011c4:	60da      	str	r2, [r3, #12]
 80011c6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	4a19      	ldr	r2, [pc, #100]	@ (8001234 <HAL_UART_MspInit+0x84>)
 80011ce:	4293      	cmp	r3, r2
 80011d0:	d12b      	bne.n	800122a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80011d2:	2300      	movs	r3, #0
 80011d4:	613b      	str	r3, [r7, #16]
 80011d6:	4b18      	ldr	r3, [pc, #96]	@ (8001238 <HAL_UART_MspInit+0x88>)
 80011d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011da:	4a17      	ldr	r2, [pc, #92]	@ (8001238 <HAL_UART_MspInit+0x88>)
 80011dc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80011e0:	6413      	str	r3, [r2, #64]	@ 0x40
 80011e2:	4b15      	ldr	r3, [pc, #84]	@ (8001238 <HAL_UART_MspInit+0x88>)
 80011e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011ea:	613b      	str	r3, [r7, #16]
 80011ec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011ee:	2300      	movs	r3, #0
 80011f0:	60fb      	str	r3, [r7, #12]
 80011f2:	4b11      	ldr	r3, [pc, #68]	@ (8001238 <HAL_UART_MspInit+0x88>)
 80011f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011f6:	4a10      	ldr	r2, [pc, #64]	@ (8001238 <HAL_UART_MspInit+0x88>)
 80011f8:	f043 0301 	orr.w	r3, r3, #1
 80011fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80011fe:	4b0e      	ldr	r3, [pc, #56]	@ (8001238 <HAL_UART_MspInit+0x88>)
 8001200:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001202:	f003 0301 	and.w	r3, r3, #1
 8001206:	60fb      	str	r3, [r7, #12]
 8001208:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800120a:	230c      	movs	r3, #12
 800120c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800120e:	2302      	movs	r3, #2
 8001210:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001212:	2300      	movs	r3, #0
 8001214:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001216:	2300      	movs	r3, #0
 8001218:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800121a:	2307      	movs	r3, #7
 800121c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800121e:	f107 0314 	add.w	r3, r7, #20
 8001222:	4619      	mov	r1, r3
 8001224:	4805      	ldr	r0, [pc, #20]	@ (800123c <HAL_UART_MspInit+0x8c>)
 8001226:	f006 fa95 	bl	8007754 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800122a:	bf00      	nop
 800122c:	3728      	adds	r7, #40	@ 0x28
 800122e:	46bd      	mov	sp, r7
 8001230:	bd80      	pop	{r7, pc}
 8001232:	bf00      	nop
 8001234:	40004400 	.word	0x40004400
 8001238:	40023800 	.word	0x40023800
 800123c:	40020000 	.word	0x40020000

08001240 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b08c      	sub	sp, #48	@ 0x30
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8001248:	2300      	movs	r3, #0
 800124a:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 800124c:	2300      	movs	r3, #0
 800124e:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001250:	2300      	movs	r3, #0
 8001252:	60bb      	str	r3, [r7, #8]
 8001254:	4b2e      	ldr	r3, [pc, #184]	@ (8001310 <HAL_InitTick+0xd0>)
 8001256:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001258:	4a2d      	ldr	r2, [pc, #180]	@ (8001310 <HAL_InitTick+0xd0>)
 800125a:	f043 0301 	orr.w	r3, r3, #1
 800125e:	6453      	str	r3, [r2, #68]	@ 0x44
 8001260:	4b2b      	ldr	r3, [pc, #172]	@ (8001310 <HAL_InitTick+0xd0>)
 8001262:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001264:	f003 0301 	and.w	r3, r3, #1
 8001268:	60bb      	str	r3, [r7, #8]
 800126a:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800126c:	f107 020c 	add.w	r2, r7, #12
 8001270:	f107 0310 	add.w	r3, r7, #16
 8001274:	4611      	mov	r1, r2
 8001276:	4618      	mov	r0, r3
 8001278:	f007 f8bc 	bl	80083f4 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 800127c:	f007 f8a6 	bl	80083cc <HAL_RCC_GetPCLK2Freq>
 8001280:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001282:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001284:	4a23      	ldr	r2, [pc, #140]	@ (8001314 <HAL_InitTick+0xd4>)
 8001286:	fba2 2303 	umull	r2, r3, r2, r3
 800128a:	0c9b      	lsrs	r3, r3, #18
 800128c:	3b01      	subs	r3, #1
 800128e:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001290:	4b21      	ldr	r3, [pc, #132]	@ (8001318 <HAL_InitTick+0xd8>)
 8001292:	4a22      	ldr	r2, [pc, #136]	@ (800131c <HAL_InitTick+0xdc>)
 8001294:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001296:	4b20      	ldr	r3, [pc, #128]	@ (8001318 <HAL_InitTick+0xd8>)
 8001298:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800129c:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800129e:	4a1e      	ldr	r2, [pc, #120]	@ (8001318 <HAL_InitTick+0xd8>)
 80012a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012a2:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80012a4:	4b1c      	ldr	r3, [pc, #112]	@ (8001318 <HAL_InitTick+0xd8>)
 80012a6:	2200      	movs	r2, #0
 80012a8:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012aa:	4b1b      	ldr	r3, [pc, #108]	@ (8001318 <HAL_InitTick+0xd8>)
 80012ac:	2200      	movs	r2, #0
 80012ae:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012b0:	4b19      	ldr	r3, [pc, #100]	@ (8001318 <HAL_InitTick+0xd8>)
 80012b2:	2200      	movs	r2, #0
 80012b4:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 80012b6:	4818      	ldr	r0, [pc, #96]	@ (8001318 <HAL_InitTick+0xd8>)
 80012b8:	f007 f957 	bl	800856a <HAL_TIM_Base_Init>
 80012bc:	4603      	mov	r3, r0
 80012be:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 80012c2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d11b      	bne.n	8001302 <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 80012ca:	4813      	ldr	r0, [pc, #76]	@ (8001318 <HAL_InitTick+0xd8>)
 80012cc:	f007 f9a6 	bl	800861c <HAL_TIM_Base_Start_IT>
 80012d0:	4603      	mov	r3, r0
 80012d2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 80012d6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d111      	bne.n	8001302 <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80012de:	2019      	movs	r0, #25
 80012e0:	f006 fa2a 	bl	8007738 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	2b0f      	cmp	r3, #15
 80012e8:	d808      	bhi.n	80012fc <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 80012ea:	2200      	movs	r2, #0
 80012ec:	6879      	ldr	r1, [r7, #4]
 80012ee:	2019      	movs	r0, #25
 80012f0:	f006 fa06 	bl	8007700 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80012f4:	4a0a      	ldr	r2, [pc, #40]	@ (8001320 <HAL_InitTick+0xe0>)
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	6013      	str	r3, [r2, #0]
 80012fa:	e002      	b.n	8001302 <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 80012fc:	2301      	movs	r3, #1
 80012fe:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8001302:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8001306:	4618      	mov	r0, r3
 8001308:	3730      	adds	r7, #48	@ 0x30
 800130a:	46bd      	mov	sp, r7
 800130c:	bd80      	pop	{r7, pc}
 800130e:	bf00      	nop
 8001310:	40023800 	.word	0x40023800
 8001314:	431bde83 	.word	0x431bde83
 8001318:	20000d78 	.word	0x20000d78
 800131c:	40010000 	.word	0x40010000
 8001320:	200000d0 	.word	0x200000d0

08001324 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001324:	b480      	push	{r7}
 8001326:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001328:	bf00      	nop
 800132a:	e7fd      	b.n	8001328 <NMI_Handler+0x4>

0800132c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800132c:	b480      	push	{r7}
 800132e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001330:	bf00      	nop
 8001332:	e7fd      	b.n	8001330 <HardFault_Handler+0x4>

08001334 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001334:	b480      	push	{r7}
 8001336:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001338:	bf00      	nop
 800133a:	e7fd      	b.n	8001338 <MemManage_Handler+0x4>

0800133c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800133c:	b480      	push	{r7}
 800133e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001340:	bf00      	nop
 8001342:	e7fd      	b.n	8001340 <BusFault_Handler+0x4>

08001344 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001344:	b480      	push	{r7}
 8001346:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001348:	bf00      	nop
 800134a:	e7fd      	b.n	8001348 <UsageFault_Handler+0x4>

0800134c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800134c:	b480      	push	{r7}
 800134e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001350:	bf00      	nop
 8001352:	46bd      	mov	sp, r7
 8001354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001358:	4770      	bx	lr
	...

0800135c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001360:	4802      	ldr	r0, [pc, #8]	@ (800136c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001362:	f007 f9bd 	bl	80086e0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001366:	bf00      	nop
 8001368:	bd80      	pop	{r7, pc}
 800136a:	bf00      	nop
 800136c:	20000d78 	.word	0x20000d78

08001370 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b086      	sub	sp, #24
 8001374:	af00      	add	r7, sp, #0
 8001376:	60f8      	str	r0, [r7, #12]
 8001378:	60b9      	str	r1, [r7, #8]
 800137a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800137c:	2300      	movs	r3, #0
 800137e:	617b      	str	r3, [r7, #20]
 8001380:	e00a      	b.n	8001398 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001382:	f3af 8000 	nop.w
 8001386:	4601      	mov	r1, r0
 8001388:	68bb      	ldr	r3, [r7, #8]
 800138a:	1c5a      	adds	r2, r3, #1
 800138c:	60ba      	str	r2, [r7, #8]
 800138e:	b2ca      	uxtb	r2, r1
 8001390:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001392:	697b      	ldr	r3, [r7, #20]
 8001394:	3301      	adds	r3, #1
 8001396:	617b      	str	r3, [r7, #20]
 8001398:	697a      	ldr	r2, [r7, #20]
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	429a      	cmp	r2, r3
 800139e:	dbf0      	blt.n	8001382 <_read+0x12>
  }

  return len;
 80013a0:	687b      	ldr	r3, [r7, #4]
}
 80013a2:	4618      	mov	r0, r3
 80013a4:	3718      	adds	r7, #24
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bd80      	pop	{r7, pc}

080013aa <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80013aa:	b580      	push	{r7, lr}
 80013ac:	b086      	sub	sp, #24
 80013ae:	af00      	add	r7, sp, #0
 80013b0:	60f8      	str	r0, [r7, #12]
 80013b2:	60b9      	str	r1, [r7, #8]
 80013b4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013b6:	2300      	movs	r3, #0
 80013b8:	617b      	str	r3, [r7, #20]
 80013ba:	e009      	b.n	80013d0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80013bc:	68bb      	ldr	r3, [r7, #8]
 80013be:	1c5a      	adds	r2, r3, #1
 80013c0:	60ba      	str	r2, [r7, #8]
 80013c2:	781b      	ldrb	r3, [r3, #0]
 80013c4:	4618      	mov	r0, r3
 80013c6:	f7ff fd41 	bl	8000e4c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013ca:	697b      	ldr	r3, [r7, #20]
 80013cc:	3301      	adds	r3, #1
 80013ce:	617b      	str	r3, [r7, #20]
 80013d0:	697a      	ldr	r2, [r7, #20]
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	429a      	cmp	r2, r3
 80013d6:	dbf1      	blt.n	80013bc <_write+0x12>
  }
  return len;
 80013d8:	687b      	ldr	r3, [r7, #4]
}
 80013da:	4618      	mov	r0, r3
 80013dc:	3718      	adds	r7, #24
 80013de:	46bd      	mov	sp, r7
 80013e0:	bd80      	pop	{r7, pc}

080013e2 <_close>:

int _close(int file)
{
 80013e2:	b480      	push	{r7}
 80013e4:	b083      	sub	sp, #12
 80013e6:	af00      	add	r7, sp, #0
 80013e8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80013ea:	f04f 33ff 	mov.w	r3, #4294967295
}
 80013ee:	4618      	mov	r0, r3
 80013f0:	370c      	adds	r7, #12
 80013f2:	46bd      	mov	sp, r7
 80013f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f8:	4770      	bx	lr

080013fa <_fstat>:


int _fstat(int file, struct stat *st)
{
 80013fa:	b480      	push	{r7}
 80013fc:	b083      	sub	sp, #12
 80013fe:	af00      	add	r7, sp, #0
 8001400:	6078      	str	r0, [r7, #4]
 8001402:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001404:	683b      	ldr	r3, [r7, #0]
 8001406:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800140a:	605a      	str	r2, [r3, #4]
  return 0;
 800140c:	2300      	movs	r3, #0
}
 800140e:	4618      	mov	r0, r3
 8001410:	370c      	adds	r7, #12
 8001412:	46bd      	mov	sp, r7
 8001414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001418:	4770      	bx	lr

0800141a <_isatty>:

int _isatty(int file)
{
 800141a:	b480      	push	{r7}
 800141c:	b083      	sub	sp, #12
 800141e:	af00      	add	r7, sp, #0
 8001420:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001422:	2301      	movs	r3, #1
}
 8001424:	4618      	mov	r0, r3
 8001426:	370c      	adds	r7, #12
 8001428:	46bd      	mov	sp, r7
 800142a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142e:	4770      	bx	lr

08001430 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001430:	b480      	push	{r7}
 8001432:	b085      	sub	sp, #20
 8001434:	af00      	add	r7, sp, #0
 8001436:	60f8      	str	r0, [r7, #12]
 8001438:	60b9      	str	r1, [r7, #8]
 800143a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800143c:	2300      	movs	r3, #0
}
 800143e:	4618      	mov	r0, r3
 8001440:	3714      	adds	r7, #20
 8001442:	46bd      	mov	sp, r7
 8001444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001448:	4770      	bx	lr
	...

0800144c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b086      	sub	sp, #24
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001454:	4a14      	ldr	r2, [pc, #80]	@ (80014a8 <_sbrk+0x5c>)
 8001456:	4b15      	ldr	r3, [pc, #84]	@ (80014ac <_sbrk+0x60>)
 8001458:	1ad3      	subs	r3, r2, r3
 800145a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800145c:	697b      	ldr	r3, [r7, #20]
 800145e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001460:	4b13      	ldr	r3, [pc, #76]	@ (80014b0 <_sbrk+0x64>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	2b00      	cmp	r3, #0
 8001466:	d102      	bne.n	800146e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001468:	4b11      	ldr	r3, [pc, #68]	@ (80014b0 <_sbrk+0x64>)
 800146a:	4a12      	ldr	r2, [pc, #72]	@ (80014b4 <_sbrk+0x68>)
 800146c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800146e:	4b10      	ldr	r3, [pc, #64]	@ (80014b0 <_sbrk+0x64>)
 8001470:	681a      	ldr	r2, [r3, #0]
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	4413      	add	r3, r2
 8001476:	693a      	ldr	r2, [r7, #16]
 8001478:	429a      	cmp	r2, r3
 800147a:	d207      	bcs.n	800148c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800147c:	f00b f8d4 	bl	800c628 <__errno>
 8001480:	4603      	mov	r3, r0
 8001482:	220c      	movs	r2, #12
 8001484:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001486:	f04f 33ff 	mov.w	r3, #4294967295
 800148a:	e009      	b.n	80014a0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800148c:	4b08      	ldr	r3, [pc, #32]	@ (80014b0 <_sbrk+0x64>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001492:	4b07      	ldr	r3, [pc, #28]	@ (80014b0 <_sbrk+0x64>)
 8001494:	681a      	ldr	r2, [r3, #0]
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	4413      	add	r3, r2
 800149a:	4a05      	ldr	r2, [pc, #20]	@ (80014b0 <_sbrk+0x64>)
 800149c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800149e:	68fb      	ldr	r3, [r7, #12]
}
 80014a0:	4618      	mov	r0, r3
 80014a2:	3718      	adds	r7, #24
 80014a4:	46bd      	mov	sp, r7
 80014a6:	bd80      	pop	{r7, pc}
 80014a8:	20018000 	.word	0x20018000
 80014ac:	00000400 	.word	0x00000400
 80014b0:	20000dc0 	.word	0x20000dc0
 80014b4:	20005970 	.word	0x20005970

080014b8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80014b8:	b480      	push	{r7}
 80014ba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80014bc:	4b06      	ldr	r3, [pc, #24]	@ (80014d8 <SystemInit+0x20>)
 80014be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80014c2:	4a05      	ldr	r2, [pc, #20]	@ (80014d8 <SystemInit+0x20>)
 80014c4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80014c8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80014cc:	bf00      	nop
 80014ce:	46bd      	mov	sp, r7
 80014d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d4:	4770      	bx	lr
 80014d6:	bf00      	nop
 80014d8:	e000ed00 	.word	0xe000ed00

080014dc <default_ip_assign>:
/* Parse message as OFFER and ACK and NACK from DHCP server.*/
int8_t   parseDHCPCMSG(void);

/* The default handler of ip assign first */
void default_ip_assign(void)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	af00      	add	r7, sp, #0
   setSIPR(DHCP_allocated_ip);
 80014e0:	2204      	movs	r2, #4
 80014e2:	4909      	ldr	r1, [pc, #36]	@ (8001508 <default_ip_assign+0x2c>)
 80014e4:	f44f 6070 	mov.w	r0, #3840	@ 0xf00
 80014e8:	f003 ff26 	bl	8005338 <WIZCHIP_WRITE_BUF>
   setSUBR(DHCP_allocated_sn);
 80014ec:	2204      	movs	r2, #4
 80014ee:	4907      	ldr	r1, [pc, #28]	@ (800150c <default_ip_assign+0x30>)
 80014f0:	f44f 60a0 	mov.w	r0, #1280	@ 0x500
 80014f4:	f003 ff20 	bl	8005338 <WIZCHIP_WRITE_BUF>
   setGAR (DHCP_allocated_gw);
 80014f8:	2204      	movs	r2, #4
 80014fa:	4905      	ldr	r1, [pc, #20]	@ (8001510 <default_ip_assign+0x34>)
 80014fc:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8001500:	f003 ff1a 	bl	8005338 <WIZCHIP_WRITE_BUF>
}
 8001504:	bf00      	nop
 8001506:	bd80      	pop	{r7, pc}
 8001508:	20000dd4 	.word	0x20000dd4
 800150c:	20000ddc 	.word	0x20000ddc
 8001510:	20000dd8 	.word	0x20000dd8

08001514 <default_ip_update>:

/* The default handler of ip changed */
void default_ip_update(void)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	af00      	add	r7, sp, #0
	/* WIZchip Software Reset */
   setMR(MR_RST);
 8001518:	2180      	movs	r1, #128	@ 0x80
 800151a:	2000      	movs	r0, #0
 800151c:	f003 fe5e 	bl	80051dc <WIZCHIP_WRITE>
   getMR(); // for delay
 8001520:	2000      	movs	r0, #0
 8001522:	f003 fe0f 	bl	8005144 <WIZCHIP_READ>
   default_ip_assign();
 8001526:	f7ff ffd9 	bl	80014dc <default_ip_assign>
   setSHAR(DHCP_CHADDR);
 800152a:	2206      	movs	r2, #6
 800152c:	4903      	ldr	r1, [pc, #12]	@ (800153c <default_ip_update+0x28>)
 800152e:	f44f 6010 	mov.w	r0, #2304	@ 0x900
 8001532:	f003 ff01 	bl	8005338 <WIZCHIP_WRITE_BUF>
}
 8001536:	bf00      	nop
 8001538:	bd80      	pop	{r7, pc}
 800153a:	bf00      	nop
 800153c:	20000df4 	.word	0x20000df4

08001540 <default_ip_conflict>:

/* The default handler of ip changed */
void default_ip_conflict(void)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	af00      	add	r7, sp, #0
	// WIZchip Software Reset
	setMR(MR_RST);
 8001544:	2180      	movs	r1, #128	@ 0x80
 8001546:	2000      	movs	r0, #0
 8001548:	f003 fe48 	bl	80051dc <WIZCHIP_WRITE>
	getMR(); // for delay
 800154c:	2000      	movs	r0, #0
 800154e:	f003 fdf9 	bl	8005144 <WIZCHIP_READ>
	setSHAR(DHCP_CHADDR);
 8001552:	2206      	movs	r2, #6
 8001554:	4903      	ldr	r1, [pc, #12]	@ (8001564 <default_ip_conflict+0x24>)
 8001556:	f44f 6010 	mov.w	r0, #2304	@ 0x900
 800155a:	f003 feed 	bl	8005338 <WIZCHIP_WRITE_BUF>
}
 800155e:	bf00      	nop
 8001560:	bd80      	pop	{r7, pc}
 8001562:	bf00      	nop
 8001564:	20000df4 	.word	0x20000df4

08001568 <reg_dhcp_cbfunc>:

/* register the call back func. */
void reg_dhcp_cbfunc(void(*ip_assign)(void), void(*ip_update)(void), void(*ip_conflict)(void))
{
 8001568:	b480      	push	{r7}
 800156a:	b085      	sub	sp, #20
 800156c:	af00      	add	r7, sp, #0
 800156e:	60f8      	str	r0, [r7, #12]
 8001570:	60b9      	str	r1, [r7, #8]
 8001572:	607a      	str	r2, [r7, #4]
   dhcp_ip_assign   = default_ip_assign;
 8001574:	4b10      	ldr	r3, [pc, #64]	@ (80015b8 <reg_dhcp_cbfunc+0x50>)
 8001576:	4a11      	ldr	r2, [pc, #68]	@ (80015bc <reg_dhcp_cbfunc+0x54>)
 8001578:	601a      	str	r2, [r3, #0]
   dhcp_ip_update   = default_ip_update;
 800157a:	4b11      	ldr	r3, [pc, #68]	@ (80015c0 <reg_dhcp_cbfunc+0x58>)
 800157c:	4a11      	ldr	r2, [pc, #68]	@ (80015c4 <reg_dhcp_cbfunc+0x5c>)
 800157e:	601a      	str	r2, [r3, #0]
   dhcp_ip_conflict = default_ip_conflict;
 8001580:	4b11      	ldr	r3, [pc, #68]	@ (80015c8 <reg_dhcp_cbfunc+0x60>)
 8001582:	4a12      	ldr	r2, [pc, #72]	@ (80015cc <reg_dhcp_cbfunc+0x64>)
 8001584:	601a      	str	r2, [r3, #0]
   if(ip_assign)   dhcp_ip_assign = ip_assign;
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	2b00      	cmp	r3, #0
 800158a:	d002      	beq.n	8001592 <reg_dhcp_cbfunc+0x2a>
 800158c:	4a0a      	ldr	r2, [pc, #40]	@ (80015b8 <reg_dhcp_cbfunc+0x50>)
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	6013      	str	r3, [r2, #0]
   if(ip_update)   dhcp_ip_update = ip_update;
 8001592:	68bb      	ldr	r3, [r7, #8]
 8001594:	2b00      	cmp	r3, #0
 8001596:	d002      	beq.n	800159e <reg_dhcp_cbfunc+0x36>
 8001598:	4a09      	ldr	r2, [pc, #36]	@ (80015c0 <reg_dhcp_cbfunc+0x58>)
 800159a:	68bb      	ldr	r3, [r7, #8]
 800159c:	6013      	str	r3, [r2, #0]
   if(ip_conflict) dhcp_ip_conflict = ip_conflict;
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d002      	beq.n	80015aa <reg_dhcp_cbfunc+0x42>
 80015a4:	4a08      	ldr	r2, [pc, #32]	@ (80015c8 <reg_dhcp_cbfunc+0x60>)
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	6013      	str	r3, [r2, #0]
}
 80015aa:	bf00      	nop
 80015ac:	3714      	adds	r7, #20
 80015ae:	46bd      	mov	sp, r7
 80015b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b4:	4770      	bx	lr
 80015b6:	bf00      	nop
 80015b8:	20000094 	.word	0x20000094
 80015bc:	080014dd 	.word	0x080014dd
 80015c0:	20000098 	.word	0x20000098
 80015c4:	08001515 	.word	0x08001515
 80015c8:	2000009c 	.word	0x2000009c
 80015cc:	08001541 	.word	0x08001541

080015d0 <makeDHCPMSG>:

/* make the common DHCP message */
void makeDHCPMSG(void)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b084      	sub	sp, #16
 80015d4:	af00      	add	r7, sp, #0
   uint8_t  bk_mac[6];
   uint8_t* ptmp;
   uint8_t  i;
   getSHAR(bk_mac);
 80015d6:	463b      	mov	r3, r7
 80015d8:	2206      	movs	r2, #6
 80015da:	4619      	mov	r1, r3
 80015dc:	f44f 6010 	mov.w	r0, #2304	@ 0x900
 80015e0:	f003 fe4a 	bl	8005278 <WIZCHIP_READ_BUF>
	pDHCPMSG->op      = DHCP_BOOTREQUEST;
 80015e4:	4b72      	ldr	r3, [pc, #456]	@ (80017b0 <makeDHCPMSG+0x1e0>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	2201      	movs	r2, #1
 80015ea:	701a      	strb	r2, [r3, #0]
	pDHCPMSG->htype   = DHCP_HTYPE10MB;
 80015ec:	4b70      	ldr	r3, [pc, #448]	@ (80017b0 <makeDHCPMSG+0x1e0>)
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	2201      	movs	r2, #1
 80015f2:	705a      	strb	r2, [r3, #1]
	pDHCPMSG->hlen    = DHCP_HLENETHERNET;
 80015f4:	4b6e      	ldr	r3, [pc, #440]	@ (80017b0 <makeDHCPMSG+0x1e0>)
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	2206      	movs	r2, #6
 80015fa:	709a      	strb	r2, [r3, #2]
	pDHCPMSG->hops    = DHCP_HOPS;
 80015fc:	4b6c      	ldr	r3, [pc, #432]	@ (80017b0 <makeDHCPMSG+0x1e0>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	2200      	movs	r2, #0
 8001602:	70da      	strb	r2, [r3, #3]
	ptmp              = (uint8_t*)(&pDHCPMSG->xid);
 8001604:	4b6a      	ldr	r3, [pc, #424]	@ (80017b0 <makeDHCPMSG+0x1e0>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	3304      	adds	r3, #4
 800160a:	60bb      	str	r3, [r7, #8]
	*(ptmp+0)         = (uint8_t)((DHCP_XID & 0xFF000000) >> 24);
 800160c:	4b69      	ldr	r3, [pc, #420]	@ (80017b4 <makeDHCPMSG+0x1e4>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	0e1b      	lsrs	r3, r3, #24
 8001612:	b2da      	uxtb	r2, r3
 8001614:	68bb      	ldr	r3, [r7, #8]
 8001616:	701a      	strb	r2, [r3, #0]
	*(ptmp+1)         = (uint8_t)((DHCP_XID & 0x00FF0000) >> 16);
 8001618:	4b66      	ldr	r3, [pc, #408]	@ (80017b4 <makeDHCPMSG+0x1e4>)
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	0c1a      	lsrs	r2, r3, #16
 800161e:	68bb      	ldr	r3, [r7, #8]
 8001620:	3301      	adds	r3, #1
 8001622:	b2d2      	uxtb	r2, r2
 8001624:	701a      	strb	r2, [r3, #0]
   *(ptmp+2)         = (uint8_t)((DHCP_XID & 0x0000FF00) >>  8);
 8001626:	4b63      	ldr	r3, [pc, #396]	@ (80017b4 <makeDHCPMSG+0x1e4>)
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	0a1a      	lsrs	r2, r3, #8
 800162c:	68bb      	ldr	r3, [r7, #8]
 800162e:	3302      	adds	r3, #2
 8001630:	b2d2      	uxtb	r2, r2
 8001632:	701a      	strb	r2, [r3, #0]
	*(ptmp+3)         = (uint8_t)((DHCP_XID & 0x000000FF) >>  0);   
 8001634:	4b5f      	ldr	r3, [pc, #380]	@ (80017b4 <makeDHCPMSG+0x1e4>)
 8001636:	681a      	ldr	r2, [r3, #0]
 8001638:	68bb      	ldr	r3, [r7, #8]
 800163a:	3303      	adds	r3, #3
 800163c:	b2d2      	uxtb	r2, r2
 800163e:	701a      	strb	r2, [r3, #0]
	pDHCPMSG->secs    = DHCP_SECS;
 8001640:	4b5b      	ldr	r3, [pc, #364]	@ (80017b0 <makeDHCPMSG+0x1e0>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	2200      	movs	r2, #0
 8001646:	811a      	strh	r2, [r3, #8]
	ptmp              = (uint8_t*)(&pDHCPMSG->flags);	
 8001648:	4b59      	ldr	r3, [pc, #356]	@ (80017b0 <makeDHCPMSG+0x1e0>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	330a      	adds	r3, #10
 800164e:	60bb      	str	r3, [r7, #8]
	*(ptmp+0)         = (uint8_t)((DHCP_FLAGSBROADCAST & 0xFF00) >> 8);
 8001650:	68bb      	ldr	r3, [r7, #8]
 8001652:	2280      	movs	r2, #128	@ 0x80
 8001654:	701a      	strb	r2, [r3, #0]
	*(ptmp+1)         = (uint8_t)((DHCP_FLAGSBROADCAST & 0x00FF) >> 0);
 8001656:	68bb      	ldr	r3, [r7, #8]
 8001658:	3301      	adds	r3, #1
 800165a:	2200      	movs	r2, #0
 800165c:	701a      	strb	r2, [r3, #0]

	pDHCPMSG->ciaddr[0] = 0;
 800165e:	4b54      	ldr	r3, [pc, #336]	@ (80017b0 <makeDHCPMSG+0x1e0>)
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	2200      	movs	r2, #0
 8001664:	731a      	strb	r2, [r3, #12]
	pDHCPMSG->ciaddr[1] = 0;
 8001666:	4b52      	ldr	r3, [pc, #328]	@ (80017b0 <makeDHCPMSG+0x1e0>)
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	2200      	movs	r2, #0
 800166c:	735a      	strb	r2, [r3, #13]
	pDHCPMSG->ciaddr[2] = 0;
 800166e:	4b50      	ldr	r3, [pc, #320]	@ (80017b0 <makeDHCPMSG+0x1e0>)
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	2200      	movs	r2, #0
 8001674:	739a      	strb	r2, [r3, #14]
	pDHCPMSG->ciaddr[3] = 0;
 8001676:	4b4e      	ldr	r3, [pc, #312]	@ (80017b0 <makeDHCPMSG+0x1e0>)
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	2200      	movs	r2, #0
 800167c:	73da      	strb	r2, [r3, #15]

	pDHCPMSG->yiaddr[0] = 0;
 800167e:	4b4c      	ldr	r3, [pc, #304]	@ (80017b0 <makeDHCPMSG+0x1e0>)
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	2200      	movs	r2, #0
 8001684:	741a      	strb	r2, [r3, #16]
	pDHCPMSG->yiaddr[1] = 0;
 8001686:	4b4a      	ldr	r3, [pc, #296]	@ (80017b0 <makeDHCPMSG+0x1e0>)
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	2200      	movs	r2, #0
 800168c:	745a      	strb	r2, [r3, #17]
	pDHCPMSG->yiaddr[2] = 0;
 800168e:	4b48      	ldr	r3, [pc, #288]	@ (80017b0 <makeDHCPMSG+0x1e0>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	2200      	movs	r2, #0
 8001694:	749a      	strb	r2, [r3, #18]
	pDHCPMSG->yiaddr[3] = 0;
 8001696:	4b46      	ldr	r3, [pc, #280]	@ (80017b0 <makeDHCPMSG+0x1e0>)
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	2200      	movs	r2, #0
 800169c:	74da      	strb	r2, [r3, #19]

	pDHCPMSG->siaddr[0] = 0;
 800169e:	4b44      	ldr	r3, [pc, #272]	@ (80017b0 <makeDHCPMSG+0x1e0>)
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	2200      	movs	r2, #0
 80016a4:	751a      	strb	r2, [r3, #20]
	pDHCPMSG->siaddr[1] = 0;
 80016a6:	4b42      	ldr	r3, [pc, #264]	@ (80017b0 <makeDHCPMSG+0x1e0>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	2200      	movs	r2, #0
 80016ac:	755a      	strb	r2, [r3, #21]
	pDHCPMSG->siaddr[2] = 0;
 80016ae:	4b40      	ldr	r3, [pc, #256]	@ (80017b0 <makeDHCPMSG+0x1e0>)
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	2200      	movs	r2, #0
 80016b4:	759a      	strb	r2, [r3, #22]
	pDHCPMSG->siaddr[3] = 0;
 80016b6:	4b3e      	ldr	r3, [pc, #248]	@ (80017b0 <makeDHCPMSG+0x1e0>)
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	2200      	movs	r2, #0
 80016bc:	75da      	strb	r2, [r3, #23]

	pDHCPMSG->giaddr[0] = 0;
 80016be:	4b3c      	ldr	r3, [pc, #240]	@ (80017b0 <makeDHCPMSG+0x1e0>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	2200      	movs	r2, #0
 80016c4:	761a      	strb	r2, [r3, #24]
	pDHCPMSG->giaddr[1] = 0;
 80016c6:	4b3a      	ldr	r3, [pc, #232]	@ (80017b0 <makeDHCPMSG+0x1e0>)
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	2200      	movs	r2, #0
 80016cc:	765a      	strb	r2, [r3, #25]
	pDHCPMSG->giaddr[2] = 0;
 80016ce:	4b38      	ldr	r3, [pc, #224]	@ (80017b0 <makeDHCPMSG+0x1e0>)
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	2200      	movs	r2, #0
 80016d4:	769a      	strb	r2, [r3, #26]
	pDHCPMSG->giaddr[3] = 0;
 80016d6:	4b36      	ldr	r3, [pc, #216]	@ (80017b0 <makeDHCPMSG+0x1e0>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	2200      	movs	r2, #0
 80016dc:	76da      	strb	r2, [r3, #27]

	pDHCPMSG->chaddr[0] = DHCP_CHADDR[0];
 80016de:	4b34      	ldr	r3, [pc, #208]	@ (80017b0 <makeDHCPMSG+0x1e0>)
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	4a35      	ldr	r2, [pc, #212]	@ (80017b8 <makeDHCPMSG+0x1e8>)
 80016e4:	7812      	ldrb	r2, [r2, #0]
 80016e6:	771a      	strb	r2, [r3, #28]
	pDHCPMSG->chaddr[1] = DHCP_CHADDR[1];
 80016e8:	4b31      	ldr	r3, [pc, #196]	@ (80017b0 <makeDHCPMSG+0x1e0>)
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	4a32      	ldr	r2, [pc, #200]	@ (80017b8 <makeDHCPMSG+0x1e8>)
 80016ee:	7852      	ldrb	r2, [r2, #1]
 80016f0:	775a      	strb	r2, [r3, #29]
	pDHCPMSG->chaddr[2] = DHCP_CHADDR[2];
 80016f2:	4b2f      	ldr	r3, [pc, #188]	@ (80017b0 <makeDHCPMSG+0x1e0>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	4a30      	ldr	r2, [pc, #192]	@ (80017b8 <makeDHCPMSG+0x1e8>)
 80016f8:	7892      	ldrb	r2, [r2, #2]
 80016fa:	779a      	strb	r2, [r3, #30]
	pDHCPMSG->chaddr[3] = DHCP_CHADDR[3];
 80016fc:	4b2c      	ldr	r3, [pc, #176]	@ (80017b0 <makeDHCPMSG+0x1e0>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	4a2d      	ldr	r2, [pc, #180]	@ (80017b8 <makeDHCPMSG+0x1e8>)
 8001702:	78d2      	ldrb	r2, [r2, #3]
 8001704:	77da      	strb	r2, [r3, #31]
	pDHCPMSG->chaddr[4] = DHCP_CHADDR[4];
 8001706:	4b2a      	ldr	r3, [pc, #168]	@ (80017b0 <makeDHCPMSG+0x1e0>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	4a2b      	ldr	r2, [pc, #172]	@ (80017b8 <makeDHCPMSG+0x1e8>)
 800170c:	7912      	ldrb	r2, [r2, #4]
 800170e:	f883 2020 	strb.w	r2, [r3, #32]
	pDHCPMSG->chaddr[5] = DHCP_CHADDR[5];
 8001712:	4b27      	ldr	r3, [pc, #156]	@ (80017b0 <makeDHCPMSG+0x1e0>)
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	4a28      	ldr	r2, [pc, #160]	@ (80017b8 <makeDHCPMSG+0x1e8>)
 8001718:	7952      	ldrb	r2, [r2, #5]
 800171a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

	for (i = 6; i < 16; i++)  pDHCPMSG->chaddr[i] = 0;
 800171e:	2306      	movs	r3, #6
 8001720:	73fb      	strb	r3, [r7, #15]
 8001722:	e008      	b.n	8001736 <makeDHCPMSG+0x166>
 8001724:	4b22      	ldr	r3, [pc, #136]	@ (80017b0 <makeDHCPMSG+0x1e0>)
 8001726:	681a      	ldr	r2, [r3, #0]
 8001728:	7bfb      	ldrb	r3, [r7, #15]
 800172a:	4413      	add	r3, r2
 800172c:	2200      	movs	r2, #0
 800172e:	771a      	strb	r2, [r3, #28]
 8001730:	7bfb      	ldrb	r3, [r7, #15]
 8001732:	3301      	adds	r3, #1
 8001734:	73fb      	strb	r3, [r7, #15]
 8001736:	7bfb      	ldrb	r3, [r7, #15]
 8001738:	2b0f      	cmp	r3, #15
 800173a:	d9f3      	bls.n	8001724 <makeDHCPMSG+0x154>
	for (i = 0; i < 64; i++)  pDHCPMSG->sname[i]  = 0;
 800173c:	2300      	movs	r3, #0
 800173e:	73fb      	strb	r3, [r7, #15]
 8001740:	e009      	b.n	8001756 <makeDHCPMSG+0x186>
 8001742:	4b1b      	ldr	r3, [pc, #108]	@ (80017b0 <makeDHCPMSG+0x1e0>)
 8001744:	681a      	ldr	r2, [r3, #0]
 8001746:	7bfb      	ldrb	r3, [r7, #15]
 8001748:	4413      	add	r3, r2
 800174a:	2200      	movs	r2, #0
 800174c:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
 8001750:	7bfb      	ldrb	r3, [r7, #15]
 8001752:	3301      	adds	r3, #1
 8001754:	73fb      	strb	r3, [r7, #15]
 8001756:	7bfb      	ldrb	r3, [r7, #15]
 8001758:	2b3f      	cmp	r3, #63	@ 0x3f
 800175a:	d9f2      	bls.n	8001742 <makeDHCPMSG+0x172>
	for (i = 0; i < 128; i++) pDHCPMSG->file[i]   = 0;
 800175c:	2300      	movs	r3, #0
 800175e:	73fb      	strb	r3, [r7, #15]
 8001760:	e009      	b.n	8001776 <makeDHCPMSG+0x1a6>
 8001762:	4b13      	ldr	r3, [pc, #76]	@ (80017b0 <makeDHCPMSG+0x1e0>)
 8001764:	681a      	ldr	r2, [r3, #0]
 8001766:	7bfb      	ldrb	r3, [r7, #15]
 8001768:	4413      	add	r3, r2
 800176a:	2200      	movs	r2, #0
 800176c:	f883 206c 	strb.w	r2, [r3, #108]	@ 0x6c
 8001770:	7bfb      	ldrb	r3, [r7, #15]
 8001772:	3301      	adds	r3, #1
 8001774:	73fb      	strb	r3, [r7, #15]
 8001776:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800177a:	2b00      	cmp	r3, #0
 800177c:	daf1      	bge.n	8001762 <makeDHCPMSG+0x192>

	// MAGIC_COOKIE
	pDHCPMSG->OPT[0] = (uint8_t)((MAGIC_COOKIE & 0xFF000000) >> 24);
 800177e:	4b0c      	ldr	r3, [pc, #48]	@ (80017b0 <makeDHCPMSG+0x1e0>)
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	2263      	movs	r2, #99	@ 0x63
 8001784:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[1] = (uint8_t)((MAGIC_COOKIE & 0x00FF0000) >> 16);
 8001788:	4b09      	ldr	r3, [pc, #36]	@ (80017b0 <makeDHCPMSG+0x1e0>)
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	2282      	movs	r2, #130	@ 0x82
 800178e:	f883 20ed 	strb.w	r2, [r3, #237]	@ 0xed
	pDHCPMSG->OPT[2] = (uint8_t)((MAGIC_COOKIE & 0x0000FF00) >>  8);
 8001792:	4b07      	ldr	r3, [pc, #28]	@ (80017b0 <makeDHCPMSG+0x1e0>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	2253      	movs	r2, #83	@ 0x53
 8001798:	f883 20ee 	strb.w	r2, [r3, #238]	@ 0xee
	pDHCPMSG->OPT[3] = (uint8_t) (MAGIC_COOKIE & 0x000000FF) >>  0;
 800179c:	4b04      	ldr	r3, [pc, #16]	@ (80017b0 <makeDHCPMSG+0x1e0>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	2263      	movs	r2, #99	@ 0x63
 80017a2:	f883 20ef 	strb.w	r2, [r3, #239]	@ 0xef
}
 80017a6:	bf00      	nop
 80017a8:	3710      	adds	r7, #16
 80017aa:	46bd      	mov	sp, r7
 80017ac:	bd80      	pop	{r7, pc}
 80017ae:	bf00      	nop
 80017b0:	20000df0 	.word	0x20000df0
 80017b4:	20000dec 	.word	0x20000dec
 80017b8:	20000df4 	.word	0x20000df4

080017bc <send_DHCP_DISCOVER>:

/* SEND DHCP DISCOVER */
void send_DHCP_DISCOVER(void)
{
 80017bc:	b5b0      	push	{r4, r5, r7, lr}
 80017be:	b084      	sub	sp, #16
 80017c0:	af02      	add	r7, sp, #8
	uint16_t i;
	uint8_t ip[4];
	uint16_t k = 0;
 80017c2:	2300      	movs	r3, #0
 80017c4:	80bb      	strh	r3, [r7, #4]
   
   makeDHCPMSG();
 80017c6:	f7ff ff03 	bl	80015d0 <makeDHCPMSG>
   DHCP_SIP[0]=0;
 80017ca:	4b56      	ldr	r3, [pc, #344]	@ (8001924 <send_DHCP_DISCOVER+0x168>)
 80017cc:	2200      	movs	r2, #0
 80017ce:	701a      	strb	r2, [r3, #0]
   DHCP_SIP[1]=0;
 80017d0:	4b54      	ldr	r3, [pc, #336]	@ (8001924 <send_DHCP_DISCOVER+0x168>)
 80017d2:	2200      	movs	r2, #0
 80017d4:	705a      	strb	r2, [r3, #1]
   DHCP_SIP[2]=0;
 80017d6:	4b53      	ldr	r3, [pc, #332]	@ (8001924 <send_DHCP_DISCOVER+0x168>)
 80017d8:	2200      	movs	r2, #0
 80017da:	709a      	strb	r2, [r3, #2]
   DHCP_SIP[3]=0;
 80017dc:	4b51      	ldr	r3, [pc, #324]	@ (8001924 <send_DHCP_DISCOVER+0x168>)
 80017de:	2200      	movs	r2, #0
 80017e0:	70da      	strb	r2, [r3, #3]
   DHCP_REAL_SIP[0]=0;
 80017e2:	4b51      	ldr	r3, [pc, #324]	@ (8001928 <send_DHCP_DISCOVER+0x16c>)
 80017e4:	2200      	movs	r2, #0
 80017e6:	701a      	strb	r2, [r3, #0]
   DHCP_REAL_SIP[1]=0;
 80017e8:	4b4f      	ldr	r3, [pc, #316]	@ (8001928 <send_DHCP_DISCOVER+0x16c>)
 80017ea:	2200      	movs	r2, #0
 80017ec:	705a      	strb	r2, [r3, #1]
   DHCP_REAL_SIP[2]=0;
 80017ee:	4b4e      	ldr	r3, [pc, #312]	@ (8001928 <send_DHCP_DISCOVER+0x16c>)
 80017f0:	2200      	movs	r2, #0
 80017f2:	709a      	strb	r2, [r3, #2]
   DHCP_REAL_SIP[3]=0;
 80017f4:	4b4c      	ldr	r3, [pc, #304]	@ (8001928 <send_DHCP_DISCOVER+0x16c>)
 80017f6:	2200      	movs	r2, #0
 80017f8:	70da      	strb	r2, [r3, #3]

   k = 4;     // because MAGIC_COOKIE already made by makeDHCPMSG()
 80017fa:	2304      	movs	r3, #4
 80017fc:	80bb      	strh	r3, [r7, #4]
   
	// Option Request Param
	pDHCPMSG->OPT[k++] = dhcpMessageType;
 80017fe:	4b4b      	ldr	r3, [pc, #300]	@ (800192c <send_DHCP_DISCOVER+0x170>)
 8001800:	681a      	ldr	r2, [r3, #0]
 8001802:	88bb      	ldrh	r3, [r7, #4]
 8001804:	1c59      	adds	r1, r3, #1
 8001806:	80b9      	strh	r1, [r7, #4]
 8001808:	4413      	add	r3, r2
 800180a:	2235      	movs	r2, #53	@ 0x35
 800180c:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = 0x01;
 8001810:	4b46      	ldr	r3, [pc, #280]	@ (800192c <send_DHCP_DISCOVER+0x170>)
 8001812:	681a      	ldr	r2, [r3, #0]
 8001814:	88bb      	ldrh	r3, [r7, #4]
 8001816:	1c59      	adds	r1, r3, #1
 8001818:	80b9      	strh	r1, [r7, #4]
 800181a:	4413      	add	r3, r2
 800181c:	2201      	movs	r2, #1
 800181e:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_DISCOVER;
 8001822:	4b42      	ldr	r3, [pc, #264]	@ (800192c <send_DHCP_DISCOVER+0x170>)
 8001824:	681a      	ldr	r2, [r3, #0]
 8001826:	88bb      	ldrh	r3, [r7, #4]
 8001828:	1c59      	adds	r1, r3, #1
 800182a:	80b9      	strh	r1, [r7, #4]
 800182c:	4413      	add	r3, r2
 800182e:	2201      	movs	r2, #1
 8001830:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	
	// Client identifier
	pDHCPMSG->OPT[k++] = dhcpClientIdentifier;
 8001834:	4b3d      	ldr	r3, [pc, #244]	@ (800192c <send_DHCP_DISCOVER+0x170>)
 8001836:	681a      	ldr	r2, [r3, #0]
 8001838:	88bb      	ldrh	r3, [r7, #4]
 800183a:	1c59      	adds	r1, r3, #1
 800183c:	80b9      	strh	r1, [r7, #4]
 800183e:	4413      	add	r3, r2
 8001840:	223d      	movs	r2, #61	@ 0x3d
 8001842:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = 0x07;
 8001846:	4b39      	ldr	r3, [pc, #228]	@ (800192c <send_DHCP_DISCOVER+0x170>)
 8001848:	681a      	ldr	r2, [r3, #0]
 800184a:	88bb      	ldrh	r3, [r7, #4]
 800184c:	1c59      	adds	r1, r3, #1
 800184e:	80b9      	strh	r1, [r7, #4]
 8001850:	4413      	add	r3, r2
 8001852:	2207      	movs	r2, #7
 8001854:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = 0x01;
 8001858:	4b34      	ldr	r3, [pc, #208]	@ (800192c <send_DHCP_DISCOVER+0x170>)
 800185a:	681a      	ldr	r2, [r3, #0]
 800185c:	88bb      	ldrh	r3, [r7, #4]
 800185e:	1c59      	adds	r1, r3, #1
 8001860:	80b9      	strh	r1, [r7, #4]
 8001862:	4413      	add	r3, r2
 8001864:	2201      	movs	r2, #1
 8001866:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[0];
 800186a:	4b30      	ldr	r3, [pc, #192]	@ (800192c <send_DHCP_DISCOVER+0x170>)
 800186c:	681a      	ldr	r2, [r3, #0]
 800186e:	88bb      	ldrh	r3, [r7, #4]
 8001870:	1c59      	adds	r1, r3, #1
 8001872:	80b9      	strh	r1, [r7, #4]
 8001874:	4618      	mov	r0, r3
 8001876:	4b2e      	ldr	r3, [pc, #184]	@ (8001930 <send_DHCP_DISCOVER+0x174>)
 8001878:	7819      	ldrb	r1, [r3, #0]
 800187a:	1813      	adds	r3, r2, r0
 800187c:	460a      	mov	r2, r1
 800187e:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[1];
 8001882:	4b2a      	ldr	r3, [pc, #168]	@ (800192c <send_DHCP_DISCOVER+0x170>)
 8001884:	681a      	ldr	r2, [r3, #0]
 8001886:	88bb      	ldrh	r3, [r7, #4]
 8001888:	1c59      	adds	r1, r3, #1
 800188a:	80b9      	strh	r1, [r7, #4]
 800188c:	4618      	mov	r0, r3
 800188e:	4b28      	ldr	r3, [pc, #160]	@ (8001930 <send_DHCP_DISCOVER+0x174>)
 8001890:	7859      	ldrb	r1, [r3, #1]
 8001892:	1813      	adds	r3, r2, r0
 8001894:	460a      	mov	r2, r1
 8001896:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[2];
 800189a:	4b24      	ldr	r3, [pc, #144]	@ (800192c <send_DHCP_DISCOVER+0x170>)
 800189c:	681a      	ldr	r2, [r3, #0]
 800189e:	88bb      	ldrh	r3, [r7, #4]
 80018a0:	1c59      	adds	r1, r3, #1
 80018a2:	80b9      	strh	r1, [r7, #4]
 80018a4:	4618      	mov	r0, r3
 80018a6:	4b22      	ldr	r3, [pc, #136]	@ (8001930 <send_DHCP_DISCOVER+0x174>)
 80018a8:	7899      	ldrb	r1, [r3, #2]
 80018aa:	1813      	adds	r3, r2, r0
 80018ac:	460a      	mov	r2, r1
 80018ae:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[3];
 80018b2:	4b1e      	ldr	r3, [pc, #120]	@ (800192c <send_DHCP_DISCOVER+0x170>)
 80018b4:	681a      	ldr	r2, [r3, #0]
 80018b6:	88bb      	ldrh	r3, [r7, #4]
 80018b8:	1c59      	adds	r1, r3, #1
 80018ba:	80b9      	strh	r1, [r7, #4]
 80018bc:	4618      	mov	r0, r3
 80018be:	4b1c      	ldr	r3, [pc, #112]	@ (8001930 <send_DHCP_DISCOVER+0x174>)
 80018c0:	78d9      	ldrb	r1, [r3, #3]
 80018c2:	1813      	adds	r3, r2, r0
 80018c4:	460a      	mov	r2, r1
 80018c6:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[4];
 80018ca:	4b18      	ldr	r3, [pc, #96]	@ (800192c <send_DHCP_DISCOVER+0x170>)
 80018cc:	681a      	ldr	r2, [r3, #0]
 80018ce:	88bb      	ldrh	r3, [r7, #4]
 80018d0:	1c59      	adds	r1, r3, #1
 80018d2:	80b9      	strh	r1, [r7, #4]
 80018d4:	4618      	mov	r0, r3
 80018d6:	4b16      	ldr	r3, [pc, #88]	@ (8001930 <send_DHCP_DISCOVER+0x174>)
 80018d8:	7919      	ldrb	r1, [r3, #4]
 80018da:	1813      	adds	r3, r2, r0
 80018dc:	460a      	mov	r2, r1
 80018de:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[5];
 80018e2:	4b12      	ldr	r3, [pc, #72]	@ (800192c <send_DHCP_DISCOVER+0x170>)
 80018e4:	681a      	ldr	r2, [r3, #0]
 80018e6:	88bb      	ldrh	r3, [r7, #4]
 80018e8:	1c59      	adds	r1, r3, #1
 80018ea:	80b9      	strh	r1, [r7, #4]
 80018ec:	4618      	mov	r0, r3
 80018ee:	4b10      	ldr	r3, [pc, #64]	@ (8001930 <send_DHCP_DISCOVER+0x174>)
 80018f0:	7959      	ldrb	r1, [r3, #5]
 80018f2:	1813      	adds	r3, r2, r0
 80018f4:	460a      	mov	r2, r1
 80018f6:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	
	// host name
	pDHCPMSG->OPT[k++] = hostName;
 80018fa:	4b0c      	ldr	r3, [pc, #48]	@ (800192c <send_DHCP_DISCOVER+0x170>)
 80018fc:	681a      	ldr	r2, [r3, #0]
 80018fe:	88bb      	ldrh	r3, [r7, #4]
 8001900:	1c59      	adds	r1, r3, #1
 8001902:	80b9      	strh	r1, [r7, #4]
 8001904:	4413      	add	r3, r2
 8001906:	220c      	movs	r2, #12
 8001908:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = 0;          // fill zero length of hostname 
 800190c:	4b07      	ldr	r3, [pc, #28]	@ (800192c <send_DHCP_DISCOVER+0x170>)
 800190e:	681a      	ldr	r2, [r3, #0]
 8001910:	88bb      	ldrh	r3, [r7, #4]
 8001912:	1c59      	adds	r1, r3, #1
 8001914:	80b9      	strh	r1, [r7, #4]
 8001916:	4413      	add	r3, r2
 8001918:	2200      	movs	r2, #0
 800191a:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	for(i = 0 ; HOST_NAME[i] != 0; i++)
 800191e:	2300      	movs	r3, #0
 8001920:	80fb      	strh	r3, [r7, #6]
 8001922:	e017      	b.n	8001954 <send_DHCP_DISCOVER+0x198>
 8001924:	20000dc8 	.word	0x20000dc8
 8001928:	20000dcc 	.word	0x20000dcc
 800192c:	20000df0 	.word	0x20000df0
 8001930:	20000df4 	.word	0x20000df4
   	pDHCPMSG->OPT[k++] = HOST_NAME[i];
 8001934:	88f9      	ldrh	r1, [r7, #6]
 8001936:	4b82      	ldr	r3, [pc, #520]	@ (8001b40 <send_DHCP_DISCOVER+0x384>)
 8001938:	681a      	ldr	r2, [r3, #0]
 800193a:	88bb      	ldrh	r3, [r7, #4]
 800193c:	1c58      	adds	r0, r3, #1
 800193e:	80b8      	strh	r0, [r7, #4]
 8001940:	4618      	mov	r0, r3
 8001942:	4b80      	ldr	r3, [pc, #512]	@ (8001b44 <send_DHCP_DISCOVER+0x388>)
 8001944:	5c59      	ldrb	r1, [r3, r1]
 8001946:	1813      	adds	r3, r2, r0
 8001948:	460a      	mov	r2, r1
 800194a:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	for(i = 0 ; HOST_NAME[i] != 0; i++)
 800194e:	88fb      	ldrh	r3, [r7, #6]
 8001950:	3301      	adds	r3, #1
 8001952:	80fb      	strh	r3, [r7, #6]
 8001954:	88fb      	ldrh	r3, [r7, #6]
 8001956:	4a7b      	ldr	r2, [pc, #492]	@ (8001b44 <send_DHCP_DISCOVER+0x388>)
 8001958:	5cd3      	ldrb	r3, [r2, r3]
 800195a:	2b00      	cmp	r3, #0
 800195c:	d1ea      	bne.n	8001934 <send_DHCP_DISCOVER+0x178>
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[3] >> 4); 
 800195e:	4b7a      	ldr	r3, [pc, #488]	@ (8001b48 <send_DHCP_DISCOVER+0x38c>)
 8001960:	78db      	ldrb	r3, [r3, #3]
 8001962:	091b      	lsrs	r3, r3, #4
 8001964:	b2da      	uxtb	r2, r3
 8001966:	4b76      	ldr	r3, [pc, #472]	@ (8001b40 <send_DHCP_DISCOVER+0x384>)
 8001968:	681c      	ldr	r4, [r3, #0]
 800196a:	88bb      	ldrh	r3, [r7, #4]
 800196c:	1c59      	adds	r1, r3, #1
 800196e:	80b9      	strh	r1, [r7, #4]
 8001970:	461d      	mov	r5, r3
 8001972:	4610      	mov	r0, r2
 8001974:	f001 fa3c 	bl	8002df0 <NibbleToHex>
 8001978:	4603      	mov	r3, r0
 800197a:	461a      	mov	r2, r3
 800197c:	1963      	adds	r3, r4, r5
 800197e:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[3]);
 8001982:	4b71      	ldr	r3, [pc, #452]	@ (8001b48 <send_DHCP_DISCOVER+0x38c>)
 8001984:	78da      	ldrb	r2, [r3, #3]
 8001986:	4b6e      	ldr	r3, [pc, #440]	@ (8001b40 <send_DHCP_DISCOVER+0x384>)
 8001988:	681c      	ldr	r4, [r3, #0]
 800198a:	88bb      	ldrh	r3, [r7, #4]
 800198c:	1c59      	adds	r1, r3, #1
 800198e:	80b9      	strh	r1, [r7, #4]
 8001990:	461d      	mov	r5, r3
 8001992:	4610      	mov	r0, r2
 8001994:	f001 fa2c 	bl	8002df0 <NibbleToHex>
 8001998:	4603      	mov	r3, r0
 800199a:	461a      	mov	r2, r3
 800199c:	1963      	adds	r3, r4, r5
 800199e:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[4] >> 4); 
 80019a2:	4b69      	ldr	r3, [pc, #420]	@ (8001b48 <send_DHCP_DISCOVER+0x38c>)
 80019a4:	791b      	ldrb	r3, [r3, #4]
 80019a6:	091b      	lsrs	r3, r3, #4
 80019a8:	b2da      	uxtb	r2, r3
 80019aa:	4b65      	ldr	r3, [pc, #404]	@ (8001b40 <send_DHCP_DISCOVER+0x384>)
 80019ac:	681c      	ldr	r4, [r3, #0]
 80019ae:	88bb      	ldrh	r3, [r7, #4]
 80019b0:	1c59      	adds	r1, r3, #1
 80019b2:	80b9      	strh	r1, [r7, #4]
 80019b4:	461d      	mov	r5, r3
 80019b6:	4610      	mov	r0, r2
 80019b8:	f001 fa1a 	bl	8002df0 <NibbleToHex>
 80019bc:	4603      	mov	r3, r0
 80019be:	461a      	mov	r2, r3
 80019c0:	1963      	adds	r3, r4, r5
 80019c2:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[4]);
 80019c6:	4b60      	ldr	r3, [pc, #384]	@ (8001b48 <send_DHCP_DISCOVER+0x38c>)
 80019c8:	791a      	ldrb	r2, [r3, #4]
 80019ca:	4b5d      	ldr	r3, [pc, #372]	@ (8001b40 <send_DHCP_DISCOVER+0x384>)
 80019cc:	681c      	ldr	r4, [r3, #0]
 80019ce:	88bb      	ldrh	r3, [r7, #4]
 80019d0:	1c59      	adds	r1, r3, #1
 80019d2:	80b9      	strh	r1, [r7, #4]
 80019d4:	461d      	mov	r5, r3
 80019d6:	4610      	mov	r0, r2
 80019d8:	f001 fa0a 	bl	8002df0 <NibbleToHex>
 80019dc:	4603      	mov	r3, r0
 80019de:	461a      	mov	r2, r3
 80019e0:	1963      	adds	r3, r4, r5
 80019e2:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[5] >> 4); 
 80019e6:	4b58      	ldr	r3, [pc, #352]	@ (8001b48 <send_DHCP_DISCOVER+0x38c>)
 80019e8:	795b      	ldrb	r3, [r3, #5]
 80019ea:	091b      	lsrs	r3, r3, #4
 80019ec:	b2da      	uxtb	r2, r3
 80019ee:	4b54      	ldr	r3, [pc, #336]	@ (8001b40 <send_DHCP_DISCOVER+0x384>)
 80019f0:	681c      	ldr	r4, [r3, #0]
 80019f2:	88bb      	ldrh	r3, [r7, #4]
 80019f4:	1c59      	adds	r1, r3, #1
 80019f6:	80b9      	strh	r1, [r7, #4]
 80019f8:	461d      	mov	r5, r3
 80019fa:	4610      	mov	r0, r2
 80019fc:	f001 f9f8 	bl	8002df0 <NibbleToHex>
 8001a00:	4603      	mov	r3, r0
 8001a02:	461a      	mov	r2, r3
 8001a04:	1963      	adds	r3, r4, r5
 8001a06:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[5]);
 8001a0a:	4b4f      	ldr	r3, [pc, #316]	@ (8001b48 <send_DHCP_DISCOVER+0x38c>)
 8001a0c:	795a      	ldrb	r2, [r3, #5]
 8001a0e:	4b4c      	ldr	r3, [pc, #304]	@ (8001b40 <send_DHCP_DISCOVER+0x384>)
 8001a10:	681c      	ldr	r4, [r3, #0]
 8001a12:	88bb      	ldrh	r3, [r7, #4]
 8001a14:	1c59      	adds	r1, r3, #1
 8001a16:	80b9      	strh	r1, [r7, #4]
 8001a18:	461d      	mov	r5, r3
 8001a1a:	4610      	mov	r0, r2
 8001a1c:	f001 f9e8 	bl	8002df0 <NibbleToHex>
 8001a20:	4603      	mov	r3, r0
 8001a22:	461a      	mov	r2, r3
 8001a24:	1963      	adds	r3, r4, r5
 8001a26:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k - (i+6+1)] = i+6; // length of hostname
 8001a2a:	88fb      	ldrh	r3, [r7, #6]
 8001a2c:	b2d9      	uxtb	r1, r3
 8001a2e:	4b44      	ldr	r3, [pc, #272]	@ (8001b40 <send_DHCP_DISCOVER+0x384>)
 8001a30:	681a      	ldr	r2, [r3, #0]
 8001a32:	88b8      	ldrh	r0, [r7, #4]
 8001a34:	88fb      	ldrh	r3, [r7, #6]
 8001a36:	3307      	adds	r3, #7
 8001a38:	1ac3      	subs	r3, r0, r3
 8001a3a:	3106      	adds	r1, #6
 8001a3c:	b2c9      	uxtb	r1, r1
 8001a3e:	4413      	add	r3, r2
 8001a40:	460a      	mov	r2, r1
 8001a42:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec

	pDHCPMSG->OPT[k++] = dhcpParamRequest;
 8001a46:	4b3e      	ldr	r3, [pc, #248]	@ (8001b40 <send_DHCP_DISCOVER+0x384>)
 8001a48:	681a      	ldr	r2, [r3, #0]
 8001a4a:	88bb      	ldrh	r3, [r7, #4]
 8001a4c:	1c59      	adds	r1, r3, #1
 8001a4e:	80b9      	strh	r1, [r7, #4]
 8001a50:	4413      	add	r3, r2
 8001a52:	2237      	movs	r2, #55	@ 0x37
 8001a54:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = 0x06;	// length of request
 8001a58:	4b39      	ldr	r3, [pc, #228]	@ (8001b40 <send_DHCP_DISCOVER+0x384>)
 8001a5a:	681a      	ldr	r2, [r3, #0]
 8001a5c:	88bb      	ldrh	r3, [r7, #4]
 8001a5e:	1c59      	adds	r1, r3, #1
 8001a60:	80b9      	strh	r1, [r7, #4]
 8001a62:	4413      	add	r3, r2
 8001a64:	2206      	movs	r2, #6
 8001a66:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = subnetMask;
 8001a6a:	4b35      	ldr	r3, [pc, #212]	@ (8001b40 <send_DHCP_DISCOVER+0x384>)
 8001a6c:	681a      	ldr	r2, [r3, #0]
 8001a6e:	88bb      	ldrh	r3, [r7, #4]
 8001a70:	1c59      	adds	r1, r3, #1
 8001a72:	80b9      	strh	r1, [r7, #4]
 8001a74:	4413      	add	r3, r2
 8001a76:	2201      	movs	r2, #1
 8001a78:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = routersOnSubnet;
 8001a7c:	4b30      	ldr	r3, [pc, #192]	@ (8001b40 <send_DHCP_DISCOVER+0x384>)
 8001a7e:	681a      	ldr	r2, [r3, #0]
 8001a80:	88bb      	ldrh	r3, [r7, #4]
 8001a82:	1c59      	adds	r1, r3, #1
 8001a84:	80b9      	strh	r1, [r7, #4]
 8001a86:	4413      	add	r3, r2
 8001a88:	2203      	movs	r2, #3
 8001a8a:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = dns;
 8001a8e:	4b2c      	ldr	r3, [pc, #176]	@ (8001b40 <send_DHCP_DISCOVER+0x384>)
 8001a90:	681a      	ldr	r2, [r3, #0]
 8001a92:	88bb      	ldrh	r3, [r7, #4]
 8001a94:	1c59      	adds	r1, r3, #1
 8001a96:	80b9      	strh	r1, [r7, #4]
 8001a98:	4413      	add	r3, r2
 8001a9a:	2206      	movs	r2, #6
 8001a9c:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = domainName;
 8001aa0:	4b27      	ldr	r3, [pc, #156]	@ (8001b40 <send_DHCP_DISCOVER+0x384>)
 8001aa2:	681a      	ldr	r2, [r3, #0]
 8001aa4:	88bb      	ldrh	r3, [r7, #4]
 8001aa6:	1c59      	adds	r1, r3, #1
 8001aa8:	80b9      	strh	r1, [r7, #4]
 8001aaa:	4413      	add	r3, r2
 8001aac:	220f      	movs	r2, #15
 8001aae:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = dhcpT1value;
 8001ab2:	4b23      	ldr	r3, [pc, #140]	@ (8001b40 <send_DHCP_DISCOVER+0x384>)
 8001ab4:	681a      	ldr	r2, [r3, #0]
 8001ab6:	88bb      	ldrh	r3, [r7, #4]
 8001ab8:	1c59      	adds	r1, r3, #1
 8001aba:	80b9      	strh	r1, [r7, #4]
 8001abc:	4413      	add	r3, r2
 8001abe:	223a      	movs	r2, #58	@ 0x3a
 8001ac0:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = dhcpT2value;
 8001ac4:	4b1e      	ldr	r3, [pc, #120]	@ (8001b40 <send_DHCP_DISCOVER+0x384>)
 8001ac6:	681a      	ldr	r2, [r3, #0]
 8001ac8:	88bb      	ldrh	r3, [r7, #4]
 8001aca:	1c59      	adds	r1, r3, #1
 8001acc:	80b9      	strh	r1, [r7, #4]
 8001ace:	4413      	add	r3, r2
 8001ad0:	223b      	movs	r2, #59	@ 0x3b
 8001ad2:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = endOption;
 8001ad6:	4b1a      	ldr	r3, [pc, #104]	@ (8001b40 <send_DHCP_DISCOVER+0x384>)
 8001ad8:	681a      	ldr	r2, [r3, #0]
 8001ada:	88bb      	ldrh	r3, [r7, #4]
 8001adc:	1c59      	adds	r1, r3, #1
 8001ade:	80b9      	strh	r1, [r7, #4]
 8001ae0:	4413      	add	r3, r2
 8001ae2:	22ff      	movs	r2, #255	@ 0xff
 8001ae4:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec

	for (i = k; i < OPT_SIZE; i++) pDHCPMSG->OPT[i] = 0;
 8001ae8:	88bb      	ldrh	r3, [r7, #4]
 8001aea:	80fb      	strh	r3, [r7, #6]
 8001aec:	e009      	b.n	8001b02 <send_DHCP_DISCOVER+0x346>
 8001aee:	4b14      	ldr	r3, [pc, #80]	@ (8001b40 <send_DHCP_DISCOVER+0x384>)
 8001af0:	681a      	ldr	r2, [r3, #0]
 8001af2:	88fb      	ldrh	r3, [r7, #6]
 8001af4:	4413      	add	r3, r2
 8001af6:	2200      	movs	r2, #0
 8001af8:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
 8001afc:	88fb      	ldrh	r3, [r7, #6]
 8001afe:	3301      	adds	r3, #1
 8001b00:	80fb      	strh	r3, [r7, #6]
 8001b02:	88fb      	ldrh	r3, [r7, #6]
 8001b04:	f5b3 7f9c 	cmp.w	r3, #312	@ 0x138
 8001b08:	d3f1      	bcc.n	8001aee <send_DHCP_DISCOVER+0x332>

	// send broadcasting packet
	ip[0] = 255;
 8001b0a:	23ff      	movs	r3, #255	@ 0xff
 8001b0c:	703b      	strb	r3, [r7, #0]
	ip[1] = 255;
 8001b0e:	23ff      	movs	r3, #255	@ 0xff
 8001b10:	707b      	strb	r3, [r7, #1]
	ip[2] = 255;
 8001b12:	23ff      	movs	r3, #255	@ 0xff
 8001b14:	70bb      	strb	r3, [r7, #2]
	ip[3] = 255;
 8001b16:	23ff      	movs	r3, #255	@ 0xff
 8001b18:	70fb      	strb	r3, [r7, #3]

#ifdef _DHCP_DEBUG_
	printf("> Send DHCP_DISCOVER\r\n");
 8001b1a:	480c      	ldr	r0, [pc, #48]	@ (8001b4c <send_DHCP_DISCOVER+0x390>)
 8001b1c:	f00a fbce 	bl	800c2bc <puts>
#endif

	sendto(DHCP_SOCKET, (uint8_t *)pDHCPMSG, RIP_MSG_SIZE, ip, DHCP_SERVER_PORT);
 8001b20:	4b0b      	ldr	r3, [pc, #44]	@ (8001b50 <send_DHCP_DISCOVER+0x394>)
 8001b22:	7818      	ldrb	r0, [r3, #0]
 8001b24:	4b06      	ldr	r3, [pc, #24]	@ (8001b40 <send_DHCP_DISCOVER+0x384>)
 8001b26:	6819      	ldr	r1, [r3, #0]
 8001b28:	463b      	mov	r3, r7
 8001b2a:	2243      	movs	r2, #67	@ 0x43
 8001b2c:	9200      	str	r2, [sp, #0]
 8001b2e:	f44f 7209 	mov.w	r2, #548	@ 0x224
 8001b32:	f004 fa6d 	bl	8006010 <sendto>
}
 8001b36:	bf00      	nop
 8001b38:	3708      	adds	r7, #8
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	bdb0      	pop	{r4, r5, r7, pc}
 8001b3e:	bf00      	nop
 8001b40:	20000df0 	.word	0x20000df0
 8001b44:	2000008c 	.word	0x2000008c
 8001b48:	20000df4 	.word	0x20000df4
 8001b4c:	0800d618 	.word	0x0800d618
 8001b50:	20000dc5 	.word	0x20000dc5

08001b54 <send_DHCP_REQUEST>:

/* SEND DHCP REQUEST */
void send_DHCP_REQUEST(void)
{
 8001b54:	b5b0      	push	{r4, r5, r7, lr}
 8001b56:	b086      	sub	sp, #24
 8001b58:	af02      	add	r7, sp, #8
	int i;
	uint8_t ip[4];
	uint16_t k = 0;
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	817b      	strh	r3, [r7, #10]

   makeDHCPMSG();
 8001b5e:	f7ff fd37 	bl	80015d0 <makeDHCPMSG>

   if(dhcp_state == STATE_DHCP_LEASED || dhcp_state == STATE_DHCP_REREQUEST)
 8001b62:	4b1b      	ldr	r3, [pc, #108]	@ (8001bd0 <send_DHCP_REQUEST+0x7c>)
 8001b64:	f993 3000 	ldrsb.w	r3, [r3]
 8001b68:	2b03      	cmp	r3, #3
 8001b6a:	d004      	beq.n	8001b76 <send_DHCP_REQUEST+0x22>
 8001b6c:	4b18      	ldr	r3, [pc, #96]	@ (8001bd0 <send_DHCP_REQUEST+0x7c>)
 8001b6e:	f993 3000 	ldrsb.w	r3, [r3]
 8001b72:	2b04      	cmp	r3, #4
 8001b74:	d134      	bne.n	8001be0 <send_DHCP_REQUEST+0x8c>
   {
   	*((uint8_t*)(&pDHCPMSG->flags))   = ((DHCP_FLAGSUNICAST & 0xFF00)>> 8);
 8001b76:	4b17      	ldr	r3, [pc, #92]	@ (8001bd4 <send_DHCP_REQUEST+0x80>)
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	330a      	adds	r3, #10
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	701a      	strb	r2, [r3, #0]
   	*((uint8_t*)(&pDHCPMSG->flags)+1) = (DHCP_FLAGSUNICAST & 0x00FF);
 8001b80:	4b14      	ldr	r3, [pc, #80]	@ (8001bd4 <send_DHCP_REQUEST+0x80>)
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	330a      	adds	r3, #10
 8001b86:	3301      	adds	r3, #1
 8001b88:	2200      	movs	r2, #0
 8001b8a:	701a      	strb	r2, [r3, #0]
   	pDHCPMSG->ciaddr[0] = DHCP_allocated_ip[0];
 8001b8c:	4b11      	ldr	r3, [pc, #68]	@ (8001bd4 <send_DHCP_REQUEST+0x80>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	4a11      	ldr	r2, [pc, #68]	@ (8001bd8 <send_DHCP_REQUEST+0x84>)
 8001b92:	7812      	ldrb	r2, [r2, #0]
 8001b94:	731a      	strb	r2, [r3, #12]
   	pDHCPMSG->ciaddr[1] = DHCP_allocated_ip[1];
 8001b96:	4b0f      	ldr	r3, [pc, #60]	@ (8001bd4 <send_DHCP_REQUEST+0x80>)
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	4a0f      	ldr	r2, [pc, #60]	@ (8001bd8 <send_DHCP_REQUEST+0x84>)
 8001b9c:	7852      	ldrb	r2, [r2, #1]
 8001b9e:	735a      	strb	r2, [r3, #13]
   	pDHCPMSG->ciaddr[2] = DHCP_allocated_ip[2];
 8001ba0:	4b0c      	ldr	r3, [pc, #48]	@ (8001bd4 <send_DHCP_REQUEST+0x80>)
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	4a0c      	ldr	r2, [pc, #48]	@ (8001bd8 <send_DHCP_REQUEST+0x84>)
 8001ba6:	7892      	ldrb	r2, [r2, #2]
 8001ba8:	739a      	strb	r2, [r3, #14]
   	pDHCPMSG->ciaddr[3] = DHCP_allocated_ip[3];
 8001baa:	4b0a      	ldr	r3, [pc, #40]	@ (8001bd4 <send_DHCP_REQUEST+0x80>)
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	4a0a      	ldr	r2, [pc, #40]	@ (8001bd8 <send_DHCP_REQUEST+0x84>)
 8001bb0:	78d2      	ldrb	r2, [r2, #3]
 8001bb2:	73da      	strb	r2, [r3, #15]
   	ip[0] = DHCP_SIP[0];
 8001bb4:	4b09      	ldr	r3, [pc, #36]	@ (8001bdc <send_DHCP_REQUEST+0x88>)
 8001bb6:	781b      	ldrb	r3, [r3, #0]
 8001bb8:	713b      	strb	r3, [r7, #4]
   	ip[1] = DHCP_SIP[1];
 8001bba:	4b08      	ldr	r3, [pc, #32]	@ (8001bdc <send_DHCP_REQUEST+0x88>)
 8001bbc:	785b      	ldrb	r3, [r3, #1]
 8001bbe:	717b      	strb	r3, [r7, #5]
   	ip[2] = DHCP_SIP[2];
 8001bc0:	4b06      	ldr	r3, [pc, #24]	@ (8001bdc <send_DHCP_REQUEST+0x88>)
 8001bc2:	789b      	ldrb	r3, [r3, #2]
 8001bc4:	71bb      	strb	r3, [r7, #6]
   	ip[3] = DHCP_SIP[3];   	   	   	
 8001bc6:	4b05      	ldr	r3, [pc, #20]	@ (8001bdc <send_DHCP_REQUEST+0x88>)
 8001bc8:	78db      	ldrb	r3, [r3, #3]
 8001bca:	71fb      	strb	r3, [r7, #7]
 8001bcc:	e010      	b.n	8001bf0 <send_DHCP_REQUEST+0x9c>
 8001bce:	bf00      	nop
 8001bd0:	20000de4 	.word	0x20000de4
 8001bd4:	20000df0 	.word	0x20000df0
 8001bd8:	20000dd4 	.word	0x20000dd4
 8001bdc:	20000dc8 	.word	0x20000dc8
   }
   else
   {
   	ip[0] = 255;
 8001be0:	23ff      	movs	r3, #255	@ 0xff
 8001be2:	713b      	strb	r3, [r7, #4]
   	ip[1] = 255;
 8001be4:	23ff      	movs	r3, #255	@ 0xff
 8001be6:	717b      	strb	r3, [r7, #5]
   	ip[2] = 255;
 8001be8:	23ff      	movs	r3, #255	@ 0xff
 8001bea:	71bb      	strb	r3, [r7, #6]
   	ip[3] = 255;   	   	   	
 8001bec:	23ff      	movs	r3, #255	@ 0xff
 8001bee:	71fb      	strb	r3, [r7, #7]
   }
   
   k = 4;      // because MAGIC_COOKIE already made by makeDHCPMSG()
 8001bf0:	2304      	movs	r3, #4
 8001bf2:	817b      	strh	r3, [r7, #10]
	
	// Option Request Param.
	pDHCPMSG->OPT[k++] = dhcpMessageType;
 8001bf4:	4b8d      	ldr	r3, [pc, #564]	@ (8001e2c <send_DHCP_REQUEST+0x2d8>)
 8001bf6:	681a      	ldr	r2, [r3, #0]
 8001bf8:	897b      	ldrh	r3, [r7, #10]
 8001bfa:	1c59      	adds	r1, r3, #1
 8001bfc:	8179      	strh	r1, [r7, #10]
 8001bfe:	4413      	add	r3, r2
 8001c00:	2235      	movs	r2, #53	@ 0x35
 8001c02:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = 0x01;
 8001c06:	4b89      	ldr	r3, [pc, #548]	@ (8001e2c <send_DHCP_REQUEST+0x2d8>)
 8001c08:	681a      	ldr	r2, [r3, #0]
 8001c0a:	897b      	ldrh	r3, [r7, #10]
 8001c0c:	1c59      	adds	r1, r3, #1
 8001c0e:	8179      	strh	r1, [r7, #10]
 8001c10:	4413      	add	r3, r2
 8001c12:	2201      	movs	r2, #1
 8001c14:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_REQUEST;
 8001c18:	4b84      	ldr	r3, [pc, #528]	@ (8001e2c <send_DHCP_REQUEST+0x2d8>)
 8001c1a:	681a      	ldr	r2, [r3, #0]
 8001c1c:	897b      	ldrh	r3, [r7, #10]
 8001c1e:	1c59      	adds	r1, r3, #1
 8001c20:	8179      	strh	r1, [r7, #10]
 8001c22:	4413      	add	r3, r2
 8001c24:	2203      	movs	r2, #3
 8001c26:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec

	pDHCPMSG->OPT[k++] = dhcpClientIdentifier;
 8001c2a:	4b80      	ldr	r3, [pc, #512]	@ (8001e2c <send_DHCP_REQUEST+0x2d8>)
 8001c2c:	681a      	ldr	r2, [r3, #0]
 8001c2e:	897b      	ldrh	r3, [r7, #10]
 8001c30:	1c59      	adds	r1, r3, #1
 8001c32:	8179      	strh	r1, [r7, #10]
 8001c34:	4413      	add	r3, r2
 8001c36:	223d      	movs	r2, #61	@ 0x3d
 8001c38:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = 0x07;
 8001c3c:	4b7b      	ldr	r3, [pc, #492]	@ (8001e2c <send_DHCP_REQUEST+0x2d8>)
 8001c3e:	681a      	ldr	r2, [r3, #0]
 8001c40:	897b      	ldrh	r3, [r7, #10]
 8001c42:	1c59      	adds	r1, r3, #1
 8001c44:	8179      	strh	r1, [r7, #10]
 8001c46:	4413      	add	r3, r2
 8001c48:	2207      	movs	r2, #7
 8001c4a:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = 0x01;
 8001c4e:	4b77      	ldr	r3, [pc, #476]	@ (8001e2c <send_DHCP_REQUEST+0x2d8>)
 8001c50:	681a      	ldr	r2, [r3, #0]
 8001c52:	897b      	ldrh	r3, [r7, #10]
 8001c54:	1c59      	adds	r1, r3, #1
 8001c56:	8179      	strh	r1, [r7, #10]
 8001c58:	4413      	add	r3, r2
 8001c5a:	2201      	movs	r2, #1
 8001c5c:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[0];
 8001c60:	4b72      	ldr	r3, [pc, #456]	@ (8001e2c <send_DHCP_REQUEST+0x2d8>)
 8001c62:	681a      	ldr	r2, [r3, #0]
 8001c64:	897b      	ldrh	r3, [r7, #10]
 8001c66:	1c59      	adds	r1, r3, #1
 8001c68:	8179      	strh	r1, [r7, #10]
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	4b70      	ldr	r3, [pc, #448]	@ (8001e30 <send_DHCP_REQUEST+0x2dc>)
 8001c6e:	7819      	ldrb	r1, [r3, #0]
 8001c70:	1813      	adds	r3, r2, r0
 8001c72:	460a      	mov	r2, r1
 8001c74:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[1];
 8001c78:	4b6c      	ldr	r3, [pc, #432]	@ (8001e2c <send_DHCP_REQUEST+0x2d8>)
 8001c7a:	681a      	ldr	r2, [r3, #0]
 8001c7c:	897b      	ldrh	r3, [r7, #10]
 8001c7e:	1c59      	adds	r1, r3, #1
 8001c80:	8179      	strh	r1, [r7, #10]
 8001c82:	4618      	mov	r0, r3
 8001c84:	4b6a      	ldr	r3, [pc, #424]	@ (8001e30 <send_DHCP_REQUEST+0x2dc>)
 8001c86:	7859      	ldrb	r1, [r3, #1]
 8001c88:	1813      	adds	r3, r2, r0
 8001c8a:	460a      	mov	r2, r1
 8001c8c:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[2];
 8001c90:	4b66      	ldr	r3, [pc, #408]	@ (8001e2c <send_DHCP_REQUEST+0x2d8>)
 8001c92:	681a      	ldr	r2, [r3, #0]
 8001c94:	897b      	ldrh	r3, [r7, #10]
 8001c96:	1c59      	adds	r1, r3, #1
 8001c98:	8179      	strh	r1, [r7, #10]
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	4b64      	ldr	r3, [pc, #400]	@ (8001e30 <send_DHCP_REQUEST+0x2dc>)
 8001c9e:	7899      	ldrb	r1, [r3, #2]
 8001ca0:	1813      	adds	r3, r2, r0
 8001ca2:	460a      	mov	r2, r1
 8001ca4:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[3];
 8001ca8:	4b60      	ldr	r3, [pc, #384]	@ (8001e2c <send_DHCP_REQUEST+0x2d8>)
 8001caa:	681a      	ldr	r2, [r3, #0]
 8001cac:	897b      	ldrh	r3, [r7, #10]
 8001cae:	1c59      	adds	r1, r3, #1
 8001cb0:	8179      	strh	r1, [r7, #10]
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	4b5e      	ldr	r3, [pc, #376]	@ (8001e30 <send_DHCP_REQUEST+0x2dc>)
 8001cb6:	78d9      	ldrb	r1, [r3, #3]
 8001cb8:	1813      	adds	r3, r2, r0
 8001cba:	460a      	mov	r2, r1
 8001cbc:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[4];
 8001cc0:	4b5a      	ldr	r3, [pc, #360]	@ (8001e2c <send_DHCP_REQUEST+0x2d8>)
 8001cc2:	681a      	ldr	r2, [r3, #0]
 8001cc4:	897b      	ldrh	r3, [r7, #10]
 8001cc6:	1c59      	adds	r1, r3, #1
 8001cc8:	8179      	strh	r1, [r7, #10]
 8001cca:	4618      	mov	r0, r3
 8001ccc:	4b58      	ldr	r3, [pc, #352]	@ (8001e30 <send_DHCP_REQUEST+0x2dc>)
 8001cce:	7919      	ldrb	r1, [r3, #4]
 8001cd0:	1813      	adds	r3, r2, r0
 8001cd2:	460a      	mov	r2, r1
 8001cd4:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[5];
 8001cd8:	4b54      	ldr	r3, [pc, #336]	@ (8001e2c <send_DHCP_REQUEST+0x2d8>)
 8001cda:	681a      	ldr	r2, [r3, #0]
 8001cdc:	897b      	ldrh	r3, [r7, #10]
 8001cde:	1c59      	adds	r1, r3, #1
 8001ce0:	8179      	strh	r1, [r7, #10]
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	4b52      	ldr	r3, [pc, #328]	@ (8001e30 <send_DHCP_REQUEST+0x2dc>)
 8001ce6:	7959      	ldrb	r1, [r3, #5]
 8001ce8:	1813      	adds	r3, r2, r0
 8001cea:	460a      	mov	r2, r1
 8001cec:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec

   if(ip[3] == 255)  // if(dchp_state == STATE_DHCP_LEASED || dchp_state == DHCP_REREQUEST_STATE)
 8001cf0:	79fb      	ldrb	r3, [r7, #7]
 8001cf2:	2bff      	cmp	r3, #255	@ 0xff
 8001cf4:	f040 8084 	bne.w	8001e00 <send_DHCP_REQUEST+0x2ac>
   {
		pDHCPMSG->OPT[k++] = dhcpRequestedIPaddr;
 8001cf8:	4b4c      	ldr	r3, [pc, #304]	@ (8001e2c <send_DHCP_REQUEST+0x2d8>)
 8001cfa:	681a      	ldr	r2, [r3, #0]
 8001cfc:	897b      	ldrh	r3, [r7, #10]
 8001cfe:	1c59      	adds	r1, r3, #1
 8001d00:	8179      	strh	r1, [r7, #10]
 8001d02:	4413      	add	r3, r2
 8001d04:	2232      	movs	r2, #50	@ 0x32
 8001d06:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
		pDHCPMSG->OPT[k++] = 0x04;
 8001d0a:	4b48      	ldr	r3, [pc, #288]	@ (8001e2c <send_DHCP_REQUEST+0x2d8>)
 8001d0c:	681a      	ldr	r2, [r3, #0]
 8001d0e:	897b      	ldrh	r3, [r7, #10]
 8001d10:	1c59      	adds	r1, r3, #1
 8001d12:	8179      	strh	r1, [r7, #10]
 8001d14:	4413      	add	r3, r2
 8001d16:	2204      	movs	r2, #4
 8001d18:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
		pDHCPMSG->OPT[k++] = DHCP_allocated_ip[0];
 8001d1c:	4b43      	ldr	r3, [pc, #268]	@ (8001e2c <send_DHCP_REQUEST+0x2d8>)
 8001d1e:	681a      	ldr	r2, [r3, #0]
 8001d20:	897b      	ldrh	r3, [r7, #10]
 8001d22:	1c59      	adds	r1, r3, #1
 8001d24:	8179      	strh	r1, [r7, #10]
 8001d26:	4618      	mov	r0, r3
 8001d28:	4b42      	ldr	r3, [pc, #264]	@ (8001e34 <send_DHCP_REQUEST+0x2e0>)
 8001d2a:	7819      	ldrb	r1, [r3, #0]
 8001d2c:	1813      	adds	r3, r2, r0
 8001d2e:	460a      	mov	r2, r1
 8001d30:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
		pDHCPMSG->OPT[k++] = DHCP_allocated_ip[1];
 8001d34:	4b3d      	ldr	r3, [pc, #244]	@ (8001e2c <send_DHCP_REQUEST+0x2d8>)
 8001d36:	681a      	ldr	r2, [r3, #0]
 8001d38:	897b      	ldrh	r3, [r7, #10]
 8001d3a:	1c59      	adds	r1, r3, #1
 8001d3c:	8179      	strh	r1, [r7, #10]
 8001d3e:	4618      	mov	r0, r3
 8001d40:	4b3c      	ldr	r3, [pc, #240]	@ (8001e34 <send_DHCP_REQUEST+0x2e0>)
 8001d42:	7859      	ldrb	r1, [r3, #1]
 8001d44:	1813      	adds	r3, r2, r0
 8001d46:	460a      	mov	r2, r1
 8001d48:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
		pDHCPMSG->OPT[k++] = DHCP_allocated_ip[2];
 8001d4c:	4b37      	ldr	r3, [pc, #220]	@ (8001e2c <send_DHCP_REQUEST+0x2d8>)
 8001d4e:	681a      	ldr	r2, [r3, #0]
 8001d50:	897b      	ldrh	r3, [r7, #10]
 8001d52:	1c59      	adds	r1, r3, #1
 8001d54:	8179      	strh	r1, [r7, #10]
 8001d56:	4618      	mov	r0, r3
 8001d58:	4b36      	ldr	r3, [pc, #216]	@ (8001e34 <send_DHCP_REQUEST+0x2e0>)
 8001d5a:	7899      	ldrb	r1, [r3, #2]
 8001d5c:	1813      	adds	r3, r2, r0
 8001d5e:	460a      	mov	r2, r1
 8001d60:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
		pDHCPMSG->OPT[k++] = DHCP_allocated_ip[3];
 8001d64:	4b31      	ldr	r3, [pc, #196]	@ (8001e2c <send_DHCP_REQUEST+0x2d8>)
 8001d66:	681a      	ldr	r2, [r3, #0]
 8001d68:	897b      	ldrh	r3, [r7, #10]
 8001d6a:	1c59      	adds	r1, r3, #1
 8001d6c:	8179      	strh	r1, [r7, #10]
 8001d6e:	4618      	mov	r0, r3
 8001d70:	4b30      	ldr	r3, [pc, #192]	@ (8001e34 <send_DHCP_REQUEST+0x2e0>)
 8001d72:	78d9      	ldrb	r1, [r3, #3]
 8001d74:	1813      	adds	r3, r2, r0
 8001d76:	460a      	mov	r2, r1
 8001d78:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	
		pDHCPMSG->OPT[k++] = dhcpServerIdentifier;
 8001d7c:	4b2b      	ldr	r3, [pc, #172]	@ (8001e2c <send_DHCP_REQUEST+0x2d8>)
 8001d7e:	681a      	ldr	r2, [r3, #0]
 8001d80:	897b      	ldrh	r3, [r7, #10]
 8001d82:	1c59      	adds	r1, r3, #1
 8001d84:	8179      	strh	r1, [r7, #10]
 8001d86:	4413      	add	r3, r2
 8001d88:	2236      	movs	r2, #54	@ 0x36
 8001d8a:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
		pDHCPMSG->OPT[k++] = 0x04;
 8001d8e:	4b27      	ldr	r3, [pc, #156]	@ (8001e2c <send_DHCP_REQUEST+0x2d8>)
 8001d90:	681a      	ldr	r2, [r3, #0]
 8001d92:	897b      	ldrh	r3, [r7, #10]
 8001d94:	1c59      	adds	r1, r3, #1
 8001d96:	8179      	strh	r1, [r7, #10]
 8001d98:	4413      	add	r3, r2
 8001d9a:	2204      	movs	r2, #4
 8001d9c:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
		pDHCPMSG->OPT[k++] = DHCP_SIP[0];
 8001da0:	4b22      	ldr	r3, [pc, #136]	@ (8001e2c <send_DHCP_REQUEST+0x2d8>)
 8001da2:	681a      	ldr	r2, [r3, #0]
 8001da4:	897b      	ldrh	r3, [r7, #10]
 8001da6:	1c59      	adds	r1, r3, #1
 8001da8:	8179      	strh	r1, [r7, #10]
 8001daa:	4618      	mov	r0, r3
 8001dac:	4b22      	ldr	r3, [pc, #136]	@ (8001e38 <send_DHCP_REQUEST+0x2e4>)
 8001dae:	7819      	ldrb	r1, [r3, #0]
 8001db0:	1813      	adds	r3, r2, r0
 8001db2:	460a      	mov	r2, r1
 8001db4:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
		pDHCPMSG->OPT[k++] = DHCP_SIP[1];
 8001db8:	4b1c      	ldr	r3, [pc, #112]	@ (8001e2c <send_DHCP_REQUEST+0x2d8>)
 8001dba:	681a      	ldr	r2, [r3, #0]
 8001dbc:	897b      	ldrh	r3, [r7, #10]
 8001dbe:	1c59      	adds	r1, r3, #1
 8001dc0:	8179      	strh	r1, [r7, #10]
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	4b1c      	ldr	r3, [pc, #112]	@ (8001e38 <send_DHCP_REQUEST+0x2e4>)
 8001dc6:	7859      	ldrb	r1, [r3, #1]
 8001dc8:	1813      	adds	r3, r2, r0
 8001dca:	460a      	mov	r2, r1
 8001dcc:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
		pDHCPMSG->OPT[k++] = DHCP_SIP[2];
 8001dd0:	4b16      	ldr	r3, [pc, #88]	@ (8001e2c <send_DHCP_REQUEST+0x2d8>)
 8001dd2:	681a      	ldr	r2, [r3, #0]
 8001dd4:	897b      	ldrh	r3, [r7, #10]
 8001dd6:	1c59      	adds	r1, r3, #1
 8001dd8:	8179      	strh	r1, [r7, #10]
 8001dda:	4618      	mov	r0, r3
 8001ddc:	4b16      	ldr	r3, [pc, #88]	@ (8001e38 <send_DHCP_REQUEST+0x2e4>)
 8001dde:	7899      	ldrb	r1, [r3, #2]
 8001de0:	1813      	adds	r3, r2, r0
 8001de2:	460a      	mov	r2, r1
 8001de4:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
		pDHCPMSG->OPT[k++] = DHCP_SIP[3];
 8001de8:	4b10      	ldr	r3, [pc, #64]	@ (8001e2c <send_DHCP_REQUEST+0x2d8>)
 8001dea:	681a      	ldr	r2, [r3, #0]
 8001dec:	897b      	ldrh	r3, [r7, #10]
 8001dee:	1c59      	adds	r1, r3, #1
 8001df0:	8179      	strh	r1, [r7, #10]
 8001df2:	4618      	mov	r0, r3
 8001df4:	4b10      	ldr	r3, [pc, #64]	@ (8001e38 <send_DHCP_REQUEST+0x2e4>)
 8001df6:	78d9      	ldrb	r1, [r3, #3]
 8001df8:	1813      	adds	r3, r2, r0
 8001dfa:	460a      	mov	r2, r1
 8001dfc:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	}

	// host name
	pDHCPMSG->OPT[k++] = hostName;
 8001e00:	4b0a      	ldr	r3, [pc, #40]	@ (8001e2c <send_DHCP_REQUEST+0x2d8>)
 8001e02:	681a      	ldr	r2, [r3, #0]
 8001e04:	897b      	ldrh	r3, [r7, #10]
 8001e06:	1c59      	adds	r1, r3, #1
 8001e08:	8179      	strh	r1, [r7, #10]
 8001e0a:	4413      	add	r3, r2
 8001e0c:	220c      	movs	r2, #12
 8001e0e:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = 0; // length of hostname
 8001e12:	4b06      	ldr	r3, [pc, #24]	@ (8001e2c <send_DHCP_REQUEST+0x2d8>)
 8001e14:	681a      	ldr	r2, [r3, #0]
 8001e16:	897b      	ldrh	r3, [r7, #10]
 8001e18:	1c59      	adds	r1, r3, #1
 8001e1a:	8179      	strh	r1, [r7, #10]
 8001e1c:	4413      	add	r3, r2
 8001e1e:	2200      	movs	r2, #0
 8001e20:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	for(i = 0 ; HOST_NAME[i] != 0; i++)
 8001e24:	2300      	movs	r3, #0
 8001e26:	60fb      	str	r3, [r7, #12]
 8001e28:	e019      	b.n	8001e5e <send_DHCP_REQUEST+0x30a>
 8001e2a:	bf00      	nop
 8001e2c:	20000df0 	.word	0x20000df0
 8001e30:	20000df4 	.word	0x20000df4
 8001e34:	20000dd4 	.word	0x20000dd4
 8001e38:	20000dc8 	.word	0x20000dc8
   	pDHCPMSG->OPT[k++] = HOST_NAME[i];
 8001e3c:	4b88      	ldr	r3, [pc, #544]	@ (8002060 <send_DHCP_REQUEST+0x50c>)
 8001e3e:	681a      	ldr	r2, [r3, #0]
 8001e40:	897b      	ldrh	r3, [r7, #10]
 8001e42:	1c59      	adds	r1, r3, #1
 8001e44:	8179      	strh	r1, [r7, #10]
 8001e46:	4618      	mov	r0, r3
 8001e48:	4986      	ldr	r1, [pc, #536]	@ (8002064 <send_DHCP_REQUEST+0x510>)
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	440b      	add	r3, r1
 8001e4e:	7819      	ldrb	r1, [r3, #0]
 8001e50:	1813      	adds	r3, r2, r0
 8001e52:	460a      	mov	r2, r1
 8001e54:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	for(i = 0 ; HOST_NAME[i] != 0; i++)
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	3301      	adds	r3, #1
 8001e5c:	60fb      	str	r3, [r7, #12]
 8001e5e:	4a81      	ldr	r2, [pc, #516]	@ (8002064 <send_DHCP_REQUEST+0x510>)
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	4413      	add	r3, r2
 8001e64:	781b      	ldrb	r3, [r3, #0]
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d1e8      	bne.n	8001e3c <send_DHCP_REQUEST+0x2e8>
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[3] >> 4); 
 8001e6a:	4b7f      	ldr	r3, [pc, #508]	@ (8002068 <send_DHCP_REQUEST+0x514>)
 8001e6c:	78db      	ldrb	r3, [r3, #3]
 8001e6e:	091b      	lsrs	r3, r3, #4
 8001e70:	b2da      	uxtb	r2, r3
 8001e72:	4b7b      	ldr	r3, [pc, #492]	@ (8002060 <send_DHCP_REQUEST+0x50c>)
 8001e74:	681c      	ldr	r4, [r3, #0]
 8001e76:	897b      	ldrh	r3, [r7, #10]
 8001e78:	1c59      	adds	r1, r3, #1
 8001e7a:	8179      	strh	r1, [r7, #10]
 8001e7c:	461d      	mov	r5, r3
 8001e7e:	4610      	mov	r0, r2
 8001e80:	f000 ffb6 	bl	8002df0 <NibbleToHex>
 8001e84:	4603      	mov	r3, r0
 8001e86:	461a      	mov	r2, r3
 8001e88:	1963      	adds	r3, r4, r5
 8001e8a:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[3]);
 8001e8e:	4b76      	ldr	r3, [pc, #472]	@ (8002068 <send_DHCP_REQUEST+0x514>)
 8001e90:	78da      	ldrb	r2, [r3, #3]
 8001e92:	4b73      	ldr	r3, [pc, #460]	@ (8002060 <send_DHCP_REQUEST+0x50c>)
 8001e94:	681c      	ldr	r4, [r3, #0]
 8001e96:	897b      	ldrh	r3, [r7, #10]
 8001e98:	1c59      	adds	r1, r3, #1
 8001e9a:	8179      	strh	r1, [r7, #10]
 8001e9c:	461d      	mov	r5, r3
 8001e9e:	4610      	mov	r0, r2
 8001ea0:	f000 ffa6 	bl	8002df0 <NibbleToHex>
 8001ea4:	4603      	mov	r3, r0
 8001ea6:	461a      	mov	r2, r3
 8001ea8:	1963      	adds	r3, r4, r5
 8001eaa:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[4] >> 4); 
 8001eae:	4b6e      	ldr	r3, [pc, #440]	@ (8002068 <send_DHCP_REQUEST+0x514>)
 8001eb0:	791b      	ldrb	r3, [r3, #4]
 8001eb2:	091b      	lsrs	r3, r3, #4
 8001eb4:	b2da      	uxtb	r2, r3
 8001eb6:	4b6a      	ldr	r3, [pc, #424]	@ (8002060 <send_DHCP_REQUEST+0x50c>)
 8001eb8:	681c      	ldr	r4, [r3, #0]
 8001eba:	897b      	ldrh	r3, [r7, #10]
 8001ebc:	1c59      	adds	r1, r3, #1
 8001ebe:	8179      	strh	r1, [r7, #10]
 8001ec0:	461d      	mov	r5, r3
 8001ec2:	4610      	mov	r0, r2
 8001ec4:	f000 ff94 	bl	8002df0 <NibbleToHex>
 8001ec8:	4603      	mov	r3, r0
 8001eca:	461a      	mov	r2, r3
 8001ecc:	1963      	adds	r3, r4, r5
 8001ece:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[4]);
 8001ed2:	4b65      	ldr	r3, [pc, #404]	@ (8002068 <send_DHCP_REQUEST+0x514>)
 8001ed4:	791a      	ldrb	r2, [r3, #4]
 8001ed6:	4b62      	ldr	r3, [pc, #392]	@ (8002060 <send_DHCP_REQUEST+0x50c>)
 8001ed8:	681c      	ldr	r4, [r3, #0]
 8001eda:	897b      	ldrh	r3, [r7, #10]
 8001edc:	1c59      	adds	r1, r3, #1
 8001ede:	8179      	strh	r1, [r7, #10]
 8001ee0:	461d      	mov	r5, r3
 8001ee2:	4610      	mov	r0, r2
 8001ee4:	f000 ff84 	bl	8002df0 <NibbleToHex>
 8001ee8:	4603      	mov	r3, r0
 8001eea:	461a      	mov	r2, r3
 8001eec:	1963      	adds	r3, r4, r5
 8001eee:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[5] >> 4); 
 8001ef2:	4b5d      	ldr	r3, [pc, #372]	@ (8002068 <send_DHCP_REQUEST+0x514>)
 8001ef4:	795b      	ldrb	r3, [r3, #5]
 8001ef6:	091b      	lsrs	r3, r3, #4
 8001ef8:	b2da      	uxtb	r2, r3
 8001efa:	4b59      	ldr	r3, [pc, #356]	@ (8002060 <send_DHCP_REQUEST+0x50c>)
 8001efc:	681c      	ldr	r4, [r3, #0]
 8001efe:	897b      	ldrh	r3, [r7, #10]
 8001f00:	1c59      	adds	r1, r3, #1
 8001f02:	8179      	strh	r1, [r7, #10]
 8001f04:	461d      	mov	r5, r3
 8001f06:	4610      	mov	r0, r2
 8001f08:	f000 ff72 	bl	8002df0 <NibbleToHex>
 8001f0c:	4603      	mov	r3, r0
 8001f0e:	461a      	mov	r2, r3
 8001f10:	1963      	adds	r3, r4, r5
 8001f12:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[5]);
 8001f16:	4b54      	ldr	r3, [pc, #336]	@ (8002068 <send_DHCP_REQUEST+0x514>)
 8001f18:	795a      	ldrb	r2, [r3, #5]
 8001f1a:	4b51      	ldr	r3, [pc, #324]	@ (8002060 <send_DHCP_REQUEST+0x50c>)
 8001f1c:	681c      	ldr	r4, [r3, #0]
 8001f1e:	897b      	ldrh	r3, [r7, #10]
 8001f20:	1c59      	adds	r1, r3, #1
 8001f22:	8179      	strh	r1, [r7, #10]
 8001f24:	461d      	mov	r5, r3
 8001f26:	4610      	mov	r0, r2
 8001f28:	f000 ff62 	bl	8002df0 <NibbleToHex>
 8001f2c:	4603      	mov	r3, r0
 8001f2e:	461a      	mov	r2, r3
 8001f30:	1963      	adds	r3, r4, r5
 8001f32:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k - (i+6+1)] = i+6; // length of hostname
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	b2d9      	uxtb	r1, r3
 8001f3a:	4b49      	ldr	r3, [pc, #292]	@ (8002060 <send_DHCP_REQUEST+0x50c>)
 8001f3c:	681a      	ldr	r2, [r3, #0]
 8001f3e:	8978      	ldrh	r0, [r7, #10]
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	3307      	adds	r3, #7
 8001f44:	1ac3      	subs	r3, r0, r3
 8001f46:	3106      	adds	r1, #6
 8001f48:	b2c9      	uxtb	r1, r1
 8001f4a:	4413      	add	r3, r2
 8001f4c:	460a      	mov	r2, r1
 8001f4e:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	
	pDHCPMSG->OPT[k++] = dhcpParamRequest;
 8001f52:	4b43      	ldr	r3, [pc, #268]	@ (8002060 <send_DHCP_REQUEST+0x50c>)
 8001f54:	681a      	ldr	r2, [r3, #0]
 8001f56:	897b      	ldrh	r3, [r7, #10]
 8001f58:	1c59      	adds	r1, r3, #1
 8001f5a:	8179      	strh	r1, [r7, #10]
 8001f5c:	4413      	add	r3, r2
 8001f5e:	2237      	movs	r2, #55	@ 0x37
 8001f60:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = 0x08;
 8001f64:	4b3e      	ldr	r3, [pc, #248]	@ (8002060 <send_DHCP_REQUEST+0x50c>)
 8001f66:	681a      	ldr	r2, [r3, #0]
 8001f68:	897b      	ldrh	r3, [r7, #10]
 8001f6a:	1c59      	adds	r1, r3, #1
 8001f6c:	8179      	strh	r1, [r7, #10]
 8001f6e:	4413      	add	r3, r2
 8001f70:	2208      	movs	r2, #8
 8001f72:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = subnetMask;
 8001f76:	4b3a      	ldr	r3, [pc, #232]	@ (8002060 <send_DHCP_REQUEST+0x50c>)
 8001f78:	681a      	ldr	r2, [r3, #0]
 8001f7a:	897b      	ldrh	r3, [r7, #10]
 8001f7c:	1c59      	adds	r1, r3, #1
 8001f7e:	8179      	strh	r1, [r7, #10]
 8001f80:	4413      	add	r3, r2
 8001f82:	2201      	movs	r2, #1
 8001f84:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = routersOnSubnet;
 8001f88:	4b35      	ldr	r3, [pc, #212]	@ (8002060 <send_DHCP_REQUEST+0x50c>)
 8001f8a:	681a      	ldr	r2, [r3, #0]
 8001f8c:	897b      	ldrh	r3, [r7, #10]
 8001f8e:	1c59      	adds	r1, r3, #1
 8001f90:	8179      	strh	r1, [r7, #10]
 8001f92:	4413      	add	r3, r2
 8001f94:	2203      	movs	r2, #3
 8001f96:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = dns;
 8001f9a:	4b31      	ldr	r3, [pc, #196]	@ (8002060 <send_DHCP_REQUEST+0x50c>)
 8001f9c:	681a      	ldr	r2, [r3, #0]
 8001f9e:	897b      	ldrh	r3, [r7, #10]
 8001fa0:	1c59      	adds	r1, r3, #1
 8001fa2:	8179      	strh	r1, [r7, #10]
 8001fa4:	4413      	add	r3, r2
 8001fa6:	2206      	movs	r2, #6
 8001fa8:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = domainName;
 8001fac:	4b2c      	ldr	r3, [pc, #176]	@ (8002060 <send_DHCP_REQUEST+0x50c>)
 8001fae:	681a      	ldr	r2, [r3, #0]
 8001fb0:	897b      	ldrh	r3, [r7, #10]
 8001fb2:	1c59      	adds	r1, r3, #1
 8001fb4:	8179      	strh	r1, [r7, #10]
 8001fb6:	4413      	add	r3, r2
 8001fb8:	220f      	movs	r2, #15
 8001fba:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = dhcpT1value;
 8001fbe:	4b28      	ldr	r3, [pc, #160]	@ (8002060 <send_DHCP_REQUEST+0x50c>)
 8001fc0:	681a      	ldr	r2, [r3, #0]
 8001fc2:	897b      	ldrh	r3, [r7, #10]
 8001fc4:	1c59      	adds	r1, r3, #1
 8001fc6:	8179      	strh	r1, [r7, #10]
 8001fc8:	4413      	add	r3, r2
 8001fca:	223a      	movs	r2, #58	@ 0x3a
 8001fcc:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = dhcpT2value;
 8001fd0:	4b23      	ldr	r3, [pc, #140]	@ (8002060 <send_DHCP_REQUEST+0x50c>)
 8001fd2:	681a      	ldr	r2, [r3, #0]
 8001fd4:	897b      	ldrh	r3, [r7, #10]
 8001fd6:	1c59      	adds	r1, r3, #1
 8001fd8:	8179      	strh	r1, [r7, #10]
 8001fda:	4413      	add	r3, r2
 8001fdc:	223b      	movs	r2, #59	@ 0x3b
 8001fde:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = performRouterDiscovery;
 8001fe2:	4b1f      	ldr	r3, [pc, #124]	@ (8002060 <send_DHCP_REQUEST+0x50c>)
 8001fe4:	681a      	ldr	r2, [r3, #0]
 8001fe6:	897b      	ldrh	r3, [r7, #10]
 8001fe8:	1c59      	adds	r1, r3, #1
 8001fea:	8179      	strh	r1, [r7, #10]
 8001fec:	4413      	add	r3, r2
 8001fee:	221f      	movs	r2, #31
 8001ff0:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = staticRoute;
 8001ff4:	4b1a      	ldr	r3, [pc, #104]	@ (8002060 <send_DHCP_REQUEST+0x50c>)
 8001ff6:	681a      	ldr	r2, [r3, #0]
 8001ff8:	897b      	ldrh	r3, [r7, #10]
 8001ffa:	1c59      	adds	r1, r3, #1
 8001ffc:	8179      	strh	r1, [r7, #10]
 8001ffe:	4413      	add	r3, r2
 8002000:	2221      	movs	r2, #33	@ 0x21
 8002002:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = endOption;
 8002006:	4b16      	ldr	r3, [pc, #88]	@ (8002060 <send_DHCP_REQUEST+0x50c>)
 8002008:	681a      	ldr	r2, [r3, #0]
 800200a:	897b      	ldrh	r3, [r7, #10]
 800200c:	1c59      	adds	r1, r3, #1
 800200e:	8179      	strh	r1, [r7, #10]
 8002010:	4413      	add	r3, r2
 8002012:	22ff      	movs	r2, #255	@ 0xff
 8002014:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec

	for (i = k; i < OPT_SIZE; i++) pDHCPMSG->OPT[i] = 0;
 8002018:	897b      	ldrh	r3, [r7, #10]
 800201a:	60fb      	str	r3, [r7, #12]
 800201c:	e009      	b.n	8002032 <send_DHCP_REQUEST+0x4de>
 800201e:	4b10      	ldr	r3, [pc, #64]	@ (8002060 <send_DHCP_REQUEST+0x50c>)
 8002020:	681a      	ldr	r2, [r3, #0]
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	4413      	add	r3, r2
 8002026:	33ec      	adds	r3, #236	@ 0xec
 8002028:	2200      	movs	r2, #0
 800202a:	701a      	strb	r2, [r3, #0]
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	3301      	adds	r3, #1
 8002030:	60fb      	str	r3, [r7, #12]
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	f5b3 7f9c 	cmp.w	r3, #312	@ 0x138
 8002038:	dbf1      	blt.n	800201e <send_DHCP_REQUEST+0x4ca>

#ifdef _DHCP_DEBUG_
	printf("> Send DHCP_REQUEST\r\n");
 800203a:	480c      	ldr	r0, [pc, #48]	@ (800206c <send_DHCP_REQUEST+0x518>)
 800203c:	f00a f93e 	bl	800c2bc <puts>
#endif
	
	sendto(DHCP_SOCKET, (uint8_t *)pDHCPMSG, RIP_MSG_SIZE, ip, DHCP_SERVER_PORT);
 8002040:	4b0b      	ldr	r3, [pc, #44]	@ (8002070 <send_DHCP_REQUEST+0x51c>)
 8002042:	7818      	ldrb	r0, [r3, #0]
 8002044:	4b06      	ldr	r3, [pc, #24]	@ (8002060 <send_DHCP_REQUEST+0x50c>)
 8002046:	6819      	ldr	r1, [r3, #0]
 8002048:	1d3b      	adds	r3, r7, #4
 800204a:	2243      	movs	r2, #67	@ 0x43
 800204c:	9200      	str	r2, [sp, #0]
 800204e:	f44f 7209 	mov.w	r2, #548	@ 0x224
 8002052:	f003 ffdd 	bl	8006010 <sendto>

}
 8002056:	bf00      	nop
 8002058:	3710      	adds	r7, #16
 800205a:	46bd      	mov	sp, r7
 800205c:	bdb0      	pop	{r4, r5, r7, pc}
 800205e:	bf00      	nop
 8002060:	20000df0 	.word	0x20000df0
 8002064:	2000008c 	.word	0x2000008c
 8002068:	20000df4 	.word	0x20000df4
 800206c:	0800d630 	.word	0x0800d630
 8002070:	20000dc5 	.word	0x20000dc5

08002074 <send_DHCP_DECLINE>:

/* SEND DHCP DHCPDECLINE */
void send_DHCP_DECLINE(void)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b086      	sub	sp, #24
 8002078:	af02      	add	r7, sp, #8
	int i;
	uint8_t ip[4];
	uint16_t k = 0;
 800207a:	2300      	movs	r3, #0
 800207c:	817b      	strh	r3, [r7, #10]
	
	makeDHCPMSG();
 800207e:	f7ff faa7 	bl	80015d0 <makeDHCPMSG>

   k = 4;      // because MAGIC_COOKIE already made by makeDHCPMSG()
 8002082:	2304      	movs	r3, #4
 8002084:	817b      	strh	r3, [r7, #10]
   
	*((uint8_t*)(&pDHCPMSG->flags))   = ((DHCP_FLAGSUNICAST & 0xFF00)>> 8);
 8002086:	4ba0      	ldr	r3, [pc, #640]	@ (8002308 <send_DHCP_DECLINE+0x294>)
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	330a      	adds	r3, #10
 800208c:	2200      	movs	r2, #0
 800208e:	701a      	strb	r2, [r3, #0]
	*((uint8_t*)(&pDHCPMSG->flags)+1) = (DHCP_FLAGSUNICAST & 0x00FF);
 8002090:	4b9d      	ldr	r3, [pc, #628]	@ (8002308 <send_DHCP_DECLINE+0x294>)
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	330a      	adds	r3, #10
 8002096:	3301      	adds	r3, #1
 8002098:	2200      	movs	r2, #0
 800209a:	701a      	strb	r2, [r3, #0]

	// Option Request Param.
	pDHCPMSG->OPT[k++] = dhcpMessageType;
 800209c:	4b9a      	ldr	r3, [pc, #616]	@ (8002308 <send_DHCP_DECLINE+0x294>)
 800209e:	681a      	ldr	r2, [r3, #0]
 80020a0:	897b      	ldrh	r3, [r7, #10]
 80020a2:	1c59      	adds	r1, r3, #1
 80020a4:	8179      	strh	r1, [r7, #10]
 80020a6:	4413      	add	r3, r2
 80020a8:	2235      	movs	r2, #53	@ 0x35
 80020aa:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = 0x01;
 80020ae:	4b96      	ldr	r3, [pc, #600]	@ (8002308 <send_DHCP_DECLINE+0x294>)
 80020b0:	681a      	ldr	r2, [r3, #0]
 80020b2:	897b      	ldrh	r3, [r7, #10]
 80020b4:	1c59      	adds	r1, r3, #1
 80020b6:	8179      	strh	r1, [r7, #10]
 80020b8:	4413      	add	r3, r2
 80020ba:	2201      	movs	r2, #1
 80020bc:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_DECLINE;
 80020c0:	4b91      	ldr	r3, [pc, #580]	@ (8002308 <send_DHCP_DECLINE+0x294>)
 80020c2:	681a      	ldr	r2, [r3, #0]
 80020c4:	897b      	ldrh	r3, [r7, #10]
 80020c6:	1c59      	adds	r1, r3, #1
 80020c8:	8179      	strh	r1, [r7, #10]
 80020ca:	4413      	add	r3, r2
 80020cc:	2204      	movs	r2, #4
 80020ce:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec

	pDHCPMSG->OPT[k++] = dhcpClientIdentifier;
 80020d2:	4b8d      	ldr	r3, [pc, #564]	@ (8002308 <send_DHCP_DECLINE+0x294>)
 80020d4:	681a      	ldr	r2, [r3, #0]
 80020d6:	897b      	ldrh	r3, [r7, #10]
 80020d8:	1c59      	adds	r1, r3, #1
 80020da:	8179      	strh	r1, [r7, #10]
 80020dc:	4413      	add	r3, r2
 80020de:	223d      	movs	r2, #61	@ 0x3d
 80020e0:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = 0x07;
 80020e4:	4b88      	ldr	r3, [pc, #544]	@ (8002308 <send_DHCP_DECLINE+0x294>)
 80020e6:	681a      	ldr	r2, [r3, #0]
 80020e8:	897b      	ldrh	r3, [r7, #10]
 80020ea:	1c59      	adds	r1, r3, #1
 80020ec:	8179      	strh	r1, [r7, #10]
 80020ee:	4413      	add	r3, r2
 80020f0:	2207      	movs	r2, #7
 80020f2:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = 0x01;
 80020f6:	4b84      	ldr	r3, [pc, #528]	@ (8002308 <send_DHCP_DECLINE+0x294>)
 80020f8:	681a      	ldr	r2, [r3, #0]
 80020fa:	897b      	ldrh	r3, [r7, #10]
 80020fc:	1c59      	adds	r1, r3, #1
 80020fe:	8179      	strh	r1, [r7, #10]
 8002100:	4413      	add	r3, r2
 8002102:	2201      	movs	r2, #1
 8002104:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[0];
 8002108:	4b7f      	ldr	r3, [pc, #508]	@ (8002308 <send_DHCP_DECLINE+0x294>)
 800210a:	681a      	ldr	r2, [r3, #0]
 800210c:	897b      	ldrh	r3, [r7, #10]
 800210e:	1c59      	adds	r1, r3, #1
 8002110:	8179      	strh	r1, [r7, #10]
 8002112:	4618      	mov	r0, r3
 8002114:	4b7d      	ldr	r3, [pc, #500]	@ (800230c <send_DHCP_DECLINE+0x298>)
 8002116:	7819      	ldrb	r1, [r3, #0]
 8002118:	1813      	adds	r3, r2, r0
 800211a:	460a      	mov	r2, r1
 800211c:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[1];
 8002120:	4b79      	ldr	r3, [pc, #484]	@ (8002308 <send_DHCP_DECLINE+0x294>)
 8002122:	681a      	ldr	r2, [r3, #0]
 8002124:	897b      	ldrh	r3, [r7, #10]
 8002126:	1c59      	adds	r1, r3, #1
 8002128:	8179      	strh	r1, [r7, #10]
 800212a:	4618      	mov	r0, r3
 800212c:	4b77      	ldr	r3, [pc, #476]	@ (800230c <send_DHCP_DECLINE+0x298>)
 800212e:	7859      	ldrb	r1, [r3, #1]
 8002130:	1813      	adds	r3, r2, r0
 8002132:	460a      	mov	r2, r1
 8002134:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[2];
 8002138:	4b73      	ldr	r3, [pc, #460]	@ (8002308 <send_DHCP_DECLINE+0x294>)
 800213a:	681a      	ldr	r2, [r3, #0]
 800213c:	897b      	ldrh	r3, [r7, #10]
 800213e:	1c59      	adds	r1, r3, #1
 8002140:	8179      	strh	r1, [r7, #10]
 8002142:	4618      	mov	r0, r3
 8002144:	4b71      	ldr	r3, [pc, #452]	@ (800230c <send_DHCP_DECLINE+0x298>)
 8002146:	7899      	ldrb	r1, [r3, #2]
 8002148:	1813      	adds	r3, r2, r0
 800214a:	460a      	mov	r2, r1
 800214c:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[3];
 8002150:	4b6d      	ldr	r3, [pc, #436]	@ (8002308 <send_DHCP_DECLINE+0x294>)
 8002152:	681a      	ldr	r2, [r3, #0]
 8002154:	897b      	ldrh	r3, [r7, #10]
 8002156:	1c59      	adds	r1, r3, #1
 8002158:	8179      	strh	r1, [r7, #10]
 800215a:	4618      	mov	r0, r3
 800215c:	4b6b      	ldr	r3, [pc, #428]	@ (800230c <send_DHCP_DECLINE+0x298>)
 800215e:	78d9      	ldrb	r1, [r3, #3]
 8002160:	1813      	adds	r3, r2, r0
 8002162:	460a      	mov	r2, r1
 8002164:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[4];
 8002168:	4b67      	ldr	r3, [pc, #412]	@ (8002308 <send_DHCP_DECLINE+0x294>)
 800216a:	681a      	ldr	r2, [r3, #0]
 800216c:	897b      	ldrh	r3, [r7, #10]
 800216e:	1c59      	adds	r1, r3, #1
 8002170:	8179      	strh	r1, [r7, #10]
 8002172:	4618      	mov	r0, r3
 8002174:	4b65      	ldr	r3, [pc, #404]	@ (800230c <send_DHCP_DECLINE+0x298>)
 8002176:	7919      	ldrb	r1, [r3, #4]
 8002178:	1813      	adds	r3, r2, r0
 800217a:	460a      	mov	r2, r1
 800217c:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[5];
 8002180:	4b61      	ldr	r3, [pc, #388]	@ (8002308 <send_DHCP_DECLINE+0x294>)
 8002182:	681a      	ldr	r2, [r3, #0]
 8002184:	897b      	ldrh	r3, [r7, #10]
 8002186:	1c59      	adds	r1, r3, #1
 8002188:	8179      	strh	r1, [r7, #10]
 800218a:	4618      	mov	r0, r3
 800218c:	4b5f      	ldr	r3, [pc, #380]	@ (800230c <send_DHCP_DECLINE+0x298>)
 800218e:	7959      	ldrb	r1, [r3, #5]
 8002190:	1813      	adds	r3, r2, r0
 8002192:	460a      	mov	r2, r1
 8002194:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec

	pDHCPMSG->OPT[k++] = dhcpRequestedIPaddr;
 8002198:	4b5b      	ldr	r3, [pc, #364]	@ (8002308 <send_DHCP_DECLINE+0x294>)
 800219a:	681a      	ldr	r2, [r3, #0]
 800219c:	897b      	ldrh	r3, [r7, #10]
 800219e:	1c59      	adds	r1, r3, #1
 80021a0:	8179      	strh	r1, [r7, #10]
 80021a2:	4413      	add	r3, r2
 80021a4:	2232      	movs	r2, #50	@ 0x32
 80021a6:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = 0x04;
 80021aa:	4b57      	ldr	r3, [pc, #348]	@ (8002308 <send_DHCP_DECLINE+0x294>)
 80021ac:	681a      	ldr	r2, [r3, #0]
 80021ae:	897b      	ldrh	r3, [r7, #10]
 80021b0:	1c59      	adds	r1, r3, #1
 80021b2:	8179      	strh	r1, [r7, #10]
 80021b4:	4413      	add	r3, r2
 80021b6:	2204      	movs	r2, #4
 80021b8:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_allocated_ip[0];
 80021bc:	4b52      	ldr	r3, [pc, #328]	@ (8002308 <send_DHCP_DECLINE+0x294>)
 80021be:	681a      	ldr	r2, [r3, #0]
 80021c0:	897b      	ldrh	r3, [r7, #10]
 80021c2:	1c59      	adds	r1, r3, #1
 80021c4:	8179      	strh	r1, [r7, #10]
 80021c6:	4618      	mov	r0, r3
 80021c8:	4b51      	ldr	r3, [pc, #324]	@ (8002310 <send_DHCP_DECLINE+0x29c>)
 80021ca:	7819      	ldrb	r1, [r3, #0]
 80021cc:	1813      	adds	r3, r2, r0
 80021ce:	460a      	mov	r2, r1
 80021d0:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_allocated_ip[1];
 80021d4:	4b4c      	ldr	r3, [pc, #304]	@ (8002308 <send_DHCP_DECLINE+0x294>)
 80021d6:	681a      	ldr	r2, [r3, #0]
 80021d8:	897b      	ldrh	r3, [r7, #10]
 80021da:	1c59      	adds	r1, r3, #1
 80021dc:	8179      	strh	r1, [r7, #10]
 80021de:	4618      	mov	r0, r3
 80021e0:	4b4b      	ldr	r3, [pc, #300]	@ (8002310 <send_DHCP_DECLINE+0x29c>)
 80021e2:	7859      	ldrb	r1, [r3, #1]
 80021e4:	1813      	adds	r3, r2, r0
 80021e6:	460a      	mov	r2, r1
 80021e8:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_allocated_ip[2];
 80021ec:	4b46      	ldr	r3, [pc, #280]	@ (8002308 <send_DHCP_DECLINE+0x294>)
 80021ee:	681a      	ldr	r2, [r3, #0]
 80021f0:	897b      	ldrh	r3, [r7, #10]
 80021f2:	1c59      	adds	r1, r3, #1
 80021f4:	8179      	strh	r1, [r7, #10]
 80021f6:	4618      	mov	r0, r3
 80021f8:	4b45      	ldr	r3, [pc, #276]	@ (8002310 <send_DHCP_DECLINE+0x29c>)
 80021fa:	7899      	ldrb	r1, [r3, #2]
 80021fc:	1813      	adds	r3, r2, r0
 80021fe:	460a      	mov	r2, r1
 8002200:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_allocated_ip[3];
 8002204:	4b40      	ldr	r3, [pc, #256]	@ (8002308 <send_DHCP_DECLINE+0x294>)
 8002206:	681a      	ldr	r2, [r3, #0]
 8002208:	897b      	ldrh	r3, [r7, #10]
 800220a:	1c59      	adds	r1, r3, #1
 800220c:	8179      	strh	r1, [r7, #10]
 800220e:	4618      	mov	r0, r3
 8002210:	4b3f      	ldr	r3, [pc, #252]	@ (8002310 <send_DHCP_DECLINE+0x29c>)
 8002212:	78d9      	ldrb	r1, [r3, #3]
 8002214:	1813      	adds	r3, r2, r0
 8002216:	460a      	mov	r2, r1
 8002218:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec

	pDHCPMSG->OPT[k++] = dhcpServerIdentifier;
 800221c:	4b3a      	ldr	r3, [pc, #232]	@ (8002308 <send_DHCP_DECLINE+0x294>)
 800221e:	681a      	ldr	r2, [r3, #0]
 8002220:	897b      	ldrh	r3, [r7, #10]
 8002222:	1c59      	adds	r1, r3, #1
 8002224:	8179      	strh	r1, [r7, #10]
 8002226:	4413      	add	r3, r2
 8002228:	2236      	movs	r2, #54	@ 0x36
 800222a:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = 0x04;
 800222e:	4b36      	ldr	r3, [pc, #216]	@ (8002308 <send_DHCP_DECLINE+0x294>)
 8002230:	681a      	ldr	r2, [r3, #0]
 8002232:	897b      	ldrh	r3, [r7, #10]
 8002234:	1c59      	adds	r1, r3, #1
 8002236:	8179      	strh	r1, [r7, #10]
 8002238:	4413      	add	r3, r2
 800223a:	2204      	movs	r2, #4
 800223c:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_SIP[0];
 8002240:	4b31      	ldr	r3, [pc, #196]	@ (8002308 <send_DHCP_DECLINE+0x294>)
 8002242:	681a      	ldr	r2, [r3, #0]
 8002244:	897b      	ldrh	r3, [r7, #10]
 8002246:	1c59      	adds	r1, r3, #1
 8002248:	8179      	strh	r1, [r7, #10]
 800224a:	4618      	mov	r0, r3
 800224c:	4b31      	ldr	r3, [pc, #196]	@ (8002314 <send_DHCP_DECLINE+0x2a0>)
 800224e:	7819      	ldrb	r1, [r3, #0]
 8002250:	1813      	adds	r3, r2, r0
 8002252:	460a      	mov	r2, r1
 8002254:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_SIP[1];
 8002258:	4b2b      	ldr	r3, [pc, #172]	@ (8002308 <send_DHCP_DECLINE+0x294>)
 800225a:	681a      	ldr	r2, [r3, #0]
 800225c:	897b      	ldrh	r3, [r7, #10]
 800225e:	1c59      	adds	r1, r3, #1
 8002260:	8179      	strh	r1, [r7, #10]
 8002262:	4618      	mov	r0, r3
 8002264:	4b2b      	ldr	r3, [pc, #172]	@ (8002314 <send_DHCP_DECLINE+0x2a0>)
 8002266:	7859      	ldrb	r1, [r3, #1]
 8002268:	1813      	adds	r3, r2, r0
 800226a:	460a      	mov	r2, r1
 800226c:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_SIP[2];
 8002270:	4b25      	ldr	r3, [pc, #148]	@ (8002308 <send_DHCP_DECLINE+0x294>)
 8002272:	681a      	ldr	r2, [r3, #0]
 8002274:	897b      	ldrh	r3, [r7, #10]
 8002276:	1c59      	adds	r1, r3, #1
 8002278:	8179      	strh	r1, [r7, #10]
 800227a:	4618      	mov	r0, r3
 800227c:	4b25      	ldr	r3, [pc, #148]	@ (8002314 <send_DHCP_DECLINE+0x2a0>)
 800227e:	7899      	ldrb	r1, [r3, #2]
 8002280:	1813      	adds	r3, r2, r0
 8002282:	460a      	mov	r2, r1
 8002284:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_SIP[3];
 8002288:	4b1f      	ldr	r3, [pc, #124]	@ (8002308 <send_DHCP_DECLINE+0x294>)
 800228a:	681a      	ldr	r2, [r3, #0]
 800228c:	897b      	ldrh	r3, [r7, #10]
 800228e:	1c59      	adds	r1, r3, #1
 8002290:	8179      	strh	r1, [r7, #10]
 8002292:	4618      	mov	r0, r3
 8002294:	4b1f      	ldr	r3, [pc, #124]	@ (8002314 <send_DHCP_DECLINE+0x2a0>)
 8002296:	78d9      	ldrb	r1, [r3, #3]
 8002298:	1813      	adds	r3, r2, r0
 800229a:	460a      	mov	r2, r1
 800229c:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec

	pDHCPMSG->OPT[k++] = endOption;
 80022a0:	4b19      	ldr	r3, [pc, #100]	@ (8002308 <send_DHCP_DECLINE+0x294>)
 80022a2:	681a      	ldr	r2, [r3, #0]
 80022a4:	897b      	ldrh	r3, [r7, #10]
 80022a6:	1c59      	adds	r1, r3, #1
 80022a8:	8179      	strh	r1, [r7, #10]
 80022aa:	4413      	add	r3, r2
 80022ac:	22ff      	movs	r2, #255	@ 0xff
 80022ae:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec

	for (i = k; i < OPT_SIZE; i++) pDHCPMSG->OPT[i] = 0;
 80022b2:	897b      	ldrh	r3, [r7, #10]
 80022b4:	60fb      	str	r3, [r7, #12]
 80022b6:	e009      	b.n	80022cc <send_DHCP_DECLINE+0x258>
 80022b8:	4b13      	ldr	r3, [pc, #76]	@ (8002308 <send_DHCP_DECLINE+0x294>)
 80022ba:	681a      	ldr	r2, [r3, #0]
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	4413      	add	r3, r2
 80022c0:	33ec      	adds	r3, #236	@ 0xec
 80022c2:	2200      	movs	r2, #0
 80022c4:	701a      	strb	r2, [r3, #0]
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	3301      	adds	r3, #1
 80022ca:	60fb      	str	r3, [r7, #12]
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	f5b3 7f9c 	cmp.w	r3, #312	@ 0x138
 80022d2:	dbf1      	blt.n	80022b8 <send_DHCP_DECLINE+0x244>

	//send broadcasting packet
	ip[0] = 0xFF;
 80022d4:	23ff      	movs	r3, #255	@ 0xff
 80022d6:	713b      	strb	r3, [r7, #4]
	ip[1] = 0xFF;
 80022d8:	23ff      	movs	r3, #255	@ 0xff
 80022da:	717b      	strb	r3, [r7, #5]
	ip[2] = 0xFF;
 80022dc:	23ff      	movs	r3, #255	@ 0xff
 80022de:	71bb      	strb	r3, [r7, #6]
	ip[3] = 0xFF;
 80022e0:	23ff      	movs	r3, #255	@ 0xff
 80022e2:	71fb      	strb	r3, [r7, #7]

#ifdef _DHCP_DEBUG_
	printf("\r\n> Send DHCP_DECLINE\r\n");
 80022e4:	480c      	ldr	r0, [pc, #48]	@ (8002318 <send_DHCP_DECLINE+0x2a4>)
 80022e6:	f009 ffe9 	bl	800c2bc <puts>
#endif

	sendto(DHCP_SOCKET, (uint8_t *)pDHCPMSG, RIP_MSG_SIZE, ip, DHCP_SERVER_PORT);
 80022ea:	4b0c      	ldr	r3, [pc, #48]	@ (800231c <send_DHCP_DECLINE+0x2a8>)
 80022ec:	7818      	ldrb	r0, [r3, #0]
 80022ee:	4b06      	ldr	r3, [pc, #24]	@ (8002308 <send_DHCP_DECLINE+0x294>)
 80022f0:	6819      	ldr	r1, [r3, #0]
 80022f2:	1d3b      	adds	r3, r7, #4
 80022f4:	2243      	movs	r2, #67	@ 0x43
 80022f6:	9200      	str	r2, [sp, #0]
 80022f8:	f44f 7209 	mov.w	r2, #548	@ 0x224
 80022fc:	f003 fe88 	bl	8006010 <sendto>
}
 8002300:	bf00      	nop
 8002302:	3710      	adds	r7, #16
 8002304:	46bd      	mov	sp, r7
 8002306:	bd80      	pop	{r7, pc}
 8002308:	20000df0 	.word	0x20000df0
 800230c:	20000df4 	.word	0x20000df4
 8002310:	20000dd4 	.word	0x20000dd4
 8002314:	20000dc8 	.word	0x20000dc8
 8002318:	0800d648 	.word	0x0800d648
 800231c:	20000dc5 	.word	0x20000dc5

08002320 <parseDHCPMSG>:

/* PARSE REPLY pDHCPMSG */
int8_t parseDHCPMSG(void)
{
 8002320:	b5b0      	push	{r4, r5, r7, lr}
 8002322:	b08a      	sub	sp, #40	@ 0x28
 8002324:	af04      	add	r7, sp, #16
	uint16_t  svr_port;
	uint16_t len;

	uint8_t * p;
	uint8_t * e;
	uint8_t type = 0;
 8002326:	2300      	movs	r3, #0
 8002328:	74fb      	strb	r3, [r7, #19]
	uint8_t opt_len;
   
   if((len = getSn_RX_RSR(DHCP_SOCKET)) > 0)
 800232a:	4b9e      	ldr	r3, [pc, #632]	@ (80025a4 <parseDHCPMSG+0x284>)
 800232c:	781b      	ldrb	r3, [r3, #0]
 800232e:	4618      	mov	r0, r3
 8002330:	f003 f8ab 	bl	800548a <getSn_RX_RSR>
 8002334:	4603      	mov	r3, r0
 8002336:	823b      	strh	r3, [r7, #16]
 8002338:	8a3b      	ldrh	r3, [r7, #16]
 800233a:	2b00      	cmp	r3, #0
 800233c:	d025      	beq.n	800238a <parseDHCPMSG+0x6a>
   {
   	len = recvfrom(DHCP_SOCKET, (uint8_t *)pDHCPMSG, len, svr_addr, &svr_port);
 800233e:	4b99      	ldr	r3, [pc, #612]	@ (80025a4 <parseDHCPMSG+0x284>)
 8002340:	7818      	ldrb	r0, [r3, #0]
 8002342:	4b99      	ldr	r3, [pc, #612]	@ (80025a8 <parseDHCPMSG+0x288>)
 8002344:	6819      	ldr	r1, [r3, #0]
 8002346:	1d3c      	adds	r4, r7, #4
 8002348:	8a3a      	ldrh	r2, [r7, #16]
 800234a:	1cbb      	adds	r3, r7, #2
 800234c:	9300      	str	r3, [sp, #0]
 800234e:	4623      	mov	r3, r4
 8002350:	f003 ff92 	bl	8006278 <recvfrom>
 8002354:	4603      	mov	r3, r0
 8002356:	823b      	strh	r3, [r7, #16]
   #ifdef _DHCP_DEBUG_   
      printf("DHCP message : %d.%d.%d.%d(%d) %d received. \r\n",svr_addr[0],svr_addr[1],svr_addr[2], svr_addr[3],svr_port, len);
 8002358:	793b      	ldrb	r3, [r7, #4]
 800235a:	4618      	mov	r0, r3
 800235c:	797b      	ldrb	r3, [r7, #5]
 800235e:	461c      	mov	r4, r3
 8002360:	79bb      	ldrb	r3, [r7, #6]
 8002362:	461d      	mov	r5, r3
 8002364:	79fb      	ldrb	r3, [r7, #7]
 8002366:	461a      	mov	r2, r3
 8002368:	887b      	ldrh	r3, [r7, #2]
 800236a:	4619      	mov	r1, r3
 800236c:	8a3b      	ldrh	r3, [r7, #16]
 800236e:	9302      	str	r3, [sp, #8]
 8002370:	9101      	str	r1, [sp, #4]
 8002372:	9200      	str	r2, [sp, #0]
 8002374:	462b      	mov	r3, r5
 8002376:	4622      	mov	r2, r4
 8002378:	4601      	mov	r1, r0
 800237a:	488c      	ldr	r0, [pc, #560]	@ (80025ac <parseDHCPMSG+0x28c>)
 800237c:	f009 ff36 	bl	800c1ec <iprintf>
   #endif   
   }
   else
	   return 0;

	if (svr_port == DHCP_SERVER_PORT) {
 8002380:	887b      	ldrh	r3, [r7, #2]
 8002382:	2b43      	cmp	r3, #67	@ 0x43
 8002384:	f040 81f9 	bne.w	800277a <parseDHCPMSG+0x45a>
 8002388:	e001      	b.n	800238e <parseDHCPMSG+0x6e>
	   return 0;
 800238a:	2300      	movs	r3, #0
 800238c:	e1f7      	b.n	800277e <parseDHCPMSG+0x45e>
      // compare mac address
		if ( (pDHCPMSG->chaddr[0] != DHCP_CHADDR[0]) || (pDHCPMSG->chaddr[1] != DHCP_CHADDR[1]) ||
 800238e:	4b86      	ldr	r3, [pc, #536]	@ (80025a8 <parseDHCPMSG+0x288>)
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	7f1a      	ldrb	r2, [r3, #28]
 8002394:	4b86      	ldr	r3, [pc, #536]	@ (80025b0 <parseDHCPMSG+0x290>)
 8002396:	781b      	ldrb	r3, [r3, #0]
 8002398:	429a      	cmp	r2, r3
 800239a:	d124      	bne.n	80023e6 <parseDHCPMSG+0xc6>
 800239c:	4b82      	ldr	r3, [pc, #520]	@ (80025a8 <parseDHCPMSG+0x288>)
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	7f5a      	ldrb	r2, [r3, #29]
 80023a2:	4b83      	ldr	r3, [pc, #524]	@ (80025b0 <parseDHCPMSG+0x290>)
 80023a4:	785b      	ldrb	r3, [r3, #1]
 80023a6:	429a      	cmp	r2, r3
 80023a8:	d11d      	bne.n	80023e6 <parseDHCPMSG+0xc6>
		     (pDHCPMSG->chaddr[2] != DHCP_CHADDR[2]) || (pDHCPMSG->chaddr[3] != DHCP_CHADDR[3]) ||
 80023aa:	4b7f      	ldr	r3, [pc, #508]	@ (80025a8 <parseDHCPMSG+0x288>)
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	7f9a      	ldrb	r2, [r3, #30]
 80023b0:	4b7f      	ldr	r3, [pc, #508]	@ (80025b0 <parseDHCPMSG+0x290>)
 80023b2:	789b      	ldrb	r3, [r3, #2]
		if ( (pDHCPMSG->chaddr[0] != DHCP_CHADDR[0]) || (pDHCPMSG->chaddr[1] != DHCP_CHADDR[1]) ||
 80023b4:	429a      	cmp	r2, r3
 80023b6:	d116      	bne.n	80023e6 <parseDHCPMSG+0xc6>
		     (pDHCPMSG->chaddr[2] != DHCP_CHADDR[2]) || (pDHCPMSG->chaddr[3] != DHCP_CHADDR[3]) ||
 80023b8:	4b7b      	ldr	r3, [pc, #492]	@ (80025a8 <parseDHCPMSG+0x288>)
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	7fda      	ldrb	r2, [r3, #31]
 80023be:	4b7c      	ldr	r3, [pc, #496]	@ (80025b0 <parseDHCPMSG+0x290>)
 80023c0:	78db      	ldrb	r3, [r3, #3]
 80023c2:	429a      	cmp	r2, r3
 80023c4:	d10f      	bne.n	80023e6 <parseDHCPMSG+0xc6>
		     (pDHCPMSG->chaddr[4] != DHCP_CHADDR[4]) || (pDHCPMSG->chaddr[5] != DHCP_CHADDR[5])   )
 80023c6:	4b78      	ldr	r3, [pc, #480]	@ (80025a8 <parseDHCPMSG+0x288>)
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f893 2020 	ldrb.w	r2, [r3, #32]
 80023ce:	4b78      	ldr	r3, [pc, #480]	@ (80025b0 <parseDHCPMSG+0x290>)
 80023d0:	791b      	ldrb	r3, [r3, #4]
		     (pDHCPMSG->chaddr[2] != DHCP_CHADDR[2]) || (pDHCPMSG->chaddr[3] != DHCP_CHADDR[3]) ||
 80023d2:	429a      	cmp	r2, r3
 80023d4:	d107      	bne.n	80023e6 <parseDHCPMSG+0xc6>
		     (pDHCPMSG->chaddr[4] != DHCP_CHADDR[4]) || (pDHCPMSG->chaddr[5] != DHCP_CHADDR[5])   )
 80023d6:	4b74      	ldr	r3, [pc, #464]	@ (80025a8 <parseDHCPMSG+0x288>)
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f893 2021 	ldrb.w	r2, [r3, #33]	@ 0x21
 80023de:	4b74      	ldr	r3, [pc, #464]	@ (80025b0 <parseDHCPMSG+0x290>)
 80023e0:	795b      	ldrb	r3, [r3, #5]
 80023e2:	429a      	cmp	r2, r3
 80023e4:	d004      	beq.n	80023f0 <parseDHCPMSG+0xd0>
		{
#ifdef _DHCP_DEBUG_
            printf("No My DHCP Message. This message is ignored.\r\n");
 80023e6:	4873      	ldr	r0, [pc, #460]	@ (80025b4 <parseDHCPMSG+0x294>)
 80023e8:	f009 ff68 	bl	800c2bc <puts>
#endif
         return 0;
 80023ec:	2300      	movs	r3, #0
 80023ee:	e1c6      	b.n	800277e <parseDHCPMSG+0x45e>
		}
        //compare DHCP server ip address
        if((DHCP_SIP[0]!=0) || (DHCP_SIP[1]!=0) || (DHCP_SIP[2]!=0) || (DHCP_SIP[3]!=0)){
 80023f0:	4b71      	ldr	r3, [pc, #452]	@ (80025b8 <parseDHCPMSG+0x298>)
 80023f2:	781b      	ldrb	r3, [r3, #0]
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d10b      	bne.n	8002410 <parseDHCPMSG+0xf0>
 80023f8:	4b6f      	ldr	r3, [pc, #444]	@ (80025b8 <parseDHCPMSG+0x298>)
 80023fa:	785b      	ldrb	r3, [r3, #1]
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d107      	bne.n	8002410 <parseDHCPMSG+0xf0>
 8002400:	4b6d      	ldr	r3, [pc, #436]	@ (80025b8 <parseDHCPMSG+0x298>)
 8002402:	789b      	ldrb	r3, [r3, #2]
 8002404:	2b00      	cmp	r3, #0
 8002406:	d103      	bne.n	8002410 <parseDHCPMSG+0xf0>
 8002408:	4b6b      	ldr	r3, [pc, #428]	@ (80025b8 <parseDHCPMSG+0x298>)
 800240a:	78db      	ldrb	r3, [r3, #3]
 800240c:	2b00      	cmp	r3, #0
 800240e:	d02c      	beq.n	800246a <parseDHCPMSG+0x14a>
            if( ((svr_addr[0]!=DHCP_SIP[0])|| (svr_addr[1]!=DHCP_SIP[1])|| (svr_addr[2]!=DHCP_SIP[2])|| (svr_addr[3]!=DHCP_SIP[3])) &&
 8002410:	793a      	ldrb	r2, [r7, #4]
 8002412:	4b69      	ldr	r3, [pc, #420]	@ (80025b8 <parseDHCPMSG+0x298>)
 8002414:	781b      	ldrb	r3, [r3, #0]
 8002416:	429a      	cmp	r2, r3
 8002418:	d10e      	bne.n	8002438 <parseDHCPMSG+0x118>
 800241a:	797a      	ldrb	r2, [r7, #5]
 800241c:	4b66      	ldr	r3, [pc, #408]	@ (80025b8 <parseDHCPMSG+0x298>)
 800241e:	785b      	ldrb	r3, [r3, #1]
 8002420:	429a      	cmp	r2, r3
 8002422:	d109      	bne.n	8002438 <parseDHCPMSG+0x118>
 8002424:	79ba      	ldrb	r2, [r7, #6]
 8002426:	4b64      	ldr	r3, [pc, #400]	@ (80025b8 <parseDHCPMSG+0x298>)
 8002428:	789b      	ldrb	r3, [r3, #2]
 800242a:	429a      	cmp	r2, r3
 800242c:	d104      	bne.n	8002438 <parseDHCPMSG+0x118>
 800242e:	79fa      	ldrb	r2, [r7, #7]
 8002430:	4b61      	ldr	r3, [pc, #388]	@ (80025b8 <parseDHCPMSG+0x298>)
 8002432:	78db      	ldrb	r3, [r3, #3]
 8002434:	429a      	cmp	r2, r3
 8002436:	d018      	beq.n	800246a <parseDHCPMSG+0x14a>
                ((svr_addr[0]!=DHCP_REAL_SIP[0])|| (svr_addr[1]!=DHCP_REAL_SIP[1])|| (svr_addr[2]!=DHCP_REAL_SIP[2])|| (svr_addr[3]!=DHCP_REAL_SIP[3]))  )
 8002438:	793a      	ldrb	r2, [r7, #4]
 800243a:	4b60      	ldr	r3, [pc, #384]	@ (80025bc <parseDHCPMSG+0x29c>)
 800243c:	781b      	ldrb	r3, [r3, #0]
            if( ((svr_addr[0]!=DHCP_SIP[0])|| (svr_addr[1]!=DHCP_SIP[1])|| (svr_addr[2]!=DHCP_SIP[2])|| (svr_addr[3]!=DHCP_SIP[3])) &&
 800243e:	429a      	cmp	r2, r3
 8002440:	d10e      	bne.n	8002460 <parseDHCPMSG+0x140>
                ((svr_addr[0]!=DHCP_REAL_SIP[0])|| (svr_addr[1]!=DHCP_REAL_SIP[1])|| (svr_addr[2]!=DHCP_REAL_SIP[2])|| (svr_addr[3]!=DHCP_REAL_SIP[3]))  )
 8002442:	797a      	ldrb	r2, [r7, #5]
 8002444:	4b5d      	ldr	r3, [pc, #372]	@ (80025bc <parseDHCPMSG+0x29c>)
 8002446:	785b      	ldrb	r3, [r3, #1]
 8002448:	429a      	cmp	r2, r3
 800244a:	d109      	bne.n	8002460 <parseDHCPMSG+0x140>
 800244c:	79ba      	ldrb	r2, [r7, #6]
 800244e:	4b5b      	ldr	r3, [pc, #364]	@ (80025bc <parseDHCPMSG+0x29c>)
 8002450:	789b      	ldrb	r3, [r3, #2]
 8002452:	429a      	cmp	r2, r3
 8002454:	d104      	bne.n	8002460 <parseDHCPMSG+0x140>
 8002456:	79fa      	ldrb	r2, [r7, #7]
 8002458:	4b58      	ldr	r3, [pc, #352]	@ (80025bc <parseDHCPMSG+0x29c>)
 800245a:	78db      	ldrb	r3, [r3, #3]
 800245c:	429a      	cmp	r2, r3
 800245e:	d004      	beq.n	800246a <parseDHCPMSG+0x14a>
            {
#ifdef _DHCP_DEBUG_
                printf("Another DHCP sever send a response message. This is ignored.\r\n");
 8002460:	4857      	ldr	r0, [pc, #348]	@ (80025c0 <parseDHCPMSG+0x2a0>)
 8002462:	f009 ff2b 	bl	800c2bc <puts>
#endif
                return 0;
 8002466:	2300      	movs	r3, #0
 8002468:	e189      	b.n	800277e <parseDHCPMSG+0x45e>
            }
        }
		p = (uint8_t *)(&pDHCPMSG->op);
 800246a:	4b4f      	ldr	r3, [pc, #316]	@ (80025a8 <parseDHCPMSG+0x288>)
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	617b      	str	r3, [r7, #20]
		p = p + 240;      // 240 = sizeof(RIP_MSG) + MAGIC_COOKIE size in RIP_MSG.opt - sizeof(RIP_MSG.opt)
 8002470:	697b      	ldr	r3, [r7, #20]
 8002472:	33f0      	adds	r3, #240	@ 0xf0
 8002474:	617b      	str	r3, [r7, #20]
		e = p + (len - 240);
 8002476:	8a3b      	ldrh	r3, [r7, #16]
 8002478:	3bf0      	subs	r3, #240	@ 0xf0
 800247a:	697a      	ldr	r2, [r7, #20]
 800247c:	4413      	add	r3, r2
 800247e:	60fb      	str	r3, [r7, #12]

		while ( p < e ) {
 8002480:	e176      	b.n	8002770 <parseDHCPMSG+0x450>

			switch ( *p ) {
 8002482:	697b      	ldr	r3, [r7, #20]
 8002484:	781b      	ldrb	r3, [r3, #0]
 8002486:	2b36      	cmp	r3, #54	@ 0x36
 8002488:	dc76      	bgt.n	8002578 <parseDHCPMSG+0x258>
 800248a:	2b00      	cmp	r3, #0
 800248c:	f2c0 8163 	blt.w	8002756 <parseDHCPMSG+0x436>
 8002490:	2b36      	cmp	r3, #54	@ 0x36
 8002492:	f200 8160 	bhi.w	8002756 <parseDHCPMSG+0x436>
 8002496:	a201      	add	r2, pc, #4	@ (adr r2, 800249c <parseDHCPMSG+0x17c>)
 8002498:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800249c:	08002585 	.word	0x08002585
 80024a0:	080025c5 	.word	0x080025c5
 80024a4:	08002757 	.word	0x08002757
 80024a8:	08002603 	.word	0x08002603
 80024ac:	08002757 	.word	0x08002757
 80024b0:	08002757 	.word	0x08002757
 80024b4:	0800264f 	.word	0x0800264f
 80024b8:	08002757 	.word	0x08002757
 80024bc:	08002757 	.word	0x08002757
 80024c0:	08002757 	.word	0x08002757
 80024c4:	08002757 	.word	0x08002757
 80024c8:	08002757 	.word	0x08002757
 80024cc:	08002757 	.word	0x08002757
 80024d0:	08002757 	.word	0x08002757
 80024d4:	08002757 	.word	0x08002757
 80024d8:	08002757 	.word	0x08002757
 80024dc:	08002757 	.word	0x08002757
 80024e0:	08002757 	.word	0x08002757
 80024e4:	08002757 	.word	0x08002757
 80024e8:	08002757 	.word	0x08002757
 80024ec:	08002757 	.word	0x08002757
 80024f0:	08002757 	.word	0x08002757
 80024f4:	08002757 	.word	0x08002757
 80024f8:	08002757 	.word	0x08002757
 80024fc:	08002757 	.word	0x08002757
 8002500:	08002757 	.word	0x08002757
 8002504:	08002757 	.word	0x08002757
 8002508:	08002757 	.word	0x08002757
 800250c:	08002757 	.word	0x08002757
 8002510:	08002757 	.word	0x08002757
 8002514:	08002757 	.word	0x08002757
 8002518:	08002757 	.word	0x08002757
 800251c:	08002757 	.word	0x08002757
 8002520:	08002757 	.word	0x08002757
 8002524:	08002757 	.word	0x08002757
 8002528:	08002757 	.word	0x08002757
 800252c:	08002757 	.word	0x08002757
 8002530:	08002757 	.word	0x08002757
 8002534:	08002757 	.word	0x08002757
 8002538:	08002757 	.word	0x08002757
 800253c:	08002757 	.word	0x08002757
 8002540:	08002757 	.word	0x08002757
 8002544:	08002757 	.word	0x08002757
 8002548:	08002757 	.word	0x08002757
 800254c:	08002757 	.word	0x08002757
 8002550:	08002757 	.word	0x08002757
 8002554:	08002757 	.word	0x08002757
 8002558:	08002757 	.word	0x08002757
 800255c:	08002757 	.word	0x08002757
 8002560:	08002757 	.word	0x08002757
 8002564:	08002757 	.word	0x08002757
 8002568:	0800269b 	.word	0x0800269b
 800256c:	08002757 	.word	0x08002757
 8002570:	0800258d 	.word	0x0800258d
 8002574:	080026fd 	.word	0x080026fd
 8002578:	2bff      	cmp	r3, #255	@ 0xff
 800257a:	f040 80ec 	bne.w	8002756 <parseDHCPMSG+0x436>

   			case endOption :
   			   p = e;   // for break while(p < e)
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	617b      	str	r3, [r7, #20]
   				break;
 8002582:	e0f5      	b.n	8002770 <parseDHCPMSG+0x450>
            case padOption :
   				p++;
 8002584:	697b      	ldr	r3, [r7, #20]
 8002586:	3301      	adds	r3, #1
 8002588:	617b      	str	r3, [r7, #20]
   				break;
 800258a:	e0f1      	b.n	8002770 <parseDHCPMSG+0x450>
   			case dhcpMessageType :
   				p++;
 800258c:	697b      	ldr	r3, [r7, #20]
 800258e:	3301      	adds	r3, #1
 8002590:	617b      	str	r3, [r7, #20]
   				p++;
 8002592:	697b      	ldr	r3, [r7, #20]
 8002594:	3301      	adds	r3, #1
 8002596:	617b      	str	r3, [r7, #20]
   				type = *p++;
 8002598:	697b      	ldr	r3, [r7, #20]
 800259a:	1c5a      	adds	r2, r3, #1
 800259c:	617a      	str	r2, [r7, #20]
 800259e:	781b      	ldrb	r3, [r3, #0]
 80025a0:	74fb      	strb	r3, [r7, #19]
   				break;
 80025a2:	e0e5      	b.n	8002770 <parseDHCPMSG+0x450>
 80025a4:	20000dc5 	.word	0x20000dc5
 80025a8:	20000df0 	.word	0x20000df0
 80025ac:	0800d660 	.word	0x0800d660
 80025b0:	20000df4 	.word	0x20000df4
 80025b4:	0800d690 	.word	0x0800d690
 80025b8:	20000dc8 	.word	0x20000dc8
 80025bc:	20000dcc 	.word	0x20000dcc
 80025c0:	0800d6c0 	.word	0x0800d6c0
   			case subnetMask :
   				p++;
 80025c4:	697b      	ldr	r3, [r7, #20]
 80025c6:	3301      	adds	r3, #1
 80025c8:	617b      	str	r3, [r7, #20]
   				p++;
 80025ca:	697b      	ldr	r3, [r7, #20]
 80025cc:	3301      	adds	r3, #1
 80025ce:	617b      	str	r3, [r7, #20]
   				DHCP_allocated_sn[0] = *p++;
 80025d0:	697b      	ldr	r3, [r7, #20]
 80025d2:	1c5a      	adds	r2, r3, #1
 80025d4:	617a      	str	r2, [r7, #20]
 80025d6:	781a      	ldrb	r2, [r3, #0]
 80025d8:	4b6b      	ldr	r3, [pc, #428]	@ (8002788 <parseDHCPMSG+0x468>)
 80025da:	701a      	strb	r2, [r3, #0]
   				DHCP_allocated_sn[1] = *p++;
 80025dc:	697b      	ldr	r3, [r7, #20]
 80025de:	1c5a      	adds	r2, r3, #1
 80025e0:	617a      	str	r2, [r7, #20]
 80025e2:	781a      	ldrb	r2, [r3, #0]
 80025e4:	4b68      	ldr	r3, [pc, #416]	@ (8002788 <parseDHCPMSG+0x468>)
 80025e6:	705a      	strb	r2, [r3, #1]
   				DHCP_allocated_sn[2] = *p++;
 80025e8:	697b      	ldr	r3, [r7, #20]
 80025ea:	1c5a      	adds	r2, r3, #1
 80025ec:	617a      	str	r2, [r7, #20]
 80025ee:	781a      	ldrb	r2, [r3, #0]
 80025f0:	4b65      	ldr	r3, [pc, #404]	@ (8002788 <parseDHCPMSG+0x468>)
 80025f2:	709a      	strb	r2, [r3, #2]
   				DHCP_allocated_sn[3] = *p++;
 80025f4:	697b      	ldr	r3, [r7, #20]
 80025f6:	1c5a      	adds	r2, r3, #1
 80025f8:	617a      	str	r2, [r7, #20]
 80025fa:	781a      	ldrb	r2, [r3, #0]
 80025fc:	4b62      	ldr	r3, [pc, #392]	@ (8002788 <parseDHCPMSG+0x468>)
 80025fe:	70da      	strb	r2, [r3, #3]
   				break;
 8002600:	e0b6      	b.n	8002770 <parseDHCPMSG+0x450>
   			case routersOnSubnet :
   				p++;
 8002602:	697b      	ldr	r3, [r7, #20]
 8002604:	3301      	adds	r3, #1
 8002606:	617b      	str	r3, [r7, #20]
   				opt_len = *p++;       
 8002608:	697b      	ldr	r3, [r7, #20]
 800260a:	1c5a      	adds	r2, r3, #1
 800260c:	617a      	str	r2, [r7, #20]
 800260e:	781b      	ldrb	r3, [r3, #0]
 8002610:	72fb      	strb	r3, [r7, #11]
   				DHCP_allocated_gw[0] = *p++;
 8002612:	697b      	ldr	r3, [r7, #20]
 8002614:	1c5a      	adds	r2, r3, #1
 8002616:	617a      	str	r2, [r7, #20]
 8002618:	781a      	ldrb	r2, [r3, #0]
 800261a:	4b5c      	ldr	r3, [pc, #368]	@ (800278c <parseDHCPMSG+0x46c>)
 800261c:	701a      	strb	r2, [r3, #0]
   				DHCP_allocated_gw[1] = *p++;
 800261e:	697b      	ldr	r3, [r7, #20]
 8002620:	1c5a      	adds	r2, r3, #1
 8002622:	617a      	str	r2, [r7, #20]
 8002624:	781a      	ldrb	r2, [r3, #0]
 8002626:	4b59      	ldr	r3, [pc, #356]	@ (800278c <parseDHCPMSG+0x46c>)
 8002628:	705a      	strb	r2, [r3, #1]
   				DHCP_allocated_gw[2] = *p++;
 800262a:	697b      	ldr	r3, [r7, #20]
 800262c:	1c5a      	adds	r2, r3, #1
 800262e:	617a      	str	r2, [r7, #20]
 8002630:	781a      	ldrb	r2, [r3, #0]
 8002632:	4b56      	ldr	r3, [pc, #344]	@ (800278c <parseDHCPMSG+0x46c>)
 8002634:	709a      	strb	r2, [r3, #2]
   				DHCP_allocated_gw[3] = *p++;
 8002636:	697b      	ldr	r3, [r7, #20]
 8002638:	1c5a      	adds	r2, r3, #1
 800263a:	617a      	str	r2, [r7, #20]
 800263c:	781a      	ldrb	r2, [r3, #0]
 800263e:	4b53      	ldr	r3, [pc, #332]	@ (800278c <parseDHCPMSG+0x46c>)
 8002640:	70da      	strb	r2, [r3, #3]
   				p = p + (opt_len - 4);
 8002642:	7afb      	ldrb	r3, [r7, #11]
 8002644:	3b04      	subs	r3, #4
 8002646:	697a      	ldr	r2, [r7, #20]
 8002648:	4413      	add	r3, r2
 800264a:	617b      	str	r3, [r7, #20]
   				break;
 800264c:	e090      	b.n	8002770 <parseDHCPMSG+0x450>
   			case dns :
   				p++;                  
 800264e:	697b      	ldr	r3, [r7, #20]
 8002650:	3301      	adds	r3, #1
 8002652:	617b      	str	r3, [r7, #20]
   				opt_len = *p++;       
 8002654:	697b      	ldr	r3, [r7, #20]
 8002656:	1c5a      	adds	r2, r3, #1
 8002658:	617a      	str	r2, [r7, #20]
 800265a:	781b      	ldrb	r3, [r3, #0]
 800265c:	72fb      	strb	r3, [r7, #11]
   				DHCP_allocated_dns[0] = *p++;
 800265e:	697b      	ldr	r3, [r7, #20]
 8002660:	1c5a      	adds	r2, r3, #1
 8002662:	617a      	str	r2, [r7, #20]
 8002664:	781a      	ldrb	r2, [r3, #0]
 8002666:	4b4a      	ldr	r3, [pc, #296]	@ (8002790 <parseDHCPMSG+0x470>)
 8002668:	701a      	strb	r2, [r3, #0]
   				DHCP_allocated_dns[1] = *p++;
 800266a:	697b      	ldr	r3, [r7, #20]
 800266c:	1c5a      	adds	r2, r3, #1
 800266e:	617a      	str	r2, [r7, #20]
 8002670:	781a      	ldrb	r2, [r3, #0]
 8002672:	4b47      	ldr	r3, [pc, #284]	@ (8002790 <parseDHCPMSG+0x470>)
 8002674:	705a      	strb	r2, [r3, #1]
   				DHCP_allocated_dns[2] = *p++;
 8002676:	697b      	ldr	r3, [r7, #20]
 8002678:	1c5a      	adds	r2, r3, #1
 800267a:	617a      	str	r2, [r7, #20]
 800267c:	781a      	ldrb	r2, [r3, #0]
 800267e:	4b44      	ldr	r3, [pc, #272]	@ (8002790 <parseDHCPMSG+0x470>)
 8002680:	709a      	strb	r2, [r3, #2]
   				DHCP_allocated_dns[3] = *p++;
 8002682:	697b      	ldr	r3, [r7, #20]
 8002684:	1c5a      	adds	r2, r3, #1
 8002686:	617a      	str	r2, [r7, #20]
 8002688:	781a      	ldrb	r2, [r3, #0]
 800268a:	4b41      	ldr	r3, [pc, #260]	@ (8002790 <parseDHCPMSG+0x470>)
 800268c:	70da      	strb	r2, [r3, #3]
   				p = p + (opt_len - 4);
 800268e:	7afb      	ldrb	r3, [r7, #11]
 8002690:	3b04      	subs	r3, #4
 8002692:	697a      	ldr	r2, [r7, #20]
 8002694:	4413      	add	r3, r2
 8002696:	617b      	str	r3, [r7, #20]
   				break;
 8002698:	e06a      	b.n	8002770 <parseDHCPMSG+0x450>
   			case dhcpIPaddrLeaseTime :
   				p++;
 800269a:	697b      	ldr	r3, [r7, #20]
 800269c:	3301      	adds	r3, #1
 800269e:	617b      	str	r3, [r7, #20]
   				opt_len = *p++;
 80026a0:	697b      	ldr	r3, [r7, #20]
 80026a2:	1c5a      	adds	r2, r3, #1
 80026a4:	617a      	str	r2, [r7, #20]
 80026a6:	781b      	ldrb	r3, [r3, #0]
 80026a8:	72fb      	strb	r3, [r7, #11]
   				dhcp_lease_time  = *p++;
 80026aa:	697b      	ldr	r3, [r7, #20]
 80026ac:	1c5a      	adds	r2, r3, #1
 80026ae:	617a      	str	r2, [r7, #20]
 80026b0:	781b      	ldrb	r3, [r3, #0]
 80026b2:	461a      	mov	r2, r3
 80026b4:	4b37      	ldr	r3, [pc, #220]	@ (8002794 <parseDHCPMSG+0x474>)
 80026b6:	601a      	str	r2, [r3, #0]
   				dhcp_lease_time  = (dhcp_lease_time << 8) + *p++;
 80026b8:	4b36      	ldr	r3, [pc, #216]	@ (8002794 <parseDHCPMSG+0x474>)
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	021a      	lsls	r2, r3, #8
 80026be:	697b      	ldr	r3, [r7, #20]
 80026c0:	1c59      	adds	r1, r3, #1
 80026c2:	6179      	str	r1, [r7, #20]
 80026c4:	781b      	ldrb	r3, [r3, #0]
 80026c6:	4413      	add	r3, r2
 80026c8:	4a32      	ldr	r2, [pc, #200]	@ (8002794 <parseDHCPMSG+0x474>)
 80026ca:	6013      	str	r3, [r2, #0]
   				dhcp_lease_time  = (dhcp_lease_time << 8) + *p++;
 80026cc:	4b31      	ldr	r3, [pc, #196]	@ (8002794 <parseDHCPMSG+0x474>)
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	021a      	lsls	r2, r3, #8
 80026d2:	697b      	ldr	r3, [r7, #20]
 80026d4:	1c59      	adds	r1, r3, #1
 80026d6:	6179      	str	r1, [r7, #20]
 80026d8:	781b      	ldrb	r3, [r3, #0]
 80026da:	4413      	add	r3, r2
 80026dc:	4a2d      	ldr	r2, [pc, #180]	@ (8002794 <parseDHCPMSG+0x474>)
 80026de:	6013      	str	r3, [r2, #0]
   				dhcp_lease_time  = (dhcp_lease_time << 8) + *p++;
 80026e0:	4b2c      	ldr	r3, [pc, #176]	@ (8002794 <parseDHCPMSG+0x474>)
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	021a      	lsls	r2, r3, #8
 80026e6:	697b      	ldr	r3, [r7, #20]
 80026e8:	1c59      	adds	r1, r3, #1
 80026ea:	6179      	str	r1, [r7, #20]
 80026ec:	781b      	ldrb	r3, [r3, #0]
 80026ee:	4413      	add	r3, r2
 80026f0:	4a28      	ldr	r2, [pc, #160]	@ (8002794 <parseDHCPMSG+0x474>)
 80026f2:	6013      	str	r3, [r2, #0]
            #ifdef _DHCP_DEBUG_  
               dhcp_lease_time = 10;
 80026f4:	4b27      	ldr	r3, [pc, #156]	@ (8002794 <parseDHCPMSG+0x474>)
 80026f6:	220a      	movs	r2, #10
 80026f8:	601a      	str	r2, [r3, #0]
 				#endif
   				break;
 80026fa:	e039      	b.n	8002770 <parseDHCPMSG+0x450>
   			case dhcpServerIdentifier :
   				p++;
 80026fc:	697b      	ldr	r3, [r7, #20]
 80026fe:	3301      	adds	r3, #1
 8002700:	617b      	str	r3, [r7, #20]
   				opt_len = *p++;
 8002702:	697b      	ldr	r3, [r7, #20]
 8002704:	1c5a      	adds	r2, r3, #1
 8002706:	617a      	str	r2, [r7, #20]
 8002708:	781b      	ldrb	r3, [r3, #0]
 800270a:	72fb      	strb	r3, [r7, #11]
   				DHCP_SIP[0] = *p++;
 800270c:	697b      	ldr	r3, [r7, #20]
 800270e:	1c5a      	adds	r2, r3, #1
 8002710:	617a      	str	r2, [r7, #20]
 8002712:	781a      	ldrb	r2, [r3, #0]
 8002714:	4b20      	ldr	r3, [pc, #128]	@ (8002798 <parseDHCPMSG+0x478>)
 8002716:	701a      	strb	r2, [r3, #0]
   				DHCP_SIP[1] = *p++;
 8002718:	697b      	ldr	r3, [r7, #20]
 800271a:	1c5a      	adds	r2, r3, #1
 800271c:	617a      	str	r2, [r7, #20]
 800271e:	781a      	ldrb	r2, [r3, #0]
 8002720:	4b1d      	ldr	r3, [pc, #116]	@ (8002798 <parseDHCPMSG+0x478>)
 8002722:	705a      	strb	r2, [r3, #1]
   				DHCP_SIP[2] = *p++;
 8002724:	697b      	ldr	r3, [r7, #20]
 8002726:	1c5a      	adds	r2, r3, #1
 8002728:	617a      	str	r2, [r7, #20]
 800272a:	781a      	ldrb	r2, [r3, #0]
 800272c:	4b1a      	ldr	r3, [pc, #104]	@ (8002798 <parseDHCPMSG+0x478>)
 800272e:	709a      	strb	r2, [r3, #2]
   				DHCP_SIP[3] = *p++;
 8002730:	697b      	ldr	r3, [r7, #20]
 8002732:	1c5a      	adds	r2, r3, #1
 8002734:	617a      	str	r2, [r7, #20]
 8002736:	781a      	ldrb	r2, [r3, #0]
 8002738:	4b17      	ldr	r3, [pc, #92]	@ (8002798 <parseDHCPMSG+0x478>)
 800273a:	70da      	strb	r2, [r3, #3]
                DHCP_REAL_SIP[0]=svr_addr[0];
 800273c:	793a      	ldrb	r2, [r7, #4]
 800273e:	4b17      	ldr	r3, [pc, #92]	@ (800279c <parseDHCPMSG+0x47c>)
 8002740:	701a      	strb	r2, [r3, #0]
                DHCP_REAL_SIP[1]=svr_addr[1];
 8002742:	797a      	ldrb	r2, [r7, #5]
 8002744:	4b15      	ldr	r3, [pc, #84]	@ (800279c <parseDHCPMSG+0x47c>)
 8002746:	705a      	strb	r2, [r3, #1]
                DHCP_REAL_SIP[2]=svr_addr[2];
 8002748:	79ba      	ldrb	r2, [r7, #6]
 800274a:	4b14      	ldr	r3, [pc, #80]	@ (800279c <parseDHCPMSG+0x47c>)
 800274c:	709a      	strb	r2, [r3, #2]
                DHCP_REAL_SIP[3]=svr_addr[3];
 800274e:	79fa      	ldrb	r2, [r7, #7]
 8002750:	4b12      	ldr	r3, [pc, #72]	@ (800279c <parseDHCPMSG+0x47c>)
 8002752:	70da      	strb	r2, [r3, #3]
   				break;
 8002754:	e00c      	b.n	8002770 <parseDHCPMSG+0x450>
   			default :
   				p++;
 8002756:	697b      	ldr	r3, [r7, #20]
 8002758:	3301      	adds	r3, #1
 800275a:	617b      	str	r3, [r7, #20]
   				opt_len = *p++;
 800275c:	697b      	ldr	r3, [r7, #20]
 800275e:	1c5a      	adds	r2, r3, #1
 8002760:	617a      	str	r2, [r7, #20]
 8002762:	781b      	ldrb	r3, [r3, #0]
 8002764:	72fb      	strb	r3, [r7, #11]
   				p += opt_len;
 8002766:	7afb      	ldrb	r3, [r7, #11]
 8002768:	697a      	ldr	r2, [r7, #20]
 800276a:	4413      	add	r3, r2
 800276c:	617b      	str	r3, [r7, #20]
   				break;
 800276e:	bf00      	nop
		while ( p < e ) {
 8002770:	697a      	ldr	r2, [r7, #20]
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	429a      	cmp	r2, r3
 8002776:	f4ff ae84 	bcc.w	8002482 <parseDHCPMSG+0x162>
			} // switch
		} // while
	} // if
	return	type;
 800277a:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 800277e:	4618      	mov	r0, r3
 8002780:	3718      	adds	r7, #24
 8002782:	46bd      	mov	sp, r7
 8002784:	bdb0      	pop	{r4, r5, r7, pc}
 8002786:	bf00      	nop
 8002788:	20000ddc 	.word	0x20000ddc
 800278c:	20000dd8 	.word	0x20000dd8
 8002790:	20000de0 	.word	0x20000de0
 8002794:	20000084 	.word	0x20000084
 8002798:	20000dc8 	.word	0x20000dc8
 800279c:	20000dcc 	.word	0x20000dcc

080027a0 <DHCP_run>:

uint8_t DHCP_run(void)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b082      	sub	sp, #8
 80027a4:	af00      	add	r7, sp, #0
	uint8_t  type;
	uint8_t  ret;

	if(dhcp_state == STATE_DHCP_STOP) return DHCP_STOPPED;
 80027a6:	4b8f      	ldr	r3, [pc, #572]	@ (80029e4 <DHCP_run+0x244>)
 80027a8:	f993 3000 	ldrsb.w	r3, [r3]
 80027ac:	2b06      	cmp	r3, #6
 80027ae:	d101      	bne.n	80027b4 <DHCP_run+0x14>
 80027b0:	2305      	movs	r3, #5
 80027b2:	e112      	b.n	80029da <DHCP_run+0x23a>

	if(getSn_SR(DHCP_SOCKET) != SOCK_UDP)
 80027b4:	4b8c      	ldr	r3, [pc, #560]	@ (80029e8 <DHCP_run+0x248>)
 80027b6:	781b      	ldrb	r3, [r3, #0]
 80027b8:	009b      	lsls	r3, r3, #2
 80027ba:	3301      	adds	r3, #1
 80027bc:	00db      	lsls	r3, r3, #3
 80027be:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 80027c2:	4618      	mov	r0, r3
 80027c4:	f002 fcbe 	bl	8005144 <WIZCHIP_READ>
 80027c8:	4603      	mov	r3, r0
 80027ca:	2b22      	cmp	r3, #34	@ 0x22
 80027cc:	d006      	beq.n	80027dc <DHCP_run+0x3c>
	   socket(DHCP_SOCKET, Sn_MR_UDP, DHCP_CLIENT_PORT, 0x00);
 80027ce:	4b86      	ldr	r3, [pc, #536]	@ (80029e8 <DHCP_run+0x248>)
 80027d0:	7818      	ldrb	r0, [r3, #0]
 80027d2:	2300      	movs	r3, #0
 80027d4:	2244      	movs	r2, #68	@ 0x44
 80027d6:	2102      	movs	r1, #2
 80027d8:	f002 ff9a 	bl	8005710 <socket>

	ret = DHCP_RUNNING;
 80027dc:	2301      	movs	r3, #1
 80027de:	71fb      	strb	r3, [r7, #7]
	type = parseDHCPMSG();
 80027e0:	f7ff fd9e 	bl	8002320 <parseDHCPMSG>
 80027e4:	4603      	mov	r3, r0
 80027e6:	71bb      	strb	r3, [r7, #6]

	switch ( dhcp_state ) {
 80027e8:	4b7e      	ldr	r3, [pc, #504]	@ (80029e4 <DHCP_run+0x244>)
 80027ea:	f993 3000 	ldrsb.w	r3, [r3]
 80027ee:	2b04      	cmp	r3, #4
 80027f0:	f200 80ef 	bhi.w	80029d2 <DHCP_run+0x232>
 80027f4:	a201      	add	r2, pc, #4	@ (adr r2, 80027fc <DHCP_run+0x5c>)
 80027f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027fa:	bf00      	nop
 80027fc:	08002811 	.word	0x08002811
 8002800:	08002835 	.word	0x08002835
 8002804:	0800287f 	.word	0x0800287f
 8002808:	080028db 	.word	0x080028db
 800280c:	08002947 	.word	0x08002947
	   case STATE_DHCP_INIT     :
         DHCP_allocated_ip[0] = 0;
 8002810:	4b76      	ldr	r3, [pc, #472]	@ (80029ec <DHCP_run+0x24c>)
 8002812:	2200      	movs	r2, #0
 8002814:	701a      	strb	r2, [r3, #0]
         DHCP_allocated_ip[1] = 0;
 8002816:	4b75      	ldr	r3, [pc, #468]	@ (80029ec <DHCP_run+0x24c>)
 8002818:	2200      	movs	r2, #0
 800281a:	705a      	strb	r2, [r3, #1]
         DHCP_allocated_ip[2] = 0;
 800281c:	4b73      	ldr	r3, [pc, #460]	@ (80029ec <DHCP_run+0x24c>)
 800281e:	2200      	movs	r2, #0
 8002820:	709a      	strb	r2, [r3, #2]
         DHCP_allocated_ip[3] = 0;
 8002822:	4b72      	ldr	r3, [pc, #456]	@ (80029ec <DHCP_run+0x24c>)
 8002824:	2200      	movs	r2, #0
 8002826:	70da      	strb	r2, [r3, #3]
   		send_DHCP_DISCOVER();
 8002828:	f7fe ffc8 	bl	80017bc <send_DHCP_DISCOVER>
   		dhcp_state = STATE_DHCP_DISCOVER;
 800282c:	4b6d      	ldr	r3, [pc, #436]	@ (80029e4 <DHCP_run+0x244>)
 800282e:	2201      	movs	r2, #1
 8002830:	701a      	strb	r2, [r3, #0]
   		break;
 8002832:	e0d1      	b.n	80029d8 <DHCP_run+0x238>
		case STATE_DHCP_DISCOVER :
			if (type == DHCP_OFFER){
 8002834:	79bb      	ldrb	r3, [r7, #6]
 8002836:	2b02      	cmp	r3, #2
 8002838:	d11c      	bne.n	8002874 <DHCP_run+0xd4>
#ifdef _DHCP_DEBUG_
				printf("> Receive DHCP_OFFER\r\n");
 800283a:	486d      	ldr	r0, [pc, #436]	@ (80029f0 <DHCP_run+0x250>)
 800283c:	f009 fd3e 	bl	800c2bc <puts>
#endif
            DHCP_allocated_ip[0] = pDHCPMSG->yiaddr[0];
 8002840:	4b6c      	ldr	r3, [pc, #432]	@ (80029f4 <DHCP_run+0x254>)
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	7c1a      	ldrb	r2, [r3, #16]
 8002846:	4b69      	ldr	r3, [pc, #420]	@ (80029ec <DHCP_run+0x24c>)
 8002848:	701a      	strb	r2, [r3, #0]
            DHCP_allocated_ip[1] = pDHCPMSG->yiaddr[1];
 800284a:	4b6a      	ldr	r3, [pc, #424]	@ (80029f4 <DHCP_run+0x254>)
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	7c5a      	ldrb	r2, [r3, #17]
 8002850:	4b66      	ldr	r3, [pc, #408]	@ (80029ec <DHCP_run+0x24c>)
 8002852:	705a      	strb	r2, [r3, #1]
            DHCP_allocated_ip[2] = pDHCPMSG->yiaddr[2];
 8002854:	4b67      	ldr	r3, [pc, #412]	@ (80029f4 <DHCP_run+0x254>)
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	7c9a      	ldrb	r2, [r3, #18]
 800285a:	4b64      	ldr	r3, [pc, #400]	@ (80029ec <DHCP_run+0x24c>)
 800285c:	709a      	strb	r2, [r3, #2]
            DHCP_allocated_ip[3] = pDHCPMSG->yiaddr[3];
 800285e:	4b65      	ldr	r3, [pc, #404]	@ (80029f4 <DHCP_run+0x254>)
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	7cda      	ldrb	r2, [r3, #19]
 8002864:	4b61      	ldr	r3, [pc, #388]	@ (80029ec <DHCP_run+0x24c>)
 8002866:	70da      	strb	r2, [r3, #3]

				send_DHCP_REQUEST();
 8002868:	f7ff f974 	bl	8001b54 <send_DHCP_REQUEST>
				dhcp_state = STATE_DHCP_REQUEST;
 800286c:	4b5d      	ldr	r3, [pc, #372]	@ (80029e4 <DHCP_run+0x244>)
 800286e:	2202      	movs	r2, #2
 8002870:	701a      	strb	r2, [r3, #0]
			} else ret = check_DHCP_timeout();
         break;
 8002872:	e0b1      	b.n	80029d8 <DHCP_run+0x238>
			} else ret = check_DHCP_timeout();
 8002874:	f000 f8e0 	bl	8002a38 <check_DHCP_timeout>
 8002878:	4603      	mov	r3, r0
 800287a:	71fb      	strb	r3, [r7, #7]
         break;
 800287c:	e0ac      	b.n	80029d8 <DHCP_run+0x238>

		case STATE_DHCP_REQUEST :
			if (type == DHCP_ACK) {
 800287e:	79bb      	ldrb	r3, [r7, #6]
 8002880:	2b05      	cmp	r3, #5
 8002882:	d119      	bne.n	80028b8 <DHCP_run+0x118>

#ifdef _DHCP_DEBUG_
				printf("> Receive DHCP_ACK\r\n");
 8002884:	485c      	ldr	r0, [pc, #368]	@ (80029f8 <DHCP_run+0x258>)
 8002886:	f009 fd19 	bl	800c2bc <puts>
#endif
				if (check_DHCP_leasedIP()) {
 800288a:	f000 f935 	bl	8002af8 <check_DHCP_leasedIP>
 800288e:	4603      	mov	r3, r0
 8002890:	2b00      	cmp	r3, #0
 8002892:	d008      	beq.n	80028a6 <DHCP_run+0x106>
					// Network info assignment from DHCP
					dhcp_ip_assign();
 8002894:	4b59      	ldr	r3, [pc, #356]	@ (80029fc <DHCP_run+0x25c>)
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	4798      	blx	r3
					reset_DHCP_timeout();
 800289a:	f000 fa05 	bl	8002ca8 <reset_DHCP_timeout>

					dhcp_state = STATE_DHCP_LEASED;
 800289e:	4b51      	ldr	r3, [pc, #324]	@ (80029e4 <DHCP_run+0x244>)
 80028a0:	2203      	movs	r2, #3
 80028a2:	701a      	strb	r2, [r3, #0]

				reset_DHCP_timeout();

				dhcp_state = STATE_DHCP_DISCOVER;
			} else ret = check_DHCP_timeout();
		break;
 80028a4:	e098      	b.n	80029d8 <DHCP_run+0x238>
					reset_DHCP_timeout();
 80028a6:	f000 f9ff 	bl	8002ca8 <reset_DHCP_timeout>
					dhcp_ip_conflict();
 80028aa:	4b55      	ldr	r3, [pc, #340]	@ (8002a00 <DHCP_run+0x260>)
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	4798      	blx	r3
				    dhcp_state = STATE_DHCP_INIT;
 80028b0:	4b4c      	ldr	r3, [pc, #304]	@ (80029e4 <DHCP_run+0x244>)
 80028b2:	2200      	movs	r2, #0
 80028b4:	701a      	strb	r2, [r3, #0]
		break;
 80028b6:	e08f      	b.n	80029d8 <DHCP_run+0x238>
			} else if (type == DHCP_NAK) {
 80028b8:	79bb      	ldrb	r3, [r7, #6]
 80028ba:	2b06      	cmp	r3, #6
 80028bc:	d108      	bne.n	80028d0 <DHCP_run+0x130>
				printf("> Receive DHCP_NACK\r\n");
 80028be:	4851      	ldr	r0, [pc, #324]	@ (8002a04 <DHCP_run+0x264>)
 80028c0:	f009 fcfc 	bl	800c2bc <puts>
				reset_DHCP_timeout();
 80028c4:	f000 f9f0 	bl	8002ca8 <reset_DHCP_timeout>
				dhcp_state = STATE_DHCP_DISCOVER;
 80028c8:	4b46      	ldr	r3, [pc, #280]	@ (80029e4 <DHCP_run+0x244>)
 80028ca:	2201      	movs	r2, #1
 80028cc:	701a      	strb	r2, [r3, #0]
		break;
 80028ce:	e083      	b.n	80029d8 <DHCP_run+0x238>
			} else ret = check_DHCP_timeout();
 80028d0:	f000 f8b2 	bl	8002a38 <check_DHCP_timeout>
 80028d4:	4603      	mov	r3, r0
 80028d6:	71fb      	strb	r3, [r7, #7]
		break;
 80028d8:	e07e      	b.n	80029d8 <DHCP_run+0x238>

		case STATE_DHCP_LEASED :
		   ret = DHCP_IP_LEASED;
 80028da:	2304      	movs	r3, #4
 80028dc:	71fb      	strb	r3, [r7, #7]
			if ((dhcp_lease_time != INFINITE_LEASETIME) && ((dhcp_lease_time/2) < dhcp_tick_1s)) {
 80028de:	4b4a      	ldr	r3, [pc, #296]	@ (8002a08 <DHCP_run+0x268>)
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028e6:	d076      	beq.n	80029d6 <DHCP_run+0x236>
 80028e8:	4b47      	ldr	r3, [pc, #284]	@ (8002a08 <DHCP_run+0x268>)
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	085a      	lsrs	r2, r3, #1
 80028ee:	4b47      	ldr	r3, [pc, #284]	@ (8002a0c <DHCP_run+0x26c>)
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	429a      	cmp	r2, r3
 80028f4:	d26f      	bcs.n	80029d6 <DHCP_run+0x236>
				
#ifdef _DHCP_DEBUG_
				 StateChangeFlag = true;
 80028f6:	4b46      	ldr	r3, [pc, #280]	@ (8002a10 <DHCP_run+0x270>)
 80028f8:	2201      	movs	r2, #1
 80028fa:	701a      	strb	r2, [r3, #0]
				tempflag = false;
 80028fc:	4b45      	ldr	r3, [pc, #276]	@ (8002a14 <DHCP_run+0x274>)
 80028fe:	2200      	movs	r2, #0
 8002900:	701a      	strb	r2, [r3, #0]
 				printf("> Maintains the IP address \r\n");
 8002902:	4845      	ldr	r0, [pc, #276]	@ (8002a18 <DHCP_run+0x278>)
 8002904:	f009 fcda 	bl	800c2bc <puts>
#endif

				type = 0;
 8002908:	2300      	movs	r3, #0
 800290a:	71bb      	strb	r3, [r7, #6]
				OLD_allocated_ip[0] = DHCP_allocated_ip[0];
 800290c:	4b37      	ldr	r3, [pc, #220]	@ (80029ec <DHCP_run+0x24c>)
 800290e:	781a      	ldrb	r2, [r3, #0]
 8002910:	4b42      	ldr	r3, [pc, #264]	@ (8002a1c <DHCP_run+0x27c>)
 8002912:	701a      	strb	r2, [r3, #0]
				OLD_allocated_ip[1] = DHCP_allocated_ip[1];
 8002914:	4b35      	ldr	r3, [pc, #212]	@ (80029ec <DHCP_run+0x24c>)
 8002916:	785a      	ldrb	r2, [r3, #1]
 8002918:	4b40      	ldr	r3, [pc, #256]	@ (8002a1c <DHCP_run+0x27c>)
 800291a:	705a      	strb	r2, [r3, #1]
				OLD_allocated_ip[2] = DHCP_allocated_ip[2];
 800291c:	4b33      	ldr	r3, [pc, #204]	@ (80029ec <DHCP_run+0x24c>)
 800291e:	789a      	ldrb	r2, [r3, #2]
 8002920:	4b3e      	ldr	r3, [pc, #248]	@ (8002a1c <DHCP_run+0x27c>)
 8002922:	709a      	strb	r2, [r3, #2]
				OLD_allocated_ip[3] = DHCP_allocated_ip[3];
 8002924:	4b31      	ldr	r3, [pc, #196]	@ (80029ec <DHCP_run+0x24c>)
 8002926:	78da      	ldrb	r2, [r3, #3]
 8002928:	4b3c      	ldr	r3, [pc, #240]	@ (8002a1c <DHCP_run+0x27c>)
 800292a:	70da      	strb	r2, [r3, #3]
				
				DHCP_XID++;
 800292c:	4b3c      	ldr	r3, [pc, #240]	@ (8002a20 <DHCP_run+0x280>)
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	3301      	adds	r3, #1
 8002932:	4a3b      	ldr	r2, [pc, #236]	@ (8002a20 <DHCP_run+0x280>)
 8002934:	6013      	str	r3, [r2, #0]

				send_DHCP_REQUEST();
 8002936:	f7ff f90d 	bl	8001b54 <send_DHCP_REQUEST>

				reset_DHCP_timeout();
 800293a:	f000 f9b5 	bl	8002ca8 <reset_DHCP_timeout>

				dhcp_state = STATE_DHCP_REREQUEST;
 800293e:	4b29      	ldr	r3, [pc, #164]	@ (80029e4 <DHCP_run+0x244>)
 8002940:	2204      	movs	r2, #4
 8002942:	701a      	strb	r2, [r3, #0]
			}
		break;
 8002944:	e047      	b.n	80029d6 <DHCP_run+0x236>

		case STATE_DHCP_REREQUEST :
		   ret = DHCP_IP_LEASED;
 8002946:	2304      	movs	r3, #4
 8002948:	71fb      	strb	r3, [r7, #7]
			if (type == DHCP_ACK) {
 800294a:	79bb      	ldrb	r3, [r7, #6]
 800294c:	2b05      	cmp	r3, #5
 800294e:	d12f      	bne.n	80029b0 <DHCP_run+0x210>
				dhcp_retry_count = 0;
 8002950:	4b34      	ldr	r3, [pc, #208]	@ (8002a24 <DHCP_run+0x284>)
 8002952:	2200      	movs	r2, #0
 8002954:	701a      	strb	r2, [r3, #0]
				if (OLD_allocated_ip[0] != DHCP_allocated_ip[0] || 
 8002956:	4b31      	ldr	r3, [pc, #196]	@ (8002a1c <DHCP_run+0x27c>)
 8002958:	781a      	ldrb	r2, [r3, #0]
 800295a:	4b24      	ldr	r3, [pc, #144]	@ (80029ec <DHCP_run+0x24c>)
 800295c:	781b      	ldrb	r3, [r3, #0]
 800295e:	429a      	cmp	r2, r3
 8002960:	d111      	bne.n	8002986 <DHCP_run+0x1e6>
				    OLD_allocated_ip[1] != DHCP_allocated_ip[1] ||
 8002962:	4b2e      	ldr	r3, [pc, #184]	@ (8002a1c <DHCP_run+0x27c>)
 8002964:	785a      	ldrb	r2, [r3, #1]
 8002966:	4b21      	ldr	r3, [pc, #132]	@ (80029ec <DHCP_run+0x24c>)
 8002968:	785b      	ldrb	r3, [r3, #1]
				if (OLD_allocated_ip[0] != DHCP_allocated_ip[0] || 
 800296a:	429a      	cmp	r2, r3
 800296c:	d10b      	bne.n	8002986 <DHCP_run+0x1e6>
				    OLD_allocated_ip[2] != DHCP_allocated_ip[2] ||
 800296e:	4b2b      	ldr	r3, [pc, #172]	@ (8002a1c <DHCP_run+0x27c>)
 8002970:	789a      	ldrb	r2, [r3, #2]
 8002972:	4b1e      	ldr	r3, [pc, #120]	@ (80029ec <DHCP_run+0x24c>)
 8002974:	789b      	ldrb	r3, [r3, #2]
				    OLD_allocated_ip[1] != DHCP_allocated_ip[1] ||
 8002976:	429a      	cmp	r2, r3
 8002978:	d105      	bne.n	8002986 <DHCP_run+0x1e6>
				    OLD_allocated_ip[3] != DHCP_allocated_ip[3]) 
 800297a:	4b28      	ldr	r3, [pc, #160]	@ (8002a1c <DHCP_run+0x27c>)
 800297c:	78da      	ldrb	r2, [r3, #3]
 800297e:	4b1b      	ldr	r3, [pc, #108]	@ (80029ec <DHCP_run+0x24c>)
 8002980:	78db      	ldrb	r3, [r3, #3]
				    OLD_allocated_ip[2] != DHCP_allocated_ip[2] ||
 8002982:	429a      	cmp	r2, r3
 8002984:	d008      	beq.n	8002998 <DHCP_run+0x1f8>
				{
					ret = DHCP_IP_CHANGED;
 8002986:	2303      	movs	r3, #3
 8002988:	71fb      	strb	r3, [r7, #7]
					dhcp_ip_update();
 800298a:	4b27      	ldr	r3, [pc, #156]	@ (8002a28 <DHCP_run+0x288>)
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	4798      	blx	r3
               #ifdef _DHCP_DEBUG_
                  printf(">IP changed.\r\n");
 8002990:	4826      	ldr	r0, [pc, #152]	@ (8002a2c <DHCP_run+0x28c>)
 8002992:	f009 fc93 	bl	800c2bc <puts>
 8002996:	e005      	b.n	80029a4 <DHCP_run+0x204>
					
				}
         #ifdef _DHCP_DEBUG_
            else
            	{
            	  StateChangeFlag = true;
 8002998:	4b1d      	ldr	r3, [pc, #116]	@ (8002a10 <DHCP_run+0x270>)
 800299a:	2201      	movs	r2, #1
 800299c:	701a      	strb	r2, [r3, #0]
            	  printf(">IP is continued.\r\n");
 800299e:	4824      	ldr	r0, [pc, #144]	@ (8002a30 <DHCP_run+0x290>)
 80029a0:	f009 fc8c 	bl	800c2bc <puts>
            	}
         #endif            				
				reset_DHCP_timeout();
 80029a4:	f000 f980 	bl	8002ca8 <reset_DHCP_timeout>
				dhcp_state = STATE_DHCP_LEASED;
 80029a8:	4b0e      	ldr	r3, [pc, #56]	@ (80029e4 <DHCP_run+0x244>)
 80029aa:	2203      	movs	r2, #3
 80029ac:	701a      	strb	r2, [r3, #0]

				reset_DHCP_timeout();

				dhcp_state = STATE_DHCP_DISCOVER;
			} else ret = check_DHCP_timeout();
	   	break;
 80029ae:	e013      	b.n	80029d8 <DHCP_run+0x238>
			} else if (type == DHCP_NAK) {
 80029b0:	79bb      	ldrb	r3, [r7, #6]
 80029b2:	2b06      	cmp	r3, #6
 80029b4:	d108      	bne.n	80029c8 <DHCP_run+0x228>
				printf("> Receive DHCP_NACK, Failed to maintain ip\r\n");
 80029b6:	481f      	ldr	r0, [pc, #124]	@ (8002a34 <DHCP_run+0x294>)
 80029b8:	f009 fc80 	bl	800c2bc <puts>
				reset_DHCP_timeout();
 80029bc:	f000 f974 	bl	8002ca8 <reset_DHCP_timeout>
				dhcp_state = STATE_DHCP_DISCOVER;
 80029c0:	4b08      	ldr	r3, [pc, #32]	@ (80029e4 <DHCP_run+0x244>)
 80029c2:	2201      	movs	r2, #1
 80029c4:	701a      	strb	r2, [r3, #0]
	   	break;
 80029c6:	e007      	b.n	80029d8 <DHCP_run+0x238>
			} else ret = check_DHCP_timeout();
 80029c8:	f000 f836 	bl	8002a38 <check_DHCP_timeout>
 80029cc:	4603      	mov	r3, r0
 80029ce:	71fb      	strb	r3, [r7, #7]
	   	break;
 80029d0:	e002      	b.n	80029d8 <DHCP_run+0x238>
		default :
   		break;
 80029d2:	bf00      	nop
 80029d4:	e000      	b.n	80029d8 <DHCP_run+0x238>
		break;
 80029d6:	bf00      	nop
	}

	return ret;
 80029d8:	79fb      	ldrb	r3, [r7, #7]
}
 80029da:	4618      	mov	r0, r3
 80029dc:	3708      	adds	r7, #8
 80029de:	46bd      	mov	sp, r7
 80029e0:	bd80      	pop	{r7, pc}
 80029e2:	bf00      	nop
 80029e4:	20000de4 	.word	0x20000de4
 80029e8:	20000dc5 	.word	0x20000dc5
 80029ec:	20000dd4 	.word	0x20000dd4
 80029f0:	0800d700 	.word	0x0800d700
 80029f4:	20000df0 	.word	0x20000df0
 80029f8:	0800d718 	.word	0x0800d718
 80029fc:	20000094 	.word	0x20000094
 8002a00:	2000009c 	.word	0x2000009c
 8002a04:	0800d72c 	.word	0x0800d72c
 8002a08:	20000084 	.word	0x20000084
 8002a0c:	20000de8 	.word	0x20000de8
 8002a10:	20000dc4 	.word	0x20000dc4
 8002a14:	20000d74 	.word	0x20000d74
 8002a18:	0800d744 	.word	0x0800d744
 8002a1c:	20000dd0 	.word	0x20000dd0
 8002a20:	20000dec 	.word	0x20000dec
 8002a24:	20000de5 	.word	0x20000de5
 8002a28:	20000098 	.word	0x20000098
 8002a2c:	0800d764 	.word	0x0800d764
 8002a30:	0800d774 	.word	0x0800d774
 8002a34:	0800d788 	.word	0x0800d788

08002a38 <check_DHCP_timeout>:
   close(DHCP_SOCKET);
   dhcp_state = STATE_DHCP_STOP;
}

uint8_t check_DHCP_timeout(void)
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b082      	sub	sp, #8
 8002a3c:	af00      	add	r7, sp, #0
	uint8_t ret = DHCP_RUNNING;
 8002a3e:	2301      	movs	r3, #1
 8002a40:	71fb      	strb	r3, [r7, #7]
	
	if (dhcp_retry_count < MAX_DHCP_RETRY) {
 8002a42:	4b29      	ldr	r3, [pc, #164]	@ (8002ae8 <check_DHCP_timeout+0xb0>)
 8002a44:	f993 3000 	ldrsb.w	r3, [r3]
 8002a48:	2b01      	cmp	r3, #1
 8002a4a:	dc2d      	bgt.n	8002aa8 <check_DHCP_timeout+0x70>
		if (dhcp_tick_next < dhcp_tick_1s) {
 8002a4c:	4b27      	ldr	r3, [pc, #156]	@ (8002aec <check_DHCP_timeout+0xb4>)
 8002a4e:	681a      	ldr	r2, [r3, #0]
 8002a50:	4b27      	ldr	r3, [pc, #156]	@ (8002af0 <check_DHCP_timeout+0xb8>)
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	429a      	cmp	r2, r3
 8002a56:	d242      	bcs.n	8002ade <check_DHCP_timeout+0xa6>

			switch ( dhcp_state ) {
 8002a58:	4b26      	ldr	r3, [pc, #152]	@ (8002af4 <check_DHCP_timeout+0xbc>)
 8002a5a:	f993 3000 	ldrsb.w	r3, [r3]
 8002a5e:	2b04      	cmp	r3, #4
 8002a60:	d00c      	beq.n	8002a7c <check_DHCP_timeout+0x44>
 8002a62:	2b04      	cmp	r3, #4
 8002a64:	dc0d      	bgt.n	8002a82 <check_DHCP_timeout+0x4a>
 8002a66:	2b01      	cmp	r3, #1
 8002a68:	d002      	beq.n	8002a70 <check_DHCP_timeout+0x38>
 8002a6a:	2b02      	cmp	r3, #2
 8002a6c:	d003      	beq.n	8002a76 <check_DHCP_timeout+0x3e>
					
					send_DHCP_REQUEST();
				break;
		
				default :
				break;
 8002a6e:	e008      	b.n	8002a82 <check_DHCP_timeout+0x4a>
					send_DHCP_DISCOVER();
 8002a70:	f7fe fea4 	bl	80017bc <send_DHCP_DISCOVER>
				break;
 8002a74:	e006      	b.n	8002a84 <check_DHCP_timeout+0x4c>
					send_DHCP_REQUEST();
 8002a76:	f7ff f86d 	bl	8001b54 <send_DHCP_REQUEST>
				break;
 8002a7a:	e003      	b.n	8002a84 <check_DHCP_timeout+0x4c>
					send_DHCP_REQUEST();
 8002a7c:	f7ff f86a 	bl	8001b54 <send_DHCP_REQUEST>
				break;
 8002a80:	e000      	b.n	8002a84 <check_DHCP_timeout+0x4c>
				break;
 8002a82:	bf00      	nop
			}

			dhcp_tick_1s = 0;
 8002a84:	4b1a      	ldr	r3, [pc, #104]	@ (8002af0 <check_DHCP_timeout+0xb8>)
 8002a86:	2200      	movs	r2, #0
 8002a88:	601a      	str	r2, [r3, #0]
			dhcp_tick_next = dhcp_tick_1s + DHCP_WAIT_TIME;
 8002a8a:	4b19      	ldr	r3, [pc, #100]	@ (8002af0 <check_DHCP_timeout+0xb8>)
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	330a      	adds	r3, #10
 8002a90:	4a16      	ldr	r2, [pc, #88]	@ (8002aec <check_DHCP_timeout+0xb4>)
 8002a92:	6013      	str	r3, [r2, #0]
			dhcp_retry_count++;
 8002a94:	4b14      	ldr	r3, [pc, #80]	@ (8002ae8 <check_DHCP_timeout+0xb0>)
 8002a96:	f993 3000 	ldrsb.w	r3, [r3]
 8002a9a:	b2db      	uxtb	r3, r3
 8002a9c:	3301      	adds	r3, #1
 8002a9e:	b2db      	uxtb	r3, r3
 8002aa0:	b25a      	sxtb	r2, r3
 8002aa2:	4b11      	ldr	r3, [pc, #68]	@ (8002ae8 <check_DHCP_timeout+0xb0>)
 8002aa4:	701a      	strb	r2, [r3, #0]
 8002aa6:	e01a      	b.n	8002ade <check_DHCP_timeout+0xa6>
		}
	} else { // timeout occurred

		switch(dhcp_state) {
 8002aa8:	4b12      	ldr	r3, [pc, #72]	@ (8002af4 <check_DHCP_timeout+0xbc>)
 8002aaa:	f993 3000 	ldrsb.w	r3, [r3]
 8002aae:	2b04      	cmp	r3, #4
 8002ab0:	d00c      	beq.n	8002acc <check_DHCP_timeout+0x94>
 8002ab2:	2b04      	cmp	r3, #4
 8002ab4:	dc10      	bgt.n	8002ad8 <check_DHCP_timeout+0xa0>
 8002ab6:	2b01      	cmp	r3, #1
 8002ab8:	d002      	beq.n	8002ac0 <check_DHCP_timeout+0x88>
 8002aba:	2b02      	cmp	r3, #2
 8002abc:	d006      	beq.n	8002acc <check_DHCP_timeout+0x94>
			case STATE_DHCP_REREQUEST:
				send_DHCP_DISCOVER();
				dhcp_state = STATE_DHCP_DISCOVER;
				break;
			default :
				break;
 8002abe:	e00b      	b.n	8002ad8 <check_DHCP_timeout+0xa0>
				dhcp_state = STATE_DHCP_INIT;
 8002ac0:	4b0c      	ldr	r3, [pc, #48]	@ (8002af4 <check_DHCP_timeout+0xbc>)
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	701a      	strb	r2, [r3, #0]
				ret = DHCP_FAILED;
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	71fb      	strb	r3, [r7, #7]
				break;
 8002aca:	e006      	b.n	8002ada <check_DHCP_timeout+0xa2>
				send_DHCP_DISCOVER();
 8002acc:	f7fe fe76 	bl	80017bc <send_DHCP_DISCOVER>
				dhcp_state = STATE_DHCP_DISCOVER;
 8002ad0:	4b08      	ldr	r3, [pc, #32]	@ (8002af4 <check_DHCP_timeout+0xbc>)
 8002ad2:	2201      	movs	r2, #1
 8002ad4:	701a      	strb	r2, [r3, #0]
				break;
 8002ad6:	e000      	b.n	8002ada <check_DHCP_timeout+0xa2>
				break;
 8002ad8:	bf00      	nop
		}
		reset_DHCP_timeout();
 8002ada:	f000 f8e5 	bl	8002ca8 <reset_DHCP_timeout>
	}
	return ret;
 8002ade:	79fb      	ldrb	r3, [r7, #7]
}
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	3708      	adds	r7, #8
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	bd80      	pop	{r7, pc}
 8002ae8:	20000de5 	.word	0x20000de5
 8002aec:	20000088 	.word	0x20000088
 8002af0:	20000de8 	.word	0x20000de8
 8002af4:	20000de4 	.word	0x20000de4

08002af8 <check_DHCP_leasedIP>:

int8_t check_DHCP_leasedIP(void)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	b084      	sub	sp, #16
 8002afc:	af02      	add	r7, sp, #8
	uint8_t tmp;
	int32_t ret;

	//WIZchip RCR value changed for ARP Timeout count control
	tmp = getRCR();
 8002afe:	f44f 50d8 	mov.w	r0, #6912	@ 0x1b00
 8002b02:	f002 fb1f 	bl	8005144 <WIZCHIP_READ>
 8002b06:	4603      	mov	r3, r0
 8002b08:	71fb      	strb	r3, [r7, #7]
	setRCR(0x03);
 8002b0a:	2103      	movs	r1, #3
 8002b0c:	f44f 50d8 	mov.w	r0, #6912	@ 0x1b00
 8002b10:	f002 fb64 	bl	80051dc <WIZCHIP_WRITE>

	// IP conflict detection : ARP request - ARP reply
	// Broadcasting ARP Request for check the IP conflict using UDP sendto() function
	ret = sendto(DHCP_SOCKET, (uint8_t *)"CHECK_IP_CONFLICT", 17, DHCP_allocated_ip, 5000);
 8002b14:	4b15      	ldr	r3, [pc, #84]	@ (8002b6c <check_DHCP_leasedIP+0x74>)
 8002b16:	7818      	ldrb	r0, [r3, #0]
 8002b18:	f241 3388 	movw	r3, #5000	@ 0x1388
 8002b1c:	9300      	str	r3, [sp, #0]
 8002b1e:	4b14      	ldr	r3, [pc, #80]	@ (8002b70 <check_DHCP_leasedIP+0x78>)
 8002b20:	2211      	movs	r2, #17
 8002b22:	4914      	ldr	r1, [pc, #80]	@ (8002b74 <check_DHCP_leasedIP+0x7c>)
 8002b24:	f003 fa74 	bl	8006010 <sendto>
 8002b28:	6038      	str	r0, [r7, #0]

	// RCR value restore
	setRCR(tmp);
 8002b2a:	79fb      	ldrb	r3, [r7, #7]
 8002b2c:	4619      	mov	r1, r3
 8002b2e:	f44f 50d8 	mov.w	r0, #6912	@ 0x1b00
 8002b32:	f002 fb53 	bl	80051dc <WIZCHIP_WRITE>

	if(ret == SOCKERR_TIMEOUT) {
 8002b36:	683b      	ldr	r3, [r7, #0]
 8002b38:	f113 0f0d 	cmn.w	r3, #13
 8002b3c:	d104      	bne.n	8002b48 <check_DHCP_leasedIP+0x50>
		// UDP send Timeout occurred : allocated IP address is unique, DHCP Success

#ifdef _DHCP_DEBUG_
		printf("\r\n> Check leased IP - OK\r\n");
 8002b3e:	480e      	ldr	r0, [pc, #56]	@ (8002b78 <check_DHCP_leasedIP+0x80>)
 8002b40:	f009 fbbc 	bl	800c2bc <puts>
#endif

		return 1;
 8002b44:	2301      	movs	r3, #1
 8002b46:	e00c      	b.n	8002b62 <check_DHCP_leasedIP+0x6a>
	} else {
		// Received ARP reply or etc : IP address conflict occur, DHCP Failed
		send_DHCP_DECLINE();
 8002b48:	f7ff fa94 	bl	8002074 <send_DHCP_DECLINE>

		ret = dhcp_tick_1s;
 8002b4c:	4b0b      	ldr	r3, [pc, #44]	@ (8002b7c <check_DHCP_leasedIP+0x84>)
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	603b      	str	r3, [r7, #0]
		while((dhcp_tick_1s - ret) < 2) ;   // wait for 1s over; wait to complete to send DECLINE message;
 8002b52:	bf00      	nop
 8002b54:	4b09      	ldr	r3, [pc, #36]	@ (8002b7c <check_DHCP_leasedIP+0x84>)
 8002b56:	681a      	ldr	r2, [r3, #0]
 8002b58:	683b      	ldr	r3, [r7, #0]
 8002b5a:	1ad3      	subs	r3, r2, r3
 8002b5c:	2b01      	cmp	r3, #1
 8002b5e:	d9f9      	bls.n	8002b54 <check_DHCP_leasedIP+0x5c>

		return 0;
 8002b60:	2300      	movs	r3, #0
	}
}	
 8002b62:	4618      	mov	r0, r3
 8002b64:	3708      	adds	r7, #8
 8002b66:	46bd      	mov	sp, r7
 8002b68:	bd80      	pop	{r7, pc}
 8002b6a:	bf00      	nop
 8002b6c:	20000dc5 	.word	0x20000dc5
 8002b70:	20000dd4 	.word	0x20000dd4
 8002b74:	0800d7b4 	.word	0x0800d7b4
 8002b78:	0800d7c8 	.word	0x0800d7c8
 8002b7c:	20000de8 	.word	0x20000de8

08002b80 <DHCP_init>:

void DHCP_init(uint8_t s, uint8_t * buf)
{
 8002b80:	b580      	push	{r7, lr}
 8002b82:	b084      	sub	sp, #16
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	4603      	mov	r3, r0
 8002b88:	6039      	str	r1, [r7, #0]
 8002b8a:	71fb      	strb	r3, [r7, #7]
   uint8_t zeroip[4] = {0,0,0,0};
 8002b8c:	2300      	movs	r3, #0
 8002b8e:	60fb      	str	r3, [r7, #12]
   getSHAR(DHCP_CHADDR);
 8002b90:	2206      	movs	r2, #6
 8002b92:	493f      	ldr	r1, [pc, #252]	@ (8002c90 <DHCP_init+0x110>)
 8002b94:	f44f 6010 	mov.w	r0, #2304	@ 0x900
 8002b98:	f002 fb6e 	bl	8005278 <WIZCHIP_READ_BUF>
   if((DHCP_CHADDR[0] | DHCP_CHADDR[1]  | DHCP_CHADDR[2] | DHCP_CHADDR[3] | DHCP_CHADDR[4] | DHCP_CHADDR[5]) == 0x00)
 8002b9c:	4b3c      	ldr	r3, [pc, #240]	@ (8002c90 <DHCP_init+0x110>)
 8002b9e:	781a      	ldrb	r2, [r3, #0]
 8002ba0:	4b3b      	ldr	r3, [pc, #236]	@ (8002c90 <DHCP_init+0x110>)
 8002ba2:	785b      	ldrb	r3, [r3, #1]
 8002ba4:	4313      	orrs	r3, r2
 8002ba6:	b2da      	uxtb	r2, r3
 8002ba8:	4b39      	ldr	r3, [pc, #228]	@ (8002c90 <DHCP_init+0x110>)
 8002baa:	789b      	ldrb	r3, [r3, #2]
 8002bac:	4313      	orrs	r3, r2
 8002bae:	b2da      	uxtb	r2, r3
 8002bb0:	4b37      	ldr	r3, [pc, #220]	@ (8002c90 <DHCP_init+0x110>)
 8002bb2:	78db      	ldrb	r3, [r3, #3]
 8002bb4:	4313      	orrs	r3, r2
 8002bb6:	b2da      	uxtb	r2, r3
 8002bb8:	4b35      	ldr	r3, [pc, #212]	@ (8002c90 <DHCP_init+0x110>)
 8002bba:	791b      	ldrb	r3, [r3, #4]
 8002bbc:	4313      	orrs	r3, r2
 8002bbe:	b2da      	uxtb	r2, r3
 8002bc0:	4b33      	ldr	r3, [pc, #204]	@ (8002c90 <DHCP_init+0x110>)
 8002bc2:	795b      	ldrb	r3, [r3, #5]
 8002bc4:	4313      	orrs	r3, r2
 8002bc6:	b2db      	uxtb	r3, r3
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d117      	bne.n	8002bfc <DHCP_init+0x7c>
   {
      // assigning temporary mac address, you should be set SHAR before call this function. 
      DHCP_CHADDR[0] = 0x00;
 8002bcc:	4b30      	ldr	r3, [pc, #192]	@ (8002c90 <DHCP_init+0x110>)
 8002bce:	2200      	movs	r2, #0
 8002bd0:	701a      	strb	r2, [r3, #0]
      DHCP_CHADDR[1] = 0x08;
 8002bd2:	4b2f      	ldr	r3, [pc, #188]	@ (8002c90 <DHCP_init+0x110>)
 8002bd4:	2208      	movs	r2, #8
 8002bd6:	705a      	strb	r2, [r3, #1]
      DHCP_CHADDR[2] = 0xdc;      
 8002bd8:	4b2d      	ldr	r3, [pc, #180]	@ (8002c90 <DHCP_init+0x110>)
 8002bda:	22dc      	movs	r2, #220	@ 0xdc
 8002bdc:	709a      	strb	r2, [r3, #2]
      DHCP_CHADDR[3] = 0x00;
 8002bde:	4b2c      	ldr	r3, [pc, #176]	@ (8002c90 <DHCP_init+0x110>)
 8002be0:	2200      	movs	r2, #0
 8002be2:	70da      	strb	r2, [r3, #3]
      DHCP_CHADDR[4] = 0x00;
 8002be4:	4b2a      	ldr	r3, [pc, #168]	@ (8002c90 <DHCP_init+0x110>)
 8002be6:	2200      	movs	r2, #0
 8002be8:	711a      	strb	r2, [r3, #4]
      DHCP_CHADDR[5] = 0x00; 
 8002bea:	4b29      	ldr	r3, [pc, #164]	@ (8002c90 <DHCP_init+0x110>)
 8002bec:	2200      	movs	r2, #0
 8002bee:	715a      	strb	r2, [r3, #5]
      setSHAR(DHCP_CHADDR);     
 8002bf0:	2206      	movs	r2, #6
 8002bf2:	4927      	ldr	r1, [pc, #156]	@ (8002c90 <DHCP_init+0x110>)
 8002bf4:	f44f 6010 	mov.w	r0, #2304	@ 0x900
 8002bf8:	f002 fb9e 	bl	8005338 <WIZCHIP_WRITE_BUF>
   }

	DHCP_SOCKET = s; // SOCK_DHCP
 8002bfc:	4a25      	ldr	r2, [pc, #148]	@ (8002c94 <DHCP_init+0x114>)
 8002bfe:	79fb      	ldrb	r3, [r7, #7]
 8002c00:	7013      	strb	r3, [r2, #0]
	pDHCPMSG = (RIP_MSG*)buf;
 8002c02:	4a25      	ldr	r2, [pc, #148]	@ (8002c98 <DHCP_init+0x118>)
 8002c04:	683b      	ldr	r3, [r7, #0]
 8002c06:	6013      	str	r3, [r2, #0]
	DHCP_XID = 0x12345678;
 8002c08:	4b24      	ldr	r3, [pc, #144]	@ (8002c9c <DHCP_init+0x11c>)
 8002c0a:	4a25      	ldr	r2, [pc, #148]	@ (8002ca0 <DHCP_init+0x120>)
 8002c0c:	601a      	str	r2, [r3, #0]
	{
		DHCP_XID += DHCP_CHADDR[3];
 8002c0e:	4b20      	ldr	r3, [pc, #128]	@ (8002c90 <DHCP_init+0x110>)
 8002c10:	78db      	ldrb	r3, [r3, #3]
 8002c12:	461a      	mov	r2, r3
 8002c14:	4b21      	ldr	r3, [pc, #132]	@ (8002c9c <DHCP_init+0x11c>)
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	4413      	add	r3, r2
 8002c1a:	4a20      	ldr	r2, [pc, #128]	@ (8002c9c <DHCP_init+0x11c>)
 8002c1c:	6013      	str	r3, [r2, #0]
		DHCP_XID += DHCP_CHADDR[4];
 8002c1e:	4b1c      	ldr	r3, [pc, #112]	@ (8002c90 <DHCP_init+0x110>)
 8002c20:	791b      	ldrb	r3, [r3, #4]
 8002c22:	461a      	mov	r2, r3
 8002c24:	4b1d      	ldr	r3, [pc, #116]	@ (8002c9c <DHCP_init+0x11c>)
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	4413      	add	r3, r2
 8002c2a:	4a1c      	ldr	r2, [pc, #112]	@ (8002c9c <DHCP_init+0x11c>)
 8002c2c:	6013      	str	r3, [r2, #0]
		DHCP_XID += DHCP_CHADDR[5];
 8002c2e:	4b18      	ldr	r3, [pc, #96]	@ (8002c90 <DHCP_init+0x110>)
 8002c30:	795b      	ldrb	r3, [r3, #5]
 8002c32:	461a      	mov	r2, r3
 8002c34:	4b19      	ldr	r3, [pc, #100]	@ (8002c9c <DHCP_init+0x11c>)
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	4413      	add	r3, r2
 8002c3a:	4a18      	ldr	r2, [pc, #96]	@ (8002c9c <DHCP_init+0x11c>)
 8002c3c:	6013      	str	r3, [r2, #0]
		DHCP_XID += (DHCP_CHADDR[3] ^ DHCP_CHADDR[4] ^ DHCP_CHADDR[5]);
 8002c3e:	4b14      	ldr	r3, [pc, #80]	@ (8002c90 <DHCP_init+0x110>)
 8002c40:	78da      	ldrb	r2, [r3, #3]
 8002c42:	4b13      	ldr	r3, [pc, #76]	@ (8002c90 <DHCP_init+0x110>)
 8002c44:	791b      	ldrb	r3, [r3, #4]
 8002c46:	4053      	eors	r3, r2
 8002c48:	b2da      	uxtb	r2, r3
 8002c4a:	4b11      	ldr	r3, [pc, #68]	@ (8002c90 <DHCP_init+0x110>)
 8002c4c:	795b      	ldrb	r3, [r3, #5]
 8002c4e:	4053      	eors	r3, r2
 8002c50:	b2db      	uxtb	r3, r3
 8002c52:	461a      	mov	r2, r3
 8002c54:	4b11      	ldr	r3, [pc, #68]	@ (8002c9c <DHCP_init+0x11c>)
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	4413      	add	r3, r2
 8002c5a:	4a10      	ldr	r2, [pc, #64]	@ (8002c9c <DHCP_init+0x11c>)
 8002c5c:	6013      	str	r3, [r2, #0]
	}
	// WIZchip Netinfo Clear
	setSIPR(zeroip);
 8002c5e:	f107 030c 	add.w	r3, r7, #12
 8002c62:	2204      	movs	r2, #4
 8002c64:	4619      	mov	r1, r3
 8002c66:	f44f 6070 	mov.w	r0, #3840	@ 0xf00
 8002c6a:	f002 fb65 	bl	8005338 <WIZCHIP_WRITE_BUF>
	setGAR(zeroip);
 8002c6e:	f107 030c 	add.w	r3, r7, #12
 8002c72:	2204      	movs	r2, #4
 8002c74:	4619      	mov	r1, r3
 8002c76:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8002c7a:	f002 fb5d 	bl	8005338 <WIZCHIP_WRITE_BUF>

	reset_DHCP_timeout();
 8002c7e:	f000 f813 	bl	8002ca8 <reset_DHCP_timeout>
	dhcp_state = STATE_DHCP_INIT;
 8002c82:	4b08      	ldr	r3, [pc, #32]	@ (8002ca4 <DHCP_init+0x124>)
 8002c84:	2200      	movs	r2, #0
 8002c86:	701a      	strb	r2, [r3, #0]
}
 8002c88:	bf00      	nop
 8002c8a:	3710      	adds	r7, #16
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	bd80      	pop	{r7, pc}
 8002c90:	20000df4 	.word	0x20000df4
 8002c94:	20000dc5 	.word	0x20000dc5
 8002c98:	20000df0 	.word	0x20000df0
 8002c9c:	20000dec 	.word	0x20000dec
 8002ca0:	12345678 	.word	0x12345678
 8002ca4:	20000de4 	.word	0x20000de4

08002ca8 <reset_DHCP_timeout>:


/* Reset the DHCP timeout count and retry count. */
void reset_DHCP_timeout(void)
{
 8002ca8:	b480      	push	{r7}
 8002caa:	af00      	add	r7, sp, #0
	dhcp_tick_1s = 0;
 8002cac:	4b06      	ldr	r3, [pc, #24]	@ (8002cc8 <reset_DHCP_timeout+0x20>)
 8002cae:	2200      	movs	r2, #0
 8002cb0:	601a      	str	r2, [r3, #0]
	dhcp_tick_next = DHCP_WAIT_TIME;
 8002cb2:	4b06      	ldr	r3, [pc, #24]	@ (8002ccc <reset_DHCP_timeout+0x24>)
 8002cb4:	220a      	movs	r2, #10
 8002cb6:	601a      	str	r2, [r3, #0]
	dhcp_retry_count = 0;
 8002cb8:	4b05      	ldr	r3, [pc, #20]	@ (8002cd0 <reset_DHCP_timeout+0x28>)
 8002cba:	2200      	movs	r2, #0
 8002cbc:	701a      	strb	r2, [r3, #0]
}
 8002cbe:	bf00      	nop
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc6:	4770      	bx	lr
 8002cc8:	20000de8 	.word	0x20000de8
 8002ccc:	20000088 	.word	0x20000088
 8002cd0:	20000de5 	.word	0x20000de5

08002cd4 <DHCP_time_handler>:

void DHCP_time_handler(void)
{
 8002cd4:	b480      	push	{r7}
 8002cd6:	af00      	add	r7, sp, #0
	dhcp_tick_1s++;
 8002cd8:	4b04      	ldr	r3, [pc, #16]	@ (8002cec <DHCP_time_handler+0x18>)
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	3301      	adds	r3, #1
 8002cde:	4a03      	ldr	r2, [pc, #12]	@ (8002cec <DHCP_time_handler+0x18>)
 8002ce0:	6013      	str	r3, [r2, #0]
}
 8002ce2:	bf00      	nop
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cea:	4770      	bx	lr
 8002cec:	20000de8 	.word	0x20000de8

08002cf0 <getIPfromDHCP>:

void getIPfromDHCP(uint8_t* ip)
{
 8002cf0:	b480      	push	{r7}
 8002cf2:	b083      	sub	sp, #12
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	6078      	str	r0, [r7, #4]
	ip[0] = DHCP_allocated_ip[0];
 8002cf8:	4b0c      	ldr	r3, [pc, #48]	@ (8002d2c <getIPfromDHCP+0x3c>)
 8002cfa:	781a      	ldrb	r2, [r3, #0]
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	701a      	strb	r2, [r3, #0]
	ip[1] = DHCP_allocated_ip[1];
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	3301      	adds	r3, #1
 8002d04:	4a09      	ldr	r2, [pc, #36]	@ (8002d2c <getIPfromDHCP+0x3c>)
 8002d06:	7852      	ldrb	r2, [r2, #1]
 8002d08:	701a      	strb	r2, [r3, #0]
	ip[2] = DHCP_allocated_ip[2];	
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	3302      	adds	r3, #2
 8002d0e:	4a07      	ldr	r2, [pc, #28]	@ (8002d2c <getIPfromDHCP+0x3c>)
 8002d10:	7892      	ldrb	r2, [r2, #2]
 8002d12:	701a      	strb	r2, [r3, #0]
	ip[3] = DHCP_allocated_ip[3];
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	3303      	adds	r3, #3
 8002d18:	4a04      	ldr	r2, [pc, #16]	@ (8002d2c <getIPfromDHCP+0x3c>)
 8002d1a:	78d2      	ldrb	r2, [r2, #3]
 8002d1c:	701a      	strb	r2, [r3, #0]
}
 8002d1e:	bf00      	nop
 8002d20:	370c      	adds	r7, #12
 8002d22:	46bd      	mov	sp, r7
 8002d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d28:	4770      	bx	lr
 8002d2a:	bf00      	nop
 8002d2c:	20000dd4 	.word	0x20000dd4

08002d30 <getGWfromDHCP>:

void getGWfromDHCP(uint8_t* ip)
{
 8002d30:	b480      	push	{r7}
 8002d32:	b083      	sub	sp, #12
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
	ip[0] =DHCP_allocated_gw[0];
 8002d38:	4b0c      	ldr	r3, [pc, #48]	@ (8002d6c <getGWfromDHCP+0x3c>)
 8002d3a:	781a      	ldrb	r2, [r3, #0]
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	701a      	strb	r2, [r3, #0]
	ip[1] =DHCP_allocated_gw[1];
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	3301      	adds	r3, #1
 8002d44:	4a09      	ldr	r2, [pc, #36]	@ (8002d6c <getGWfromDHCP+0x3c>)
 8002d46:	7852      	ldrb	r2, [r2, #1]
 8002d48:	701a      	strb	r2, [r3, #0]
	ip[2] =DHCP_allocated_gw[2];
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	3302      	adds	r3, #2
 8002d4e:	4a07      	ldr	r2, [pc, #28]	@ (8002d6c <getGWfromDHCP+0x3c>)
 8002d50:	7892      	ldrb	r2, [r2, #2]
 8002d52:	701a      	strb	r2, [r3, #0]
	ip[3] =DHCP_allocated_gw[3];			
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	3303      	adds	r3, #3
 8002d58:	4a04      	ldr	r2, [pc, #16]	@ (8002d6c <getGWfromDHCP+0x3c>)
 8002d5a:	78d2      	ldrb	r2, [r2, #3]
 8002d5c:	701a      	strb	r2, [r3, #0]
}
 8002d5e:	bf00      	nop
 8002d60:	370c      	adds	r7, #12
 8002d62:	46bd      	mov	sp, r7
 8002d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d68:	4770      	bx	lr
 8002d6a:	bf00      	nop
 8002d6c:	20000dd8 	.word	0x20000dd8

08002d70 <getSNfromDHCP>:

void getSNfromDHCP(uint8_t* ip)
{
 8002d70:	b480      	push	{r7}
 8002d72:	b083      	sub	sp, #12
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]
   ip[0] = DHCP_allocated_sn[0];
 8002d78:	4b0c      	ldr	r3, [pc, #48]	@ (8002dac <getSNfromDHCP+0x3c>)
 8002d7a:	781a      	ldrb	r2, [r3, #0]
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	701a      	strb	r2, [r3, #0]
   ip[1] = DHCP_allocated_sn[1];
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	3301      	adds	r3, #1
 8002d84:	4a09      	ldr	r2, [pc, #36]	@ (8002dac <getSNfromDHCP+0x3c>)
 8002d86:	7852      	ldrb	r2, [r2, #1]
 8002d88:	701a      	strb	r2, [r3, #0]
   ip[2] = DHCP_allocated_sn[2];
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	3302      	adds	r3, #2
 8002d8e:	4a07      	ldr	r2, [pc, #28]	@ (8002dac <getSNfromDHCP+0x3c>)
 8002d90:	7892      	ldrb	r2, [r2, #2]
 8002d92:	701a      	strb	r2, [r3, #0]
   ip[3] = DHCP_allocated_sn[3];         
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	3303      	adds	r3, #3
 8002d98:	4a04      	ldr	r2, [pc, #16]	@ (8002dac <getSNfromDHCP+0x3c>)
 8002d9a:	78d2      	ldrb	r2, [r2, #3]
 8002d9c:	701a      	strb	r2, [r3, #0]
}
 8002d9e:	bf00      	nop
 8002da0:	370c      	adds	r7, #12
 8002da2:	46bd      	mov	sp, r7
 8002da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da8:	4770      	bx	lr
 8002daa:	bf00      	nop
 8002dac:	20000ddc 	.word	0x20000ddc

08002db0 <getDNSfromDHCP>:

void getDNSfromDHCP(uint8_t* ip)
{
 8002db0:	b480      	push	{r7}
 8002db2:	b083      	sub	sp, #12
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]
   ip[0] = DHCP_allocated_dns[0];
 8002db8:	4b0c      	ldr	r3, [pc, #48]	@ (8002dec <getDNSfromDHCP+0x3c>)
 8002dba:	781a      	ldrb	r2, [r3, #0]
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	701a      	strb	r2, [r3, #0]
   ip[1] = DHCP_allocated_dns[1];
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	3301      	adds	r3, #1
 8002dc4:	4a09      	ldr	r2, [pc, #36]	@ (8002dec <getDNSfromDHCP+0x3c>)
 8002dc6:	7852      	ldrb	r2, [r2, #1]
 8002dc8:	701a      	strb	r2, [r3, #0]
   ip[2] = DHCP_allocated_dns[2];
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	3302      	adds	r3, #2
 8002dce:	4a07      	ldr	r2, [pc, #28]	@ (8002dec <getDNSfromDHCP+0x3c>)
 8002dd0:	7892      	ldrb	r2, [r2, #2]
 8002dd2:	701a      	strb	r2, [r3, #0]
   ip[3] = DHCP_allocated_dns[3];         
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	3303      	adds	r3, #3
 8002dd8:	4a04      	ldr	r2, [pc, #16]	@ (8002dec <getDNSfromDHCP+0x3c>)
 8002dda:	78d2      	ldrb	r2, [r2, #3]
 8002ddc:	701a      	strb	r2, [r3, #0]
}
 8002dde:	bf00      	nop
 8002de0:	370c      	adds	r7, #12
 8002de2:	46bd      	mov	sp, r7
 8002de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de8:	4770      	bx	lr
 8002dea:	bf00      	nop
 8002dec:	20000de0 	.word	0x20000de0

08002df0 <NibbleToHex>:
{
	return dhcp_lease_time;
}

char NibbleToHex(uint8_t nibble)
{
 8002df0:	b480      	push	{r7}
 8002df2:	b083      	sub	sp, #12
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	4603      	mov	r3, r0
 8002df8:	71fb      	strb	r3, [r7, #7]
  nibble &= 0x0F;
 8002dfa:	79fb      	ldrb	r3, [r7, #7]
 8002dfc:	f003 030f 	and.w	r3, r3, #15
 8002e00:	71fb      	strb	r3, [r7, #7]
  if (nibble <= 9)
 8002e02:	79fb      	ldrb	r3, [r7, #7]
 8002e04:	2b09      	cmp	r3, #9
 8002e06:	d803      	bhi.n	8002e10 <NibbleToHex+0x20>
    return nibble + '0';
 8002e08:	79fb      	ldrb	r3, [r7, #7]
 8002e0a:	3330      	adds	r3, #48	@ 0x30
 8002e0c:	b2db      	uxtb	r3, r3
 8002e0e:	e002      	b.n	8002e16 <NibbleToHex+0x26>
  else 
    return nibble + ('A'-0x0A);
 8002e10:	79fb      	ldrb	r3, [r7, #7]
 8002e12:	3337      	adds	r3, #55	@ 0x37
 8002e14:	b2db      	uxtb	r3, r3
}
 8002e16:	4618      	mov	r0, r3
 8002e18:	370c      	adds	r7, #12
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e20:	4770      	bx	lr

08002e22 <get16>:
uint32_t dns_1s_tick;   // for timout of DNS processing
static uint8_t retry_count;

/* converts uint16_t from network buffer to a host byte order integer. */
uint16_t get16(uint8_t * s)
{
 8002e22:	b480      	push	{r7}
 8002e24:	b085      	sub	sp, #20
 8002e26:	af00      	add	r7, sp, #0
 8002e28:	6078      	str	r0, [r7, #4]
	uint16_t i;
	i = *s++ << 8;
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	1c5a      	adds	r2, r3, #1
 8002e2e:	607a      	str	r2, [r7, #4]
 8002e30:	781b      	ldrb	r3, [r3, #0]
 8002e32:	021b      	lsls	r3, r3, #8
 8002e34:	81fb      	strh	r3, [r7, #14]
	i = i + *s;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	781b      	ldrb	r3, [r3, #0]
 8002e3a:	461a      	mov	r2, r3
 8002e3c:	89fb      	ldrh	r3, [r7, #14]
 8002e3e:	4413      	add	r3, r2
 8002e40:	81fb      	strh	r3, [r7, #14]
	return i;
 8002e42:	89fb      	ldrh	r3, [r7, #14]
}
 8002e44:	4618      	mov	r0, r3
 8002e46:	3714      	adds	r7, #20
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4e:	4770      	bx	lr

08002e50 <put16>:

/* copies uint16_t to the network buffer with network byte order. */
uint8_t * put16(uint8_t * s, uint16_t i)
{
 8002e50:	b480      	push	{r7}
 8002e52:	b083      	sub	sp, #12
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	6078      	str	r0, [r7, #4]
 8002e58:	460b      	mov	r3, r1
 8002e5a:	807b      	strh	r3, [r7, #2]
	*s++ = i >> 8;
 8002e5c:	887b      	ldrh	r3, [r7, #2]
 8002e5e:	0a1b      	lsrs	r3, r3, #8
 8002e60:	b299      	uxth	r1, r3
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	1c5a      	adds	r2, r3, #1
 8002e66:	607a      	str	r2, [r7, #4]
 8002e68:	b2ca      	uxtb	r2, r1
 8002e6a:	701a      	strb	r2, [r3, #0]
	*s++ = i;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	1c5a      	adds	r2, r3, #1
 8002e70:	607a      	str	r2, [r7, #4]
 8002e72:	887a      	ldrh	r2, [r7, #2]
 8002e74:	b2d2      	uxtb	r2, r2
 8002e76:	701a      	strb	r2, [r3, #0]
	return s;
 8002e78:	687b      	ldr	r3, [r7, #4]
}
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	370c      	adds	r7, #12
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e84:	4770      	bx	lr

08002e86 <parse_name>:
 *               buf        - is a pointer to the buffer for the human-readable form name.
 *               len        - is the MAX. size of buffer.
 * Returns     : the length of compressed message
 */
int parse_name(uint8_t * msg, uint8_t * compressed, char * buf, int16_t len)
{
 8002e86:	b480      	push	{r7}
 8002e88:	b08b      	sub	sp, #44	@ 0x2c
 8002e8a:	af00      	add	r7, sp, #0
 8002e8c:	60f8      	str	r0, [r7, #12]
 8002e8e:	60b9      	str	r1, [r7, #8]
 8002e90:	607a      	str	r2, [r7, #4]
 8002e92:	807b      	strh	r3, [r7, #2]
	uint16_t slen;		/* Length of current segment */
	uint8_t * cp;
	int clen = 0;		/* Total length of compressed name */
 8002e94:	2300      	movs	r3, #0
 8002e96:	61fb      	str	r3, [r7, #28]
	int indirect = 0;	/* Set if indirection encountered */
 8002e98:	2300      	movs	r3, #0
 8002e9a:	61bb      	str	r3, [r7, #24]
	int nseg = 0;		/* Total number of segments in name */
 8002e9c:	2300      	movs	r3, #0
 8002e9e:	617b      	str	r3, [r7, #20]

	cp = compressed;
 8002ea0:	68bb      	ldr	r3, [r7, #8]
 8002ea2:	623b      	str	r3, [r7, #32]

	for (;;)
	{
		slen = *cp++;	/* Length of this segment */
 8002ea4:	6a3b      	ldr	r3, [r7, #32]
 8002ea6:	1c5a      	adds	r2, r3, #1
 8002ea8:	623a      	str	r2, [r7, #32]
 8002eaa:	781b      	ldrb	r3, [r3, #0]
 8002eac:	84fb      	strh	r3, [r7, #38]	@ 0x26

		if (!indirect) clen++;
 8002eae:	69bb      	ldr	r3, [r7, #24]
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d102      	bne.n	8002eba <parse_name+0x34>
 8002eb4:	69fb      	ldr	r3, [r7, #28]
 8002eb6:	3301      	adds	r3, #1
 8002eb8:	61fb      	str	r3, [r7, #28]

		if ((slen & 0xc0) == 0xc0)
 8002eba:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8002ebc:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8002ec0:	2bc0      	cmp	r3, #192	@ 0xc0
 8002ec2:	d117      	bne.n	8002ef4 <parse_name+0x6e>
		{
			if (!indirect)
 8002ec4:	69bb      	ldr	r3, [r7, #24]
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d102      	bne.n	8002ed0 <parse_name+0x4a>
				clen++;
 8002eca:	69fb      	ldr	r3, [r7, #28]
 8002ecc:	3301      	adds	r3, #1
 8002ece:	61fb      	str	r3, [r7, #28]
			indirect = 1;
 8002ed0:	2301      	movs	r3, #1
 8002ed2:	61bb      	str	r3, [r7, #24]
			/* Follow indirection */
			cp = &msg[((slen & 0x3f)<<8) + *cp];
 8002ed4:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8002ed6:	021b      	lsls	r3, r3, #8
 8002ed8:	f403 537c 	and.w	r3, r3, #16128	@ 0x3f00
 8002edc:	6a3a      	ldr	r2, [r7, #32]
 8002ede:	7812      	ldrb	r2, [r2, #0]
 8002ee0:	4413      	add	r3, r2
 8002ee2:	461a      	mov	r2, r3
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	4413      	add	r3, r2
 8002ee8:	623b      	str	r3, [r7, #32]
			slen = *cp++;
 8002eea:	6a3b      	ldr	r3, [r7, #32]
 8002eec:	1c5a      	adds	r2, r3, #1
 8002eee:	623a      	str	r2, [r7, #32]
 8002ef0:	781b      	ldrb	r3, [r3, #0]
 8002ef2:	84fb      	strh	r3, [r7, #38]	@ 0x26
		}

		if (slen == 0)	/* zero length == all done */
 8002ef4:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d02b      	beq.n	8002f52 <parse_name+0xcc>
			break;

		len -= slen + 1;
 8002efa:	887a      	ldrh	r2, [r7, #2]
 8002efc:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8002efe:	1ad3      	subs	r3, r2, r3
 8002f00:	b29b      	uxth	r3, r3
 8002f02:	3b01      	subs	r3, #1
 8002f04:	b29b      	uxth	r3, r3
 8002f06:	807b      	strh	r3, [r7, #2]

		if (len < 0) return -1;
 8002f08:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	da02      	bge.n	8002f16 <parse_name+0x90>
 8002f10:	f04f 33ff 	mov.w	r3, #4294967295
 8002f14:	e038      	b.n	8002f88 <parse_name+0x102>

		if (!indirect) clen += slen;
 8002f16:	69bb      	ldr	r3, [r7, #24]
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d10c      	bne.n	8002f36 <parse_name+0xb0>
 8002f1c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8002f1e:	69fa      	ldr	r2, [r7, #28]
 8002f20:	4413      	add	r3, r2
 8002f22:	61fb      	str	r3, [r7, #28]

		while (slen-- != 0) *buf++ = (char)*cp++;
 8002f24:	e007      	b.n	8002f36 <parse_name+0xb0>
 8002f26:	6a3a      	ldr	r2, [r7, #32]
 8002f28:	1c53      	adds	r3, r2, #1
 8002f2a:	623b      	str	r3, [r7, #32]
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	1c59      	adds	r1, r3, #1
 8002f30:	6079      	str	r1, [r7, #4]
 8002f32:	7812      	ldrb	r2, [r2, #0]
 8002f34:	701a      	strb	r2, [r3, #0]
 8002f36:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8002f38:	1e5a      	subs	r2, r3, #1
 8002f3a:	84fa      	strh	r2, [r7, #38]	@ 0x26
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d1f2      	bne.n	8002f26 <parse_name+0xa0>
		*buf++ = '.';
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	1c5a      	adds	r2, r3, #1
 8002f44:	607a      	str	r2, [r7, #4]
 8002f46:	222e      	movs	r2, #46	@ 0x2e
 8002f48:	701a      	strb	r2, [r3, #0]
		nseg++;
 8002f4a:	697b      	ldr	r3, [r7, #20]
 8002f4c:	3301      	adds	r3, #1
 8002f4e:	617b      	str	r3, [r7, #20]
		slen = *cp++;	/* Length of this segment */
 8002f50:	e7a8      	b.n	8002ea4 <parse_name+0x1e>
			break;
 8002f52:	bf00      	nop
	}

	if (nseg == 0)
 8002f54:	697b      	ldr	r3, [r7, #20]
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d10a      	bne.n	8002f70 <parse_name+0xea>
	{
		/* Root name; represent as single dot */
		*buf++ = '.';
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	1c5a      	adds	r2, r3, #1
 8002f5e:	607a      	str	r2, [r7, #4]
 8002f60:	222e      	movs	r2, #46	@ 0x2e
 8002f62:	701a      	strb	r2, [r3, #0]
		len--;
 8002f64:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002f68:	b29b      	uxth	r3, r3
 8002f6a:	3b01      	subs	r3, #1
 8002f6c:	b29b      	uxth	r3, r3
 8002f6e:	807b      	strh	r3, [r7, #2]
	}

	*buf++ = '\0';
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	1c5a      	adds	r2, r3, #1
 8002f74:	607a      	str	r2, [r7, #4]
 8002f76:	2200      	movs	r2, #0
 8002f78:	701a      	strb	r2, [r3, #0]
	len--;
 8002f7a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002f7e:	b29b      	uxth	r3, r3
 8002f80:	3b01      	subs	r3, #1
 8002f82:	b29b      	uxth	r3, r3
 8002f84:	807b      	strh	r3, [r7, #2]

	return clen;	/* Length of compressed message */
 8002f86:	69fb      	ldr	r3, [r7, #28]
}
 8002f88:	4618      	mov	r0, r3
 8002f8a:	372c      	adds	r7, #44	@ 0x2c
 8002f8c:	46bd      	mov	sp, r7
 8002f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f92:	4770      	bx	lr

08002f94 <dns_question>:
 * Arguments   : msg - is a pointer to the reply message
 *               cp  - is a pointer to the qeustion record.
 * Returns     : a pointer the to next record.
 */
uint8_t * dns_question(uint8_t * msg, uint8_t * cp)
{
 8002f94:	b580      	push	{r7, lr}
 8002f96:	b0b4      	sub	sp, #208	@ 0xd0
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	6078      	str	r0, [r7, #4]
 8002f9c:	6039      	str	r1, [r7, #0]
	int len;
	char name[MAXCNAME];

	len = parse_name(msg, cp, name, MAXCNAME);
 8002f9e:	f107 020c 	add.w	r2, r7, #12
 8002fa2:	23c0      	movs	r3, #192	@ 0xc0
 8002fa4:	6839      	ldr	r1, [r7, #0]
 8002fa6:	6878      	ldr	r0, [r7, #4]
 8002fa8:	f7ff ff6d 	bl	8002e86 <parse_name>
 8002fac:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc


	if (len == -1) return 0;
 8002fb0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002fb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fb8:	d101      	bne.n	8002fbe <dns_question+0x2a>
 8002fba:	2300      	movs	r3, #0
 8002fbc:	e00b      	b.n	8002fd6 <dns_question+0x42>

	cp += len;
 8002fbe:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002fc2:	683a      	ldr	r2, [r7, #0]
 8002fc4:	4413      	add	r3, r2
 8002fc6:	603b      	str	r3, [r7, #0]
	cp += 2;		/* type */
 8002fc8:	683b      	ldr	r3, [r7, #0]
 8002fca:	3302      	adds	r3, #2
 8002fcc:	603b      	str	r3, [r7, #0]
	cp += 2;		/* class */
 8002fce:	683b      	ldr	r3, [r7, #0]
 8002fd0:	3302      	adds	r3, #2
 8002fd2:	603b      	str	r3, [r7, #0]

	return cp;
 8002fd4:	683b      	ldr	r3, [r7, #0]
}
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	37d0      	adds	r7, #208	@ 0xd0
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	bd80      	pop	{r7, pc}

08002fde <dns_answer>:
 * Arguments   : msg - is a pointer to the reply message
 *               cp  - is a pointer to the answer record.
 * Returns     : a pointer the to next record.
 */
uint8_t * dns_answer(uint8_t * msg, uint8_t * cp, uint8_t * ip_from_dns)
{
 8002fde:	b580      	push	{r7, lr}
 8002fe0:	b0b6      	sub	sp, #216	@ 0xd8
 8002fe2:	af00      	add	r7, sp, #0
 8002fe4:	60f8      	str	r0, [r7, #12]
 8002fe6:	60b9      	str	r1, [r7, #8]
 8002fe8:	607a      	str	r2, [r7, #4]
	int len, type;
	char name[MAXCNAME];

	len = parse_name(msg, cp, name, MAXCNAME);
 8002fea:	f107 0210 	add.w	r2, r7, #16
 8002fee:	23c0      	movs	r3, #192	@ 0xc0
 8002ff0:	68b9      	ldr	r1, [r7, #8]
 8002ff2:	68f8      	ldr	r0, [r7, #12]
 8002ff4:	f7ff ff47 	bl	8002e86 <parse_name>
 8002ff8:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4

	if (len == -1) return 0;
 8002ffc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003000:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003004:	d101      	bne.n	800300a <dns_answer+0x2c>
 8003006:	2300      	movs	r3, #0
 8003008:	e0f9      	b.n	80031fe <dns_answer+0x220>

	cp += len;
 800300a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800300e:	68ba      	ldr	r2, [r7, #8]
 8003010:	4413      	add	r3, r2
 8003012:	60bb      	str	r3, [r7, #8]
	type = get16(cp);
 8003014:	68b8      	ldr	r0, [r7, #8]
 8003016:	f7ff ff04 	bl	8002e22 <get16>
 800301a:	4603      	mov	r3, r0
 800301c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
	cp += 2;		/* type */
 8003020:	68bb      	ldr	r3, [r7, #8]
 8003022:	3302      	adds	r3, #2
 8003024:	60bb      	str	r3, [r7, #8]
	cp += 2;		/* class */
 8003026:	68bb      	ldr	r3, [r7, #8]
 8003028:	3302      	adds	r3, #2
 800302a:	60bb      	str	r3, [r7, #8]
	cp += 4;		/* ttl */
 800302c:	68bb      	ldr	r3, [r7, #8]
 800302e:	3304      	adds	r3, #4
 8003030:	60bb      	str	r3, [r7, #8]
	cp += 2;		/* len */
 8003032:	68bb      	ldr	r3, [r7, #8]
 8003034:	3302      	adds	r3, #2
 8003036:	60bb      	str	r3, [r7, #8]


	switch (type)
 8003038:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800303c:	2b10      	cmp	r3, #16
 800303e:	f000 80da 	beq.w	80031f6 <dns_answer+0x218>
 8003042:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8003046:	2b10      	cmp	r3, #16
 8003048:	f300 80d7 	bgt.w	80031fa <dns_answer+0x21c>
 800304c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8003050:	2b0f      	cmp	r3, #15
 8003052:	d07d      	beq.n	8003150 <dns_answer+0x172>
 8003054:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8003058:	2b0f      	cmp	r3, #15
 800305a:	f300 80ce 	bgt.w	80031fa <dns_answer+0x21c>
 800305e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8003062:	2b0c      	cmp	r3, #12
 8003064:	dc26      	bgt.n	80030b4 <dns_answer+0xd6>
 8003066:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800306a:	2b00      	cmp	r3, #0
 800306c:	f340 80c5 	ble.w	80031fa <dns_answer+0x21c>
 8003070:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8003074:	2201      	movs	r2, #1
 8003076:	fa02 f303 	lsl.w	r3, r2, r3
 800307a:	f241 32a4 	movw	r2, #5028	@ 0x13a4
 800307e:	401a      	ands	r2, r3
 8003080:	2a00      	cmp	r2, #0
 8003082:	bf14      	ite	ne
 8003084:	2201      	movne	r2, #1
 8003086:	2200      	moveq	r2, #0
 8003088:	b2d2      	uxtb	r2, r2
 800308a:	2a00      	cmp	r2, #0
 800308c:	d133      	bne.n	80030f6 <dns_answer+0x118>
 800308e:	f003 0240 	and.w	r2, r3, #64	@ 0x40
 8003092:	2a00      	cmp	r2, #0
 8003094:	bf14      	ite	ne
 8003096:	2201      	movne	r2, #1
 8003098:	2200      	moveq	r2, #0
 800309a:	b2d2      	uxtb	r2, r2
 800309c:	2a00      	cmp	r2, #0
 800309e:	d170      	bne.n	8003182 <dns_answer+0x1a4>
 80030a0:	f003 0302 	and.w	r3, r3, #2
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	bf14      	ite	ne
 80030a8:	2301      	movne	r3, #1
 80030aa:	2300      	moveq	r3, #0
 80030ac:	b2db      	uxtb	r3, r3
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d105      	bne.n	80030be <dns_answer+0xe0>
	case TYPE_TXT:
		/* Just stash */
		break;
	default:
		/* Ignore */
		break;
 80030b2:	e0a2      	b.n	80031fa <dns_answer+0x21c>
	switch (type)
 80030b4:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80030b8:	2b0d      	cmp	r3, #13
 80030ba:	d032      	beq.n	8003122 <dns_answer+0x144>
		break;
 80030bc:	e09d      	b.n	80031fa <dns_answer+0x21c>
		ip_from_dns[0] = *cp++;
 80030be:	68bb      	ldr	r3, [r7, #8]
 80030c0:	1c5a      	adds	r2, r3, #1
 80030c2:	60ba      	str	r2, [r7, #8]
 80030c4:	781a      	ldrb	r2, [r3, #0]
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	701a      	strb	r2, [r3, #0]
		ip_from_dns[1] = *cp++;
 80030ca:	68bb      	ldr	r3, [r7, #8]
 80030cc:	1c5a      	adds	r2, r3, #1
 80030ce:	60ba      	str	r2, [r7, #8]
 80030d0:	687a      	ldr	r2, [r7, #4]
 80030d2:	3201      	adds	r2, #1
 80030d4:	781b      	ldrb	r3, [r3, #0]
 80030d6:	7013      	strb	r3, [r2, #0]
		ip_from_dns[2] = *cp++;
 80030d8:	68bb      	ldr	r3, [r7, #8]
 80030da:	1c5a      	adds	r2, r3, #1
 80030dc:	60ba      	str	r2, [r7, #8]
 80030de:	687a      	ldr	r2, [r7, #4]
 80030e0:	3202      	adds	r2, #2
 80030e2:	781b      	ldrb	r3, [r3, #0]
 80030e4:	7013      	strb	r3, [r2, #0]
		ip_from_dns[3] = *cp++;
 80030e6:	68bb      	ldr	r3, [r7, #8]
 80030e8:	1c5a      	adds	r2, r3, #1
 80030ea:	60ba      	str	r2, [r7, #8]
 80030ec:	687a      	ldr	r2, [r7, #4]
 80030ee:	3203      	adds	r2, #3
 80030f0:	781b      	ldrb	r3, [r3, #0]
 80030f2:	7013      	strb	r3, [r2, #0]
		break;
 80030f4:	e082      	b.n	80031fc <dns_answer+0x21e>
		len = parse_name(msg, cp, name, MAXCNAME);
 80030f6:	f107 0210 	add.w	r2, r7, #16
 80030fa:	23c0      	movs	r3, #192	@ 0xc0
 80030fc:	68b9      	ldr	r1, [r7, #8]
 80030fe:	68f8      	ldr	r0, [r7, #12]
 8003100:	f7ff fec1 	bl	8002e86 <parse_name>
 8003104:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4
		if (len == -1) return 0;
 8003108:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800310c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003110:	d101      	bne.n	8003116 <dns_answer+0x138>
 8003112:	2300      	movs	r3, #0
 8003114:	e073      	b.n	80031fe <dns_answer+0x220>
		cp += len;
 8003116:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800311a:	68ba      	ldr	r2, [r7, #8]
 800311c:	4413      	add	r3, r2
 800311e:	60bb      	str	r3, [r7, #8]
		break;
 8003120:	e06c      	b.n	80031fc <dns_answer+0x21e>
		len = *cp++;
 8003122:	68bb      	ldr	r3, [r7, #8]
 8003124:	1c5a      	adds	r2, r3, #1
 8003126:	60ba      	str	r2, [r7, #8]
 8003128:	781b      	ldrb	r3, [r3, #0]
 800312a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
		cp += len;
 800312e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003132:	68ba      	ldr	r2, [r7, #8]
 8003134:	4413      	add	r3, r2
 8003136:	60bb      	str	r3, [r7, #8]
		len = *cp++;
 8003138:	68bb      	ldr	r3, [r7, #8]
 800313a:	1c5a      	adds	r2, r3, #1
 800313c:	60ba      	str	r2, [r7, #8]
 800313e:	781b      	ldrb	r3, [r3, #0]
 8003140:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
		cp += len;
 8003144:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003148:	68ba      	ldr	r2, [r7, #8]
 800314a:	4413      	add	r3, r2
 800314c:	60bb      	str	r3, [r7, #8]
		break;
 800314e:	e055      	b.n	80031fc <dns_answer+0x21e>
		cp += 2;
 8003150:	68bb      	ldr	r3, [r7, #8]
 8003152:	3302      	adds	r3, #2
 8003154:	60bb      	str	r3, [r7, #8]
		len = parse_name(msg, cp, name, MAXCNAME);
 8003156:	f107 0210 	add.w	r2, r7, #16
 800315a:	23c0      	movs	r3, #192	@ 0xc0
 800315c:	68b9      	ldr	r1, [r7, #8]
 800315e:	68f8      	ldr	r0, [r7, #12]
 8003160:	f7ff fe91 	bl	8002e86 <parse_name>
 8003164:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4
		if (len == -1) return 0;
 8003168:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800316c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003170:	d101      	bne.n	8003176 <dns_answer+0x198>
 8003172:	2300      	movs	r3, #0
 8003174:	e043      	b.n	80031fe <dns_answer+0x220>
		cp += len;
 8003176:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800317a:	68ba      	ldr	r2, [r7, #8]
 800317c:	4413      	add	r3, r2
 800317e:	60bb      	str	r3, [r7, #8]
		break;
 8003180:	e03c      	b.n	80031fc <dns_answer+0x21e>
		len = parse_name(msg, cp, name, MAXCNAME);
 8003182:	f107 0210 	add.w	r2, r7, #16
 8003186:	23c0      	movs	r3, #192	@ 0xc0
 8003188:	68b9      	ldr	r1, [r7, #8]
 800318a:	68f8      	ldr	r0, [r7, #12]
 800318c:	f7ff fe7b 	bl	8002e86 <parse_name>
 8003190:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4
		if (len == -1) return 0;
 8003194:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003198:	f1b3 3fff 	cmp.w	r3, #4294967295
 800319c:	d101      	bne.n	80031a2 <dns_answer+0x1c4>
 800319e:	2300      	movs	r3, #0
 80031a0:	e02d      	b.n	80031fe <dns_answer+0x220>
		cp += len;
 80031a2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80031a6:	68ba      	ldr	r2, [r7, #8]
 80031a8:	4413      	add	r3, r2
 80031aa:	60bb      	str	r3, [r7, #8]
		len = parse_name(msg, cp, name, MAXCNAME);
 80031ac:	f107 0210 	add.w	r2, r7, #16
 80031b0:	23c0      	movs	r3, #192	@ 0xc0
 80031b2:	68b9      	ldr	r1, [r7, #8]
 80031b4:	68f8      	ldr	r0, [r7, #12]
 80031b6:	f7ff fe66 	bl	8002e86 <parse_name>
 80031ba:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4
		if (len == -1) return 0;
 80031be:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80031c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031c6:	d101      	bne.n	80031cc <dns_answer+0x1ee>
 80031c8:	2300      	movs	r3, #0
 80031ca:	e018      	b.n	80031fe <dns_answer+0x220>
		cp += len;
 80031cc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80031d0:	68ba      	ldr	r2, [r7, #8]
 80031d2:	4413      	add	r3, r2
 80031d4:	60bb      	str	r3, [r7, #8]
		cp += 4;
 80031d6:	68bb      	ldr	r3, [r7, #8]
 80031d8:	3304      	adds	r3, #4
 80031da:	60bb      	str	r3, [r7, #8]
		cp += 4;
 80031dc:	68bb      	ldr	r3, [r7, #8]
 80031de:	3304      	adds	r3, #4
 80031e0:	60bb      	str	r3, [r7, #8]
		cp += 4;
 80031e2:	68bb      	ldr	r3, [r7, #8]
 80031e4:	3304      	adds	r3, #4
 80031e6:	60bb      	str	r3, [r7, #8]
		cp += 4;
 80031e8:	68bb      	ldr	r3, [r7, #8]
 80031ea:	3304      	adds	r3, #4
 80031ec:	60bb      	str	r3, [r7, #8]
		cp += 4;
 80031ee:	68bb      	ldr	r3, [r7, #8]
 80031f0:	3304      	adds	r3, #4
 80031f2:	60bb      	str	r3, [r7, #8]
		break;
 80031f4:	e002      	b.n	80031fc <dns_answer+0x21e>
		break;
 80031f6:	bf00      	nop
 80031f8:	e000      	b.n	80031fc <dns_answer+0x21e>
		break;
 80031fa:	bf00      	nop
	}

	return cp;
 80031fc:	68bb      	ldr	r3, [r7, #8]
}
 80031fe:	4618      	mov	r0, r3
 8003200:	37d8      	adds	r7, #216	@ 0xd8
 8003202:	46bd      	mov	sp, r7
 8003204:	bd80      	pop	{r7, pc}

08003206 <parseDNSMSG>:
 * Returns     : -1 - Domain name lenght is too big
 *                0 - Fail (Timout or parse error)
 *                1 - Success,
 */
int8_t parseDNSMSG(struct dhdr * pdhdr, uint8_t * pbuf, uint8_t * ip_from_dns)
{
 8003206:	b580      	push	{r7, lr}
 8003208:	b088      	sub	sp, #32
 800320a:	af00      	add	r7, sp, #0
 800320c:	60f8      	str	r0, [r7, #12]
 800320e:	60b9      	str	r1, [r7, #8]
 8003210:	607a      	str	r2, [r7, #4]
	uint16_t tmp;
	uint16_t i;
	uint8_t * msg;
	uint8_t * cp;

	msg = pbuf;
 8003212:	68bb      	ldr	r3, [r7, #8]
 8003214:	617b      	str	r3, [r7, #20]
	memset(pdhdr, 0, sizeof(*pdhdr));
 8003216:	2212      	movs	r2, #18
 8003218:	2100      	movs	r1, #0
 800321a:	68f8      	ldr	r0, [r7, #12]
 800321c:	f009 f92e 	bl	800c47c <memset>

	pdhdr->id = get16(&msg[0]);
 8003220:	6978      	ldr	r0, [r7, #20]
 8003222:	f7ff fdfe 	bl	8002e22 <get16>
 8003226:	4603      	mov	r3, r0
 8003228:	461a      	mov	r2, r3
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	801a      	strh	r2, [r3, #0]
	tmp = get16(&msg[2]);
 800322e:	697b      	ldr	r3, [r7, #20]
 8003230:	3302      	adds	r3, #2
 8003232:	4618      	mov	r0, r3
 8003234:	f7ff fdf5 	bl	8002e22 <get16>
 8003238:	4603      	mov	r3, r0
 800323a:	827b      	strh	r3, [r7, #18]
	if (tmp & 0x8000) pdhdr->qr = 1;
 800323c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8003240:	2b00      	cmp	r3, #0
 8003242:	da02      	bge.n	800324a <parseDNSMSG+0x44>
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	2201      	movs	r2, #1
 8003248:	709a      	strb	r2, [r3, #2]

	pdhdr->opcode = (tmp >> 11) & 0xf;
 800324a:	8a7b      	ldrh	r3, [r7, #18]
 800324c:	0adb      	lsrs	r3, r3, #11
 800324e:	b29b      	uxth	r3, r3
 8003250:	b2db      	uxtb	r3, r3
 8003252:	f003 030f 	and.w	r3, r3, #15
 8003256:	b2da      	uxtb	r2, r3
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	70da      	strb	r2, [r3, #3]

	if (tmp & 0x0400) pdhdr->aa = 1;
 800325c:	8a7b      	ldrh	r3, [r7, #18]
 800325e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003262:	2b00      	cmp	r3, #0
 8003264:	d002      	beq.n	800326c <parseDNSMSG+0x66>
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	2201      	movs	r2, #1
 800326a:	711a      	strb	r2, [r3, #4]
	if (tmp & 0x0200) pdhdr->tc = 1;
 800326c:	8a7b      	ldrh	r3, [r7, #18]
 800326e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003272:	2b00      	cmp	r3, #0
 8003274:	d002      	beq.n	800327c <parseDNSMSG+0x76>
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	2201      	movs	r2, #1
 800327a:	715a      	strb	r2, [r3, #5]
	if (tmp & 0x0100) pdhdr->rd = 1;
 800327c:	8a7b      	ldrh	r3, [r7, #18]
 800327e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003282:	2b00      	cmp	r3, #0
 8003284:	d002      	beq.n	800328c <parseDNSMSG+0x86>
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	2201      	movs	r2, #1
 800328a:	719a      	strb	r2, [r3, #6]
	if (tmp & 0x0080) pdhdr->ra = 1;
 800328c:	8a7b      	ldrh	r3, [r7, #18]
 800328e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003292:	2b00      	cmp	r3, #0
 8003294:	d002      	beq.n	800329c <parseDNSMSG+0x96>
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	2201      	movs	r2, #1
 800329a:	71da      	strb	r2, [r3, #7]

	pdhdr->rcode = tmp & 0xf;
 800329c:	8a7b      	ldrh	r3, [r7, #18]
 800329e:	b2db      	uxtb	r3, r3
 80032a0:	f003 030f 	and.w	r3, r3, #15
 80032a4:	b2da      	uxtb	r2, r3
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	721a      	strb	r2, [r3, #8]
	pdhdr->qdcount = get16(&msg[4]);
 80032aa:	697b      	ldr	r3, [r7, #20]
 80032ac:	3304      	adds	r3, #4
 80032ae:	4618      	mov	r0, r3
 80032b0:	f7ff fdb7 	bl	8002e22 <get16>
 80032b4:	4603      	mov	r3, r0
 80032b6:	461a      	mov	r2, r3
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	815a      	strh	r2, [r3, #10]
	pdhdr->ancount = get16(&msg[6]);
 80032bc:	697b      	ldr	r3, [r7, #20]
 80032be:	3306      	adds	r3, #6
 80032c0:	4618      	mov	r0, r3
 80032c2:	f7ff fdae 	bl	8002e22 <get16>
 80032c6:	4603      	mov	r3, r0
 80032c8:	461a      	mov	r2, r3
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	819a      	strh	r2, [r3, #12]
	pdhdr->nscount = get16(&msg[8]);
 80032ce:	697b      	ldr	r3, [r7, #20]
 80032d0:	3308      	adds	r3, #8
 80032d2:	4618      	mov	r0, r3
 80032d4:	f7ff fda5 	bl	8002e22 <get16>
 80032d8:	4603      	mov	r3, r0
 80032da:	461a      	mov	r2, r3
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	81da      	strh	r2, [r3, #14]
	pdhdr->arcount = get16(&msg[10]);
 80032e0:	697b      	ldr	r3, [r7, #20]
 80032e2:	330a      	adds	r3, #10
 80032e4:	4618      	mov	r0, r3
 80032e6:	f7ff fd9c 	bl	8002e22 <get16>
 80032ea:	4603      	mov	r3, r0
 80032ec:	461a      	mov	r2, r3
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	821a      	strh	r2, [r3, #16]


	/* Now parse the variable length sections */
	cp = &msg[12];
 80032f2:	697b      	ldr	r3, [r7, #20]
 80032f4:	330c      	adds	r3, #12
 80032f6:	61bb      	str	r3, [r7, #24]

	/* Question section */
	for (i = 0; i < pdhdr->qdcount; i++)
 80032f8:	2300      	movs	r3, #0
 80032fa:	83fb      	strh	r3, [r7, #30]
 80032fc:	e00d      	b.n	800331a <parseDNSMSG+0x114>
	{
		cp = dns_question(msg, cp);
 80032fe:	69b9      	ldr	r1, [r7, #24]
 8003300:	6978      	ldr	r0, [r7, #20]
 8003302:	f7ff fe47 	bl	8002f94 <dns_question>
 8003306:	61b8      	str	r0, [r7, #24]
#ifdef _DNS_DEUBG_
      printf("MAX_DOMAIN_NAME is too small, it should be redfine in dns.h");
   #endif
		if(!cp) return -1;
 8003308:	69bb      	ldr	r3, [r7, #24]
 800330a:	2b00      	cmp	r3, #0
 800330c:	d102      	bne.n	8003314 <parseDNSMSG+0x10e>
 800330e:	f04f 33ff 	mov.w	r3, #4294967295
 8003312:	e03b      	b.n	800338c <parseDNSMSG+0x186>
	for (i = 0; i < pdhdr->qdcount; i++)
 8003314:	8bfb      	ldrh	r3, [r7, #30]
 8003316:	3301      	adds	r3, #1
 8003318:	83fb      	strh	r3, [r7, #30]
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	895b      	ldrh	r3, [r3, #10]
 800331e:	8bfa      	ldrh	r2, [r7, #30]
 8003320:	429a      	cmp	r2, r3
 8003322:	d3ec      	bcc.n	80032fe <parseDNSMSG+0xf8>
	}

	/* Answer section */
	for (i = 0; i < pdhdr->ancount; i++)
 8003324:	2300      	movs	r3, #0
 8003326:	83fb      	strh	r3, [r7, #30]
 8003328:	e00e      	b.n	8003348 <parseDNSMSG+0x142>
	{
		cp = dns_answer(msg, cp, ip_from_dns);
 800332a:	687a      	ldr	r2, [r7, #4]
 800332c:	69b9      	ldr	r1, [r7, #24]
 800332e:	6978      	ldr	r0, [r7, #20]
 8003330:	f7ff fe55 	bl	8002fde <dns_answer>
 8003334:	61b8      	str	r0, [r7, #24]
   #ifdef _DNS_DEUBG_
      printf("MAX_DOMAIN_NAME is too small, it should be redfine in dns.h");
   #endif
		if(!cp) return -1;
 8003336:	69bb      	ldr	r3, [r7, #24]
 8003338:	2b00      	cmp	r3, #0
 800333a:	d102      	bne.n	8003342 <parseDNSMSG+0x13c>
 800333c:	f04f 33ff 	mov.w	r3, #4294967295
 8003340:	e024      	b.n	800338c <parseDNSMSG+0x186>
	for (i = 0; i < pdhdr->ancount; i++)
 8003342:	8bfb      	ldrh	r3, [r7, #30]
 8003344:	3301      	adds	r3, #1
 8003346:	83fb      	strh	r3, [r7, #30]
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	899b      	ldrh	r3, [r3, #12]
 800334c:	8bfa      	ldrh	r2, [r7, #30]
 800334e:	429a      	cmp	r2, r3
 8003350:	d3eb      	bcc.n	800332a <parseDNSMSG+0x124>
	}

	/* Name server (authority) section */
	for (i = 0; i < pdhdr->nscount; i++)
 8003352:	2300      	movs	r3, #0
 8003354:	83fb      	strh	r3, [r7, #30]
 8003356:	e002      	b.n	800335e <parseDNSMSG+0x158>
 8003358:	8bfb      	ldrh	r3, [r7, #30]
 800335a:	3301      	adds	r3, #1
 800335c:	83fb      	strh	r3, [r7, #30]
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	89db      	ldrh	r3, [r3, #14]
 8003362:	8bfa      	ldrh	r2, [r7, #30]
 8003364:	429a      	cmp	r2, r3
 8003366:	d3f7      	bcc.n	8003358 <parseDNSMSG+0x152>
	{
		;
	}

	/* Additional section */
	for (i = 0; i < pdhdr->arcount; i++)
 8003368:	2300      	movs	r3, #0
 800336a:	83fb      	strh	r3, [r7, #30]
 800336c:	e002      	b.n	8003374 <parseDNSMSG+0x16e>
 800336e:	8bfb      	ldrh	r3, [r7, #30]
 8003370:	3301      	adds	r3, #1
 8003372:	83fb      	strh	r3, [r7, #30]
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	8a1b      	ldrh	r3, [r3, #16]
 8003378:	8bfa      	ldrh	r2, [r7, #30]
 800337a:	429a      	cmp	r2, r3
 800337c:	d3f7      	bcc.n	800336e <parseDNSMSG+0x168>
	{
		;
	}

	if(pdhdr->rcode == 0) return 1;		// No error
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	7a1b      	ldrb	r3, [r3, #8]
 8003382:	2b00      	cmp	r3, #0
 8003384:	d101      	bne.n	800338a <parseDNSMSG+0x184>
 8003386:	2301      	movs	r3, #1
 8003388:	e000      	b.n	800338c <parseDNSMSG+0x186>
	else return 0;
 800338a:	2300      	movs	r3, #0
}
 800338c:	4618      	mov	r0, r3
 800338e:	3720      	adds	r7, #32
 8003390:	46bd      	mov	sp, r7
 8003392:	bd80      	pop	{r7, pc}

08003394 <dns_makequery>:
 *               buf  - is a pointer to the buffer for DNS message.
 *               len  - is the MAX. size of buffer.
 * Returns     : the pointer to the DNS message.
 */
int16_t dns_makequery(uint16_t op, char * name, uint8_t * buf, uint16_t len)
{
 8003394:	b580      	push	{r7, lr}
 8003396:	b0b8      	sub	sp, #224	@ 0xe0
 8003398:	af00      	add	r7, sp, #0
 800339a:	60b9      	str	r1, [r7, #8]
 800339c:	607a      	str	r2, [r7, #4]
 800339e:	461a      	mov	r2, r3
 80033a0:	4603      	mov	r3, r0
 80033a2:	81fb      	strh	r3, [r7, #14]
 80033a4:	4613      	mov	r3, r2
 80033a6:	81bb      	strh	r3, [r7, #12]
	char sname[MAXCNAME];
	char *dname;
	uint16_t p;
	uint16_t dlen;

	cp = buf;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

	DNS_MSGID++;
 80033ae:	4b57      	ldr	r3, [pc, #348]	@ (800350c <dns_makequery+0x178>)
 80033b0:	881b      	ldrh	r3, [r3, #0]
 80033b2:	3301      	adds	r3, #1
 80033b4:	b29a      	uxth	r2, r3
 80033b6:	4b55      	ldr	r3, [pc, #340]	@ (800350c <dns_makequery+0x178>)
 80033b8:	801a      	strh	r2, [r3, #0]
	cp = put16(cp, DNS_MSGID);
 80033ba:	4b54      	ldr	r3, [pc, #336]	@ (800350c <dns_makequery+0x178>)
 80033bc:	881b      	ldrh	r3, [r3, #0]
 80033be:	4619      	mov	r1, r3
 80033c0:	f8d7 00dc 	ldr.w	r0, [r7, #220]	@ 0xdc
 80033c4:	f7ff fd44 	bl	8002e50 <put16>
 80033c8:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc
	p = (op << 11) | 0x0100;			/* Recursion desired */
 80033cc:	89fb      	ldrh	r3, [r7, #14]
 80033ce:	02db      	lsls	r3, r3, #11
 80033d0:	b21b      	sxth	r3, r3
 80033d2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80033d6:	b21b      	sxth	r3, r3
 80033d8:	f8a7 30d4 	strh.w	r3, [r7, #212]	@ 0xd4
	cp = put16(cp, p);
 80033dc:	f8b7 30d4 	ldrh.w	r3, [r7, #212]	@ 0xd4
 80033e0:	4619      	mov	r1, r3
 80033e2:	f8d7 00dc 	ldr.w	r0, [r7, #220]	@ 0xdc
 80033e6:	f7ff fd33 	bl	8002e50 <put16>
 80033ea:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc
	cp = put16(cp, 1);
 80033ee:	2101      	movs	r1, #1
 80033f0:	f8d7 00dc 	ldr.w	r0, [r7, #220]	@ 0xdc
 80033f4:	f7ff fd2c 	bl	8002e50 <put16>
 80033f8:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc
	cp = put16(cp, 0);
 80033fc:	2100      	movs	r1, #0
 80033fe:	f8d7 00dc 	ldr.w	r0, [r7, #220]	@ 0xdc
 8003402:	f7ff fd25 	bl	8002e50 <put16>
 8003406:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc
	cp = put16(cp, 0);
 800340a:	2100      	movs	r1, #0
 800340c:	f8d7 00dc 	ldr.w	r0, [r7, #220]	@ 0xdc
 8003410:	f7ff fd1e 	bl	8002e50 <put16>
 8003414:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc
	cp = put16(cp, 0);
 8003418:	2100      	movs	r1, #0
 800341a:	f8d7 00dc 	ldr.w	r0, [r7, #220]	@ 0xdc
 800341e:	f7ff fd17 	bl	8002e50 <put16>
 8003422:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc

	strcpy(sname, name);
 8003426:	f107 0310 	add.w	r3, r7, #16
 800342a:	68b9      	ldr	r1, [r7, #8]
 800342c:	4618      	mov	r0, r3
 800342e:	f009 f928 	bl	800c682 <strcpy>
	dname = sname;
 8003432:	f107 0310 	add.w	r3, r7, #16
 8003436:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
	dlen = strlen(dname);
 800343a:	f8d7 00d8 	ldr.w	r0, [r7, #216]	@ 0xd8
 800343e:	f7fc fed9 	bl	80001f4 <strlen>
 8003442:	4603      	mov	r3, r0
 8003444:	f8a7 30d6 	strh.w	r3, [r7, #214]	@ 0xd6
	for (;;)
	{
		/* Look for next dot */
		cp1 = strchr(dname, '.');
 8003448:	212e      	movs	r1, #46	@ 0x2e
 800344a:	f8d7 00d8 	ldr.w	r0, [r7, #216]	@ 0xd8
 800344e:	f009 f81d 	bl	800c48c <strchr>
 8003452:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0

		if (cp1 != NULL) len = cp1 - dname;	/* More to come */
 8003456:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800345a:	2b00      	cmp	r3, #0
 800345c:	d006      	beq.n	800346c <dns_makequery+0xd8>
 800345e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003462:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003466:	1ad3      	subs	r3, r2, r3
 8003468:	81bb      	strh	r3, [r7, #12]
 800346a:	e002      	b.n	8003472 <dns_makequery+0xde>
		else len = dlen;			/* Last component */
 800346c:	f8b7 30d6 	ldrh.w	r3, [r7, #214]	@ 0xd6
 8003470:	81bb      	strh	r3, [r7, #12]

		*cp++ = len;				/* Write length of component */
 8003472:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003476:	1c5a      	adds	r2, r3, #1
 8003478:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800347c:	89ba      	ldrh	r2, [r7, #12]
 800347e:	b2d2      	uxtb	r2, r2
 8003480:	701a      	strb	r2, [r3, #0]
		if (len == 0) break;
 8003482:	89bb      	ldrh	r3, [r7, #12]
 8003484:	2b00      	cmp	r3, #0
 8003486:	d029      	beq.n	80034dc <dns_makequery+0x148>

		/* Copy component up to (but not including) dot */
		strncpy((char *)cp, dname, len);
 8003488:	89bb      	ldrh	r3, [r7, #12]
 800348a:	461a      	mov	r2, r3
 800348c:	f8d7 10d8 	ldr.w	r1, [r7, #216]	@ 0xd8
 8003490:	f8d7 00dc 	ldr.w	r0, [r7, #220]	@ 0xdc
 8003494:	f009 f819 	bl	800c4ca <strncpy>
		cp += len;
 8003498:	89bb      	ldrh	r3, [r7, #12]
 800349a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800349e:	4413      	add	r3, r2
 80034a0:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
		if (cp1 == NULL)
 80034a4:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d107      	bne.n	80034bc <dns_makequery+0x128>
		{
			*cp++ = 0;			/* Last one; write null and finish */
 80034ac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80034b0:	1c5a      	adds	r2, r3, #1
 80034b2:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80034b6:	2200      	movs	r2, #0
 80034b8:	701a      	strb	r2, [r3, #0]
			break;
 80034ba:	e010      	b.n	80034de <dns_makequery+0x14a>
		}
		dname += len+1;
 80034bc:	89bb      	ldrh	r3, [r7, #12]
 80034be:	3301      	adds	r3, #1
 80034c0:	f8d7 20d8 	ldr.w	r2, [r7, #216]	@ 0xd8
 80034c4:	4413      	add	r3, r2
 80034c6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
		dlen -= len+1;
 80034ca:	f8b7 20d6 	ldrh.w	r2, [r7, #214]	@ 0xd6
 80034ce:	89bb      	ldrh	r3, [r7, #12]
 80034d0:	1ad3      	subs	r3, r2, r3
 80034d2:	b29b      	uxth	r3, r3
 80034d4:	3b01      	subs	r3, #1
 80034d6:	f8a7 30d6 	strh.w	r3, [r7, #214]	@ 0xd6
		cp1 = strchr(dname, '.');
 80034da:	e7b5      	b.n	8003448 <dns_makequery+0xb4>
		if (len == 0) break;
 80034dc:	bf00      	nop
	}

	cp = put16(cp, 0x0001);				/* type */
 80034de:	2101      	movs	r1, #1
 80034e0:	f8d7 00dc 	ldr.w	r0, [r7, #220]	@ 0xdc
 80034e4:	f7ff fcb4 	bl	8002e50 <put16>
 80034e8:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc
	cp = put16(cp, 0x0001);				/* class */
 80034ec:	2101      	movs	r1, #1
 80034ee:	f8d7 00dc 	ldr.w	r0, [r7, #220]	@ 0xdc
 80034f2:	f7ff fcad 	bl	8002e50 <put16>
 80034f6:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc

	return ((int16_t)((uint32_t)(cp) - (uint32_t)(buf)));
 80034fa:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	1ad3      	subs	r3, r2, r3
 8003502:	b21b      	sxth	r3, r3
}
 8003504:	4618      	mov	r0, r3
 8003506:	37e0      	adds	r7, #224	@ 0xe0
 8003508:	46bd      	mov	sp, r7
 800350a:	bd80      	pop	{r7, pc}
 800350c:	20000e02 	.word	0x20000e02

08003510 <check_DNS_timeout>:
 * Returns     : -1 - timeout occurred, 0 - timer over, but no timeout, 1 - no timer over, no timeout occur
 * Note        : timeout : retry count and timer both over.
 */

int8_t check_DNS_timeout(void)
{
 8003510:	b480      	push	{r7}
 8003512:	af00      	add	r7, sp, #0

	if(dns_1s_tick >= DNS_WAIT_TIME)
 8003514:	4b0f      	ldr	r3, [pc, #60]	@ (8003554 <check_DNS_timeout+0x44>)
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	2b02      	cmp	r3, #2
 800351a:	d914      	bls.n	8003546 <check_DNS_timeout+0x36>
	{
		dns_1s_tick = 0;
 800351c:	4b0d      	ldr	r3, [pc, #52]	@ (8003554 <check_DNS_timeout+0x44>)
 800351e:	2200      	movs	r2, #0
 8003520:	601a      	str	r2, [r3, #0]
		if(retry_count >= MAX_DNS_RETRY) {
 8003522:	4b0d      	ldr	r3, [pc, #52]	@ (8003558 <check_DNS_timeout+0x48>)
 8003524:	781b      	ldrb	r3, [r3, #0]
 8003526:	2b01      	cmp	r3, #1
 8003528:	d905      	bls.n	8003536 <check_DNS_timeout+0x26>
			retry_count = 0;
 800352a:	4b0b      	ldr	r3, [pc, #44]	@ (8003558 <check_DNS_timeout+0x48>)
 800352c:	2200      	movs	r2, #0
 800352e:	701a      	strb	r2, [r3, #0]
			return -1; // timeout occurred
 8003530:	f04f 33ff 	mov.w	r3, #4294967295
 8003534:	e008      	b.n	8003548 <check_DNS_timeout+0x38>
		}
		retry_count++;
 8003536:	4b08      	ldr	r3, [pc, #32]	@ (8003558 <check_DNS_timeout+0x48>)
 8003538:	781b      	ldrb	r3, [r3, #0]
 800353a:	3301      	adds	r3, #1
 800353c:	b2da      	uxtb	r2, r3
 800353e:	4b06      	ldr	r3, [pc, #24]	@ (8003558 <check_DNS_timeout+0x48>)
 8003540:	701a      	strb	r2, [r3, #0]
		return 0; // timer over, but no timeout
 8003542:	2300      	movs	r3, #0
 8003544:	e000      	b.n	8003548 <check_DNS_timeout+0x38>
	}

	return 1; // no timer over, no timeout occur
 8003546:	2301      	movs	r3, #1
}
 8003548:	4618      	mov	r0, r3
 800354a:	46bd      	mov	sp, r7
 800354c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003550:	4770      	bx	lr
 8003552:	bf00      	nop
 8003554:	20000e04 	.word	0x20000e04
 8003558:	20000e08 	.word	0x20000e08

0800355c <DNS_init>:



/* DNS CLIENT INIT */
void DNS_init(uint8_t s, uint8_t * buf)
{
 800355c:	b480      	push	{r7}
 800355e:	b083      	sub	sp, #12
 8003560:	af00      	add	r7, sp, #0
 8003562:	4603      	mov	r3, r0
 8003564:	6039      	str	r1, [r7, #0]
 8003566:	71fb      	strb	r3, [r7, #7]
	DNS_SOCKET = s; // SOCK_DNS
 8003568:	4a07      	ldr	r2, [pc, #28]	@ (8003588 <DNS_init+0x2c>)
 800356a:	79fb      	ldrb	r3, [r7, #7]
 800356c:	7013      	strb	r3, [r2, #0]
	pDNSMSG = buf; // User's shared buffer
 800356e:	4a07      	ldr	r2, [pc, #28]	@ (800358c <DNS_init+0x30>)
 8003570:	683b      	ldr	r3, [r7, #0]
 8003572:	6013      	str	r3, [r2, #0]
	DNS_MSGID = DNS_MSG_ID;
 8003574:	4b06      	ldr	r3, [pc, #24]	@ (8003590 <DNS_init+0x34>)
 8003576:	f241 1222 	movw	r2, #4386	@ 0x1122
 800357a:	801a      	strh	r2, [r3, #0]
}
 800357c:	bf00      	nop
 800357e:	370c      	adds	r7, #12
 8003580:	46bd      	mov	sp, r7
 8003582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003586:	4770      	bx	lr
 8003588:	20000e00 	.word	0x20000e00
 800358c:	20000dfc 	.word	0x20000dfc
 8003590:	20000e02 	.word	0x20000e02

08003594 <DNS_run>:

/* DNS CLIENT RUN */
int8_t DNS_run(uint8_t * dns_ip, uint8_t * name, uint8_t * ip_from_dns)
{
 8003594:	b5b0      	push	{r4, r5, r7, lr}
 8003596:	b090      	sub	sp, #64	@ 0x40
 8003598:	af04      	add	r7, sp, #16
 800359a:	60f8      	str	r0, [r7, #12]
 800359c:	60b9      	str	r1, [r7, #8]
 800359e:	607a      	str	r2, [r7, #4]
	struct dhdr dhp;
	uint8_t ip[4];
	uint16_t len, port;
	int8_t ret_check_timeout;

	retry_count = 0;
 80035a0:	4b5a      	ldr	r3, [pc, #360]	@ (800370c <DNS_run+0x178>)
 80035a2:	2200      	movs	r2, #0
 80035a4:	701a      	strb	r2, [r3, #0]
	dns_1s_tick = 0;
 80035a6:	4b5a      	ldr	r3, [pc, #360]	@ (8003710 <DNS_run+0x17c>)
 80035a8:	2200      	movs	r2, #0
 80035aa:	601a      	str	r2, [r3, #0]

   // Socket open
   socket(DNS_SOCKET, Sn_MR_UDP, 0, 0);
 80035ac:	4b59      	ldr	r3, [pc, #356]	@ (8003714 <DNS_run+0x180>)
 80035ae:	7818      	ldrb	r0, [r3, #0]
 80035b0:	2300      	movs	r3, #0
 80035b2:	2200      	movs	r2, #0
 80035b4:	2102      	movs	r1, #2
 80035b6:	f002 f8ab 	bl	8005710 <socket>

#ifdef _DNS_DEBUG_
	printf("> DNS Query to DNS Server : %d.%d.%d.%d\r\n", dns_ip[0], dns_ip[1], dns_ip[2], dns_ip[3]);
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	781b      	ldrb	r3, [r3, #0]
 80035be:	4619      	mov	r1, r3
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	3301      	adds	r3, #1
 80035c4:	781b      	ldrb	r3, [r3, #0]
 80035c6:	461a      	mov	r2, r3
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	3302      	adds	r3, #2
 80035cc:	781b      	ldrb	r3, [r3, #0]
 80035ce:	4618      	mov	r0, r3
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	3303      	adds	r3, #3
 80035d4:	781b      	ldrb	r3, [r3, #0]
 80035d6:	9300      	str	r3, [sp, #0]
 80035d8:	4603      	mov	r3, r0
 80035da:	484f      	ldr	r0, [pc, #316]	@ (8003718 <DNS_run+0x184>)
 80035dc:	f008 fe06 	bl	800c1ec <iprintf>
#endif

	len = dns_makequery(0, (char *)name, pDNSMSG, MAX_DNS_BUF_SIZE);
 80035e0:	4b4e      	ldr	r3, [pc, #312]	@ (800371c <DNS_run+0x188>)
 80035e2:	681a      	ldr	r2, [r3, #0]
 80035e4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80035e8:	68b9      	ldr	r1, [r7, #8]
 80035ea:	2000      	movs	r0, #0
 80035ec:	f7ff fed2 	bl	8003394 <dns_makequery>
 80035f0:	4603      	mov	r3, r0
 80035f2:	85fb      	strh	r3, [r7, #46]	@ 0x2e
	sendto(DNS_SOCKET, pDNSMSG, len, dns_ip, IPPORT_DOMAIN);
 80035f4:	4b47      	ldr	r3, [pc, #284]	@ (8003714 <DNS_run+0x180>)
 80035f6:	7818      	ldrb	r0, [r3, #0]
 80035f8:	4b48      	ldr	r3, [pc, #288]	@ (800371c <DNS_run+0x188>)
 80035fa:	6819      	ldr	r1, [r3, #0]
 80035fc:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 80035fe:	2335      	movs	r3, #53	@ 0x35
 8003600:	9300      	str	r3, [sp, #0]
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	f002 fd04 	bl	8006010 <sendto>

	while (1)
	{
		if ((len = getSn_RX_RSR(DNS_SOCKET)) > 0)
 8003608:	4b42      	ldr	r3, [pc, #264]	@ (8003714 <DNS_run+0x180>)
 800360a:	781b      	ldrb	r3, [r3, #0]
 800360c:	4618      	mov	r0, r3
 800360e:	f001 ff3c 	bl	800548a <getSn_RX_RSR>
 8003612:	4603      	mov	r3, r0
 8003614:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8003616:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8003618:	2b00      	cmp	r3, #0
 800361a:	d03d      	beq.n	8003698 <DNS_run+0x104>
		{
			if (len > MAX_DNS_BUF_SIZE) len = MAX_DNS_BUF_SIZE;
 800361c:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800361e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003622:	d902      	bls.n	800362a <DNS_run+0x96>
 8003624:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003628:	85fb      	strh	r3, [r7, #46]	@ 0x2e
			len = recvfrom(DNS_SOCKET, pDNSMSG, len, ip, &port);
 800362a:	4b3a      	ldr	r3, [pc, #232]	@ (8003714 <DNS_run+0x180>)
 800362c:	7818      	ldrb	r0, [r3, #0]
 800362e:	4b3b      	ldr	r3, [pc, #236]	@ (800371c <DNS_run+0x188>)
 8003630:	6819      	ldr	r1, [r3, #0]
 8003632:	f107 0414 	add.w	r4, r7, #20
 8003636:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8003638:	f107 0312 	add.w	r3, r7, #18
 800363c:	9300      	str	r3, [sp, #0]
 800363e:	4623      	mov	r3, r4
 8003640:	f002 fe1a 	bl	8006278 <recvfrom>
 8003644:	4603      	mov	r3, r0
 8003646:	85fb      	strh	r3, [r7, #46]	@ 0x2e
      #ifdef _DNS_DEBUG_
	      printf("> Receive DNS message from %d.%d.%d.%d(%d). len = %d\r\n", ip[0], ip[1], ip[2], ip[3],port,len);
 8003648:	7d3b      	ldrb	r3, [r7, #20]
 800364a:	4618      	mov	r0, r3
 800364c:	7d7b      	ldrb	r3, [r7, #21]
 800364e:	461c      	mov	r4, r3
 8003650:	7dbb      	ldrb	r3, [r7, #22]
 8003652:	461d      	mov	r5, r3
 8003654:	7dfb      	ldrb	r3, [r7, #23]
 8003656:	461a      	mov	r2, r3
 8003658:	8a7b      	ldrh	r3, [r7, #18]
 800365a:	4619      	mov	r1, r3
 800365c:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800365e:	9302      	str	r3, [sp, #8]
 8003660:	9101      	str	r1, [sp, #4]
 8003662:	9200      	str	r2, [sp, #0]
 8003664:	462b      	mov	r3, r5
 8003666:	4622      	mov	r2, r4
 8003668:	4601      	mov	r1, r0
 800366a:	482d      	ldr	r0, [pc, #180]	@ (8003720 <DNS_run+0x18c>)
 800366c:	f008 fdbe 	bl	800c1ec <iprintf>
      #endif
         ret = parseDNSMSG(&dhp, pDNSMSG, ip_from_dns);
 8003670:	4b2a      	ldr	r3, [pc, #168]	@ (800371c <DNS_run+0x188>)
 8003672:	6819      	ldr	r1, [r3, #0]
 8003674:	f107 0318 	add.w	r3, r7, #24
 8003678:	687a      	ldr	r2, [r7, #4]
 800367a:	4618      	mov	r0, r3
 800367c:	f7ff fdc3 	bl	8003206 <parseDNSMSG>
 8003680:	4603      	mov	r3, r0
 8003682:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
			break;
 8003686:	bf00      	nop
			printf("> DNS Timeout\r\n");
#endif
			sendto(DNS_SOCKET, pDNSMSG, len, dns_ip, IPPORT_DOMAIN);
		}
	}
	close(DNS_SOCKET);
 8003688:	4b22      	ldr	r3, [pc, #136]	@ (8003714 <DNS_run+0x180>)
 800368a:	781b      	ldrb	r3, [r3, #0]
 800368c:	4618      	mov	r0, r3
 800368e:	f002 f953 	bl	8005938 <close>
	// Return value
	// 0 > :  failed / 1 - success
	return ret;
 8003692:	f997 302c 	ldrsb.w	r3, [r7, #44]	@ 0x2c
 8003696:	e034      	b.n	8003702 <DNS_run+0x16e>
		ret_check_timeout = check_DNS_timeout();
 8003698:	f7ff ff3a 	bl	8003510 <check_DNS_timeout>
 800369c:	4603      	mov	r3, r0
 800369e:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
		if (ret_check_timeout < 0) {
 80036a2:	f997 302d 	ldrsb.w	r3, [r7, #45]	@ 0x2d
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	da19      	bge.n	80036de <DNS_run+0x14a>
			printf("> DNS Server is not responding : %d.%d.%d.%d\r\n", dns_ip[0], dns_ip[1], dns_ip[2], dns_ip[3]);
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	781b      	ldrb	r3, [r3, #0]
 80036ae:	4619      	mov	r1, r3
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	3301      	adds	r3, #1
 80036b4:	781b      	ldrb	r3, [r3, #0]
 80036b6:	461a      	mov	r2, r3
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	3302      	adds	r3, #2
 80036bc:	781b      	ldrb	r3, [r3, #0]
 80036be:	4618      	mov	r0, r3
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	3303      	adds	r3, #3
 80036c4:	781b      	ldrb	r3, [r3, #0]
 80036c6:	9300      	str	r3, [sp, #0]
 80036c8:	4603      	mov	r3, r0
 80036ca:	4816      	ldr	r0, [pc, #88]	@ (8003724 <DNS_run+0x190>)
 80036cc:	f008 fd8e 	bl	800c1ec <iprintf>
			close(DNS_SOCKET);
 80036d0:	4b10      	ldr	r3, [pc, #64]	@ (8003714 <DNS_run+0x180>)
 80036d2:	781b      	ldrb	r3, [r3, #0]
 80036d4:	4618      	mov	r0, r3
 80036d6:	f002 f92f 	bl	8005938 <close>
			return 0; // timeout occurred
 80036da:	2300      	movs	r3, #0
 80036dc:	e011      	b.n	8003702 <DNS_run+0x16e>
		else if (ret_check_timeout == 0) {
 80036de:	f997 302d 	ldrsb.w	r3, [r7, #45]	@ 0x2d
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d190      	bne.n	8003608 <DNS_run+0x74>
			printf("> DNS Timeout\r\n");
 80036e6:	4810      	ldr	r0, [pc, #64]	@ (8003728 <DNS_run+0x194>)
 80036e8:	f008 fde8 	bl	800c2bc <puts>
			sendto(DNS_SOCKET, pDNSMSG, len, dns_ip, IPPORT_DOMAIN);
 80036ec:	4b09      	ldr	r3, [pc, #36]	@ (8003714 <DNS_run+0x180>)
 80036ee:	7818      	ldrb	r0, [r3, #0]
 80036f0:	4b0a      	ldr	r3, [pc, #40]	@ (800371c <DNS_run+0x188>)
 80036f2:	6819      	ldr	r1, [r3, #0]
 80036f4:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 80036f6:	2335      	movs	r3, #53	@ 0x35
 80036f8:	9300      	str	r3, [sp, #0]
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	f002 fc88 	bl	8006010 <sendto>
		if ((len = getSn_RX_RSR(DNS_SOCKET)) > 0)
 8003700:	e782      	b.n	8003608 <DNS_run+0x74>
}
 8003702:	4618      	mov	r0, r3
 8003704:	3730      	adds	r7, #48	@ 0x30
 8003706:	46bd      	mov	sp, r7
 8003708:	bdb0      	pop	{r4, r5, r7, pc}
 800370a:	bf00      	nop
 800370c:	20000e08 	.word	0x20000e08
 8003710:	20000e04 	.word	0x20000e04
 8003714:	20000e00 	.word	0x20000e00
 8003718:	0800d7e4 	.word	0x0800d7e4
 800371c:	20000dfc 	.word	0x20000dfc
 8003720:	0800d810 	.word	0x0800d810
 8003724:	0800d848 	.word	0x0800d848
 8003728:	0800d878 	.word	0x0800d878

0800372c <DNS_time_handler>:


/* DNS TIMER HANDLER */
void DNS_time_handler(void)
{
 800372c:	b480      	push	{r7}
 800372e:	af00      	add	r7, sp, #0
	dns_1s_tick++;
 8003730:	4b04      	ldr	r3, [pc, #16]	@ (8003744 <DNS_time_handler+0x18>)
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	3301      	adds	r3, #1
 8003736:	4a03      	ldr	r2, [pc, #12]	@ (8003744 <DNS_time_handler+0x18>)
 8003738:	6013      	str	r3, [r2, #0]
}
 800373a:	bf00      	nop
 800373c:	46bd      	mov	sp, r7
 800373e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003742:	4770      	bx	lr
 8003744:	20000e04 	.word	0x20000e04

08003748 <NewMessageData>:
#include "MQTTClient.h"

#include <stdio.h>
#include <string.h>

static void NewMessageData(MessageData* md, MQTTString* aTopicName, MQTTMessage* aMessage) {
 8003748:	b480      	push	{r7}
 800374a:	b085      	sub	sp, #20
 800374c:	af00      	add	r7, sp, #0
 800374e:	60f8      	str	r0, [r7, #12]
 8003750:	60b9      	str	r1, [r7, #8]
 8003752:	607a      	str	r2, [r7, #4]
    md->topicName = aTopicName;
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	68ba      	ldr	r2, [r7, #8]
 8003758:	605a      	str	r2, [r3, #4]
    md->message = aMessage;
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	687a      	ldr	r2, [r7, #4]
 800375e:	601a      	str	r2, [r3, #0]
}
 8003760:	bf00      	nop
 8003762:	3714      	adds	r7, #20
 8003764:	46bd      	mov	sp, r7
 8003766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376a:	4770      	bx	lr

0800376c <getNextPacketId>:


static int getNextPacketId(MQTTClient *c) {
 800376c:	b480      	push	{r7}
 800376e:	b083      	sub	sp, #12
 8003770:	af00      	add	r7, sp, #0
 8003772:	6078      	str	r0, [r7, #4]
    return c->next_packetid = (c->next_packetid == MAX_PACKET_ID) ? 1 : c->next_packetid + 1;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800377c:	4293      	cmp	r3, r2
 800377e:	d003      	beq.n	8003788 <getNextPacketId+0x1c>
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	3301      	adds	r3, #1
 8003786:	e000      	b.n	800378a <getNextPacketId+0x1e>
 8003788:	2301      	movs	r3, #1
 800378a:	687a      	ldr	r2, [r7, #4]
 800378c:	6013      	str	r3, [r2, #0]
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
}
 8003792:	4618      	mov	r0, r3
 8003794:	370c      	adds	r7, #12
 8003796:	46bd      	mov	sp, r7
 8003798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379c:	4770      	bx	lr

0800379e <sendPacket>:


static int sendPacket(MQTTClient* c, int length, Timer* timer)
{
 800379e:	b5f0      	push	{r4, r5, r6, r7, lr}
 80037a0:	b087      	sub	sp, #28
 80037a2:	af00      	add	r7, sp, #0
 80037a4:	60f8      	str	r0, [r7, #12]
 80037a6:	60b9      	str	r1, [r7, #8]
 80037a8:	607a      	str	r2, [r7, #4]
    int rc = FAILURE,
 80037aa:	f04f 33ff 	mov.w	r3, #4294967295
 80037ae:	617b      	str	r3, [r7, #20]
        sent = 0;
 80037b0:	2300      	movs	r3, #0
 80037b2:	613b      	str	r3, [r7, #16]

    while (sent < length && !TimerIsExpired(timer))
 80037b4:	e018      	b.n	80037e8 <sendPacket+0x4a>
    {
        rc = c->ipstack->mqttwrite(c->ipstack, &c->buf[sent], length, TimerLeftMS(timer));
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80037ba:	689c      	ldr	r4, [r3, #8]
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	6d5d      	ldr	r5, [r3, #84]	@ 0x54
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	691a      	ldr	r2, [r3, #16]
 80037c4:	693b      	ldr	r3, [r7, #16]
 80037c6:	18d6      	adds	r6, r2, r3
 80037c8:	6878      	ldr	r0, [r7, #4]
 80037ca:	f000 fdf1 	bl	80043b0 <TimerLeftMS>
 80037ce:	4603      	mov	r3, r0
 80037d0:	68ba      	ldr	r2, [r7, #8]
 80037d2:	4631      	mov	r1, r6
 80037d4:	4628      	mov	r0, r5
 80037d6:	47a0      	blx	r4
 80037d8:	6178      	str	r0, [r7, #20]
        if (rc < 0)  // there was an error writing the data
 80037da:	697b      	ldr	r3, [r7, #20]
 80037dc:	2b00      	cmp	r3, #0
 80037de:	db0e      	blt.n	80037fe <sendPacket+0x60>
            break;
        sent += rc;
 80037e0:	693a      	ldr	r2, [r7, #16]
 80037e2:	697b      	ldr	r3, [r7, #20]
 80037e4:	4413      	add	r3, r2
 80037e6:	613b      	str	r3, [r7, #16]
    while (sent < length && !TimerIsExpired(timer))
 80037e8:	693a      	ldr	r2, [r7, #16]
 80037ea:	68bb      	ldr	r3, [r7, #8]
 80037ec:	429a      	cmp	r2, r3
 80037ee:	da07      	bge.n	8003800 <sendPacket+0x62>
 80037f0:	6878      	ldr	r0, [r7, #4]
 80037f2:	f000 fd9b 	bl	800432c <TimerIsExpired>
 80037f6:	4603      	mov	r3, r0
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d0dc      	beq.n	80037b6 <sendPacket+0x18>
 80037fc:	e000      	b.n	8003800 <sendPacket+0x62>
            break;
 80037fe:	bf00      	nop
    }
    if (sent == length)
 8003800:	693a      	ldr	r2, [r7, #16]
 8003802:	68bb      	ldr	r3, [r7, #8]
 8003804:	429a      	cmp	r2, r3
 8003806:	d10b      	bne.n	8003820 <sendPacket+0x82>
    {
        TimerCountdown(&c->last_sent, c->keepAliveInterval); // record the fact that we have successfully sent the packet
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	f103 0258 	add.w	r2, r3, #88	@ 0x58
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	699b      	ldr	r3, [r3, #24]
 8003812:	4619      	mov	r1, r3
 8003814:	4610      	mov	r0, r2
 8003816:	f000 fdb3 	bl	8004380 <TimerCountdown>
        rc = MQTT_SUCCESS;
 800381a:	2300      	movs	r3, #0
 800381c:	617b      	str	r3, [r7, #20]
 800381e:	e002      	b.n	8003826 <sendPacket+0x88>
    }
    else
        rc = FAILURE;
 8003820:	f04f 33ff 	mov.w	r3, #4294967295
 8003824:	617b      	str	r3, [r7, #20]
    return rc;
 8003826:	697b      	ldr	r3, [r7, #20]
}
 8003828:	4618      	mov	r0, r3
 800382a:	371c      	adds	r7, #28
 800382c:	46bd      	mov	sp, r7
 800382e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003830 <MQTTClientInit>:


void MQTTClientInit(MQTTClient* c, Network* network, unsigned int command_timeout_ms,
		unsigned char* sendbuf, size_t sendbuf_size, unsigned char* readbuf, size_t readbuf_size)
{
 8003830:	b580      	push	{r7, lr}
 8003832:	b086      	sub	sp, #24
 8003834:	af00      	add	r7, sp, #0
 8003836:	60f8      	str	r0, [r7, #12]
 8003838:	60b9      	str	r1, [r7, #8]
 800383a:	607a      	str	r2, [r7, #4]
 800383c:	603b      	str	r3, [r7, #0]
    int i;
    c->ipstack = network;
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	68ba      	ldr	r2, [r7, #8]
 8003842:	655a      	str	r2, [r3, #84]	@ 0x54

    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
 8003844:	2300      	movs	r3, #0
 8003846:	617b      	str	r3, [r7, #20]
 8003848:	e008      	b.n	800385c <MQTTClientInit+0x2c>
        c->messageHandlers[i].topicFilter = 0;
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	697a      	ldr	r2, [r7, #20]
 800384e:	3205      	adds	r2, #5
 8003850:	2100      	movs	r1, #0
 8003852:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
 8003856:	697b      	ldr	r3, [r7, #20]
 8003858:	3301      	adds	r3, #1
 800385a:	617b      	str	r3, [r7, #20]
 800385c:	697b      	ldr	r3, [r7, #20]
 800385e:	2b04      	cmp	r3, #4
 8003860:	ddf3      	ble.n	800384a <MQTTClientInit+0x1a>
    c->command_timeout_ms = command_timeout_ms;
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	687a      	ldr	r2, [r7, #4]
 8003866:	605a      	str	r2, [r3, #4]
    c->buf = sendbuf;
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	683a      	ldr	r2, [r7, #0]
 800386c:	611a      	str	r2, [r3, #16]
    c->buf_size = sendbuf_size;
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	6a3a      	ldr	r2, [r7, #32]
 8003872:	609a      	str	r2, [r3, #8]
    c->readbuf = readbuf;
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003878:	615a      	str	r2, [r3, #20]
    c->readbuf_size = readbuf_size;
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800387e:	60da      	str	r2, [r3, #12]
    c->isconnected = 0;
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	2200      	movs	r2, #0
 8003884:	621a      	str	r2, [r3, #32]
    c->cleansession = 0;
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	2200      	movs	r2, #0
 800388a:	625a      	str	r2, [r3, #36]	@ 0x24
    c->ping_outstanding = 0;
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	2200      	movs	r2, #0
 8003890:	771a      	strb	r2, [r3, #28]
    c->defaultMessageHandler = NULL;
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	2200      	movs	r2, #0
 8003896:	651a      	str	r2, [r3, #80]	@ 0x50
	  c->next_packetid = 1;
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	2201      	movs	r2, #1
 800389c:	601a      	str	r2, [r3, #0]
    TimerInit(&c->last_sent);
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	3358      	adds	r3, #88	@ 0x58
 80038a2:	4618      	mov	r0, r3
 80038a4:	f000 fd34 	bl	8004310 <TimerInit>
    TimerInit(&c->last_received);
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	3360      	adds	r3, #96	@ 0x60
 80038ac:	4618      	mov	r0, r3
 80038ae:	f000 fd2f 	bl	8004310 <TimerInit>
#if defined(MQTT_TASK)
	  MutexInit(&c->mutex);
#endif
}
 80038b2:	bf00      	nop
 80038b4:	3718      	adds	r7, #24
 80038b6:	46bd      	mov	sp, r7
 80038b8:	bd80      	pop	{r7, pc}

080038ba <decodePacket>:


static int decodePacket(MQTTClient* c, int* value, int timeout)
{
 80038ba:	b590      	push	{r4, r7, lr}
 80038bc:	b08b      	sub	sp, #44	@ 0x2c
 80038be:	af00      	add	r7, sp, #0
 80038c0:	60f8      	str	r0, [r7, #12]
 80038c2:	60b9      	str	r1, [r7, #8]
 80038c4:	607a      	str	r2, [r7, #4]
    unsigned char i;
    int multiplier = 1;
 80038c6:	2301      	movs	r3, #1
 80038c8:	627b      	str	r3, [r7, #36]	@ 0x24
    int len = 0;
 80038ca:	2300      	movs	r3, #0
 80038cc:	623b      	str	r3, [r7, #32]
    const int MAX_NO_OF_REMAINING_LENGTH_BYTES = 4;
 80038ce:	2304      	movs	r3, #4
 80038d0:	61fb      	str	r3, [r7, #28]

    *value = 0;
 80038d2:	68bb      	ldr	r3, [r7, #8]
 80038d4:	2200      	movs	r2, #0
 80038d6:	601a      	str	r2, [r3, #0]
    do
    {
        int rc = MQTTPACKET_READ_ERROR;
 80038d8:	f04f 33ff 	mov.w	r3, #4294967295
 80038dc:	61bb      	str	r3, [r7, #24]

        if (++len > MAX_NO_OF_REMAINING_LENGTH_BYTES)
 80038de:	6a3b      	ldr	r3, [r7, #32]
 80038e0:	3301      	adds	r3, #1
 80038e2:	623b      	str	r3, [r7, #32]
 80038e4:	6a3a      	ldr	r2, [r7, #32]
 80038e6:	69fb      	ldr	r3, [r7, #28]
 80038e8:	429a      	cmp	r2, r3
 80038ea:	dd03      	ble.n	80038f4 <decodePacket+0x3a>
        {
            rc = MQTTPACKET_READ_ERROR; /* bad data */
 80038ec:	f04f 33ff 	mov.w	r3, #4294967295
 80038f0:	61bb      	str	r3, [r7, #24]
            goto exit;
 80038f2:	e021      	b.n	8003938 <decodePacket+0x7e>
        }
        rc = c->ipstack->mqttread(c->ipstack, &i, 1, timeout);
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80038f8:	685c      	ldr	r4, [r3, #4]
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 80038fe:	f107 0117 	add.w	r1, r7, #23
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	2201      	movs	r2, #1
 8003906:	47a0      	blx	r4
 8003908:	61b8      	str	r0, [r7, #24]
        if (rc != 1)
 800390a:	69bb      	ldr	r3, [r7, #24]
 800390c:	2b01      	cmp	r3, #1
 800390e:	d112      	bne.n	8003936 <decodePacket+0x7c>
            goto exit;
        *value += (i & 127) * multiplier;
 8003910:	68bb      	ldr	r3, [r7, #8]
 8003912:	681a      	ldr	r2, [r3, #0]
 8003914:	7dfb      	ldrb	r3, [r7, #23]
 8003916:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800391a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800391c:	fb01 f303 	mul.w	r3, r1, r3
 8003920:	441a      	add	r2, r3
 8003922:	68bb      	ldr	r3, [r7, #8]
 8003924:	601a      	str	r2, [r3, #0]
        multiplier *= 128;
 8003926:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003928:	01db      	lsls	r3, r3, #7
 800392a:	627b      	str	r3, [r7, #36]	@ 0x24
    } while ((i & 128) != 0);
 800392c:	7dfb      	ldrb	r3, [r7, #23]
 800392e:	b25b      	sxtb	r3, r3
 8003930:	2b00      	cmp	r3, #0
 8003932:	dbd1      	blt.n	80038d8 <decodePacket+0x1e>
exit:
 8003934:	e000      	b.n	8003938 <decodePacket+0x7e>
            goto exit;
 8003936:	bf00      	nop
    return len;
 8003938:	6a3b      	ldr	r3, [r7, #32]
}
 800393a:	4618      	mov	r0, r3
 800393c:	372c      	adds	r7, #44	@ 0x2c
 800393e:	46bd      	mov	sp, r7
 8003940:	bd90      	pop	{r4, r7, pc}

08003942 <readPacket>:


static int readPacket(MQTTClient* c, Timer* timer)
{
 8003942:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003944:	b089      	sub	sp, #36	@ 0x24
 8003946:	af00      	add	r7, sp, #0
 8003948:	60f8      	str	r0, [r7, #12]
 800394a:	60b9      	str	r1, [r7, #8]
    MQTTHeader header = {0};
 800394c:	2300      	movs	r3, #0
 800394e:	617b      	str	r3, [r7, #20]
    int len = 0;
 8003950:	2300      	movs	r3, #0
 8003952:	61bb      	str	r3, [r7, #24]
    int rem_len = 0;
 8003954:	2300      	movs	r3, #0
 8003956:	613b      	str	r3, [r7, #16]

    /* 1. read the header byte.  This has the packet type in it */
    int rc = c->ipstack->mqttread(c->ipstack, c->readbuf, 1, TimerLeftMS(timer));
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800395c:	685c      	ldr	r4, [r3, #4]
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	6d5d      	ldr	r5, [r3, #84]	@ 0x54
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	695e      	ldr	r6, [r3, #20]
 8003966:	68b8      	ldr	r0, [r7, #8]
 8003968:	f000 fd22 	bl	80043b0 <TimerLeftMS>
 800396c:	4603      	mov	r3, r0
 800396e:	2201      	movs	r2, #1
 8003970:	4631      	mov	r1, r6
 8003972:	4628      	mov	r0, r5
 8003974:	47a0      	blx	r4
 8003976:	61f8      	str	r0, [r7, #28]
    if (rc != 1)
 8003978:	69fb      	ldr	r3, [r7, #28]
 800397a:	2b01      	cmp	r3, #1
 800397c:	d15d      	bne.n	8003a3a <readPacket+0xf8>
        goto exit;

    len = 1;
 800397e:	2301      	movs	r3, #1
 8003980:	61bb      	str	r3, [r7, #24]
    /* 2. read the remaining length.  This is variable in itself */
    decodePacket(c, &rem_len, TimerLeftMS(timer));
 8003982:	68b8      	ldr	r0, [r7, #8]
 8003984:	f000 fd14 	bl	80043b0 <TimerLeftMS>
 8003988:	4602      	mov	r2, r0
 800398a:	f107 0310 	add.w	r3, r7, #16
 800398e:	4619      	mov	r1, r3
 8003990:	68f8      	ldr	r0, [r7, #12]
 8003992:	f7ff ff92 	bl	80038ba <decodePacket>
    len += MQTTPacket_encode(c->readbuf + 1, rem_len); /* put the original remaining length back into the buffer */
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	695b      	ldr	r3, [r3, #20]
 800399a:	3301      	adds	r3, #1
 800399c:	693a      	ldr	r2, [r7, #16]
 800399e:	4611      	mov	r1, r2
 80039a0:	4618      	mov	r0, r3
 80039a2:	f001 f86a 	bl	8004a7a <MQTTPacket_encode>
 80039a6:	4602      	mov	r2, r0
 80039a8:	69bb      	ldr	r3, [r7, #24]
 80039aa:	4413      	add	r3, r2
 80039ac:	61bb      	str	r3, [r7, #24]

    if (rem_len > (c->readbuf_size - len))
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	68da      	ldr	r2, [r3, #12]
 80039b2:	69bb      	ldr	r3, [r7, #24]
 80039b4:	1ad3      	subs	r3, r2, r3
 80039b6:	693a      	ldr	r2, [r7, #16]
 80039b8:	4293      	cmp	r3, r2
 80039ba:	d203      	bcs.n	80039c4 <readPacket+0x82>
    {
        rc = BUFFER_OVERFLOW;
 80039bc:	f06f 0301 	mvn.w	r3, #1
 80039c0:	61fb      	str	r3, [r7, #28]
        goto exit;
 80039c2:	e03d      	b.n	8003a40 <readPacket+0xfe>
    }

    /* 3. read the rest of the buffer using a callback to supply the rest of the data */
    if (rem_len > 0 && (rc = c->ipstack->mqttread(c->ipstack, c->readbuf + len, rem_len, TimerLeftMS(timer)) != rem_len)) {
 80039c4:	693b      	ldr	r3, [r7, #16]
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	dd20      	ble.n	8003a0c <readPacket+0xca>
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80039ce:	685c      	ldr	r4, [r3, #4]
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	6d5d      	ldr	r5, [r3, #84]	@ 0x54
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	695a      	ldr	r2, [r3, #20]
 80039d8:	69bb      	ldr	r3, [r7, #24]
 80039da:	18d6      	adds	r6, r2, r3
 80039dc:	693b      	ldr	r3, [r7, #16]
 80039de:	607b      	str	r3, [r7, #4]
 80039e0:	68b8      	ldr	r0, [r7, #8]
 80039e2:	f000 fce5 	bl	80043b0 <TimerLeftMS>
 80039e6:	4603      	mov	r3, r0
 80039e8:	687a      	ldr	r2, [r7, #4]
 80039ea:	4631      	mov	r1, r6
 80039ec:	4628      	mov	r0, r5
 80039ee:	47a0      	blx	r4
 80039f0:	4602      	mov	r2, r0
 80039f2:	693b      	ldr	r3, [r7, #16]
 80039f4:	429a      	cmp	r2, r3
 80039f6:	bf14      	ite	ne
 80039f8:	2301      	movne	r3, #1
 80039fa:	2300      	moveq	r3, #0
 80039fc:	b2db      	uxtb	r3, r3
 80039fe:	61fb      	str	r3, [r7, #28]
 8003a00:	69fb      	ldr	r3, [r7, #28]
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d002      	beq.n	8003a0c <readPacket+0xca>
        rc = 0;
 8003a06:	2300      	movs	r3, #0
 8003a08:	61fb      	str	r3, [r7, #28]
        goto exit;
 8003a0a:	e019      	b.n	8003a40 <readPacket+0xfe>
    }

    header.byte = c->readbuf[0];
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	695b      	ldr	r3, [r3, #20]
 8003a10:	781b      	ldrb	r3, [r3, #0]
 8003a12:	753b      	strb	r3, [r7, #20]
    rc = header.bits.type;
 8003a14:	7d3b      	ldrb	r3, [r7, #20]
 8003a16:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8003a1a:	b2db      	uxtb	r3, r3
 8003a1c:	61fb      	str	r3, [r7, #28]
    if (c->keepAliveInterval > 0)
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	699b      	ldr	r3, [r3, #24]
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d00b      	beq.n	8003a3e <readPacket+0xfc>
        TimerCountdown(&c->last_received, c->keepAliveInterval); // record the fact that we have successfully received a packet
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	f103 0260 	add.w	r2, r3, #96	@ 0x60
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	699b      	ldr	r3, [r3, #24]
 8003a30:	4619      	mov	r1, r3
 8003a32:	4610      	mov	r0, r2
 8003a34:	f000 fca4 	bl	8004380 <TimerCountdown>
 8003a38:	e002      	b.n	8003a40 <readPacket+0xfe>
        goto exit;
 8003a3a:	bf00      	nop
 8003a3c:	e000      	b.n	8003a40 <readPacket+0xfe>
exit:
 8003a3e:	bf00      	nop
    return rc;
 8003a40:	69fb      	ldr	r3, [r7, #28]
}
 8003a42:	4618      	mov	r0, r3
 8003a44:	3724      	adds	r7, #36	@ 0x24
 8003a46:	46bd      	mov	sp, r7
 8003a48:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003a4a <isTopicMatched>:

// assume topic filter and name is in correct format
// # can only be at end
// + and # can only be next to separator
static char isTopicMatched(char* topicFilter, MQTTString* topicName)
{
 8003a4a:	b480      	push	{r7}
 8003a4c:	b087      	sub	sp, #28
 8003a4e:	af00      	add	r7, sp, #0
 8003a50:	6078      	str	r0, [r7, #4]
 8003a52:	6039      	str	r1, [r7, #0]
    char* curf = topicFilter;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	617b      	str	r3, [r7, #20]
    char* curn = topicName->lenstring.data;
 8003a58:	683b      	ldr	r3, [r7, #0]
 8003a5a:	689b      	ldr	r3, [r3, #8]
 8003a5c:	613b      	str	r3, [r7, #16]
    char* curn_end = curn + topicName->lenstring.len;
 8003a5e:	683b      	ldr	r3, [r7, #0]
 8003a60:	685b      	ldr	r3, [r3, #4]
 8003a62:	461a      	mov	r2, r3
 8003a64:	693b      	ldr	r3, [r7, #16]
 8003a66:	4413      	add	r3, r2
 8003a68:	60bb      	str	r3, [r7, #8]

    while (*curf && curn < curn_end)
 8003a6a:	e039      	b.n	8003ae0 <isTopicMatched+0x96>
    {
        if (*curn == '/' && *curf != '/')
 8003a6c:	693b      	ldr	r3, [r7, #16]
 8003a6e:	781b      	ldrb	r3, [r3, #0]
 8003a70:	2b2f      	cmp	r3, #47	@ 0x2f
 8003a72:	d103      	bne.n	8003a7c <isTopicMatched+0x32>
 8003a74:	697b      	ldr	r3, [r7, #20]
 8003a76:	781b      	ldrb	r3, [r3, #0]
 8003a78:	2b2f      	cmp	r3, #47	@ 0x2f
 8003a7a:	d13a      	bne.n	8003af2 <isTopicMatched+0xa8>
            break;
        if (*curf != '+' && *curf != '#' && *curf != *curn)
 8003a7c:	697b      	ldr	r3, [r7, #20]
 8003a7e:	781b      	ldrb	r3, [r3, #0]
 8003a80:	2b2b      	cmp	r3, #43	@ 0x2b
 8003a82:	d009      	beq.n	8003a98 <isTopicMatched+0x4e>
 8003a84:	697b      	ldr	r3, [r7, #20]
 8003a86:	781b      	ldrb	r3, [r3, #0]
 8003a88:	2b23      	cmp	r3, #35	@ 0x23
 8003a8a:	d005      	beq.n	8003a98 <isTopicMatched+0x4e>
 8003a8c:	697b      	ldr	r3, [r7, #20]
 8003a8e:	781a      	ldrb	r2, [r3, #0]
 8003a90:	693b      	ldr	r3, [r7, #16]
 8003a92:	781b      	ldrb	r3, [r3, #0]
 8003a94:	429a      	cmp	r2, r3
 8003a96:	d12e      	bne.n	8003af6 <isTopicMatched+0xac>
            break;
        if (*curf == '+')
 8003a98:	697b      	ldr	r3, [r7, #20]
 8003a9a:	781b      	ldrb	r3, [r3, #0]
 8003a9c:	2b2b      	cmp	r3, #43	@ 0x2b
 8003a9e:	d112      	bne.n	8003ac6 <isTopicMatched+0x7c>
        {   // skip until we meet the next separator, or end of string
            char* nextpos = curn + 1;
 8003aa0:	693b      	ldr	r3, [r7, #16]
 8003aa2:	3301      	adds	r3, #1
 8003aa4:	60fb      	str	r3, [r7, #12]
            while (nextpos < curn_end && *nextpos != '/')
 8003aa6:	e005      	b.n	8003ab4 <isTopicMatched+0x6a>
                nextpos = ++curn + 1;
 8003aa8:	693b      	ldr	r3, [r7, #16]
 8003aaa:	3301      	adds	r3, #1
 8003aac:	613b      	str	r3, [r7, #16]
 8003aae:	693b      	ldr	r3, [r7, #16]
 8003ab0:	3301      	adds	r3, #1
 8003ab2:	60fb      	str	r3, [r7, #12]
            while (nextpos < curn_end && *nextpos != '/')
 8003ab4:	68fa      	ldr	r2, [r7, #12]
 8003ab6:	68bb      	ldr	r3, [r7, #8]
 8003ab8:	429a      	cmp	r2, r3
 8003aba:	d20b      	bcs.n	8003ad4 <isTopicMatched+0x8a>
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	781b      	ldrb	r3, [r3, #0]
 8003ac0:	2b2f      	cmp	r3, #47	@ 0x2f
 8003ac2:	d1f1      	bne.n	8003aa8 <isTopicMatched+0x5e>
 8003ac4:	e006      	b.n	8003ad4 <isTopicMatched+0x8a>
        }
        else if (*curf == '#')
 8003ac6:	697b      	ldr	r3, [r7, #20]
 8003ac8:	781b      	ldrb	r3, [r3, #0]
 8003aca:	2b23      	cmp	r3, #35	@ 0x23
 8003acc:	d102      	bne.n	8003ad4 <isTopicMatched+0x8a>
            curn = curn_end - 1;    // skip until end of string
 8003ace:	68bb      	ldr	r3, [r7, #8]
 8003ad0:	3b01      	subs	r3, #1
 8003ad2:	613b      	str	r3, [r7, #16]
        curf++;
 8003ad4:	697b      	ldr	r3, [r7, #20]
 8003ad6:	3301      	adds	r3, #1
 8003ad8:	617b      	str	r3, [r7, #20]
        curn++;
 8003ada:	693b      	ldr	r3, [r7, #16]
 8003adc:	3301      	adds	r3, #1
 8003ade:	613b      	str	r3, [r7, #16]
    while (*curf && curn < curn_end)
 8003ae0:	697b      	ldr	r3, [r7, #20]
 8003ae2:	781b      	ldrb	r3, [r3, #0]
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d007      	beq.n	8003af8 <isTopicMatched+0xae>
 8003ae8:	693a      	ldr	r2, [r7, #16]
 8003aea:	68bb      	ldr	r3, [r7, #8]
 8003aec:	429a      	cmp	r2, r3
 8003aee:	d3bd      	bcc.n	8003a6c <isTopicMatched+0x22>
 8003af0:	e002      	b.n	8003af8 <isTopicMatched+0xae>
            break;
 8003af2:	bf00      	nop
 8003af4:	e000      	b.n	8003af8 <isTopicMatched+0xae>
            break;
 8003af6:	bf00      	nop
    };

    return (curn == curn_end) && (*curf == '\0');
 8003af8:	693a      	ldr	r2, [r7, #16]
 8003afa:	68bb      	ldr	r3, [r7, #8]
 8003afc:	429a      	cmp	r2, r3
 8003afe:	d105      	bne.n	8003b0c <isTopicMatched+0xc2>
 8003b00:	697b      	ldr	r3, [r7, #20]
 8003b02:	781b      	ldrb	r3, [r3, #0]
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d101      	bne.n	8003b0c <isTopicMatched+0xc2>
 8003b08:	2301      	movs	r3, #1
 8003b0a:	e000      	b.n	8003b0e <isTopicMatched+0xc4>
 8003b0c:	2300      	movs	r3, #0
 8003b0e:	b2db      	uxtb	r3, r3
}
 8003b10:	4618      	mov	r0, r3
 8003b12:	371c      	adds	r7, #28
 8003b14:	46bd      	mov	sp, r7
 8003b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1a:	4770      	bx	lr

08003b1c <deliverMessage>:


int deliverMessage(MQTTClient* c, MQTTString* topicName, MQTTMessage* message)
{
 8003b1c:	b580      	push	{r7, lr}
 8003b1e:	b08a      	sub	sp, #40	@ 0x28
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	60f8      	str	r0, [r7, #12]
 8003b24:	60b9      	str	r1, [r7, #8]
 8003b26:	607a      	str	r2, [r7, #4]
    int i;
    int rc = FAILURE;
 8003b28:	f04f 33ff 	mov.w	r3, #4294967295
 8003b2c:	623b      	str	r3, [r7, #32]

    // we have to find the right message handler - indexed by topic
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
 8003b2e:	2300      	movs	r3, #0
 8003b30:	627b      	str	r3, [r7, #36]	@ 0x24
 8003b32:	e03c      	b.n	8003bae <deliverMessage+0x92>
    {
        if (c->messageHandlers[i].topicFilter != 0 && (MQTTPacket_equals(topicName, (char*)c->messageHandlers[i].topicFilter) ||
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003b38:	3205      	adds	r2, #5
 8003b3a:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d032      	beq.n	8003ba8 <deliverMessage+0x8c>
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003b46:	3205      	adds	r2, #5
 8003b48:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 8003b4c:	4619      	mov	r1, r3
 8003b4e:	68b8      	ldr	r0, [r7, #8]
 8003b50:	f001 f962 	bl	8004e18 <MQTTPacket_equals>
 8003b54:	4603      	mov	r3, r0
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d10b      	bne.n	8003b72 <deliverMessage+0x56>
                isTopicMatched((char*)c->messageHandlers[i].topicFilter, topicName)))
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003b5e:	3205      	adds	r2, #5
 8003b60:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 8003b64:	68b9      	ldr	r1, [r7, #8]
 8003b66:	4618      	mov	r0, r3
 8003b68:	f7ff ff6f 	bl	8003a4a <isTopicMatched>
 8003b6c:	4603      	mov	r3, r0
        if (c->messageHandlers[i].topicFilter != 0 && (MQTTPacket_equals(topicName, (char*)c->messageHandlers[i].topicFilter) ||
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d01a      	beq.n	8003ba8 <deliverMessage+0x8c>
        {
            if (c->messageHandlers[i].fp != NULL)
 8003b72:	68fa      	ldr	r2, [r7, #12]
 8003b74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b76:	3305      	adds	r3, #5
 8003b78:	00db      	lsls	r3, r3, #3
 8003b7a:	4413      	add	r3, r2
 8003b7c:	685b      	ldr	r3, [r3, #4]
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d012      	beq.n	8003ba8 <deliverMessage+0x8c>
            {
                MessageData md;
                NewMessageData(&md, topicName, message);
 8003b82:	f107 0318 	add.w	r3, r7, #24
 8003b86:	687a      	ldr	r2, [r7, #4]
 8003b88:	68b9      	ldr	r1, [r7, #8]
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	f7ff fddc 	bl	8003748 <NewMessageData>
                c->messageHandlers[i].fp(&md);
 8003b90:	68fa      	ldr	r2, [r7, #12]
 8003b92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b94:	3305      	adds	r3, #5
 8003b96:	00db      	lsls	r3, r3, #3
 8003b98:	4413      	add	r3, r2
 8003b9a:	685b      	ldr	r3, [r3, #4]
 8003b9c:	f107 0218 	add.w	r2, r7, #24
 8003ba0:	4610      	mov	r0, r2
 8003ba2:	4798      	blx	r3
                rc = MQTT_SUCCESS;
 8003ba4:	2300      	movs	r3, #0
 8003ba6:	623b      	str	r3, [r7, #32]
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
 8003ba8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003baa:	3301      	adds	r3, #1
 8003bac:	627b      	str	r3, [r7, #36]	@ 0x24
 8003bae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bb0:	2b04      	cmp	r3, #4
 8003bb2:	ddbf      	ble.n	8003b34 <deliverMessage+0x18>
            }
        }
    }

    if (rc == FAILURE && c->defaultMessageHandler != NULL)
 8003bb4:	6a3b      	ldr	r3, [r7, #32]
 8003bb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bba:	d112      	bne.n	8003be2 <deliverMessage+0xc6>
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d00e      	beq.n	8003be2 <deliverMessage+0xc6>
    {
        MessageData md;
        NewMessageData(&md, topicName, message);
 8003bc4:	f107 0310 	add.w	r3, r7, #16
 8003bc8:	687a      	ldr	r2, [r7, #4]
 8003bca:	68b9      	ldr	r1, [r7, #8]
 8003bcc:	4618      	mov	r0, r3
 8003bce:	f7ff fdbb 	bl	8003748 <NewMessageData>
        c->defaultMessageHandler(&md);
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003bd6:	f107 0210 	add.w	r2, r7, #16
 8003bda:	4610      	mov	r0, r2
 8003bdc:	4798      	blx	r3
        rc = MQTT_SUCCESS;
 8003bde:	2300      	movs	r3, #0
 8003be0:	623b      	str	r3, [r7, #32]
    }

    return rc;
 8003be2:	6a3b      	ldr	r3, [r7, #32]
}
 8003be4:	4618      	mov	r0, r3
 8003be6:	3728      	adds	r7, #40	@ 0x28
 8003be8:	46bd      	mov	sp, r7
 8003bea:	bd80      	pop	{r7, pc}

08003bec <keepalive>:


int keepalive(MQTTClient* c)
{
 8003bec:	b580      	push	{r7, lr}
 8003bee:	b086      	sub	sp, #24
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	6078      	str	r0, [r7, #4]
    int rc = MQTT_SUCCESS;
 8003bf4:	2300      	movs	r3, #0
 8003bf6:	617b      	str	r3, [r7, #20]

    if (c->keepAliveInterval == 0)
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	699b      	ldr	r3, [r3, #24]
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d03e      	beq.n	8003c7e <keepalive+0x92>
        goto exit;

    if (TimerIsExpired(&c->last_sent) || TimerIsExpired(&c->last_received))
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	3358      	adds	r3, #88	@ 0x58
 8003c04:	4618      	mov	r0, r3
 8003c06:	f000 fb91 	bl	800432c <TimerIsExpired>
 8003c0a:	4603      	mov	r3, r0
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d107      	bne.n	8003c20 <keepalive+0x34>
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	3360      	adds	r3, #96	@ 0x60
 8003c14:	4618      	mov	r0, r3
 8003c16:	f000 fb89 	bl	800432c <TimerIsExpired>
 8003c1a:	4603      	mov	r3, r0
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d030      	beq.n	8003c82 <keepalive+0x96>
    {
        if (c->ping_outstanding)
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	7f1b      	ldrb	r3, [r3, #28]
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d003      	beq.n	8003c30 <keepalive+0x44>
            rc = FAILURE; /* PINGRESP not received in keepalive interval */
 8003c28:	f04f 33ff 	mov.w	r3, #4294967295
 8003c2c:	617b      	str	r3, [r7, #20]
 8003c2e:	e029      	b.n	8003c84 <keepalive+0x98>
        else
        {
            Timer timer;
            TimerInit(&timer);
 8003c30:	f107 0308 	add.w	r3, r7, #8
 8003c34:	4618      	mov	r0, r3
 8003c36:	f000 fb6b 	bl	8004310 <TimerInit>
            TimerCountdownMS(&timer, 1000);
 8003c3a:	f107 0308 	add.w	r3, r7, #8
 8003c3e:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8003c42:	4618      	mov	r0, r3
 8003c44:	f000 fb88 	bl	8004358 <TimerCountdownMS>
            int len = MQTTSerialize_pingreq(c->buf, c->buf_size);
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	691a      	ldr	r2, [r3, #16]
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	689b      	ldr	r3, [r3, #8]
 8003c50:	4619      	mov	r1, r3
 8003c52:	4610      	mov	r0, r2
 8003c54:	f000 fe45 	bl	80048e2 <MQTTSerialize_pingreq>
 8003c58:	6138      	str	r0, [r7, #16]
            if (len > 0 && (rc = sendPacket(c, len, &timer)) == MQTT_SUCCESS) // send the ping packet
 8003c5a:	693b      	ldr	r3, [r7, #16]
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	dd11      	ble.n	8003c84 <keepalive+0x98>
 8003c60:	f107 0308 	add.w	r3, r7, #8
 8003c64:	461a      	mov	r2, r3
 8003c66:	6939      	ldr	r1, [r7, #16]
 8003c68:	6878      	ldr	r0, [r7, #4]
 8003c6a:	f7ff fd98 	bl	800379e <sendPacket>
 8003c6e:	6178      	str	r0, [r7, #20]
 8003c70:	697b      	ldr	r3, [r7, #20]
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d106      	bne.n	8003c84 <keepalive+0x98>
                c->ping_outstanding = 1;
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	2201      	movs	r2, #1
 8003c7a:	771a      	strb	r2, [r3, #28]
 8003c7c:	e002      	b.n	8003c84 <keepalive+0x98>
        goto exit;
 8003c7e:	bf00      	nop
 8003c80:	e000      	b.n	8003c84 <keepalive+0x98>
        }
    }

exit:
 8003c82:	bf00      	nop
    return rc;
 8003c84:	697b      	ldr	r3, [r7, #20]
}
 8003c86:	4618      	mov	r0, r3
 8003c88:	3718      	adds	r7, #24
 8003c8a:	46bd      	mov	sp, r7
 8003c8c:	bd80      	pop	{r7, pc}

08003c8e <MQTTCleanSession>:


void MQTTCleanSession(MQTTClient* c)
{
 8003c8e:	b480      	push	{r7}
 8003c90:	b085      	sub	sp, #20
 8003c92:	af00      	add	r7, sp, #0
 8003c94:	6078      	str	r0, [r7, #4]
    int i = 0;
 8003c96:	2300      	movs	r3, #0
 8003c98:	60fb      	str	r3, [r7, #12]

    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
 8003c9a:	2300      	movs	r3, #0
 8003c9c:	60fb      	str	r3, [r7, #12]
 8003c9e:	e008      	b.n	8003cb2 <MQTTCleanSession+0x24>
        c->messageHandlers[i].topicFilter = NULL;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	68fa      	ldr	r2, [r7, #12]
 8003ca4:	3205      	adds	r2, #5
 8003ca6:	2100      	movs	r1, #0
 8003ca8:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	3301      	adds	r3, #1
 8003cb0:	60fb      	str	r3, [r7, #12]
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	2b04      	cmp	r3, #4
 8003cb6:	ddf3      	ble.n	8003ca0 <MQTTCleanSession+0x12>
}
 8003cb8:	bf00      	nop
 8003cba:	bf00      	nop
 8003cbc:	3714      	adds	r7, #20
 8003cbe:	46bd      	mov	sp, r7
 8003cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc4:	4770      	bx	lr

08003cc6 <MQTTCloseSession>:


void MQTTCloseSession(MQTTClient* c)
{
 8003cc6:	b580      	push	{r7, lr}
 8003cc8:	b082      	sub	sp, #8
 8003cca:	af00      	add	r7, sp, #0
 8003ccc:	6078      	str	r0, [r7, #4]
    c->ping_outstanding = 0;
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	2200      	movs	r2, #0
 8003cd2:	771a      	strb	r2, [r3, #28]
    c->isconnected = 0;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	2200      	movs	r2, #0
 8003cd8:	621a      	str	r2, [r3, #32]
    if (c->cleansession)
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d002      	beq.n	8003ce8 <MQTTCloseSession+0x22>
        MQTTCleanSession(c);
 8003ce2:	6878      	ldr	r0, [r7, #4]
 8003ce4:	f7ff ffd3 	bl	8003c8e <MQTTCleanSession>
}
 8003ce8:	bf00      	nop
 8003cea:	3708      	adds	r7, #8
 8003cec:	46bd      	mov	sp, r7
 8003cee:	bd80      	pop	{r7, pc}

08003cf0 <cycle>:


int cycle(MQTTClient* c, Timer* timer)
{
 8003cf0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003cf2:	b095      	sub	sp, #84	@ 0x54
 8003cf4:	af06      	add	r7, sp, #24
 8003cf6:	6078      	str	r0, [r7, #4]
 8003cf8:	6039      	str	r1, [r7, #0]
    int len = 0,
 8003cfa:	2300      	movs	r3, #0
 8003cfc:	637b      	str	r3, [r7, #52]	@ 0x34
        rc = MQTT_SUCCESS;
 8003cfe:	2300      	movs	r3, #0
 8003d00:	633b      	str	r3, [r7, #48]	@ 0x30

    int packet_type = readPacket(c, timer);     /* read the socket, see what work is due */
 8003d02:	6839      	ldr	r1, [r7, #0]
 8003d04:	6878      	ldr	r0, [r7, #4]
 8003d06:	f7ff fe1c 	bl	8003942 <readPacket>
 8003d0a:	62f8      	str	r0, [r7, #44]	@ 0x2c

    switch (packet_type)
 8003d0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d0e:	2b0d      	cmp	r3, #13
 8003d10:	d81e      	bhi.n	8003d50 <cycle+0x60>
 8003d12:	a201      	add	r2, pc, #4	@ (adr r2, 8003d18 <cycle+0x28>)
 8003d14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d18:	08003ea7 	.word	0x08003ea7
 8003d1c:	08003d51 	.word	0x08003d51
 8003d20:	08003ea7 	.word	0x08003ea7
 8003d24:	08003d57 	.word	0x08003d57
 8003d28:	08003ea7 	.word	0x08003ea7
 8003d2c:	08003e23 	.word	0x08003e23
 8003d30:	08003e23 	.word	0x08003e23
 8003d34:	08003ea7 	.word	0x08003ea7
 8003d38:	08003d51 	.word	0x08003d51
 8003d3c:	08003ea7 	.word	0x08003ea7
 8003d40:	08003d51 	.word	0x08003d51
 8003d44:	08003ea7 	.word	0x08003ea7
 8003d48:	08003d51 	.word	0x08003d51
 8003d4c:	08003e9f 	.word	0x08003e9f
    {
        default:
            /* no more data to read, unrecoverable. Or read packet fails due to unexpected network error */
            rc = packet_type;
 8003d50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d52:	633b      	str	r3, [r7, #48]	@ 0x30
            goto exit;
 8003d54:	e0b9      	b.n	8003eca <cycle+0x1da>
        case PUBLISH:
        {
            MQTTString topicName;
            MQTTMessage msg;
            int intQoS;
            msg.payloadlen = 0; /* this is a size_t, but deserialize publish sets this as int */
 8003d56:	2300      	movs	r3, #0
 8003d58:	61fb      	str	r3, [r7, #28]
            if (MQTTDeserialize_publish(&msg.dup, &intQoS, &msg.retained, &msg.id, &topicName,
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	695b      	ldr	r3, [r3, #20]
               (unsigned char**)&msg.payload, (int*)&msg.payloadlen, c->readbuf, c->readbuf_size) != 1)
 8003d5e:	687a      	ldr	r2, [r7, #4]
 8003d60:	68d2      	ldr	r2, [r2, #12]
            if (MQTTDeserialize_publish(&msg.dup, &intQoS, &msg.retained, &msg.id, &topicName,
 8003d62:	4616      	mov	r6, r2
 8003d64:	f107 0210 	add.w	r2, r7, #16
 8003d68:	1d15      	adds	r5, r2, #4
 8003d6a:	f107 0210 	add.w	r2, r7, #16
 8003d6e:	1c54      	adds	r4, r2, #1
 8003d70:	f107 010c 	add.w	r1, r7, #12
 8003d74:	f107 0210 	add.w	r2, r7, #16
 8003d78:	1c90      	adds	r0, r2, #2
 8003d7a:	9604      	str	r6, [sp, #16]
 8003d7c:	9303      	str	r3, [sp, #12]
 8003d7e:	f107 0310 	add.w	r3, r7, #16
 8003d82:	330c      	adds	r3, #12
 8003d84:	9302      	str	r3, [sp, #8]
 8003d86:	f107 0310 	add.w	r3, r7, #16
 8003d8a:	3308      	adds	r3, #8
 8003d8c:	9301      	str	r3, [sp, #4]
 8003d8e:	f107 0320 	add.w	r3, r7, #32
 8003d92:	9300      	str	r3, [sp, #0]
 8003d94:	462b      	mov	r3, r5
 8003d96:	4622      	mov	r2, r4
 8003d98:	f000 fdb2 	bl	8004900 <MQTTDeserialize_publish>
 8003d9c:	4603      	mov	r3, r0
 8003d9e:	2b01      	cmp	r3, #1
 8003da0:	f040 8090 	bne.w	8003ec4 <cycle+0x1d4>
                goto exit;
            msg.qos = (enum QoS)intQoS;
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	b2db      	uxtb	r3, r3
 8003da8:	743b      	strb	r3, [r7, #16]
            deliverMessage(c, &topicName, &msg);
 8003daa:	f107 0210 	add.w	r2, r7, #16
 8003dae:	f107 0320 	add.w	r3, r7, #32
 8003db2:	4619      	mov	r1, r3
 8003db4:	6878      	ldr	r0, [r7, #4]
 8003db6:	f7ff feb1 	bl	8003b1c <deliverMessage>
            if (msg.qos != QOS0)
 8003dba:	7c3b      	ldrb	r3, [r7, #16]
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d074      	beq.n	8003eaa <cycle+0x1ba>
            {
                if (msg.qos == QOS1)
 8003dc0:	7c3b      	ldrb	r3, [r7, #16]
 8003dc2:	2b01      	cmp	r3, #1
 8003dc4:	d10c      	bne.n	8003de0 <cycle+0xf0>
                    len = MQTTSerialize_ack(c->buf, c->buf_size, PUBACK, 0, msg.id);
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	6918      	ldr	r0, [r3, #16]
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	689b      	ldr	r3, [r3, #8]
 8003dce:	4619      	mov	r1, r3
 8003dd0:	8abb      	ldrh	r3, [r7, #20]
 8003dd2:	9300      	str	r3, [sp, #0]
 8003dd4:	2300      	movs	r3, #0
 8003dd6:	2204      	movs	r2, #4
 8003dd8:	f001 f855 	bl	8004e86 <MQTTSerialize_ack>
 8003ddc:	6378      	str	r0, [r7, #52]	@ 0x34
 8003dde:	e00e      	b.n	8003dfe <cycle+0x10e>
                else if (msg.qos == QOS2)
 8003de0:	7c3b      	ldrb	r3, [r7, #16]
 8003de2:	2b02      	cmp	r3, #2
 8003de4:	d10b      	bne.n	8003dfe <cycle+0x10e>
                    len = MQTTSerialize_ack(c->buf, c->buf_size, PUBREC, 0, msg.id);
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	6918      	ldr	r0, [r3, #16]
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	689b      	ldr	r3, [r3, #8]
 8003dee:	4619      	mov	r1, r3
 8003df0:	8abb      	ldrh	r3, [r7, #20]
 8003df2:	9300      	str	r3, [sp, #0]
 8003df4:	2300      	movs	r3, #0
 8003df6:	2205      	movs	r2, #5
 8003df8:	f001 f845 	bl	8004e86 <MQTTSerialize_ack>
 8003dfc:	6378      	str	r0, [r7, #52]	@ 0x34
                if (len <= 0)
 8003dfe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	dc03      	bgt.n	8003e0c <cycle+0x11c>
                    rc = FAILURE;
 8003e04:	f04f 33ff 	mov.w	r3, #4294967295
 8003e08:	633b      	str	r3, [r7, #48]	@ 0x30
 8003e0a:	e005      	b.n	8003e18 <cycle+0x128>
                else
                    rc = sendPacket(c, len, timer);
 8003e0c:	683a      	ldr	r2, [r7, #0]
 8003e0e:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8003e10:	6878      	ldr	r0, [r7, #4]
 8003e12:	f7ff fcc4 	bl	800379e <sendPacket>
 8003e16:	6338      	str	r0, [r7, #48]	@ 0x30
                if (rc == FAILURE)
 8003e18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e1e:	d144      	bne.n	8003eaa <cycle+0x1ba>
                    goto exit; // there was a problem
 8003e20:	e053      	b.n	8003eca <cycle+0x1da>
        case PUBREC:
        case PUBREL:
        {
            unsigned short mypacketid;
            unsigned char dup, type;
            if (MQTTDeserialize_ack(&type, &dup, &mypacketid, c->readbuf, c->readbuf_size) != 1)
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	695c      	ldr	r4, [r3, #20]
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	68db      	ldr	r3, [r3, #12]
 8003e2a:	f107 020a 	add.w	r2, r7, #10
 8003e2e:	f107 0109 	add.w	r1, r7, #9
 8003e32:	f107 0008 	add.w	r0, r7, #8
 8003e36:	9300      	str	r3, [sp, #0]
 8003e38:	4623      	mov	r3, r4
 8003e3a:	f000 fdd3 	bl	80049e4 <MQTTDeserialize_ack>
 8003e3e:	4603      	mov	r3, r0
 8003e40:	2b01      	cmp	r3, #1
 8003e42:	d003      	beq.n	8003e4c <cycle+0x15c>
                rc = FAILURE;
 8003e44:	f04f 33ff 	mov.w	r3, #4294967295
 8003e48:	633b      	str	r3, [r7, #48]	@ 0x30
 8003e4a:	e023      	b.n	8003e94 <cycle+0x1a4>
            else if ((len = MQTTSerialize_ack(c->buf, c->buf_size,
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	6918      	ldr	r0, [r3, #16]
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	689b      	ldr	r3, [r3, #8]
 8003e54:	4619      	mov	r1, r3
 8003e56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e58:	2b05      	cmp	r3, #5
 8003e5a:	d101      	bne.n	8003e60 <cycle+0x170>
 8003e5c:	2206      	movs	r2, #6
 8003e5e:	e000      	b.n	8003e62 <cycle+0x172>
 8003e60:	2207      	movs	r2, #7
 8003e62:	897b      	ldrh	r3, [r7, #10]
 8003e64:	9300      	str	r3, [sp, #0]
 8003e66:	2300      	movs	r3, #0
 8003e68:	f001 f80d 	bl	8004e86 <MQTTSerialize_ack>
 8003e6c:	6378      	str	r0, [r7, #52]	@ 0x34
 8003e6e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	dc03      	bgt.n	8003e7c <cycle+0x18c>
                (packet_type == PUBREC) ? PUBREL : PUBCOMP, 0, mypacketid)) <= 0)
                rc = FAILURE;
 8003e74:	f04f 33ff 	mov.w	r3, #4294967295
 8003e78:	633b      	str	r3, [r7, #48]	@ 0x30
 8003e7a:	e00b      	b.n	8003e94 <cycle+0x1a4>
            else if ((rc = sendPacket(c, len, timer)) != MQTT_SUCCESS) // send the PUBREL packet
 8003e7c:	683a      	ldr	r2, [r7, #0]
 8003e7e:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8003e80:	6878      	ldr	r0, [r7, #4]
 8003e82:	f7ff fc8c 	bl	800379e <sendPacket>
 8003e86:	6338      	str	r0, [r7, #48]	@ 0x30
 8003e88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d002      	beq.n	8003e94 <cycle+0x1a4>
                rc = FAILURE; // there was a problem
 8003e8e:	f04f 33ff 	mov.w	r3, #4294967295
 8003e92:	633b      	str	r3, [r7, #48]	@ 0x30
            if (rc == FAILURE)
 8003e94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e9a:	d108      	bne.n	8003eae <cycle+0x1be>
                goto exit; // there was a problem
 8003e9c:	e015      	b.n	8003eca <cycle+0x1da>
        }

        case PUBCOMP:
            break;
        case PINGRESP:
            c->ping_outstanding = 0;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	2200      	movs	r2, #0
 8003ea2:	771a      	strb	r2, [r3, #28]
            break;
 8003ea4:	e004      	b.n	8003eb0 <cycle+0x1c0>
            break;
 8003ea6:	bf00      	nop
 8003ea8:	e002      	b.n	8003eb0 <cycle+0x1c0>
            break;
 8003eaa:	bf00      	nop
 8003eac:	e000      	b.n	8003eb0 <cycle+0x1c0>
            break;
 8003eae:	bf00      	nop
    }

    if (keepalive(c) != MQTT_SUCCESS) {
 8003eb0:	6878      	ldr	r0, [r7, #4]
 8003eb2:	f7ff fe9b 	bl	8003bec <keepalive>
 8003eb6:	4603      	mov	r3, r0
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d005      	beq.n	8003ec8 <cycle+0x1d8>
        //check only keepalive FAILURE status so that previous FAILURE status can be considered as FAULT
        rc = FAILURE;
 8003ebc:	f04f 33ff 	mov.w	r3, #4294967295
 8003ec0:	633b      	str	r3, [r7, #48]	@ 0x30
 8003ec2:	e002      	b.n	8003eca <cycle+0x1da>
                goto exit;
 8003ec4:	bf00      	nop
 8003ec6:	e000      	b.n	8003eca <cycle+0x1da>
    }

exit:
 8003ec8:	bf00      	nop
    if (rc == MQTT_SUCCESS)
 8003eca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d102      	bne.n	8003ed6 <cycle+0x1e6>
        rc = packet_type;
 8003ed0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ed2:	633b      	str	r3, [r7, #48]	@ 0x30
 8003ed4:	e006      	b.n	8003ee4 <cycle+0x1f4>
    else if (c->isconnected)
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	6a1b      	ldr	r3, [r3, #32]
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d002      	beq.n	8003ee4 <cycle+0x1f4>
        MQTTCloseSession(c);
 8003ede:	6878      	ldr	r0, [r7, #4]
 8003ee0:	f7ff fef1 	bl	8003cc6 <MQTTCloseSession>
    return rc;
 8003ee4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
}
 8003ee6:	4618      	mov	r0, r3
 8003ee8:	373c      	adds	r7, #60	@ 0x3c
 8003eea:	46bd      	mov	sp, r7
 8003eec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003eee:	bf00      	nop

08003ef0 <MQTTYield>:


int MQTTYield(MQTTClient* c, int timeout_ms)
{
 8003ef0:	b580      	push	{r7, lr}
 8003ef2:	b086      	sub	sp, #24
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	6078      	str	r0, [r7, #4]
 8003ef8:	6039      	str	r1, [r7, #0]
    int rc = MQTT_SUCCESS;
 8003efa:	2300      	movs	r3, #0
 8003efc:	617b      	str	r3, [r7, #20]
    Timer timer;

    TimerInit(&timer);
 8003efe:	f107 030c 	add.w	r3, r7, #12
 8003f02:	4618      	mov	r0, r3
 8003f04:	f000 fa04 	bl	8004310 <TimerInit>
    TimerCountdownMS(&timer, timeout_ms);
 8003f08:	683a      	ldr	r2, [r7, #0]
 8003f0a:	f107 030c 	add.w	r3, r7, #12
 8003f0e:	4611      	mov	r1, r2
 8003f10:	4618      	mov	r0, r3
 8003f12:	f000 fa21 	bl	8004358 <TimerCountdownMS>

	do
    {
        if (cycle(c, &timer) < 0)
 8003f16:	f107 030c 	add.w	r3, r7, #12
 8003f1a:	4619      	mov	r1, r3
 8003f1c:	6878      	ldr	r0, [r7, #4]
 8003f1e:	f7ff fee7 	bl	8003cf0 <cycle>
 8003f22:	4603      	mov	r3, r0
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	da03      	bge.n	8003f30 <MQTTYield+0x40>
        {
            rc = FAILURE;
 8003f28:	f04f 33ff 	mov.w	r3, #4294967295
 8003f2c:	617b      	str	r3, [r7, #20]
            break;
 8003f2e:	e007      	b.n	8003f40 <MQTTYield+0x50>
        }
  	} while (!TimerIsExpired(&timer));
 8003f30:	f107 030c 	add.w	r3, r7, #12
 8003f34:	4618      	mov	r0, r3
 8003f36:	f000 f9f9 	bl	800432c <TimerIsExpired>
 8003f3a:	4603      	mov	r3, r0
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d0ea      	beq.n	8003f16 <MQTTYield+0x26>

    return rc;
 8003f40:	697b      	ldr	r3, [r7, #20]
}
 8003f42:	4618      	mov	r0, r3
 8003f44:	3718      	adds	r7, #24
 8003f46:	46bd      	mov	sp, r7
 8003f48:	bd80      	pop	{r7, pc}

08003f4a <waitfor>:
}
#endif


int waitfor(MQTTClient* c, int packet_type, Timer* timer)
{
 8003f4a:	b580      	push	{r7, lr}
 8003f4c:	b086      	sub	sp, #24
 8003f4e:	af00      	add	r7, sp, #0
 8003f50:	60f8      	str	r0, [r7, #12]
 8003f52:	60b9      	str	r1, [r7, #8]
 8003f54:	607a      	str	r2, [r7, #4]
    int rc = FAILURE;
 8003f56:	f04f 33ff 	mov.w	r3, #4294967295
 8003f5a:	617b      	str	r3, [r7, #20]

    do
    {
        if (TimerIsExpired(timer))
 8003f5c:	6878      	ldr	r0, [r7, #4]
 8003f5e:	f000 f9e5 	bl	800432c <TimerIsExpired>
 8003f62:	4603      	mov	r3, r0
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d10c      	bne.n	8003f82 <waitfor+0x38>
            break; // we timed out
        rc = cycle(c, timer);
 8003f68:	6879      	ldr	r1, [r7, #4]
 8003f6a:	68f8      	ldr	r0, [r7, #12]
 8003f6c:	f7ff fec0 	bl	8003cf0 <cycle>
 8003f70:	6178      	str	r0, [r7, #20]
    }
    while (rc != packet_type && rc >= 0);
 8003f72:	697a      	ldr	r2, [r7, #20]
 8003f74:	68bb      	ldr	r3, [r7, #8]
 8003f76:	429a      	cmp	r2, r3
 8003f78:	d004      	beq.n	8003f84 <waitfor+0x3a>
 8003f7a:	697b      	ldr	r3, [r7, #20]
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	daed      	bge.n	8003f5c <waitfor+0x12>
 8003f80:	e000      	b.n	8003f84 <waitfor+0x3a>
            break; // we timed out
 8003f82:	bf00      	nop

    return rc;
 8003f84:	697b      	ldr	r3, [r7, #20]
}
 8003f86:	4618      	mov	r0, r3
 8003f88:	3718      	adds	r7, #24
 8003f8a:	46bd      	mov	sp, r7
 8003f8c:	bd80      	pop	{r7, pc}
	...

08003f90 <MQTTConnectWithResults>:




int MQTTConnectWithResults(MQTTClient* c, MQTTPacket_connectData* options, MQTTConnackData* data)
{
 8003f90:	b580      	push	{r7, lr}
 8003f92:	b09e      	sub	sp, #120	@ 0x78
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	60f8      	str	r0, [r7, #12]
 8003f98:	60b9      	str	r1, [r7, #8]
 8003f9a:	607a      	str	r2, [r7, #4]
    Timer connect_timer;
    int rc = FAILURE;
 8003f9c:	f04f 33ff 	mov.w	r3, #4294967295
 8003fa0:	677b      	str	r3, [r7, #116]	@ 0x74
    MQTTPacket_connectData default_options = MQTTPacket_connectData_initializer;
 8003fa2:	4a43      	ldr	r2, [pc, #268]	@ (80040b0 <MQTTConnectWithResults+0x120>)
 8003fa4:	f107 0310 	add.w	r3, r7, #16
 8003fa8:	4611      	mov	r1, r2
 8003faa:	2258      	movs	r2, #88	@ 0x58
 8003fac:	4618      	mov	r0, r3
 8003fae:	f008 fb70 	bl	800c692 <memcpy>
    int len = 0;
 8003fb2:	2300      	movs	r3, #0
 8003fb4:	673b      	str	r3, [r7, #112]	@ 0x70

#if defined(MQTT_TASK)
	  MutexLock(&c->mutex);
#endif
	  if (c->isconnected) /* don't send connect packet again if we are already connected */
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	6a1b      	ldr	r3, [r3, #32]
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d164      	bne.n	8004088 <MQTTConnectWithResults+0xf8>
		  goto exit;

    TimerInit(&connect_timer);
 8003fbe:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8003fc2:	4618      	mov	r0, r3
 8003fc4:	f000 f9a4 	bl	8004310 <TimerInit>
    TimerCountdownMS(&connect_timer, c->command_timeout_ms);
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	685a      	ldr	r2, [r3, #4]
 8003fcc:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8003fd0:	4611      	mov	r1, r2
 8003fd2:	4618      	mov	r0, r3
 8003fd4:	f000 f9c0 	bl	8004358 <TimerCountdownMS>

    if (options == 0)
 8003fd8:	68bb      	ldr	r3, [r7, #8]
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d102      	bne.n	8003fe4 <MQTTConnectWithResults+0x54>
        options = &default_options; /* set default options if none were supplied */
 8003fde:	f107 0310 	add.w	r3, r7, #16
 8003fe2:	60bb      	str	r3, [r7, #8]

    c->keepAliveInterval = options->keepAliveInterval;
 8003fe4:	68bb      	ldr	r3, [r7, #8]
 8003fe6:	8b1b      	ldrh	r3, [r3, #24]
 8003fe8:	461a      	mov	r2, r3
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	619a      	str	r2, [r3, #24]
    c->cleansession = options->cleansession;
 8003fee:	68bb      	ldr	r3, [r7, #8]
 8003ff0:	7e9b      	ldrb	r3, [r3, #26]
 8003ff2:	461a      	mov	r2, r3
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	625a      	str	r2, [r3, #36]	@ 0x24
    TimerCountdown(&c->last_received, c->keepAliveInterval);
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	f103 0260 	add.w	r2, r3, #96	@ 0x60
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	699b      	ldr	r3, [r3, #24]
 8004002:	4619      	mov	r1, r3
 8004004:	4610      	mov	r0, r2
 8004006:	f000 f9bb 	bl	8004380 <TimerCountdown>
    if ((len = MQTTSerialize_connect(c->buf, c->buf_size, options)) <= 0)
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	6918      	ldr	r0, [r3, #16]
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	689b      	ldr	r3, [r3, #8]
 8004012:	68ba      	ldr	r2, [r7, #8]
 8004014:	4619      	mov	r1, r3
 8004016:	f000 faeb 	bl	80045f0 <MQTTSerialize_connect>
 800401a:	6738      	str	r0, [r7, #112]	@ 0x70
 800401c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800401e:	2b00      	cmp	r3, #0
 8004020:	dd34      	ble.n	800408c <MQTTConnectWithResults+0xfc>
        goto exit;
    if ((rc = sendPacket(c, len, &connect_timer)) != MQTT_SUCCESS)  // send the connect packet
 8004022:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8004026:	461a      	mov	r2, r3
 8004028:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 800402a:	68f8      	ldr	r0, [r7, #12]
 800402c:	f7ff fbb7 	bl	800379e <sendPacket>
 8004030:	6778      	str	r0, [r7, #116]	@ 0x74
 8004032:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004034:	2b00      	cmp	r3, #0
 8004036:	d12b      	bne.n	8004090 <MQTTConnectWithResults+0x100>
        goto exit; // there was a problem

    // this will be a blocking call, wait for the connack
    if (waitfor(c, CONNACK, &connect_timer) == CONNACK)
 8004038:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 800403c:	461a      	mov	r2, r3
 800403e:	2102      	movs	r1, #2
 8004040:	68f8      	ldr	r0, [r7, #12]
 8004042:	f7ff ff82 	bl	8003f4a <waitfor>
 8004046:	4603      	mov	r3, r0
 8004048:	2b02      	cmp	r3, #2
 800404a:	d119      	bne.n	8004080 <MQTTConnectWithResults+0xf0>
    {
        data->rc = 0;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	2200      	movs	r2, #0
 8004050:	701a      	strb	r2, [r3, #0]
        data->sessionPresent = 0;
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	2200      	movs	r2, #0
 8004056:	705a      	strb	r2, [r3, #1]
        if (MQTTDeserialize_connack(&data->sessionPresent, &data->rc, c->readbuf, c->readbuf_size) == 1)
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	1c58      	adds	r0, r3, #1
 800405c:	6879      	ldr	r1, [r7, #4]
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	695a      	ldr	r2, [r3, #20]
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	68db      	ldr	r3, [r3, #12]
 8004066:	f000 fbaf 	bl	80047c8 <MQTTDeserialize_connack>
 800406a:	4603      	mov	r3, r0
 800406c:	2b01      	cmp	r3, #1
 800406e:	d103      	bne.n	8004078 <MQTTConnectWithResults+0xe8>
            rc = data->rc;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	781b      	ldrb	r3, [r3, #0]
 8004074:	677b      	str	r3, [r7, #116]	@ 0x74
 8004076:	e00c      	b.n	8004092 <MQTTConnectWithResults+0x102>
        else
            rc = FAILURE;
 8004078:	f04f 33ff 	mov.w	r3, #4294967295
 800407c:	677b      	str	r3, [r7, #116]	@ 0x74
 800407e:	e008      	b.n	8004092 <MQTTConnectWithResults+0x102>
    }
    else
        rc = FAILURE;
 8004080:	f04f 33ff 	mov.w	r3, #4294967295
 8004084:	677b      	str	r3, [r7, #116]	@ 0x74
 8004086:	e004      	b.n	8004092 <MQTTConnectWithResults+0x102>
		  goto exit;
 8004088:	bf00      	nop
 800408a:	e002      	b.n	8004092 <MQTTConnectWithResults+0x102>
        goto exit;
 800408c:	bf00      	nop
 800408e:	e000      	b.n	8004092 <MQTTConnectWithResults+0x102>
        goto exit; // there was a problem
 8004090:	bf00      	nop

exit:
    if (rc == MQTT_SUCCESS)
 8004092:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004094:	2b00      	cmp	r3, #0
 8004096:	d105      	bne.n	80040a4 <MQTTConnectWithResults+0x114>
    {
        c->isconnected = 1;
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	2201      	movs	r2, #1
 800409c:	621a      	str	r2, [r3, #32]
        c->ping_outstanding = 0;
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	2200      	movs	r2, #0
 80040a2:	771a      	strb	r2, [r3, #28]

#if defined(MQTT_TASK)
	  MutexUnlock(&c->mutex);
#endif

    return rc;
 80040a4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
}
 80040a6:	4618      	mov	r0, r3
 80040a8:	3778      	adds	r7, #120	@ 0x78
 80040aa:	46bd      	mov	sp, r7
 80040ac:	bd80      	pop	{r7, pc}
 80040ae:	bf00      	nop
 80040b0:	0800d888 	.word	0x0800d888

080040b4 <MQTTConnect>:


int MQTTConnect(MQTTClient* c, MQTTPacket_connectData* options)
{
 80040b4:	b580      	push	{r7, lr}
 80040b6:	b084      	sub	sp, #16
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	6078      	str	r0, [r7, #4]
 80040bc:	6039      	str	r1, [r7, #0]
    MQTTConnackData data;
    return MQTTConnectWithResults(c, options, &data);
 80040be:	f107 030c 	add.w	r3, r7, #12
 80040c2:	461a      	mov	r2, r3
 80040c4:	6839      	ldr	r1, [r7, #0]
 80040c6:	6878      	ldr	r0, [r7, #4]
 80040c8:	f7ff ff62 	bl	8003f90 <MQTTConnectWithResults>
 80040cc:	4603      	mov	r3, r0
}
 80040ce:	4618      	mov	r0, r3
 80040d0:	3710      	adds	r7, #16
 80040d2:	46bd      	mov	sp, r7
 80040d4:	bd80      	pop	{r7, pc}

080040d6 <MQTTSetMessageHandler>:


int MQTTSetMessageHandler(MQTTClient* c, const char* topicFilter, messageHandler messageHandler)
{
 80040d6:	b580      	push	{r7, lr}
 80040d8:	b086      	sub	sp, #24
 80040da:	af00      	add	r7, sp, #0
 80040dc:	60f8      	str	r0, [r7, #12]
 80040de:	60b9      	str	r1, [r7, #8]
 80040e0:	607a      	str	r2, [r7, #4]
    int rc = FAILURE;
 80040e2:	f04f 33ff 	mov.w	r3, #4294967295
 80040e6:	617b      	str	r3, [r7, #20]
    int i = -1;
 80040e8:	f04f 33ff 	mov.w	r3, #4294967295
 80040ec:	613b      	str	r3, [r7, #16]

    /* first check for an existing matching slot */
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
 80040ee:	2300      	movs	r3, #0
 80040f0:	613b      	str	r3, [r7, #16]
 80040f2:	e028      	b.n	8004146 <MQTTSetMessageHandler+0x70>
    {
        if (c->messageHandlers[i].topicFilter != NULL && strcmp(c->messageHandlers[i].topicFilter, topicFilter) == 0)
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	693a      	ldr	r2, [r7, #16]
 80040f8:	3205      	adds	r2, #5
 80040fa:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d01e      	beq.n	8004140 <MQTTSetMessageHandler+0x6a>
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	693a      	ldr	r2, [r7, #16]
 8004106:	3205      	adds	r2, #5
 8004108:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 800410c:	68b9      	ldr	r1, [r7, #8]
 800410e:	4618      	mov	r0, r3
 8004110:	f7fc f866 	bl	80001e0 <strcmp>
 8004114:	4603      	mov	r3, r0
 8004116:	2b00      	cmp	r3, #0
 8004118:	d112      	bne.n	8004140 <MQTTSetMessageHandler+0x6a>
        {
            if (messageHandler == NULL) /* remove existing */
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	2b00      	cmp	r3, #0
 800411e:	d10c      	bne.n	800413a <MQTTSetMessageHandler+0x64>
            {
                c->messageHandlers[i].topicFilter = NULL;
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	693a      	ldr	r2, [r7, #16]
 8004124:	3205      	adds	r2, #5
 8004126:	2100      	movs	r1, #0
 8004128:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
                c->messageHandlers[i].fp = NULL;
 800412c:	68fa      	ldr	r2, [r7, #12]
 800412e:	693b      	ldr	r3, [r7, #16]
 8004130:	3305      	adds	r3, #5
 8004132:	00db      	lsls	r3, r3, #3
 8004134:	4413      	add	r3, r2
 8004136:	2200      	movs	r2, #0
 8004138:	605a      	str	r2, [r3, #4]
            }
            rc = MQTT_SUCCESS; /* return i when adding new subscription */
 800413a:	2300      	movs	r3, #0
 800413c:	617b      	str	r3, [r7, #20]
            break;
 800413e:	e005      	b.n	800414c <MQTTSetMessageHandler+0x76>
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
 8004140:	693b      	ldr	r3, [r7, #16]
 8004142:	3301      	adds	r3, #1
 8004144:	613b      	str	r3, [r7, #16]
 8004146:	693b      	ldr	r3, [r7, #16]
 8004148:	2b04      	cmp	r3, #4
 800414a:	ddd3      	ble.n	80040f4 <MQTTSetMessageHandler+0x1e>
        }
    }
    /* if no existing, look for empty slot (unless we are removing) */
    if (messageHandler != NULL) {
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	2b00      	cmp	r3, #0
 8004150:	d026      	beq.n	80041a0 <MQTTSetMessageHandler+0xca>
        if (rc == FAILURE)
 8004152:	697b      	ldr	r3, [r7, #20]
 8004154:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004158:	d112      	bne.n	8004180 <MQTTSetMessageHandler+0xaa>
        {
            for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
 800415a:	2300      	movs	r3, #0
 800415c:	613b      	str	r3, [r7, #16]
 800415e:	e00c      	b.n	800417a <MQTTSetMessageHandler+0xa4>
            {
                if (c->messageHandlers[i].topicFilter == NULL)
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	693a      	ldr	r2, [r7, #16]
 8004164:	3205      	adds	r2, #5
 8004166:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 800416a:	2b00      	cmp	r3, #0
 800416c:	d102      	bne.n	8004174 <MQTTSetMessageHandler+0x9e>
                {
                    rc = MQTT_SUCCESS;
 800416e:	2300      	movs	r3, #0
 8004170:	617b      	str	r3, [r7, #20]
                    break;
 8004172:	e005      	b.n	8004180 <MQTTSetMessageHandler+0xaa>
            for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
 8004174:	693b      	ldr	r3, [r7, #16]
 8004176:	3301      	adds	r3, #1
 8004178:	613b      	str	r3, [r7, #16]
 800417a:	693b      	ldr	r3, [r7, #16]
 800417c:	2b04      	cmp	r3, #4
 800417e:	ddef      	ble.n	8004160 <MQTTSetMessageHandler+0x8a>
                }
            }
        }
        if (i < MAX_MESSAGE_HANDLERS)
 8004180:	693b      	ldr	r3, [r7, #16]
 8004182:	2b04      	cmp	r3, #4
 8004184:	dc0c      	bgt.n	80041a0 <MQTTSetMessageHandler+0xca>
        {
            c->messageHandlers[i].topicFilter = topicFilter;
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	693a      	ldr	r2, [r7, #16]
 800418a:	3205      	adds	r2, #5
 800418c:	68b9      	ldr	r1, [r7, #8]
 800418e:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
            c->messageHandlers[i].fp = messageHandler;
 8004192:	68fa      	ldr	r2, [r7, #12]
 8004194:	693b      	ldr	r3, [r7, #16]
 8004196:	3305      	adds	r3, #5
 8004198:	00db      	lsls	r3, r3, #3
 800419a:	4413      	add	r3, r2
 800419c:	687a      	ldr	r2, [r7, #4]
 800419e:	605a      	str	r2, [r3, #4]
        }
    }
    return rc;
 80041a0:	697b      	ldr	r3, [r7, #20]
}
 80041a2:	4618      	mov	r0, r3
 80041a4:	3718      	adds	r7, #24
 80041a6:	46bd      	mov	sp, r7
 80041a8:	bd80      	pop	{r7, pc}

080041aa <MQTTSubscribeWithResults>:


int MQTTSubscribeWithResults(MQTTClient* c, const char* topicFilter, enum QoS qos,
       messageHandler messageHandler, MQTTSubackData* data)
{
 80041aa:	b5b0      	push	{r4, r5, r7, lr}
 80041ac:	b092      	sub	sp, #72	@ 0x48
 80041ae:	af04      	add	r7, sp, #16
 80041b0:	60f8      	str	r0, [r7, #12]
 80041b2:	60b9      	str	r1, [r7, #8]
 80041b4:	603b      	str	r3, [r7, #0]
 80041b6:	4613      	mov	r3, r2
 80041b8:	71fb      	strb	r3, [r7, #7]
    int rc = FAILURE;
 80041ba:	f04f 33ff 	mov.w	r3, #4294967295
 80041be:	637b      	str	r3, [r7, #52]	@ 0x34
    Timer timer;
    int len = 0;
 80041c0:	2300      	movs	r3, #0
 80041c2:	633b      	str	r3, [r7, #48]	@ 0x30
    MQTTString topic = MQTTString_initializer;
 80041c4:	2300      	movs	r3, #0
 80041c6:	61fb      	str	r3, [r7, #28]
 80041c8:	2300      	movs	r3, #0
 80041ca:	623b      	str	r3, [r7, #32]
 80041cc:	2300      	movs	r3, #0
 80041ce:	627b      	str	r3, [r7, #36]	@ 0x24
    topic.cstring = (char *)topicFilter;
 80041d0:	68bb      	ldr	r3, [r7, #8]
 80041d2:	61fb      	str	r3, [r7, #28]

#if defined(MQTT_TASK)
	  MutexLock(&c->mutex);
#endif
	  if (!c->isconnected)
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	6a1b      	ldr	r3, [r3, #32]
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d063      	beq.n	80042a4 <MQTTSubscribeWithResults+0xfa>
		    goto exit;

    TimerInit(&timer);
 80041dc:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80041e0:	4618      	mov	r0, r3
 80041e2:	f000 f895 	bl	8004310 <TimerInit>
    TimerCountdownMS(&timer, c->command_timeout_ms);
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	685a      	ldr	r2, [r3, #4]
 80041ea:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80041ee:	4611      	mov	r1, r2
 80041f0:	4618      	mov	r0, r3
 80041f2:	f000 f8b1 	bl	8004358 <TimerCountdownMS>

    len = MQTTSerialize_subscribe(c->buf, c->buf_size, 0, getNextPacketId(c), 1, &topic, (int*)&qos);
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	691c      	ldr	r4, [r3, #16]
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	689b      	ldr	r3, [r3, #8]
 80041fe:	461d      	mov	r5, r3
 8004200:	68f8      	ldr	r0, [r7, #12]
 8004202:	f7ff fab3 	bl	800376c <getNextPacketId>
 8004206:	4603      	mov	r3, r0
 8004208:	b29a      	uxth	r2, r3
 800420a:	1dfb      	adds	r3, r7, #7
 800420c:	9302      	str	r3, [sp, #8]
 800420e:	f107 031c 	add.w	r3, r7, #28
 8004212:	9301      	str	r3, [sp, #4]
 8004214:	2301      	movs	r3, #1
 8004216:	9300      	str	r3, [sp, #0]
 8004218:	4613      	mov	r3, r2
 800421a:	2200      	movs	r2, #0
 800421c:	4629      	mov	r1, r5
 800421e:	4620      	mov	r0, r4
 8004220:	f000 fead 	bl	8004f7e <MQTTSerialize_subscribe>
 8004224:	6338      	str	r0, [r7, #48]	@ 0x30
    if (len <= 0)
 8004226:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004228:	2b00      	cmp	r3, #0
 800422a:	dd3d      	ble.n	80042a8 <MQTTSubscribeWithResults+0xfe>
        goto exit;
    if ((rc = sendPacket(c, len, &timer)) != MQTT_SUCCESS) // send the subscribe packet
 800422c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8004230:	461a      	mov	r2, r3
 8004232:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004234:	68f8      	ldr	r0, [r7, #12]
 8004236:	f7ff fab2 	bl	800379e <sendPacket>
 800423a:	6378      	str	r0, [r7, #52]	@ 0x34
 800423c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800423e:	2b00      	cmp	r3, #0
 8004240:	d134      	bne.n	80042ac <MQTTSubscribeWithResults+0x102>
        goto exit;             // there was a problem

    if (waitfor(c, SUBACK, &timer) == SUBACK)      // wait for suback
 8004242:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8004246:	461a      	mov	r2, r3
 8004248:	2109      	movs	r1, #9
 800424a:	68f8      	ldr	r0, [r7, #12]
 800424c:	f7ff fe7d 	bl	8003f4a <waitfor>
 8004250:	4603      	mov	r3, r0
 8004252:	2b09      	cmp	r3, #9
 8004254:	d122      	bne.n	800429c <MQTTSubscribeWithResults+0xf2>
    {
        int count = 0;
 8004256:	2300      	movs	r3, #0
 8004258:	61bb      	str	r3, [r7, #24]
        unsigned short mypacketid;
        data->grantedQoS = QOS0;
 800425a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800425c:	2200      	movs	r2, #0
 800425e:	701a      	strb	r2, [r3, #0]
        if (MQTTDeserialize_suback(&mypacketid, 1, &count, (int*)&data->grantedQoS, c->readbuf, c->readbuf_size) == 1)
 8004260:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	695b      	ldr	r3, [r3, #20]
 8004266:	68fa      	ldr	r2, [r7, #12]
 8004268:	68d2      	ldr	r2, [r2, #12]
 800426a:	4614      	mov	r4, r2
 800426c:	f107 0218 	add.w	r2, r7, #24
 8004270:	f107 0016 	add.w	r0, r7, #22
 8004274:	9401      	str	r4, [sp, #4]
 8004276:	9300      	str	r3, [sp, #0]
 8004278:	460b      	mov	r3, r1
 800427a:	2101      	movs	r1, #1
 800427c:	f000 fefb 	bl	8005076 <MQTTDeserialize_suback>
 8004280:	4603      	mov	r3, r0
 8004282:	2b01      	cmp	r3, #1
 8004284:	d113      	bne.n	80042ae <MQTTSubscribeWithResults+0x104>
        {
            if (data->grantedQoS != 0x80)
 8004286:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004288:	781b      	ldrb	r3, [r3, #0]
 800428a:	2b80      	cmp	r3, #128	@ 0x80
 800428c:	d00f      	beq.n	80042ae <MQTTSubscribeWithResults+0x104>
                rc = MQTTSetMessageHandler(c, topicFilter, messageHandler);
 800428e:	683a      	ldr	r2, [r7, #0]
 8004290:	68b9      	ldr	r1, [r7, #8]
 8004292:	68f8      	ldr	r0, [r7, #12]
 8004294:	f7ff ff1f 	bl	80040d6 <MQTTSetMessageHandler>
 8004298:	6378      	str	r0, [r7, #52]	@ 0x34
 800429a:	e008      	b.n	80042ae <MQTTSubscribeWithResults+0x104>
        }
    }
    else
        rc = FAILURE;
 800429c:	f04f 33ff 	mov.w	r3, #4294967295
 80042a0:	637b      	str	r3, [r7, #52]	@ 0x34
 80042a2:	e004      	b.n	80042ae <MQTTSubscribeWithResults+0x104>
		    goto exit;
 80042a4:	bf00      	nop
 80042a6:	e002      	b.n	80042ae <MQTTSubscribeWithResults+0x104>
        goto exit;
 80042a8:	bf00      	nop
 80042aa:	e000      	b.n	80042ae <MQTTSubscribeWithResults+0x104>
        goto exit;             // there was a problem
 80042ac:	bf00      	nop

exit:
    if (rc == FAILURE)
 80042ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80042b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042b4:	d102      	bne.n	80042bc <MQTTSubscribeWithResults+0x112>
        MQTTCloseSession(c);
 80042b6:	68f8      	ldr	r0, [r7, #12]
 80042b8:	f7ff fd05 	bl	8003cc6 <MQTTCloseSession>
#if defined(MQTT_TASK)
	  MutexUnlock(&c->mutex);
#endif
    return rc;
 80042bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 80042be:	4618      	mov	r0, r3
 80042c0:	3738      	adds	r7, #56	@ 0x38
 80042c2:	46bd      	mov	sp, r7
 80042c4:	bdb0      	pop	{r4, r5, r7, pc}

080042c6 <MQTTSubscribe>:


int MQTTSubscribe(MQTTClient* c, const char* topicFilter, enum QoS qos,
       messageHandler messageHandler)
{
 80042c6:	b580      	push	{r7, lr}
 80042c8:	b088      	sub	sp, #32
 80042ca:	af02      	add	r7, sp, #8
 80042cc:	60f8      	str	r0, [r7, #12]
 80042ce:	60b9      	str	r1, [r7, #8]
 80042d0:	603b      	str	r3, [r7, #0]
 80042d2:	4613      	mov	r3, r2
 80042d4:	71fb      	strb	r3, [r7, #7]
    MQTTSubackData data;
    return MQTTSubscribeWithResults(c, topicFilter, qos, messageHandler, &data);
 80042d6:	79fa      	ldrb	r2, [r7, #7]
 80042d8:	f107 0314 	add.w	r3, r7, #20
 80042dc:	9300      	str	r3, [sp, #0]
 80042de:	683b      	ldr	r3, [r7, #0]
 80042e0:	68b9      	ldr	r1, [r7, #8]
 80042e2:	68f8      	ldr	r0, [r7, #12]
 80042e4:	f7ff ff61 	bl	80041aa <MQTTSubscribeWithResults>
 80042e8:	4603      	mov	r3, r0
}
 80042ea:	4618      	mov	r0, r3
 80042ec:	3718      	adds	r7, #24
 80042ee:	46bd      	mov	sp, r7
 80042f0:	bd80      	pop	{r7, pc}
	...

080042f4 <MilliTimer_Handler>:

/*
 * @brief MQTT MilliTimer handler
 * @note MUST BE register to your system 1m Tick timer handler.
 */
void MilliTimer_Handler(void) {
 80042f4:	b480      	push	{r7}
 80042f6:	af00      	add	r7, sp, #0
	MilliTimer++;
 80042f8:	4b04      	ldr	r3, [pc, #16]	@ (800430c <MilliTimer_Handler+0x18>)
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	3301      	adds	r3, #1
 80042fe:	4a03      	ldr	r2, [pc, #12]	@ (800430c <MilliTimer_Handler+0x18>)
 8004300:	6013      	str	r3, [r2, #0]
}
 8004302:	bf00      	nop
 8004304:	46bd      	mov	sp, r7
 8004306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800430a:	4770      	bx	lr
 800430c:	20000e0c 	.word	0x20000e0c

08004310 <TimerInit>:
/*
 * @brief Timer Initialize
 * @param  timer : pointer to a Timer structure
 *         that contains the configuration information for the Timer.
 */
void TimerInit(Timer* timer) {
 8004310:	b480      	push	{r7}
 8004312:	b083      	sub	sp, #12
 8004314:	af00      	add	r7, sp, #0
 8004316:	6078      	str	r0, [r7, #4]
	timer->end_time = 0;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	2200      	movs	r2, #0
 800431c:	605a      	str	r2, [r3, #4]
}
 800431e:	bf00      	nop
 8004320:	370c      	adds	r7, #12
 8004322:	46bd      	mov	sp, r7
 8004324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004328:	4770      	bx	lr
	...

0800432c <TimerIsExpired>:
/*
 * @brief expired Timer
 * @param  timer : pointer to a Timer structure
 *         that contains the configuration information for the Timer.
 */
char TimerIsExpired(Timer* timer) {
 800432c:	b480      	push	{r7}
 800432e:	b085      	sub	sp, #20
 8004330:	af00      	add	r7, sp, #0
 8004332:	6078      	str	r0, [r7, #4]
	long left = timer->end_time - MilliTimer;
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	685a      	ldr	r2, [r3, #4]
 8004338:	4b06      	ldr	r3, [pc, #24]	@ (8004354 <TimerIsExpired+0x28>)
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	1ad3      	subs	r3, r2, r3
 800433e:	60fb      	str	r3, [r7, #12]
	return (left < 0);
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	0fdb      	lsrs	r3, r3, #31
 8004344:	b2db      	uxtb	r3, r3
}
 8004346:	4618      	mov	r0, r3
 8004348:	3714      	adds	r7, #20
 800434a:	46bd      	mov	sp, r7
 800434c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004350:	4770      	bx	lr
 8004352:	bf00      	nop
 8004354:	20000e0c 	.word	0x20000e0c

08004358 <TimerCountdownMS>:
 * @brief Countdown millisecond Timer
 * @param  timer : pointer to a Timer structure
 *         that contains the configuration information for the Timer.
 *         timeout : setting timeout millisecond.
 */
void TimerCountdownMS(Timer* timer, unsigned int timeout) {
 8004358:	b480      	push	{r7}
 800435a:	b083      	sub	sp, #12
 800435c:	af00      	add	r7, sp, #0
 800435e:	6078      	str	r0, [r7, #4]
 8004360:	6039      	str	r1, [r7, #0]
	timer->end_time = MilliTimer + timeout;
 8004362:	4b06      	ldr	r3, [pc, #24]	@ (800437c <TimerCountdownMS+0x24>)
 8004364:	681a      	ldr	r2, [r3, #0]
 8004366:	683b      	ldr	r3, [r7, #0]
 8004368:	441a      	add	r2, r3
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	605a      	str	r2, [r3, #4]
}
 800436e:	bf00      	nop
 8004370:	370c      	adds	r7, #12
 8004372:	46bd      	mov	sp, r7
 8004374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004378:	4770      	bx	lr
 800437a:	bf00      	nop
 800437c:	20000e0c 	.word	0x20000e0c

08004380 <TimerCountdown>:
 * @brief Countdown second Timer
 * @param  timer : pointer to a Timer structure
 *         that contains the configuration information for the Timer.
 *         timeout : setting timeout millisecond.
 */
void TimerCountdown(Timer* timer, unsigned int timeout) {
 8004380:	b480      	push	{r7}
 8004382:	b083      	sub	sp, #12
 8004384:	af00      	add	r7, sp, #0
 8004386:	6078      	str	r0, [r7, #4]
 8004388:	6039      	str	r1, [r7, #0]
	timer->end_time = MilliTimer + (timeout * 1000);
 800438a:	683b      	ldr	r3, [r7, #0]
 800438c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8004390:	fb03 f202 	mul.w	r2, r3, r2
 8004394:	4b05      	ldr	r3, [pc, #20]	@ (80043ac <TimerCountdown+0x2c>)
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	441a      	add	r2, r3
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	605a      	str	r2, [r3, #4]
}
 800439e:	bf00      	nop
 80043a0:	370c      	adds	r7, #12
 80043a2:	46bd      	mov	sp, r7
 80043a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a8:	4770      	bx	lr
 80043aa:	bf00      	nop
 80043ac:	20000e0c 	.word	0x20000e0c

080043b0 <TimerLeftMS>:
/*
 * @brief left millisecond Timer
 * @param  timer : pointer to a Timer structure
 *         that contains the configuration information for the Timer.
 */
int TimerLeftMS(Timer* timer) {
 80043b0:	b480      	push	{r7}
 80043b2:	b085      	sub	sp, #20
 80043b4:	af00      	add	r7, sp, #0
 80043b6:	6078      	str	r0, [r7, #4]
	long left = timer->end_time - MilliTimer;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	685a      	ldr	r2, [r3, #4]
 80043bc:	4b06      	ldr	r3, [pc, #24]	@ (80043d8 <TimerLeftMS+0x28>)
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	1ad3      	subs	r3, r2, r3
 80043c2:	60fb      	str	r3, [r7, #12]
	return (left < 0) ? 0 : left;
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
}
 80043ca:	4618      	mov	r0, r3
 80043cc:	3714      	adds	r7, #20
 80043ce:	46bd      	mov	sp, r7
 80043d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d4:	4770      	bx	lr
 80043d6:	bf00      	nop
 80043d8:	20000e0c 	.word	0x20000e0c

080043dc <NewNetwork>:
 * @param  n : pointer to a Network structure
 *         that contains the configuration information for the Network.
 *         sn : socket number where x can be (0..7).
 * @retval None
 */
void NewNetwork(Network* n, int sn) {
 80043dc:	b480      	push	{r7}
 80043de:	b083      	sub	sp, #12
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	6078      	str	r0, [r7, #4]
 80043e4:	6039      	str	r1, [r7, #0]
	n->my_socket = sn;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	683a      	ldr	r2, [r7, #0]
 80043ea:	601a      	str	r2, [r3, #0]
	n->mqttread = w5x00_read;
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	4a07      	ldr	r2, [pc, #28]	@ (800440c <NewNetwork+0x30>)
 80043f0:	605a      	str	r2, [r3, #4]
	n->mqttwrite = w5x00_write;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	4a06      	ldr	r2, [pc, #24]	@ (8004410 <NewNetwork+0x34>)
 80043f6:	609a      	str	r2, [r3, #8]
	n->disconnect = w5x00_disconnect;
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	4a06      	ldr	r2, [pc, #24]	@ (8004414 <NewNetwork+0x38>)
 80043fc:	60da      	str	r2, [r3, #12]
}
 80043fe:	bf00      	nop
 8004400:	370c      	adds	r7, #12
 8004402:	46bd      	mov	sp, r7
 8004404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004408:	4770      	bx	lr
 800440a:	bf00      	nop
 800440c:	08004419 	.word	0x08004419
 8004410:	08004473 	.word	0x08004473
 8004414:	080044bb 	.word	0x080044bb

08004418 <w5x00_read>:
 *         buffer : pointer to a read buffer.
 *         len : buffer length.
 * @retval received data length or SOCKERR code
 */
int w5x00_read(Network* n, unsigned char* buffer, int len, long time)
{
 8004418:	b580      	push	{r7, lr}
 800441a:	b084      	sub	sp, #16
 800441c:	af00      	add	r7, sp, #0
 800441e:	60f8      	str	r0, [r7, #12]
 8004420:	60b9      	str	r1, [r7, #8]
 8004422:	607a      	str	r2, [r7, #4]
 8004424:	603b      	str	r3, [r7, #0]

	if((getSn_SR(n->my_socket) == SOCK_ESTABLISHED) && (getSn_RX_RSR(n->my_socket)>0))
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	009b      	lsls	r3, r3, #2
 800442c:	3301      	adds	r3, #1
 800442e:	00db      	lsls	r3, r3, #3
 8004430:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8004434:	4618      	mov	r0, r3
 8004436:	f000 fe85 	bl	8005144 <WIZCHIP_READ>
 800443a:	4603      	mov	r3, r0
 800443c:	2b17      	cmp	r3, #23
 800443e:	d113      	bne.n	8004468 <w5x00_read+0x50>
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	b2db      	uxtb	r3, r3
 8004446:	4618      	mov	r0, r3
 8004448:	f001 f81f 	bl	800548a <getSn_RX_RSR>
 800444c:	4603      	mov	r3, r0
 800444e:	2b00      	cmp	r3, #0
 8004450:	d00a      	beq.n	8004468 <w5x00_read+0x50>
		return recv(n->my_socket, buffer, len);
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	b2db      	uxtb	r3, r3
 8004458:	687a      	ldr	r2, [r7, #4]
 800445a:	b292      	uxth	r2, r2
 800445c:	68b9      	ldr	r1, [r7, #8]
 800445e:	4618      	mov	r0, r3
 8004460:	f001 fd22 	bl	8005ea8 <recv>
 8004464:	4603      	mov	r3, r0
 8004466:	e000      	b.n	800446a <w5x00_read+0x52>

	return SOCK_ERROR;
 8004468:	2300      	movs	r3, #0
}
 800446a:	4618      	mov	r0, r3
 800446c:	3710      	adds	r7, #16
 800446e:	46bd      	mov	sp, r7
 8004470:	bd80      	pop	{r7, pc}

08004472 <w5x00_write>:
 *         buffer : pointer to a read buffer.
 *         len : buffer length.
 * @retval length of data sent or SOCKERR code
 */
int w5x00_write(Network* n, unsigned char* buffer, int len, long time)
{
 8004472:	b580      	push	{r7, lr}
 8004474:	b084      	sub	sp, #16
 8004476:	af00      	add	r7, sp, #0
 8004478:	60f8      	str	r0, [r7, #12]
 800447a:	60b9      	str	r1, [r7, #8]
 800447c:	607a      	str	r2, [r7, #4]
 800447e:	603b      	str	r3, [r7, #0]
	if(getSn_SR(n->my_socket) == SOCK_ESTABLISHED)
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	009b      	lsls	r3, r3, #2
 8004486:	3301      	adds	r3, #1
 8004488:	00db      	lsls	r3, r3, #3
 800448a:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 800448e:	4618      	mov	r0, r3
 8004490:	f000 fe58 	bl	8005144 <WIZCHIP_READ>
 8004494:	4603      	mov	r3, r0
 8004496:	2b17      	cmp	r3, #23
 8004498:	d10a      	bne.n	80044b0 <w5x00_write+0x3e>
		return send(n->my_socket, buffer, len);
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	b2db      	uxtb	r3, r3
 80044a0:	687a      	ldr	r2, [r7, #4]
 80044a2:	b292      	uxth	r2, r2
 80044a4:	68b9      	ldr	r1, [r7, #8]
 80044a6:	4618      	mov	r0, r3
 80044a8:	f001 fc06 	bl	8005cb8 <send>
 80044ac:	4603      	mov	r3, r0
 80044ae:	e000      	b.n	80044b2 <w5x00_write+0x40>

	return SOCK_ERROR;
 80044b0:	2300      	movs	r3, #0
}
 80044b2:	4618      	mov	r0, r3
 80044b4:	3710      	adds	r7, #16
 80044b6:	46bd      	mov	sp, r7
 80044b8:	bd80      	pop	{r7, pc}

080044ba <w5x00_disconnect>:
 * @brief disconnect function
 * @param  n : pointer to a Network structure
 *         that contains the configuration information for the Network.
 */
void w5x00_disconnect(Network* n)
{
 80044ba:	b580      	push	{r7, lr}
 80044bc:	b082      	sub	sp, #8
 80044be:	af00      	add	r7, sp, #0
 80044c0:	6078      	str	r0, [r7, #4]
	disconnect(n->my_socket);
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	b2db      	uxtb	r3, r3
 80044c8:	4618      	mov	r0, r3
 80044ca:	f001 fb7f 	bl	8005bcc <disconnect>
}
 80044ce:	bf00      	nop
 80044d0:	3708      	adds	r7, #8
 80044d2:	46bd      	mov	sp, r7
 80044d4:	bd80      	pop	{r7, pc}

080044d6 <ConnectNetwork>:
 *         ip : server iP.
 *         port : server port.
 * @retval SOCKOK code or SOCKERR code
 */
int ConnectNetwork(Network* n, uint8_t* ip, uint16_t port)
{
 80044d6:	b580      	push	{r7, lr}
 80044d8:	b086      	sub	sp, #24
 80044da:	af00      	add	r7, sp, #0
 80044dc:	60f8      	str	r0, [r7, #12]
 80044de:	60b9      	str	r1, [r7, #8]
 80044e0:	4613      	mov	r3, r2
 80044e2:	80fb      	strh	r3, [r7, #6]
	uint16_t myport = 12345;
 80044e4:	f243 0339 	movw	r3, #12345	@ 0x3039
 80044e8:	82fb      	strh	r3, [r7, #22]

	if(socket(n->my_socket, Sn_MR_TCP, myport, 0) != n->my_socket)
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	b2d8      	uxtb	r0, r3
 80044f0:	8afa      	ldrh	r2, [r7, #22]
 80044f2:	2300      	movs	r3, #0
 80044f4:	2101      	movs	r1, #1
 80044f6:	f001 f90b 	bl	8005710 <socket>
 80044fa:	4603      	mov	r3, r0
 80044fc:	461a      	mov	r2, r3
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	429a      	cmp	r2, r3
 8004504:	d001      	beq.n	800450a <ConnectNetwork+0x34>
		return SOCK_ERROR;
 8004506:	2300      	movs	r3, #0
 8004508:	e00d      	b.n	8004526 <ConnectNetwork+0x50>

	if(connect(n->my_socket, ip, port) != SOCK_OK)
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	b2db      	uxtb	r3, r3
 8004510:	88fa      	ldrh	r2, [r7, #6]
 8004512:	68b9      	ldr	r1, [r7, #8]
 8004514:	4618      	mov	r0, r3
 8004516:	f001 fa7d 	bl	8005a14 <connect>
 800451a:	4603      	mov	r3, r0
 800451c:	2b01      	cmp	r3, #1
 800451e:	d001      	beq.n	8004524 <ConnectNetwork+0x4e>
		return SOCK_ERROR;
 8004520:	2300      	movs	r3, #0
 8004522:	e000      	b.n	8004526 <ConnectNetwork+0x50>

	return SOCK_OK;
 8004524:	2301      	movs	r3, #1
}
 8004526:	4618      	mov	r0, r3
 8004528:	3718      	adds	r7, #24
 800452a:	46bd      	mov	sp, r7
 800452c:	bd80      	pop	{r7, pc}

0800452e <MQTTSerialize_connectLength>:
  * Determines the length of the MQTT connect packet that would be produced using the supplied connect options.
  * @param options the options to be used to build the connect packet
  * @return the length of buffer needed to contain the serialized version of the packet
  */
int MQTTSerialize_connectLength(MQTTPacket_connectData* options)
{
 800452e:	b590      	push	{r4, r7, lr}
 8004530:	b085      	sub	sp, #20
 8004532:	af00      	add	r7, sp, #0
 8004534:	6078      	str	r0, [r7, #4]
	int len = 0;
 8004536:	2300      	movs	r3, #0
 8004538:	60fb      	str	r3, [r7, #12]

	FUNC_ENTRY;

	if (options->MQTTVersion == 3)
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	7a1b      	ldrb	r3, [r3, #8]
 800453e:	2b03      	cmp	r3, #3
 8004540:	d102      	bne.n	8004548 <MQTTSerialize_connectLength+0x1a>
		len = 12; /* variable depending on MQTT or MQIsdp */
 8004542:	230c      	movs	r3, #12
 8004544:	60fb      	str	r3, [r7, #12]
 8004546:	e005      	b.n	8004554 <MQTTSerialize_connectLength+0x26>
	else if (options->MQTTVersion == 4)
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	7a1b      	ldrb	r3, [r3, #8]
 800454c:	2b04      	cmp	r3, #4
 800454e:	d101      	bne.n	8004554 <MQTTSerialize_connectLength+0x26>
		len = 10;
 8004550:	230a      	movs	r3, #10
 8004552:	60fb      	str	r3, [r7, #12]

	len += MQTTstrlen(options->clientID)+2;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	330c      	adds	r3, #12
 8004558:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800455c:	f000 fc43 	bl	8004de6 <MQTTstrlen>
 8004560:	4603      	mov	r3, r0
 8004562:	3302      	adds	r3, #2
 8004564:	68fa      	ldr	r2, [r7, #12]
 8004566:	4413      	add	r3, r2
 8004568:	60fb      	str	r3, [r7, #12]
	if (options->willFlag)
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	7edb      	ldrb	r3, [r3, #27]
 800456e:	2b00      	cmp	r3, #0
 8004570:	d013      	beq.n	800459a <MQTTSerialize_connectLength+0x6c>
		len += MQTTstrlen(options->will.topicName)+2 + MQTTstrlen(options->will.message)+2;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	3324      	adds	r3, #36	@ 0x24
 8004576:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800457a:	f000 fc34 	bl	8004de6 <MQTTstrlen>
 800457e:	4603      	mov	r3, r0
 8004580:	1c9c      	adds	r4, r3, #2
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	3330      	adds	r3, #48	@ 0x30
 8004586:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800458a:	f000 fc2c 	bl	8004de6 <MQTTstrlen>
 800458e:	4603      	mov	r3, r0
 8004590:	4423      	add	r3, r4
 8004592:	3302      	adds	r3, #2
 8004594:	68fa      	ldr	r2, [r7, #12]
 8004596:	4413      	add	r3, r2
 8004598:	60fb      	str	r3, [r7, #12]
	if (options->username.cstring || options->username.lenstring.data)
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d103      	bne.n	80045aa <MQTTSerialize_connectLength+0x7c>
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d00a      	beq.n	80045c0 <MQTTSerialize_connectLength+0x92>
		len += MQTTstrlen(options->username)+2;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	3340      	adds	r3, #64	@ 0x40
 80045ae:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80045b2:	f000 fc18 	bl	8004de6 <MQTTstrlen>
 80045b6:	4603      	mov	r3, r0
 80045b8:	3302      	adds	r3, #2
 80045ba:	68fa      	ldr	r2, [r7, #12]
 80045bc:	4413      	add	r3, r2
 80045be:	60fb      	str	r3, [r7, #12]
	if (options->password.cstring || options->password.lenstring.data)
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d103      	bne.n	80045d0 <MQTTSerialize_connectLength+0xa2>
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d00a      	beq.n	80045e6 <MQTTSerialize_connectLength+0xb8>
		len += MQTTstrlen(options->password)+2;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	334c      	adds	r3, #76	@ 0x4c
 80045d4:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80045d8:	f000 fc05 	bl	8004de6 <MQTTstrlen>
 80045dc:	4603      	mov	r3, r0
 80045de:	3302      	adds	r3, #2
 80045e0:	68fa      	ldr	r2, [r7, #12]
 80045e2:	4413      	add	r3, r2
 80045e4:	60fb      	str	r3, [r7, #12]

	FUNC_EXIT_RC(len);
	return len;
 80045e6:	68fb      	ldr	r3, [r7, #12]
}
 80045e8:	4618      	mov	r0, r3
 80045ea:	3714      	adds	r7, #20
 80045ec:	46bd      	mov	sp, r7
 80045ee:	bd90      	pop	{r4, r7, pc}

080045f0 <MQTTSerialize_connect>:
  * @param len the length in bytes of the supplied buffer
  * @param options the options to be used to build the connect packet
  * @return serialized length, or error if 0
  */
int MQTTSerialize_connect(unsigned char* buf, int buflen, MQTTPacket_connectData* options)
{
 80045f0:	b580      	push	{r7, lr}
 80045f2:	b08a      	sub	sp, #40	@ 0x28
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	60f8      	str	r0, [r7, #12]
 80045f8:	60b9      	str	r1, [r7, #8]
 80045fa:	607a      	str	r2, [r7, #4]
	unsigned char *ptr = buf;
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	61fb      	str	r3, [r7, #28]
	MQTTHeader header = {0};
 8004600:	2300      	movs	r3, #0
 8004602:	61bb      	str	r3, [r7, #24]
	MQTTConnectFlags flags = {0};
 8004604:	2300      	movs	r3, #0
 8004606:	617b      	str	r3, [r7, #20]
	int len = 0;
 8004608:	2300      	movs	r3, #0
 800460a:	623b      	str	r3, [r7, #32]
	int rc = -1;
 800460c:	f04f 33ff 	mov.w	r3, #4294967295
 8004610:	627b      	str	r3, [r7, #36]	@ 0x24

	FUNC_ENTRY;
	if (MQTTPacket_len(len = MQTTSerialize_connectLength(options)) > buflen)
 8004612:	6878      	ldr	r0, [r7, #4]
 8004614:	f7ff ff8b 	bl	800452e <MQTTSerialize_connectLength>
 8004618:	6238      	str	r0, [r7, #32]
 800461a:	6a38      	ldr	r0, [r7, #32]
 800461c:	f000 fa98 	bl	8004b50 <MQTTPacket_len>
 8004620:	4602      	mov	r2, r0
 8004622:	68bb      	ldr	r3, [r7, #8]
 8004624:	4293      	cmp	r3, r2
 8004626:	da03      	bge.n	8004630 <MQTTSerialize_connect+0x40>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
 8004628:	f06f 0301 	mvn.w	r3, #1
 800462c:	627b      	str	r3, [r7, #36]	@ 0x24
		goto exit;
 800462e:	e0c2      	b.n	80047b6 <MQTTSerialize_connect+0x1c6>
	}

	header.byte = 0;
 8004630:	2300      	movs	r3, #0
 8004632:	763b      	strb	r3, [r7, #24]
	header.bits.type = CONNECT;
 8004634:	7e3b      	ldrb	r3, [r7, #24]
 8004636:	2201      	movs	r2, #1
 8004638:	f362 1307 	bfi	r3, r2, #4, #4
 800463c:	763b      	strb	r3, [r7, #24]
	writeChar(&ptr, header.byte); /* write header */
 800463e:	7e3a      	ldrb	r2, [r7, #24]
 8004640:	f107 031c 	add.w	r3, r7, #28
 8004644:	4611      	mov	r1, r2
 8004646:	4618      	mov	r0, r3
 8004648:	f000 fb11 	bl	8004c6e <writeChar>

	ptr += MQTTPacket_encode(ptr, len); /* write remaining length */
 800464c:	69fb      	ldr	r3, [r7, #28]
 800464e:	6a39      	ldr	r1, [r7, #32]
 8004650:	4618      	mov	r0, r3
 8004652:	f000 fa12 	bl	8004a7a <MQTTPacket_encode>
 8004656:	4602      	mov	r2, r0
 8004658:	69fb      	ldr	r3, [r7, #28]
 800465a:	4413      	add	r3, r2
 800465c:	61fb      	str	r3, [r7, #28]

	if (options->MQTTVersion == 4)
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	7a1b      	ldrb	r3, [r3, #8]
 8004662:	2b04      	cmp	r3, #4
 8004664:	d10c      	bne.n	8004680 <MQTTSerialize_connect+0x90>
	{
		writeCString(&ptr, "MQTT");
 8004666:	f107 031c 	add.w	r3, r7, #28
 800466a:	4955      	ldr	r1, [pc, #340]	@ (80047c0 <MQTTSerialize_connect+0x1d0>)
 800466c:	4618      	mov	r0, r3
 800466e:	f000 fb3c 	bl	8004cea <writeCString>
		writeChar(&ptr, (char) 4);
 8004672:	f107 031c 	add.w	r3, r7, #28
 8004676:	2104      	movs	r1, #4
 8004678:	4618      	mov	r0, r3
 800467a:	f000 faf8 	bl	8004c6e <writeChar>
 800467e:	e00b      	b.n	8004698 <MQTTSerialize_connect+0xa8>
	}
	else
	{
		writeCString(&ptr, "MQIsdp");
 8004680:	f107 031c 	add.w	r3, r7, #28
 8004684:	494f      	ldr	r1, [pc, #316]	@ (80047c4 <MQTTSerialize_connect+0x1d4>)
 8004686:	4618      	mov	r0, r3
 8004688:	f000 fb2f 	bl	8004cea <writeCString>
		writeChar(&ptr, (char) 3);
 800468c:	f107 031c 	add.w	r3, r7, #28
 8004690:	2103      	movs	r1, #3
 8004692:	4618      	mov	r0, r3
 8004694:	f000 faeb 	bl	8004c6e <writeChar>
	}

	flags.all = 0;
 8004698:	2300      	movs	r3, #0
 800469a:	753b      	strb	r3, [r7, #20]
	flags.bits.cleansession = options->cleansession;
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	7e9b      	ldrb	r3, [r3, #26]
 80046a0:	f003 0301 	and.w	r3, r3, #1
 80046a4:	b2da      	uxtb	r2, r3
 80046a6:	7d3b      	ldrb	r3, [r7, #20]
 80046a8:	f362 0341 	bfi	r3, r2, #1, #1
 80046ac:	753b      	strb	r3, [r7, #20]
	flags.bits.will = (options->willFlag) ? 1 : 0;
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	7edb      	ldrb	r3, [r3, #27]
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	bf14      	ite	ne
 80046b6:	2301      	movne	r3, #1
 80046b8:	2300      	moveq	r3, #0
 80046ba:	b2da      	uxtb	r2, r3
 80046bc:	7d3b      	ldrb	r3, [r7, #20]
 80046be:	f362 0382 	bfi	r3, r2, #2, #1
 80046c2:	753b      	strb	r3, [r7, #20]
	if (flags.bits.will)
 80046c4:	7d3b      	ldrb	r3, [r7, #20]
 80046c6:	f003 0304 	and.w	r3, r3, #4
 80046ca:	b2db      	uxtb	r3, r3
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d013      	beq.n	80046f8 <MQTTSerialize_connect+0x108>
	{
		flags.bits.willQoS = options->will.qos;
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80046d6:	f003 0303 	and.w	r3, r3, #3
 80046da:	b2da      	uxtb	r2, r3
 80046dc:	7d3b      	ldrb	r3, [r7, #20]
 80046de:	f362 03c4 	bfi	r3, r2, #3, #2
 80046e2:	753b      	strb	r3, [r7, #20]
		flags.bits.willRetain = options->will.retained;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80046ea:	f003 0301 	and.w	r3, r3, #1
 80046ee:	b2da      	uxtb	r2, r3
 80046f0:	7d3b      	ldrb	r3, [r7, #20]
 80046f2:	f362 1345 	bfi	r3, r2, #5, #1
 80046f6:	753b      	strb	r3, [r7, #20]
	}

	if (options->username.cstring || options->username.lenstring.data)
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d103      	bne.n	8004708 <MQTTSerialize_connect+0x118>
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004704:	2b00      	cmp	r3, #0
 8004706:	d003      	beq.n	8004710 <MQTTSerialize_connect+0x120>
		flags.bits.username = 1;
 8004708:	7d3b      	ldrb	r3, [r7, #20]
 800470a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800470e:	753b      	strb	r3, [r7, #20]
	if (options->password.cstring || options->password.lenstring.data)
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004714:	2b00      	cmp	r3, #0
 8004716:	d103      	bne.n	8004720 <MQTTSerialize_connect+0x130>
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800471c:	2b00      	cmp	r3, #0
 800471e:	d003      	beq.n	8004728 <MQTTSerialize_connect+0x138>
		flags.bits.password = 1;
 8004720:	7d3b      	ldrb	r3, [r7, #20]
 8004722:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004726:	753b      	strb	r3, [r7, #20]

	writeChar(&ptr, flags.all);
 8004728:	7d3a      	ldrb	r2, [r7, #20]
 800472a:	f107 031c 	add.w	r3, r7, #28
 800472e:	4611      	mov	r1, r2
 8004730:	4618      	mov	r0, r3
 8004732:	f000 fa9c 	bl	8004c6e <writeChar>
	writeInt(&ptr, options->keepAliveInterval);
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	8b1b      	ldrh	r3, [r3, #24]
 800473a:	461a      	mov	r2, r3
 800473c:	f107 031c 	add.w	r3, r7, #28
 8004740:	4611      	mov	r1, r2
 8004742:	4618      	mov	r0, r3
 8004744:	f000 faa8 	bl	8004c98 <writeInt>
	writeMQTTString(&ptr, options->clientID);
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	f107 001c 	add.w	r0, r7, #28
 800474e:	330c      	adds	r3, #12
 8004750:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004752:	f000 fae9 	bl	8004d28 <writeMQTTString>
	if (options->willFlag)
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	7edb      	ldrb	r3, [r3, #27]
 800475a:	2b00      	cmp	r3, #0
 800475c:	d00d      	beq.n	800477a <MQTTSerialize_connect+0x18a>
	{
		writeMQTTString(&ptr, options->will.topicName);
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	f107 001c 	add.w	r0, r7, #28
 8004764:	3324      	adds	r3, #36	@ 0x24
 8004766:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004768:	f000 fade 	bl	8004d28 <writeMQTTString>
		writeMQTTString(&ptr, options->will.message);
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	f107 001c 	add.w	r0, r7, #28
 8004772:	3330      	adds	r3, #48	@ 0x30
 8004774:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004776:	f000 fad7 	bl	8004d28 <writeMQTTString>
	}
	if (flags.bits.username)
 800477a:	7d3b      	ldrb	r3, [r7, #20]
 800477c:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8004780:	b2db      	uxtb	r3, r3
 8004782:	2b00      	cmp	r3, #0
 8004784:	d006      	beq.n	8004794 <MQTTSerialize_connect+0x1a4>
		writeMQTTString(&ptr, options->username);
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	f107 001c 	add.w	r0, r7, #28
 800478c:	3340      	adds	r3, #64	@ 0x40
 800478e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004790:	f000 faca 	bl	8004d28 <writeMQTTString>
	if (flags.bits.password)
 8004794:	7d3b      	ldrb	r3, [r7, #20]
 8004796:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800479a:	b2db      	uxtb	r3, r3
 800479c:	2b00      	cmp	r3, #0
 800479e:	d006      	beq.n	80047ae <MQTTSerialize_connect+0x1be>
		writeMQTTString(&ptr, options->password);
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	f107 001c 	add.w	r0, r7, #28
 80047a6:	334c      	adds	r3, #76	@ 0x4c
 80047a8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80047aa:	f000 fabd 	bl	8004d28 <writeMQTTString>

	rc = ptr - buf;
 80047ae:	69fa      	ldr	r2, [r7, #28]
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	1ad3      	subs	r3, r2, r3
 80047b4:	627b      	str	r3, [r7, #36]	@ 0x24

	exit: FUNC_EXIT_RC(rc);
	return rc;
 80047b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80047b8:	4618      	mov	r0, r3
 80047ba:	3728      	adds	r7, #40	@ 0x28
 80047bc:	46bd      	mov	sp, r7
 80047be:	bd80      	pop	{r7, pc}
 80047c0:	0800d8e0 	.word	0x0800d8e0
 80047c4:	0800d8e8 	.word	0x0800d8e8

080047c8 <MQTTDeserialize_connack>:
  * @param buf the raw buffer data, of the correct length determined by the remaining length field
  * @param len the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success, 0 is failure
  */
int MQTTDeserialize_connack(unsigned char* sessionPresent, unsigned char* connack_rc, unsigned char* buf, int buflen)
{
 80047c8:	b580      	push	{r7, lr}
 80047ca:	b08a      	sub	sp, #40	@ 0x28
 80047cc:	af00      	add	r7, sp, #0
 80047ce:	60f8      	str	r0, [r7, #12]
 80047d0:	60b9      	str	r1, [r7, #8]
 80047d2:	607a      	str	r2, [r7, #4]
 80047d4:	603b      	str	r3, [r7, #0]
	MQTTHeader header = {0};
 80047d6:	2300      	movs	r3, #0
 80047d8:	61fb      	str	r3, [r7, #28]
	unsigned char* curdata = buf;
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	61bb      	str	r3, [r7, #24]
	unsigned char* enddata = NULL;
 80047de:	2300      	movs	r3, #0
 80047e0:	623b      	str	r3, [r7, #32]
	int rc = 0;
 80047e2:	2300      	movs	r3, #0
 80047e4:	627b      	str	r3, [r7, #36]	@ 0x24
	int mylen;
	MQTTConnackFlags flags = {0};
 80047e6:	2300      	movs	r3, #0
 80047e8:	613b      	str	r3, [r7, #16]

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
 80047ea:	f107 0318 	add.w	r3, r7, #24
 80047ee:	4618      	mov	r0, r3
 80047f0:	f000 fa29 	bl	8004c46 <readChar>
 80047f4:	4603      	mov	r3, r0
 80047f6:	773b      	strb	r3, [r7, #28]
	if (header.bits.type != CONNACK)
 80047f8:	7f3b      	ldrb	r3, [r7, #28]
 80047fa:	f023 030f 	bic.w	r3, r3, #15
 80047fe:	b2db      	uxtb	r3, r3
 8004800:	2b20      	cmp	r3, #32
 8004802:	d12e      	bne.n	8004862 <MQTTDeserialize_connack+0x9a>
		goto exit;

	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
 8004804:	69bb      	ldr	r3, [r7, #24]
 8004806:	f107 0214 	add.w	r2, r7, #20
 800480a:	4611      	mov	r1, r2
 800480c:	4618      	mov	r0, r3
 800480e:	f000 f9e9 	bl	8004be4 <MQTTPacket_decodeBuf>
 8004812:	6278      	str	r0, [r7, #36]	@ 0x24
 8004814:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004816:	69bb      	ldr	r3, [r7, #24]
 8004818:	4413      	add	r3, r2
 800481a:	61bb      	str	r3, [r7, #24]
	enddata = curdata + mylen;
 800481c:	69bb      	ldr	r3, [r7, #24]
 800481e:	697a      	ldr	r2, [r7, #20]
 8004820:	4413      	add	r3, r2
 8004822:	623b      	str	r3, [r7, #32]
	if (enddata - curdata < 2)
 8004824:	69bb      	ldr	r3, [r7, #24]
 8004826:	6a3a      	ldr	r2, [r7, #32]
 8004828:	1ad3      	subs	r3, r2, r3
 800482a:	2b01      	cmp	r3, #1
 800482c:	dd1b      	ble.n	8004866 <MQTTDeserialize_connack+0x9e>
		goto exit;

	flags.all = readChar(&curdata);
 800482e:	f107 0318 	add.w	r3, r7, #24
 8004832:	4618      	mov	r0, r3
 8004834:	f000 fa07 	bl	8004c46 <readChar>
 8004838:	4603      	mov	r3, r0
 800483a:	743b      	strb	r3, [r7, #16]
	*sessionPresent = flags.bits.sessionpresent;
 800483c:	7c3b      	ldrb	r3, [r7, #16]
 800483e:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8004842:	b2db      	uxtb	r3, r3
 8004844:	461a      	mov	r2, r3
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	701a      	strb	r2, [r3, #0]
	*connack_rc = readChar(&curdata);
 800484a:	f107 0318 	add.w	r3, r7, #24
 800484e:	4618      	mov	r0, r3
 8004850:	f000 f9f9 	bl	8004c46 <readChar>
 8004854:	4603      	mov	r3, r0
 8004856:	461a      	mov	r2, r3
 8004858:	68bb      	ldr	r3, [r7, #8]
 800485a:	701a      	strb	r2, [r3, #0]

	rc = 1;
 800485c:	2301      	movs	r3, #1
 800485e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004860:	e002      	b.n	8004868 <MQTTDeserialize_connack+0xa0>
		goto exit;
 8004862:	bf00      	nop
 8004864:	e000      	b.n	8004868 <MQTTDeserialize_connack+0xa0>
		goto exit;
 8004866:	bf00      	nop
exit:
	FUNC_EXIT_RC(rc);
	return rc;
 8004868:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800486a:	4618      	mov	r0, r3
 800486c:	3728      	adds	r7, #40	@ 0x28
 800486e:	46bd      	mov	sp, r7
 8004870:	bd80      	pop	{r7, pc}

08004872 <MQTTSerialize_zero>:
  * @param buflen the length in bytes of the supplied buffer, to avoid overruns
  * @param packettype the message type
  * @return serialized length, or error if 0
  */
int MQTTSerialize_zero(unsigned char* buf, int buflen, unsigned char packettype)
{
 8004872:	b580      	push	{r7, lr}
 8004874:	b088      	sub	sp, #32
 8004876:	af00      	add	r7, sp, #0
 8004878:	60f8      	str	r0, [r7, #12]
 800487a:	60b9      	str	r1, [r7, #8]
 800487c:	4613      	mov	r3, r2
 800487e:	71fb      	strb	r3, [r7, #7]
	MQTTHeader header = {0};
 8004880:	2300      	movs	r3, #0
 8004882:	61bb      	str	r3, [r7, #24]
	int rc = -1;
 8004884:	f04f 33ff 	mov.w	r3, #4294967295
 8004888:	61fb      	str	r3, [r7, #28]
	unsigned char *ptr = buf;
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	617b      	str	r3, [r7, #20]

	FUNC_ENTRY;
	if (buflen < 2)
 800488e:	68bb      	ldr	r3, [r7, #8]
 8004890:	2b01      	cmp	r3, #1
 8004892:	dc03      	bgt.n	800489c <MQTTSerialize_zero+0x2a>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
 8004894:	f06f 0301 	mvn.w	r3, #1
 8004898:	61fb      	str	r3, [r7, #28]
		goto exit;
 800489a:	e01d      	b.n	80048d8 <MQTTSerialize_zero+0x66>
	}
	header.byte = 0;
 800489c:	2300      	movs	r3, #0
 800489e:	763b      	strb	r3, [r7, #24]
	header.bits.type = packettype;
 80048a0:	79fb      	ldrb	r3, [r7, #7]
 80048a2:	f003 030f 	and.w	r3, r3, #15
 80048a6:	b2da      	uxtb	r2, r3
 80048a8:	7e3b      	ldrb	r3, [r7, #24]
 80048aa:	f362 1307 	bfi	r3, r2, #4, #4
 80048ae:	763b      	strb	r3, [r7, #24]
	writeChar(&ptr, header.byte); /* write header */
 80048b0:	7e3a      	ldrb	r2, [r7, #24]
 80048b2:	f107 0314 	add.w	r3, r7, #20
 80048b6:	4611      	mov	r1, r2
 80048b8:	4618      	mov	r0, r3
 80048ba:	f000 f9d8 	bl	8004c6e <writeChar>

	ptr += MQTTPacket_encode(ptr, 0); /* write remaining length */
 80048be:	697b      	ldr	r3, [r7, #20]
 80048c0:	2100      	movs	r1, #0
 80048c2:	4618      	mov	r0, r3
 80048c4:	f000 f8d9 	bl	8004a7a <MQTTPacket_encode>
 80048c8:	4602      	mov	r2, r0
 80048ca:	697b      	ldr	r3, [r7, #20]
 80048cc:	4413      	add	r3, r2
 80048ce:	617b      	str	r3, [r7, #20]
	rc = ptr - buf;
 80048d0:	697a      	ldr	r2, [r7, #20]
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	1ad3      	subs	r3, r2, r3
 80048d6:	61fb      	str	r3, [r7, #28]
exit:
	FUNC_EXIT_RC(rc);
	return rc;
 80048d8:	69fb      	ldr	r3, [r7, #28]
}
 80048da:	4618      	mov	r0, r3
 80048dc:	3720      	adds	r7, #32
 80048de:	46bd      	mov	sp, r7
 80048e0:	bd80      	pop	{r7, pc}

080048e2 <MQTTSerialize_pingreq>:
  * @param buf the buffer into which the packet will be serialized
  * @param buflen the length in bytes of the supplied buffer, to avoid overruns
  * @return serialized length, or error if 0
  */
int MQTTSerialize_pingreq(unsigned char* buf, int buflen)
{
 80048e2:	b580      	push	{r7, lr}
 80048e4:	b082      	sub	sp, #8
 80048e6:	af00      	add	r7, sp, #0
 80048e8:	6078      	str	r0, [r7, #4]
 80048ea:	6039      	str	r1, [r7, #0]
	return MQTTSerialize_zero(buf, buflen, PINGREQ);
 80048ec:	220c      	movs	r2, #12
 80048ee:	6839      	ldr	r1, [r7, #0]
 80048f0:	6878      	ldr	r0, [r7, #4]
 80048f2:	f7ff ffbe 	bl	8004872 <MQTTSerialize_zero>
 80048f6:	4603      	mov	r3, r0
}
 80048f8:	4618      	mov	r0, r3
 80048fa:	3708      	adds	r7, #8
 80048fc:	46bd      	mov	sp, r7
 80048fe:	bd80      	pop	{r7, pc}

08004900 <MQTTDeserialize_publish>:
  * @param buflen the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success
  */
int MQTTDeserialize_publish(unsigned char* dup, int* qos, unsigned char* retained, unsigned short* packetid, MQTTString* topicName,
		unsigned char** payload, int* payloadlen, unsigned char* buf, int buflen)
{
 8004900:	b580      	push	{r7, lr}
 8004902:	b08a      	sub	sp, #40	@ 0x28
 8004904:	af00      	add	r7, sp, #0
 8004906:	60f8      	str	r0, [r7, #12]
 8004908:	60b9      	str	r1, [r7, #8]
 800490a:	607a      	str	r2, [r7, #4]
 800490c:	603b      	str	r3, [r7, #0]
	MQTTHeader header = {0};
 800490e:	2300      	movs	r3, #0
 8004910:	61fb      	str	r3, [r7, #28]
	unsigned char* curdata = buf;
 8004912:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004914:	61bb      	str	r3, [r7, #24]
	unsigned char* enddata = NULL;
 8004916:	2300      	movs	r3, #0
 8004918:	623b      	str	r3, [r7, #32]
	int rc = 0;
 800491a:	2300      	movs	r3, #0
 800491c:	627b      	str	r3, [r7, #36]	@ 0x24
	int mylen = 0;
 800491e:	2300      	movs	r3, #0
 8004920:	617b      	str	r3, [r7, #20]

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
 8004922:	f107 0318 	add.w	r3, r7, #24
 8004926:	4618      	mov	r0, r3
 8004928:	f000 f98d 	bl	8004c46 <readChar>
 800492c:	4603      	mov	r3, r0
 800492e:	773b      	strb	r3, [r7, #28]
	if (header.bits.type != PUBLISH)
 8004930:	7f3b      	ldrb	r3, [r7, #28]
 8004932:	f023 030f 	bic.w	r3, r3, #15
 8004936:	b2db      	uxtb	r3, r3
 8004938:	2b30      	cmp	r3, #48	@ 0x30
 800493a:	d14b      	bne.n	80049d4 <MQTTDeserialize_publish+0xd4>
		goto exit;
	*dup = header.bits.dup;
 800493c:	7f3b      	ldrb	r3, [r7, #28]
 800493e:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8004942:	b2db      	uxtb	r3, r3
 8004944:	461a      	mov	r2, r3
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	701a      	strb	r2, [r3, #0]
	*qos = header.bits.qos;
 800494a:	7f3b      	ldrb	r3, [r7, #28]
 800494c:	f3c3 0341 	ubfx	r3, r3, #1, #2
 8004950:	b2db      	uxtb	r3, r3
 8004952:	461a      	mov	r2, r3
 8004954:	68bb      	ldr	r3, [r7, #8]
 8004956:	601a      	str	r2, [r3, #0]
	*retained = header.bits.retain;
 8004958:	7f3b      	ldrb	r3, [r7, #28]
 800495a:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800495e:	b2db      	uxtb	r3, r3
 8004960:	461a      	mov	r2, r3
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	701a      	strb	r2, [r3, #0]

	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
 8004966:	69bb      	ldr	r3, [r7, #24]
 8004968:	f107 0214 	add.w	r2, r7, #20
 800496c:	4611      	mov	r1, r2
 800496e:	4618      	mov	r0, r3
 8004970:	f000 f938 	bl	8004be4 <MQTTPacket_decodeBuf>
 8004974:	6278      	str	r0, [r7, #36]	@ 0x24
 8004976:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004978:	69bb      	ldr	r3, [r7, #24]
 800497a:	4413      	add	r3, r2
 800497c:	61bb      	str	r3, [r7, #24]
	enddata = curdata + mylen;
 800497e:	69bb      	ldr	r3, [r7, #24]
 8004980:	697a      	ldr	r2, [r7, #20]
 8004982:	4413      	add	r3, r2
 8004984:	623b      	str	r3, [r7, #32]

	if (!readMQTTLenString(topicName, &curdata, enddata) ||
 8004986:	f107 0318 	add.w	r3, r7, #24
 800498a:	6a3a      	ldr	r2, [r7, #32]
 800498c:	4619      	mov	r1, r3
 800498e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004990:	f000 f9f8 	bl	8004d84 <readMQTTLenString>
 8004994:	4603      	mov	r3, r0
 8004996:	2b00      	cmp	r3, #0
 8004998:	d01e      	beq.n	80049d8 <MQTTDeserialize_publish+0xd8>
		enddata - curdata < 0) /* do we have enough data to read the protocol version byte? */
 800499a:	69bb      	ldr	r3, [r7, #24]
 800499c:	6a3a      	ldr	r2, [r7, #32]
 800499e:	1ad3      	subs	r3, r2, r3
	if (!readMQTTLenString(topicName, &curdata, enddata) ||
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	db19      	blt.n	80049d8 <MQTTDeserialize_publish+0xd8>
		goto exit;

	if (*qos > 0)
 80049a4:	68bb      	ldr	r3, [r7, #8]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	dd08      	ble.n	80049be <MQTTDeserialize_publish+0xbe>
		*packetid = readInt(&curdata);
 80049ac:	f107 0318 	add.w	r3, r7, #24
 80049b0:	4618      	mov	r0, r3
 80049b2:	f000 f92d 	bl	8004c10 <readInt>
 80049b6:	4603      	mov	r3, r0
 80049b8:	b29a      	uxth	r2, r3
 80049ba:	683b      	ldr	r3, [r7, #0]
 80049bc:	801a      	strh	r2, [r3, #0]

	*payloadlen = enddata - curdata;
 80049be:	69bb      	ldr	r3, [r7, #24]
 80049c0:	6a3a      	ldr	r2, [r7, #32]
 80049c2:	1ad2      	subs	r2, r2, r3
 80049c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80049c6:	601a      	str	r2, [r3, #0]
	*payload = curdata;
 80049c8:	69ba      	ldr	r2, [r7, #24]
 80049ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80049cc:	601a      	str	r2, [r3, #0]
	rc = 1;
 80049ce:	2301      	movs	r3, #1
 80049d0:	627b      	str	r3, [r7, #36]	@ 0x24
 80049d2:	e002      	b.n	80049da <MQTTDeserialize_publish+0xda>
		goto exit;
 80049d4:	bf00      	nop
 80049d6:	e000      	b.n	80049da <MQTTDeserialize_publish+0xda>
		goto exit;
 80049d8:	bf00      	nop
exit:
	FUNC_EXIT_RC(rc);
	return rc;
 80049da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80049dc:	4618      	mov	r0, r3
 80049de:	3728      	adds	r7, #40	@ 0x28
 80049e0:	46bd      	mov	sp, r7
 80049e2:	bd80      	pop	{r7, pc}

080049e4 <MQTTDeserialize_ack>:
  * @param buf the raw buffer data, of the correct length determined by the remaining length field
  * @param buflen the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success, 0 is failure
  */
int MQTTDeserialize_ack(unsigned char* packettype, unsigned char* dup, unsigned short* packetid, unsigned char* buf, int buflen)
{
 80049e4:	b580      	push	{r7, lr}
 80049e6:	b08a      	sub	sp, #40	@ 0x28
 80049e8:	af00      	add	r7, sp, #0
 80049ea:	60f8      	str	r0, [r7, #12]
 80049ec:	60b9      	str	r1, [r7, #8]
 80049ee:	607a      	str	r2, [r7, #4]
 80049f0:	603b      	str	r3, [r7, #0]
	MQTTHeader header = {0};
 80049f2:	2300      	movs	r3, #0
 80049f4:	61fb      	str	r3, [r7, #28]
	unsigned char* curdata = buf;
 80049f6:	683b      	ldr	r3, [r7, #0]
 80049f8:	61bb      	str	r3, [r7, #24]
	unsigned char* enddata = NULL;
 80049fa:	2300      	movs	r3, #0
 80049fc:	623b      	str	r3, [r7, #32]
	int rc = 0;
 80049fe:	2300      	movs	r3, #0
 8004a00:	627b      	str	r3, [r7, #36]	@ 0x24
	int mylen;

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
 8004a02:	f107 0318 	add.w	r3, r7, #24
 8004a06:	4618      	mov	r0, r3
 8004a08:	f000 f91d 	bl	8004c46 <readChar>
 8004a0c:	4603      	mov	r3, r0
 8004a0e:	773b      	strb	r3, [r7, #28]
	*dup = header.bits.dup;
 8004a10:	7f3b      	ldrb	r3, [r7, #28]
 8004a12:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8004a16:	b2db      	uxtb	r3, r3
 8004a18:	461a      	mov	r2, r3
 8004a1a:	68bb      	ldr	r3, [r7, #8]
 8004a1c:	701a      	strb	r2, [r3, #0]
	*packettype = header.bits.type;
 8004a1e:	7f3b      	ldrb	r3, [r7, #28]
 8004a20:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8004a24:	b2db      	uxtb	r3, r3
 8004a26:	461a      	mov	r2, r3
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	701a      	strb	r2, [r3, #0]

	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
 8004a2c:	69bb      	ldr	r3, [r7, #24]
 8004a2e:	f107 0214 	add.w	r2, r7, #20
 8004a32:	4611      	mov	r1, r2
 8004a34:	4618      	mov	r0, r3
 8004a36:	f000 f8d5 	bl	8004be4 <MQTTPacket_decodeBuf>
 8004a3a:	6278      	str	r0, [r7, #36]	@ 0x24
 8004a3c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004a3e:	69bb      	ldr	r3, [r7, #24]
 8004a40:	4413      	add	r3, r2
 8004a42:	61bb      	str	r3, [r7, #24]
	enddata = curdata + mylen;
 8004a44:	69bb      	ldr	r3, [r7, #24]
 8004a46:	697a      	ldr	r2, [r7, #20]
 8004a48:	4413      	add	r3, r2
 8004a4a:	623b      	str	r3, [r7, #32]

	if (enddata - curdata < 2)
 8004a4c:	69bb      	ldr	r3, [r7, #24]
 8004a4e:	6a3a      	ldr	r2, [r7, #32]
 8004a50:	1ad3      	subs	r3, r2, r3
 8004a52:	2b01      	cmp	r3, #1
 8004a54:	dd0b      	ble.n	8004a6e <MQTTDeserialize_ack+0x8a>
		goto exit;
	*packetid = readInt(&curdata);
 8004a56:	f107 0318 	add.w	r3, r7, #24
 8004a5a:	4618      	mov	r0, r3
 8004a5c:	f000 f8d8 	bl	8004c10 <readInt>
 8004a60:	4603      	mov	r3, r0
 8004a62:	b29a      	uxth	r2, r3
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	801a      	strh	r2, [r3, #0]

	rc = 1;
 8004a68:	2301      	movs	r3, #1
 8004a6a:	627b      	str	r3, [r7, #36]	@ 0x24
 8004a6c:	e000      	b.n	8004a70 <MQTTDeserialize_ack+0x8c>
		goto exit;
 8004a6e:	bf00      	nop
exit:
	FUNC_EXIT_RC(rc);
	return rc;
 8004a70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8004a72:	4618      	mov	r0, r3
 8004a74:	3728      	adds	r7, #40	@ 0x28
 8004a76:	46bd      	mov	sp, r7
 8004a78:	bd80      	pop	{r7, pc}

08004a7a <MQTTPacket_encode>:
 * @param buf the buffer into which the encoded data is written
 * @param length the length to be encoded
 * @return the number of bytes written to buffer
 */
int MQTTPacket_encode(unsigned char* buf, int length)
{
 8004a7a:	b480      	push	{r7}
 8004a7c:	b085      	sub	sp, #20
 8004a7e:	af00      	add	r7, sp, #0
 8004a80:	6078      	str	r0, [r7, #4]
 8004a82:	6039      	str	r1, [r7, #0]
	int rc = 0;
 8004a84:	2300      	movs	r3, #0
 8004a86:	60fb      	str	r3, [r7, #12]

	FUNC_ENTRY;
	do
	{
		char d = length % 128;
 8004a88:	683b      	ldr	r3, [r7, #0]
 8004a8a:	425a      	negs	r2, r3
 8004a8c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004a90:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004a94:	bf58      	it	pl
 8004a96:	4253      	negpl	r3, r2
 8004a98:	72fb      	strb	r3, [r7, #11]
		length /= 128;
 8004a9a:	683b      	ldr	r3, [r7, #0]
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	da00      	bge.n	8004aa2 <MQTTPacket_encode+0x28>
 8004aa0:	337f      	adds	r3, #127	@ 0x7f
 8004aa2:	11db      	asrs	r3, r3, #7
 8004aa4:	603b      	str	r3, [r7, #0]
		/* if there are more digits to encode, set the top bit of this digit */
		if (length > 0)
 8004aa6:	683b      	ldr	r3, [r7, #0]
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	dd03      	ble.n	8004ab4 <MQTTPacket_encode+0x3a>
			d |= 0x80;
 8004aac:	7afb      	ldrb	r3, [r7, #11]
 8004aae:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004ab2:	72fb      	strb	r3, [r7, #11]
		buf[rc++] = d;
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	1c5a      	adds	r2, r3, #1
 8004ab8:	60fa      	str	r2, [r7, #12]
 8004aba:	461a      	mov	r2, r3
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	4413      	add	r3, r2
 8004ac0:	7afa      	ldrb	r2, [r7, #11]
 8004ac2:	701a      	strb	r2, [r3, #0]
	} while (length > 0);
 8004ac4:	683b      	ldr	r3, [r7, #0]
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	dcde      	bgt.n	8004a88 <MQTTPacket_encode+0xe>
	FUNC_EXIT_RC(rc);
	return rc;
 8004aca:	68fb      	ldr	r3, [r7, #12]
}
 8004acc:	4618      	mov	r0, r3
 8004ace:	3714      	adds	r7, #20
 8004ad0:	46bd      	mov	sp, r7
 8004ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad6:	4770      	bx	lr

08004ad8 <MQTTPacket_decode>:
 * @param getcharfn pointer to function to read the next character from the data source
 * @param value the decoded length returned
 * @return the number of bytes read from the socket
 */
int MQTTPacket_decode(int (*getcharfn)(unsigned char*, int), int* value)
{
 8004ad8:	b580      	push	{r7, lr}
 8004ada:	b086      	sub	sp, #24
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	6078      	str	r0, [r7, #4]
 8004ae0:	6039      	str	r1, [r7, #0]
	unsigned char c;
	int multiplier = 1;
 8004ae2:	2301      	movs	r3, #1
 8004ae4:	617b      	str	r3, [r7, #20]
	int len = 0;
 8004ae6:	2300      	movs	r3, #0
 8004ae8:	613b      	str	r3, [r7, #16]
#define MAX_NO_OF_REMAINING_LENGTH_BYTES 4

	FUNC_ENTRY;
	*value = 0;
 8004aea:	683b      	ldr	r3, [r7, #0]
 8004aec:	2200      	movs	r2, #0
 8004aee:	601a      	str	r2, [r3, #0]
	do
	{
		int rc = MQTTPACKET_READ_ERROR;
 8004af0:	f04f 33ff 	mov.w	r3, #4294967295
 8004af4:	60fb      	str	r3, [r7, #12]

		if (++len > MAX_NO_OF_REMAINING_LENGTH_BYTES)
 8004af6:	693b      	ldr	r3, [r7, #16]
 8004af8:	3301      	adds	r3, #1
 8004afa:	613b      	str	r3, [r7, #16]
 8004afc:	693b      	ldr	r3, [r7, #16]
 8004afe:	2b04      	cmp	r3, #4
 8004b00:	dd03      	ble.n	8004b0a <MQTTPacket_decode+0x32>
		{
			rc = MQTTPACKET_READ_ERROR;	/* bad data */
 8004b02:	f04f 33ff 	mov.w	r3, #4294967295
 8004b06:	60fb      	str	r3, [r7, #12]
			goto exit;
 8004b08:	e01d      	b.n	8004b46 <MQTTPacket_decode+0x6e>
		}
		rc = (*getcharfn)(&c, 1);
 8004b0a:	f107 020b 	add.w	r2, r7, #11
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	2101      	movs	r1, #1
 8004b12:	4610      	mov	r0, r2
 8004b14:	4798      	blx	r3
 8004b16:	60f8      	str	r0, [r7, #12]
		if (rc != 1)
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	2b01      	cmp	r3, #1
 8004b1c:	d112      	bne.n	8004b44 <MQTTPacket_decode+0x6c>
			goto exit;
		*value += (c & 127) * multiplier;
 8004b1e:	683b      	ldr	r3, [r7, #0]
 8004b20:	681a      	ldr	r2, [r3, #0]
 8004b22:	7afb      	ldrb	r3, [r7, #11]
 8004b24:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004b28:	6979      	ldr	r1, [r7, #20]
 8004b2a:	fb01 f303 	mul.w	r3, r1, r3
 8004b2e:	441a      	add	r2, r3
 8004b30:	683b      	ldr	r3, [r7, #0]
 8004b32:	601a      	str	r2, [r3, #0]
		multiplier *= 128;
 8004b34:	697b      	ldr	r3, [r7, #20]
 8004b36:	01db      	lsls	r3, r3, #7
 8004b38:	617b      	str	r3, [r7, #20]
	} while ((c & 128) != 0);
 8004b3a:	7afb      	ldrb	r3, [r7, #11]
 8004b3c:	b25b      	sxtb	r3, r3
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	dbd6      	blt.n	8004af0 <MQTTPacket_decode+0x18>
exit:
 8004b42:	e000      	b.n	8004b46 <MQTTPacket_decode+0x6e>
			goto exit;
 8004b44:	bf00      	nop
	FUNC_EXIT_RC(len);
	return len;
 8004b46:	693b      	ldr	r3, [r7, #16]
}
 8004b48:	4618      	mov	r0, r3
 8004b4a:	3718      	adds	r7, #24
 8004b4c:	46bd      	mov	sp, r7
 8004b4e:	bd80      	pop	{r7, pc}

08004b50 <MQTTPacket_len>:


int MQTTPacket_len(int rem_len)
{
 8004b50:	b480      	push	{r7}
 8004b52:	b083      	sub	sp, #12
 8004b54:	af00      	add	r7, sp, #0
 8004b56:	6078      	str	r0, [r7, #4]
	rem_len += 1; /* header byte */
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	3301      	adds	r3, #1
 8004b5c:	607b      	str	r3, [r7, #4]

	/* now remaining_length field */
	if (rem_len < 128)
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	2b7f      	cmp	r3, #127	@ 0x7f
 8004b62:	dc03      	bgt.n	8004b6c <MQTTPacket_len+0x1c>
		rem_len += 1;
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	3301      	adds	r3, #1
 8004b68:	607b      	str	r3, [r7, #4]
 8004b6a:	e012      	b.n	8004b92 <MQTTPacket_len+0x42>
	else if (rem_len < 16384)
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004b72:	da03      	bge.n	8004b7c <MQTTPacket_len+0x2c>
		rem_len += 2;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	3302      	adds	r3, #2
 8004b78:	607b      	str	r3, [r7, #4]
 8004b7a:	e00a      	b.n	8004b92 <MQTTPacket_len+0x42>
	else if (rem_len < 2097151)
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	4a08      	ldr	r2, [pc, #32]	@ (8004ba0 <MQTTPacket_len+0x50>)
 8004b80:	4293      	cmp	r3, r2
 8004b82:	dc03      	bgt.n	8004b8c <MQTTPacket_len+0x3c>
		rem_len += 3;
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	3303      	adds	r3, #3
 8004b88:	607b      	str	r3, [r7, #4]
 8004b8a:	e002      	b.n	8004b92 <MQTTPacket_len+0x42>
	else
		rem_len += 4;
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	3304      	adds	r3, #4
 8004b90:	607b      	str	r3, [r7, #4]
	return rem_len;
 8004b92:	687b      	ldr	r3, [r7, #4]
}
 8004b94:	4618      	mov	r0, r3
 8004b96:	370c      	adds	r7, #12
 8004b98:	46bd      	mov	sp, r7
 8004b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b9e:	4770      	bx	lr
 8004ba0:	001ffffe 	.word	0x001ffffe

08004ba4 <bufchar>:


static unsigned char* bufptr;

int bufchar(unsigned char* c, int count)
{
 8004ba4:	b480      	push	{r7}
 8004ba6:	b085      	sub	sp, #20
 8004ba8:	af00      	add	r7, sp, #0
 8004baa:	6078      	str	r0, [r7, #4]
 8004bac:	6039      	str	r1, [r7, #0]
	int i;

	for (i = 0; i < count; ++i)
 8004bae:	2300      	movs	r3, #0
 8004bb0:	60fb      	str	r3, [r7, #12]
 8004bb2:	e00a      	b.n	8004bca <bufchar+0x26>
		*c = *bufptr++;
 8004bb4:	4b0a      	ldr	r3, [pc, #40]	@ (8004be0 <bufchar+0x3c>)
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	1c5a      	adds	r2, r3, #1
 8004bba:	4909      	ldr	r1, [pc, #36]	@ (8004be0 <bufchar+0x3c>)
 8004bbc:	600a      	str	r2, [r1, #0]
 8004bbe:	781a      	ldrb	r2, [r3, #0]
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < count; ++i)
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	3301      	adds	r3, #1
 8004bc8:	60fb      	str	r3, [r7, #12]
 8004bca:	68fa      	ldr	r2, [r7, #12]
 8004bcc:	683b      	ldr	r3, [r7, #0]
 8004bce:	429a      	cmp	r2, r3
 8004bd0:	dbf0      	blt.n	8004bb4 <bufchar+0x10>
	return count;
 8004bd2:	683b      	ldr	r3, [r7, #0]
}
 8004bd4:	4618      	mov	r0, r3
 8004bd6:	3714      	adds	r7, #20
 8004bd8:	46bd      	mov	sp, r7
 8004bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bde:	4770      	bx	lr
 8004be0:	20000e10 	.word	0x20000e10

08004be4 <MQTTPacket_decodeBuf>:


int MQTTPacket_decodeBuf(unsigned char* buf, int* value)
{
 8004be4:	b580      	push	{r7, lr}
 8004be6:	b082      	sub	sp, #8
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	6078      	str	r0, [r7, #4]
 8004bec:	6039      	str	r1, [r7, #0]
	bufptr = buf;
 8004bee:	4a06      	ldr	r2, [pc, #24]	@ (8004c08 <MQTTPacket_decodeBuf+0x24>)
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	6013      	str	r3, [r2, #0]
	return MQTTPacket_decode(bufchar, value);
 8004bf4:	6839      	ldr	r1, [r7, #0]
 8004bf6:	4805      	ldr	r0, [pc, #20]	@ (8004c0c <MQTTPacket_decodeBuf+0x28>)
 8004bf8:	f7ff ff6e 	bl	8004ad8 <MQTTPacket_decode>
 8004bfc:	4603      	mov	r3, r0
}
 8004bfe:	4618      	mov	r0, r3
 8004c00:	3708      	adds	r7, #8
 8004c02:	46bd      	mov	sp, r7
 8004c04:	bd80      	pop	{r7, pc}
 8004c06:	bf00      	nop
 8004c08:	20000e10 	.word	0x20000e10
 8004c0c:	08004ba5 	.word	0x08004ba5

08004c10 <readInt>:
 * Calculates an integer from two bytes read from the input buffer
 * @param pptr pointer to the input buffer - incremented by the number of bytes used & returned
 * @return the integer value calculated
 */
int readInt(unsigned char** pptr)
{
 8004c10:	b480      	push	{r7}
 8004c12:	b085      	sub	sp, #20
 8004c14:	af00      	add	r7, sp, #0
 8004c16:	6078      	str	r0, [r7, #4]
	unsigned char* ptr = *pptr;
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	60fb      	str	r3, [r7, #12]
	int len = 256*(*ptr) + (*(ptr+1));
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	781b      	ldrb	r3, [r3, #0]
 8004c22:	021b      	lsls	r3, r3, #8
 8004c24:	68fa      	ldr	r2, [r7, #12]
 8004c26:	3201      	adds	r2, #1
 8004c28:	7812      	ldrb	r2, [r2, #0]
 8004c2a:	4413      	add	r3, r2
 8004c2c:	60bb      	str	r3, [r7, #8]
	*pptr += 2;
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	1c9a      	adds	r2, r3, #2
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	601a      	str	r2, [r3, #0]
	return len;
 8004c38:	68bb      	ldr	r3, [r7, #8]
}
 8004c3a:	4618      	mov	r0, r3
 8004c3c:	3714      	adds	r7, #20
 8004c3e:	46bd      	mov	sp, r7
 8004c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c44:	4770      	bx	lr

08004c46 <readChar>:
 * Reads one character from the input buffer.
 * @param pptr pointer to the input buffer - incremented by the number of bytes used & returned
 * @return the character read
 */
char readChar(unsigned char** pptr)
{
 8004c46:	b480      	push	{r7}
 8004c48:	b085      	sub	sp, #20
 8004c4a:	af00      	add	r7, sp, #0
 8004c4c:	6078      	str	r0, [r7, #4]
	char c = **pptr;
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	781b      	ldrb	r3, [r3, #0]
 8004c54:	73fb      	strb	r3, [r7, #15]
	(*pptr)++;
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	1c5a      	adds	r2, r3, #1
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	601a      	str	r2, [r3, #0]
	return c;
 8004c60:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c62:	4618      	mov	r0, r3
 8004c64:	3714      	adds	r7, #20
 8004c66:	46bd      	mov	sp, r7
 8004c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c6c:	4770      	bx	lr

08004c6e <writeChar>:
 * Writes one character to an output buffer.
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param c the character to write
 */
void writeChar(unsigned char** pptr, char c)
{
 8004c6e:	b480      	push	{r7}
 8004c70:	b083      	sub	sp, #12
 8004c72:	af00      	add	r7, sp, #0
 8004c74:	6078      	str	r0, [r7, #4]
 8004c76:	460b      	mov	r3, r1
 8004c78:	70fb      	strb	r3, [r7, #3]
	**pptr = c;
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	78fa      	ldrb	r2, [r7, #3]
 8004c80:	701a      	strb	r2, [r3, #0]
	(*pptr)++;
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	1c5a      	adds	r2, r3, #1
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	601a      	str	r2, [r3, #0]
}
 8004c8c:	bf00      	nop
 8004c8e:	370c      	adds	r7, #12
 8004c90:	46bd      	mov	sp, r7
 8004c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c96:	4770      	bx	lr

08004c98 <writeInt>:
 * Writes an integer as 2 bytes to an output buffer.
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param anInt the integer to write
 */
void writeInt(unsigned char** pptr, int anInt)
{
 8004c98:	b480      	push	{r7}
 8004c9a:	b083      	sub	sp, #12
 8004c9c:	af00      	add	r7, sp, #0
 8004c9e:	6078      	str	r0, [r7, #4]
 8004ca0:	6039      	str	r1, [r7, #0]
	**pptr = (unsigned char)(anInt / 256);
 8004ca2:	683b      	ldr	r3, [r7, #0]
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	da00      	bge.n	8004caa <writeInt+0x12>
 8004ca8:	33ff      	adds	r3, #255	@ 0xff
 8004caa:	121b      	asrs	r3, r3, #8
 8004cac:	461a      	mov	r2, r3
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	b2d2      	uxtb	r2, r2
 8004cb4:	701a      	strb	r2, [r3, #0]
	(*pptr)++;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	1c5a      	adds	r2, r3, #1
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	601a      	str	r2, [r3, #0]
	**pptr = (unsigned char)(anInt % 256);
 8004cc0:	683b      	ldr	r3, [r7, #0]
 8004cc2:	425a      	negs	r2, r3
 8004cc4:	b2db      	uxtb	r3, r3
 8004cc6:	b2d2      	uxtb	r2, r2
 8004cc8:	bf58      	it	pl
 8004cca:	4253      	negpl	r3, r2
 8004ccc:	687a      	ldr	r2, [r7, #4]
 8004cce:	6812      	ldr	r2, [r2, #0]
 8004cd0:	b2db      	uxtb	r3, r3
 8004cd2:	7013      	strb	r3, [r2, #0]
	(*pptr)++;
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	1c5a      	adds	r2, r3, #1
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	601a      	str	r2, [r3, #0]
}
 8004cde:	bf00      	nop
 8004ce0:	370c      	adds	r7, #12
 8004ce2:	46bd      	mov	sp, r7
 8004ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce8:	4770      	bx	lr

08004cea <writeCString>:
 * Writes a "UTF" string to an output buffer.  Converts C string to length-delimited.
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param string the C string to write
 */
void writeCString(unsigned char** pptr, const char* string)
{
 8004cea:	b580      	push	{r7, lr}
 8004cec:	b084      	sub	sp, #16
 8004cee:	af00      	add	r7, sp, #0
 8004cf0:	6078      	str	r0, [r7, #4]
 8004cf2:	6039      	str	r1, [r7, #0]
	int len = strlen(string);
 8004cf4:	6838      	ldr	r0, [r7, #0]
 8004cf6:	f7fb fa7d 	bl	80001f4 <strlen>
 8004cfa:	4603      	mov	r3, r0
 8004cfc:	60fb      	str	r3, [r7, #12]
	writeInt(pptr, len);
 8004cfe:	68f9      	ldr	r1, [r7, #12]
 8004d00:	6878      	ldr	r0, [r7, #4]
 8004d02:	f7ff ffc9 	bl	8004c98 <writeInt>
	memcpy(*pptr, string, len);
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	68fa      	ldr	r2, [r7, #12]
 8004d0c:	6839      	ldr	r1, [r7, #0]
 8004d0e:	4618      	mov	r0, r3
 8004d10:	f007 fcbf 	bl	800c692 <memcpy>
	*pptr += len;
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681a      	ldr	r2, [r3, #0]
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	441a      	add	r2, r3
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	601a      	str	r2, [r3, #0]
}
 8004d20:	bf00      	nop
 8004d22:	3710      	adds	r7, #16
 8004d24:	46bd      	mov	sp, r7
 8004d26:	bd80      	pop	{r7, pc}

08004d28 <writeMQTTString>:
	return len;
}


void writeMQTTString(unsigned char** pptr, MQTTString mqttstring)
{
 8004d28:	b580      	push	{r7, lr}
 8004d2a:	b084      	sub	sp, #16
 8004d2c:	af00      	add	r7, sp, #0
 8004d2e:	60f8      	str	r0, [r7, #12]
 8004d30:	4638      	mov	r0, r7
 8004d32:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	if (mqttstring.lenstring.len > 0)
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	dd12      	ble.n	8004d62 <writeMQTTString+0x3a>
	{
		writeInt(pptr, mqttstring.lenstring.len);
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	4619      	mov	r1, r3
 8004d40:	68f8      	ldr	r0, [r7, #12]
 8004d42:	f7ff ffa9 	bl	8004c98 <writeInt>
		memcpy(*pptr, mqttstring.lenstring.data, mqttstring.lenstring.len);
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	68b9      	ldr	r1, [r7, #8]
 8004d4c:	687a      	ldr	r2, [r7, #4]
 8004d4e:	4618      	mov	r0, r3
 8004d50:	f007 fc9f 	bl	800c692 <memcpy>
		*pptr += mqttstring.lenstring.len;
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	687a      	ldr	r2, [r7, #4]
 8004d5a:	441a      	add	r2, r3
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	601a      	str	r2, [r3, #0]
	}
	else if (mqttstring.cstring)
		writeCString(pptr, mqttstring.cstring);
	else
		writeInt(pptr, 0);
}
 8004d60:	e00c      	b.n	8004d7c <writeMQTTString+0x54>
	else if (mqttstring.cstring)
 8004d62:	683b      	ldr	r3, [r7, #0]
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d005      	beq.n	8004d74 <writeMQTTString+0x4c>
		writeCString(pptr, mqttstring.cstring);
 8004d68:	683b      	ldr	r3, [r7, #0]
 8004d6a:	4619      	mov	r1, r3
 8004d6c:	68f8      	ldr	r0, [r7, #12]
 8004d6e:	f7ff ffbc 	bl	8004cea <writeCString>
}
 8004d72:	e003      	b.n	8004d7c <writeMQTTString+0x54>
		writeInt(pptr, 0);
 8004d74:	2100      	movs	r1, #0
 8004d76:	68f8      	ldr	r0, [r7, #12]
 8004d78:	f7ff ff8e 	bl	8004c98 <writeInt>
}
 8004d7c:	bf00      	nop
 8004d7e:	3710      	adds	r7, #16
 8004d80:	46bd      	mov	sp, r7
 8004d82:	bd80      	pop	{r7, pc}

08004d84 <readMQTTLenString>:
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param enddata pointer to the end of the data: do not read beyond
 * @return 1 if successful, 0 if not
 */
int readMQTTLenString(MQTTString* mqttstring, unsigned char** pptr, unsigned char* enddata)
{
 8004d84:	b580      	push	{r7, lr}
 8004d86:	b086      	sub	sp, #24
 8004d88:	af00      	add	r7, sp, #0
 8004d8a:	60f8      	str	r0, [r7, #12]
 8004d8c:	60b9      	str	r1, [r7, #8]
 8004d8e:	607a      	str	r2, [r7, #4]
	int rc = 0;
 8004d90:	2300      	movs	r3, #0
 8004d92:	617b      	str	r3, [r7, #20]

	FUNC_ENTRY;
	/* the first two bytes are the length of the string */
	if (enddata - (*pptr) > 1) /* enough length to read the integer? */
 8004d94:	68bb      	ldr	r3, [r7, #8]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	687a      	ldr	r2, [r7, #4]
 8004d9a:	1ad3      	subs	r3, r2, r3
 8004d9c:	2b01      	cmp	r3, #1
 8004d9e:	dd1a      	ble.n	8004dd6 <readMQTTLenString+0x52>
	{
		mqttstring->lenstring.len = readInt(pptr); /* increments pptr to point past length */
 8004da0:	68b8      	ldr	r0, [r7, #8]
 8004da2:	f7ff ff35 	bl	8004c10 <readInt>
 8004da6:	4602      	mov	r2, r0
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	605a      	str	r2, [r3, #4]
		if (&(*pptr)[mqttstring->lenstring.len] <= enddata)
 8004dac:	68bb      	ldr	r3, [r7, #8]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	68fa      	ldr	r2, [r7, #12]
 8004db2:	6852      	ldr	r2, [r2, #4]
 8004db4:	4413      	add	r3, r2
 8004db6:	687a      	ldr	r2, [r7, #4]
 8004db8:	429a      	cmp	r2, r3
 8004dba:	d30c      	bcc.n	8004dd6 <readMQTTLenString+0x52>
		{
			mqttstring->lenstring.data = (char*)*pptr;
 8004dbc:	68bb      	ldr	r3, [r7, #8]
 8004dbe:	681a      	ldr	r2, [r3, #0]
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	609a      	str	r2, [r3, #8]
			*pptr += mqttstring->lenstring.len;
 8004dc4:	68bb      	ldr	r3, [r7, #8]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	68fa      	ldr	r2, [r7, #12]
 8004dca:	6852      	ldr	r2, [r2, #4]
 8004dcc:	441a      	add	r2, r3
 8004dce:	68bb      	ldr	r3, [r7, #8]
 8004dd0:	601a      	str	r2, [r3, #0]
			rc = 1;
 8004dd2:	2301      	movs	r3, #1
 8004dd4:	617b      	str	r3, [r7, #20]
		}
	}
	mqttstring->cstring = NULL;
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	2200      	movs	r2, #0
 8004dda:	601a      	str	r2, [r3, #0]
	FUNC_EXIT_RC(rc);
	return rc;
 8004ddc:	697b      	ldr	r3, [r7, #20]
}
 8004dde:	4618      	mov	r0, r3
 8004de0:	3718      	adds	r7, #24
 8004de2:	46bd      	mov	sp, r7
 8004de4:	bd80      	pop	{r7, pc}

08004de6 <MQTTstrlen>:
 * Return the length of the MQTTstring - C string if there is one, otherwise the length delimited string
 * @param mqttstring the string to return the length of
 * @return the length of the string
 */
int MQTTstrlen(MQTTString mqttstring)
{
 8004de6:	b580      	push	{r7, lr}
 8004de8:	b086      	sub	sp, #24
 8004dea:	af00      	add	r7, sp, #0
 8004dec:	1d3b      	adds	r3, r7, #4
 8004dee:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	int rc = 0;
 8004df2:	2300      	movs	r3, #0
 8004df4:	617b      	str	r3, [r7, #20]

	if (mqttstring.cstring)
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d006      	beq.n	8004e0a <MQTTstrlen+0x24>
		rc = strlen(mqttstring.cstring);
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	4618      	mov	r0, r3
 8004e00:	f7fb f9f8 	bl	80001f4 <strlen>
 8004e04:	4603      	mov	r3, r0
 8004e06:	617b      	str	r3, [r7, #20]
 8004e08:	e001      	b.n	8004e0e <MQTTstrlen+0x28>
	else
		rc = mqttstring.lenstring.len;
 8004e0a:	68bb      	ldr	r3, [r7, #8]
 8004e0c:	617b      	str	r3, [r7, #20]
	return rc;
 8004e0e:	697b      	ldr	r3, [r7, #20]
}
 8004e10:	4618      	mov	r0, r3
 8004e12:	3718      	adds	r7, #24
 8004e14:	46bd      	mov	sp, r7
 8004e16:	bd80      	pop	{r7, pc}

08004e18 <MQTTPacket_equals>:
 * @param a the MQTTString to compare
 * @param bptr the C string to compare
 * @return boolean - equal or not
 */
int MQTTPacket_equals(MQTTString* a, char* bptr)
{
 8004e18:	b580      	push	{r7, lr}
 8004e1a:	b086      	sub	sp, #24
 8004e1c:	af00      	add	r7, sp, #0
 8004e1e:	6078      	str	r0, [r7, #4]
 8004e20:	6039      	str	r1, [r7, #0]
	int alen = 0,
 8004e22:	2300      	movs	r3, #0
 8004e24:	617b      	str	r3, [r7, #20]
		blen = 0;
 8004e26:	2300      	movs	r3, #0
 8004e28:	60fb      	str	r3, [r7, #12]
	char *aptr;
	
	if (a->cstring)
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d00a      	beq.n	8004e48 <MQTTPacket_equals+0x30>
	{
		aptr = a->cstring;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	613b      	str	r3, [r7, #16]
		alen = strlen(a->cstring);
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	4618      	mov	r0, r3
 8004e3e:	f7fb f9d9 	bl	80001f4 <strlen>
 8004e42:	4603      	mov	r3, r0
 8004e44:	617b      	str	r3, [r7, #20]
 8004e46:	e005      	b.n	8004e54 <MQTTPacket_equals+0x3c>
	}
	else
	{
		aptr = a->lenstring.data;
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	689b      	ldr	r3, [r3, #8]
 8004e4c:	613b      	str	r3, [r7, #16]
		alen = a->lenstring.len;
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	685b      	ldr	r3, [r3, #4]
 8004e52:	617b      	str	r3, [r7, #20]
	}
	blen = strlen(bptr);
 8004e54:	6838      	ldr	r0, [r7, #0]
 8004e56:	f7fb f9cd 	bl	80001f4 <strlen>
 8004e5a:	4603      	mov	r3, r0
 8004e5c:	60fb      	str	r3, [r7, #12]
	
	return (alen == blen) && (strncmp(aptr, bptr, alen) == 0);
 8004e5e:	697a      	ldr	r2, [r7, #20]
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	429a      	cmp	r2, r3
 8004e64:	d10a      	bne.n	8004e7c <MQTTPacket_equals+0x64>
 8004e66:	697b      	ldr	r3, [r7, #20]
 8004e68:	461a      	mov	r2, r3
 8004e6a:	6839      	ldr	r1, [r7, #0]
 8004e6c:	6938      	ldr	r0, [r7, #16]
 8004e6e:	f007 fb1a 	bl	800c4a6 <strncmp>
 8004e72:	4603      	mov	r3, r0
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d101      	bne.n	8004e7c <MQTTPacket_equals+0x64>
 8004e78:	2301      	movs	r3, #1
 8004e7a:	e000      	b.n	8004e7e <MQTTPacket_equals+0x66>
 8004e7c:	2300      	movs	r3, #0
}
 8004e7e:	4618      	mov	r0, r3
 8004e80:	3718      	adds	r7, #24
 8004e82:	46bd      	mov	sp, r7
 8004e84:	bd80      	pop	{r7, pc}

08004e86 <MQTTSerialize_ack>:
  * @param dup the MQTT dup flag
  * @param packetid the MQTT packet identifier
  * @return serialized length, or error if 0
  */
int MQTTSerialize_ack(unsigned char* buf, int buflen, unsigned char packettype, unsigned char dup, unsigned short packetid)
{
 8004e86:	b580      	push	{r7, lr}
 8004e88:	b088      	sub	sp, #32
 8004e8a:	af00      	add	r7, sp, #0
 8004e8c:	60f8      	str	r0, [r7, #12]
 8004e8e:	60b9      	str	r1, [r7, #8]
 8004e90:	4611      	mov	r1, r2
 8004e92:	461a      	mov	r2, r3
 8004e94:	460b      	mov	r3, r1
 8004e96:	71fb      	strb	r3, [r7, #7]
 8004e98:	4613      	mov	r3, r2
 8004e9a:	71bb      	strb	r3, [r7, #6]
	MQTTHeader header = {0};
 8004e9c:	2300      	movs	r3, #0
 8004e9e:	61bb      	str	r3, [r7, #24]
	int rc = 0;
 8004ea0:	2300      	movs	r3, #0
 8004ea2:	61fb      	str	r3, [r7, #28]
	unsigned char *ptr = buf;
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	617b      	str	r3, [r7, #20]

	FUNC_ENTRY;
	if (buflen < 4)
 8004ea8:	68bb      	ldr	r3, [r7, #8]
 8004eaa:	2b03      	cmp	r3, #3
 8004eac:	dc03      	bgt.n	8004eb6 <MQTTSerialize_ack+0x30>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
 8004eae:	f06f 0301 	mvn.w	r3, #1
 8004eb2:	61fb      	str	r3, [r7, #28]
		goto exit;
 8004eb4:	e037      	b.n	8004f26 <MQTTSerialize_ack+0xa0>
	}
	header.bits.type = packettype;
 8004eb6:	79fb      	ldrb	r3, [r7, #7]
 8004eb8:	f003 030f 	and.w	r3, r3, #15
 8004ebc:	b2da      	uxtb	r2, r3
 8004ebe:	7e3b      	ldrb	r3, [r7, #24]
 8004ec0:	f362 1307 	bfi	r3, r2, #4, #4
 8004ec4:	763b      	strb	r3, [r7, #24]
	header.bits.dup = dup;
 8004ec6:	79bb      	ldrb	r3, [r7, #6]
 8004ec8:	f003 0301 	and.w	r3, r3, #1
 8004ecc:	b2da      	uxtb	r2, r3
 8004ece:	7e3b      	ldrb	r3, [r7, #24]
 8004ed0:	f362 03c3 	bfi	r3, r2, #3, #1
 8004ed4:	763b      	strb	r3, [r7, #24]
	header.bits.qos = (packettype == PUBREL) ? 1 : 0;
 8004ed6:	79fb      	ldrb	r3, [r7, #7]
 8004ed8:	2b06      	cmp	r3, #6
 8004eda:	bf0c      	ite	eq
 8004edc:	2301      	moveq	r3, #1
 8004ede:	2300      	movne	r3, #0
 8004ee0:	b2db      	uxtb	r3, r3
 8004ee2:	f003 0303 	and.w	r3, r3, #3
 8004ee6:	b2da      	uxtb	r2, r3
 8004ee8:	7e3b      	ldrb	r3, [r7, #24]
 8004eea:	f362 0342 	bfi	r3, r2, #1, #2
 8004eee:	763b      	strb	r3, [r7, #24]
	writeChar(&ptr, header.byte); /* write header */
 8004ef0:	7e3a      	ldrb	r2, [r7, #24]
 8004ef2:	f107 0314 	add.w	r3, r7, #20
 8004ef6:	4611      	mov	r1, r2
 8004ef8:	4618      	mov	r0, r3
 8004efa:	f7ff feb8 	bl	8004c6e <writeChar>

	ptr += MQTTPacket_encode(ptr, 2); /* write remaining length */
 8004efe:	697b      	ldr	r3, [r7, #20]
 8004f00:	2102      	movs	r1, #2
 8004f02:	4618      	mov	r0, r3
 8004f04:	f7ff fdb9 	bl	8004a7a <MQTTPacket_encode>
 8004f08:	4602      	mov	r2, r0
 8004f0a:	697b      	ldr	r3, [r7, #20]
 8004f0c:	4413      	add	r3, r2
 8004f0e:	617b      	str	r3, [r7, #20]
	writeInt(&ptr, packetid);
 8004f10:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8004f12:	f107 0314 	add.w	r3, r7, #20
 8004f16:	4611      	mov	r1, r2
 8004f18:	4618      	mov	r0, r3
 8004f1a:	f7ff febd 	bl	8004c98 <writeInt>
	rc = ptr - buf;
 8004f1e:	697a      	ldr	r2, [r7, #20]
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	1ad3      	subs	r3, r2, r3
 8004f24:	61fb      	str	r3, [r7, #28]
exit:
	FUNC_EXIT_RC(rc);
	return rc;
 8004f26:	69fb      	ldr	r3, [r7, #28]
}
 8004f28:	4618      	mov	r0, r3
 8004f2a:	3720      	adds	r7, #32
 8004f2c:	46bd      	mov	sp, r7
 8004f2e:	bd80      	pop	{r7, pc}

08004f30 <MQTTSerialize_subscribeLength>:
  * @param count the number of topic filter strings in topicFilters
  * @param topicFilters the array of topic filter strings to be used in the publish
  * @return the length of buffer needed to contain the serialized version of the packet
  */
int MQTTSerialize_subscribeLength(int count, MQTTString topicFilters[])
{
 8004f30:	b580      	push	{r7, lr}
 8004f32:	b084      	sub	sp, #16
 8004f34:	af00      	add	r7, sp, #0
 8004f36:	6078      	str	r0, [r7, #4]
 8004f38:	6039      	str	r1, [r7, #0]
	int i;
	int len = 2; /* packetid */
 8004f3a:	2302      	movs	r3, #2
 8004f3c:	60bb      	str	r3, [r7, #8]

	for (i = 0; i < count; ++i)
 8004f3e:	2300      	movs	r3, #0
 8004f40:	60fb      	str	r3, [r7, #12]
 8004f42:	e013      	b.n	8004f6c <MQTTSerialize_subscribeLength+0x3c>
		len += 2 + MQTTstrlen(topicFilters[i]) + 1; /* length + topic + req_qos */
 8004f44:	68fa      	ldr	r2, [r7, #12]
 8004f46:	4613      	mov	r3, r2
 8004f48:	005b      	lsls	r3, r3, #1
 8004f4a:	4413      	add	r3, r2
 8004f4c:	009b      	lsls	r3, r3, #2
 8004f4e:	461a      	mov	r2, r3
 8004f50:	683b      	ldr	r3, [r7, #0]
 8004f52:	4413      	add	r3, r2
 8004f54:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8004f58:	f7ff ff45 	bl	8004de6 <MQTTstrlen>
 8004f5c:	4603      	mov	r3, r0
 8004f5e:	3303      	adds	r3, #3
 8004f60:	68ba      	ldr	r2, [r7, #8]
 8004f62:	4413      	add	r3, r2
 8004f64:	60bb      	str	r3, [r7, #8]
	for (i = 0; i < count; ++i)
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	3301      	adds	r3, #1
 8004f6a:	60fb      	str	r3, [r7, #12]
 8004f6c:	68fa      	ldr	r2, [r7, #12]
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	429a      	cmp	r2, r3
 8004f72:	dbe7      	blt.n	8004f44 <MQTTSerialize_subscribeLength+0x14>
	return len;
 8004f74:	68bb      	ldr	r3, [r7, #8]
}
 8004f76:	4618      	mov	r0, r3
 8004f78:	3710      	adds	r7, #16
 8004f7a:	46bd      	mov	sp, r7
 8004f7c:	bd80      	pop	{r7, pc}

08004f7e <MQTTSerialize_subscribe>:
  * @param requestedQoSs - array of requested QoS
  * @return the length of the serialized data.  <= 0 indicates error
  */
int MQTTSerialize_subscribe(unsigned char* buf, int buflen, unsigned char dup, unsigned short packetid, int count,
		MQTTString topicFilters[], int requestedQoSs[])
{
 8004f7e:	b580      	push	{r7, lr}
 8004f80:	b08a      	sub	sp, #40	@ 0x28
 8004f82:	af00      	add	r7, sp, #0
 8004f84:	60f8      	str	r0, [r7, #12]
 8004f86:	60b9      	str	r1, [r7, #8]
 8004f88:	4611      	mov	r1, r2
 8004f8a:	461a      	mov	r2, r3
 8004f8c:	460b      	mov	r3, r1
 8004f8e:	71fb      	strb	r3, [r7, #7]
 8004f90:	4613      	mov	r3, r2
 8004f92:	80bb      	strh	r3, [r7, #4]
	unsigned char *ptr = buf;
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	61bb      	str	r3, [r7, #24]
	MQTTHeader header = {0};
 8004f98:	2300      	movs	r3, #0
 8004f9a:	617b      	str	r3, [r7, #20]
	int rem_len = 0;
 8004f9c:	2300      	movs	r3, #0
 8004f9e:	61fb      	str	r3, [r7, #28]
	int rc = 0;
 8004fa0:	2300      	movs	r3, #0
 8004fa2:	627b      	str	r3, [r7, #36]	@ 0x24
	int i = 0;
 8004fa4:	2300      	movs	r3, #0
 8004fa6:	623b      	str	r3, [r7, #32]

	FUNC_ENTRY;
	if (MQTTPacket_len(rem_len = MQTTSerialize_subscribeLength(count, topicFilters)) > buflen)
 8004fa8:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8004faa:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004fac:	f7ff ffc0 	bl	8004f30 <MQTTSerialize_subscribeLength>
 8004fb0:	61f8      	str	r0, [r7, #28]
 8004fb2:	69f8      	ldr	r0, [r7, #28]
 8004fb4:	f7ff fdcc 	bl	8004b50 <MQTTPacket_len>
 8004fb8:	4602      	mov	r2, r0
 8004fba:	68bb      	ldr	r3, [r7, #8]
 8004fbc:	4293      	cmp	r3, r2
 8004fbe:	da03      	bge.n	8004fc8 <MQTTSerialize_subscribe+0x4a>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
 8004fc0:	f06f 0301 	mvn.w	r3, #1
 8004fc4:	627b      	str	r3, [r7, #36]	@ 0x24
		goto exit;
 8004fc6:	e051      	b.n	800506c <MQTTSerialize_subscribe+0xee>
	}

	header.byte = 0;
 8004fc8:	2300      	movs	r3, #0
 8004fca:	753b      	strb	r3, [r7, #20]
	header.bits.type = SUBSCRIBE;
 8004fcc:	7d3b      	ldrb	r3, [r7, #20]
 8004fce:	2208      	movs	r2, #8
 8004fd0:	f362 1307 	bfi	r3, r2, #4, #4
 8004fd4:	753b      	strb	r3, [r7, #20]
	header.bits.dup = dup;
 8004fd6:	79fb      	ldrb	r3, [r7, #7]
 8004fd8:	f003 0301 	and.w	r3, r3, #1
 8004fdc:	b2da      	uxtb	r2, r3
 8004fde:	7d3b      	ldrb	r3, [r7, #20]
 8004fe0:	f362 03c3 	bfi	r3, r2, #3, #1
 8004fe4:	753b      	strb	r3, [r7, #20]
	header.bits.qos = 1;
 8004fe6:	7d3b      	ldrb	r3, [r7, #20]
 8004fe8:	2201      	movs	r2, #1
 8004fea:	f362 0342 	bfi	r3, r2, #1, #2
 8004fee:	753b      	strb	r3, [r7, #20]
	writeChar(&ptr, header.byte); /* write header */
 8004ff0:	7d3a      	ldrb	r2, [r7, #20]
 8004ff2:	f107 0318 	add.w	r3, r7, #24
 8004ff6:	4611      	mov	r1, r2
 8004ff8:	4618      	mov	r0, r3
 8004ffa:	f7ff fe38 	bl	8004c6e <writeChar>

	ptr += MQTTPacket_encode(ptr, rem_len); /* write remaining length */;
 8004ffe:	69bb      	ldr	r3, [r7, #24]
 8005000:	69f9      	ldr	r1, [r7, #28]
 8005002:	4618      	mov	r0, r3
 8005004:	f7ff fd39 	bl	8004a7a <MQTTPacket_encode>
 8005008:	4602      	mov	r2, r0
 800500a:	69bb      	ldr	r3, [r7, #24]
 800500c:	4413      	add	r3, r2
 800500e:	61bb      	str	r3, [r7, #24]

	writeInt(&ptr, packetid);
 8005010:	88ba      	ldrh	r2, [r7, #4]
 8005012:	f107 0318 	add.w	r3, r7, #24
 8005016:	4611      	mov	r1, r2
 8005018:	4618      	mov	r0, r3
 800501a:	f7ff fe3d 	bl	8004c98 <writeInt>

	for (i = 0; i < count; ++i)
 800501e:	2300      	movs	r3, #0
 8005020:	623b      	str	r3, [r7, #32]
 8005022:	e01b      	b.n	800505c <MQTTSerialize_subscribe+0xde>
	{
		writeMQTTString(&ptr, topicFilters[i]);
 8005024:	6a3a      	ldr	r2, [r7, #32]
 8005026:	4613      	mov	r3, r2
 8005028:	005b      	lsls	r3, r3, #1
 800502a:	4413      	add	r3, r2
 800502c:	009b      	lsls	r3, r3, #2
 800502e:	461a      	mov	r2, r3
 8005030:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005032:	4413      	add	r3, r2
 8005034:	f107 0018 	add.w	r0, r7, #24
 8005038:	cb0e      	ldmia	r3, {r1, r2, r3}
 800503a:	f7ff fe75 	bl	8004d28 <writeMQTTString>
		writeChar(&ptr, requestedQoSs[i]);
 800503e:	6a3b      	ldr	r3, [r7, #32]
 8005040:	009b      	lsls	r3, r3, #2
 8005042:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005044:	4413      	add	r3, r2
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	b2da      	uxtb	r2, r3
 800504a:	f107 0318 	add.w	r3, r7, #24
 800504e:	4611      	mov	r1, r2
 8005050:	4618      	mov	r0, r3
 8005052:	f7ff fe0c 	bl	8004c6e <writeChar>
	for (i = 0; i < count; ++i)
 8005056:	6a3b      	ldr	r3, [r7, #32]
 8005058:	3301      	adds	r3, #1
 800505a:	623b      	str	r3, [r7, #32]
 800505c:	6a3a      	ldr	r2, [r7, #32]
 800505e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005060:	429a      	cmp	r2, r3
 8005062:	dbdf      	blt.n	8005024 <MQTTSerialize_subscribe+0xa6>
	}

	rc = ptr - buf;
 8005064:	69ba      	ldr	r2, [r7, #24]
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	1ad3      	subs	r3, r2, r3
 800506a:	627b      	str	r3, [r7, #36]	@ 0x24
exit:
	FUNC_EXIT_RC(rc);
	return rc;
 800506c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800506e:	4618      	mov	r0, r3
 8005070:	3728      	adds	r7, #40	@ 0x28
 8005072:	46bd      	mov	sp, r7
 8005074:	bd80      	pop	{r7, pc}

08005076 <MQTTDeserialize_suback>:
  * @param buf the raw buffer data, of the correct length determined by the remaining length field
  * @param buflen the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success, 0 is failure
  */
int MQTTDeserialize_suback(unsigned short* packetid, int maxcount, int* count, int grantedQoSs[], unsigned char* buf, int buflen)
{
 8005076:	b580      	push	{r7, lr}
 8005078:	b08a      	sub	sp, #40	@ 0x28
 800507a:	af00      	add	r7, sp, #0
 800507c:	60f8      	str	r0, [r7, #12]
 800507e:	60b9      	str	r1, [r7, #8]
 8005080:	607a      	str	r2, [r7, #4]
 8005082:	603b      	str	r3, [r7, #0]
	MQTTHeader header = {0};
 8005084:	2300      	movs	r3, #0
 8005086:	61fb      	str	r3, [r7, #28]
	unsigned char* curdata = buf;
 8005088:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800508a:	61bb      	str	r3, [r7, #24]
	unsigned char* enddata = NULL;
 800508c:	2300      	movs	r3, #0
 800508e:	623b      	str	r3, [r7, #32]
	int rc = 0;
 8005090:	2300      	movs	r3, #0
 8005092:	627b      	str	r3, [r7, #36]	@ 0x24
	int mylen;

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
 8005094:	f107 0318 	add.w	r3, r7, #24
 8005098:	4618      	mov	r0, r3
 800509a:	f7ff fdd4 	bl	8004c46 <readChar>
 800509e:	4603      	mov	r3, r0
 80050a0:	773b      	strb	r3, [r7, #28]
	if (header.bits.type != SUBACK)
 80050a2:	7f3b      	ldrb	r3, [r7, #28]
 80050a4:	f023 030f 	bic.w	r3, r3, #15
 80050a8:	b2db      	uxtb	r3, r3
 80050aa:	2b90      	cmp	r3, #144	@ 0x90
 80050ac:	d142      	bne.n	8005134 <MQTTDeserialize_suback+0xbe>
		goto exit;

	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
 80050ae:	69bb      	ldr	r3, [r7, #24]
 80050b0:	f107 0214 	add.w	r2, r7, #20
 80050b4:	4611      	mov	r1, r2
 80050b6:	4618      	mov	r0, r3
 80050b8:	f7ff fd94 	bl	8004be4 <MQTTPacket_decodeBuf>
 80050bc:	6278      	str	r0, [r7, #36]	@ 0x24
 80050be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80050c0:	69bb      	ldr	r3, [r7, #24]
 80050c2:	4413      	add	r3, r2
 80050c4:	61bb      	str	r3, [r7, #24]
	enddata = curdata + mylen;
 80050c6:	69bb      	ldr	r3, [r7, #24]
 80050c8:	697a      	ldr	r2, [r7, #20]
 80050ca:	4413      	add	r3, r2
 80050cc:	623b      	str	r3, [r7, #32]
	if (enddata - curdata < 2)
 80050ce:	69bb      	ldr	r3, [r7, #24]
 80050d0:	6a3a      	ldr	r2, [r7, #32]
 80050d2:	1ad3      	subs	r3, r2, r3
 80050d4:	2b01      	cmp	r3, #1
 80050d6:	dd2f      	ble.n	8005138 <MQTTDeserialize_suback+0xc2>
		goto exit;

	*packetid = readInt(&curdata);
 80050d8:	f107 0318 	add.w	r3, r7, #24
 80050dc:	4618      	mov	r0, r3
 80050de:	f7ff fd97 	bl	8004c10 <readInt>
 80050e2:	4603      	mov	r3, r0
 80050e4:	b29a      	uxth	r2, r3
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	801a      	strh	r2, [r3, #0]

	*count = 0;
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	2200      	movs	r2, #0
 80050ee:	601a      	str	r2, [r3, #0]
	while (curdata < enddata)
 80050f0:	e019      	b.n	8005126 <MQTTDeserialize_suback+0xb0>
	{
		if (*count > maxcount)
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	68ba      	ldr	r2, [r7, #8]
 80050f8:	429a      	cmp	r2, r3
 80050fa:	da03      	bge.n	8005104 <MQTTDeserialize_suback+0x8e>
		{
			rc = -1;
 80050fc:	f04f 33ff 	mov.w	r3, #4294967295
 8005100:	627b      	str	r3, [r7, #36]	@ 0x24
			goto exit;
 8005102:	e01a      	b.n	800513a <MQTTDeserialize_suback+0xc4>
		}
		grantedQoSs[(*count)++] = readChar(&curdata);
 8005104:	f107 0318 	add.w	r3, r7, #24
 8005108:	4618      	mov	r0, r3
 800510a:	f7ff fd9c 	bl	8004c46 <readChar>
 800510e:	4603      	mov	r3, r0
 8005110:	4618      	mov	r0, r3
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	1c59      	adds	r1, r3, #1
 8005118:	687a      	ldr	r2, [r7, #4]
 800511a:	6011      	str	r1, [r2, #0]
 800511c:	009b      	lsls	r3, r3, #2
 800511e:	683a      	ldr	r2, [r7, #0]
 8005120:	4413      	add	r3, r2
 8005122:	4602      	mov	r2, r0
 8005124:	601a      	str	r2, [r3, #0]
	while (curdata < enddata)
 8005126:	69bb      	ldr	r3, [r7, #24]
 8005128:	6a3a      	ldr	r2, [r7, #32]
 800512a:	429a      	cmp	r2, r3
 800512c:	d8e1      	bhi.n	80050f2 <MQTTDeserialize_suback+0x7c>
	}

	rc = 1;
 800512e:	2301      	movs	r3, #1
 8005130:	627b      	str	r3, [r7, #36]	@ 0x24
 8005132:	e002      	b.n	800513a <MQTTDeserialize_suback+0xc4>
		goto exit;
 8005134:	bf00      	nop
 8005136:	e000      	b.n	800513a <MQTTDeserialize_suback+0xc4>
		goto exit;
 8005138:	bf00      	nop
exit:
	FUNC_EXIT_RC(rc);
	return rc;
 800513a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800513c:	4618      	mov	r0, r3
 800513e:	3728      	adds	r7, #40	@ 0x28
 8005140:	46bd      	mov	sp, r7
 8005142:	bd80      	pop	{r7, pc}

08005144 <WIZCHIP_READ>:

#if   (_WIZCHIP_ == 5500)
////////////////////////////////////////////////////

uint8_t  WIZCHIP_READ(uint32_t AddrSel)
{
 8005144:	b580      	push	{r7, lr}
 8005146:	b084      	sub	sp, #16
 8005148:	af00      	add	r7, sp, #0
 800514a:	6078      	str	r0, [r7, #4]
   uint8_t ret;
   uint8_t spi_data[3];

   WIZCHIP_CRITICAL_ENTER();
 800514c:	4b22      	ldr	r3, [pc, #136]	@ (80051d8 <WIZCHIP_READ+0x94>)
 800514e:	68db      	ldr	r3, [r3, #12]
 8005150:	4798      	blx	r3
   WIZCHIP.CS._select();
 8005152:	4b21      	ldr	r3, [pc, #132]	@ (80051d8 <WIZCHIP_READ+0x94>)
 8005154:	695b      	ldr	r3, [r3, #20]
 8005156:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8005158:	4b1f      	ldr	r3, [pc, #124]	@ (80051d8 <WIZCHIP_READ+0x94>)
 800515a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800515c:	2b00      	cmp	r3, #0
 800515e:	d003      	beq.n	8005168 <WIZCHIP_READ+0x24>
 8005160:	4b1d      	ldr	r3, [pc, #116]	@ (80051d8 <WIZCHIP_READ+0x94>)
 8005162:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005164:	2b00      	cmp	r3, #0
 8005166:	d114      	bne.n	8005192 <WIZCHIP_READ+0x4e>
   {
	   WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8005168:	4b1b      	ldr	r3, [pc, #108]	@ (80051d8 <WIZCHIP_READ+0x94>)
 800516a:	6a1b      	ldr	r3, [r3, #32]
 800516c:	687a      	ldr	r2, [r7, #4]
 800516e:	0c12      	lsrs	r2, r2, #16
 8005170:	b2d2      	uxtb	r2, r2
 8005172:	4610      	mov	r0, r2
 8005174:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8005176:	4b18      	ldr	r3, [pc, #96]	@ (80051d8 <WIZCHIP_READ+0x94>)
 8005178:	6a1b      	ldr	r3, [r3, #32]
 800517a:	687a      	ldr	r2, [r7, #4]
 800517c:	0a12      	lsrs	r2, r2, #8
 800517e:	b2d2      	uxtb	r2, r2
 8005180:	4610      	mov	r0, r2
 8005182:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8005184:	4b14      	ldr	r3, [pc, #80]	@ (80051d8 <WIZCHIP_READ+0x94>)
 8005186:	6a1b      	ldr	r3, [r3, #32]
 8005188:	687a      	ldr	r2, [r7, #4]
 800518a:	b2d2      	uxtb	r2, r2
 800518c:	4610      	mov	r0, r2
 800518e:	4798      	blx	r3
 8005190:	e011      	b.n	80051b6 <WIZCHIP_READ+0x72>
   }
   else																// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	0c1b      	lsrs	r3, r3, #16
 8005196:	b2db      	uxtb	r3, r3
 8005198:	733b      	strb	r3, [r7, #12]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	0a1b      	lsrs	r3, r3, #8
 800519e:	b2db      	uxtb	r3, r3
 80051a0:	737b      	strb	r3, [r7, #13]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	b2db      	uxtb	r3, r3
 80051a6:	73bb      	strb	r3, [r7, #14]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 80051a8:	4b0b      	ldr	r3, [pc, #44]	@ (80051d8 <WIZCHIP_READ+0x94>)
 80051aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051ac:	f107 020c 	add.w	r2, r7, #12
 80051b0:	2103      	movs	r1, #3
 80051b2:	4610      	mov	r0, r2
 80051b4:	4798      	blx	r3
   }
   ret = WIZCHIP.IF.SPI._read_byte();
 80051b6:	4b08      	ldr	r3, [pc, #32]	@ (80051d8 <WIZCHIP_READ+0x94>)
 80051b8:	69db      	ldr	r3, [r3, #28]
 80051ba:	4798      	blx	r3
 80051bc:	4603      	mov	r3, r0
 80051be:	73fb      	strb	r3, [r7, #15]

   WIZCHIP.CS._deselect();
 80051c0:	4b05      	ldr	r3, [pc, #20]	@ (80051d8 <WIZCHIP_READ+0x94>)
 80051c2:	699b      	ldr	r3, [r3, #24]
 80051c4:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 80051c6:	4b04      	ldr	r3, [pc, #16]	@ (80051d8 <WIZCHIP_READ+0x94>)
 80051c8:	691b      	ldr	r3, [r3, #16]
 80051ca:	4798      	blx	r3
   return ret;
 80051cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80051ce:	4618      	mov	r0, r3
 80051d0:	3710      	adds	r7, #16
 80051d2:	46bd      	mov	sp, r7
 80051d4:	bd80      	pop	{r7, pc}
 80051d6:	bf00      	nop
 80051d8:	200000a4 	.word	0x200000a4

080051dc <WIZCHIP_WRITE>:

void     WIZCHIP_WRITE(uint32_t AddrSel, uint8_t wb )
{
 80051dc:	b580      	push	{r7, lr}
 80051de:	b084      	sub	sp, #16
 80051e0:	af00      	add	r7, sp, #0
 80051e2:	6078      	str	r0, [r7, #4]
 80051e4:	460b      	mov	r3, r1
 80051e6:	70fb      	strb	r3, [r7, #3]
   uint8_t spi_data[4];

   WIZCHIP_CRITICAL_ENTER();
 80051e8:	4b22      	ldr	r3, [pc, #136]	@ (8005274 <WIZCHIP_WRITE+0x98>)
 80051ea:	68db      	ldr	r3, [r3, #12]
 80051ec:	4798      	blx	r3
   WIZCHIP.CS._select();
 80051ee:	4b21      	ldr	r3, [pc, #132]	@ (8005274 <WIZCHIP_WRITE+0x98>)
 80051f0:	695b      	ldr	r3, [r3, #20]
 80051f2:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	f043 0304 	orr.w	r3, r3, #4
 80051fa:	607b      	str	r3, [r7, #4]

   //if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 80051fc:	4b1d      	ldr	r3, [pc, #116]	@ (8005274 <WIZCHIP_WRITE+0x98>)
 80051fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005200:	2b00      	cmp	r3, #0
 8005202:	d119      	bne.n	8005238 <WIZCHIP_WRITE+0x5c>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8005204:	4b1b      	ldr	r3, [pc, #108]	@ (8005274 <WIZCHIP_WRITE+0x98>)
 8005206:	6a1b      	ldr	r3, [r3, #32]
 8005208:	687a      	ldr	r2, [r7, #4]
 800520a:	0c12      	lsrs	r2, r2, #16
 800520c:	b2d2      	uxtb	r2, r2
 800520e:	4610      	mov	r0, r2
 8005210:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8005212:	4b18      	ldr	r3, [pc, #96]	@ (8005274 <WIZCHIP_WRITE+0x98>)
 8005214:	6a1b      	ldr	r3, [r3, #32]
 8005216:	687a      	ldr	r2, [r7, #4]
 8005218:	0a12      	lsrs	r2, r2, #8
 800521a:	b2d2      	uxtb	r2, r2
 800521c:	4610      	mov	r0, r2
 800521e:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8005220:	4b14      	ldr	r3, [pc, #80]	@ (8005274 <WIZCHIP_WRITE+0x98>)
 8005222:	6a1b      	ldr	r3, [r3, #32]
 8005224:	687a      	ldr	r2, [r7, #4]
 8005226:	b2d2      	uxtb	r2, r2
 8005228:	4610      	mov	r0, r2
 800522a:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte(wb);
 800522c:	4b11      	ldr	r3, [pc, #68]	@ (8005274 <WIZCHIP_WRITE+0x98>)
 800522e:	6a1b      	ldr	r3, [r3, #32]
 8005230:	78fa      	ldrb	r2, [r7, #3]
 8005232:	4610      	mov	r0, r2
 8005234:	4798      	blx	r3
 8005236:	e013      	b.n	8005260 <WIZCHIP_WRITE+0x84>
   }
   else									// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	0c1b      	lsrs	r3, r3, #16
 800523c:	b2db      	uxtb	r3, r3
 800523e:	733b      	strb	r3, [r7, #12]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	0a1b      	lsrs	r3, r3, #8
 8005244:	b2db      	uxtb	r3, r3
 8005246:	737b      	strb	r3, [r7, #13]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	b2db      	uxtb	r3, r3
 800524c:	73bb      	strb	r3, [r7, #14]
		spi_data[3] = wb;
 800524e:	78fb      	ldrb	r3, [r7, #3]
 8005250:	73fb      	strb	r3, [r7, #15]
		WIZCHIP.IF.SPI._write_burst(spi_data, 4);
 8005252:	4b08      	ldr	r3, [pc, #32]	@ (8005274 <WIZCHIP_WRITE+0x98>)
 8005254:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005256:	f107 020c 	add.w	r2, r7, #12
 800525a:	2104      	movs	r1, #4
 800525c:	4610      	mov	r0, r2
 800525e:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 8005260:	4b04      	ldr	r3, [pc, #16]	@ (8005274 <WIZCHIP_WRITE+0x98>)
 8005262:	699b      	ldr	r3, [r3, #24]
 8005264:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8005266:	4b03      	ldr	r3, [pc, #12]	@ (8005274 <WIZCHIP_WRITE+0x98>)
 8005268:	691b      	ldr	r3, [r3, #16]
 800526a:	4798      	blx	r3
}
 800526c:	bf00      	nop
 800526e:	3710      	adds	r7, #16
 8005270:	46bd      	mov	sp, r7
 8005272:	bd80      	pop	{r7, pc}
 8005274:	200000a4 	.word	0x200000a4

08005278 <WIZCHIP_READ_BUF>:
         
void     WIZCHIP_READ_BUF (uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 8005278:	b590      	push	{r4, r7, lr}
 800527a:	b087      	sub	sp, #28
 800527c:	af00      	add	r7, sp, #0
 800527e:	60f8      	str	r0, [r7, #12]
 8005280:	60b9      	str	r1, [r7, #8]
 8005282:	4613      	mov	r3, r2
 8005284:	80fb      	strh	r3, [r7, #6]
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
 8005286:	4b2b      	ldr	r3, [pc, #172]	@ (8005334 <WIZCHIP_READ_BUF+0xbc>)
 8005288:	68db      	ldr	r3, [r3, #12]
 800528a:	4798      	blx	r3
   WIZCHIP.CS._select();
 800528c:	4b29      	ldr	r3, [pc, #164]	@ (8005334 <WIZCHIP_READ_BUF+0xbc>)
 800528e:	695b      	ldr	r3, [r3, #20]
 8005290:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8005292:	4b28      	ldr	r3, [pc, #160]	@ (8005334 <WIZCHIP_READ_BUF+0xbc>)
 8005294:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005296:	2b00      	cmp	r3, #0
 8005298:	d003      	beq.n	80052a2 <WIZCHIP_READ_BUF+0x2a>
 800529a:	4b26      	ldr	r3, [pc, #152]	@ (8005334 <WIZCHIP_READ_BUF+0xbc>)
 800529c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d126      	bne.n	80052f0 <WIZCHIP_READ_BUF+0x78>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 80052a2:	4b24      	ldr	r3, [pc, #144]	@ (8005334 <WIZCHIP_READ_BUF+0xbc>)
 80052a4:	6a1b      	ldr	r3, [r3, #32]
 80052a6:	68fa      	ldr	r2, [r7, #12]
 80052a8:	0c12      	lsrs	r2, r2, #16
 80052aa:	b2d2      	uxtb	r2, r2
 80052ac:	4610      	mov	r0, r2
 80052ae:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 80052b0:	4b20      	ldr	r3, [pc, #128]	@ (8005334 <WIZCHIP_READ_BUF+0xbc>)
 80052b2:	6a1b      	ldr	r3, [r3, #32]
 80052b4:	68fa      	ldr	r2, [r7, #12]
 80052b6:	0a12      	lsrs	r2, r2, #8
 80052b8:	b2d2      	uxtb	r2, r2
 80052ba:	4610      	mov	r0, r2
 80052bc:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 80052be:	4b1d      	ldr	r3, [pc, #116]	@ (8005334 <WIZCHIP_READ_BUF+0xbc>)
 80052c0:	6a1b      	ldr	r3, [r3, #32]
 80052c2:	68fa      	ldr	r2, [r7, #12]
 80052c4:	b2d2      	uxtb	r2, r2
 80052c6:	4610      	mov	r0, r2
 80052c8:	4798      	blx	r3
		for(i = 0; i < len; i++)
 80052ca:	2300      	movs	r3, #0
 80052cc:	82fb      	strh	r3, [r7, #22]
 80052ce:	e00a      	b.n	80052e6 <WIZCHIP_READ_BUF+0x6e>
		   pBuf[i] = WIZCHIP.IF.SPI._read_byte();
 80052d0:	4b18      	ldr	r3, [pc, #96]	@ (8005334 <WIZCHIP_READ_BUF+0xbc>)
 80052d2:	69db      	ldr	r3, [r3, #28]
 80052d4:	8afa      	ldrh	r2, [r7, #22]
 80052d6:	68b9      	ldr	r1, [r7, #8]
 80052d8:	188c      	adds	r4, r1, r2
 80052da:	4798      	blx	r3
 80052dc:	4603      	mov	r3, r0
 80052de:	7023      	strb	r3, [r4, #0]
		for(i = 0; i < len; i++)
 80052e0:	8afb      	ldrh	r3, [r7, #22]
 80052e2:	3301      	adds	r3, #1
 80052e4:	82fb      	strh	r3, [r7, #22]
 80052e6:	8afa      	ldrh	r2, [r7, #22]
 80052e8:	88fb      	ldrh	r3, [r7, #6]
 80052ea:	429a      	cmp	r2, r3
 80052ec:	d3f0      	bcc.n	80052d0 <WIZCHIP_READ_BUF+0x58>
   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 80052ee:	e017      	b.n	8005320 <WIZCHIP_READ_BUF+0xa8>
   }
   else																// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	0c1b      	lsrs	r3, r3, #16
 80052f4:	b2db      	uxtb	r3, r3
 80052f6:	743b      	strb	r3, [r7, #16]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	0a1b      	lsrs	r3, r3, #8
 80052fc:	b2db      	uxtb	r3, r3
 80052fe:	747b      	strb	r3, [r7, #17]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	b2db      	uxtb	r3, r3
 8005304:	74bb      	strb	r3, [r7, #18]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 8005306:	4b0b      	ldr	r3, [pc, #44]	@ (8005334 <WIZCHIP_READ_BUF+0xbc>)
 8005308:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800530a:	f107 0210 	add.w	r2, r7, #16
 800530e:	2103      	movs	r1, #3
 8005310:	4610      	mov	r0, r2
 8005312:	4798      	blx	r3
		WIZCHIP.IF.SPI._read_burst(pBuf, len);
 8005314:	4b07      	ldr	r3, [pc, #28]	@ (8005334 <WIZCHIP_READ_BUF+0xbc>)
 8005316:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005318:	88fa      	ldrh	r2, [r7, #6]
 800531a:	4611      	mov	r1, r2
 800531c:	68b8      	ldr	r0, [r7, #8]
 800531e:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 8005320:	4b04      	ldr	r3, [pc, #16]	@ (8005334 <WIZCHIP_READ_BUF+0xbc>)
 8005322:	699b      	ldr	r3, [r3, #24]
 8005324:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8005326:	4b03      	ldr	r3, [pc, #12]	@ (8005334 <WIZCHIP_READ_BUF+0xbc>)
 8005328:	691b      	ldr	r3, [r3, #16]
 800532a:	4798      	blx	r3
}
 800532c:	bf00      	nop
 800532e:	371c      	adds	r7, #28
 8005330:	46bd      	mov	sp, r7
 8005332:	bd90      	pop	{r4, r7, pc}
 8005334:	200000a4 	.word	0x200000a4

08005338 <WIZCHIP_WRITE_BUF>:

void     WIZCHIP_WRITE_BUF(uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 8005338:	b580      	push	{r7, lr}
 800533a:	b086      	sub	sp, #24
 800533c:	af00      	add	r7, sp, #0
 800533e:	60f8      	str	r0, [r7, #12]
 8005340:	60b9      	str	r1, [r7, #8]
 8005342:	4613      	mov	r3, r2
 8005344:	80fb      	strh	r3, [r7, #6]
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
 8005346:	4b2b      	ldr	r3, [pc, #172]	@ (80053f4 <WIZCHIP_WRITE_BUF+0xbc>)
 8005348:	68db      	ldr	r3, [r3, #12]
 800534a:	4798      	blx	r3
   WIZCHIP.CS._select();
 800534c:	4b29      	ldr	r3, [pc, #164]	@ (80053f4 <WIZCHIP_WRITE_BUF+0xbc>)
 800534e:	695b      	ldr	r3, [r3, #20]
 8005350:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	f043 0304 	orr.w	r3, r3, #4
 8005358:	60fb      	str	r3, [r7, #12]

   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 800535a:	4b26      	ldr	r3, [pc, #152]	@ (80053f4 <WIZCHIP_WRITE_BUF+0xbc>)
 800535c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800535e:	2b00      	cmp	r3, #0
 8005360:	d126      	bne.n	80053b0 <WIZCHIP_WRITE_BUF+0x78>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8005362:	4b24      	ldr	r3, [pc, #144]	@ (80053f4 <WIZCHIP_WRITE_BUF+0xbc>)
 8005364:	6a1b      	ldr	r3, [r3, #32]
 8005366:	68fa      	ldr	r2, [r7, #12]
 8005368:	0c12      	lsrs	r2, r2, #16
 800536a:	b2d2      	uxtb	r2, r2
 800536c:	4610      	mov	r0, r2
 800536e:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8005370:	4b20      	ldr	r3, [pc, #128]	@ (80053f4 <WIZCHIP_WRITE_BUF+0xbc>)
 8005372:	6a1b      	ldr	r3, [r3, #32]
 8005374:	68fa      	ldr	r2, [r7, #12]
 8005376:	0a12      	lsrs	r2, r2, #8
 8005378:	b2d2      	uxtb	r2, r2
 800537a:	4610      	mov	r0, r2
 800537c:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 800537e:	4b1d      	ldr	r3, [pc, #116]	@ (80053f4 <WIZCHIP_WRITE_BUF+0xbc>)
 8005380:	6a1b      	ldr	r3, [r3, #32]
 8005382:	68fa      	ldr	r2, [r7, #12]
 8005384:	b2d2      	uxtb	r2, r2
 8005386:	4610      	mov	r0, r2
 8005388:	4798      	blx	r3
		for(i = 0; i < len; i++)
 800538a:	2300      	movs	r3, #0
 800538c:	82fb      	strh	r3, [r7, #22]
 800538e:	e00a      	b.n	80053a6 <WIZCHIP_WRITE_BUF+0x6e>
			WIZCHIP.IF.SPI._write_byte(pBuf[i]);
 8005390:	4b18      	ldr	r3, [pc, #96]	@ (80053f4 <WIZCHIP_WRITE_BUF+0xbc>)
 8005392:	6a1b      	ldr	r3, [r3, #32]
 8005394:	8afa      	ldrh	r2, [r7, #22]
 8005396:	68b9      	ldr	r1, [r7, #8]
 8005398:	440a      	add	r2, r1
 800539a:	7812      	ldrb	r2, [r2, #0]
 800539c:	4610      	mov	r0, r2
 800539e:	4798      	blx	r3
		for(i = 0; i < len; i++)
 80053a0:	8afb      	ldrh	r3, [r7, #22]
 80053a2:	3301      	adds	r3, #1
 80053a4:	82fb      	strh	r3, [r7, #22]
 80053a6:	8afa      	ldrh	r2, [r7, #22]
 80053a8:	88fb      	ldrh	r3, [r7, #6]
 80053aa:	429a      	cmp	r2, r3
 80053ac:	d3f0      	bcc.n	8005390 <WIZCHIP_WRITE_BUF+0x58>
 80053ae:	e017      	b.n	80053e0 <WIZCHIP_WRITE_BUF+0xa8>
   }
   else									// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	0c1b      	lsrs	r3, r3, #16
 80053b4:	b2db      	uxtb	r3, r3
 80053b6:	743b      	strb	r3, [r7, #16]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	0a1b      	lsrs	r3, r3, #8
 80053bc:	b2db      	uxtb	r3, r3
 80053be:	747b      	strb	r3, [r7, #17]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	b2db      	uxtb	r3, r3
 80053c4:	74bb      	strb	r3, [r7, #18]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 80053c6:	4b0b      	ldr	r3, [pc, #44]	@ (80053f4 <WIZCHIP_WRITE_BUF+0xbc>)
 80053c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80053ca:	f107 0210 	add.w	r2, r7, #16
 80053ce:	2103      	movs	r1, #3
 80053d0:	4610      	mov	r0, r2
 80053d2:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_burst(pBuf, len);
 80053d4:	4b07      	ldr	r3, [pc, #28]	@ (80053f4 <WIZCHIP_WRITE_BUF+0xbc>)
 80053d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80053d8:	88fa      	ldrh	r2, [r7, #6]
 80053da:	4611      	mov	r1, r2
 80053dc:	68b8      	ldr	r0, [r7, #8]
 80053de:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 80053e0:	4b04      	ldr	r3, [pc, #16]	@ (80053f4 <WIZCHIP_WRITE_BUF+0xbc>)
 80053e2:	699b      	ldr	r3, [r3, #24]
 80053e4:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 80053e6:	4b03      	ldr	r3, [pc, #12]	@ (80053f4 <WIZCHIP_WRITE_BUF+0xbc>)
 80053e8:	691b      	ldr	r3, [r3, #16]
 80053ea:	4798      	blx	r3
}
 80053ec:	bf00      	nop
 80053ee:	3718      	adds	r7, #24
 80053f0:	46bd      	mov	sp, r7
 80053f2:	bd80      	pop	{r7, pc}
 80053f4:	200000a4 	.word	0x200000a4

080053f8 <getSn_TX_FSR>:


uint16_t getSn_TX_FSR(uint8_t sn)
{
 80053f8:	b590      	push	{r4, r7, lr}
 80053fa:	b085      	sub	sp, #20
 80053fc:	af00      	add	r7, sp, #0
 80053fe:	4603      	mov	r3, r0
 8005400:	71fb      	strb	r3, [r7, #7]
   uint16_t val=0,val1=0;
 8005402:	2300      	movs	r3, #0
 8005404:	81fb      	strh	r3, [r7, #14]
 8005406:	2300      	movs	r3, #0
 8005408:	81bb      	strh	r3, [r7, #12]

   do
   {
      val1 = WIZCHIP_READ(Sn_TX_FSR(sn));
 800540a:	79fb      	ldrb	r3, [r7, #7]
 800540c:	009b      	lsls	r3, r3, #2
 800540e:	3301      	adds	r3, #1
 8005410:	00db      	lsls	r3, r3, #3
 8005412:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8005416:	4618      	mov	r0, r3
 8005418:	f7ff fe94 	bl	8005144 <WIZCHIP_READ>
 800541c:	4603      	mov	r3, r0
 800541e:	81bb      	strh	r3, [r7, #12]
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 8005420:	89bb      	ldrh	r3, [r7, #12]
 8005422:	021b      	lsls	r3, r3, #8
 8005424:	b29c      	uxth	r4, r3
 8005426:	79fb      	ldrb	r3, [r7, #7]
 8005428:	009b      	lsls	r3, r3, #2
 800542a:	3301      	adds	r3, #1
 800542c:	00db      	lsls	r3, r3, #3
 800542e:	f503 5304 	add.w	r3, r3, #8448	@ 0x2100
 8005432:	4618      	mov	r0, r3
 8005434:	f7ff fe86 	bl	8005144 <WIZCHIP_READ>
 8005438:	4603      	mov	r3, r0
 800543a:	4423      	add	r3, r4
 800543c:	81bb      	strh	r3, [r7, #12]
      if (val1 != 0)
 800543e:	89bb      	ldrh	r3, [r7, #12]
 8005440:	2b00      	cmp	r3, #0
 8005442:	d019      	beq.n	8005478 <getSn_TX_FSR+0x80>
      {
        val = WIZCHIP_READ(Sn_TX_FSR(sn));
 8005444:	79fb      	ldrb	r3, [r7, #7]
 8005446:	009b      	lsls	r3, r3, #2
 8005448:	3301      	adds	r3, #1
 800544a:	00db      	lsls	r3, r3, #3
 800544c:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8005450:	4618      	mov	r0, r3
 8005452:	f7ff fe77 	bl	8005144 <WIZCHIP_READ>
 8005456:	4603      	mov	r3, r0
 8005458:	81fb      	strh	r3, [r7, #14]
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 800545a:	89fb      	ldrh	r3, [r7, #14]
 800545c:	021b      	lsls	r3, r3, #8
 800545e:	b29c      	uxth	r4, r3
 8005460:	79fb      	ldrb	r3, [r7, #7]
 8005462:	009b      	lsls	r3, r3, #2
 8005464:	3301      	adds	r3, #1
 8005466:	00db      	lsls	r3, r3, #3
 8005468:	f503 5304 	add.w	r3, r3, #8448	@ 0x2100
 800546c:	4618      	mov	r0, r3
 800546e:	f7ff fe69 	bl	8005144 <WIZCHIP_READ>
 8005472:	4603      	mov	r3, r0
 8005474:	4423      	add	r3, r4
 8005476:	81fb      	strh	r3, [r7, #14]
      }
   }while (val != val1);
 8005478:	89fa      	ldrh	r2, [r7, #14]
 800547a:	89bb      	ldrh	r3, [r7, #12]
 800547c:	429a      	cmp	r2, r3
 800547e:	d1c4      	bne.n	800540a <getSn_TX_FSR+0x12>
   return val;
 8005480:	89fb      	ldrh	r3, [r7, #14]
}
 8005482:	4618      	mov	r0, r3
 8005484:	3714      	adds	r7, #20
 8005486:	46bd      	mov	sp, r7
 8005488:	bd90      	pop	{r4, r7, pc}

0800548a <getSn_RX_RSR>:


uint16_t getSn_RX_RSR(uint8_t sn)
{
 800548a:	b590      	push	{r4, r7, lr}
 800548c:	b085      	sub	sp, #20
 800548e:	af00      	add	r7, sp, #0
 8005490:	4603      	mov	r3, r0
 8005492:	71fb      	strb	r3, [r7, #7]
   uint16_t val=0,val1=0;
 8005494:	2300      	movs	r3, #0
 8005496:	81fb      	strh	r3, [r7, #14]
 8005498:	2300      	movs	r3, #0
 800549a:	81bb      	strh	r3, [r7, #12]

   do
   {
      val1 = WIZCHIP_READ(Sn_RX_RSR(sn));
 800549c:	79fb      	ldrb	r3, [r7, #7]
 800549e:	009b      	lsls	r3, r3, #2
 80054a0:	3301      	adds	r3, #1
 80054a2:	00db      	lsls	r3, r3, #3
 80054a4:	f503 5318 	add.w	r3, r3, #9728	@ 0x2600
 80054a8:	4618      	mov	r0, r3
 80054aa:	f7ff fe4b 	bl	8005144 <WIZCHIP_READ>
 80054ae:	4603      	mov	r3, r0
 80054b0:	81bb      	strh	r3, [r7, #12]
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
 80054b2:	89bb      	ldrh	r3, [r7, #12]
 80054b4:	021b      	lsls	r3, r3, #8
 80054b6:	b29c      	uxth	r4, r3
 80054b8:	79fb      	ldrb	r3, [r7, #7]
 80054ba:	009b      	lsls	r3, r3, #2
 80054bc:	3301      	adds	r3, #1
 80054be:	00db      	lsls	r3, r3, #3
 80054c0:	f503 531c 	add.w	r3, r3, #9984	@ 0x2700
 80054c4:	4618      	mov	r0, r3
 80054c6:	f7ff fe3d 	bl	8005144 <WIZCHIP_READ>
 80054ca:	4603      	mov	r3, r0
 80054cc:	4423      	add	r3, r4
 80054ce:	81bb      	strh	r3, [r7, #12]
      if (val1 != 0)
 80054d0:	89bb      	ldrh	r3, [r7, #12]
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d019      	beq.n	800550a <getSn_RX_RSR+0x80>
      {
        val = WIZCHIP_READ(Sn_RX_RSR(sn));
 80054d6:	79fb      	ldrb	r3, [r7, #7]
 80054d8:	009b      	lsls	r3, r3, #2
 80054da:	3301      	adds	r3, #1
 80054dc:	00db      	lsls	r3, r3, #3
 80054de:	f503 5318 	add.w	r3, r3, #9728	@ 0x2600
 80054e2:	4618      	mov	r0, r3
 80054e4:	f7ff fe2e 	bl	8005144 <WIZCHIP_READ>
 80054e8:	4603      	mov	r3, r0
 80054ea:	81fb      	strh	r3, [r7, #14]
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
 80054ec:	89fb      	ldrh	r3, [r7, #14]
 80054ee:	021b      	lsls	r3, r3, #8
 80054f0:	b29c      	uxth	r4, r3
 80054f2:	79fb      	ldrb	r3, [r7, #7]
 80054f4:	009b      	lsls	r3, r3, #2
 80054f6:	3301      	adds	r3, #1
 80054f8:	00db      	lsls	r3, r3, #3
 80054fa:	f503 531c 	add.w	r3, r3, #9984	@ 0x2700
 80054fe:	4618      	mov	r0, r3
 8005500:	f7ff fe20 	bl	8005144 <WIZCHIP_READ>
 8005504:	4603      	mov	r3, r0
 8005506:	4423      	add	r3, r4
 8005508:	81fb      	strh	r3, [r7, #14]
      }
   }while (val != val1);
 800550a:	89fa      	ldrh	r2, [r7, #14]
 800550c:	89bb      	ldrh	r3, [r7, #12]
 800550e:	429a      	cmp	r2, r3
 8005510:	d1c4      	bne.n	800549c <getSn_RX_RSR+0x12>
   return val;
 8005512:	89fb      	ldrh	r3, [r7, #14]
}
 8005514:	4618      	mov	r0, r3
 8005516:	3714      	adds	r7, #20
 8005518:	46bd      	mov	sp, r7
 800551a:	bd90      	pop	{r4, r7, pc}

0800551c <wiz_send_data>:

void wiz_send_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
 800551c:	b590      	push	{r4, r7, lr}
 800551e:	b085      	sub	sp, #20
 8005520:	af00      	add	r7, sp, #0
 8005522:	4603      	mov	r3, r0
 8005524:	6039      	str	r1, [r7, #0]
 8005526:	71fb      	strb	r3, [r7, #7]
 8005528:	4613      	mov	r3, r2
 800552a:	80bb      	strh	r3, [r7, #4]
   uint16_t ptr = 0;
 800552c:	2300      	movs	r3, #0
 800552e:	81fb      	strh	r3, [r7, #14]
   uint32_t addrsel = 0;
 8005530:	2300      	movs	r3, #0
 8005532:	60bb      	str	r3, [r7, #8]

   if(len == 0)  return;
 8005534:	88bb      	ldrh	r3, [r7, #4]
 8005536:	2b00      	cmp	r3, #0
 8005538:	d046      	beq.n	80055c8 <wiz_send_data+0xac>
   ptr = getSn_TX_WR(sn);
 800553a:	79fb      	ldrb	r3, [r7, #7]
 800553c:	009b      	lsls	r3, r3, #2
 800553e:	3301      	adds	r3, #1
 8005540:	00db      	lsls	r3, r3, #3
 8005542:	f503 5310 	add.w	r3, r3, #9216	@ 0x2400
 8005546:	4618      	mov	r0, r3
 8005548:	f7ff fdfc 	bl	8005144 <WIZCHIP_READ>
 800554c:	4603      	mov	r3, r0
 800554e:	021b      	lsls	r3, r3, #8
 8005550:	b29c      	uxth	r4, r3
 8005552:	79fb      	ldrb	r3, [r7, #7]
 8005554:	009b      	lsls	r3, r3, #2
 8005556:	3301      	adds	r3, #1
 8005558:	00db      	lsls	r3, r3, #3
 800555a:	f503 5314 	add.w	r3, r3, #9472	@ 0x2500
 800555e:	4618      	mov	r0, r3
 8005560:	f7ff fdf0 	bl	8005144 <WIZCHIP_READ>
 8005564:	4603      	mov	r3, r0
 8005566:	4423      	add	r3, r4
 8005568:	81fb      	strh	r3, [r7, #14]
   //M20140501 : implict type casting -> explict type casting
   //addrsel = (ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
   addrsel = ((uint32_t)ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
 800556a:	89fb      	ldrh	r3, [r7, #14]
 800556c:	021b      	lsls	r3, r3, #8
 800556e:	79fa      	ldrb	r2, [r7, #7]
 8005570:	0092      	lsls	r2, r2, #2
 8005572:	3202      	adds	r2, #2
 8005574:	00d2      	lsls	r2, r2, #3
 8005576:	4413      	add	r3, r2
 8005578:	60bb      	str	r3, [r7, #8]
   //
   WIZCHIP_WRITE_BUF(addrsel,wizdata, len);
 800557a:	88bb      	ldrh	r3, [r7, #4]
 800557c:	461a      	mov	r2, r3
 800557e:	6839      	ldr	r1, [r7, #0]
 8005580:	68b8      	ldr	r0, [r7, #8]
 8005582:	f7ff fed9 	bl	8005338 <WIZCHIP_WRITE_BUF>
   
   ptr += len;
 8005586:	89fa      	ldrh	r2, [r7, #14]
 8005588:	88bb      	ldrh	r3, [r7, #4]
 800558a:	4413      	add	r3, r2
 800558c:	81fb      	strh	r3, [r7, #14]
   setSn_TX_WR(sn,ptr);
 800558e:	79fb      	ldrb	r3, [r7, #7]
 8005590:	009b      	lsls	r3, r3, #2
 8005592:	3301      	adds	r3, #1
 8005594:	00db      	lsls	r3, r3, #3
 8005596:	f503 5310 	add.w	r3, r3, #9216	@ 0x2400
 800559a:	461a      	mov	r2, r3
 800559c:	89fb      	ldrh	r3, [r7, #14]
 800559e:	0a1b      	lsrs	r3, r3, #8
 80055a0:	b29b      	uxth	r3, r3
 80055a2:	b2db      	uxtb	r3, r3
 80055a4:	4619      	mov	r1, r3
 80055a6:	4610      	mov	r0, r2
 80055a8:	f7ff fe18 	bl	80051dc <WIZCHIP_WRITE>
 80055ac:	79fb      	ldrb	r3, [r7, #7]
 80055ae:	009b      	lsls	r3, r3, #2
 80055b0:	3301      	adds	r3, #1
 80055b2:	00db      	lsls	r3, r3, #3
 80055b4:	f503 5314 	add.w	r3, r3, #9472	@ 0x2500
 80055b8:	461a      	mov	r2, r3
 80055ba:	89fb      	ldrh	r3, [r7, #14]
 80055bc:	b2db      	uxtb	r3, r3
 80055be:	4619      	mov	r1, r3
 80055c0:	4610      	mov	r0, r2
 80055c2:	f7ff fe0b 	bl	80051dc <WIZCHIP_WRITE>
 80055c6:	e000      	b.n	80055ca <wiz_send_data+0xae>
   if(len == 0)  return;
 80055c8:	bf00      	nop
}
 80055ca:	3714      	adds	r7, #20
 80055cc:	46bd      	mov	sp, r7
 80055ce:	bd90      	pop	{r4, r7, pc}

080055d0 <wiz_recv_data>:

void wiz_recv_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
 80055d0:	b590      	push	{r4, r7, lr}
 80055d2:	b085      	sub	sp, #20
 80055d4:	af00      	add	r7, sp, #0
 80055d6:	4603      	mov	r3, r0
 80055d8:	6039      	str	r1, [r7, #0]
 80055da:	71fb      	strb	r3, [r7, #7]
 80055dc:	4613      	mov	r3, r2
 80055de:	80bb      	strh	r3, [r7, #4]
   uint16_t ptr = 0;
 80055e0:	2300      	movs	r3, #0
 80055e2:	81fb      	strh	r3, [r7, #14]
   uint32_t addrsel = 0;
 80055e4:	2300      	movs	r3, #0
 80055e6:	60bb      	str	r3, [r7, #8]
   
   if(len == 0) return;
 80055e8:	88bb      	ldrh	r3, [r7, #4]
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d046      	beq.n	800567c <wiz_recv_data+0xac>
   ptr = getSn_RX_RD(sn);
 80055ee:	79fb      	ldrb	r3, [r7, #7]
 80055f0:	009b      	lsls	r3, r3, #2
 80055f2:	3301      	adds	r3, #1
 80055f4:	00db      	lsls	r3, r3, #3
 80055f6:	f503 5320 	add.w	r3, r3, #10240	@ 0x2800
 80055fa:	4618      	mov	r0, r3
 80055fc:	f7ff fda2 	bl	8005144 <WIZCHIP_READ>
 8005600:	4603      	mov	r3, r0
 8005602:	021b      	lsls	r3, r3, #8
 8005604:	b29c      	uxth	r4, r3
 8005606:	79fb      	ldrb	r3, [r7, #7]
 8005608:	009b      	lsls	r3, r3, #2
 800560a:	3301      	adds	r3, #1
 800560c:	00db      	lsls	r3, r3, #3
 800560e:	f503 5324 	add.w	r3, r3, #10496	@ 0x2900
 8005612:	4618      	mov	r0, r3
 8005614:	f7ff fd96 	bl	8005144 <WIZCHIP_READ>
 8005618:	4603      	mov	r3, r0
 800561a:	4423      	add	r3, r4
 800561c:	81fb      	strh	r3, [r7, #14]
   //M20140501 : implict type casting -> explict type casting
   //addrsel = ((ptr << 8) + (WIZCHIP_RXBUF_BLOCK(sn) << 3);
   addrsel = ((uint32_t)ptr << 8) + (WIZCHIP_RXBUF_BLOCK(sn) << 3);
 800561e:	89fb      	ldrh	r3, [r7, #14]
 8005620:	021b      	lsls	r3, r3, #8
 8005622:	79fa      	ldrb	r2, [r7, #7]
 8005624:	0092      	lsls	r2, r2, #2
 8005626:	3203      	adds	r2, #3
 8005628:	00d2      	lsls	r2, r2, #3
 800562a:	4413      	add	r3, r2
 800562c:	60bb      	str	r3, [r7, #8]
   //
   WIZCHIP_READ_BUF(addrsel, wizdata, len);
 800562e:	88bb      	ldrh	r3, [r7, #4]
 8005630:	461a      	mov	r2, r3
 8005632:	6839      	ldr	r1, [r7, #0]
 8005634:	68b8      	ldr	r0, [r7, #8]
 8005636:	f7ff fe1f 	bl	8005278 <WIZCHIP_READ_BUF>
   ptr += len;
 800563a:	89fa      	ldrh	r2, [r7, #14]
 800563c:	88bb      	ldrh	r3, [r7, #4]
 800563e:	4413      	add	r3, r2
 8005640:	81fb      	strh	r3, [r7, #14]
   
   setSn_RX_RD(sn,ptr);
 8005642:	79fb      	ldrb	r3, [r7, #7]
 8005644:	009b      	lsls	r3, r3, #2
 8005646:	3301      	adds	r3, #1
 8005648:	00db      	lsls	r3, r3, #3
 800564a:	f503 5320 	add.w	r3, r3, #10240	@ 0x2800
 800564e:	461a      	mov	r2, r3
 8005650:	89fb      	ldrh	r3, [r7, #14]
 8005652:	0a1b      	lsrs	r3, r3, #8
 8005654:	b29b      	uxth	r3, r3
 8005656:	b2db      	uxtb	r3, r3
 8005658:	4619      	mov	r1, r3
 800565a:	4610      	mov	r0, r2
 800565c:	f7ff fdbe 	bl	80051dc <WIZCHIP_WRITE>
 8005660:	79fb      	ldrb	r3, [r7, #7]
 8005662:	009b      	lsls	r3, r3, #2
 8005664:	3301      	adds	r3, #1
 8005666:	00db      	lsls	r3, r3, #3
 8005668:	f503 5324 	add.w	r3, r3, #10496	@ 0x2900
 800566c:	461a      	mov	r2, r3
 800566e:	89fb      	ldrh	r3, [r7, #14]
 8005670:	b2db      	uxtb	r3, r3
 8005672:	4619      	mov	r1, r3
 8005674:	4610      	mov	r0, r2
 8005676:	f7ff fdb1 	bl	80051dc <WIZCHIP_WRITE>
 800567a:	e000      	b.n	800567e <wiz_recv_data+0xae>
   if(len == 0) return;
 800567c:	bf00      	nop
}
 800567e:	3714      	adds	r7, #20
 8005680:	46bd      	mov	sp, r7
 8005682:	bd90      	pop	{r4, r7, pc}

08005684 <wiz_recv_ignore>:


void wiz_recv_ignore(uint8_t sn, uint16_t len)
{
 8005684:	b590      	push	{r4, r7, lr}
 8005686:	b085      	sub	sp, #20
 8005688:	af00      	add	r7, sp, #0
 800568a:	4603      	mov	r3, r0
 800568c:	460a      	mov	r2, r1
 800568e:	71fb      	strb	r3, [r7, #7]
 8005690:	4613      	mov	r3, r2
 8005692:	80bb      	strh	r3, [r7, #4]
   uint16_t ptr = 0;
 8005694:	2300      	movs	r3, #0
 8005696:	81fb      	strh	r3, [r7, #14]

   ptr = getSn_RX_RD(sn);
 8005698:	79fb      	ldrb	r3, [r7, #7]
 800569a:	009b      	lsls	r3, r3, #2
 800569c:	3301      	adds	r3, #1
 800569e:	00db      	lsls	r3, r3, #3
 80056a0:	f503 5320 	add.w	r3, r3, #10240	@ 0x2800
 80056a4:	4618      	mov	r0, r3
 80056a6:	f7ff fd4d 	bl	8005144 <WIZCHIP_READ>
 80056aa:	4603      	mov	r3, r0
 80056ac:	021b      	lsls	r3, r3, #8
 80056ae:	b29c      	uxth	r4, r3
 80056b0:	79fb      	ldrb	r3, [r7, #7]
 80056b2:	009b      	lsls	r3, r3, #2
 80056b4:	3301      	adds	r3, #1
 80056b6:	00db      	lsls	r3, r3, #3
 80056b8:	f503 5324 	add.w	r3, r3, #10496	@ 0x2900
 80056bc:	4618      	mov	r0, r3
 80056be:	f7ff fd41 	bl	8005144 <WIZCHIP_READ>
 80056c2:	4603      	mov	r3, r0
 80056c4:	4423      	add	r3, r4
 80056c6:	81fb      	strh	r3, [r7, #14]
   ptr += len;
 80056c8:	89fa      	ldrh	r2, [r7, #14]
 80056ca:	88bb      	ldrh	r3, [r7, #4]
 80056cc:	4413      	add	r3, r2
 80056ce:	81fb      	strh	r3, [r7, #14]
   setSn_RX_RD(sn,ptr);
 80056d0:	79fb      	ldrb	r3, [r7, #7]
 80056d2:	009b      	lsls	r3, r3, #2
 80056d4:	3301      	adds	r3, #1
 80056d6:	00db      	lsls	r3, r3, #3
 80056d8:	f503 5320 	add.w	r3, r3, #10240	@ 0x2800
 80056dc:	461a      	mov	r2, r3
 80056de:	89fb      	ldrh	r3, [r7, #14]
 80056e0:	0a1b      	lsrs	r3, r3, #8
 80056e2:	b29b      	uxth	r3, r3
 80056e4:	b2db      	uxtb	r3, r3
 80056e6:	4619      	mov	r1, r3
 80056e8:	4610      	mov	r0, r2
 80056ea:	f7ff fd77 	bl	80051dc <WIZCHIP_WRITE>
 80056ee:	79fb      	ldrb	r3, [r7, #7]
 80056f0:	009b      	lsls	r3, r3, #2
 80056f2:	3301      	adds	r3, #1
 80056f4:	00db      	lsls	r3, r3, #3
 80056f6:	f503 5324 	add.w	r3, r3, #10496	@ 0x2900
 80056fa:	461a      	mov	r2, r3
 80056fc:	89fb      	ldrh	r3, [r7, #14]
 80056fe:	b2db      	uxtb	r3, r3
 8005700:	4619      	mov	r1, r3
 8005702:	4610      	mov	r0, r2
 8005704:	f7ff fd6a 	bl	80051dc <WIZCHIP_WRITE>
}
 8005708:	bf00      	nop
 800570a:	3714      	adds	r7, #20
 800570c:	46bd      	mov	sp, r7
 800570e:	bd90      	pop	{r4, r7, pc}

08005710 <socket>:
   }while(0);              \



int8_t socket(uint8_t sn, uint8_t protocol, uint16_t port, uint8_t flag)
{
 8005710:	b590      	push	{r4, r7, lr}
 8005712:	b085      	sub	sp, #20
 8005714:	af00      	add	r7, sp, #0
 8005716:	4604      	mov	r4, r0
 8005718:	4608      	mov	r0, r1
 800571a:	4611      	mov	r1, r2
 800571c:	461a      	mov	r2, r3
 800571e:	4623      	mov	r3, r4
 8005720:	71fb      	strb	r3, [r7, #7]
 8005722:	4603      	mov	r3, r0
 8005724:	71bb      	strb	r3, [r7, #6]
 8005726:	460b      	mov	r3, r1
 8005728:	80bb      	strh	r3, [r7, #4]
 800572a:	4613      	mov	r3, r2
 800572c:	70fb      	strb	r3, [r7, #3]
	CHECK_SOCKNUM();
 800572e:	79fb      	ldrb	r3, [r7, #7]
 8005730:	2b08      	cmp	r3, #8
 8005732:	d902      	bls.n	800573a <socket+0x2a>
 8005734:	f04f 33ff 	mov.w	r3, #4294967295
 8005738:	e0f0      	b.n	800591c <socket+0x20c>
	switch(protocol)
 800573a:	79bb      	ldrb	r3, [r7, #6]
 800573c:	2b01      	cmp	r3, #1
 800573e:	d005      	beq.n	800574c <socket+0x3c>
 8005740:	2b00      	cmp	r3, #0
 8005742:	dd11      	ble.n	8005768 <socket+0x58>
 8005744:	3b02      	subs	r3, #2
 8005746:	2b02      	cmp	r3, #2
 8005748:	d80e      	bhi.n	8005768 <socket+0x58>
	    break;
         }
      case Sn_MR_UDP :
      case Sn_MR_MACRAW :
	  case Sn_MR_IPRAW :
         break;
 800574a:	e011      	b.n	8005770 <socket+0x60>
            getSIPR((uint8_t*)&taddr);
 800574c:	f107 030c 	add.w	r3, r7, #12
 8005750:	2204      	movs	r2, #4
 8005752:	4619      	mov	r1, r3
 8005754:	f44f 6070 	mov.w	r0, #3840	@ 0xf00
 8005758:	f7ff fd8e 	bl	8005278 <WIZCHIP_READ_BUF>
            if(taddr == 0) return SOCKERR_SOCKINIT;
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	2b00      	cmp	r3, #0
 8005760:	d105      	bne.n	800576e <socket+0x5e>
 8005762:	f06f 0302 	mvn.w	r3, #2
 8005766:	e0d9      	b.n	800591c <socket+0x20c>
   #if ( _WIZCHIP_ < 5200 )
      case Sn_MR_PPPoE :
         break;
   #endif
      default :
         return SOCKERR_SOCKMODE;
 8005768:	f06f 0304 	mvn.w	r3, #4
 800576c:	e0d6      	b.n	800591c <socket+0x20c>
	    break;
 800576e:	bf00      	nop
	}
	//M20150601 : For SF_TCP_ALIGN & W5300
	//if((flag & 0x06) != 0) return SOCKERR_SOCKFLAG;
	if((flag & 0x04) != 0) return SOCKERR_SOCKFLAG;
 8005770:	78fb      	ldrb	r3, [r7, #3]
 8005772:	f003 0304 	and.w	r3, r3, #4
 8005776:	2b00      	cmp	r3, #0
 8005778:	d002      	beq.n	8005780 <socket+0x70>
 800577a:	f06f 0305 	mvn.w	r3, #5
 800577e:	e0cd      	b.n	800591c <socket+0x20c>
#if _WIZCHIP_ == 5200
   if(flag & 0x10) return SOCKERR_SOCKFLAG;
#endif
	   
	if(flag != 0)
 8005780:	78fb      	ldrb	r3, [r7, #3]
 8005782:	2b00      	cmp	r3, #0
 8005784:	d028      	beq.n	80057d8 <socket+0xc8>
	{
   	switch(protocol)
 8005786:	79bb      	ldrb	r3, [r7, #6]
 8005788:	2b01      	cmp	r3, #1
 800578a:	d002      	beq.n	8005792 <socket+0x82>
 800578c:	2b02      	cmp	r3, #2
 800578e:	d008      	beq.n	80057a2 <socket+0x92>
      	         if((flag & SF_MULTI_ENABLE) == 0) return SOCKERR_SOCKFLAG;
      	      }
   	      #endif
   	      break;
   	   default:
   	      break;
 8005790:	e022      	b.n	80057d8 <socket+0xc8>
   		     if((flag & (SF_TCP_NODELAY|SF_IO_NONBLOCK))==0) return SOCKERR_SOCKFLAG;
 8005792:	78fb      	ldrb	r3, [r7, #3]
 8005794:	f003 0321 	and.w	r3, r3, #33	@ 0x21
 8005798:	2b00      	cmp	r3, #0
 800579a:	d11a      	bne.n	80057d2 <socket+0xc2>
 800579c:	f06f 0305 	mvn.w	r3, #5
 80057a0:	e0bc      	b.n	800591c <socket+0x20c>
   	      if(flag & SF_IGMP_VER2)
 80057a2:	78fb      	ldrb	r3, [r7, #3]
 80057a4:	f003 0320 	and.w	r3, r3, #32
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d006      	beq.n	80057ba <socket+0xaa>
   	         if((flag & SF_MULTI_ENABLE)==0) return SOCKERR_SOCKFLAG;
 80057ac:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	db02      	blt.n	80057ba <socket+0xaa>
 80057b4:	f06f 0305 	mvn.w	r3, #5
 80057b8:	e0b0      	b.n	800591c <socket+0x20c>
      	      if(flag & SF_UNI_BLOCK)
 80057ba:	78fb      	ldrb	r3, [r7, #3]
 80057bc:	f003 0310 	and.w	r3, r3, #16
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d008      	beq.n	80057d6 <socket+0xc6>
      	         if((flag & SF_MULTI_ENABLE) == 0) return SOCKERR_SOCKFLAG;
 80057c4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	db04      	blt.n	80057d6 <socket+0xc6>
 80057cc:	f06f 0305 	mvn.w	r3, #5
 80057d0:	e0a4      	b.n	800591c <socket+0x20c>
   	      break;
 80057d2:	bf00      	nop
 80057d4:	e000      	b.n	80057d8 <socket+0xc8>
   	      break;
 80057d6:	bf00      	nop
   	}
   }
	close(sn);
 80057d8:	79fb      	ldrb	r3, [r7, #7]
 80057da:	4618      	mov	r0, r3
 80057dc:	f000 f8ac 	bl	8005938 <close>
	//M20150601
	#if _WIZCHIP_ == 5300
	   setSn_MR(sn, ((uint16_t)(protocol | (flag & 0xF0))) | (((uint16_t)(flag & 0x02)) << 7) );
    #else
	   setSn_MR(sn, (protocol | (flag & 0xF0)));
 80057e0:	79fb      	ldrb	r3, [r7, #7]
 80057e2:	009b      	lsls	r3, r3, #2
 80057e4:	3301      	adds	r3, #1
 80057e6:	00db      	lsls	r3, r3, #3
 80057e8:	4618      	mov	r0, r3
 80057ea:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80057ee:	f023 030f 	bic.w	r3, r3, #15
 80057f2:	b25a      	sxtb	r2, r3
 80057f4:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80057f8:	4313      	orrs	r3, r2
 80057fa:	b25b      	sxtb	r3, r3
 80057fc:	b2db      	uxtb	r3, r3
 80057fe:	4619      	mov	r1, r3
 8005800:	f7ff fcec 	bl	80051dc <WIZCHIP_WRITE>
    #endif
	if(!port)
 8005804:	88bb      	ldrh	r3, [r7, #4]
 8005806:	2b00      	cmp	r3, #0
 8005808:	d110      	bne.n	800582c <socket+0x11c>
	{
	   port = sock_any_port++;
 800580a:	4b46      	ldr	r3, [pc, #280]	@ (8005924 <socket+0x214>)
 800580c:	881b      	ldrh	r3, [r3, #0]
 800580e:	1c5a      	adds	r2, r3, #1
 8005810:	b291      	uxth	r1, r2
 8005812:	4a44      	ldr	r2, [pc, #272]	@ (8005924 <socket+0x214>)
 8005814:	8011      	strh	r1, [r2, #0]
 8005816:	80bb      	strh	r3, [r7, #4]
	   if(sock_any_port == 0xFFF0) sock_any_port = SOCK_ANY_PORT_NUM;
 8005818:	4b42      	ldr	r3, [pc, #264]	@ (8005924 <socket+0x214>)
 800581a:	881b      	ldrh	r3, [r3, #0]
 800581c:	f64f 72f0 	movw	r2, #65520	@ 0xfff0
 8005820:	4293      	cmp	r3, r2
 8005822:	d103      	bne.n	800582c <socket+0x11c>
 8005824:	4b3f      	ldr	r3, [pc, #252]	@ (8005924 <socket+0x214>)
 8005826:	f44f 4240 	mov.w	r2, #49152	@ 0xc000
 800582a:	801a      	strh	r2, [r3, #0]
	}
   setSn_PORT(sn,port);	
 800582c:	79fb      	ldrb	r3, [r7, #7]
 800582e:	009b      	lsls	r3, r3, #2
 8005830:	3301      	adds	r3, #1
 8005832:	00db      	lsls	r3, r3, #3
 8005834:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005838:	461a      	mov	r2, r3
 800583a:	88bb      	ldrh	r3, [r7, #4]
 800583c:	0a1b      	lsrs	r3, r3, #8
 800583e:	b29b      	uxth	r3, r3
 8005840:	b2db      	uxtb	r3, r3
 8005842:	4619      	mov	r1, r3
 8005844:	4610      	mov	r0, r2
 8005846:	f7ff fcc9 	bl	80051dc <WIZCHIP_WRITE>
 800584a:	79fb      	ldrb	r3, [r7, #7]
 800584c:	009b      	lsls	r3, r3, #2
 800584e:	3301      	adds	r3, #1
 8005850:	00db      	lsls	r3, r3, #3
 8005852:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005856:	461a      	mov	r2, r3
 8005858:	88bb      	ldrh	r3, [r7, #4]
 800585a:	b2db      	uxtb	r3, r3
 800585c:	4619      	mov	r1, r3
 800585e:	4610      	mov	r0, r2
 8005860:	f7ff fcbc 	bl	80051dc <WIZCHIP_WRITE>
   setSn_CR(sn,Sn_CR_OPEN);
 8005864:	79fb      	ldrb	r3, [r7, #7]
 8005866:	009b      	lsls	r3, r3, #2
 8005868:	3301      	adds	r3, #1
 800586a:	00db      	lsls	r3, r3, #3
 800586c:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8005870:	2101      	movs	r1, #1
 8005872:	4618      	mov	r0, r3
 8005874:	f7ff fcb2 	bl	80051dc <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 8005878:	bf00      	nop
 800587a:	79fb      	ldrb	r3, [r7, #7]
 800587c:	009b      	lsls	r3, r3, #2
 800587e:	3301      	adds	r3, #1
 8005880:	00db      	lsls	r3, r3, #3
 8005882:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8005886:	4618      	mov	r0, r3
 8005888:	f7ff fc5c 	bl	8005144 <WIZCHIP_READ>
 800588c:	4603      	mov	r3, r0
 800588e:	2b00      	cmp	r3, #0
 8005890:	d1f3      	bne.n	800587a <socket+0x16a>
   //A20150401 : For release the previous sock_io_mode
   sock_io_mode &= ~(1 <<sn);
 8005892:	79fb      	ldrb	r3, [r7, #7]
 8005894:	2201      	movs	r2, #1
 8005896:	fa02 f303 	lsl.w	r3, r2, r3
 800589a:	b21b      	sxth	r3, r3
 800589c:	43db      	mvns	r3, r3
 800589e:	b21a      	sxth	r2, r3
 80058a0:	4b21      	ldr	r3, [pc, #132]	@ (8005928 <socket+0x218>)
 80058a2:	881b      	ldrh	r3, [r3, #0]
 80058a4:	b21b      	sxth	r3, r3
 80058a6:	4013      	ands	r3, r2
 80058a8:	b21b      	sxth	r3, r3
 80058aa:	b29a      	uxth	r2, r3
 80058ac:	4b1e      	ldr	r3, [pc, #120]	@ (8005928 <socket+0x218>)
 80058ae:	801a      	strh	r2, [r3, #0]
   //
	sock_io_mode |= ((flag & SF_IO_NONBLOCK) << sn);   
 80058b0:	78fb      	ldrb	r3, [r7, #3]
 80058b2:	f003 0201 	and.w	r2, r3, #1
 80058b6:	79fb      	ldrb	r3, [r7, #7]
 80058b8:	fa02 f303 	lsl.w	r3, r2, r3
 80058bc:	b21a      	sxth	r2, r3
 80058be:	4b1a      	ldr	r3, [pc, #104]	@ (8005928 <socket+0x218>)
 80058c0:	881b      	ldrh	r3, [r3, #0]
 80058c2:	b21b      	sxth	r3, r3
 80058c4:	4313      	orrs	r3, r2
 80058c6:	b21b      	sxth	r3, r3
 80058c8:	b29a      	uxth	r2, r3
 80058ca:	4b17      	ldr	r3, [pc, #92]	@ (8005928 <socket+0x218>)
 80058cc:	801a      	strh	r2, [r3, #0]
   sock_is_sending &= ~(1<<sn);
 80058ce:	79fb      	ldrb	r3, [r7, #7]
 80058d0:	2201      	movs	r2, #1
 80058d2:	fa02 f303 	lsl.w	r3, r2, r3
 80058d6:	b21b      	sxth	r3, r3
 80058d8:	43db      	mvns	r3, r3
 80058da:	b21a      	sxth	r2, r3
 80058dc:	4b13      	ldr	r3, [pc, #76]	@ (800592c <socket+0x21c>)
 80058de:	881b      	ldrh	r3, [r3, #0]
 80058e0:	b21b      	sxth	r3, r3
 80058e2:	4013      	ands	r3, r2
 80058e4:	b21b      	sxth	r3, r3
 80058e6:	b29a      	uxth	r2, r3
 80058e8:	4b10      	ldr	r3, [pc, #64]	@ (800592c <socket+0x21c>)
 80058ea:	801a      	strh	r2, [r3, #0]
   sock_remained_size[sn] = 0;
 80058ec:	79fb      	ldrb	r3, [r7, #7]
 80058ee:	4a10      	ldr	r2, [pc, #64]	@ (8005930 <socket+0x220>)
 80058f0:	2100      	movs	r1, #0
 80058f2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   //M20150601 : repalce 0 with PACK_COMPLETED
   //sock_pack_info[sn] = 0;
   sock_pack_info[sn] = PACK_COMPLETED;
 80058f6:	79fb      	ldrb	r3, [r7, #7]
 80058f8:	4a0e      	ldr	r2, [pc, #56]	@ (8005934 <socket+0x224>)
 80058fa:	2100      	movs	r1, #0
 80058fc:	54d1      	strb	r1, [r2, r3]
   //
   while(getSn_SR(sn) == SOCK_CLOSED);
 80058fe:	bf00      	nop
 8005900:	79fb      	ldrb	r3, [r7, #7]
 8005902:	009b      	lsls	r3, r3, #2
 8005904:	3301      	adds	r3, #1
 8005906:	00db      	lsls	r3, r3, #3
 8005908:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 800590c:	4618      	mov	r0, r3
 800590e:	f7ff fc19 	bl	8005144 <WIZCHIP_READ>
 8005912:	4603      	mov	r3, r0
 8005914:	2b00      	cmp	r3, #0
 8005916:	d0f3      	beq.n	8005900 <socket+0x1f0>
   return (int8_t)sn;
 8005918:	f997 3007 	ldrsb.w	r3, [r7, #7]
}	   
 800591c:	4618      	mov	r0, r3
 800591e:	3714      	adds	r7, #20
 8005920:	46bd      	mov	sp, r7
 8005922:	bd90      	pop	{r4, r7, pc}
 8005924:	200000a0 	.word	0x200000a0
 8005928:	20000e14 	.word	0x20000e14
 800592c:	20000e16 	.word	0x20000e16
 8005930:	20000e18 	.word	0x20000e18
 8005934:	20000e28 	.word	0x20000e28

08005938 <close>:

int8_t close(uint8_t sn)
{
 8005938:	b580      	push	{r7, lr}
 800593a:	b082      	sub	sp, #8
 800593c:	af00      	add	r7, sp, #0
 800593e:	4603      	mov	r3, r0
 8005940:	71fb      	strb	r3, [r7, #7]
	CHECK_SOCKNUM();
 8005942:	79fb      	ldrb	r3, [r7, #7]
 8005944:	2b08      	cmp	r3, #8
 8005946:	d902      	bls.n	800594e <close+0x16>
 8005948:	f04f 33ff 	mov.w	r3, #4294967295
 800594c:	e055      	b.n	80059fa <close+0xc2>
      while(getSn_CR(sn) != 0);
      while(getSn_SR(sn) != SOCK_UDP);
      sendto(sn,destip,1,destip,0x3000); // send the dummy data to an unknown destination(0.0.0.1).
   };   
#endif 
	setSn_CR(sn,Sn_CR_CLOSE);
 800594e:	79fb      	ldrb	r3, [r7, #7]
 8005950:	009b      	lsls	r3, r3, #2
 8005952:	3301      	adds	r3, #1
 8005954:	00db      	lsls	r3, r3, #3
 8005956:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 800595a:	2110      	movs	r1, #16
 800595c:	4618      	mov	r0, r3
 800595e:	f7ff fc3d 	bl	80051dc <WIZCHIP_WRITE>
   /* wait to process the command... */
	while( getSn_CR(sn) );
 8005962:	bf00      	nop
 8005964:	79fb      	ldrb	r3, [r7, #7]
 8005966:	009b      	lsls	r3, r3, #2
 8005968:	3301      	adds	r3, #1
 800596a:	00db      	lsls	r3, r3, #3
 800596c:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8005970:	4618      	mov	r0, r3
 8005972:	f7ff fbe7 	bl	8005144 <WIZCHIP_READ>
 8005976:	4603      	mov	r3, r0
 8005978:	2b00      	cmp	r3, #0
 800597a:	d1f3      	bne.n	8005964 <close+0x2c>
	/* clear all interrupt of the socket. */
	setSn_IR(sn, 0xFF);
 800597c:	79fb      	ldrb	r3, [r7, #7]
 800597e:	009b      	lsls	r3, r3, #2
 8005980:	3301      	adds	r3, #1
 8005982:	00db      	lsls	r3, r3, #3
 8005984:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8005988:	211f      	movs	r1, #31
 800598a:	4618      	mov	r0, r3
 800598c:	f7ff fc26 	bl	80051dc <WIZCHIP_WRITE>
	//A20150401 : Release the sock_io_mode of socket n.
	sock_io_mode &= ~(1<<sn);
 8005990:	79fb      	ldrb	r3, [r7, #7]
 8005992:	2201      	movs	r2, #1
 8005994:	fa02 f303 	lsl.w	r3, r2, r3
 8005998:	b21b      	sxth	r3, r3
 800599a:	43db      	mvns	r3, r3
 800599c:	b21a      	sxth	r2, r3
 800599e:	4b19      	ldr	r3, [pc, #100]	@ (8005a04 <close+0xcc>)
 80059a0:	881b      	ldrh	r3, [r3, #0]
 80059a2:	b21b      	sxth	r3, r3
 80059a4:	4013      	ands	r3, r2
 80059a6:	b21b      	sxth	r3, r3
 80059a8:	b29a      	uxth	r2, r3
 80059aa:	4b16      	ldr	r3, [pc, #88]	@ (8005a04 <close+0xcc>)
 80059ac:	801a      	strh	r2, [r3, #0]
	//
	sock_is_sending &= ~(1<<sn);
 80059ae:	79fb      	ldrb	r3, [r7, #7]
 80059b0:	2201      	movs	r2, #1
 80059b2:	fa02 f303 	lsl.w	r3, r2, r3
 80059b6:	b21b      	sxth	r3, r3
 80059b8:	43db      	mvns	r3, r3
 80059ba:	b21a      	sxth	r2, r3
 80059bc:	4b12      	ldr	r3, [pc, #72]	@ (8005a08 <close+0xd0>)
 80059be:	881b      	ldrh	r3, [r3, #0]
 80059c0:	b21b      	sxth	r3, r3
 80059c2:	4013      	ands	r3, r2
 80059c4:	b21b      	sxth	r3, r3
 80059c6:	b29a      	uxth	r2, r3
 80059c8:	4b0f      	ldr	r3, [pc, #60]	@ (8005a08 <close+0xd0>)
 80059ca:	801a      	strh	r2, [r3, #0]
	sock_remained_size[sn] = 0;
 80059cc:	79fb      	ldrb	r3, [r7, #7]
 80059ce:	4a0f      	ldr	r2, [pc, #60]	@ (8005a0c <close+0xd4>)
 80059d0:	2100      	movs	r1, #0
 80059d2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	sock_pack_info[sn] = 0;
 80059d6:	79fb      	ldrb	r3, [r7, #7]
 80059d8:	4a0d      	ldr	r2, [pc, #52]	@ (8005a10 <close+0xd8>)
 80059da:	2100      	movs	r1, #0
 80059dc:	54d1      	strb	r1, [r2, r3]
	while(getSn_SR(sn) != SOCK_CLOSED);
 80059de:	bf00      	nop
 80059e0:	79fb      	ldrb	r3, [r7, #7]
 80059e2:	009b      	lsls	r3, r3, #2
 80059e4:	3301      	adds	r3, #1
 80059e6:	00db      	lsls	r3, r3, #3
 80059e8:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 80059ec:	4618      	mov	r0, r3
 80059ee:	f7ff fba9 	bl	8005144 <WIZCHIP_READ>
 80059f2:	4603      	mov	r3, r0
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d1f3      	bne.n	80059e0 <close+0xa8>
	return SOCK_OK;
 80059f8:	2301      	movs	r3, #1
}
 80059fa:	4618      	mov	r0, r3
 80059fc:	3708      	adds	r7, #8
 80059fe:	46bd      	mov	sp, r7
 8005a00:	bd80      	pop	{r7, pc}
 8005a02:	bf00      	nop
 8005a04:	20000e14 	.word	0x20000e14
 8005a08:	20000e16 	.word	0x20000e16
 8005a0c:	20000e18 	.word	0x20000e18
 8005a10:	20000e28 	.word	0x20000e28

08005a14 <connect>:
   return SOCK_OK;
}


int8_t connect(uint8_t sn, uint8_t * addr, uint16_t port)
{
 8005a14:	b580      	push	{r7, lr}
 8005a16:	b084      	sub	sp, #16
 8005a18:	af00      	add	r7, sp, #0
 8005a1a:	4603      	mov	r3, r0
 8005a1c:	6039      	str	r1, [r7, #0]
 8005a1e:	71fb      	strb	r3, [r7, #7]
 8005a20:	4613      	mov	r3, r2
 8005a22:	80bb      	strh	r3, [r7, #4]
   CHECK_SOCKNUM();
 8005a24:	79fb      	ldrb	r3, [r7, #7]
 8005a26:	2b08      	cmp	r3, #8
 8005a28:	d902      	bls.n	8005a30 <connect+0x1c>
 8005a2a:	f04f 33ff 	mov.w	r3, #4294967295
 8005a2e:	e0c6      	b.n	8005bbe <connect+0x1aa>
   CHECK_SOCKMODE(Sn_MR_TCP);
 8005a30:	79fb      	ldrb	r3, [r7, #7]
 8005a32:	009b      	lsls	r3, r3, #2
 8005a34:	3301      	adds	r3, #1
 8005a36:	00db      	lsls	r3, r3, #3
 8005a38:	4618      	mov	r0, r3
 8005a3a:	f7ff fb83 	bl	8005144 <WIZCHIP_READ>
 8005a3e:	4603      	mov	r3, r0
 8005a40:	f003 030f 	and.w	r3, r3, #15
 8005a44:	2b01      	cmp	r3, #1
 8005a46:	d002      	beq.n	8005a4e <connect+0x3a>
 8005a48:	f06f 0304 	mvn.w	r3, #4
 8005a4c:	e0b7      	b.n	8005bbe <connect+0x1aa>
   CHECK_SOCKINIT();
 8005a4e:	79fb      	ldrb	r3, [r7, #7]
 8005a50:	009b      	lsls	r3, r3, #2
 8005a52:	3301      	adds	r3, #1
 8005a54:	00db      	lsls	r3, r3, #3
 8005a56:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8005a5a:	4618      	mov	r0, r3
 8005a5c:	f7ff fb72 	bl	8005144 <WIZCHIP_READ>
 8005a60:	4603      	mov	r3, r0
 8005a62:	2b13      	cmp	r3, #19
 8005a64:	d002      	beq.n	8005a6c <connect+0x58>
 8005a66:	f06f 0302 	mvn.w	r3, #2
 8005a6a:	e0a8      	b.n	8005bbe <connect+0x1aa>
   //M20140501 : For avoiding fatal error on memory align mismatched
   //if( *((uint32_t*)addr) == 0xFFFFFFFF || *((uint32_t*)addr) == 0) return SOCKERR_IPINVALID;
   {
      uint32_t taddr;
      taddr = ((uint32_t)addr[0] & 0x000000FF);
 8005a6c:	683b      	ldr	r3, [r7, #0]
 8005a6e:	781b      	ldrb	r3, [r3, #0]
 8005a70:	60fb      	str	r3, [r7, #12]
      taddr = (taddr << 8) + ((uint32_t)addr[1] & 0x000000FF);
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	021b      	lsls	r3, r3, #8
 8005a76:	683a      	ldr	r2, [r7, #0]
 8005a78:	3201      	adds	r2, #1
 8005a7a:	7812      	ldrb	r2, [r2, #0]
 8005a7c:	4413      	add	r3, r2
 8005a7e:	60fb      	str	r3, [r7, #12]
      taddr = (taddr << 8) + ((uint32_t)addr[2] & 0x000000FF);
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	021b      	lsls	r3, r3, #8
 8005a84:	683a      	ldr	r2, [r7, #0]
 8005a86:	3202      	adds	r2, #2
 8005a88:	7812      	ldrb	r2, [r2, #0]
 8005a8a:	4413      	add	r3, r2
 8005a8c:	60fb      	str	r3, [r7, #12]
      taddr = (taddr << 8) + ((uint32_t)addr[3] & 0x000000FF);
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	021b      	lsls	r3, r3, #8
 8005a92:	683a      	ldr	r2, [r7, #0]
 8005a94:	3203      	adds	r2, #3
 8005a96:	7812      	ldrb	r2, [r2, #0]
 8005a98:	4413      	add	r3, r2
 8005a9a:	60fb      	str	r3, [r7, #12]
      if( taddr == 0xFFFFFFFF || taddr == 0) return SOCKERR_IPINVALID;
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005aa2:	d002      	beq.n	8005aaa <connect+0x96>
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d102      	bne.n	8005ab0 <connect+0x9c>
 8005aaa:	f06f 030b 	mvn.w	r3, #11
 8005aae:	e086      	b.n	8005bbe <connect+0x1aa>
   }
   //
	
	if(port == 0) return SOCKERR_PORTZERO;
 8005ab0:	88bb      	ldrh	r3, [r7, #4]
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d102      	bne.n	8005abc <connect+0xa8>
 8005ab6:	f06f 030a 	mvn.w	r3, #10
 8005aba:	e080      	b.n	8005bbe <connect+0x1aa>
	setSn_DIPR(sn,addr);
 8005abc:	79fb      	ldrb	r3, [r7, #7]
 8005abe:	009b      	lsls	r3, r3, #2
 8005ac0:	3301      	adds	r3, #1
 8005ac2:	00db      	lsls	r3, r3, #3
 8005ac4:	f503 6340 	add.w	r3, r3, #3072	@ 0xc00
 8005ac8:	2204      	movs	r2, #4
 8005aca:	6839      	ldr	r1, [r7, #0]
 8005acc:	4618      	mov	r0, r3
 8005ace:	f7ff fc33 	bl	8005338 <WIZCHIP_WRITE_BUF>
	setSn_DPORT(sn,port);
 8005ad2:	79fb      	ldrb	r3, [r7, #7]
 8005ad4:	009b      	lsls	r3, r3, #2
 8005ad6:	3301      	adds	r3, #1
 8005ad8:	00db      	lsls	r3, r3, #3
 8005ada:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005ade:	461a      	mov	r2, r3
 8005ae0:	88bb      	ldrh	r3, [r7, #4]
 8005ae2:	0a1b      	lsrs	r3, r3, #8
 8005ae4:	b29b      	uxth	r3, r3
 8005ae6:	b2db      	uxtb	r3, r3
 8005ae8:	4619      	mov	r1, r3
 8005aea:	4610      	mov	r0, r2
 8005aec:	f7ff fb76 	bl	80051dc <WIZCHIP_WRITE>
 8005af0:	79fb      	ldrb	r3, [r7, #7]
 8005af2:	009b      	lsls	r3, r3, #2
 8005af4:	3301      	adds	r3, #1
 8005af6:	00db      	lsls	r3, r3, #3
 8005af8:	f503 5388 	add.w	r3, r3, #4352	@ 0x1100
 8005afc:	461a      	mov	r2, r3
 8005afe:	88bb      	ldrh	r3, [r7, #4]
 8005b00:	b2db      	uxtb	r3, r3
 8005b02:	4619      	mov	r1, r3
 8005b04:	4610      	mov	r0, r2
 8005b06:	f7ff fb69 	bl	80051dc <WIZCHIP_WRITE>
	setSn_CR(sn,Sn_CR_CONNECT);
 8005b0a:	79fb      	ldrb	r3, [r7, #7]
 8005b0c:	009b      	lsls	r3, r3, #2
 8005b0e:	3301      	adds	r3, #1
 8005b10:	00db      	lsls	r3, r3, #3
 8005b12:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8005b16:	2104      	movs	r1, #4
 8005b18:	4618      	mov	r0, r3
 8005b1a:	f7ff fb5f 	bl	80051dc <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 8005b1e:	bf00      	nop
 8005b20:	79fb      	ldrb	r3, [r7, #7]
 8005b22:	009b      	lsls	r3, r3, #2
 8005b24:	3301      	adds	r3, #1
 8005b26:	00db      	lsls	r3, r3, #3
 8005b28:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8005b2c:	4618      	mov	r0, r3
 8005b2e:	f7ff fb09 	bl	8005144 <WIZCHIP_READ>
 8005b32:	4603      	mov	r3, r0
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d1f3      	bne.n	8005b20 <connect+0x10c>
   if(sock_io_mode & (1<<sn)) return SOCK_BUSY;
 8005b38:	4b23      	ldr	r3, [pc, #140]	@ (8005bc8 <connect+0x1b4>)
 8005b3a:	881b      	ldrh	r3, [r3, #0]
 8005b3c:	461a      	mov	r2, r3
 8005b3e:	79fb      	ldrb	r3, [r7, #7]
 8005b40:	fa42 f303 	asr.w	r3, r2, r3
 8005b44:	f003 0301 	and.w	r3, r3, #1
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d02b      	beq.n	8005ba4 <connect+0x190>
 8005b4c:	2300      	movs	r3, #0
 8005b4e:	e036      	b.n	8005bbe <connect+0x1aa>
   while(getSn_SR(sn) != SOCK_ESTABLISHED)
   {
		if (getSn_IR(sn) & Sn_IR_TIMEOUT)
 8005b50:	79fb      	ldrb	r3, [r7, #7]
 8005b52:	009b      	lsls	r3, r3, #2
 8005b54:	3301      	adds	r3, #1
 8005b56:	00db      	lsls	r3, r3, #3
 8005b58:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8005b5c:	4618      	mov	r0, r3
 8005b5e:	f7ff faf1 	bl	8005144 <WIZCHIP_READ>
 8005b62:	4603      	mov	r3, r0
 8005b64:	f003 0308 	and.w	r3, r3, #8
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d00c      	beq.n	8005b86 <connect+0x172>
		{
			setSn_IR(sn, Sn_IR_TIMEOUT);
 8005b6c:	79fb      	ldrb	r3, [r7, #7]
 8005b6e:	009b      	lsls	r3, r3, #2
 8005b70:	3301      	adds	r3, #1
 8005b72:	00db      	lsls	r3, r3, #3
 8005b74:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8005b78:	2108      	movs	r1, #8
 8005b7a:	4618      	mov	r0, r3
 8005b7c:	f7ff fb2e 	bl	80051dc <WIZCHIP_WRITE>
            return SOCKERR_TIMEOUT;
 8005b80:	f06f 030c 	mvn.w	r3, #12
 8005b84:	e01b      	b.n	8005bbe <connect+0x1aa>
		}

		if (getSn_SR(sn) == SOCK_CLOSED)
 8005b86:	79fb      	ldrb	r3, [r7, #7]
 8005b88:	009b      	lsls	r3, r3, #2
 8005b8a:	3301      	adds	r3, #1
 8005b8c:	00db      	lsls	r3, r3, #3
 8005b8e:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8005b92:	4618      	mov	r0, r3
 8005b94:	f7ff fad6 	bl	8005144 <WIZCHIP_READ>
 8005b98:	4603      	mov	r3, r0
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d102      	bne.n	8005ba4 <connect+0x190>
		{
			return SOCKERR_SOCKCLOSED;
 8005b9e:	f06f 0303 	mvn.w	r3, #3
 8005ba2:	e00c      	b.n	8005bbe <connect+0x1aa>
   while(getSn_SR(sn) != SOCK_ESTABLISHED)
 8005ba4:	79fb      	ldrb	r3, [r7, #7]
 8005ba6:	009b      	lsls	r3, r3, #2
 8005ba8:	3301      	adds	r3, #1
 8005baa:	00db      	lsls	r3, r3, #3
 8005bac:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8005bb0:	4618      	mov	r0, r3
 8005bb2:	f7ff fac7 	bl	8005144 <WIZCHIP_READ>
 8005bb6:	4603      	mov	r3, r0
 8005bb8:	2b17      	cmp	r3, #23
 8005bba:	d1c9      	bne.n	8005b50 <connect+0x13c>
		}
	}
   
   return SOCK_OK;
 8005bbc:	2301      	movs	r3, #1
}
 8005bbe:	4618      	mov	r0, r3
 8005bc0:	3710      	adds	r7, #16
 8005bc2:	46bd      	mov	sp, r7
 8005bc4:	bd80      	pop	{r7, pc}
 8005bc6:	bf00      	nop
 8005bc8:	20000e14 	.word	0x20000e14

08005bcc <disconnect>:

int8_t disconnect(uint8_t sn)
{
 8005bcc:	b580      	push	{r7, lr}
 8005bce:	b082      	sub	sp, #8
 8005bd0:	af00      	add	r7, sp, #0
 8005bd2:	4603      	mov	r3, r0
 8005bd4:	71fb      	strb	r3, [r7, #7]
   CHECK_SOCKNUM();
 8005bd6:	79fb      	ldrb	r3, [r7, #7]
 8005bd8:	2b08      	cmp	r3, #8
 8005bda:	d902      	bls.n	8005be2 <disconnect+0x16>
 8005bdc:	f04f 33ff 	mov.w	r3, #4294967295
 8005be0:	e062      	b.n	8005ca8 <disconnect+0xdc>
   CHECK_SOCKMODE(Sn_MR_TCP);
 8005be2:	79fb      	ldrb	r3, [r7, #7]
 8005be4:	009b      	lsls	r3, r3, #2
 8005be6:	3301      	adds	r3, #1
 8005be8:	00db      	lsls	r3, r3, #3
 8005bea:	4618      	mov	r0, r3
 8005bec:	f7ff faaa 	bl	8005144 <WIZCHIP_READ>
 8005bf0:	4603      	mov	r3, r0
 8005bf2:	f003 030f 	and.w	r3, r3, #15
 8005bf6:	2b01      	cmp	r3, #1
 8005bf8:	d002      	beq.n	8005c00 <disconnect+0x34>
 8005bfa:	f06f 0304 	mvn.w	r3, #4
 8005bfe:	e053      	b.n	8005ca8 <disconnect+0xdc>
	setSn_CR(sn,Sn_CR_DISCON);
 8005c00:	79fb      	ldrb	r3, [r7, #7]
 8005c02:	009b      	lsls	r3, r3, #2
 8005c04:	3301      	adds	r3, #1
 8005c06:	00db      	lsls	r3, r3, #3
 8005c08:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8005c0c:	2108      	movs	r1, #8
 8005c0e:	4618      	mov	r0, r3
 8005c10:	f7ff fae4 	bl	80051dc <WIZCHIP_WRITE>
	/* wait to process the command... */
	while(getSn_CR(sn));
 8005c14:	bf00      	nop
 8005c16:	79fb      	ldrb	r3, [r7, #7]
 8005c18:	009b      	lsls	r3, r3, #2
 8005c1a:	3301      	adds	r3, #1
 8005c1c:	00db      	lsls	r3, r3, #3
 8005c1e:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8005c22:	4618      	mov	r0, r3
 8005c24:	f7ff fa8e 	bl	8005144 <WIZCHIP_READ>
 8005c28:	4603      	mov	r3, r0
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d1f3      	bne.n	8005c16 <disconnect+0x4a>
	sock_is_sending &= ~(1<<sn);
 8005c2e:	79fb      	ldrb	r3, [r7, #7]
 8005c30:	2201      	movs	r2, #1
 8005c32:	fa02 f303 	lsl.w	r3, r2, r3
 8005c36:	b21b      	sxth	r3, r3
 8005c38:	43db      	mvns	r3, r3
 8005c3a:	b21a      	sxth	r2, r3
 8005c3c:	4b1c      	ldr	r3, [pc, #112]	@ (8005cb0 <disconnect+0xe4>)
 8005c3e:	881b      	ldrh	r3, [r3, #0]
 8005c40:	b21b      	sxth	r3, r3
 8005c42:	4013      	ands	r3, r2
 8005c44:	b21b      	sxth	r3, r3
 8005c46:	b29a      	uxth	r2, r3
 8005c48:	4b19      	ldr	r3, [pc, #100]	@ (8005cb0 <disconnect+0xe4>)
 8005c4a:	801a      	strh	r2, [r3, #0]
   if(sock_io_mode & (1<<sn)) return SOCK_BUSY;
 8005c4c:	4b19      	ldr	r3, [pc, #100]	@ (8005cb4 <disconnect+0xe8>)
 8005c4e:	881b      	ldrh	r3, [r3, #0]
 8005c50:	461a      	mov	r2, r3
 8005c52:	79fb      	ldrb	r3, [r7, #7]
 8005c54:	fa42 f303 	asr.w	r3, r2, r3
 8005c58:	f003 0301 	and.w	r3, r3, #1
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d016      	beq.n	8005c8e <disconnect+0xc2>
 8005c60:	2300      	movs	r3, #0
 8005c62:	e021      	b.n	8005ca8 <disconnect+0xdc>
	while(getSn_SR(sn) != SOCK_CLOSED)
	{
	   if(getSn_IR(sn) & Sn_IR_TIMEOUT)
 8005c64:	79fb      	ldrb	r3, [r7, #7]
 8005c66:	009b      	lsls	r3, r3, #2
 8005c68:	3301      	adds	r3, #1
 8005c6a:	00db      	lsls	r3, r3, #3
 8005c6c:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8005c70:	4618      	mov	r0, r3
 8005c72:	f7ff fa67 	bl	8005144 <WIZCHIP_READ>
 8005c76:	4603      	mov	r3, r0
 8005c78:	f003 0308 	and.w	r3, r3, #8
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d006      	beq.n	8005c8e <disconnect+0xc2>
	   {
	      close(sn);
 8005c80:	79fb      	ldrb	r3, [r7, #7]
 8005c82:	4618      	mov	r0, r3
 8005c84:	f7ff fe58 	bl	8005938 <close>
	      return SOCKERR_TIMEOUT;
 8005c88:	f06f 030c 	mvn.w	r3, #12
 8005c8c:	e00c      	b.n	8005ca8 <disconnect+0xdc>
	while(getSn_SR(sn) != SOCK_CLOSED)
 8005c8e:	79fb      	ldrb	r3, [r7, #7]
 8005c90:	009b      	lsls	r3, r3, #2
 8005c92:	3301      	adds	r3, #1
 8005c94:	00db      	lsls	r3, r3, #3
 8005c96:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8005c9a:	4618      	mov	r0, r3
 8005c9c:	f7ff fa52 	bl	8005144 <WIZCHIP_READ>
 8005ca0:	4603      	mov	r3, r0
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d1de      	bne.n	8005c64 <disconnect+0x98>
	   }
	}
	return SOCK_OK;
 8005ca6:	2301      	movs	r3, #1
}
 8005ca8:	4618      	mov	r0, r3
 8005caa:	3708      	adds	r7, #8
 8005cac:	46bd      	mov	sp, r7
 8005cae:	bd80      	pop	{r7, pc}
 8005cb0:	20000e16 	.word	0x20000e16
 8005cb4:	20000e14 	.word	0x20000e14

08005cb8 <send>:

int32_t send(uint8_t sn, uint8_t * buf, uint16_t len)
{
 8005cb8:	b580      	push	{r7, lr}
 8005cba:	b084      	sub	sp, #16
 8005cbc:	af00      	add	r7, sp, #0
 8005cbe:	4603      	mov	r3, r0
 8005cc0:	6039      	str	r1, [r7, #0]
 8005cc2:	71fb      	strb	r3, [r7, #7]
 8005cc4:	4613      	mov	r3, r2
 8005cc6:	80bb      	strh	r3, [r7, #4]
   uint8_t tmp=0;
 8005cc8:	2300      	movs	r3, #0
 8005cca:	73fb      	strb	r3, [r7, #15]
   uint16_t freesize=0;
 8005ccc:	2300      	movs	r3, #0
 8005cce:	81bb      	strh	r3, [r7, #12]
   
   CHECK_SOCKNUM();
 8005cd0:	79fb      	ldrb	r3, [r7, #7]
 8005cd2:	2b08      	cmp	r3, #8
 8005cd4:	d902      	bls.n	8005cdc <send+0x24>
 8005cd6:	f04f 33ff 	mov.w	r3, #4294967295
 8005cda:	e0dd      	b.n	8005e98 <send+0x1e0>
   CHECK_SOCKMODE(Sn_MR_TCP);
 8005cdc:	79fb      	ldrb	r3, [r7, #7]
 8005cde:	009b      	lsls	r3, r3, #2
 8005ce0:	3301      	adds	r3, #1
 8005ce2:	00db      	lsls	r3, r3, #3
 8005ce4:	4618      	mov	r0, r3
 8005ce6:	f7ff fa2d 	bl	8005144 <WIZCHIP_READ>
 8005cea:	4603      	mov	r3, r0
 8005cec:	f003 030f 	and.w	r3, r3, #15
 8005cf0:	2b01      	cmp	r3, #1
 8005cf2:	d002      	beq.n	8005cfa <send+0x42>
 8005cf4:	f06f 0304 	mvn.w	r3, #4
 8005cf8:	e0ce      	b.n	8005e98 <send+0x1e0>
   CHECK_SOCKDATA();
 8005cfa:	88bb      	ldrh	r3, [r7, #4]
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d102      	bne.n	8005d06 <send+0x4e>
 8005d00:	f06f 030d 	mvn.w	r3, #13
 8005d04:	e0c8      	b.n	8005e98 <send+0x1e0>
   tmp = getSn_SR(sn);
 8005d06:	79fb      	ldrb	r3, [r7, #7]
 8005d08:	009b      	lsls	r3, r3, #2
 8005d0a:	3301      	adds	r3, #1
 8005d0c:	00db      	lsls	r3, r3, #3
 8005d0e:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8005d12:	4618      	mov	r0, r3
 8005d14:	f7ff fa16 	bl	8005144 <WIZCHIP_READ>
 8005d18:	4603      	mov	r3, r0
 8005d1a:	73fb      	strb	r3, [r7, #15]
   if(tmp != SOCK_ESTABLISHED && tmp != SOCK_CLOSE_WAIT) return SOCKERR_SOCKSTATUS;
 8005d1c:	7bfb      	ldrb	r3, [r7, #15]
 8005d1e:	2b17      	cmp	r3, #23
 8005d20:	d005      	beq.n	8005d2e <send+0x76>
 8005d22:	7bfb      	ldrb	r3, [r7, #15]
 8005d24:	2b1c      	cmp	r3, #28
 8005d26:	d002      	beq.n	8005d2e <send+0x76>
 8005d28:	f06f 0306 	mvn.w	r3, #6
 8005d2c:	e0b4      	b.n	8005e98 <send+0x1e0>
   if( sock_is_sending & (1<<sn) )
 8005d2e:	4b5c      	ldr	r3, [pc, #368]	@ (8005ea0 <send+0x1e8>)
 8005d30:	881b      	ldrh	r3, [r3, #0]
 8005d32:	461a      	mov	r2, r3
 8005d34:	79fb      	ldrb	r3, [r7, #7]
 8005d36:	fa42 f303 	asr.w	r3, r2, r3
 8005d3a:	f003 0301 	and.w	r3, r3, #1
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d039      	beq.n	8005db6 <send+0xfe>
   {
      tmp = getSn_IR(sn);
 8005d42:	79fb      	ldrb	r3, [r7, #7]
 8005d44:	009b      	lsls	r3, r3, #2
 8005d46:	3301      	adds	r3, #1
 8005d48:	00db      	lsls	r3, r3, #3
 8005d4a:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8005d4e:	4618      	mov	r0, r3
 8005d50:	f7ff f9f8 	bl	8005144 <WIZCHIP_READ>
 8005d54:	4603      	mov	r3, r0
 8005d56:	f003 031f 	and.w	r3, r3, #31
 8005d5a:	73fb      	strb	r3, [r7, #15]
      if(tmp & Sn_IR_SENDOK)
 8005d5c:	7bfb      	ldrb	r3, [r7, #15]
 8005d5e:	f003 0310 	and.w	r3, r3, #16
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d019      	beq.n	8005d9a <send+0xe2>
      {
         setSn_IR(sn, Sn_IR_SENDOK);
 8005d66:	79fb      	ldrb	r3, [r7, #7]
 8005d68:	009b      	lsls	r3, r3, #2
 8005d6a:	3301      	adds	r3, #1
 8005d6c:	00db      	lsls	r3, r3, #3
 8005d6e:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8005d72:	2110      	movs	r1, #16
 8005d74:	4618      	mov	r0, r3
 8005d76:	f7ff fa31 	bl	80051dc <WIZCHIP_WRITE>
               setSn_CR(sn,Sn_CR_SEND);
               while(getSn_CR(sn));
               return SOCK_BUSY;
            }
         #endif
         sock_is_sending &= ~(1<<sn);         
 8005d7a:	79fb      	ldrb	r3, [r7, #7]
 8005d7c:	2201      	movs	r2, #1
 8005d7e:	fa02 f303 	lsl.w	r3, r2, r3
 8005d82:	b21b      	sxth	r3, r3
 8005d84:	43db      	mvns	r3, r3
 8005d86:	b21a      	sxth	r2, r3
 8005d88:	4b45      	ldr	r3, [pc, #276]	@ (8005ea0 <send+0x1e8>)
 8005d8a:	881b      	ldrh	r3, [r3, #0]
 8005d8c:	b21b      	sxth	r3, r3
 8005d8e:	4013      	ands	r3, r2
 8005d90:	b21b      	sxth	r3, r3
 8005d92:	b29a      	uxth	r2, r3
 8005d94:	4b42      	ldr	r3, [pc, #264]	@ (8005ea0 <send+0x1e8>)
 8005d96:	801a      	strh	r2, [r3, #0]
 8005d98:	e00d      	b.n	8005db6 <send+0xfe>
      }
      else if(tmp & Sn_IR_TIMEOUT)
 8005d9a:	7bfb      	ldrb	r3, [r7, #15]
 8005d9c:	f003 0308 	and.w	r3, r3, #8
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d006      	beq.n	8005db2 <send+0xfa>
      {
         close(sn);
 8005da4:	79fb      	ldrb	r3, [r7, #7]
 8005da6:	4618      	mov	r0, r3
 8005da8:	f7ff fdc6 	bl	8005938 <close>
         return SOCKERR_TIMEOUT;
 8005dac:	f06f 030c 	mvn.w	r3, #12
 8005db0:	e072      	b.n	8005e98 <send+0x1e0>
      }
      else return SOCK_BUSY;
 8005db2:	2300      	movs	r3, #0
 8005db4:	e070      	b.n	8005e98 <send+0x1e0>
   }
   freesize = getSn_TxMAX(sn);
 8005db6:	79fb      	ldrb	r3, [r7, #7]
 8005db8:	009b      	lsls	r3, r3, #2
 8005dba:	3301      	adds	r3, #1
 8005dbc:	00db      	lsls	r3, r3, #3
 8005dbe:	f503 53f8 	add.w	r3, r3, #7936	@ 0x1f00
 8005dc2:	4618      	mov	r0, r3
 8005dc4:	f7ff f9be 	bl	8005144 <WIZCHIP_READ>
 8005dc8:	4603      	mov	r3, r0
 8005dca:	029b      	lsls	r3, r3, #10
 8005dcc:	81bb      	strh	r3, [r7, #12]
   if (len > freesize) len = freesize; // check size not to exceed MAX size.
 8005dce:	88ba      	ldrh	r2, [r7, #4]
 8005dd0:	89bb      	ldrh	r3, [r7, #12]
 8005dd2:	429a      	cmp	r2, r3
 8005dd4:	d901      	bls.n	8005dda <send+0x122>
 8005dd6:	89bb      	ldrh	r3, [r7, #12]
 8005dd8:	80bb      	strh	r3, [r7, #4]
   while(1)
   {
      freesize = getSn_TX_FSR(sn);
 8005dda:	79fb      	ldrb	r3, [r7, #7]
 8005ddc:	4618      	mov	r0, r3
 8005dde:	f7ff fb0b 	bl	80053f8 <getSn_TX_FSR>
 8005de2:	4603      	mov	r3, r0
 8005de4:	81bb      	strh	r3, [r7, #12]
      tmp = getSn_SR(sn);
 8005de6:	79fb      	ldrb	r3, [r7, #7]
 8005de8:	009b      	lsls	r3, r3, #2
 8005dea:	3301      	adds	r3, #1
 8005dec:	00db      	lsls	r3, r3, #3
 8005dee:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8005df2:	4618      	mov	r0, r3
 8005df4:	f7ff f9a6 	bl	8005144 <WIZCHIP_READ>
 8005df8:	4603      	mov	r3, r0
 8005dfa:	73fb      	strb	r3, [r7, #15]
      if ((tmp != SOCK_ESTABLISHED) && (tmp != SOCK_CLOSE_WAIT))
 8005dfc:	7bfb      	ldrb	r3, [r7, #15]
 8005dfe:	2b17      	cmp	r3, #23
 8005e00:	d009      	beq.n	8005e16 <send+0x15e>
 8005e02:	7bfb      	ldrb	r3, [r7, #15]
 8005e04:	2b1c      	cmp	r3, #28
 8005e06:	d006      	beq.n	8005e16 <send+0x15e>
      {
         close(sn);
 8005e08:	79fb      	ldrb	r3, [r7, #7]
 8005e0a:	4618      	mov	r0, r3
 8005e0c:	f7ff fd94 	bl	8005938 <close>
         return SOCKERR_SOCKSTATUS;
 8005e10:	f06f 0306 	mvn.w	r3, #6
 8005e14:	e040      	b.n	8005e98 <send+0x1e0>
      }
      if( (sock_io_mode & (1<<sn)) && (len > freesize) ) return SOCK_BUSY;
 8005e16:	4b23      	ldr	r3, [pc, #140]	@ (8005ea4 <send+0x1ec>)
 8005e18:	881b      	ldrh	r3, [r3, #0]
 8005e1a:	461a      	mov	r2, r3
 8005e1c:	79fb      	ldrb	r3, [r7, #7]
 8005e1e:	fa42 f303 	asr.w	r3, r2, r3
 8005e22:	f003 0301 	and.w	r3, r3, #1
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d005      	beq.n	8005e36 <send+0x17e>
 8005e2a:	88ba      	ldrh	r2, [r7, #4]
 8005e2c:	89bb      	ldrh	r3, [r7, #12]
 8005e2e:	429a      	cmp	r2, r3
 8005e30:	d901      	bls.n	8005e36 <send+0x17e>
 8005e32:	2300      	movs	r3, #0
 8005e34:	e030      	b.n	8005e98 <send+0x1e0>
      if(len <= freesize) break;
 8005e36:	88ba      	ldrh	r2, [r7, #4]
 8005e38:	89bb      	ldrh	r3, [r7, #12]
 8005e3a:	429a      	cmp	r2, r3
 8005e3c:	d900      	bls.n	8005e40 <send+0x188>
      freesize = getSn_TX_FSR(sn);
 8005e3e:	e7cc      	b.n	8005dda <send+0x122>
      if(len <= freesize) break;
 8005e40:	bf00      	nop
   }
   wiz_send_data(sn, buf, len);
 8005e42:	88ba      	ldrh	r2, [r7, #4]
 8005e44:	79fb      	ldrb	r3, [r7, #7]
 8005e46:	6839      	ldr	r1, [r7, #0]
 8005e48:	4618      	mov	r0, r3
 8005e4a:	f7ff fb67 	bl	800551c <wiz_send_data>

   #if _WIZCHIP_ == 5300
      setSn_TX_WRSR(sn,len);
   #endif
   
   setSn_CR(sn,Sn_CR_SEND);
 8005e4e:	79fb      	ldrb	r3, [r7, #7]
 8005e50:	009b      	lsls	r3, r3, #2
 8005e52:	3301      	adds	r3, #1
 8005e54:	00db      	lsls	r3, r3, #3
 8005e56:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8005e5a:	2120      	movs	r1, #32
 8005e5c:	4618      	mov	r0, r3
 8005e5e:	f7ff f9bd 	bl	80051dc <WIZCHIP_WRITE>
   /* wait to process the command... */
   while(getSn_CR(sn));
 8005e62:	bf00      	nop
 8005e64:	79fb      	ldrb	r3, [r7, #7]
 8005e66:	009b      	lsls	r3, r3, #2
 8005e68:	3301      	adds	r3, #1
 8005e6a:	00db      	lsls	r3, r3, #3
 8005e6c:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8005e70:	4618      	mov	r0, r3
 8005e72:	f7ff f967 	bl	8005144 <WIZCHIP_READ>
 8005e76:	4603      	mov	r3, r0
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d1f3      	bne.n	8005e64 <send+0x1ac>
   sock_is_sending |= (1 << sn);
 8005e7c:	79fb      	ldrb	r3, [r7, #7]
 8005e7e:	2201      	movs	r2, #1
 8005e80:	fa02 f303 	lsl.w	r3, r2, r3
 8005e84:	b21a      	sxth	r2, r3
 8005e86:	4b06      	ldr	r3, [pc, #24]	@ (8005ea0 <send+0x1e8>)
 8005e88:	881b      	ldrh	r3, [r3, #0]
 8005e8a:	b21b      	sxth	r3, r3
 8005e8c:	4313      	orrs	r3, r2
 8005e8e:	b21b      	sxth	r3, r3
 8005e90:	b29a      	uxth	r2, r3
 8005e92:	4b03      	ldr	r3, [pc, #12]	@ (8005ea0 <send+0x1e8>)
 8005e94:	801a      	strh	r2, [r3, #0]
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
 8005e96:	88bb      	ldrh	r3, [r7, #4]
}
 8005e98:	4618      	mov	r0, r3
 8005e9a:	3710      	adds	r7, #16
 8005e9c:	46bd      	mov	sp, r7
 8005e9e:	bd80      	pop	{r7, pc}
 8005ea0:	20000e16 	.word	0x20000e16
 8005ea4:	20000e14 	.word	0x20000e14

08005ea8 <recv>:


int32_t recv(uint8_t sn, uint8_t * buf, uint16_t len)
{
 8005ea8:	b590      	push	{r4, r7, lr}
 8005eaa:	b085      	sub	sp, #20
 8005eac:	af00      	add	r7, sp, #0
 8005eae:	4603      	mov	r3, r0
 8005eb0:	6039      	str	r1, [r7, #0]
 8005eb2:	71fb      	strb	r3, [r7, #7]
 8005eb4:	4613      	mov	r3, r2
 8005eb6:	80bb      	strh	r3, [r7, #4]
   uint8_t  tmp = 0;
 8005eb8:	2300      	movs	r3, #0
 8005eba:	73fb      	strb	r3, [r7, #15]
   uint16_t recvsize = 0;
 8005ebc:	2300      	movs	r3, #0
 8005ebe:	81bb      	strh	r3, [r7, #12]
#if   _WIZCHIP_ == 5300
   uint8_t head[2];
   uint16_t mr;
#endif
//
   CHECK_SOCKNUM();
 8005ec0:	79fb      	ldrb	r3, [r7, #7]
 8005ec2:	2b08      	cmp	r3, #8
 8005ec4:	d902      	bls.n	8005ecc <recv+0x24>
 8005ec6:	f04f 33ff 	mov.w	r3, #4294967295
 8005eca:	e09b      	b.n	8006004 <recv+0x15c>
   CHECK_SOCKMODE(Sn_MR_TCP);
 8005ecc:	79fb      	ldrb	r3, [r7, #7]
 8005ece:	009b      	lsls	r3, r3, #2
 8005ed0:	3301      	adds	r3, #1
 8005ed2:	00db      	lsls	r3, r3, #3
 8005ed4:	4618      	mov	r0, r3
 8005ed6:	f7ff f935 	bl	8005144 <WIZCHIP_READ>
 8005eda:	4603      	mov	r3, r0
 8005edc:	f003 030f 	and.w	r3, r3, #15
 8005ee0:	2b01      	cmp	r3, #1
 8005ee2:	d002      	beq.n	8005eea <recv+0x42>
 8005ee4:	f06f 0304 	mvn.w	r3, #4
 8005ee8:	e08c      	b.n	8006004 <recv+0x15c>
   CHECK_SOCKDATA();
 8005eea:	88bb      	ldrh	r3, [r7, #4]
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d102      	bne.n	8005ef6 <recv+0x4e>
 8005ef0:	f06f 030d 	mvn.w	r3, #13
 8005ef4:	e086      	b.n	8006004 <recv+0x15c>
   
   recvsize = getSn_RxMAX(sn);
 8005ef6:	79fb      	ldrb	r3, [r7, #7]
 8005ef8:	009b      	lsls	r3, r3, #2
 8005efa:	3301      	adds	r3, #1
 8005efc:	00db      	lsls	r3, r3, #3
 8005efe:	f503 53f0 	add.w	r3, r3, #7680	@ 0x1e00
 8005f02:	4618      	mov	r0, r3
 8005f04:	f7ff f91e 	bl	8005144 <WIZCHIP_READ>
 8005f08:	4603      	mov	r3, r0
 8005f0a:	029b      	lsls	r3, r3, #10
 8005f0c:	81bb      	strh	r3, [r7, #12]
   if(recvsize < len) len = recvsize;
 8005f0e:	89ba      	ldrh	r2, [r7, #12]
 8005f10:	88bb      	ldrh	r3, [r7, #4]
 8005f12:	429a      	cmp	r2, r3
 8005f14:	d201      	bcs.n	8005f1a <recv+0x72>
 8005f16:	89bb      	ldrh	r3, [r7, #12]
 8005f18:	80bb      	strh	r3, [r7, #4]
   {
#endif
//
      while(1)
      {
         recvsize = getSn_RX_RSR(sn);
 8005f1a:	79fb      	ldrb	r3, [r7, #7]
 8005f1c:	4618      	mov	r0, r3
 8005f1e:	f7ff fab4 	bl	800548a <getSn_RX_RSR>
 8005f22:	4603      	mov	r3, r0
 8005f24:	81bb      	strh	r3, [r7, #12]
         tmp = getSn_SR(sn);
 8005f26:	79fb      	ldrb	r3, [r7, #7]
 8005f28:	009b      	lsls	r3, r3, #2
 8005f2a:	3301      	adds	r3, #1
 8005f2c:	00db      	lsls	r3, r3, #3
 8005f2e:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8005f32:	4618      	mov	r0, r3
 8005f34:	f7ff f906 	bl	8005144 <WIZCHIP_READ>
 8005f38:	4603      	mov	r3, r0
 8005f3a:	73fb      	strb	r3, [r7, #15]
         if (tmp != SOCK_ESTABLISHED)
 8005f3c:	7bfb      	ldrb	r3, [r7, #15]
 8005f3e:	2b17      	cmp	r3, #23
 8005f40:	d026      	beq.n	8005f90 <recv+0xe8>
         {
            if(tmp == SOCK_CLOSE_WAIT)
 8005f42:	7bfb      	ldrb	r3, [r7, #15]
 8005f44:	2b1c      	cmp	r3, #28
 8005f46:	d11c      	bne.n	8005f82 <recv+0xda>
            {
               if(recvsize != 0) break;
 8005f48:	89bb      	ldrh	r3, [r7, #12]
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d133      	bne.n	8005fb6 <recv+0x10e>
               else if(getSn_TX_FSR(sn) == getSn_TxMAX(sn))
 8005f4e:	79fb      	ldrb	r3, [r7, #7]
 8005f50:	4618      	mov	r0, r3
 8005f52:	f7ff fa51 	bl	80053f8 <getSn_TX_FSR>
 8005f56:	4603      	mov	r3, r0
 8005f58:	461c      	mov	r4, r3
 8005f5a:	79fb      	ldrb	r3, [r7, #7]
 8005f5c:	009b      	lsls	r3, r3, #2
 8005f5e:	3301      	adds	r3, #1
 8005f60:	00db      	lsls	r3, r3, #3
 8005f62:	f503 53f8 	add.w	r3, r3, #7936	@ 0x1f00
 8005f66:	4618      	mov	r0, r3
 8005f68:	f7ff f8ec 	bl	8005144 <WIZCHIP_READ>
 8005f6c:	4603      	mov	r3, r0
 8005f6e:	029b      	lsls	r3, r3, #10
 8005f70:	429c      	cmp	r4, r3
 8005f72:	d10d      	bne.n	8005f90 <recv+0xe8>
               {
                  close(sn);
 8005f74:	79fb      	ldrb	r3, [r7, #7]
 8005f76:	4618      	mov	r0, r3
 8005f78:	f7ff fcde 	bl	8005938 <close>
                  return SOCKERR_SOCKSTATUS;
 8005f7c:	f06f 0306 	mvn.w	r3, #6
 8005f80:	e040      	b.n	8006004 <recv+0x15c>
               }
            }
            else
            {
               close(sn);
 8005f82:	79fb      	ldrb	r3, [r7, #7]
 8005f84:	4618      	mov	r0, r3
 8005f86:	f7ff fcd7 	bl	8005938 <close>
               return SOCKERR_SOCKSTATUS;
 8005f8a:	f06f 0306 	mvn.w	r3, #6
 8005f8e:	e039      	b.n	8006004 <recv+0x15c>
            }
         }
         if((sock_io_mode & (1<<sn)) && (recvsize == 0)) return SOCK_BUSY;
 8005f90:	4b1e      	ldr	r3, [pc, #120]	@ (800600c <recv+0x164>)
 8005f92:	881b      	ldrh	r3, [r3, #0]
 8005f94:	461a      	mov	r2, r3
 8005f96:	79fb      	ldrb	r3, [r7, #7]
 8005f98:	fa42 f303 	asr.w	r3, r2, r3
 8005f9c:	f003 0301 	and.w	r3, r3, #1
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d004      	beq.n	8005fae <recv+0x106>
 8005fa4:	89bb      	ldrh	r3, [r7, #12]
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d101      	bne.n	8005fae <recv+0x106>
 8005faa:	2300      	movs	r3, #0
 8005fac:	e02a      	b.n	8006004 <recv+0x15c>
         if(recvsize != 0) break;
 8005fae:	89bb      	ldrh	r3, [r7, #12]
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d102      	bne.n	8005fba <recv+0x112>
         recvsize = getSn_RX_RSR(sn);
 8005fb4:	e7b1      	b.n	8005f1a <recv+0x72>
               if(recvsize != 0) break;
 8005fb6:	bf00      	nop
 8005fb8:	e000      	b.n	8005fbc <recv+0x114>
         if(recvsize != 0) break;
 8005fba:	bf00      	nop
   }
   else sock_pack_info[sn] = PACK_COMPLETED;
   if(getSn_MR(sn) & Sn_MR_ALIGN) sock_remained_size[sn] = 0;
   //len = recvsize;
#else   
   if(recvsize < len) len = recvsize;   
 8005fbc:	89ba      	ldrh	r2, [r7, #12]
 8005fbe:	88bb      	ldrh	r3, [r7, #4]
 8005fc0:	429a      	cmp	r2, r3
 8005fc2:	d201      	bcs.n	8005fc8 <recv+0x120>
 8005fc4:	89bb      	ldrh	r3, [r7, #12]
 8005fc6:	80bb      	strh	r3, [r7, #4]
   wiz_recv_data(sn, buf, len);
 8005fc8:	88ba      	ldrh	r2, [r7, #4]
 8005fca:	79fb      	ldrb	r3, [r7, #7]
 8005fcc:	6839      	ldr	r1, [r7, #0]
 8005fce:	4618      	mov	r0, r3
 8005fd0:	f7ff fafe 	bl	80055d0 <wiz_recv_data>
   setSn_CR(sn,Sn_CR_RECV);
 8005fd4:	79fb      	ldrb	r3, [r7, #7]
 8005fd6:	009b      	lsls	r3, r3, #2
 8005fd8:	3301      	adds	r3, #1
 8005fda:	00db      	lsls	r3, r3, #3
 8005fdc:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8005fe0:	2140      	movs	r1, #64	@ 0x40
 8005fe2:	4618      	mov	r0, r3
 8005fe4:	f7ff f8fa 	bl	80051dc <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 8005fe8:	bf00      	nop
 8005fea:	79fb      	ldrb	r3, [r7, #7]
 8005fec:	009b      	lsls	r3, r3, #2
 8005fee:	3301      	adds	r3, #1
 8005ff0:	00db      	lsls	r3, r3, #3
 8005ff2:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8005ff6:	4618      	mov	r0, r3
 8005ff8:	f7ff f8a4 	bl	8005144 <WIZCHIP_READ>
 8005ffc:	4603      	mov	r3, r0
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d1f3      	bne.n	8005fea <recv+0x142>
#endif
     
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
 8006002:	88bb      	ldrh	r3, [r7, #4]
}
 8006004:	4618      	mov	r0, r3
 8006006:	3714      	adds	r7, #20
 8006008:	46bd      	mov	sp, r7
 800600a:	bd90      	pop	{r4, r7, pc}
 800600c:	20000e14 	.word	0x20000e14

08006010 <sendto>:

int32_t sendto(uint8_t sn, uint8_t * buf, uint16_t len, uint8_t * addr, uint16_t port)
{
 8006010:	b580      	push	{r7, lr}
 8006012:	b086      	sub	sp, #24
 8006014:	af00      	add	r7, sp, #0
 8006016:	60b9      	str	r1, [r7, #8]
 8006018:	607b      	str	r3, [r7, #4]
 800601a:	4603      	mov	r3, r0
 800601c:	73fb      	strb	r3, [r7, #15]
 800601e:	4613      	mov	r3, r2
 8006020:	81bb      	strh	r3, [r7, #12]
   uint8_t tmp = 0;
 8006022:	2300      	movs	r3, #0
 8006024:	75fb      	strb	r3, [r7, #23]
   uint16_t freesize = 0;
 8006026:	2300      	movs	r3, #0
 8006028:	82bb      	strh	r3, [r7, #20]
   uint32_t taddr;

   CHECK_SOCKNUM();
 800602a:	7bfb      	ldrb	r3, [r7, #15]
 800602c:	2b08      	cmp	r3, #8
 800602e:	d902      	bls.n	8006036 <sendto+0x26>
 8006030:	f04f 33ff 	mov.w	r3, #4294967295
 8006034:	e11a      	b.n	800626c <sendto+0x25c>
   switch(getSn_MR(sn) & 0x0F)
 8006036:	7bfb      	ldrb	r3, [r7, #15]
 8006038:	009b      	lsls	r3, r3, #2
 800603a:	3301      	adds	r3, #1
 800603c:	00db      	lsls	r3, r3, #3
 800603e:	4618      	mov	r0, r3
 8006040:	f7ff f880 	bl	8005144 <WIZCHIP_READ>
 8006044:	4603      	mov	r3, r0
 8006046:	f003 030f 	and.w	r3, r3, #15
 800604a:	3b02      	subs	r3, #2
 800604c:	2b02      	cmp	r3, #2
 800604e:	d902      	bls.n	8006056 <sendto+0x46>
//   #if ( _WIZCHIP_ < 5200 )
      case Sn_MR_IPRAW:
         break;
//   #endif
      default:
         return SOCKERR_SOCKMODE;
 8006050:	f06f 0304 	mvn.w	r3, #4
 8006054:	e10a      	b.n	800626c <sendto+0x25c>
         break;
 8006056:	bf00      	nop
   }
   CHECK_SOCKDATA();
 8006058:	89bb      	ldrh	r3, [r7, #12]
 800605a:	2b00      	cmp	r3, #0
 800605c:	d102      	bne.n	8006064 <sendto+0x54>
 800605e:	f06f 030d 	mvn.w	r3, #13
 8006062:	e103      	b.n	800626c <sendto+0x25c>
   //M20140501 : For avoiding fatal error on memory align mismatched
   //if(*((uint32_t*)addr) == 0) return SOCKERR_IPINVALID;
   //{
      //uint32_t taddr;
      taddr = ((uint32_t)addr[0]) & 0x000000FF;
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	781b      	ldrb	r3, [r3, #0]
 8006068:	613b      	str	r3, [r7, #16]
      taddr = (taddr << 8) + ((uint32_t)addr[1] & 0x000000FF);
 800606a:	693b      	ldr	r3, [r7, #16]
 800606c:	021b      	lsls	r3, r3, #8
 800606e:	687a      	ldr	r2, [r7, #4]
 8006070:	3201      	adds	r2, #1
 8006072:	7812      	ldrb	r2, [r2, #0]
 8006074:	4413      	add	r3, r2
 8006076:	613b      	str	r3, [r7, #16]
      taddr = (taddr << 8) + ((uint32_t)addr[2] & 0x000000FF);
 8006078:	693b      	ldr	r3, [r7, #16]
 800607a:	021b      	lsls	r3, r3, #8
 800607c:	687a      	ldr	r2, [r7, #4]
 800607e:	3202      	adds	r2, #2
 8006080:	7812      	ldrb	r2, [r2, #0]
 8006082:	4413      	add	r3, r2
 8006084:	613b      	str	r3, [r7, #16]
      taddr = (taddr << 8) + ((uint32_t)addr[3] & 0x000000FF);
 8006086:	693b      	ldr	r3, [r7, #16]
 8006088:	021b      	lsls	r3, r3, #8
 800608a:	687a      	ldr	r2, [r7, #4]
 800608c:	3203      	adds	r2, #3
 800608e:	7812      	ldrb	r2, [r2, #0]
 8006090:	4413      	add	r3, r2
 8006092:	613b      	str	r3, [r7, #16]
   //}
   //
   //if(*((uint32_t*)addr) == 0) return SOCKERR_IPINVALID;
   if((taddr == 0) && ((getSn_MR(sn)&Sn_MR_MACRAW) != Sn_MR_MACRAW)) return SOCKERR_IPINVALID;
 8006094:	693b      	ldr	r3, [r7, #16]
 8006096:	2b00      	cmp	r3, #0
 8006098:	d10e      	bne.n	80060b8 <sendto+0xa8>
 800609a:	7bfb      	ldrb	r3, [r7, #15]
 800609c:	009b      	lsls	r3, r3, #2
 800609e:	3301      	adds	r3, #1
 80060a0:	00db      	lsls	r3, r3, #3
 80060a2:	4618      	mov	r0, r3
 80060a4:	f7ff f84e 	bl	8005144 <WIZCHIP_READ>
 80060a8:	4603      	mov	r3, r0
 80060aa:	f003 0304 	and.w	r3, r3, #4
 80060ae:	2b04      	cmp	r3, #4
 80060b0:	d002      	beq.n	80060b8 <sendto+0xa8>
 80060b2:	f06f 030b 	mvn.w	r3, #11
 80060b6:	e0d9      	b.n	800626c <sendto+0x25c>
   if((port  == 0) && ((getSn_MR(sn)&Sn_MR_MACRAW) != Sn_MR_MACRAW)) return SOCKERR_PORTZERO;
 80060b8:	8c3b      	ldrh	r3, [r7, #32]
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d10e      	bne.n	80060dc <sendto+0xcc>
 80060be:	7bfb      	ldrb	r3, [r7, #15]
 80060c0:	009b      	lsls	r3, r3, #2
 80060c2:	3301      	adds	r3, #1
 80060c4:	00db      	lsls	r3, r3, #3
 80060c6:	4618      	mov	r0, r3
 80060c8:	f7ff f83c 	bl	8005144 <WIZCHIP_READ>
 80060cc:	4603      	mov	r3, r0
 80060ce:	f003 0304 	and.w	r3, r3, #4
 80060d2:	2b04      	cmp	r3, #4
 80060d4:	d002      	beq.n	80060dc <sendto+0xcc>
 80060d6:	f06f 030a 	mvn.w	r3, #10
 80060da:	e0c7      	b.n	800626c <sendto+0x25c>
   tmp = getSn_SR(sn);
 80060dc:	7bfb      	ldrb	r3, [r7, #15]
 80060de:	009b      	lsls	r3, r3, #2
 80060e0:	3301      	adds	r3, #1
 80060e2:	00db      	lsls	r3, r3, #3
 80060e4:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 80060e8:	4618      	mov	r0, r3
 80060ea:	f7ff f82b 	bl	8005144 <WIZCHIP_READ>
 80060ee:	4603      	mov	r3, r0
 80060f0:	75fb      	strb	r3, [r7, #23]
//#if ( _WIZCHIP_ < 5200 )
   if((tmp != SOCK_MACRAW) && (tmp != SOCK_UDP) && (tmp != SOCK_IPRAW)) return SOCKERR_SOCKSTATUS;
 80060f2:	7dfb      	ldrb	r3, [r7, #23]
 80060f4:	2b42      	cmp	r3, #66	@ 0x42
 80060f6:	d008      	beq.n	800610a <sendto+0xfa>
 80060f8:	7dfb      	ldrb	r3, [r7, #23]
 80060fa:	2b22      	cmp	r3, #34	@ 0x22
 80060fc:	d005      	beq.n	800610a <sendto+0xfa>
 80060fe:	7dfb      	ldrb	r3, [r7, #23]
 8006100:	2b32      	cmp	r3, #50	@ 0x32
 8006102:	d002      	beq.n	800610a <sendto+0xfa>
 8006104:	f06f 0306 	mvn.w	r3, #6
 8006108:	e0b0      	b.n	800626c <sendto+0x25c>
//#else
//   if(tmp != SOCK_MACRAW && tmp != SOCK_UDP) return SOCKERR_SOCKSTATUS;
//#endif
      
   setSn_DIPR(sn,addr);
 800610a:	7bfb      	ldrb	r3, [r7, #15]
 800610c:	009b      	lsls	r3, r3, #2
 800610e:	3301      	adds	r3, #1
 8006110:	00db      	lsls	r3, r3, #3
 8006112:	f503 6340 	add.w	r3, r3, #3072	@ 0xc00
 8006116:	2204      	movs	r2, #4
 8006118:	6879      	ldr	r1, [r7, #4]
 800611a:	4618      	mov	r0, r3
 800611c:	f7ff f90c 	bl	8005338 <WIZCHIP_WRITE_BUF>
   setSn_DPORT(sn,port);      
 8006120:	7bfb      	ldrb	r3, [r7, #15]
 8006122:	009b      	lsls	r3, r3, #2
 8006124:	3301      	adds	r3, #1
 8006126:	00db      	lsls	r3, r3, #3
 8006128:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800612c:	461a      	mov	r2, r3
 800612e:	8c3b      	ldrh	r3, [r7, #32]
 8006130:	0a1b      	lsrs	r3, r3, #8
 8006132:	b29b      	uxth	r3, r3
 8006134:	b2db      	uxtb	r3, r3
 8006136:	4619      	mov	r1, r3
 8006138:	4610      	mov	r0, r2
 800613a:	f7ff f84f 	bl	80051dc <WIZCHIP_WRITE>
 800613e:	7bfb      	ldrb	r3, [r7, #15]
 8006140:	009b      	lsls	r3, r3, #2
 8006142:	3301      	adds	r3, #1
 8006144:	00db      	lsls	r3, r3, #3
 8006146:	f503 5388 	add.w	r3, r3, #4352	@ 0x1100
 800614a:	461a      	mov	r2, r3
 800614c:	8c3b      	ldrh	r3, [r7, #32]
 800614e:	b2db      	uxtb	r3, r3
 8006150:	4619      	mov	r1, r3
 8006152:	4610      	mov	r0, r2
 8006154:	f7ff f842 	bl	80051dc <WIZCHIP_WRITE>
   freesize = getSn_TxMAX(sn);
 8006158:	7bfb      	ldrb	r3, [r7, #15]
 800615a:	009b      	lsls	r3, r3, #2
 800615c:	3301      	adds	r3, #1
 800615e:	00db      	lsls	r3, r3, #3
 8006160:	f503 53f8 	add.w	r3, r3, #7936	@ 0x1f00
 8006164:	4618      	mov	r0, r3
 8006166:	f7fe ffed 	bl	8005144 <WIZCHIP_READ>
 800616a:	4603      	mov	r3, r0
 800616c:	029b      	lsls	r3, r3, #10
 800616e:	82bb      	strh	r3, [r7, #20]
   if (len > freesize) len = freesize; // check size not to exceed MAX size.
 8006170:	89ba      	ldrh	r2, [r7, #12]
 8006172:	8abb      	ldrh	r3, [r7, #20]
 8006174:	429a      	cmp	r2, r3
 8006176:	d901      	bls.n	800617c <sendto+0x16c>
 8006178:	8abb      	ldrh	r3, [r7, #20]
 800617a:	81bb      	strh	r3, [r7, #12]
   while(1)
   {
      freesize = getSn_TX_FSR(sn);
 800617c:	7bfb      	ldrb	r3, [r7, #15]
 800617e:	4618      	mov	r0, r3
 8006180:	f7ff f93a 	bl	80053f8 <getSn_TX_FSR>
 8006184:	4603      	mov	r3, r0
 8006186:	82bb      	strh	r3, [r7, #20]
      if(getSn_SR(sn) == SOCK_CLOSED) return SOCKERR_SOCKCLOSED;
 8006188:	7bfb      	ldrb	r3, [r7, #15]
 800618a:	009b      	lsls	r3, r3, #2
 800618c:	3301      	adds	r3, #1
 800618e:	00db      	lsls	r3, r3, #3
 8006190:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8006194:	4618      	mov	r0, r3
 8006196:	f7fe ffd5 	bl	8005144 <WIZCHIP_READ>
 800619a:	4603      	mov	r3, r0
 800619c:	2b00      	cmp	r3, #0
 800619e:	d102      	bne.n	80061a6 <sendto+0x196>
 80061a0:	f06f 0303 	mvn.w	r3, #3
 80061a4:	e062      	b.n	800626c <sendto+0x25c>
      if( (sock_io_mode & (1<<sn)) && (len > freesize) ) return SOCK_BUSY;
 80061a6:	4b33      	ldr	r3, [pc, #204]	@ (8006274 <sendto+0x264>)
 80061a8:	881b      	ldrh	r3, [r3, #0]
 80061aa:	461a      	mov	r2, r3
 80061ac:	7bfb      	ldrb	r3, [r7, #15]
 80061ae:	fa42 f303 	asr.w	r3, r2, r3
 80061b2:	f003 0301 	and.w	r3, r3, #1
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d005      	beq.n	80061c6 <sendto+0x1b6>
 80061ba:	89ba      	ldrh	r2, [r7, #12]
 80061bc:	8abb      	ldrh	r3, [r7, #20]
 80061be:	429a      	cmp	r2, r3
 80061c0:	d901      	bls.n	80061c6 <sendto+0x1b6>
 80061c2:	2300      	movs	r3, #0
 80061c4:	e052      	b.n	800626c <sendto+0x25c>
      if(len <= freesize) break;
 80061c6:	89ba      	ldrh	r2, [r7, #12]
 80061c8:	8abb      	ldrh	r3, [r7, #20]
 80061ca:	429a      	cmp	r2, r3
 80061cc:	d900      	bls.n	80061d0 <sendto+0x1c0>
      freesize = getSn_TX_FSR(sn);
 80061ce:	e7d5      	b.n	800617c <sendto+0x16c>
      if(len <= freesize) break;
 80061d0:	bf00      	nop
   };
	wiz_send_data(sn, buf, len);
 80061d2:	89ba      	ldrh	r2, [r7, #12]
 80061d4:	7bfb      	ldrb	r3, [r7, #15]
 80061d6:	68b9      	ldr	r1, [r7, #8]
 80061d8:	4618      	mov	r0, r3
 80061da:	f7ff f99f 	bl	800551c <wiz_send_data>
//A20150601 : For W5300
#if _WIZCHIP_ == 5300
   setSn_TX_WRSR(sn, len);
#endif
//   
	setSn_CR(sn,Sn_CR_SEND);
 80061de:	7bfb      	ldrb	r3, [r7, #15]
 80061e0:	009b      	lsls	r3, r3, #2
 80061e2:	3301      	adds	r3, #1
 80061e4:	00db      	lsls	r3, r3, #3
 80061e6:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80061ea:	2120      	movs	r1, #32
 80061ec:	4618      	mov	r0, r3
 80061ee:	f7fe fff5 	bl	80051dc <WIZCHIP_WRITE>
	/* wait to process the command... */
	while(getSn_CR(sn));
 80061f2:	bf00      	nop
 80061f4:	7bfb      	ldrb	r3, [r7, #15]
 80061f6:	009b      	lsls	r3, r3, #2
 80061f8:	3301      	adds	r3, #1
 80061fa:	00db      	lsls	r3, r3, #3
 80061fc:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8006200:	4618      	mov	r0, r3
 8006202:	f7fe ff9f 	bl	8005144 <WIZCHIP_READ>
 8006206:	4603      	mov	r3, r0
 8006208:	2b00      	cmp	r3, #0
 800620a:	d1f3      	bne.n	80061f4 <sendto+0x1e4>
   while(1)
   {
      tmp = getSn_IR(sn);
 800620c:	7bfb      	ldrb	r3, [r7, #15]
 800620e:	009b      	lsls	r3, r3, #2
 8006210:	3301      	adds	r3, #1
 8006212:	00db      	lsls	r3, r3, #3
 8006214:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8006218:	4618      	mov	r0, r3
 800621a:	f7fe ff93 	bl	8005144 <WIZCHIP_READ>
 800621e:	4603      	mov	r3, r0
 8006220:	f003 031f 	and.w	r3, r3, #31
 8006224:	75fb      	strb	r3, [r7, #23]
      if(tmp & Sn_IR_SENDOK)
 8006226:	7dfb      	ldrb	r3, [r7, #23]
 8006228:	f003 0310 	and.w	r3, r3, #16
 800622c:	2b00      	cmp	r3, #0
 800622e:	d00c      	beq.n	800624a <sendto+0x23a>
      {
         setSn_IR(sn, Sn_IR_SENDOK);
 8006230:	7bfb      	ldrb	r3, [r7, #15]
 8006232:	009b      	lsls	r3, r3, #2
 8006234:	3301      	adds	r3, #1
 8006236:	00db      	lsls	r3, r3, #3
 8006238:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 800623c:	2110      	movs	r1, #16
 800623e:	4618      	mov	r0, r3
 8006240:	f7fe ffcc 	bl	80051dc <WIZCHIP_WRITE>
         break;
 8006244:	bf00      	nop
   #if _WIZCHIP_ < 5500   //M20150401 : for WIZCHIP Errata #4, #5 (ARP errata)
      if(taddr) setSUBR((uint8_t*)&taddr);
   #endif
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
 8006246:	89bb      	ldrh	r3, [r7, #12]
 8006248:	e010      	b.n	800626c <sendto+0x25c>
      else if(tmp & Sn_IR_TIMEOUT)
 800624a:	7dfb      	ldrb	r3, [r7, #23]
 800624c:	f003 0308 	and.w	r3, r3, #8
 8006250:	2b00      	cmp	r3, #0
 8006252:	d0db      	beq.n	800620c <sendto+0x1fc>
         setSn_IR(sn, Sn_IR_TIMEOUT);
 8006254:	7bfb      	ldrb	r3, [r7, #15]
 8006256:	009b      	lsls	r3, r3, #2
 8006258:	3301      	adds	r3, #1
 800625a:	00db      	lsls	r3, r3, #3
 800625c:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8006260:	2108      	movs	r1, #8
 8006262:	4618      	mov	r0, r3
 8006264:	f7fe ffba 	bl	80051dc <WIZCHIP_WRITE>
         return SOCKERR_TIMEOUT;
 8006268:	f06f 030c 	mvn.w	r3, #12
}
 800626c:	4618      	mov	r0, r3
 800626e:	3718      	adds	r7, #24
 8006270:	46bd      	mov	sp, r7
 8006272:	bd80      	pop	{r7, pc}
 8006274:	20000e14 	.word	0x20000e14

08006278 <recvfrom>:



int32_t recvfrom(uint8_t sn, uint8_t * buf, uint16_t len, uint8_t * addr, uint16_t *port)
{
 8006278:	b580      	push	{r7, lr}
 800627a:	b088      	sub	sp, #32
 800627c:	af00      	add	r7, sp, #0
 800627e:	60b9      	str	r1, [r7, #8]
 8006280:	607b      	str	r3, [r7, #4]
 8006282:	4603      	mov	r3, r0
 8006284:	73fb      	strb	r3, [r7, #15]
 8006286:	4613      	mov	r3, r2
 8006288:	81bb      	strh	r3, [r7, #12]
#else   
   uint8_t  mr;
#endif
//   
   uint8_t  head[8];
	uint16_t pack_len=0;
 800628a:	2300      	movs	r3, #0
 800628c:	83fb      	strh	r3, [r7, #30]

   CHECK_SOCKNUM();
 800628e:	7bfb      	ldrb	r3, [r7, #15]
 8006290:	2b08      	cmp	r3, #8
 8006292:	d902      	bls.n	800629a <recvfrom+0x22>
 8006294:	f04f 33ff 	mov.w	r3, #4294967295
 8006298:	e1d2      	b.n	8006640 <recvfrom+0x3c8>
//A20150601
#if _WIZCHIP_ == 5300
   mr1 = getMR();
#endif   

   switch((mr=getSn_MR(sn)) & 0x0F)
 800629a:	7bfb      	ldrb	r3, [r7, #15]
 800629c:	009b      	lsls	r3, r3, #2
 800629e:	3301      	adds	r3, #1
 80062a0:	00db      	lsls	r3, r3, #3
 80062a2:	4618      	mov	r0, r3
 80062a4:	f7fe ff4e 	bl	8005144 <WIZCHIP_READ>
 80062a8:	4603      	mov	r3, r0
 80062aa:	777b      	strb	r3, [r7, #29]
 80062ac:	7f7b      	ldrb	r3, [r7, #29]
 80062ae:	f003 030f 	and.w	r3, r3, #15
 80062b2:	3b02      	subs	r3, #2
 80062b4:	2b02      	cmp	r3, #2
 80062b6:	d902      	bls.n	80062be <recvfrom+0x46>
   #if ( _WIZCHIP_ < 5200 )         
      case Sn_MR_PPPoE:
         break;
   #endif
      default:
         return SOCKERR_SOCKMODE;
 80062b8:	f06f 0304 	mvn.w	r3, #4
 80062bc:	e1c0      	b.n	8006640 <recvfrom+0x3c8>
         break;
 80062be:	bf00      	nop
   }
   CHECK_SOCKDATA();
 80062c0:	89bb      	ldrh	r3, [r7, #12]
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d102      	bne.n	80062cc <recvfrom+0x54>
 80062c6:	f06f 030d 	mvn.w	r3, #13
 80062ca:	e1b9      	b.n	8006640 <recvfrom+0x3c8>
   if(sock_remained_size[sn] == 0)
 80062cc:	7bfb      	ldrb	r3, [r7, #15]
 80062ce:	4a87      	ldr	r2, [pc, #540]	@ (80064ec <recvfrom+0x274>)
 80062d0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d128      	bne.n	800632a <recvfrom+0xb2>
   {
      while(1)
      {
         pack_len = getSn_RX_RSR(sn);
 80062d8:	7bfb      	ldrb	r3, [r7, #15]
 80062da:	4618      	mov	r0, r3
 80062dc:	f7ff f8d5 	bl	800548a <getSn_RX_RSR>
 80062e0:	4603      	mov	r3, r0
 80062e2:	83fb      	strh	r3, [r7, #30]
         if(getSn_SR(sn) == SOCK_CLOSED) return SOCKERR_SOCKCLOSED;
 80062e4:	7bfb      	ldrb	r3, [r7, #15]
 80062e6:	009b      	lsls	r3, r3, #2
 80062e8:	3301      	adds	r3, #1
 80062ea:	00db      	lsls	r3, r3, #3
 80062ec:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 80062f0:	4618      	mov	r0, r3
 80062f2:	f7fe ff27 	bl	8005144 <WIZCHIP_READ>
 80062f6:	4603      	mov	r3, r0
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d102      	bne.n	8006302 <recvfrom+0x8a>
 80062fc:	f06f 0303 	mvn.w	r3, #3
 8006300:	e19e      	b.n	8006640 <recvfrom+0x3c8>
         if( (sock_io_mode & (1<<sn)) && (pack_len == 0) ) return SOCK_BUSY;
 8006302:	4b7b      	ldr	r3, [pc, #492]	@ (80064f0 <recvfrom+0x278>)
 8006304:	881b      	ldrh	r3, [r3, #0]
 8006306:	461a      	mov	r2, r3
 8006308:	7bfb      	ldrb	r3, [r7, #15]
 800630a:	fa42 f303 	asr.w	r3, r2, r3
 800630e:	f003 0301 	and.w	r3, r3, #1
 8006312:	2b00      	cmp	r3, #0
 8006314:	d004      	beq.n	8006320 <recvfrom+0xa8>
 8006316:	8bfb      	ldrh	r3, [r7, #30]
 8006318:	2b00      	cmp	r3, #0
 800631a:	d101      	bne.n	8006320 <recvfrom+0xa8>
 800631c:	2300      	movs	r3, #0
 800631e:	e18f      	b.n	8006640 <recvfrom+0x3c8>
         if(pack_len != 0) break;
 8006320:	8bfb      	ldrh	r3, [r7, #30]
 8006322:	2b00      	cmp	r3, #0
 8006324:	d100      	bne.n	8006328 <recvfrom+0xb0>
         pack_len = getSn_RX_RSR(sn);
 8006326:	e7d7      	b.n	80062d8 <recvfrom+0x60>
         if(pack_len != 0) break;
 8006328:	bf00      	nop
      };
   }
//D20150601 : Move it to bottom
// sock_pack_info[sn] = PACK_COMPLETED;
	switch (mr & 0x07)
 800632a:	7f7b      	ldrb	r3, [r7, #29]
 800632c:	f003 0307 	and.w	r3, r3, #7
 8006330:	2b04      	cmp	r3, #4
 8006332:	d078      	beq.n	8006426 <recvfrom+0x1ae>
 8006334:	2b04      	cmp	r3, #4
 8006336:	f300 8140 	bgt.w	80065ba <recvfrom+0x342>
 800633a:	2b02      	cmp	r3, #2
 800633c:	d003      	beq.n	8006346 <recvfrom+0xce>
 800633e:	2b03      	cmp	r3, #3
 8006340:	f000 80da 	beq.w	80064f8 <recvfrom+0x280>
 8006344:	e139      	b.n	80065ba <recvfrom+0x342>
	{
	   case Sn_MR_UDP :
	      if(sock_remained_size[sn] == 0)
 8006346:	7bfb      	ldrb	r3, [r7, #15]
 8006348:	4a68      	ldr	r2, [pc, #416]	@ (80064ec <recvfrom+0x274>)
 800634a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800634e:	2b00      	cmp	r3, #0
 8006350:	d151      	bne.n	80063f6 <recvfrom+0x17e>
	      {
   			wiz_recv_data(sn, head, 8);
 8006352:	f107 0114 	add.w	r1, r7, #20
 8006356:	7bfb      	ldrb	r3, [r7, #15]
 8006358:	2208      	movs	r2, #8
 800635a:	4618      	mov	r0, r3
 800635c:	f7ff f938 	bl	80055d0 <wiz_recv_data>
   			setSn_CR(sn,Sn_CR_RECV);
 8006360:	7bfb      	ldrb	r3, [r7, #15]
 8006362:	009b      	lsls	r3, r3, #2
 8006364:	3301      	adds	r3, #1
 8006366:	00db      	lsls	r3, r3, #3
 8006368:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 800636c:	2140      	movs	r1, #64	@ 0x40
 800636e:	4618      	mov	r0, r3
 8006370:	f7fe ff34 	bl	80051dc <WIZCHIP_WRITE>
   			while(getSn_CR(sn));
 8006374:	bf00      	nop
 8006376:	7bfb      	ldrb	r3, [r7, #15]
 8006378:	009b      	lsls	r3, r3, #2
 800637a:	3301      	adds	r3, #1
 800637c:	00db      	lsls	r3, r3, #3
 800637e:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8006382:	4618      	mov	r0, r3
 8006384:	f7fe fede 	bl	8005144 <WIZCHIP_READ>
 8006388:	4603      	mov	r3, r0
 800638a:	2b00      	cmp	r3, #0
 800638c:	d1f3      	bne.n	8006376 <recvfrom+0xfe>
      			sock_remained_size[sn] = (sock_remained_size[sn] << 8) + head[6];
   		   }
            else
            {
         #endif
               addr[0] = head[0];
 800638e:	7d3a      	ldrb	r2, [r7, #20]
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	701a      	strb	r2, [r3, #0]
      			addr[1] = head[1];
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	3301      	adds	r3, #1
 8006398:	7d7a      	ldrb	r2, [r7, #21]
 800639a:	701a      	strb	r2, [r3, #0]
      			addr[2] = head[2];
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	3302      	adds	r3, #2
 80063a0:	7dba      	ldrb	r2, [r7, #22]
 80063a2:	701a      	strb	r2, [r3, #0]
      			addr[3] = head[3];
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	3303      	adds	r3, #3
 80063a8:	7dfa      	ldrb	r2, [r7, #23]
 80063aa:	701a      	strb	r2, [r3, #0]
      			*port = head[4];
 80063ac:	7e3b      	ldrb	r3, [r7, #24]
 80063ae:	461a      	mov	r2, r3
 80063b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063b2:	801a      	strh	r2, [r3, #0]
      			*port = (*port << 8) + head[5];
 80063b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063b6:	881b      	ldrh	r3, [r3, #0]
 80063b8:	021b      	lsls	r3, r3, #8
 80063ba:	b29b      	uxth	r3, r3
 80063bc:	7e7a      	ldrb	r2, [r7, #25]
 80063be:	4413      	add	r3, r2
 80063c0:	b29a      	uxth	r2, r3
 80063c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063c4:	801a      	strh	r2, [r3, #0]
      			sock_remained_size[sn] = head[6];
 80063c6:	7eba      	ldrb	r2, [r7, #26]
 80063c8:	7bfb      	ldrb	r3, [r7, #15]
 80063ca:	4611      	mov	r1, r2
 80063cc:	4a47      	ldr	r2, [pc, #284]	@ (80064ec <recvfrom+0x274>)
 80063ce:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
      			sock_remained_size[sn] = (sock_remained_size[sn] << 8) + head[7];
 80063d2:	7bfb      	ldrb	r3, [r7, #15]
 80063d4:	4a45      	ldr	r2, [pc, #276]	@ (80064ec <recvfrom+0x274>)
 80063d6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80063da:	021b      	lsls	r3, r3, #8
 80063dc:	b29a      	uxth	r2, r3
 80063de:	7efb      	ldrb	r3, [r7, #27]
 80063e0:	4619      	mov	r1, r3
 80063e2:	7bfb      	ldrb	r3, [r7, #15]
 80063e4:	440a      	add	r2, r1
 80063e6:	b291      	uxth	r1, r2
 80063e8:	4a40      	ldr	r2, [pc, #256]	@ (80064ec <recvfrom+0x274>)
 80063ea:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
         #if _WIZCHIP_ == 5300
            }
         #endif
   			sock_pack_info[sn] = PACK_FIRST;
 80063ee:	7bfb      	ldrb	r3, [r7, #15]
 80063f0:	4a40      	ldr	r2, [pc, #256]	@ (80064f4 <recvfrom+0x27c>)
 80063f2:	2180      	movs	r1, #128	@ 0x80
 80063f4:	54d1      	strb	r1, [r2, r3]
   	   }
			if(len < sock_remained_size[sn]) pack_len = len;
 80063f6:	7bfb      	ldrb	r3, [r7, #15]
 80063f8:	4a3c      	ldr	r2, [pc, #240]	@ (80064ec <recvfrom+0x274>)
 80063fa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80063fe:	89ba      	ldrh	r2, [r7, #12]
 8006400:	429a      	cmp	r2, r3
 8006402:	d202      	bcs.n	800640a <recvfrom+0x192>
 8006404:	89bb      	ldrh	r3, [r7, #12]
 8006406:	83fb      	strh	r3, [r7, #30]
 8006408:	e004      	b.n	8006414 <recvfrom+0x19c>
			else pack_len = sock_remained_size[sn];
 800640a:	7bfb      	ldrb	r3, [r7, #15]
 800640c:	4a37      	ldr	r2, [pc, #220]	@ (80064ec <recvfrom+0x274>)
 800640e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006412:	83fb      	strh	r3, [r7, #30]
			//A20150601 : For W5300
			len = pack_len;
 8006414:	8bfb      	ldrh	r3, [r7, #30]
 8006416:	81bb      	strh	r3, [r7, #12]
			   }
			#endif
			//
			// Need to packet length check (default 1472)
			//
   		wiz_recv_data(sn, buf, pack_len); // data copy.
 8006418:	8bfa      	ldrh	r2, [r7, #30]
 800641a:	7bfb      	ldrb	r3, [r7, #15]
 800641c:	68b9      	ldr	r1, [r7, #8]
 800641e:	4618      	mov	r0, r3
 8006420:	f7ff f8d6 	bl	80055d0 <wiz_recv_data>
			break;
 8006424:	e0d5      	b.n	80065d2 <recvfrom+0x35a>
	   case Sn_MR_MACRAW :
	      if(sock_remained_size[sn] == 0)
 8006426:	7bfb      	ldrb	r3, [r7, #15]
 8006428:	4a30      	ldr	r2, [pc, #192]	@ (80064ec <recvfrom+0x274>)
 800642a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800642e:	2b00      	cmp	r3, #0
 8006430:	d145      	bne.n	80064be <recvfrom+0x246>
	      {
   			wiz_recv_data(sn, head, 2);
 8006432:	f107 0114 	add.w	r1, r7, #20
 8006436:	7bfb      	ldrb	r3, [r7, #15]
 8006438:	2202      	movs	r2, #2
 800643a:	4618      	mov	r0, r3
 800643c:	f7ff f8c8 	bl	80055d0 <wiz_recv_data>
   			setSn_CR(sn,Sn_CR_RECV);
 8006440:	7bfb      	ldrb	r3, [r7, #15]
 8006442:	009b      	lsls	r3, r3, #2
 8006444:	3301      	adds	r3, #1
 8006446:	00db      	lsls	r3, r3, #3
 8006448:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 800644c:	2140      	movs	r1, #64	@ 0x40
 800644e:	4618      	mov	r0, r3
 8006450:	f7fe fec4 	bl	80051dc <WIZCHIP_WRITE>
   			while(getSn_CR(sn));
 8006454:	bf00      	nop
 8006456:	7bfb      	ldrb	r3, [r7, #15]
 8006458:	009b      	lsls	r3, r3, #2
 800645a:	3301      	adds	r3, #1
 800645c:	00db      	lsls	r3, r3, #3
 800645e:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8006462:	4618      	mov	r0, r3
 8006464:	f7fe fe6e 	bl	8005144 <WIZCHIP_READ>
 8006468:	4603      	mov	r3, r0
 800646a:	2b00      	cmp	r3, #0
 800646c:	d1f3      	bne.n	8006456 <recvfrom+0x1de>
   			// read peer's IP address, port number & packet length
    			sock_remained_size[sn] = head[0];
 800646e:	7d3a      	ldrb	r2, [r7, #20]
 8006470:	7bfb      	ldrb	r3, [r7, #15]
 8006472:	4611      	mov	r1, r2
 8006474:	4a1d      	ldr	r2, [pc, #116]	@ (80064ec <recvfrom+0x274>)
 8006476:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   			sock_remained_size[sn] = (sock_remained_size[sn] <<8) + head[1] -2;
 800647a:	7bfb      	ldrb	r3, [r7, #15]
 800647c:	4a1b      	ldr	r2, [pc, #108]	@ (80064ec <recvfrom+0x274>)
 800647e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006482:	021b      	lsls	r3, r3, #8
 8006484:	b29b      	uxth	r3, r3
 8006486:	7d7a      	ldrb	r2, [r7, #21]
 8006488:	4413      	add	r3, r2
 800648a:	b29a      	uxth	r2, r3
 800648c:	7bfb      	ldrb	r3, [r7, #15]
 800648e:	3a02      	subs	r2, #2
 8006490:	b291      	uxth	r1, r2
 8006492:	4a16      	ldr	r2, [pc, #88]	@ (80064ec <recvfrom+0x274>)
 8006494:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   			if(sock_remained_size[sn] & 0x01)
   				sock_remained_size[sn] = sock_remained_size[sn] + 1 - 4;
   			else
   				sock_remained_size[sn] -= 4;
			#endif
   			if(sock_remained_size[sn] > 1514) 
 8006498:	7bfb      	ldrb	r3, [r7, #15]
 800649a:	4a14      	ldr	r2, [pc, #80]	@ (80064ec <recvfrom+0x274>)
 800649c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80064a0:	f240 52ea 	movw	r2, #1514	@ 0x5ea
 80064a4:	4293      	cmp	r3, r2
 80064a6:	d906      	bls.n	80064b6 <recvfrom+0x23e>
   			{
   			   close(sn);
 80064a8:	7bfb      	ldrb	r3, [r7, #15]
 80064aa:	4618      	mov	r0, r3
 80064ac:	f7ff fa44 	bl	8005938 <close>
   			   return SOCKFATAL_PACKLEN;
 80064b0:	f46f 737a 	mvn.w	r3, #1000	@ 0x3e8
 80064b4:	e0c4      	b.n	8006640 <recvfrom+0x3c8>
   			}
   			sock_pack_info[sn] = PACK_FIRST;
 80064b6:	7bfb      	ldrb	r3, [r7, #15]
 80064b8:	4a0e      	ldr	r2, [pc, #56]	@ (80064f4 <recvfrom+0x27c>)
 80064ba:	2180      	movs	r1, #128	@ 0x80
 80064bc:	54d1      	strb	r1, [r2, r3]
   	   }
			if(len < sock_remained_size[sn]) pack_len = len;
 80064be:	7bfb      	ldrb	r3, [r7, #15]
 80064c0:	4a0a      	ldr	r2, [pc, #40]	@ (80064ec <recvfrom+0x274>)
 80064c2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80064c6:	89ba      	ldrh	r2, [r7, #12]
 80064c8:	429a      	cmp	r2, r3
 80064ca:	d202      	bcs.n	80064d2 <recvfrom+0x25a>
 80064cc:	89bb      	ldrh	r3, [r7, #12]
 80064ce:	83fb      	strh	r3, [r7, #30]
 80064d0:	e004      	b.n	80064dc <recvfrom+0x264>
			else pack_len = sock_remained_size[sn];
 80064d2:	7bfb      	ldrb	r3, [r7, #15]
 80064d4:	4a05      	ldr	r2, [pc, #20]	@ (80064ec <recvfrom+0x274>)
 80064d6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80064da:	83fb      	strh	r3, [r7, #30]
			wiz_recv_data(sn,buf,pack_len);
 80064dc:	8bfa      	ldrh	r2, [r7, #30]
 80064de:	7bfb      	ldrb	r3, [r7, #15]
 80064e0:	68b9      	ldr	r1, [r7, #8]
 80064e2:	4618      	mov	r0, r3
 80064e4:	f7ff f874 	bl	80055d0 <wiz_recv_data>
		   break;
 80064e8:	e073      	b.n	80065d2 <recvfrom+0x35a>
 80064ea:	bf00      	nop
 80064ec:	20000e18 	.word	0x20000e18
 80064f0:	20000e14 	.word	0x20000e14
 80064f4:	20000e28 	.word	0x20000e28
   //#if ( _WIZCHIP_ < 5200 )
		case Sn_MR_IPRAW:
		   if(sock_remained_size[sn] == 0)
 80064f8:	7bfb      	ldrb	r3, [r7, #15]
 80064fa:	4a53      	ldr	r2, [pc, #332]	@ (8006648 <recvfrom+0x3d0>)
 80064fc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006500:	2b00      	cmp	r3, #0
 8006502:	d144      	bne.n	800658e <recvfrom+0x316>
		   {
   			wiz_recv_data(sn, head, 6);
 8006504:	f107 0114 	add.w	r1, r7, #20
 8006508:	7bfb      	ldrb	r3, [r7, #15]
 800650a:	2206      	movs	r2, #6
 800650c:	4618      	mov	r0, r3
 800650e:	f7ff f85f 	bl	80055d0 <wiz_recv_data>
   			setSn_CR(sn,Sn_CR_RECV);
 8006512:	7bfb      	ldrb	r3, [r7, #15]
 8006514:	009b      	lsls	r3, r3, #2
 8006516:	3301      	adds	r3, #1
 8006518:	00db      	lsls	r3, r3, #3
 800651a:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 800651e:	2140      	movs	r1, #64	@ 0x40
 8006520:	4618      	mov	r0, r3
 8006522:	f7fe fe5b 	bl	80051dc <WIZCHIP_WRITE>
   			while(getSn_CR(sn));
 8006526:	bf00      	nop
 8006528:	7bfb      	ldrb	r3, [r7, #15]
 800652a:	009b      	lsls	r3, r3, #2
 800652c:	3301      	adds	r3, #1
 800652e:	00db      	lsls	r3, r3, #3
 8006530:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8006534:	4618      	mov	r0, r3
 8006536:	f7fe fe05 	bl	8005144 <WIZCHIP_READ>
 800653a:	4603      	mov	r3, r0
 800653c:	2b00      	cmp	r3, #0
 800653e:	d1f3      	bne.n	8006528 <recvfrom+0x2b0>
   			addr[0] = head[0];
 8006540:	7d3a      	ldrb	r2, [r7, #20]
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	701a      	strb	r2, [r3, #0]
   			addr[1] = head[1];
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	3301      	adds	r3, #1
 800654a:	7d7a      	ldrb	r2, [r7, #21]
 800654c:	701a      	strb	r2, [r3, #0]
   			addr[2] = head[2];
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	3302      	adds	r3, #2
 8006552:	7dba      	ldrb	r2, [r7, #22]
 8006554:	701a      	strb	r2, [r3, #0]
   			addr[3] = head[3];
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	3303      	adds	r3, #3
 800655a:	7dfa      	ldrb	r2, [r7, #23]
 800655c:	701a      	strb	r2, [r3, #0]
   			sock_remained_size[sn] = head[4];
 800655e:	7e3a      	ldrb	r2, [r7, #24]
 8006560:	7bfb      	ldrb	r3, [r7, #15]
 8006562:	4611      	mov	r1, r2
 8006564:	4a38      	ldr	r2, [pc, #224]	@ (8006648 <recvfrom+0x3d0>)
 8006566:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   			//M20150401 : For Typing Error
   			//sock_remaiend_size[sn] = (sock_remained_size[sn] << 8) + head[5];
   			sock_remained_size[sn] = (sock_remained_size[sn] << 8) + head[5];
 800656a:	7bfb      	ldrb	r3, [r7, #15]
 800656c:	4a36      	ldr	r2, [pc, #216]	@ (8006648 <recvfrom+0x3d0>)
 800656e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006572:	021b      	lsls	r3, r3, #8
 8006574:	b29a      	uxth	r2, r3
 8006576:	7e7b      	ldrb	r3, [r7, #25]
 8006578:	4619      	mov	r1, r3
 800657a:	7bfb      	ldrb	r3, [r7, #15]
 800657c:	440a      	add	r2, r1
 800657e:	b291      	uxth	r1, r2
 8006580:	4a31      	ldr	r2, [pc, #196]	@ (8006648 <recvfrom+0x3d0>)
 8006582:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   			sock_pack_info[sn] = PACK_FIRST;
 8006586:	7bfb      	ldrb	r3, [r7, #15]
 8006588:	4a30      	ldr	r2, [pc, #192]	@ (800664c <recvfrom+0x3d4>)
 800658a:	2180      	movs	r1, #128	@ 0x80
 800658c:	54d1      	strb	r1, [r2, r3]
         }
			//
			// Need to packet length check
			//
			if(len < sock_remained_size[sn]) pack_len = len;
 800658e:	7bfb      	ldrb	r3, [r7, #15]
 8006590:	4a2d      	ldr	r2, [pc, #180]	@ (8006648 <recvfrom+0x3d0>)
 8006592:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006596:	89ba      	ldrh	r2, [r7, #12]
 8006598:	429a      	cmp	r2, r3
 800659a:	d202      	bcs.n	80065a2 <recvfrom+0x32a>
 800659c:	89bb      	ldrh	r3, [r7, #12]
 800659e:	83fb      	strh	r3, [r7, #30]
 80065a0:	e004      	b.n	80065ac <recvfrom+0x334>
			else pack_len = sock_remained_size[sn];
 80065a2:	7bfb      	ldrb	r3, [r7, #15]
 80065a4:	4a28      	ldr	r2, [pc, #160]	@ (8006648 <recvfrom+0x3d0>)
 80065a6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80065aa:	83fb      	strh	r3, [r7, #30]
   		wiz_recv_data(sn, buf, pack_len); // data copy.
 80065ac:	8bfa      	ldrh	r2, [r7, #30]
 80065ae:	7bfb      	ldrb	r3, [r7, #15]
 80065b0:	68b9      	ldr	r1, [r7, #8]
 80065b2:	4618      	mov	r0, r3
 80065b4:	f7ff f80c 	bl	80055d0 <wiz_recv_data>
			break;
 80065b8:	e00b      	b.n	80065d2 <recvfrom+0x35a>
   //#endif
      default:
         wiz_recv_ignore(sn, pack_len); // data copy.
 80065ba:	8bfa      	ldrh	r2, [r7, #30]
 80065bc:	7bfb      	ldrb	r3, [r7, #15]
 80065be:	4611      	mov	r1, r2
 80065c0:	4618      	mov	r0, r3
 80065c2:	f7ff f85f 	bl	8005684 <wiz_recv_ignore>
         sock_remained_size[sn] = pack_len;
 80065c6:	7bfb      	ldrb	r3, [r7, #15]
 80065c8:	491f      	ldr	r1, [pc, #124]	@ (8006648 <recvfrom+0x3d0>)
 80065ca:	8bfa      	ldrh	r2, [r7, #30]
 80065cc:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
         break;
 80065d0:	bf00      	nop
   }
	setSn_CR(sn,Sn_CR_RECV);
 80065d2:	7bfb      	ldrb	r3, [r7, #15]
 80065d4:	009b      	lsls	r3, r3, #2
 80065d6:	3301      	adds	r3, #1
 80065d8:	00db      	lsls	r3, r3, #3
 80065da:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80065de:	2140      	movs	r1, #64	@ 0x40
 80065e0:	4618      	mov	r0, r3
 80065e2:	f7fe fdfb 	bl	80051dc <WIZCHIP_WRITE>
	/* wait to process the command... */
	while(getSn_CR(sn)) ;
 80065e6:	bf00      	nop
 80065e8:	7bfb      	ldrb	r3, [r7, #15]
 80065ea:	009b      	lsls	r3, r3, #2
 80065ec:	3301      	adds	r3, #1
 80065ee:	00db      	lsls	r3, r3, #3
 80065f0:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80065f4:	4618      	mov	r0, r3
 80065f6:	f7fe fda5 	bl	8005144 <WIZCHIP_READ>
 80065fa:	4603      	mov	r3, r0
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d1f3      	bne.n	80065e8 <recvfrom+0x370>
	sock_remained_size[sn] -= pack_len;
 8006600:	7bfb      	ldrb	r3, [r7, #15]
 8006602:	4a11      	ldr	r2, [pc, #68]	@ (8006648 <recvfrom+0x3d0>)
 8006604:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8006608:	7bfb      	ldrb	r3, [r7, #15]
 800660a:	8bfa      	ldrh	r2, [r7, #30]
 800660c:	1a8a      	subs	r2, r1, r2
 800660e:	b291      	uxth	r1, r2
 8006610:	4a0d      	ldr	r2, [pc, #52]	@ (8006648 <recvfrom+0x3d0>)
 8006612:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	//M20150601 : 
	//if(sock_remained_size[sn] != 0) sock_pack_info[sn] |= 0x01;
	if(sock_remained_size[sn] != 0)
 8006616:	7bfb      	ldrb	r3, [r7, #15]
 8006618:	4a0b      	ldr	r2, [pc, #44]	@ (8006648 <recvfrom+0x3d0>)
 800661a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800661e:	2b00      	cmp	r3, #0
 8006620:	d009      	beq.n	8006636 <recvfrom+0x3be>
	{
	   sock_pack_info[sn] |= PACK_REMAINED;
 8006622:	7bfb      	ldrb	r3, [r7, #15]
 8006624:	4a09      	ldr	r2, [pc, #36]	@ (800664c <recvfrom+0x3d4>)
 8006626:	5cd2      	ldrb	r2, [r2, r3]
 8006628:	7bfb      	ldrb	r3, [r7, #15]
 800662a:	f042 0201 	orr.w	r2, r2, #1
 800662e:	b2d1      	uxtb	r1, r2
 8006630:	4a06      	ldr	r2, [pc, #24]	@ (800664c <recvfrom+0x3d4>)
 8006632:	54d1      	strb	r1, [r2, r3]
 8006634:	e003      	b.n	800663e <recvfrom+0x3c6>
   #if _WIZCHIP_ == 5300	   
	   if(pack_len & 0x01) sock_pack_info[sn] |= PACK_FIFOBYTE;
   #endif	      
	}
	else sock_pack_info[sn] = PACK_COMPLETED;
 8006636:	7bfb      	ldrb	r3, [r7, #15]
 8006638:	4a04      	ldr	r2, [pc, #16]	@ (800664c <recvfrom+0x3d4>)
 800663a:	2100      	movs	r1, #0
 800663c:	54d1      	strb	r1, [r2, r3]
   pack_len = len;
#endif
   //
   //M20150409 : Explicit Type Casting
   //return pack_len;
   return (int32_t)pack_len;
 800663e:	8bfb      	ldrh	r3, [r7, #30]
}
 8006640:	4618      	mov	r0, r3
 8006642:	3720      	adds	r7, #32
 8006644:	46bd      	mov	sp, r7
 8006646:	bd80      	pop	{r7, pc}
 8006648:	20000e18 	.word	0x20000e18
 800664c:	20000e28 	.word	0x20000e28

08006650 <SPIReadWrite>:
#include "main.h"

extern SPI_HandleTypeDef hspi1;

uint8_t SPIReadWrite(uint8_t data)
{
 8006650:	b480      	push	{r7}
 8006652:	b083      	sub	sp, #12
 8006654:	af00      	add	r7, sp, #0
 8006656:	4603      	mov	r3, r0
 8006658:	71fb      	strb	r3, [r7, #7]
	//wait till FIFO has a free slot
	while((hspi1.Instance->SR & SPI_FLAG_TXE) != SPI_FLAG_TXE);
 800665a:	bf00      	nop
 800665c:	4b0f      	ldr	r3, [pc, #60]	@ (800669c <SPIReadWrite+0x4c>)
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	689b      	ldr	r3, [r3, #8]
 8006662:	f003 0302 	and.w	r3, r3, #2
 8006666:	2b02      	cmp	r3, #2
 8006668:	d1f8      	bne.n	800665c <SPIReadWrite+0xc>

	*(__IO uint8_t*)&hspi1.Instance->DR = data;
 800666a:	4b0c      	ldr	r3, [pc, #48]	@ (800669c <SPIReadWrite+0x4c>)
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	330c      	adds	r3, #12
 8006670:	79fa      	ldrb	r2, [r7, #7]
 8006672:	701a      	strb	r2, [r3, #0]
	//Now wait till data arrives
	while((hspi1.Instance->SR & SPI_FLAG_RXNE)!=SPI_FLAG_RXNE);
 8006674:	bf00      	nop
 8006676:	4b09      	ldr	r3, [pc, #36]	@ (800669c <SPIReadWrite+0x4c>)
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	689b      	ldr	r3, [r3, #8]
 800667c:	f003 0301 	and.w	r3, r3, #1
 8006680:	2b01      	cmp	r3, #1
 8006682:	d1f8      	bne.n	8006676 <SPIReadWrite+0x26>

	return (*(__IO uint8_t*)&hspi1.Instance->DR);
 8006684:	4b05      	ldr	r3, [pc, #20]	@ (800669c <SPIReadWrite+0x4c>)
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	330c      	adds	r3, #12
 800668a:	781b      	ldrb	r3, [r3, #0]
 800668c:	b2db      	uxtb	r3, r3

}
 800668e:	4618      	mov	r0, r3
 8006690:	370c      	adds	r7, #12
 8006692:	46bd      	mov	sp, r7
 8006694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006698:	4770      	bx	lr
 800669a:	bf00      	nop
 800669c:	20000154 	.word	0x20000154

080066a0 <wizchip_select>:

void wizchip_select(void)
{
 80066a0:	b580      	push	{r7, lr}
 80066a2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 80066a4:	2200      	movs	r2, #0
 80066a6:	2102      	movs	r1, #2
 80066a8:	4802      	ldr	r0, [pc, #8]	@ (80066b4 <wizchip_select+0x14>)
 80066aa:	f001 f9d7 	bl	8007a5c <HAL_GPIO_WritePin>
}
 80066ae:	bf00      	nop
 80066b0:	bd80      	pop	{r7, pc}
 80066b2:	bf00      	nop
 80066b4:	40020000 	.word	0x40020000

080066b8 <wizchip_deselect>:

void wizchip_deselect(void)
{
 80066b8:	b580      	push	{r7, lr}
 80066ba:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 80066bc:	2201      	movs	r2, #1
 80066be:	2102      	movs	r1, #2
 80066c0:	4802      	ldr	r0, [pc, #8]	@ (80066cc <wizchip_deselect+0x14>)
 80066c2:	f001 f9cb 	bl	8007a5c <HAL_GPIO_WritePin>
}
 80066c6:	bf00      	nop
 80066c8:	bd80      	pop	{r7, pc}
 80066ca:	bf00      	nop
 80066cc:	40020000 	.word	0x40020000

080066d0 <wizchip_reset_high>:

void wizchip_reset_high(void)
{
 80066d0:	b580      	push	{r7, lr}
 80066d2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SPI1_RST_GPIO_Port, SPI1_RST_Pin, GPIO_PIN_SET);
 80066d4:	2201      	movs	r2, #1
 80066d6:	2101      	movs	r1, #1
 80066d8:	4802      	ldr	r0, [pc, #8]	@ (80066e4 <wizchip_reset_high+0x14>)
 80066da:	f001 f9bf 	bl	8007a5c <HAL_GPIO_WritePin>
}
 80066de:	bf00      	nop
 80066e0:	bd80      	pop	{r7, pc}
 80066e2:	bf00      	nop
 80066e4:	40020000 	.word	0x40020000

080066e8 <wizchip_reset_low>:

void wizchip_reset_low(void)
{
 80066e8:	b580      	push	{r7, lr}
 80066ea:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SPI1_RST_GPIO_Port, SPI1_RST_Pin, GPIO_PIN_RESET);
 80066ec:	2200      	movs	r2, #0
 80066ee:	2101      	movs	r1, #1
 80066f0:	4802      	ldr	r0, [pc, #8]	@ (80066fc <wizchip_reset_low+0x14>)
 80066f2:	f001 f9b3 	bl	8007a5c <HAL_GPIO_WritePin>
}
 80066f6:	bf00      	nop
 80066f8:	bd80      	pop	{r7, pc}
 80066fa:	bf00      	nop
 80066fc:	40020000 	.word	0x40020000

08006700 <wizchip_read>:

uint8_t wizchip_read()
{
 8006700:	b580      	push	{r7, lr}
 8006702:	b082      	sub	sp, #8
 8006704:	af00      	add	r7, sp, #0
	uint8_t rb;
	rb=SPIReadWrite(0x00);
 8006706:	2000      	movs	r0, #0
 8006708:	f7ff ffa2 	bl	8006650 <SPIReadWrite>
 800670c:	4603      	mov	r3, r0
 800670e:	71fb      	strb	r3, [r7, #7]
	return rb;
 8006710:	79fb      	ldrb	r3, [r7, #7]
}
 8006712:	4618      	mov	r0, r3
 8006714:	3708      	adds	r7, #8
 8006716:	46bd      	mov	sp, r7
 8006718:	bd80      	pop	{r7, pc}

0800671a <wizchip_write>:

void  wizchip_write(uint8_t wb)
{
 800671a:	b580      	push	{r7, lr}
 800671c:	b082      	sub	sp, #8
 800671e:	af00      	add	r7, sp, #0
 8006720:	4603      	mov	r3, r0
 8006722:	71fb      	strb	r3, [r7, #7]
	SPIReadWrite(wb);
 8006724:	79fb      	ldrb	r3, [r7, #7]
 8006726:	4618      	mov	r0, r3
 8006728:	f7ff ff92 	bl	8006650 <SPIReadWrite>
}
 800672c:	bf00      	nop
 800672e:	3708      	adds	r7, #8
 8006730:	46bd      	mov	sp, r7
 8006732:	bd80      	pop	{r7, pc}

08006734 <wizchip_readburst>:

void wizchip_readburst(uint8_t* pBuf, uint16_t len)
{
 8006734:	b580      	push	{r7, lr}
 8006736:	b084      	sub	sp, #16
 8006738:	af00      	add	r7, sp, #0
 800673a:	6078      	str	r0, [r7, #4]
 800673c:	460b      	mov	r3, r1
 800673e:	807b      	strh	r3, [r7, #2]
	for(uint16_t i=0;i<len;i++)
 8006740:	2300      	movs	r3, #0
 8006742:	81fb      	strh	r3, [r7, #14]
 8006744:	e00c      	b.n	8006760 <wizchip_readburst+0x2c>
	{
		*pBuf=SPIReadWrite(0x00);
 8006746:	2000      	movs	r0, #0
 8006748:	f7ff ff82 	bl	8006650 <SPIReadWrite>
 800674c:	4603      	mov	r3, r0
 800674e:	461a      	mov	r2, r3
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	701a      	strb	r2, [r3, #0]
		pBuf++;
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	3301      	adds	r3, #1
 8006758:	607b      	str	r3, [r7, #4]
	for(uint16_t i=0;i<len;i++)
 800675a:	89fb      	ldrh	r3, [r7, #14]
 800675c:	3301      	adds	r3, #1
 800675e:	81fb      	strh	r3, [r7, #14]
 8006760:	89fa      	ldrh	r2, [r7, #14]
 8006762:	887b      	ldrh	r3, [r7, #2]
 8006764:	429a      	cmp	r2, r3
 8006766:	d3ee      	bcc.n	8006746 <wizchip_readburst+0x12>
	}
}
 8006768:	bf00      	nop
 800676a:	bf00      	nop
 800676c:	3710      	adds	r7, #16
 800676e:	46bd      	mov	sp, r7
 8006770:	bd80      	pop	{r7, pc}

08006772 <wizchip_writeburst>:

void  wizchip_writeburst(uint8_t* pBuf, uint16_t len)
{
 8006772:	b580      	push	{r7, lr}
 8006774:	b084      	sub	sp, #16
 8006776:	af00      	add	r7, sp, #0
 8006778:	6078      	str	r0, [r7, #4]
 800677a:	460b      	mov	r3, r1
 800677c:	807b      	strh	r3, [r7, #2]
	for(uint16_t i=0;i<len;i++)
 800677e:	2300      	movs	r3, #0
 8006780:	81fb      	strh	r3, [r7, #14]
 8006782:	e00a      	b.n	800679a <wizchip_writeburst+0x28>
	{
		SPIReadWrite(*pBuf);
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	781b      	ldrb	r3, [r3, #0]
 8006788:	4618      	mov	r0, r3
 800678a:	f7ff ff61 	bl	8006650 <SPIReadWrite>
		pBuf++;
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	3301      	adds	r3, #1
 8006792:	607b      	str	r3, [r7, #4]
	for(uint16_t i=0;i<len;i++)
 8006794:	89fb      	ldrh	r3, [r7, #14]
 8006796:	3301      	adds	r3, #1
 8006798:	81fb      	strh	r3, [r7, #14]
 800679a:	89fa      	ldrh	r2, [r7, #14]
 800679c:	887b      	ldrh	r3, [r7, #2]
 800679e:	429a      	cmp	r2, r3
 80067a0:	d3f0      	bcc.n	8006784 <wizchip_writeburst+0x12>
	}
}
 80067a2:	bf00      	nop
 80067a4:	bf00      	nop
 80067a6:	3710      	adds	r7, #16
 80067a8:	46bd      	mov	sp, r7
 80067aa:	bd80      	pop	{r7, pc}

080067ac <W5500IOInit>:

void W5500IOInit()
{
 80067ac:	b480      	push	{r7}
 80067ae:	af00      	add	r7, sp, #0
	//printf("Wiznet_io_Initiallized @ main.c\r\n");
}
 80067b0:	bf00      	nop
 80067b2:	46bd      	mov	sp, r7
 80067b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b8:	4770      	bx	lr

080067ba <w5500_enter_critical>:

void w5500_enter_critical(void)
{
 80067ba:	b480      	push	{r7}
 80067bc:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80067be:	b672      	cpsid	i
}
 80067c0:	bf00      	nop
	__disable_irq();
}
 80067c2:	bf00      	nop
 80067c4:	46bd      	mov	sp, r7
 80067c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ca:	4770      	bx	lr

080067cc <w5500_exit_critical>:

void w5500_exit_critical(void)
{
 80067cc:	b480      	push	{r7}
 80067ce:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsie i" : : : "memory");
 80067d0:	b662      	cpsie	i
}
 80067d2:	bf00      	nop
	__enable_irq();
}
 80067d4:	bf00      	nop
 80067d6:	46bd      	mov	sp, r7
 80067d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067dc:	4770      	bx	lr
	...

080067e0 <W5500Init>:

void W5500Init()
{
 80067e0:	b590      	push	{r4, r7, lr}
 80067e2:	b087      	sub	sp, #28
 80067e4:	af00      	add	r7, sp, #0
	uint8_t tmp;
	uint8_t memsize[2][8] = { { 2, 2, 2, 2, 2, 2, 2, 2 }, { 2, 2, 2, 2, 2, 2, 2, 2 } };
 80067e6:	4b2b      	ldr	r3, [pc, #172]	@ (8006894 <W5500Init+0xb4>)
 80067e8:	1d3c      	adds	r4, r7, #4
 80067ea:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80067ec:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	W5500IOInit();
 80067f0:	f7ff ffdc 	bl	80067ac <W5500IOInit>

	wizchip_deselect();//CS high by default
 80067f4:	f7ff ff60 	bl	80066b8 <wizchip_deselect>

	//Send a pulse on reset pin
	wizchip_reset_low();
 80067f8:	f7ff ff76 	bl	80066e8 <wizchip_reset_low>

	tmp = 0xFF;
 80067fc:	23ff      	movs	r3, #255	@ 0xff
 80067fe:	75fb      	strb	r3, [r7, #23]
	while(tmp--);
 8006800:	bf00      	nop
 8006802:	7dfb      	ldrb	r3, [r7, #23]
 8006804:	1e5a      	subs	r2, r3, #1
 8006806:	75fa      	strb	r2, [r7, #23]
 8006808:	2b00      	cmp	r3, #0
 800680a:	d1fa      	bne.n	8006802 <W5500Init+0x22>
	wizchip_reset_high();
 800680c:	f7ff ff60 	bl	80066d0 <wizchip_reset_high>

	reg_wizchip_cs_cbfunc(wizchip_select, wizchip_deselect);
 8006810:	4921      	ldr	r1, [pc, #132]	@ (8006898 <W5500Init+0xb8>)
 8006812:	4822      	ldr	r0, [pc, #136]	@ (800689c <W5500Init+0xbc>)
 8006814:	f000 f8e8 	bl	80069e8 <reg_wizchip_cs_cbfunc>
	reg_wizchip_spi_cbfunc(wizchip_read, wizchip_write);
 8006818:	4921      	ldr	r1, [pc, #132]	@ (80068a0 <W5500Init+0xc0>)
 800681a:	4822      	ldr	r0, [pc, #136]	@ (80068a4 <W5500Init+0xc4>)
 800681c:	f000 f90a 	bl	8006a34 <reg_wizchip_spi_cbfunc>
	reg_wizchip_spiburst_cbfunc(wizchip_readburst, wizchip_writeburst);
 8006820:	4921      	ldr	r1, [pc, #132]	@ (80068a8 <W5500Init+0xc8>)
 8006822:	4822      	ldr	r0, [pc, #136]	@ (80068ac <W5500Init+0xcc>)
 8006824:	f000 f932 	bl	8006a8c <reg_wizchip_spiburst_cbfunc>
	reg_wizchip_cris_cbfunc(w5500_enter_critical, w5500_exit_critical);
 8006828:	4921      	ldr	r1, [pc, #132]	@ (80068b0 <W5500Init+0xd0>)
 800682a:	4822      	ldr	r0, [pc, #136]	@ (80068b4 <W5500Init+0xd4>)
 800682c:	f000 f8b6 	bl	800699c <reg_wizchip_cris_cbfunc>

	/* WIZChip Initialize*/
	if (ctlwizchip(CW_INIT_WIZCHIP, (void*) memsize) == -1) {
 8006830:	1d3b      	adds	r3, r7, #4
 8006832:	4619      	mov	r1, r3
 8006834:	2001      	movs	r0, #1
 8006836:	f000 f955 	bl	8006ae4 <ctlwizchip>
 800683a:	4603      	mov	r3, r0
 800683c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006840:	d104      	bne.n	800684c <W5500Init+0x6c>
		printf("WIZCHIP Initialized Failed.\r\n");
 8006842:	481d      	ldr	r0, [pc, #116]	@ (80068b8 <W5500Init+0xd8>)
 8006844:	f005 fd3a 	bl	800c2bc <puts>
		while (1);
 8006848:	bf00      	nop
 800684a:	e7fd      	b.n	8006848 <W5500Init+0x68>
	}
	printf("WIZCHIP Initialization Success.\r\n");
 800684c:	481b      	ldr	r0, [pc, #108]	@ (80068bc <W5500Init+0xdc>)
 800684e:	f005 fd35 	bl	800c2bc <puts>

	//Check if SPI is working
	printf("Auto-detecting Ethernet Chip on SPI Port...");
 8006852:	481b      	ldr	r0, [pc, #108]	@ (80068c0 <W5500Init+0xe0>)
 8006854:	f005 fcca 	bl	800c1ec <iprintf>
      uint8_t Data = WIZCHIP_READ(VERSIONR);
 8006858:	f44f 5064 	mov.w	r0, #14592	@ 0x3900
 800685c:	f7fe fc72 	bl	8005144 <WIZCHIP_READ>
 8006860:	4603      	mov	r3, r0
 8006862:	75bb      	strb	r3, [r7, #22]
      printf("rtData:%d\n",Data);
 8006864:	7dbb      	ldrb	r3, [r7, #22]
 8006866:	4619      	mov	r1, r3
 8006868:	4816      	ldr	r0, [pc, #88]	@ (80068c4 <W5500Init+0xe4>)
 800686a:	f005 fcbf 	bl	800c1ec <iprintf>
	if( Data == 0x04)
 800686e:	7dbb      	ldrb	r3, [r7, #22]
 8006870:	2b04      	cmp	r3, #4
 8006872:	d103      	bne.n	800687c <W5500Init+0x9c>
	{
		printf("W5500 Found on SPI\r\n");
 8006874:	4814      	ldr	r0, [pc, #80]	@ (80068c8 <W5500Init+0xe8>)
 8006876:	f005 fd21 	bl	800c2bc <puts>
	{
		printf("W5500 NOT Found on SPI\r\n");
		printf("Double Check SPI Cables\r\n");
		while(1);
	}
}
 800687a:	e007      	b.n	800688c <W5500Init+0xac>
		printf("W5500 NOT Found on SPI\r\n");
 800687c:	4813      	ldr	r0, [pc, #76]	@ (80068cc <W5500Init+0xec>)
 800687e:	f005 fd1d 	bl	800c2bc <puts>
		printf("Double Check SPI Cables\r\n");
 8006882:	4813      	ldr	r0, [pc, #76]	@ (80068d0 <W5500Init+0xf0>)
 8006884:	f005 fd1a 	bl	800c2bc <puts>
		while(1);
 8006888:	bf00      	nop
 800688a:	e7fd      	b.n	8006888 <W5500Init+0xa8>
}
 800688c:	371c      	adds	r7, #28
 800688e:	46bd      	mov	sp, r7
 8006890:	bd90      	pop	{r4, r7, pc}
 8006892:	bf00      	nop
 8006894:	0800d9b4 	.word	0x0800d9b4
 8006898:	080066b9 	.word	0x080066b9
 800689c:	080066a1 	.word	0x080066a1
 80068a0:	0800671b 	.word	0x0800671b
 80068a4:	08006701 	.word	0x08006701
 80068a8:	08006773 	.word	0x08006773
 80068ac:	08006735 	.word	0x08006735
 80068b0:	080067cd 	.word	0x080067cd
 80068b4:	080067bb 	.word	0x080067bb
 80068b8:	0800d8f0 	.word	0x0800d8f0
 80068bc:	0800d910 	.word	0x0800d910
 80068c0:	0800d934 	.word	0x0800d934
 80068c4:	0800d960 	.word	0x0800d960
 80068c8:	0800d96c 	.word	0x0800d96c
 80068cc:	0800d980 	.word	0x0800d980
 80068d0:	0800d998 	.word	0x0800d998

080068d4 <wizchip_cris_enter>:
 * @brief Default function to enable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_enter(void)           {};
void 	  wizchip_cris_enter(void)           {}
 80068d4:	b480      	push	{r7}
 80068d6:	af00      	add	r7, sp, #0
 80068d8:	bf00      	nop
 80068da:	46bd      	mov	sp, r7
 80068dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e0:	4770      	bx	lr

080068e2 <wizchip_cris_exit>:
 * @brief Default function to disable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_exit(void)          {};
void 	  wizchip_cris_exit(void)          {}
 80068e2:	b480      	push	{r7}
 80068e4:	af00      	add	r7, sp, #0
 80068e6:	bf00      	nop
 80068e8:	46bd      	mov	sp, r7
 80068ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ee:	4770      	bx	lr

080068f0 <wizchip_cs_select>:
 * @brief Default function to select chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_cs_select(void)            {};
void 	wizchip_cs_select(void)            {}
 80068f0:	b480      	push	{r7}
 80068f2:	af00      	add	r7, sp, #0
 80068f4:	bf00      	nop
 80068f6:	46bd      	mov	sp, r7
 80068f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068fc:	4770      	bx	lr

080068fe <wizchip_cs_deselect>:
 * @brief Default function to deselect chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_cs_deselect(void)          {};
void 	wizchip_cs_deselect(void)          {}
 80068fe:	b480      	push	{r7}
 8006900:	af00      	add	r7, sp, #0
 8006902:	bf00      	nop
 8006904:	46bd      	mov	sp, r7
 8006906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800690a:	4770      	bx	lr

0800690c <wizchip_bus_readdata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
 //M20150601 : Rename the function for integrating with W5300
//uint8_t wizchip_bus_readbyte(uint32_t AddrSel) { return * ((volatile uint8_t *)((ptrdiff_t) AddrSel)); }
iodata_t wizchip_bus_readdata(uint32_t AddrSel) { return * ((volatile iodata_t *)((ptrdiff_t) AddrSel)); }
 800690c:	b480      	push	{r7}
 800690e:	b083      	sub	sp, #12
 8006910:	af00      	add	r7, sp, #0
 8006912:	6078      	str	r0, [r7, #4]
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	781b      	ldrb	r3, [r3, #0]
 8006918:	b2db      	uxtb	r3, r3
 800691a:	4618      	mov	r0, r3
 800691c:	370c      	adds	r7, #12
 800691e:	46bd      	mov	sp, r7
 8006920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006924:	4770      	bx	lr

08006926 <wizchip_bus_writedata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//M20150601 : Rename the function for integrating with W5300
//void 	wizchip_bus_writebyte(uint32_t AddrSel, uint8_t wb)  { *((volatile uint8_t*)((ptrdiff_t)AddrSel)) = wb; }
void 	wizchip_bus_writedata(uint32_t AddrSel, iodata_t wb)  { *((volatile iodata_t*)((ptrdiff_t)AddrSel)) = wb; }
 8006926:	b480      	push	{r7}
 8006928:	b083      	sub	sp, #12
 800692a:	af00      	add	r7, sp, #0
 800692c:	6078      	str	r0, [r7, #4]
 800692e:	460b      	mov	r3, r1
 8006930:	70fb      	strb	r3, [r7, #3]
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	78fa      	ldrb	r2, [r7, #3]
 8006936:	701a      	strb	r2, [r3, #0]
 8006938:	bf00      	nop
 800693a:	370c      	adds	r7, #12
 800693c:	46bd      	mov	sp, r7
 800693e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006942:	4770      	bx	lr

08006944 <wizchip_spi_readbyte>:
 * @brief Default function to read in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//uint8_t wizchip_spi_readbyte(void)        {return 0;};
uint8_t wizchip_spi_readbyte(void)        {return 0;}
 8006944:	b480      	push	{r7}
 8006946:	af00      	add	r7, sp, #0
 8006948:	2300      	movs	r3, #0
 800694a:	4618      	mov	r0, r3
 800694c:	46bd      	mov	sp, r7
 800694e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006952:	4770      	bx	lr

08006954 <wizchip_spi_writebyte>:
 * @brief Default function to write in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_spi_writebyte(uint8_t wb) {};
void 	wizchip_spi_writebyte(uint8_t wb) {}
 8006954:	b480      	push	{r7}
 8006956:	b083      	sub	sp, #12
 8006958:	af00      	add	r7, sp, #0
 800695a:	4603      	mov	r3, r0
 800695c:	71fb      	strb	r3, [r7, #7]
 800695e:	bf00      	nop
 8006960:	370c      	adds	r7, #12
 8006962:	46bd      	mov	sp, r7
 8006964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006968:	4770      	bx	lr

0800696a <wizchip_spi_readburst>:
 * @brief Default function to burst read in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_spi_readburst(uint8_t* pBuf, uint16_t len) 	{}; 
void 	wizchip_spi_readburst(uint8_t* pBuf, uint16_t len) 	{}
 800696a:	b480      	push	{r7}
 800696c:	b083      	sub	sp, #12
 800696e:	af00      	add	r7, sp, #0
 8006970:	6078      	str	r0, [r7, #4]
 8006972:	460b      	mov	r3, r1
 8006974:	807b      	strh	r3, [r7, #2]
 8006976:	bf00      	nop
 8006978:	370c      	adds	r7, #12
 800697a:	46bd      	mov	sp, r7
 800697c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006980:	4770      	bx	lr

08006982 <wizchip_spi_writeburst>:
 * @brief Default function to burst write in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_spi_writeburst(uint8_t* pBuf, uint16_t len) {};
void 	wizchip_spi_writeburst(uint8_t* pBuf, uint16_t len) {}
 8006982:	b480      	push	{r7}
 8006984:	b083      	sub	sp, #12
 8006986:	af00      	add	r7, sp, #0
 8006988:	6078      	str	r0, [r7, #4]
 800698a:	460b      	mov	r3, r1
 800698c:	807b      	strh	r3, [r7, #2]
 800698e:	bf00      	nop
 8006990:	370c      	adds	r7, #12
 8006992:	46bd      	mov	sp, r7
 8006994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006998:	4770      	bx	lr
	...

0800699c <reg_wizchip_cris_cbfunc>:

static uint8_t    _DNS_[4];      // DNS server ip address
static dhcp_mode  _DHCP_;        // DHCP mode

void reg_wizchip_cris_cbfunc(void(*cris_en)(void), void(*cris_ex)(void))
{
 800699c:	b480      	push	{r7}
 800699e:	b083      	sub	sp, #12
 80069a0:	af00      	add	r7, sp, #0
 80069a2:	6078      	str	r0, [r7, #4]
 80069a4:	6039      	str	r1, [r7, #0]
   if(!cris_en || !cris_ex)
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d002      	beq.n	80069b2 <reg_wizchip_cris_cbfunc+0x16>
 80069ac:	683b      	ldr	r3, [r7, #0]
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d106      	bne.n	80069c0 <reg_wizchip_cris_cbfunc+0x24>
   {
      WIZCHIP.CRIS._enter = wizchip_cris_enter;
 80069b2:	4b0a      	ldr	r3, [pc, #40]	@ (80069dc <reg_wizchip_cris_cbfunc+0x40>)
 80069b4:	4a0a      	ldr	r2, [pc, #40]	@ (80069e0 <reg_wizchip_cris_cbfunc+0x44>)
 80069b6:	60da      	str	r2, [r3, #12]
      WIZCHIP.CRIS._exit  = wizchip_cris_exit;
 80069b8:	4b08      	ldr	r3, [pc, #32]	@ (80069dc <reg_wizchip_cris_cbfunc+0x40>)
 80069ba:	4a0a      	ldr	r2, [pc, #40]	@ (80069e4 <reg_wizchip_cris_cbfunc+0x48>)
 80069bc:	611a      	str	r2, [r3, #16]
 80069be:	e006      	b.n	80069ce <reg_wizchip_cris_cbfunc+0x32>
   }
   else
   {
      WIZCHIP.CRIS._enter = cris_en;
 80069c0:	4a06      	ldr	r2, [pc, #24]	@ (80069dc <reg_wizchip_cris_cbfunc+0x40>)
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	60d3      	str	r3, [r2, #12]
      WIZCHIP.CRIS._exit  = cris_ex;
 80069c6:	4a05      	ldr	r2, [pc, #20]	@ (80069dc <reg_wizchip_cris_cbfunc+0x40>)
 80069c8:	683b      	ldr	r3, [r7, #0]
 80069ca:	6113      	str	r3, [r2, #16]
   }
}
 80069cc:	bf00      	nop
 80069ce:	bf00      	nop
 80069d0:	370c      	adds	r7, #12
 80069d2:	46bd      	mov	sp, r7
 80069d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d8:	4770      	bx	lr
 80069da:	bf00      	nop
 80069dc:	200000a4 	.word	0x200000a4
 80069e0:	080068d5 	.word	0x080068d5
 80069e4:	080068e3 	.word	0x080068e3

080069e8 <reg_wizchip_cs_cbfunc>:

void reg_wizchip_cs_cbfunc(void(*cs_sel)(void), void(*cs_desel)(void))
{
 80069e8:	b480      	push	{r7}
 80069ea:	b083      	sub	sp, #12
 80069ec:	af00      	add	r7, sp, #0
 80069ee:	6078      	str	r0, [r7, #4]
 80069f0:	6039      	str	r1, [r7, #0]
   if(!cs_sel || !cs_desel)
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d002      	beq.n	80069fe <reg_wizchip_cs_cbfunc+0x16>
 80069f8:	683b      	ldr	r3, [r7, #0]
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d106      	bne.n	8006a0c <reg_wizchip_cs_cbfunc+0x24>
   {
      WIZCHIP.CS._select   = wizchip_cs_select;
 80069fe:	4b0a      	ldr	r3, [pc, #40]	@ (8006a28 <reg_wizchip_cs_cbfunc+0x40>)
 8006a00:	4a0a      	ldr	r2, [pc, #40]	@ (8006a2c <reg_wizchip_cs_cbfunc+0x44>)
 8006a02:	615a      	str	r2, [r3, #20]
      WIZCHIP.CS._deselect = wizchip_cs_deselect;
 8006a04:	4b08      	ldr	r3, [pc, #32]	@ (8006a28 <reg_wizchip_cs_cbfunc+0x40>)
 8006a06:	4a0a      	ldr	r2, [pc, #40]	@ (8006a30 <reg_wizchip_cs_cbfunc+0x48>)
 8006a08:	619a      	str	r2, [r3, #24]
 8006a0a:	e006      	b.n	8006a1a <reg_wizchip_cs_cbfunc+0x32>
   }
   else
   {
      WIZCHIP.CS._select   = cs_sel;
 8006a0c:	4a06      	ldr	r2, [pc, #24]	@ (8006a28 <reg_wizchip_cs_cbfunc+0x40>)
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	6153      	str	r3, [r2, #20]
      WIZCHIP.CS._deselect = cs_desel;
 8006a12:	4a05      	ldr	r2, [pc, #20]	@ (8006a28 <reg_wizchip_cs_cbfunc+0x40>)
 8006a14:	683b      	ldr	r3, [r7, #0]
 8006a16:	6193      	str	r3, [r2, #24]
   }
}
 8006a18:	bf00      	nop
 8006a1a:	bf00      	nop
 8006a1c:	370c      	adds	r7, #12
 8006a1e:	46bd      	mov	sp, r7
 8006a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a24:	4770      	bx	lr
 8006a26:	bf00      	nop
 8006a28:	200000a4 	.word	0x200000a4
 8006a2c:	080068f1 	.word	0x080068f1
 8006a30:	080068ff 	.word	0x080068ff

08006a34 <reg_wizchip_spi_cbfunc>:
      WIZCHIP.IF.BUS._write_data  = bus_wb;
   }
}

void reg_wizchip_spi_cbfunc(uint8_t (*spi_rb)(void), void (*spi_wb)(uint8_t wb))
{
 8006a34:	b480      	push	{r7}
 8006a36:	b083      	sub	sp, #12
 8006a38:	af00      	add	r7, sp, #0
 8006a3a:	6078      	str	r0, [r7, #4]
 8006a3c:	6039      	str	r1, [r7, #0]
   while(!(WIZCHIP.if_mode & _WIZCHIP_IO_MODE_SPI_));
 8006a3e:	bf00      	nop
 8006a40:	4b0f      	ldr	r3, [pc, #60]	@ (8006a80 <reg_wizchip_spi_cbfunc+0x4c>)
 8006a42:	881b      	ldrh	r3, [r3, #0]
 8006a44:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d0f9      	beq.n	8006a40 <reg_wizchip_spi_cbfunc+0xc>
   
   if(!spi_rb || !spi_wb)
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d002      	beq.n	8006a58 <reg_wizchip_spi_cbfunc+0x24>
 8006a52:	683b      	ldr	r3, [r7, #0]
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d106      	bne.n	8006a66 <reg_wizchip_spi_cbfunc+0x32>
   {
      WIZCHIP.IF.SPI._read_byte   = wizchip_spi_readbyte;
 8006a58:	4b09      	ldr	r3, [pc, #36]	@ (8006a80 <reg_wizchip_spi_cbfunc+0x4c>)
 8006a5a:	4a0a      	ldr	r2, [pc, #40]	@ (8006a84 <reg_wizchip_spi_cbfunc+0x50>)
 8006a5c:	61da      	str	r2, [r3, #28]
      WIZCHIP.IF.SPI._write_byte  = wizchip_spi_writebyte;
 8006a5e:	4b08      	ldr	r3, [pc, #32]	@ (8006a80 <reg_wizchip_spi_cbfunc+0x4c>)
 8006a60:	4a09      	ldr	r2, [pc, #36]	@ (8006a88 <reg_wizchip_spi_cbfunc+0x54>)
 8006a62:	621a      	str	r2, [r3, #32]
 8006a64:	e006      	b.n	8006a74 <reg_wizchip_spi_cbfunc+0x40>
   }
   else
   {
      WIZCHIP.IF.SPI._read_byte   = spi_rb;
 8006a66:	4a06      	ldr	r2, [pc, #24]	@ (8006a80 <reg_wizchip_spi_cbfunc+0x4c>)
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	61d3      	str	r3, [r2, #28]
      WIZCHIP.IF.SPI._write_byte  = spi_wb;
 8006a6c:	4a04      	ldr	r2, [pc, #16]	@ (8006a80 <reg_wizchip_spi_cbfunc+0x4c>)
 8006a6e:	683b      	ldr	r3, [r7, #0]
 8006a70:	6213      	str	r3, [r2, #32]
   }
}
 8006a72:	bf00      	nop
 8006a74:	bf00      	nop
 8006a76:	370c      	adds	r7, #12
 8006a78:	46bd      	mov	sp, r7
 8006a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a7e:	4770      	bx	lr
 8006a80:	200000a4 	.word	0x200000a4
 8006a84:	08006945 	.word	0x08006945
 8006a88:	08006955 	.word	0x08006955

08006a8c <reg_wizchip_spiburst_cbfunc>:

// 20140626 Eric Added for SPI burst operations
void reg_wizchip_spiburst_cbfunc(void (*spi_rb)(uint8_t* pBuf, uint16_t len), void (*spi_wb)(uint8_t* pBuf, uint16_t len))
{
 8006a8c:	b480      	push	{r7}
 8006a8e:	b083      	sub	sp, #12
 8006a90:	af00      	add	r7, sp, #0
 8006a92:	6078      	str	r0, [r7, #4]
 8006a94:	6039      	str	r1, [r7, #0]
   while(!(WIZCHIP.if_mode & _WIZCHIP_IO_MODE_SPI_));
 8006a96:	bf00      	nop
 8006a98:	4b0f      	ldr	r3, [pc, #60]	@ (8006ad8 <reg_wizchip_spiburst_cbfunc+0x4c>)
 8006a9a:	881b      	ldrh	r3, [r3, #0]
 8006a9c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d0f9      	beq.n	8006a98 <reg_wizchip_spiburst_cbfunc+0xc>

   if(!spi_rb || !spi_wb)
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d002      	beq.n	8006ab0 <reg_wizchip_spiburst_cbfunc+0x24>
 8006aaa:	683b      	ldr	r3, [r7, #0]
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d106      	bne.n	8006abe <reg_wizchip_spiburst_cbfunc+0x32>
   {
      WIZCHIP.IF.SPI._read_burst   = wizchip_spi_readburst;
 8006ab0:	4b09      	ldr	r3, [pc, #36]	@ (8006ad8 <reg_wizchip_spiburst_cbfunc+0x4c>)
 8006ab2:	4a0a      	ldr	r2, [pc, #40]	@ (8006adc <reg_wizchip_spiburst_cbfunc+0x50>)
 8006ab4:	625a      	str	r2, [r3, #36]	@ 0x24
      WIZCHIP.IF.SPI._write_burst  = wizchip_spi_writeburst;
 8006ab6:	4b08      	ldr	r3, [pc, #32]	@ (8006ad8 <reg_wizchip_spiburst_cbfunc+0x4c>)
 8006ab8:	4a09      	ldr	r2, [pc, #36]	@ (8006ae0 <reg_wizchip_spiburst_cbfunc+0x54>)
 8006aba:	629a      	str	r2, [r3, #40]	@ 0x28
 8006abc:	e006      	b.n	8006acc <reg_wizchip_spiburst_cbfunc+0x40>
   }
   else
   {
      WIZCHIP.IF.SPI._read_burst   = spi_rb;
 8006abe:	4a06      	ldr	r2, [pc, #24]	@ (8006ad8 <reg_wizchip_spiburst_cbfunc+0x4c>)
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	6253      	str	r3, [r2, #36]	@ 0x24
      WIZCHIP.IF.SPI._write_burst  = spi_wb;
 8006ac4:	4a04      	ldr	r2, [pc, #16]	@ (8006ad8 <reg_wizchip_spiburst_cbfunc+0x4c>)
 8006ac6:	683b      	ldr	r3, [r7, #0]
 8006ac8:	6293      	str	r3, [r2, #40]	@ 0x28
   }
}
 8006aca:	bf00      	nop
 8006acc:	bf00      	nop
 8006ace:	370c      	adds	r7, #12
 8006ad0:	46bd      	mov	sp, r7
 8006ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad6:	4770      	bx	lr
 8006ad8:	200000a4 	.word	0x200000a4
 8006adc:	0800696b 	.word	0x0800696b
 8006ae0:	08006983 	.word	0x08006983

08006ae4 <ctlwizchip>:

int8_t ctlwizchip(ctlwizchip_type cwtype, void* arg)
{
 8006ae4:	b590      	push	{r4, r7, lr}
 8006ae6:	b087      	sub	sp, #28
 8006ae8:	af00      	add	r7, sp, #0
 8006aea:	4603      	mov	r3, r0
 8006aec:	6039      	str	r1, [r7, #0]
 8006aee:	71fb      	strb	r3, [r7, #7]
#if	_WIZCHIP_ == W5100S || _WIZCHIP_ == W5200 || _WIZCHIP_ == W5500
   uint8_t tmp = 0;
 8006af0:	2300      	movs	r3, #0
 8006af2:	75fb      	strb	r3, [r7, #23]
#endif
   uint8_t* ptmp[2] = {0,0};
 8006af4:	2300      	movs	r3, #0
 8006af6:	60fb      	str	r3, [r7, #12]
 8006af8:	2300      	movs	r3, #0
 8006afa:	613b      	str	r3, [r7, #16]
   switch(cwtype)
 8006afc:	79fb      	ldrb	r3, [r7, #7]
 8006afe:	2b0f      	cmp	r3, #15
 8006b00:	f200 80c5 	bhi.w	8006c8e <ctlwizchip+0x1aa>
 8006b04:	a201      	add	r2, pc, #4	@ (adr r2, 8006b0c <ctlwizchip+0x28>)
 8006b06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b0a:	bf00      	nop
 8006b0c:	08006b4d 	.word	0x08006b4d
 8006b10:	08006b53 	.word	0x08006b53
 8006b14:	08006b7f 	.word	0x08006b7f
 8006b18:	08006b73 	.word	0x08006b73
 8006b1c:	08006b8d 	.word	0x08006b8d
 8006b20:	08006b99 	.word	0x08006b99
 8006b24:	08006ba7 	.word	0x08006ba7
 8006b28:	08006bcd 	.word	0x08006bcd
 8006b2c:	08006bef 	.word	0x08006bef
 8006b30:	08006c33 	.word	0x08006c33
 8006b34:	08006c39 	.word	0x08006c39
 8006b38:	08006c41 	.word	0x08006c41
 8006b3c:	08006c95 	.word	0x08006c95
 8006b40:	08006c49 	.word	0x08006c49
 8006b44:	08006c57 	.word	0x08006c57
 8006b48:	08006c73 	.word	0x08006c73
   {
      case CW_RESET_WIZCHIP:
         wizchip_sw_reset();
 8006b4c:	f000 f8e8 	bl	8006d20 <wizchip_sw_reset>
         break;
 8006b50:	e0a1      	b.n	8006c96 <ctlwizchip+0x1b2>
      case CW_INIT_WIZCHIP:
         if(arg != 0) 
 8006b52:	683b      	ldr	r3, [r7, #0]
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d004      	beq.n	8006b62 <ctlwizchip+0x7e>
         {
            ptmp[0] = (uint8_t*)arg;
 8006b58:	683b      	ldr	r3, [r7, #0]
 8006b5a:	60fb      	str	r3, [r7, #12]
            ptmp[1] = ptmp[0] + _WIZCHIP_SOCK_NUM_;
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	3308      	adds	r3, #8
 8006b60:	613b      	str	r3, [r7, #16]
         }
         return wizchip_init(ptmp[0], ptmp[1]);
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	693a      	ldr	r2, [r7, #16]
 8006b66:	4611      	mov	r1, r2
 8006b68:	4618      	mov	r0, r3
 8006b6a:	f000 f925 	bl	8006db8 <wizchip_init>
 8006b6e:	4603      	mov	r3, r0
 8006b70:	e092      	b.n	8006c98 <ctlwizchip+0x1b4>
      case CW_CLR_INTERRUPT:
         wizchip_clrinterrupt(*((intr_kind*)arg));
 8006b72:	683b      	ldr	r3, [r7, #0]
 8006b74:	881b      	ldrh	r3, [r3, #0]
 8006b76:	4618      	mov	r0, r3
 8006b78:	f000 f9aa 	bl	8006ed0 <wizchip_clrinterrupt>
         break;
 8006b7c:	e08b      	b.n	8006c96 <ctlwizchip+0x1b2>
      case CW_GET_INTERRUPT:
        *((intr_kind*)arg) = wizchip_getinterrupt();
 8006b7e:	f000 f9db 	bl	8006f38 <wizchip_getinterrupt>
 8006b82:	4603      	mov	r3, r0
 8006b84:	461a      	mov	r2, r3
 8006b86:	683b      	ldr	r3, [r7, #0]
 8006b88:	801a      	strh	r2, [r3, #0]
         break;
 8006b8a:	e084      	b.n	8006c96 <ctlwizchip+0x1b2>
      case CW_SET_INTRMASK:
         wizchip_setinterruptmask(*((intr_kind*)arg));
 8006b8c:	683b      	ldr	r3, [r7, #0]
 8006b8e:	881b      	ldrh	r3, [r3, #0]
 8006b90:	4618      	mov	r0, r3
 8006b92:	f000 f9f6 	bl	8006f82 <wizchip_setinterruptmask>
         break;         
 8006b96:	e07e      	b.n	8006c96 <ctlwizchip+0x1b2>
      case CW_GET_INTRMASK:
         *((intr_kind*)arg) = wizchip_getinterruptmask();
 8006b98:	f000 fa0e 	bl	8006fb8 <wizchip_getinterruptmask>
 8006b9c:	4603      	mov	r3, r0
 8006b9e:	461a      	mov	r2, r3
 8006ba0:	683b      	ldr	r3, [r7, #0]
 8006ba2:	801a      	strh	r2, [r3, #0]
         break;
 8006ba4:	e077      	b.n	8006c96 <ctlwizchip+0x1b2>
   //M20150601 : This can be supported by W5200, W5500
   //#if _WIZCHIP_ > W5100
   #if (_WIZCHIP_ == W5200 || _WIZCHIP_ == W5500)
      case CW_SET_INTRTIME:
         setINTLEVEL(*(uint16_t*)arg);
 8006ba6:	683b      	ldr	r3, [r7, #0]
 8006ba8:	881b      	ldrh	r3, [r3, #0]
 8006baa:	0a1b      	lsrs	r3, r3, #8
 8006bac:	b29b      	uxth	r3, r3
 8006bae:	b2db      	uxtb	r3, r3
 8006bb0:	4619      	mov	r1, r3
 8006bb2:	f44f 5098 	mov.w	r0, #4864	@ 0x1300
 8006bb6:	f7fe fb11 	bl	80051dc <WIZCHIP_WRITE>
 8006bba:	683b      	ldr	r3, [r7, #0]
 8006bbc:	881b      	ldrh	r3, [r3, #0]
 8006bbe:	b2db      	uxtb	r3, r3
 8006bc0:	4619      	mov	r1, r3
 8006bc2:	f44f 50a0 	mov.w	r0, #5120	@ 0x1400
 8006bc6:	f7fe fb09 	bl	80051dc <WIZCHIP_WRITE>
         break;
 8006bca:	e064      	b.n	8006c96 <ctlwizchip+0x1b2>
      case CW_GET_INTRTIME:
         *(uint16_t*)arg = getINTLEVEL();
 8006bcc:	f44f 5098 	mov.w	r0, #4864	@ 0x1300
 8006bd0:	f7fe fab8 	bl	8005144 <WIZCHIP_READ>
 8006bd4:	4603      	mov	r3, r0
 8006bd6:	021b      	lsls	r3, r3, #8
 8006bd8:	b29c      	uxth	r4, r3
 8006bda:	f44f 50a0 	mov.w	r0, #5120	@ 0x1400
 8006bde:	f7fe fab1 	bl	8005144 <WIZCHIP_READ>
 8006be2:	4603      	mov	r3, r0
 8006be4:	4423      	add	r3, r4
 8006be6:	b29a      	uxth	r2, r3
 8006be8:	683b      	ldr	r3, [r7, #0]
 8006bea:	801a      	strh	r2, [r3, #0]
         break;
 8006bec:	e053      	b.n	8006c96 <ctlwizchip+0x1b2>
   #endif
      case CW_GET_ID:
         ((uint8_t*)arg)[0] = WIZCHIP.id[0];
 8006bee:	4b2c      	ldr	r3, [pc, #176]	@ (8006ca0 <ctlwizchip+0x1bc>)
 8006bf0:	789a      	ldrb	r2, [r3, #2]
 8006bf2:	683b      	ldr	r3, [r7, #0]
 8006bf4:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[1] = WIZCHIP.id[1];
 8006bf6:	683b      	ldr	r3, [r7, #0]
 8006bf8:	3301      	adds	r3, #1
 8006bfa:	4a29      	ldr	r2, [pc, #164]	@ (8006ca0 <ctlwizchip+0x1bc>)
 8006bfc:	78d2      	ldrb	r2, [r2, #3]
 8006bfe:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[2] = WIZCHIP.id[2];
 8006c00:	683b      	ldr	r3, [r7, #0]
 8006c02:	3302      	adds	r3, #2
 8006c04:	4a26      	ldr	r2, [pc, #152]	@ (8006ca0 <ctlwizchip+0x1bc>)
 8006c06:	7912      	ldrb	r2, [r2, #4]
 8006c08:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[3] = WIZCHIP.id[3];
 8006c0a:	683b      	ldr	r3, [r7, #0]
 8006c0c:	3303      	adds	r3, #3
 8006c0e:	4a24      	ldr	r2, [pc, #144]	@ (8006ca0 <ctlwizchip+0x1bc>)
 8006c10:	7952      	ldrb	r2, [r2, #5]
 8006c12:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[4] = WIZCHIP.id[4];
 8006c14:	683b      	ldr	r3, [r7, #0]
 8006c16:	3304      	adds	r3, #4
 8006c18:	4a21      	ldr	r2, [pc, #132]	@ (8006ca0 <ctlwizchip+0x1bc>)
 8006c1a:	7992      	ldrb	r2, [r2, #6]
 8006c1c:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[5] = WIZCHIP.id[5];
 8006c1e:	683b      	ldr	r3, [r7, #0]
 8006c20:	3305      	adds	r3, #5
 8006c22:	4a1f      	ldr	r2, [pc, #124]	@ (8006ca0 <ctlwizchip+0x1bc>)
 8006c24:	79d2      	ldrb	r2, [r2, #7]
 8006c26:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[6] = 0;
 8006c28:	683b      	ldr	r3, [r7, #0]
 8006c2a:	3306      	adds	r3, #6
 8006c2c:	2200      	movs	r2, #0
 8006c2e:	701a      	strb	r2, [r3, #0]
         break;
 8006c30:	e031      	b.n	8006c96 <ctlwizchip+0x1b2>

   #if _WIZCHIP_ == W5100S || _WIZCHIP_ == W5500
      case CW_RESET_PHY:
         wizphy_reset();
 8006c32:	f000 fa13 	bl	800705c <wizphy_reset>
         break;
 8006c36:	e02e      	b.n	8006c96 <ctlwizchip+0x1b2>
      case CW_SET_PHYCONF:
         wizphy_setphyconf((wiz_PhyConf*)arg);
 8006c38:	6838      	ldr	r0, [r7, #0]
 8006c3a:	f000 fa36 	bl	80070aa <wizphy_setphyconf>
         break;
 8006c3e:	e02a      	b.n	8006c96 <ctlwizchip+0x1b2>
      case CW_GET_PHYCONF:
         wizphy_getphyconf((wiz_PhyConf*)arg);
 8006c40:	6838      	ldr	r0, [r7, #0]
 8006c42:	f000 fa75 	bl	8007130 <wizphy_getphyconf>
         break;
 8006c46:	e026      	b.n	8006c96 <ctlwizchip+0x1b2>
      case CW_GET_PHYSTATUS:
         break;
      case CW_SET_PHYPOWMODE:
         return wizphy_setphypmode(*(uint8_t*)arg);
 8006c48:	683b      	ldr	r3, [r7, #0]
 8006c4a:	781b      	ldrb	r3, [r3, #0]
 8006c4c:	4618      	mov	r0, r3
 8006c4e:	f000 fad9 	bl	8007204 <wizphy_setphypmode>
 8006c52:	4603      	mov	r3, r0
 8006c54:	e020      	b.n	8006c98 <ctlwizchip+0x1b4>
   #endif
   #if _WIZCHIP_ == W5100S || _WIZCHIP_ == W5200 || _WIZCHIP_ == W5500
      case CW_GET_PHYPOWMODE:
         tmp = wizphy_getphypmode();
 8006c56:	f000 f9e8 	bl	800702a <wizphy_getphypmode>
 8006c5a:	4603      	mov	r3, r0
 8006c5c:	75fb      	strb	r3, [r7, #23]
         if((int8_t)tmp == -1) return -1;
 8006c5e:	7dfb      	ldrb	r3, [r7, #23]
 8006c60:	2bff      	cmp	r3, #255	@ 0xff
 8006c62:	d102      	bne.n	8006c6a <ctlwizchip+0x186>
 8006c64:	f04f 33ff 	mov.w	r3, #4294967295
 8006c68:	e016      	b.n	8006c98 <ctlwizchip+0x1b4>
         *(uint8_t*)arg = tmp;
 8006c6a:	683b      	ldr	r3, [r7, #0]
 8006c6c:	7dfa      	ldrb	r2, [r7, #23]
 8006c6e:	701a      	strb	r2, [r3, #0]
         break;
 8006c70:	e011      	b.n	8006c96 <ctlwizchip+0x1b2>
      case CW_GET_PHYLINK:
         tmp = wizphy_getphylink();
 8006c72:	f000 f9c4 	bl	8006ffe <wizphy_getphylink>
 8006c76:	4603      	mov	r3, r0
 8006c78:	75fb      	strb	r3, [r7, #23]
         if((int8_t)tmp == -1) return -1;
 8006c7a:	7dfb      	ldrb	r3, [r7, #23]
 8006c7c:	2bff      	cmp	r3, #255	@ 0xff
 8006c7e:	d102      	bne.n	8006c86 <ctlwizchip+0x1a2>
 8006c80:	f04f 33ff 	mov.w	r3, #4294967295
 8006c84:	e008      	b.n	8006c98 <ctlwizchip+0x1b4>
         *(uint8_t*)arg = tmp;
 8006c86:	683b      	ldr	r3, [r7, #0]
 8006c88:	7dfa      	ldrb	r2, [r7, #23]
 8006c8a:	701a      	strb	r2, [r3, #0]
         break;
 8006c8c:	e003      	b.n	8006c96 <ctlwizchip+0x1b2>
   #endif      
      default:
         return -1;
 8006c8e:	f04f 33ff 	mov.w	r3, #4294967295
 8006c92:	e001      	b.n	8006c98 <ctlwizchip+0x1b4>
         break;
 8006c94:	bf00      	nop
   }
   return 0;
 8006c96:	2300      	movs	r3, #0
}
 8006c98:	4618      	mov	r0, r3
 8006c9a:	371c      	adds	r7, #28
 8006c9c:	46bd      	mov	sp, r7
 8006c9e:	bd90      	pop	{r4, r7, pc}
 8006ca0:	200000a4 	.word	0x200000a4

08006ca4 <ctlnetwork>:


int8_t ctlnetwork(ctlnetwork_type cntype, void* arg)
{
 8006ca4:	b580      	push	{r7, lr}
 8006ca6:	b082      	sub	sp, #8
 8006ca8:	af00      	add	r7, sp, #0
 8006caa:	4603      	mov	r3, r0
 8006cac:	6039      	str	r1, [r7, #0]
 8006cae:	71fb      	strb	r3, [r7, #7]
   
   switch(cntype)
 8006cb0:	79fb      	ldrb	r3, [r7, #7]
 8006cb2:	2b05      	cmp	r3, #5
 8006cb4:	d82c      	bhi.n	8006d10 <ctlnetwork+0x6c>
 8006cb6:	a201      	add	r2, pc, #4	@ (adr r2, 8006cbc <ctlnetwork+0x18>)
 8006cb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cbc:	08006cd5 	.word	0x08006cd5
 8006cc0:	08006cdd 	.word	0x08006cdd
 8006cc4:	08006ce5 	.word	0x08006ce5
 8006cc8:	08006cf3 	.word	0x08006cf3
 8006ccc:	08006d01 	.word	0x08006d01
 8006cd0:	08006d09 	.word	0x08006d09
   {
      case CN_SET_NETINFO:
         wizchip_setnetinfo((wiz_NetInfo*)arg);
 8006cd4:	6838      	ldr	r0, [r7, #0]
 8006cd6:	f000 fadf 	bl	8007298 <wizchip_setnetinfo>
         break;
 8006cda:	e01c      	b.n	8006d16 <ctlnetwork+0x72>
      case CN_GET_NETINFO:
         wizchip_getnetinfo((wiz_NetInfo*)arg);
 8006cdc:	6838      	ldr	r0, [r7, #0]
 8006cde:	f000 fb1b 	bl	8007318 <wizchip_getnetinfo>
         break;
 8006ce2:	e018      	b.n	8006d16 <ctlnetwork+0x72>
      case CN_SET_NETMODE:
         return wizchip_setnetmode(*(netmode_type*)arg);
 8006ce4:	683b      	ldr	r3, [r7, #0]
 8006ce6:	781b      	ldrb	r3, [r3, #0]
 8006ce8:	4618      	mov	r0, r3
 8006cea:	f000 fb55 	bl	8007398 <wizchip_setnetmode>
 8006cee:	4603      	mov	r3, r0
 8006cf0:	e012      	b.n	8006d18 <ctlnetwork+0x74>
      case CN_GET_NETMODE:
         *(netmode_type*)arg = wizchip_getnetmode();
 8006cf2:	f000 fb73 	bl	80073dc <wizchip_getnetmode>
 8006cf6:	4603      	mov	r3, r0
 8006cf8:	461a      	mov	r2, r3
 8006cfa:	683b      	ldr	r3, [r7, #0]
 8006cfc:	701a      	strb	r2, [r3, #0]
         break;
 8006cfe:	e00a      	b.n	8006d16 <ctlnetwork+0x72>
      case CN_SET_TIMEOUT:
         wizchip_settimeout((wiz_NetTimeout*)arg);
 8006d00:	6838      	ldr	r0, [r7, #0]
 8006d02:	f000 fb73 	bl	80073ec <wizchip_settimeout>
         break;
 8006d06:	e006      	b.n	8006d16 <ctlnetwork+0x72>
      case CN_GET_TIMEOUT:
         wizchip_gettimeout((wiz_NetTimeout*)arg);
 8006d08:	6838      	ldr	r0, [r7, #0]
 8006d0a:	f000 fb90 	bl	800742e <wizchip_gettimeout>
         break;
 8006d0e:	e002      	b.n	8006d16 <ctlnetwork+0x72>
      default:
         return -1;
 8006d10:	f04f 33ff 	mov.w	r3, #4294967295
 8006d14:	e000      	b.n	8006d18 <ctlnetwork+0x74>
   }
   return 0;
 8006d16:	2300      	movs	r3, #0
}
 8006d18:	4618      	mov	r0, r3
 8006d1a:	3708      	adds	r7, #8
 8006d1c:	46bd      	mov	sp, r7
 8006d1e:	bd80      	pop	{r7, pc}

08006d20 <wizchip_sw_reset>:

void wizchip_sw_reset(void)
{
 8006d20:	b580      	push	{r7, lr}
 8006d22:	b086      	sub	sp, #24
 8006d24:	af00      	add	r7, sp, #0
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   uint16_t mr = (uint16_t)getMR();
   setMR(mr | MR_IND);
#endif
//
   getSHAR(mac);
 8006d26:	1d3b      	adds	r3, r7, #4
 8006d28:	2206      	movs	r2, #6
 8006d2a:	4619      	mov	r1, r3
 8006d2c:	f44f 6010 	mov.w	r0, #2304	@ 0x900
 8006d30:	f7fe faa2 	bl	8005278 <WIZCHIP_READ_BUF>
   getGAR(gw);  getSUBR(sn);  getSIPR(sip);
 8006d34:	f107 0314 	add.w	r3, r7, #20
 8006d38:	2204      	movs	r2, #4
 8006d3a:	4619      	mov	r1, r3
 8006d3c:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8006d40:	f7fe fa9a 	bl	8005278 <WIZCHIP_READ_BUF>
 8006d44:	f107 0310 	add.w	r3, r7, #16
 8006d48:	2204      	movs	r2, #4
 8006d4a:	4619      	mov	r1, r3
 8006d4c:	f44f 60a0 	mov.w	r0, #1280	@ 0x500
 8006d50:	f7fe fa92 	bl	8005278 <WIZCHIP_READ_BUF>
 8006d54:	f107 030c 	add.w	r3, r7, #12
 8006d58:	2204      	movs	r2, #4
 8006d5a:	4619      	mov	r1, r3
 8006d5c:	f44f 6070 	mov.w	r0, #3840	@ 0xf00
 8006d60:	f7fe fa8a 	bl	8005278 <WIZCHIP_READ_BUF>
   setMR(MR_RST);
 8006d64:	2180      	movs	r1, #128	@ 0x80
 8006d66:	2000      	movs	r0, #0
 8006d68:	f7fe fa38 	bl	80051dc <WIZCHIP_WRITE>
   getMR(); // for delay
 8006d6c:	2000      	movs	r0, #0
 8006d6e:	f7fe f9e9 	bl	8005144 <WIZCHIP_READ>
//A2015051 : For indirect bus mode 
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   setMR(mr | MR_IND);
#endif
//
   setSHAR(mac);
 8006d72:	1d3b      	adds	r3, r7, #4
 8006d74:	2206      	movs	r2, #6
 8006d76:	4619      	mov	r1, r3
 8006d78:	f44f 6010 	mov.w	r0, #2304	@ 0x900
 8006d7c:	f7fe fadc 	bl	8005338 <WIZCHIP_WRITE_BUF>
   setGAR(gw);
 8006d80:	f107 0314 	add.w	r3, r7, #20
 8006d84:	2204      	movs	r2, #4
 8006d86:	4619      	mov	r1, r3
 8006d88:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8006d8c:	f7fe fad4 	bl	8005338 <WIZCHIP_WRITE_BUF>
   setSUBR(sn);
 8006d90:	f107 0310 	add.w	r3, r7, #16
 8006d94:	2204      	movs	r2, #4
 8006d96:	4619      	mov	r1, r3
 8006d98:	f44f 60a0 	mov.w	r0, #1280	@ 0x500
 8006d9c:	f7fe facc 	bl	8005338 <WIZCHIP_WRITE_BUF>
   setSIPR(sip);
 8006da0:	f107 030c 	add.w	r3, r7, #12
 8006da4:	2204      	movs	r2, #4
 8006da6:	4619      	mov	r1, r3
 8006da8:	f44f 6070 	mov.w	r0, #3840	@ 0xf00
 8006dac:	f7fe fac4 	bl	8005338 <WIZCHIP_WRITE_BUF>
}
 8006db0:	bf00      	nop
 8006db2:	3718      	adds	r7, #24
 8006db4:	46bd      	mov	sp, r7
 8006db6:	bd80      	pop	{r7, pc}

08006db8 <wizchip_init>:

int8_t wizchip_init(uint8_t* txsize, uint8_t* rxsize)
{
 8006db8:	b580      	push	{r7, lr}
 8006dba:	b084      	sub	sp, #16
 8006dbc:	af00      	add	r7, sp, #0
 8006dbe:	6078      	str	r0, [r7, #4]
 8006dc0:	6039      	str	r1, [r7, #0]
   int8_t i;
#if _WIZCHIP_ < W5200
   int8_t j;
#endif
   int8_t tmp = 0;
 8006dc2:	2300      	movs	r3, #0
 8006dc4:	73bb      	strb	r3, [r7, #14]
   wizchip_sw_reset();
 8006dc6:	f7ff ffab 	bl	8006d20 <wizchip_sw_reset>
   if(txsize)
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d03b      	beq.n	8006e48 <wizchip_init+0x90>
   {
      tmp = 0;
 8006dd0:	2300      	movs	r3, #0
 8006dd2:	73bb      	strb	r3, [r7, #14]
			tmp += txsize[i];
			if(tmp > 128) return -1;
		}
		if(tmp % 8) return -1;
#else
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8006dd4:	2300      	movs	r3, #0
 8006dd6:	73fb      	strb	r3, [r7, #15]
 8006dd8:	e015      	b.n	8006e06 <wizchip_init+0x4e>
		{
			tmp += txsize[i];
 8006dda:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006dde:	687a      	ldr	r2, [r7, #4]
 8006de0:	4413      	add	r3, r2
 8006de2:	781a      	ldrb	r2, [r3, #0]
 8006de4:	7bbb      	ldrb	r3, [r7, #14]
 8006de6:	4413      	add	r3, r2
 8006de8:	b2db      	uxtb	r3, r3
 8006dea:	73bb      	strb	r3, [r7, #14]

#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100 and w5100s
			if(tmp > 8) return -1;
#else
			if(tmp > 16) return -1;
 8006dec:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006df0:	2b10      	cmp	r3, #16
 8006df2:	dd02      	ble.n	8006dfa <wizchip_init+0x42>
 8006df4:	f04f 33ff 	mov.w	r3, #4294967295
 8006df8:	e066      	b.n	8006ec8 <wizchip_init+0x110>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8006dfa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006dfe:	b2db      	uxtb	r3, r3
 8006e00:	3301      	adds	r3, #1
 8006e02:	b2db      	uxtb	r3, r3
 8006e04:	73fb      	strb	r3, [r7, #15]
 8006e06:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006e0a:	2b07      	cmp	r3, #7
 8006e0c:	dde5      	ble.n	8006dda <wizchip_init+0x22>
#endif
		}
#endif
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8006e0e:	2300      	movs	r3, #0
 8006e10:	73fb      	strb	r3, [r7, #15]
 8006e12:	e015      	b.n	8006e40 <wizchip_init+0x88>
#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100
			j = 0;
			while((txsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
			setSn_TXBUF_SIZE(i, j);
#else
			setSn_TXBUF_SIZE(i, txsize[i]);
 8006e14:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006e18:	009b      	lsls	r3, r3, #2
 8006e1a:	3301      	adds	r3, #1
 8006e1c:	00db      	lsls	r3, r3, #3
 8006e1e:	f503 53f8 	add.w	r3, r3, #7936	@ 0x1f00
 8006e22:	4618      	mov	r0, r3
 8006e24:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006e28:	687a      	ldr	r2, [r7, #4]
 8006e2a:	4413      	add	r3, r2
 8006e2c:	781b      	ldrb	r3, [r3, #0]
 8006e2e:	4619      	mov	r1, r3
 8006e30:	f7fe f9d4 	bl	80051dc <WIZCHIP_WRITE>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8006e34:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006e38:	b2db      	uxtb	r3, r3
 8006e3a:	3301      	adds	r3, #1
 8006e3c:	b2db      	uxtb	r3, r3
 8006e3e:	73fb      	strb	r3, [r7, #15]
 8006e40:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006e44:	2b07      	cmp	r3, #7
 8006e46:	dde5      	ble.n	8006e14 <wizchip_init+0x5c>
#endif
		}	
   }

   if(rxsize)
 8006e48:	683b      	ldr	r3, [r7, #0]
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d03b      	beq.n	8006ec6 <wizchip_init+0x10e>
   {
      tmp = 0;
 8006e4e:	2300      	movs	r3, #0
 8006e50:	73bb      	strb	r3, [r7, #14]
			tmp += rxsize[i];
			if(tmp > 128) return -1;
		}
		if(tmp % 8) return -1;
#else
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8006e52:	2300      	movs	r3, #0
 8006e54:	73fb      	strb	r3, [r7, #15]
 8006e56:	e015      	b.n	8006e84 <wizchip_init+0xcc>
		{
			tmp += rxsize[i];
 8006e58:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006e5c:	683a      	ldr	r2, [r7, #0]
 8006e5e:	4413      	add	r3, r2
 8006e60:	781a      	ldrb	r2, [r3, #0]
 8006e62:	7bbb      	ldrb	r3, [r7, #14]
 8006e64:	4413      	add	r3, r2
 8006e66:	b2db      	uxtb	r3, r3
 8006e68:	73bb      	strb	r3, [r7, #14]
#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100 and w5100s
			if(tmp > 8) return -1;
#else
			if(tmp > 16) return -1;
 8006e6a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006e6e:	2b10      	cmp	r3, #16
 8006e70:	dd02      	ble.n	8006e78 <wizchip_init+0xc0>
 8006e72:	f04f 33ff 	mov.w	r3, #4294967295
 8006e76:	e027      	b.n	8006ec8 <wizchip_init+0x110>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8006e78:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006e7c:	b2db      	uxtb	r3, r3
 8006e7e:	3301      	adds	r3, #1
 8006e80:	b2db      	uxtb	r3, r3
 8006e82:	73fb      	strb	r3, [r7, #15]
 8006e84:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006e88:	2b07      	cmp	r3, #7
 8006e8a:	dde5      	ble.n	8006e58 <wizchip_init+0xa0>
#endif
		}
#endif
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8006e8c:	2300      	movs	r3, #0
 8006e8e:	73fb      	strb	r3, [r7, #15]
 8006e90:	e015      	b.n	8006ebe <wizchip_init+0x106>
#if _WIZCHIP_ < W5200	// add condition for w5100
			j = 0;
			while((rxsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
			setSn_RXBUF_SIZE(i, j);
#else
			setSn_RXBUF_SIZE(i, rxsize[i]);
 8006e92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006e96:	009b      	lsls	r3, r3, #2
 8006e98:	3301      	adds	r3, #1
 8006e9a:	00db      	lsls	r3, r3, #3
 8006e9c:	f503 53f0 	add.w	r3, r3, #7680	@ 0x1e00
 8006ea0:	4618      	mov	r0, r3
 8006ea2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006ea6:	683a      	ldr	r2, [r7, #0]
 8006ea8:	4413      	add	r3, r2
 8006eaa:	781b      	ldrb	r3, [r3, #0]
 8006eac:	4619      	mov	r1, r3
 8006eae:	f7fe f995 	bl	80051dc <WIZCHIP_WRITE>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8006eb2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006eb6:	b2db      	uxtb	r3, r3
 8006eb8:	3301      	adds	r3, #1
 8006eba:	b2db      	uxtb	r3, r3
 8006ebc:	73fb      	strb	r3, [r7, #15]
 8006ebe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006ec2:	2b07      	cmp	r3, #7
 8006ec4:	dde5      	ble.n	8006e92 <wizchip_init+0xda>
#endif
		}
   }
   return 0;
 8006ec6:	2300      	movs	r3, #0
}
 8006ec8:	4618      	mov	r0, r3
 8006eca:	3710      	adds	r7, #16
 8006ecc:	46bd      	mov	sp, r7
 8006ece:	bd80      	pop	{r7, pc}

08006ed0 <wizchip_clrinterrupt>:

void wizchip_clrinterrupt(intr_kind intr)
{
 8006ed0:	b580      	push	{r7, lr}
 8006ed2:	b084      	sub	sp, #16
 8006ed4:	af00      	add	r7, sp, #0
 8006ed6:	4603      	mov	r3, r0
 8006ed8:	80fb      	strh	r3, [r7, #6]
   uint8_t ir  = (uint8_t)intr;
 8006eda:	88fb      	ldrh	r3, [r7, #6]
 8006edc:	73fb      	strb	r3, [r7, #15]
   uint8_t sir = (uint8_t)((uint16_t)intr >> 8);
 8006ede:	88fb      	ldrh	r3, [r7, #6]
 8006ee0:	0a1b      	lsrs	r3, r3, #8
 8006ee2:	b29b      	uxth	r3, r3
 8006ee4:	73bb      	strb	r3, [r7, #14]
   setIR(ir);
//A20150601 : For integrating with W5300
#elif _WIZCHIP_ == W5300
   setIR( ((((uint16_t)ir) << 8) | (((uint16_t)sir) & 0x00FF)) );
#else
   setIR(ir);
 8006ee6:	7bfb      	ldrb	r3, [r7, #15]
 8006ee8:	f023 030f 	bic.w	r3, r3, #15
 8006eec:	b2db      	uxtb	r3, r3
 8006eee:	4619      	mov	r1, r3
 8006ef0:	f44f 50a8 	mov.w	r0, #5376	@ 0x1500
 8006ef4:	f7fe f972 	bl	80051dc <WIZCHIP_WRITE>
//M20200227 : For clear
   //setSIR(sir);
   for(ir=0; ir<8; ir++){
 8006ef8:	2300      	movs	r3, #0
 8006efa:	73fb      	strb	r3, [r7, #15]
 8006efc:	e014      	b.n	8006f28 <wizchip_clrinterrupt+0x58>
       if(sir & (0x01 <<ir) ) setSn_IR(ir, 0xff);
 8006efe:	7bba      	ldrb	r2, [r7, #14]
 8006f00:	7bfb      	ldrb	r3, [r7, #15]
 8006f02:	fa42 f303 	asr.w	r3, r2, r3
 8006f06:	f003 0301 	and.w	r3, r3, #1
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d009      	beq.n	8006f22 <wizchip_clrinterrupt+0x52>
 8006f0e:	7bfb      	ldrb	r3, [r7, #15]
 8006f10:	009b      	lsls	r3, r3, #2
 8006f12:	3301      	adds	r3, #1
 8006f14:	00db      	lsls	r3, r3, #3
 8006f16:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8006f1a:	211f      	movs	r1, #31
 8006f1c:	4618      	mov	r0, r3
 8006f1e:	f7fe f95d 	bl	80051dc <WIZCHIP_WRITE>
   for(ir=0; ir<8; ir++){
 8006f22:	7bfb      	ldrb	r3, [r7, #15]
 8006f24:	3301      	adds	r3, #1
 8006f26:	73fb      	strb	r3, [r7, #15]
 8006f28:	7bfb      	ldrb	r3, [r7, #15]
 8006f2a:	2b07      	cmp	r3, #7
 8006f2c:	d9e7      	bls.n	8006efe <wizchip_clrinterrupt+0x2e>
   }

#endif   
}
 8006f2e:	bf00      	nop
 8006f30:	bf00      	nop
 8006f32:	3710      	adds	r7, #16
 8006f34:	46bd      	mov	sp, r7
 8006f36:	bd80      	pop	{r7, pc}

08006f38 <wizchip_getinterrupt>:

intr_kind wizchip_getinterrupt(void)
{
 8006f38:	b580      	push	{r7, lr}
 8006f3a:	b082      	sub	sp, #8
 8006f3c:	af00      	add	r7, sp, #0
   uint8_t ir  = 0;
 8006f3e:	2300      	movs	r3, #0
 8006f40:	71fb      	strb	r3, [r7, #7]
   uint8_t sir = 0;
 8006f42:	2300      	movs	r3, #0
 8006f44:	71bb      	strb	r3, [r7, #6]
   uint16_t ret = 0;
 8006f46:	2300      	movs	r3, #0
 8006f48:	80bb      	strh	r3, [r7, #4]
#elif _WIZCHIP_  == W5300
   ret = getIR();
   ir = (uint8_t)(ret >> 8);
   sir = (uint8_t)ret;
#else
   ir  = getIR();
 8006f4a:	f44f 50a8 	mov.w	r0, #5376	@ 0x1500
 8006f4e:	f7fe f8f9 	bl	8005144 <WIZCHIP_READ>
 8006f52:	4603      	mov	r3, r0
 8006f54:	f023 030f 	bic.w	r3, r3, #15
 8006f58:	71fb      	strb	r3, [r7, #7]
   sir = getSIR();
 8006f5a:	f44f 50b8 	mov.w	r0, #5888	@ 0x1700
 8006f5e:	f7fe f8f1 	bl	8005144 <WIZCHIP_READ>
 8006f62:	4603      	mov	r3, r0
 8006f64:	71bb      	strb	r3, [r7, #6]
   ir &= ~(1<<4); // IK_WOL
#endif
#if _WIZCHIP_ == W5200
   ir &= ~(1 << 6);
#endif
  ret = sir;
 8006f66:	79bb      	ldrb	r3, [r7, #6]
 8006f68:	80bb      	strh	r3, [r7, #4]
  ret = (ret << 8) + ir;
 8006f6a:	88bb      	ldrh	r3, [r7, #4]
 8006f6c:	021b      	lsls	r3, r3, #8
 8006f6e:	b29a      	uxth	r2, r3
 8006f70:	79fb      	ldrb	r3, [r7, #7]
 8006f72:	b29b      	uxth	r3, r3
 8006f74:	4413      	add	r3, r2
 8006f76:	80bb      	strh	r3, [r7, #4]
  return (intr_kind)ret;
 8006f78:	88bb      	ldrh	r3, [r7, #4]
}
 8006f7a:	4618      	mov	r0, r3
 8006f7c:	3708      	adds	r7, #8
 8006f7e:	46bd      	mov	sp, r7
 8006f80:	bd80      	pop	{r7, pc}

08006f82 <wizchip_setinterruptmask>:

void wizchip_setinterruptmask(intr_kind intr)
{
 8006f82:	b580      	push	{r7, lr}
 8006f84:	b084      	sub	sp, #16
 8006f86:	af00      	add	r7, sp, #0
 8006f88:	4603      	mov	r3, r0
 8006f8a:	80fb      	strh	r3, [r7, #6]
   uint8_t imr  = (uint8_t)intr;
 8006f8c:	88fb      	ldrh	r3, [r7, #6]
 8006f8e:	73fb      	strb	r3, [r7, #15]
   uint8_t simr = (uint8_t)((uint16_t)intr >> 8);
 8006f90:	88fb      	ldrh	r3, [r7, #6]
 8006f92:	0a1b      	lsrs	r3, r3, #8
 8006f94:	b29b      	uxth	r3, r3
 8006f96:	73bb      	strb	r3, [r7, #14]
   setIMR(imr);
//A20150601 : For integrating with W5300
#elif _WIZCHIP_ == W5300
   setIMR( ((((uint16_t)imr) << 8) | (((uint16_t)simr) & 0x00FF)) );
#else
   setIMR(imr);
 8006f98:	7bfb      	ldrb	r3, [r7, #15]
 8006f9a:	4619      	mov	r1, r3
 8006f9c:	f44f 50b0 	mov.w	r0, #5632	@ 0x1600
 8006fa0:	f7fe f91c 	bl	80051dc <WIZCHIP_WRITE>
   setSIMR(simr);
 8006fa4:	7bbb      	ldrb	r3, [r7, #14]
 8006fa6:	4619      	mov	r1, r3
 8006fa8:	f44f 50c0 	mov.w	r0, #6144	@ 0x1800
 8006fac:	f7fe f916 	bl	80051dc <WIZCHIP_WRITE>
#endif   
}
 8006fb0:	bf00      	nop
 8006fb2:	3710      	adds	r7, #16
 8006fb4:	46bd      	mov	sp, r7
 8006fb6:	bd80      	pop	{r7, pc}

08006fb8 <wizchip_getinterruptmask>:

intr_kind wizchip_getinterruptmask(void)
{
 8006fb8:	b580      	push	{r7, lr}
 8006fba:	b082      	sub	sp, #8
 8006fbc:	af00      	add	r7, sp, #0
   uint8_t imr  = 0;
 8006fbe:	2300      	movs	r3, #0
 8006fc0:	71fb      	strb	r3, [r7, #7]
   uint8_t simr = 0;
 8006fc2:	2300      	movs	r3, #0
 8006fc4:	71bb      	strb	r3, [r7, #6]
   uint16_t ret = 0;
 8006fc6:	2300      	movs	r3, #0
 8006fc8:	80bb      	strh	r3, [r7, #4]
#elif _WIZCHIP_ == W5300
   ret = getIMR();
   imr = (uint8_t)(ret >> 8);
   simr = (uint8_t)ret;
#else
   imr  = getIMR();
 8006fca:	f44f 50b0 	mov.w	r0, #5632	@ 0x1600
 8006fce:	f7fe f8b9 	bl	8005144 <WIZCHIP_READ>
 8006fd2:	4603      	mov	r3, r0
 8006fd4:	71fb      	strb	r3, [r7, #7]
   simr = getSIMR();
 8006fd6:	f44f 50c0 	mov.w	r0, #6144	@ 0x1800
 8006fda:	f7fe f8b3 	bl	8005144 <WIZCHIP_READ>
 8006fde:	4603      	mov	r3, r0
 8006fe0:	71bb      	strb	r3, [r7, #6]
   imr &= ~(1<<4); // IK_WOL
#endif
#if _WIZCHIP_ == W5200
   imr &= ~(1 << 6);  // IK_DEST_UNREACH
#endif
  ret = simr;
 8006fe2:	79bb      	ldrb	r3, [r7, #6]
 8006fe4:	80bb      	strh	r3, [r7, #4]
  ret = (ret << 8) + imr;
 8006fe6:	88bb      	ldrh	r3, [r7, #4]
 8006fe8:	021b      	lsls	r3, r3, #8
 8006fea:	b29a      	uxth	r2, r3
 8006fec:	79fb      	ldrb	r3, [r7, #7]
 8006fee:	b29b      	uxth	r3, r3
 8006ff0:	4413      	add	r3, r2
 8006ff2:	80bb      	strh	r3, [r7, #4]
  return (intr_kind)ret;
 8006ff4:	88bb      	ldrh	r3, [r7, #4]
}
 8006ff6:	4618      	mov	r0, r3
 8006ff8:	3708      	adds	r7, #8
 8006ffa:	46bd      	mov	sp, r7
 8006ffc:	bd80      	pop	{r7, pc}

08006ffe <wizphy_getphylink>:

int8_t wizphy_getphylink(void)
{
 8006ffe:	b580      	push	{r7, lr}
 8007000:	b082      	sub	sp, #8
 8007002:	af00      	add	r7, sp, #0
   int8_t tmp = PHY_LINK_OFF;
 8007004:	2300      	movs	r3, #0
 8007006:	71fb      	strb	r3, [r7, #7]
	   tmp = PHY_LINK_ON;
#elif   _WIZCHIP_ == W5200
   if(getPHYSTATUS() & PHYSTATUS_LINK)
      tmp = PHY_LINK_ON;
#elif _WIZCHIP_ == W5500
   if(getPHYCFGR() & PHYCFGR_LNK_ON)
 8007008:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 800700c:	f7fe f89a 	bl	8005144 <WIZCHIP_READ>
 8007010:	4603      	mov	r3, r0
 8007012:	f003 0301 	and.w	r3, r3, #1
 8007016:	2b00      	cmp	r3, #0
 8007018:	d001      	beq.n	800701e <wizphy_getphylink+0x20>
      tmp = PHY_LINK_ON;
 800701a:	2301      	movs	r3, #1
 800701c:	71fb      	strb	r3, [r7, #7]

#else
   tmp = -1;
#endif
   return tmp;
 800701e:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 8007022:	4618      	mov	r0, r3
 8007024:	3708      	adds	r7, #8
 8007026:	46bd      	mov	sp, r7
 8007028:	bd80      	pop	{r7, pc}

0800702a <wizphy_getphypmode>:

#if _WIZCHIP_ > W5100

int8_t wizphy_getphypmode(void)
{
 800702a:	b580      	push	{r7, lr}
 800702c:	b082      	sub	sp, #8
 800702e:	af00      	add	r7, sp, #0
   int8_t tmp = 0;
 8007030:	2300      	movs	r3, #0
 8007032:	71fb      	strb	r3, [r7, #7]
      if(getPHYSTATUS() & PHYSTATUS_POWERDOWN)
         tmp = PHY_POWER_DOWN;
      else          
         tmp = PHY_POWER_NORM;
   #elif _WIZCHIP_ == 5500
      if((getPHYCFGR() & PHYCFGR_OPMDC_ALLA) == PHYCFGR_OPMDC_PDOWN)
 8007034:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 8007038:	f7fe f884 	bl	8005144 <WIZCHIP_READ>
 800703c:	4603      	mov	r3, r0
 800703e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007042:	2b30      	cmp	r3, #48	@ 0x30
 8007044:	d102      	bne.n	800704c <wizphy_getphypmode+0x22>
         tmp = PHY_POWER_DOWN;
 8007046:	2301      	movs	r3, #1
 8007048:	71fb      	strb	r3, [r7, #7]
 800704a:	e001      	b.n	8007050 <wizphy_getphypmode+0x26>
      else 
         tmp = PHY_POWER_NORM;
 800704c:	2300      	movs	r3, #0
 800704e:	71fb      	strb	r3, [r7, #7]
   #else
      tmp = -1;
   #endif
   return tmp;
 8007050:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 8007054:	4618      	mov	r0, r3
 8007056:	3708      	adds	r7, #8
 8007058:	46bd      	mov	sp, r7
 800705a:	bd80      	pop	{r7, pc}

0800705c <wizphy_reset>:
}

#endif
#if _WIZCHIP_ == W5500
void wizphy_reset(void)
{
 800705c:	b580      	push	{r7, lr}
 800705e:	b082      	sub	sp, #8
 8007060:	af00      	add	r7, sp, #0
   uint8_t tmp = getPHYCFGR();
 8007062:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 8007066:	f7fe f86d 	bl	8005144 <WIZCHIP_READ>
 800706a:	4603      	mov	r3, r0
 800706c:	71fb      	strb	r3, [r7, #7]
   tmp &= PHYCFGR_RST;
 800706e:	79fb      	ldrb	r3, [r7, #7]
 8007070:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007074:	71fb      	strb	r3, [r7, #7]
   setPHYCFGR(tmp);
 8007076:	79fb      	ldrb	r3, [r7, #7]
 8007078:	4619      	mov	r1, r3
 800707a:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 800707e:	f7fe f8ad 	bl	80051dc <WIZCHIP_WRITE>
   tmp = getPHYCFGR();
 8007082:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 8007086:	f7fe f85d 	bl	8005144 <WIZCHIP_READ>
 800708a:	4603      	mov	r3, r0
 800708c:	71fb      	strb	r3, [r7, #7]
   tmp |= ~PHYCFGR_RST;
 800708e:	79fb      	ldrb	r3, [r7, #7]
 8007090:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8007094:	71fb      	strb	r3, [r7, #7]
   setPHYCFGR(tmp);
 8007096:	79fb      	ldrb	r3, [r7, #7]
 8007098:	4619      	mov	r1, r3
 800709a:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 800709e:	f7fe f89d 	bl	80051dc <WIZCHIP_WRITE>
}
 80070a2:	bf00      	nop
 80070a4:	3708      	adds	r7, #8
 80070a6:	46bd      	mov	sp, r7
 80070a8:	bd80      	pop	{r7, pc}

080070aa <wizphy_setphyconf>:

void wizphy_setphyconf(wiz_PhyConf* phyconf)
{
 80070aa:	b580      	push	{r7, lr}
 80070ac:	b084      	sub	sp, #16
 80070ae:	af00      	add	r7, sp, #0
 80070b0:	6078      	str	r0, [r7, #4]
   uint8_t tmp = 0;
 80070b2:	2300      	movs	r3, #0
 80070b4:	73fb      	strb	r3, [r7, #15]
   if(phyconf->by == PHY_CONFBY_SW)
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	781b      	ldrb	r3, [r3, #0]
 80070ba:	2b01      	cmp	r3, #1
 80070bc:	d104      	bne.n	80070c8 <wizphy_setphyconf+0x1e>
      tmp |= PHYCFGR_OPMD;
 80070be:	7bfb      	ldrb	r3, [r7, #15]
 80070c0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80070c4:	73fb      	strb	r3, [r7, #15]
 80070c6:	e003      	b.n	80070d0 <wizphy_setphyconf+0x26>
   else
      tmp &= ~PHYCFGR_OPMD;
 80070c8:	7bfb      	ldrb	r3, [r7, #15]
 80070ca:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80070ce:	73fb      	strb	r3, [r7, #15]
   if(phyconf->mode == PHY_MODE_AUTONEGO)
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	785b      	ldrb	r3, [r3, #1]
 80070d4:	2b01      	cmp	r3, #1
 80070d6:	d104      	bne.n	80070e2 <wizphy_setphyconf+0x38>
      tmp |= PHYCFGR_OPMDC_ALLA;
 80070d8:	7bfb      	ldrb	r3, [r7, #15]
 80070da:	f043 0338 	orr.w	r3, r3, #56	@ 0x38
 80070de:	73fb      	strb	r3, [r7, #15]
 80070e0:	e019      	b.n	8007116 <wizphy_setphyconf+0x6c>
   else
   {
      if(phyconf->duplex == PHY_DUPLEX_FULL)
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	78db      	ldrb	r3, [r3, #3]
 80070e6:	2b01      	cmp	r3, #1
 80070e8:	d10d      	bne.n	8007106 <wizphy_setphyconf+0x5c>
      {
         if(phyconf->speed == PHY_SPEED_100)
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	789b      	ldrb	r3, [r3, #2]
 80070ee:	2b01      	cmp	r3, #1
 80070f0:	d104      	bne.n	80070fc <wizphy_setphyconf+0x52>
            tmp |= PHYCFGR_OPMDC_100F;
 80070f2:	7bfb      	ldrb	r3, [r7, #15]
 80070f4:	f043 0318 	orr.w	r3, r3, #24
 80070f8:	73fb      	strb	r3, [r7, #15]
 80070fa:	e00c      	b.n	8007116 <wizphy_setphyconf+0x6c>
         else
            tmp |= PHYCFGR_OPMDC_10F;
 80070fc:	7bfb      	ldrb	r3, [r7, #15]
 80070fe:	f043 0308 	orr.w	r3, r3, #8
 8007102:	73fb      	strb	r3, [r7, #15]
 8007104:	e007      	b.n	8007116 <wizphy_setphyconf+0x6c>
      }   
      else
      {
         if(phyconf->speed == PHY_SPEED_100)
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	789b      	ldrb	r3, [r3, #2]
 800710a:	2b01      	cmp	r3, #1
 800710c:	d103      	bne.n	8007116 <wizphy_setphyconf+0x6c>
            tmp |= PHYCFGR_OPMDC_100H;
 800710e:	7bfb      	ldrb	r3, [r7, #15]
 8007110:	f043 0310 	orr.w	r3, r3, #16
 8007114:	73fb      	strb	r3, [r7, #15]
         else
            tmp |= PHYCFGR_OPMDC_10H;
      }
   }
   setPHYCFGR(tmp);
 8007116:	7bfb      	ldrb	r3, [r7, #15]
 8007118:	4619      	mov	r1, r3
 800711a:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 800711e:	f7fe f85d 	bl	80051dc <WIZCHIP_WRITE>
   wizphy_reset();
 8007122:	f7ff ff9b 	bl	800705c <wizphy_reset>
}
 8007126:	bf00      	nop
 8007128:	3710      	adds	r7, #16
 800712a:	46bd      	mov	sp, r7
 800712c:	bd80      	pop	{r7, pc}
	...

08007130 <wizphy_getphyconf>:

void wizphy_getphyconf(wiz_PhyConf* phyconf)
{
 8007130:	b580      	push	{r7, lr}
 8007132:	b084      	sub	sp, #16
 8007134:	af00      	add	r7, sp, #0
 8007136:	6078      	str	r0, [r7, #4]
   uint8_t tmp = 0;
 8007138:	2300      	movs	r3, #0
 800713a:	73fb      	strb	r3, [r7, #15]
   tmp = getPHYCFGR();
 800713c:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 8007140:	f7fe f800 	bl	8005144 <WIZCHIP_READ>
 8007144:	4603      	mov	r3, r0
 8007146:	73fb      	strb	r3, [r7, #15]
   phyconf->by   = (tmp & PHYCFGR_OPMD) ? PHY_CONFBY_SW : PHY_CONFBY_HW;
 8007148:	7bfb      	ldrb	r3, [r7, #15]
 800714a:	119b      	asrs	r3, r3, #6
 800714c:	b2db      	uxtb	r3, r3
 800714e:	f003 0301 	and.w	r3, r3, #1
 8007152:	b2da      	uxtb	r2, r3
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	701a      	strb	r2, [r3, #0]
   switch(tmp & PHYCFGR_OPMDC_ALLA)
 8007158:	7bfb      	ldrb	r3, [r7, #15]
 800715a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800715e:	2b20      	cmp	r3, #32
 8007160:	d001      	beq.n	8007166 <wizphy_getphyconf+0x36>
 8007162:	2b38      	cmp	r3, #56	@ 0x38
 8007164:	d103      	bne.n	800716e <wizphy_getphyconf+0x3e>
   {
      case PHYCFGR_OPMDC_ALLA:
      case PHYCFGR_OPMDC_100FA: 
         phyconf->mode = PHY_MODE_AUTONEGO;
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	2201      	movs	r2, #1
 800716a:	705a      	strb	r2, [r3, #1]
         break;
 800716c:	e003      	b.n	8007176 <wizphy_getphyconf+0x46>
      default:
         phyconf->mode = PHY_MODE_MANUAL;
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	2200      	movs	r2, #0
 8007172:	705a      	strb	r2, [r3, #1]
         break;
 8007174:	bf00      	nop
   }
   switch(tmp & PHYCFGR_OPMDC_ALLA)
 8007176:	7bfb      	ldrb	r3, [r7, #15]
 8007178:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800717c:	3b10      	subs	r3, #16
 800717e:	2b10      	cmp	r3, #16
 8007180:	bf8c      	ite	hi
 8007182:	2201      	movhi	r2, #1
 8007184:	2200      	movls	r2, #0
 8007186:	b2d2      	uxtb	r2, r2
 8007188:	2a00      	cmp	r2, #0
 800718a:	d10f      	bne.n	80071ac <wizphy_getphyconf+0x7c>
 800718c:	4a1b      	ldr	r2, [pc, #108]	@ (80071fc <wizphy_getphyconf+0xcc>)
 800718e:	fa22 f303 	lsr.w	r3, r2, r3
 8007192:	f003 0301 	and.w	r3, r3, #1
 8007196:	2b00      	cmp	r3, #0
 8007198:	bf14      	ite	ne
 800719a:	2301      	movne	r3, #1
 800719c:	2300      	moveq	r3, #0
 800719e:	b2db      	uxtb	r3, r3
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d003      	beq.n	80071ac <wizphy_getphyconf+0x7c>
   {
      case PHYCFGR_OPMDC_100FA:
      case PHYCFGR_OPMDC_100F:
      case PHYCFGR_OPMDC_100H:
         phyconf->speed = PHY_SPEED_100;
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	2201      	movs	r2, #1
 80071a8:	709a      	strb	r2, [r3, #2]
         break;
 80071aa:	e003      	b.n	80071b4 <wizphy_getphyconf+0x84>
      default:
         phyconf->speed = PHY_SPEED_10;
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	2200      	movs	r2, #0
 80071b0:	709a      	strb	r2, [r3, #2]
         break;
 80071b2:	bf00      	nop
   }
   switch(tmp & PHYCFGR_OPMDC_ALLA)
 80071b4:	7bfb      	ldrb	r3, [r7, #15]
 80071b6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80071ba:	3b08      	subs	r3, #8
 80071bc:	2b18      	cmp	r3, #24
 80071be:	bf8c      	ite	hi
 80071c0:	2201      	movhi	r2, #1
 80071c2:	2200      	movls	r2, #0
 80071c4:	b2d2      	uxtb	r2, r2
 80071c6:	2a00      	cmp	r2, #0
 80071c8:	d10f      	bne.n	80071ea <wizphy_getphyconf+0xba>
 80071ca:	4a0d      	ldr	r2, [pc, #52]	@ (8007200 <wizphy_getphyconf+0xd0>)
 80071cc:	fa22 f303 	lsr.w	r3, r2, r3
 80071d0:	f003 0301 	and.w	r3, r3, #1
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	bf14      	ite	ne
 80071d8:	2301      	movne	r3, #1
 80071da:	2300      	moveq	r3, #0
 80071dc:	b2db      	uxtb	r3, r3
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d003      	beq.n	80071ea <wizphy_getphyconf+0xba>
   {
      case PHYCFGR_OPMDC_100FA:
      case PHYCFGR_OPMDC_100F:
      case PHYCFGR_OPMDC_10F:
         phyconf->duplex = PHY_DUPLEX_FULL;
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	2201      	movs	r2, #1
 80071e6:	70da      	strb	r2, [r3, #3]
         break;
 80071e8:	e003      	b.n	80071f2 <wizphy_getphyconf+0xc2>
      default:
         phyconf->duplex = PHY_DUPLEX_HALF;
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	2200      	movs	r2, #0
 80071ee:	70da      	strb	r2, [r3, #3]
         break;
 80071f0:	bf00      	nop
   }
}
 80071f2:	bf00      	nop
 80071f4:	3710      	adds	r7, #16
 80071f6:	46bd      	mov	sp, r7
 80071f8:	bd80      	pop	{r7, pc}
 80071fa:	bf00      	nop
 80071fc:	00010101 	.word	0x00010101
 8007200:	01010001 	.word	0x01010001

08007204 <wizphy_setphypmode>:
   phyconf->duplex = (tmp & PHYCFGR_DPX_FULL) ? PHY_DUPLEX_FULL : PHY_DUPLEX_HALF;
   phyconf->speed  = (tmp & PHYCFGR_SPD_100) ? PHY_SPEED_100 : PHY_SPEED_10;
}

int8_t wizphy_setphypmode(uint8_t pmode)
{
 8007204:	b580      	push	{r7, lr}
 8007206:	b084      	sub	sp, #16
 8007208:	af00      	add	r7, sp, #0
 800720a:	4603      	mov	r3, r0
 800720c:	71fb      	strb	r3, [r7, #7]
   uint8_t tmp = 0;
 800720e:	2300      	movs	r3, #0
 8007210:	73fb      	strb	r3, [r7, #15]
   tmp = getPHYCFGR();
 8007212:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 8007216:	f7fd ff95 	bl	8005144 <WIZCHIP_READ>
 800721a:	4603      	mov	r3, r0
 800721c:	73fb      	strb	r3, [r7, #15]
   if((tmp & PHYCFGR_OPMD)== 0) return -1;
 800721e:	7bfb      	ldrb	r3, [r7, #15]
 8007220:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007224:	2b00      	cmp	r3, #0
 8007226:	d102      	bne.n	800722e <wizphy_setphypmode+0x2a>
 8007228:	f04f 33ff 	mov.w	r3, #4294967295
 800722c:	e030      	b.n	8007290 <wizphy_setphypmode+0x8c>
   tmp &= ~PHYCFGR_OPMDC_ALLA;         
 800722e:	7bfb      	ldrb	r3, [r7, #15]
 8007230:	f023 0338 	bic.w	r3, r3, #56	@ 0x38
 8007234:	73fb      	strb	r3, [r7, #15]
   if( pmode == PHY_POWER_DOWN)
 8007236:	79fb      	ldrb	r3, [r7, #7]
 8007238:	2b01      	cmp	r3, #1
 800723a:	d104      	bne.n	8007246 <wizphy_setphypmode+0x42>
      tmp |= PHYCFGR_OPMDC_PDOWN;
 800723c:	7bfb      	ldrb	r3, [r7, #15]
 800723e:	f043 0330 	orr.w	r3, r3, #48	@ 0x30
 8007242:	73fb      	strb	r3, [r7, #15]
 8007244:	e003      	b.n	800724e <wizphy_setphypmode+0x4a>
   else
      tmp |= PHYCFGR_OPMDC_ALLA;
 8007246:	7bfb      	ldrb	r3, [r7, #15]
 8007248:	f043 0338 	orr.w	r3, r3, #56	@ 0x38
 800724c:	73fb      	strb	r3, [r7, #15]
   setPHYCFGR(tmp);
 800724e:	7bfb      	ldrb	r3, [r7, #15]
 8007250:	4619      	mov	r1, r3
 8007252:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 8007256:	f7fd ffc1 	bl	80051dc <WIZCHIP_WRITE>
   wizphy_reset();
 800725a:	f7ff feff 	bl	800705c <wizphy_reset>
   tmp = getPHYCFGR();
 800725e:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 8007262:	f7fd ff6f 	bl	8005144 <WIZCHIP_READ>
 8007266:	4603      	mov	r3, r0
 8007268:	73fb      	strb	r3, [r7, #15]
   if( pmode == PHY_POWER_DOWN)
 800726a:	79fb      	ldrb	r3, [r7, #7]
 800726c:	2b01      	cmp	r3, #1
 800726e:	d106      	bne.n	800727e <wizphy_setphypmode+0x7a>
   {
      if(tmp & PHYCFGR_OPMDC_PDOWN) return 0;
 8007270:	7bfb      	ldrb	r3, [r7, #15]
 8007272:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8007276:	2b00      	cmp	r3, #0
 8007278:	d008      	beq.n	800728c <wizphy_setphypmode+0x88>
 800727a:	2300      	movs	r3, #0
 800727c:	e008      	b.n	8007290 <wizphy_setphypmode+0x8c>
   }
   else
   {
      if(tmp & PHYCFGR_OPMDC_ALLA) return 0;
 800727e:	7bfb      	ldrb	r3, [r7, #15]
 8007280:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007284:	2b00      	cmp	r3, #0
 8007286:	d001      	beq.n	800728c <wizphy_setphypmode+0x88>
 8007288:	2300      	movs	r3, #0
 800728a:	e001      	b.n	8007290 <wizphy_setphypmode+0x8c>
   }
   return -1;
 800728c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8007290:	4618      	mov	r0, r3
 8007292:	3710      	adds	r7, #16
 8007294:	46bd      	mov	sp, r7
 8007296:	bd80      	pop	{r7, pc}

08007298 <wizchip_setnetinfo>:
#endif


void wizchip_setnetinfo(wiz_NetInfo* pnetinfo)
{
 8007298:	b580      	push	{r7, lr}
 800729a:	b082      	sub	sp, #8
 800729c:	af00      	add	r7, sp, #0
 800729e:	6078      	str	r0, [r7, #4]
   setSHAR(pnetinfo->mac);
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	2206      	movs	r2, #6
 80072a4:	4619      	mov	r1, r3
 80072a6:	f44f 6010 	mov.w	r0, #2304	@ 0x900
 80072aa:	f7fe f845 	bl	8005338 <WIZCHIP_WRITE_BUF>
   setGAR(pnetinfo->gw);
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	330e      	adds	r3, #14
 80072b2:	2204      	movs	r2, #4
 80072b4:	4619      	mov	r1, r3
 80072b6:	f44f 7080 	mov.w	r0, #256	@ 0x100
 80072ba:	f7fe f83d 	bl	8005338 <WIZCHIP_WRITE_BUF>
   setSUBR(pnetinfo->sn);
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	330a      	adds	r3, #10
 80072c2:	2204      	movs	r2, #4
 80072c4:	4619      	mov	r1, r3
 80072c6:	f44f 60a0 	mov.w	r0, #1280	@ 0x500
 80072ca:	f7fe f835 	bl	8005338 <WIZCHIP_WRITE_BUF>
   setSIPR(pnetinfo->ip);
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	3306      	adds	r3, #6
 80072d2:	2204      	movs	r2, #4
 80072d4:	4619      	mov	r1, r3
 80072d6:	f44f 6070 	mov.w	r0, #3840	@ 0xf00
 80072da:	f7fe f82d 	bl	8005338 <WIZCHIP_WRITE_BUF>
   _DNS_[0] = pnetinfo->dns[0];
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	7c9a      	ldrb	r2, [r3, #18]
 80072e2:	4b0b      	ldr	r3, [pc, #44]	@ (8007310 <wizchip_setnetinfo+0x78>)
 80072e4:	701a      	strb	r2, [r3, #0]
   _DNS_[1] = pnetinfo->dns[1];
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	7cda      	ldrb	r2, [r3, #19]
 80072ea:	4b09      	ldr	r3, [pc, #36]	@ (8007310 <wizchip_setnetinfo+0x78>)
 80072ec:	705a      	strb	r2, [r3, #1]
   _DNS_[2] = pnetinfo->dns[2];
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	7d1a      	ldrb	r2, [r3, #20]
 80072f2:	4b07      	ldr	r3, [pc, #28]	@ (8007310 <wizchip_setnetinfo+0x78>)
 80072f4:	709a      	strb	r2, [r3, #2]
   _DNS_[3] = pnetinfo->dns[3];
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	7d5a      	ldrb	r2, [r3, #21]
 80072fa:	4b05      	ldr	r3, [pc, #20]	@ (8007310 <wizchip_setnetinfo+0x78>)
 80072fc:	70da      	strb	r2, [r3, #3]
   _DHCP_   = pnetinfo->dhcp;
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	7d9a      	ldrb	r2, [r3, #22]
 8007302:	4b04      	ldr	r3, [pc, #16]	@ (8007314 <wizchip_setnetinfo+0x7c>)
 8007304:	701a      	strb	r2, [r3, #0]
}
 8007306:	bf00      	nop
 8007308:	3708      	adds	r7, #8
 800730a:	46bd      	mov	sp, r7
 800730c:	bd80      	pop	{r7, pc}
 800730e:	bf00      	nop
 8007310:	20000e30 	.word	0x20000e30
 8007314:	20000e34 	.word	0x20000e34

08007318 <wizchip_getnetinfo>:

void wizchip_getnetinfo(wiz_NetInfo* pnetinfo)
{
 8007318:	b580      	push	{r7, lr}
 800731a:	b082      	sub	sp, #8
 800731c:	af00      	add	r7, sp, #0
 800731e:	6078      	str	r0, [r7, #4]
   getSHAR(pnetinfo->mac);
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	2206      	movs	r2, #6
 8007324:	4619      	mov	r1, r3
 8007326:	f44f 6010 	mov.w	r0, #2304	@ 0x900
 800732a:	f7fd ffa5 	bl	8005278 <WIZCHIP_READ_BUF>
   getGAR(pnetinfo->gw);
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	330e      	adds	r3, #14
 8007332:	2204      	movs	r2, #4
 8007334:	4619      	mov	r1, r3
 8007336:	f44f 7080 	mov.w	r0, #256	@ 0x100
 800733a:	f7fd ff9d 	bl	8005278 <WIZCHIP_READ_BUF>
   getSUBR(pnetinfo->sn);
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	330a      	adds	r3, #10
 8007342:	2204      	movs	r2, #4
 8007344:	4619      	mov	r1, r3
 8007346:	f44f 60a0 	mov.w	r0, #1280	@ 0x500
 800734a:	f7fd ff95 	bl	8005278 <WIZCHIP_READ_BUF>
   getSIPR(pnetinfo->ip);
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	3306      	adds	r3, #6
 8007352:	2204      	movs	r2, #4
 8007354:	4619      	mov	r1, r3
 8007356:	f44f 6070 	mov.w	r0, #3840	@ 0xf00
 800735a:	f7fd ff8d 	bl	8005278 <WIZCHIP_READ_BUF>
   pnetinfo->dns[0]= _DNS_[0];
 800735e:	4b0c      	ldr	r3, [pc, #48]	@ (8007390 <wizchip_getnetinfo+0x78>)
 8007360:	781a      	ldrb	r2, [r3, #0]
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	749a      	strb	r2, [r3, #18]
   pnetinfo->dns[1]= _DNS_[1];
 8007366:	4b0a      	ldr	r3, [pc, #40]	@ (8007390 <wizchip_getnetinfo+0x78>)
 8007368:	785a      	ldrb	r2, [r3, #1]
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	74da      	strb	r2, [r3, #19]
   pnetinfo->dns[2]= _DNS_[2];
 800736e:	4b08      	ldr	r3, [pc, #32]	@ (8007390 <wizchip_getnetinfo+0x78>)
 8007370:	789a      	ldrb	r2, [r3, #2]
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	751a      	strb	r2, [r3, #20]
   pnetinfo->dns[3]= _DNS_[3];
 8007376:	4b06      	ldr	r3, [pc, #24]	@ (8007390 <wizchip_getnetinfo+0x78>)
 8007378:	78da      	ldrb	r2, [r3, #3]
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	755a      	strb	r2, [r3, #21]
   pnetinfo->dhcp  = _DHCP_;
 800737e:	4b05      	ldr	r3, [pc, #20]	@ (8007394 <wizchip_getnetinfo+0x7c>)
 8007380:	781a      	ldrb	r2, [r3, #0]
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	759a      	strb	r2, [r3, #22]
}
 8007386:	bf00      	nop
 8007388:	3708      	adds	r7, #8
 800738a:	46bd      	mov	sp, r7
 800738c:	bd80      	pop	{r7, pc}
 800738e:	bf00      	nop
 8007390:	20000e30 	.word	0x20000e30
 8007394:	20000e34 	.word	0x20000e34

08007398 <wizchip_setnetmode>:

int8_t wizchip_setnetmode(netmode_type netmode)
{
 8007398:	b580      	push	{r7, lr}
 800739a:	b084      	sub	sp, #16
 800739c:	af00      	add	r7, sp, #0
 800739e:	4603      	mov	r3, r0
 80073a0:	71fb      	strb	r3, [r7, #7]
   uint8_t tmp = 0;
 80073a2:	2300      	movs	r3, #0
 80073a4:	73fb      	strb	r3, [r7, #15]
#if _WIZCHIP_ != W5500
   if(netmode & ~(NM_WAKEONLAN | NM_PPPOE | NM_PINGBLOCK)) return -1;
#else
   if(netmode & ~(NM_WAKEONLAN | NM_PPPOE | NM_PINGBLOCK | NM_FORCEARP)) return -1;
 80073a6:	79fb      	ldrb	r3, [r7, #7]
 80073a8:	f023 033a 	bic.w	r3, r3, #58	@ 0x3a
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d002      	beq.n	80073b6 <wizchip_setnetmode+0x1e>
 80073b0:	f04f 33ff 	mov.w	r3, #4294967295
 80073b4:	e00e      	b.n	80073d4 <wizchip_setnetmode+0x3c>
#endif      
   tmp = getMR();
 80073b6:	2000      	movs	r0, #0
 80073b8:	f7fd fec4 	bl	8005144 <WIZCHIP_READ>
 80073bc:	4603      	mov	r3, r0
 80073be:	73fb      	strb	r3, [r7, #15]
   tmp |= (uint8_t)netmode;
 80073c0:	7bfa      	ldrb	r2, [r7, #15]
 80073c2:	79fb      	ldrb	r3, [r7, #7]
 80073c4:	4313      	orrs	r3, r2
 80073c6:	73fb      	strb	r3, [r7, #15]
   setMR(tmp);
 80073c8:	7bfb      	ldrb	r3, [r7, #15]
 80073ca:	4619      	mov	r1, r3
 80073cc:	2000      	movs	r0, #0
 80073ce:	f7fd ff05 	bl	80051dc <WIZCHIP_WRITE>
   return 0;
 80073d2:	2300      	movs	r3, #0
}
 80073d4:	4618      	mov	r0, r3
 80073d6:	3710      	adds	r7, #16
 80073d8:	46bd      	mov	sp, r7
 80073da:	bd80      	pop	{r7, pc}

080073dc <wizchip_getnetmode>:

netmode_type wizchip_getnetmode(void)
{
 80073dc:	b580      	push	{r7, lr}
 80073de:	af00      	add	r7, sp, #0
   return (netmode_type) getMR();
 80073e0:	2000      	movs	r0, #0
 80073e2:	f7fd feaf 	bl	8005144 <WIZCHIP_READ>
 80073e6:	4603      	mov	r3, r0
}
 80073e8:	4618      	mov	r0, r3
 80073ea:	bd80      	pop	{r7, pc}

080073ec <wizchip_settimeout>:

void wizchip_settimeout(wiz_NetTimeout* nettime)
{
 80073ec:	b580      	push	{r7, lr}
 80073ee:	b082      	sub	sp, #8
 80073f0:	af00      	add	r7, sp, #0
 80073f2:	6078      	str	r0, [r7, #4]
   setRCR(nettime->retry_cnt);
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	781b      	ldrb	r3, [r3, #0]
 80073f8:	4619      	mov	r1, r3
 80073fa:	f44f 50d8 	mov.w	r0, #6912	@ 0x1b00
 80073fe:	f7fd feed 	bl	80051dc <WIZCHIP_WRITE>
   setRTR(nettime->time_100us);
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	885b      	ldrh	r3, [r3, #2]
 8007406:	0a1b      	lsrs	r3, r3, #8
 8007408:	b29b      	uxth	r3, r3
 800740a:	b2db      	uxtb	r3, r3
 800740c:	4619      	mov	r1, r3
 800740e:	f44f 50c8 	mov.w	r0, #6400	@ 0x1900
 8007412:	f7fd fee3 	bl	80051dc <WIZCHIP_WRITE>
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	885b      	ldrh	r3, [r3, #2]
 800741a:	b2db      	uxtb	r3, r3
 800741c:	4619      	mov	r1, r3
 800741e:	f44f 50d0 	mov.w	r0, #6656	@ 0x1a00
 8007422:	f7fd fedb 	bl	80051dc <WIZCHIP_WRITE>
}
 8007426:	bf00      	nop
 8007428:	3708      	adds	r7, #8
 800742a:	46bd      	mov	sp, r7
 800742c:	bd80      	pop	{r7, pc}

0800742e <wizchip_gettimeout>:

void wizchip_gettimeout(wiz_NetTimeout* nettime)
{
 800742e:	b590      	push	{r4, r7, lr}
 8007430:	b083      	sub	sp, #12
 8007432:	af00      	add	r7, sp, #0
 8007434:	6078      	str	r0, [r7, #4]
   nettime->retry_cnt = getRCR();
 8007436:	f44f 50d8 	mov.w	r0, #6912	@ 0x1b00
 800743a:	f7fd fe83 	bl	8005144 <WIZCHIP_READ>
 800743e:	4603      	mov	r3, r0
 8007440:	461a      	mov	r2, r3
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	701a      	strb	r2, [r3, #0]
   nettime->time_100us = getRTR();
 8007446:	f44f 50c8 	mov.w	r0, #6400	@ 0x1900
 800744a:	f7fd fe7b 	bl	8005144 <WIZCHIP_READ>
 800744e:	4603      	mov	r3, r0
 8007450:	021b      	lsls	r3, r3, #8
 8007452:	b29c      	uxth	r4, r3
 8007454:	f44f 50d0 	mov.w	r0, #6656	@ 0x1a00
 8007458:	f7fd fe74 	bl	8005144 <WIZCHIP_READ>
 800745c:	4603      	mov	r3, r0
 800745e:	4423      	add	r3, r4
 8007460:	b29a      	uxth	r2, r3
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	805a      	strh	r2, [r3, #2]
}
 8007466:	bf00      	nop
 8007468:	370c      	adds	r7, #12
 800746a:	46bd      	mov	sp, r7
 800746c:	bd90      	pop	{r4, r7, pc}
	...

08007470 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8007470:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80074a8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 8007474:	f7fa f820 	bl	80014b8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8007478:	480c      	ldr	r0, [pc, #48]	@ (80074ac <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800747a:	490d      	ldr	r1, [pc, #52]	@ (80074b0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800747c:	4a0d      	ldr	r2, [pc, #52]	@ (80074b4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800747e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8007480:	e002      	b.n	8007488 <LoopCopyDataInit>

08007482 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8007482:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8007484:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8007486:	3304      	adds	r3, #4

08007488 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8007488:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800748a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800748c:	d3f9      	bcc.n	8007482 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800748e:	4a0a      	ldr	r2, [pc, #40]	@ (80074b8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8007490:	4c0a      	ldr	r4, [pc, #40]	@ (80074bc <LoopFillZerobss+0x22>)
  movs r3, #0
 8007492:	2300      	movs	r3, #0
  b LoopFillZerobss
 8007494:	e001      	b.n	800749a <LoopFillZerobss>

08007496 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8007496:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8007498:	3204      	adds	r2, #4

0800749a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800749a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800749c:	d3fb      	bcc.n	8007496 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 800749e:	f005 f8c9 	bl	800c634 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80074a2:	f7f9 f87d 	bl	80005a0 <main>
  bx  lr    
 80074a6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80074a8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80074ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80074b0:	20000138 	.word	0x20000138
  ldr r2, =_sidata
 80074b4:	0800da5c 	.word	0x0800da5c
  ldr r2, =_sbss
 80074b8:	20000138 	.word	0x20000138
  ldr r4, =_ebss
 80074bc:	20005970 	.word	0x20005970

080074c0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80074c0:	e7fe      	b.n	80074c0 <ADC_IRQHandler>
	...

080074c4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80074c4:	b580      	push	{r7, lr}
 80074c6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80074c8:	4b0e      	ldr	r3, [pc, #56]	@ (8007504 <HAL_Init+0x40>)
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	4a0d      	ldr	r2, [pc, #52]	@ (8007504 <HAL_Init+0x40>)
 80074ce:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80074d2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80074d4:	4b0b      	ldr	r3, [pc, #44]	@ (8007504 <HAL_Init+0x40>)
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	4a0a      	ldr	r2, [pc, #40]	@ (8007504 <HAL_Init+0x40>)
 80074da:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80074de:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80074e0:	4b08      	ldr	r3, [pc, #32]	@ (8007504 <HAL_Init+0x40>)
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	4a07      	ldr	r2, [pc, #28]	@ (8007504 <HAL_Init+0x40>)
 80074e6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80074ea:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80074ec:	2003      	movs	r0, #3
 80074ee:	f000 f8fc 	bl	80076ea <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80074f2:	200f      	movs	r0, #15
 80074f4:	f7f9 fea4 	bl	8001240 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80074f8:	f7f9 fde6 	bl	80010c8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80074fc:	2300      	movs	r3, #0
}
 80074fe:	4618      	mov	r0, r3
 8007500:	bd80      	pop	{r7, pc}
 8007502:	bf00      	nop
 8007504:	40023c00 	.word	0x40023c00

08007508 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8007508:	b480      	push	{r7}
 800750a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800750c:	4b06      	ldr	r3, [pc, #24]	@ (8007528 <HAL_IncTick+0x20>)
 800750e:	781b      	ldrb	r3, [r3, #0]
 8007510:	461a      	mov	r2, r3
 8007512:	4b06      	ldr	r3, [pc, #24]	@ (800752c <HAL_IncTick+0x24>)
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	4413      	add	r3, r2
 8007518:	4a04      	ldr	r2, [pc, #16]	@ (800752c <HAL_IncTick+0x24>)
 800751a:	6013      	str	r3, [r2, #0]
}
 800751c:	bf00      	nop
 800751e:	46bd      	mov	sp, r7
 8007520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007524:	4770      	bx	lr
 8007526:	bf00      	nop
 8007528:	200000d4 	.word	0x200000d4
 800752c:	20000e38 	.word	0x20000e38

08007530 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8007530:	b480      	push	{r7}
 8007532:	af00      	add	r7, sp, #0
  return uwTick;
 8007534:	4b03      	ldr	r3, [pc, #12]	@ (8007544 <HAL_GetTick+0x14>)
 8007536:	681b      	ldr	r3, [r3, #0]
}
 8007538:	4618      	mov	r0, r3
 800753a:	46bd      	mov	sp, r7
 800753c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007540:	4770      	bx	lr
 8007542:	bf00      	nop
 8007544:	20000e38 	.word	0x20000e38

08007548 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8007548:	b580      	push	{r7, lr}
 800754a:	b084      	sub	sp, #16
 800754c:	af00      	add	r7, sp, #0
 800754e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8007550:	f7ff ffee 	bl	8007530 <HAL_GetTick>
 8007554:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007560:	d005      	beq.n	800756e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8007562:	4b0a      	ldr	r3, [pc, #40]	@ (800758c <HAL_Delay+0x44>)
 8007564:	781b      	ldrb	r3, [r3, #0]
 8007566:	461a      	mov	r2, r3
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	4413      	add	r3, r2
 800756c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800756e:	bf00      	nop
 8007570:	f7ff ffde 	bl	8007530 <HAL_GetTick>
 8007574:	4602      	mov	r2, r0
 8007576:	68bb      	ldr	r3, [r7, #8]
 8007578:	1ad3      	subs	r3, r2, r3
 800757a:	68fa      	ldr	r2, [r7, #12]
 800757c:	429a      	cmp	r2, r3
 800757e:	d8f7      	bhi.n	8007570 <HAL_Delay+0x28>
  {
  }
}
 8007580:	bf00      	nop
 8007582:	bf00      	nop
 8007584:	3710      	adds	r7, #16
 8007586:	46bd      	mov	sp, r7
 8007588:	bd80      	pop	{r7, pc}
 800758a:	bf00      	nop
 800758c:	200000d4 	.word	0x200000d4

08007590 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007590:	b480      	push	{r7}
 8007592:	b085      	sub	sp, #20
 8007594:	af00      	add	r7, sp, #0
 8007596:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	f003 0307 	and.w	r3, r3, #7
 800759e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80075a0:	4b0c      	ldr	r3, [pc, #48]	@ (80075d4 <__NVIC_SetPriorityGrouping+0x44>)
 80075a2:	68db      	ldr	r3, [r3, #12]
 80075a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80075a6:	68ba      	ldr	r2, [r7, #8]
 80075a8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80075ac:	4013      	ands	r3, r2
 80075ae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80075b4:	68bb      	ldr	r3, [r7, #8]
 80075b6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80075b8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80075bc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80075c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80075c2:	4a04      	ldr	r2, [pc, #16]	@ (80075d4 <__NVIC_SetPriorityGrouping+0x44>)
 80075c4:	68bb      	ldr	r3, [r7, #8]
 80075c6:	60d3      	str	r3, [r2, #12]
}
 80075c8:	bf00      	nop
 80075ca:	3714      	adds	r7, #20
 80075cc:	46bd      	mov	sp, r7
 80075ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075d2:	4770      	bx	lr
 80075d4:	e000ed00 	.word	0xe000ed00

080075d8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80075d8:	b480      	push	{r7}
 80075da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80075dc:	4b04      	ldr	r3, [pc, #16]	@ (80075f0 <__NVIC_GetPriorityGrouping+0x18>)
 80075de:	68db      	ldr	r3, [r3, #12]
 80075e0:	0a1b      	lsrs	r3, r3, #8
 80075e2:	f003 0307 	and.w	r3, r3, #7
}
 80075e6:	4618      	mov	r0, r3
 80075e8:	46bd      	mov	sp, r7
 80075ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ee:	4770      	bx	lr
 80075f0:	e000ed00 	.word	0xe000ed00

080075f4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80075f4:	b480      	push	{r7}
 80075f6:	b083      	sub	sp, #12
 80075f8:	af00      	add	r7, sp, #0
 80075fa:	4603      	mov	r3, r0
 80075fc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80075fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007602:	2b00      	cmp	r3, #0
 8007604:	db0b      	blt.n	800761e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007606:	79fb      	ldrb	r3, [r7, #7]
 8007608:	f003 021f 	and.w	r2, r3, #31
 800760c:	4907      	ldr	r1, [pc, #28]	@ (800762c <__NVIC_EnableIRQ+0x38>)
 800760e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007612:	095b      	lsrs	r3, r3, #5
 8007614:	2001      	movs	r0, #1
 8007616:	fa00 f202 	lsl.w	r2, r0, r2
 800761a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800761e:	bf00      	nop
 8007620:	370c      	adds	r7, #12
 8007622:	46bd      	mov	sp, r7
 8007624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007628:	4770      	bx	lr
 800762a:	bf00      	nop
 800762c:	e000e100 	.word	0xe000e100

08007630 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8007630:	b480      	push	{r7}
 8007632:	b083      	sub	sp, #12
 8007634:	af00      	add	r7, sp, #0
 8007636:	4603      	mov	r3, r0
 8007638:	6039      	str	r1, [r7, #0]
 800763a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800763c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007640:	2b00      	cmp	r3, #0
 8007642:	db0a      	blt.n	800765a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007644:	683b      	ldr	r3, [r7, #0]
 8007646:	b2da      	uxtb	r2, r3
 8007648:	490c      	ldr	r1, [pc, #48]	@ (800767c <__NVIC_SetPriority+0x4c>)
 800764a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800764e:	0112      	lsls	r2, r2, #4
 8007650:	b2d2      	uxtb	r2, r2
 8007652:	440b      	add	r3, r1
 8007654:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8007658:	e00a      	b.n	8007670 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800765a:	683b      	ldr	r3, [r7, #0]
 800765c:	b2da      	uxtb	r2, r3
 800765e:	4908      	ldr	r1, [pc, #32]	@ (8007680 <__NVIC_SetPriority+0x50>)
 8007660:	79fb      	ldrb	r3, [r7, #7]
 8007662:	f003 030f 	and.w	r3, r3, #15
 8007666:	3b04      	subs	r3, #4
 8007668:	0112      	lsls	r2, r2, #4
 800766a:	b2d2      	uxtb	r2, r2
 800766c:	440b      	add	r3, r1
 800766e:	761a      	strb	r2, [r3, #24]
}
 8007670:	bf00      	nop
 8007672:	370c      	adds	r7, #12
 8007674:	46bd      	mov	sp, r7
 8007676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800767a:	4770      	bx	lr
 800767c:	e000e100 	.word	0xe000e100
 8007680:	e000ed00 	.word	0xe000ed00

08007684 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007684:	b480      	push	{r7}
 8007686:	b089      	sub	sp, #36	@ 0x24
 8007688:	af00      	add	r7, sp, #0
 800768a:	60f8      	str	r0, [r7, #12]
 800768c:	60b9      	str	r1, [r7, #8]
 800768e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	f003 0307 	and.w	r3, r3, #7
 8007696:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007698:	69fb      	ldr	r3, [r7, #28]
 800769a:	f1c3 0307 	rsb	r3, r3, #7
 800769e:	2b04      	cmp	r3, #4
 80076a0:	bf28      	it	cs
 80076a2:	2304      	movcs	r3, #4
 80076a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80076a6:	69fb      	ldr	r3, [r7, #28]
 80076a8:	3304      	adds	r3, #4
 80076aa:	2b06      	cmp	r3, #6
 80076ac:	d902      	bls.n	80076b4 <NVIC_EncodePriority+0x30>
 80076ae:	69fb      	ldr	r3, [r7, #28]
 80076b0:	3b03      	subs	r3, #3
 80076b2:	e000      	b.n	80076b6 <NVIC_EncodePriority+0x32>
 80076b4:	2300      	movs	r3, #0
 80076b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80076b8:	f04f 32ff 	mov.w	r2, #4294967295
 80076bc:	69bb      	ldr	r3, [r7, #24]
 80076be:	fa02 f303 	lsl.w	r3, r2, r3
 80076c2:	43da      	mvns	r2, r3
 80076c4:	68bb      	ldr	r3, [r7, #8]
 80076c6:	401a      	ands	r2, r3
 80076c8:	697b      	ldr	r3, [r7, #20]
 80076ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80076cc:	f04f 31ff 	mov.w	r1, #4294967295
 80076d0:	697b      	ldr	r3, [r7, #20]
 80076d2:	fa01 f303 	lsl.w	r3, r1, r3
 80076d6:	43d9      	mvns	r1, r3
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80076dc:	4313      	orrs	r3, r2
         );
}
 80076de:	4618      	mov	r0, r3
 80076e0:	3724      	adds	r7, #36	@ 0x24
 80076e2:	46bd      	mov	sp, r7
 80076e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076e8:	4770      	bx	lr

080076ea <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80076ea:	b580      	push	{r7, lr}
 80076ec:	b082      	sub	sp, #8
 80076ee:	af00      	add	r7, sp, #0
 80076f0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80076f2:	6878      	ldr	r0, [r7, #4]
 80076f4:	f7ff ff4c 	bl	8007590 <__NVIC_SetPriorityGrouping>
}
 80076f8:	bf00      	nop
 80076fa:	3708      	adds	r7, #8
 80076fc:	46bd      	mov	sp, r7
 80076fe:	bd80      	pop	{r7, pc}

08007700 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8007700:	b580      	push	{r7, lr}
 8007702:	b086      	sub	sp, #24
 8007704:	af00      	add	r7, sp, #0
 8007706:	4603      	mov	r3, r0
 8007708:	60b9      	str	r1, [r7, #8]
 800770a:	607a      	str	r2, [r7, #4]
 800770c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800770e:	2300      	movs	r3, #0
 8007710:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8007712:	f7ff ff61 	bl	80075d8 <__NVIC_GetPriorityGrouping>
 8007716:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8007718:	687a      	ldr	r2, [r7, #4]
 800771a:	68b9      	ldr	r1, [r7, #8]
 800771c:	6978      	ldr	r0, [r7, #20]
 800771e:	f7ff ffb1 	bl	8007684 <NVIC_EncodePriority>
 8007722:	4602      	mov	r2, r0
 8007724:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007728:	4611      	mov	r1, r2
 800772a:	4618      	mov	r0, r3
 800772c:	f7ff ff80 	bl	8007630 <__NVIC_SetPriority>
}
 8007730:	bf00      	nop
 8007732:	3718      	adds	r7, #24
 8007734:	46bd      	mov	sp, r7
 8007736:	bd80      	pop	{r7, pc}

08007738 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007738:	b580      	push	{r7, lr}
 800773a:	b082      	sub	sp, #8
 800773c:	af00      	add	r7, sp, #0
 800773e:	4603      	mov	r3, r0
 8007740:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007742:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007746:	4618      	mov	r0, r3
 8007748:	f7ff ff54 	bl	80075f4 <__NVIC_EnableIRQ>
}
 800774c:	bf00      	nop
 800774e:	3708      	adds	r7, #8
 8007750:	46bd      	mov	sp, r7
 8007752:	bd80      	pop	{r7, pc}

08007754 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007754:	b480      	push	{r7}
 8007756:	b089      	sub	sp, #36	@ 0x24
 8007758:	af00      	add	r7, sp, #0
 800775a:	6078      	str	r0, [r7, #4]
 800775c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800775e:	2300      	movs	r3, #0
 8007760:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8007762:	2300      	movs	r3, #0
 8007764:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8007766:	2300      	movs	r3, #0
 8007768:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800776a:	2300      	movs	r3, #0
 800776c:	61fb      	str	r3, [r7, #28]
 800776e:	e159      	b.n	8007a24 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8007770:	2201      	movs	r2, #1
 8007772:	69fb      	ldr	r3, [r7, #28]
 8007774:	fa02 f303 	lsl.w	r3, r2, r3
 8007778:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800777a:	683b      	ldr	r3, [r7, #0]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	697a      	ldr	r2, [r7, #20]
 8007780:	4013      	ands	r3, r2
 8007782:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8007784:	693a      	ldr	r2, [r7, #16]
 8007786:	697b      	ldr	r3, [r7, #20]
 8007788:	429a      	cmp	r2, r3
 800778a:	f040 8148 	bne.w	8007a1e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800778e:	683b      	ldr	r3, [r7, #0]
 8007790:	685b      	ldr	r3, [r3, #4]
 8007792:	f003 0303 	and.w	r3, r3, #3
 8007796:	2b01      	cmp	r3, #1
 8007798:	d005      	beq.n	80077a6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800779a:	683b      	ldr	r3, [r7, #0]
 800779c:	685b      	ldr	r3, [r3, #4]
 800779e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80077a2:	2b02      	cmp	r3, #2
 80077a4:	d130      	bne.n	8007808 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	689b      	ldr	r3, [r3, #8]
 80077aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80077ac:	69fb      	ldr	r3, [r7, #28]
 80077ae:	005b      	lsls	r3, r3, #1
 80077b0:	2203      	movs	r2, #3
 80077b2:	fa02 f303 	lsl.w	r3, r2, r3
 80077b6:	43db      	mvns	r3, r3
 80077b8:	69ba      	ldr	r2, [r7, #24]
 80077ba:	4013      	ands	r3, r2
 80077bc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80077be:	683b      	ldr	r3, [r7, #0]
 80077c0:	68da      	ldr	r2, [r3, #12]
 80077c2:	69fb      	ldr	r3, [r7, #28]
 80077c4:	005b      	lsls	r3, r3, #1
 80077c6:	fa02 f303 	lsl.w	r3, r2, r3
 80077ca:	69ba      	ldr	r2, [r7, #24]
 80077cc:	4313      	orrs	r3, r2
 80077ce:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	69ba      	ldr	r2, [r7, #24]
 80077d4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	685b      	ldr	r3, [r3, #4]
 80077da:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80077dc:	2201      	movs	r2, #1
 80077de:	69fb      	ldr	r3, [r7, #28]
 80077e0:	fa02 f303 	lsl.w	r3, r2, r3
 80077e4:	43db      	mvns	r3, r3
 80077e6:	69ba      	ldr	r2, [r7, #24]
 80077e8:	4013      	ands	r3, r2
 80077ea:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80077ec:	683b      	ldr	r3, [r7, #0]
 80077ee:	685b      	ldr	r3, [r3, #4]
 80077f0:	091b      	lsrs	r3, r3, #4
 80077f2:	f003 0201 	and.w	r2, r3, #1
 80077f6:	69fb      	ldr	r3, [r7, #28]
 80077f8:	fa02 f303 	lsl.w	r3, r2, r3
 80077fc:	69ba      	ldr	r2, [r7, #24]
 80077fe:	4313      	orrs	r3, r2
 8007800:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	69ba      	ldr	r2, [r7, #24]
 8007806:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007808:	683b      	ldr	r3, [r7, #0]
 800780a:	685b      	ldr	r3, [r3, #4]
 800780c:	f003 0303 	and.w	r3, r3, #3
 8007810:	2b03      	cmp	r3, #3
 8007812:	d017      	beq.n	8007844 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	68db      	ldr	r3, [r3, #12]
 8007818:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800781a:	69fb      	ldr	r3, [r7, #28]
 800781c:	005b      	lsls	r3, r3, #1
 800781e:	2203      	movs	r2, #3
 8007820:	fa02 f303 	lsl.w	r3, r2, r3
 8007824:	43db      	mvns	r3, r3
 8007826:	69ba      	ldr	r2, [r7, #24]
 8007828:	4013      	ands	r3, r2
 800782a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800782c:	683b      	ldr	r3, [r7, #0]
 800782e:	689a      	ldr	r2, [r3, #8]
 8007830:	69fb      	ldr	r3, [r7, #28]
 8007832:	005b      	lsls	r3, r3, #1
 8007834:	fa02 f303 	lsl.w	r3, r2, r3
 8007838:	69ba      	ldr	r2, [r7, #24]
 800783a:	4313      	orrs	r3, r2
 800783c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	69ba      	ldr	r2, [r7, #24]
 8007842:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007844:	683b      	ldr	r3, [r7, #0]
 8007846:	685b      	ldr	r3, [r3, #4]
 8007848:	f003 0303 	and.w	r3, r3, #3
 800784c:	2b02      	cmp	r3, #2
 800784e:	d123      	bne.n	8007898 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007850:	69fb      	ldr	r3, [r7, #28]
 8007852:	08da      	lsrs	r2, r3, #3
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	3208      	adds	r2, #8
 8007858:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800785c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800785e:	69fb      	ldr	r3, [r7, #28]
 8007860:	f003 0307 	and.w	r3, r3, #7
 8007864:	009b      	lsls	r3, r3, #2
 8007866:	220f      	movs	r2, #15
 8007868:	fa02 f303 	lsl.w	r3, r2, r3
 800786c:	43db      	mvns	r3, r3
 800786e:	69ba      	ldr	r2, [r7, #24]
 8007870:	4013      	ands	r3, r2
 8007872:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8007874:	683b      	ldr	r3, [r7, #0]
 8007876:	691a      	ldr	r2, [r3, #16]
 8007878:	69fb      	ldr	r3, [r7, #28]
 800787a:	f003 0307 	and.w	r3, r3, #7
 800787e:	009b      	lsls	r3, r3, #2
 8007880:	fa02 f303 	lsl.w	r3, r2, r3
 8007884:	69ba      	ldr	r2, [r7, #24]
 8007886:	4313      	orrs	r3, r2
 8007888:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800788a:	69fb      	ldr	r3, [r7, #28]
 800788c:	08da      	lsrs	r2, r3, #3
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	3208      	adds	r2, #8
 8007892:	69b9      	ldr	r1, [r7, #24]
 8007894:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800789e:	69fb      	ldr	r3, [r7, #28]
 80078a0:	005b      	lsls	r3, r3, #1
 80078a2:	2203      	movs	r2, #3
 80078a4:	fa02 f303 	lsl.w	r3, r2, r3
 80078a8:	43db      	mvns	r3, r3
 80078aa:	69ba      	ldr	r2, [r7, #24]
 80078ac:	4013      	ands	r3, r2
 80078ae:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80078b0:	683b      	ldr	r3, [r7, #0]
 80078b2:	685b      	ldr	r3, [r3, #4]
 80078b4:	f003 0203 	and.w	r2, r3, #3
 80078b8:	69fb      	ldr	r3, [r7, #28]
 80078ba:	005b      	lsls	r3, r3, #1
 80078bc:	fa02 f303 	lsl.w	r3, r2, r3
 80078c0:	69ba      	ldr	r2, [r7, #24]
 80078c2:	4313      	orrs	r3, r2
 80078c4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	69ba      	ldr	r2, [r7, #24]
 80078ca:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80078cc:	683b      	ldr	r3, [r7, #0]
 80078ce:	685b      	ldr	r3, [r3, #4]
 80078d0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	f000 80a2 	beq.w	8007a1e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80078da:	2300      	movs	r3, #0
 80078dc:	60fb      	str	r3, [r7, #12]
 80078de:	4b57      	ldr	r3, [pc, #348]	@ (8007a3c <HAL_GPIO_Init+0x2e8>)
 80078e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80078e2:	4a56      	ldr	r2, [pc, #344]	@ (8007a3c <HAL_GPIO_Init+0x2e8>)
 80078e4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80078e8:	6453      	str	r3, [r2, #68]	@ 0x44
 80078ea:	4b54      	ldr	r3, [pc, #336]	@ (8007a3c <HAL_GPIO_Init+0x2e8>)
 80078ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80078ee:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80078f2:	60fb      	str	r3, [r7, #12]
 80078f4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80078f6:	4a52      	ldr	r2, [pc, #328]	@ (8007a40 <HAL_GPIO_Init+0x2ec>)
 80078f8:	69fb      	ldr	r3, [r7, #28]
 80078fa:	089b      	lsrs	r3, r3, #2
 80078fc:	3302      	adds	r3, #2
 80078fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007902:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8007904:	69fb      	ldr	r3, [r7, #28]
 8007906:	f003 0303 	and.w	r3, r3, #3
 800790a:	009b      	lsls	r3, r3, #2
 800790c:	220f      	movs	r2, #15
 800790e:	fa02 f303 	lsl.w	r3, r2, r3
 8007912:	43db      	mvns	r3, r3
 8007914:	69ba      	ldr	r2, [r7, #24]
 8007916:	4013      	ands	r3, r2
 8007918:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	4a49      	ldr	r2, [pc, #292]	@ (8007a44 <HAL_GPIO_Init+0x2f0>)
 800791e:	4293      	cmp	r3, r2
 8007920:	d019      	beq.n	8007956 <HAL_GPIO_Init+0x202>
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	4a48      	ldr	r2, [pc, #288]	@ (8007a48 <HAL_GPIO_Init+0x2f4>)
 8007926:	4293      	cmp	r3, r2
 8007928:	d013      	beq.n	8007952 <HAL_GPIO_Init+0x1fe>
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	4a47      	ldr	r2, [pc, #284]	@ (8007a4c <HAL_GPIO_Init+0x2f8>)
 800792e:	4293      	cmp	r3, r2
 8007930:	d00d      	beq.n	800794e <HAL_GPIO_Init+0x1fa>
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	4a46      	ldr	r2, [pc, #280]	@ (8007a50 <HAL_GPIO_Init+0x2fc>)
 8007936:	4293      	cmp	r3, r2
 8007938:	d007      	beq.n	800794a <HAL_GPIO_Init+0x1f6>
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	4a45      	ldr	r2, [pc, #276]	@ (8007a54 <HAL_GPIO_Init+0x300>)
 800793e:	4293      	cmp	r3, r2
 8007940:	d101      	bne.n	8007946 <HAL_GPIO_Init+0x1f2>
 8007942:	2304      	movs	r3, #4
 8007944:	e008      	b.n	8007958 <HAL_GPIO_Init+0x204>
 8007946:	2307      	movs	r3, #7
 8007948:	e006      	b.n	8007958 <HAL_GPIO_Init+0x204>
 800794a:	2303      	movs	r3, #3
 800794c:	e004      	b.n	8007958 <HAL_GPIO_Init+0x204>
 800794e:	2302      	movs	r3, #2
 8007950:	e002      	b.n	8007958 <HAL_GPIO_Init+0x204>
 8007952:	2301      	movs	r3, #1
 8007954:	e000      	b.n	8007958 <HAL_GPIO_Init+0x204>
 8007956:	2300      	movs	r3, #0
 8007958:	69fa      	ldr	r2, [r7, #28]
 800795a:	f002 0203 	and.w	r2, r2, #3
 800795e:	0092      	lsls	r2, r2, #2
 8007960:	4093      	lsls	r3, r2
 8007962:	69ba      	ldr	r2, [r7, #24]
 8007964:	4313      	orrs	r3, r2
 8007966:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007968:	4935      	ldr	r1, [pc, #212]	@ (8007a40 <HAL_GPIO_Init+0x2ec>)
 800796a:	69fb      	ldr	r3, [r7, #28]
 800796c:	089b      	lsrs	r3, r3, #2
 800796e:	3302      	adds	r3, #2
 8007970:	69ba      	ldr	r2, [r7, #24]
 8007972:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8007976:	4b38      	ldr	r3, [pc, #224]	@ (8007a58 <HAL_GPIO_Init+0x304>)
 8007978:	689b      	ldr	r3, [r3, #8]
 800797a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800797c:	693b      	ldr	r3, [r7, #16]
 800797e:	43db      	mvns	r3, r3
 8007980:	69ba      	ldr	r2, [r7, #24]
 8007982:	4013      	ands	r3, r2
 8007984:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8007986:	683b      	ldr	r3, [r7, #0]
 8007988:	685b      	ldr	r3, [r3, #4]
 800798a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800798e:	2b00      	cmp	r3, #0
 8007990:	d003      	beq.n	800799a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8007992:	69ba      	ldr	r2, [r7, #24]
 8007994:	693b      	ldr	r3, [r7, #16]
 8007996:	4313      	orrs	r3, r2
 8007998:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800799a:	4a2f      	ldr	r2, [pc, #188]	@ (8007a58 <HAL_GPIO_Init+0x304>)
 800799c:	69bb      	ldr	r3, [r7, #24]
 800799e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80079a0:	4b2d      	ldr	r3, [pc, #180]	@ (8007a58 <HAL_GPIO_Init+0x304>)
 80079a2:	68db      	ldr	r3, [r3, #12]
 80079a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80079a6:	693b      	ldr	r3, [r7, #16]
 80079a8:	43db      	mvns	r3, r3
 80079aa:	69ba      	ldr	r2, [r7, #24]
 80079ac:	4013      	ands	r3, r2
 80079ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80079b0:	683b      	ldr	r3, [r7, #0]
 80079b2:	685b      	ldr	r3, [r3, #4]
 80079b4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d003      	beq.n	80079c4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80079bc:	69ba      	ldr	r2, [r7, #24]
 80079be:	693b      	ldr	r3, [r7, #16]
 80079c0:	4313      	orrs	r3, r2
 80079c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80079c4:	4a24      	ldr	r2, [pc, #144]	@ (8007a58 <HAL_GPIO_Init+0x304>)
 80079c6:	69bb      	ldr	r3, [r7, #24]
 80079c8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80079ca:	4b23      	ldr	r3, [pc, #140]	@ (8007a58 <HAL_GPIO_Init+0x304>)
 80079cc:	685b      	ldr	r3, [r3, #4]
 80079ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80079d0:	693b      	ldr	r3, [r7, #16]
 80079d2:	43db      	mvns	r3, r3
 80079d4:	69ba      	ldr	r2, [r7, #24]
 80079d6:	4013      	ands	r3, r2
 80079d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80079da:	683b      	ldr	r3, [r7, #0]
 80079dc:	685b      	ldr	r3, [r3, #4]
 80079de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d003      	beq.n	80079ee <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80079e6:	69ba      	ldr	r2, [r7, #24]
 80079e8:	693b      	ldr	r3, [r7, #16]
 80079ea:	4313      	orrs	r3, r2
 80079ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80079ee:	4a1a      	ldr	r2, [pc, #104]	@ (8007a58 <HAL_GPIO_Init+0x304>)
 80079f0:	69bb      	ldr	r3, [r7, #24]
 80079f2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80079f4:	4b18      	ldr	r3, [pc, #96]	@ (8007a58 <HAL_GPIO_Init+0x304>)
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80079fa:	693b      	ldr	r3, [r7, #16]
 80079fc:	43db      	mvns	r3, r3
 80079fe:	69ba      	ldr	r2, [r7, #24]
 8007a00:	4013      	ands	r3, r2
 8007a02:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8007a04:	683b      	ldr	r3, [r7, #0]
 8007a06:	685b      	ldr	r3, [r3, #4]
 8007a08:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d003      	beq.n	8007a18 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8007a10:	69ba      	ldr	r2, [r7, #24]
 8007a12:	693b      	ldr	r3, [r7, #16]
 8007a14:	4313      	orrs	r3, r2
 8007a16:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8007a18:	4a0f      	ldr	r2, [pc, #60]	@ (8007a58 <HAL_GPIO_Init+0x304>)
 8007a1a:	69bb      	ldr	r3, [r7, #24]
 8007a1c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8007a1e:	69fb      	ldr	r3, [r7, #28]
 8007a20:	3301      	adds	r3, #1
 8007a22:	61fb      	str	r3, [r7, #28]
 8007a24:	69fb      	ldr	r3, [r7, #28]
 8007a26:	2b0f      	cmp	r3, #15
 8007a28:	f67f aea2 	bls.w	8007770 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8007a2c:	bf00      	nop
 8007a2e:	bf00      	nop
 8007a30:	3724      	adds	r7, #36	@ 0x24
 8007a32:	46bd      	mov	sp, r7
 8007a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a38:	4770      	bx	lr
 8007a3a:	bf00      	nop
 8007a3c:	40023800 	.word	0x40023800
 8007a40:	40013800 	.word	0x40013800
 8007a44:	40020000 	.word	0x40020000
 8007a48:	40020400 	.word	0x40020400
 8007a4c:	40020800 	.word	0x40020800
 8007a50:	40020c00 	.word	0x40020c00
 8007a54:	40021000 	.word	0x40021000
 8007a58:	40013c00 	.word	0x40013c00

08007a5c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007a5c:	b480      	push	{r7}
 8007a5e:	b083      	sub	sp, #12
 8007a60:	af00      	add	r7, sp, #0
 8007a62:	6078      	str	r0, [r7, #4]
 8007a64:	460b      	mov	r3, r1
 8007a66:	807b      	strh	r3, [r7, #2]
 8007a68:	4613      	mov	r3, r2
 8007a6a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8007a6c:	787b      	ldrb	r3, [r7, #1]
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d003      	beq.n	8007a7a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007a72:	887a      	ldrh	r2, [r7, #2]
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8007a78:	e003      	b.n	8007a82 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8007a7a:	887b      	ldrh	r3, [r7, #2]
 8007a7c:	041a      	lsls	r2, r3, #16
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	619a      	str	r2, [r3, #24]
}
 8007a82:	bf00      	nop
 8007a84:	370c      	adds	r7, #12
 8007a86:	46bd      	mov	sp, r7
 8007a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a8c:	4770      	bx	lr

08007a8e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8007a8e:	b480      	push	{r7}
 8007a90:	b085      	sub	sp, #20
 8007a92:	af00      	add	r7, sp, #0
 8007a94:	6078      	str	r0, [r7, #4]
 8007a96:	460b      	mov	r3, r1
 8007a98:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	695b      	ldr	r3, [r3, #20]
 8007a9e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8007aa0:	887a      	ldrh	r2, [r7, #2]
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	4013      	ands	r3, r2
 8007aa6:	041a      	lsls	r2, r3, #16
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	43d9      	mvns	r1, r3
 8007aac:	887b      	ldrh	r3, [r7, #2]
 8007aae:	400b      	ands	r3, r1
 8007ab0:	431a      	orrs	r2, r3
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	619a      	str	r2, [r3, #24]
}
 8007ab6:	bf00      	nop
 8007ab8:	3714      	adds	r7, #20
 8007aba:	46bd      	mov	sp, r7
 8007abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ac0:	4770      	bx	lr
	...

08007ac4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007ac4:	b580      	push	{r7, lr}
 8007ac6:	b086      	sub	sp, #24
 8007ac8:	af00      	add	r7, sp, #0
 8007aca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d101      	bne.n	8007ad6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007ad2:	2301      	movs	r3, #1
 8007ad4:	e267      	b.n	8007fa6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	f003 0301 	and.w	r3, r3, #1
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d075      	beq.n	8007bce <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8007ae2:	4b88      	ldr	r3, [pc, #544]	@ (8007d04 <HAL_RCC_OscConfig+0x240>)
 8007ae4:	689b      	ldr	r3, [r3, #8]
 8007ae6:	f003 030c 	and.w	r3, r3, #12
 8007aea:	2b04      	cmp	r3, #4
 8007aec:	d00c      	beq.n	8007b08 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007aee:	4b85      	ldr	r3, [pc, #532]	@ (8007d04 <HAL_RCC_OscConfig+0x240>)
 8007af0:	689b      	ldr	r3, [r3, #8]
 8007af2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8007af6:	2b08      	cmp	r3, #8
 8007af8:	d112      	bne.n	8007b20 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007afa:	4b82      	ldr	r3, [pc, #520]	@ (8007d04 <HAL_RCC_OscConfig+0x240>)
 8007afc:	685b      	ldr	r3, [r3, #4]
 8007afe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007b02:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007b06:	d10b      	bne.n	8007b20 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007b08:	4b7e      	ldr	r3, [pc, #504]	@ (8007d04 <HAL_RCC_OscConfig+0x240>)
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d05b      	beq.n	8007bcc <HAL_RCC_OscConfig+0x108>
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	685b      	ldr	r3, [r3, #4]
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d157      	bne.n	8007bcc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007b1c:	2301      	movs	r3, #1
 8007b1e:	e242      	b.n	8007fa6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	685b      	ldr	r3, [r3, #4]
 8007b24:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007b28:	d106      	bne.n	8007b38 <HAL_RCC_OscConfig+0x74>
 8007b2a:	4b76      	ldr	r3, [pc, #472]	@ (8007d04 <HAL_RCC_OscConfig+0x240>)
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	4a75      	ldr	r2, [pc, #468]	@ (8007d04 <HAL_RCC_OscConfig+0x240>)
 8007b30:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007b34:	6013      	str	r3, [r2, #0]
 8007b36:	e01d      	b.n	8007b74 <HAL_RCC_OscConfig+0xb0>
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	685b      	ldr	r3, [r3, #4]
 8007b3c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007b40:	d10c      	bne.n	8007b5c <HAL_RCC_OscConfig+0x98>
 8007b42:	4b70      	ldr	r3, [pc, #448]	@ (8007d04 <HAL_RCC_OscConfig+0x240>)
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	4a6f      	ldr	r2, [pc, #444]	@ (8007d04 <HAL_RCC_OscConfig+0x240>)
 8007b48:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007b4c:	6013      	str	r3, [r2, #0]
 8007b4e:	4b6d      	ldr	r3, [pc, #436]	@ (8007d04 <HAL_RCC_OscConfig+0x240>)
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	4a6c      	ldr	r2, [pc, #432]	@ (8007d04 <HAL_RCC_OscConfig+0x240>)
 8007b54:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007b58:	6013      	str	r3, [r2, #0]
 8007b5a:	e00b      	b.n	8007b74 <HAL_RCC_OscConfig+0xb0>
 8007b5c:	4b69      	ldr	r3, [pc, #420]	@ (8007d04 <HAL_RCC_OscConfig+0x240>)
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	4a68      	ldr	r2, [pc, #416]	@ (8007d04 <HAL_RCC_OscConfig+0x240>)
 8007b62:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007b66:	6013      	str	r3, [r2, #0]
 8007b68:	4b66      	ldr	r3, [pc, #408]	@ (8007d04 <HAL_RCC_OscConfig+0x240>)
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	4a65      	ldr	r2, [pc, #404]	@ (8007d04 <HAL_RCC_OscConfig+0x240>)
 8007b6e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007b72:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	685b      	ldr	r3, [r3, #4]
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d013      	beq.n	8007ba4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007b7c:	f7ff fcd8 	bl	8007530 <HAL_GetTick>
 8007b80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007b82:	e008      	b.n	8007b96 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007b84:	f7ff fcd4 	bl	8007530 <HAL_GetTick>
 8007b88:	4602      	mov	r2, r0
 8007b8a:	693b      	ldr	r3, [r7, #16]
 8007b8c:	1ad3      	subs	r3, r2, r3
 8007b8e:	2b64      	cmp	r3, #100	@ 0x64
 8007b90:	d901      	bls.n	8007b96 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8007b92:	2303      	movs	r3, #3
 8007b94:	e207      	b.n	8007fa6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007b96:	4b5b      	ldr	r3, [pc, #364]	@ (8007d04 <HAL_RCC_OscConfig+0x240>)
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d0f0      	beq.n	8007b84 <HAL_RCC_OscConfig+0xc0>
 8007ba2:	e014      	b.n	8007bce <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007ba4:	f7ff fcc4 	bl	8007530 <HAL_GetTick>
 8007ba8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007baa:	e008      	b.n	8007bbe <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007bac:	f7ff fcc0 	bl	8007530 <HAL_GetTick>
 8007bb0:	4602      	mov	r2, r0
 8007bb2:	693b      	ldr	r3, [r7, #16]
 8007bb4:	1ad3      	subs	r3, r2, r3
 8007bb6:	2b64      	cmp	r3, #100	@ 0x64
 8007bb8:	d901      	bls.n	8007bbe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007bba:	2303      	movs	r3, #3
 8007bbc:	e1f3      	b.n	8007fa6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007bbe:	4b51      	ldr	r3, [pc, #324]	@ (8007d04 <HAL_RCC_OscConfig+0x240>)
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d1f0      	bne.n	8007bac <HAL_RCC_OscConfig+0xe8>
 8007bca:	e000      	b.n	8007bce <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007bcc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	f003 0302 	and.w	r3, r3, #2
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d063      	beq.n	8007ca2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8007bda:	4b4a      	ldr	r3, [pc, #296]	@ (8007d04 <HAL_RCC_OscConfig+0x240>)
 8007bdc:	689b      	ldr	r3, [r3, #8]
 8007bde:	f003 030c 	and.w	r3, r3, #12
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d00b      	beq.n	8007bfe <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007be6:	4b47      	ldr	r3, [pc, #284]	@ (8007d04 <HAL_RCC_OscConfig+0x240>)
 8007be8:	689b      	ldr	r3, [r3, #8]
 8007bea:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8007bee:	2b08      	cmp	r3, #8
 8007bf0:	d11c      	bne.n	8007c2c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007bf2:	4b44      	ldr	r3, [pc, #272]	@ (8007d04 <HAL_RCC_OscConfig+0x240>)
 8007bf4:	685b      	ldr	r3, [r3, #4]
 8007bf6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d116      	bne.n	8007c2c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007bfe:	4b41      	ldr	r3, [pc, #260]	@ (8007d04 <HAL_RCC_OscConfig+0x240>)
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	f003 0302 	and.w	r3, r3, #2
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d005      	beq.n	8007c16 <HAL_RCC_OscConfig+0x152>
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	68db      	ldr	r3, [r3, #12]
 8007c0e:	2b01      	cmp	r3, #1
 8007c10:	d001      	beq.n	8007c16 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8007c12:	2301      	movs	r3, #1
 8007c14:	e1c7      	b.n	8007fa6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007c16:	4b3b      	ldr	r3, [pc, #236]	@ (8007d04 <HAL_RCC_OscConfig+0x240>)
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	691b      	ldr	r3, [r3, #16]
 8007c22:	00db      	lsls	r3, r3, #3
 8007c24:	4937      	ldr	r1, [pc, #220]	@ (8007d04 <HAL_RCC_OscConfig+0x240>)
 8007c26:	4313      	orrs	r3, r2
 8007c28:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007c2a:	e03a      	b.n	8007ca2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	68db      	ldr	r3, [r3, #12]
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	d020      	beq.n	8007c76 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007c34:	4b34      	ldr	r3, [pc, #208]	@ (8007d08 <HAL_RCC_OscConfig+0x244>)
 8007c36:	2201      	movs	r2, #1
 8007c38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007c3a:	f7ff fc79 	bl	8007530 <HAL_GetTick>
 8007c3e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007c40:	e008      	b.n	8007c54 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007c42:	f7ff fc75 	bl	8007530 <HAL_GetTick>
 8007c46:	4602      	mov	r2, r0
 8007c48:	693b      	ldr	r3, [r7, #16]
 8007c4a:	1ad3      	subs	r3, r2, r3
 8007c4c:	2b02      	cmp	r3, #2
 8007c4e:	d901      	bls.n	8007c54 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8007c50:	2303      	movs	r3, #3
 8007c52:	e1a8      	b.n	8007fa6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007c54:	4b2b      	ldr	r3, [pc, #172]	@ (8007d04 <HAL_RCC_OscConfig+0x240>)
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	f003 0302 	and.w	r3, r3, #2
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d0f0      	beq.n	8007c42 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007c60:	4b28      	ldr	r3, [pc, #160]	@ (8007d04 <HAL_RCC_OscConfig+0x240>)
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	691b      	ldr	r3, [r3, #16]
 8007c6c:	00db      	lsls	r3, r3, #3
 8007c6e:	4925      	ldr	r1, [pc, #148]	@ (8007d04 <HAL_RCC_OscConfig+0x240>)
 8007c70:	4313      	orrs	r3, r2
 8007c72:	600b      	str	r3, [r1, #0]
 8007c74:	e015      	b.n	8007ca2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007c76:	4b24      	ldr	r3, [pc, #144]	@ (8007d08 <HAL_RCC_OscConfig+0x244>)
 8007c78:	2200      	movs	r2, #0
 8007c7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007c7c:	f7ff fc58 	bl	8007530 <HAL_GetTick>
 8007c80:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007c82:	e008      	b.n	8007c96 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007c84:	f7ff fc54 	bl	8007530 <HAL_GetTick>
 8007c88:	4602      	mov	r2, r0
 8007c8a:	693b      	ldr	r3, [r7, #16]
 8007c8c:	1ad3      	subs	r3, r2, r3
 8007c8e:	2b02      	cmp	r3, #2
 8007c90:	d901      	bls.n	8007c96 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8007c92:	2303      	movs	r3, #3
 8007c94:	e187      	b.n	8007fa6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007c96:	4b1b      	ldr	r3, [pc, #108]	@ (8007d04 <HAL_RCC_OscConfig+0x240>)
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	f003 0302 	and.w	r3, r3, #2
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d1f0      	bne.n	8007c84 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	f003 0308 	and.w	r3, r3, #8
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d036      	beq.n	8007d1c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	695b      	ldr	r3, [r3, #20]
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d016      	beq.n	8007ce4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007cb6:	4b15      	ldr	r3, [pc, #84]	@ (8007d0c <HAL_RCC_OscConfig+0x248>)
 8007cb8:	2201      	movs	r2, #1
 8007cba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007cbc:	f7ff fc38 	bl	8007530 <HAL_GetTick>
 8007cc0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007cc2:	e008      	b.n	8007cd6 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007cc4:	f7ff fc34 	bl	8007530 <HAL_GetTick>
 8007cc8:	4602      	mov	r2, r0
 8007cca:	693b      	ldr	r3, [r7, #16]
 8007ccc:	1ad3      	subs	r3, r2, r3
 8007cce:	2b02      	cmp	r3, #2
 8007cd0:	d901      	bls.n	8007cd6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8007cd2:	2303      	movs	r3, #3
 8007cd4:	e167      	b.n	8007fa6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007cd6:	4b0b      	ldr	r3, [pc, #44]	@ (8007d04 <HAL_RCC_OscConfig+0x240>)
 8007cd8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007cda:	f003 0302 	and.w	r3, r3, #2
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d0f0      	beq.n	8007cc4 <HAL_RCC_OscConfig+0x200>
 8007ce2:	e01b      	b.n	8007d1c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007ce4:	4b09      	ldr	r3, [pc, #36]	@ (8007d0c <HAL_RCC_OscConfig+0x248>)
 8007ce6:	2200      	movs	r2, #0
 8007ce8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007cea:	f7ff fc21 	bl	8007530 <HAL_GetTick>
 8007cee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007cf0:	e00e      	b.n	8007d10 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007cf2:	f7ff fc1d 	bl	8007530 <HAL_GetTick>
 8007cf6:	4602      	mov	r2, r0
 8007cf8:	693b      	ldr	r3, [r7, #16]
 8007cfa:	1ad3      	subs	r3, r2, r3
 8007cfc:	2b02      	cmp	r3, #2
 8007cfe:	d907      	bls.n	8007d10 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8007d00:	2303      	movs	r3, #3
 8007d02:	e150      	b.n	8007fa6 <HAL_RCC_OscConfig+0x4e2>
 8007d04:	40023800 	.word	0x40023800
 8007d08:	42470000 	.word	0x42470000
 8007d0c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007d10:	4b88      	ldr	r3, [pc, #544]	@ (8007f34 <HAL_RCC_OscConfig+0x470>)
 8007d12:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007d14:	f003 0302 	and.w	r3, r3, #2
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	d1ea      	bne.n	8007cf2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	f003 0304 	and.w	r3, r3, #4
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	f000 8097 	beq.w	8007e58 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007d2a:	2300      	movs	r3, #0
 8007d2c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007d2e:	4b81      	ldr	r3, [pc, #516]	@ (8007f34 <HAL_RCC_OscConfig+0x470>)
 8007d30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007d32:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d10f      	bne.n	8007d5a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007d3a:	2300      	movs	r3, #0
 8007d3c:	60bb      	str	r3, [r7, #8]
 8007d3e:	4b7d      	ldr	r3, [pc, #500]	@ (8007f34 <HAL_RCC_OscConfig+0x470>)
 8007d40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007d42:	4a7c      	ldr	r2, [pc, #496]	@ (8007f34 <HAL_RCC_OscConfig+0x470>)
 8007d44:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007d48:	6413      	str	r3, [r2, #64]	@ 0x40
 8007d4a:	4b7a      	ldr	r3, [pc, #488]	@ (8007f34 <HAL_RCC_OscConfig+0x470>)
 8007d4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007d4e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007d52:	60bb      	str	r3, [r7, #8]
 8007d54:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007d56:	2301      	movs	r3, #1
 8007d58:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007d5a:	4b77      	ldr	r3, [pc, #476]	@ (8007f38 <HAL_RCC_OscConfig+0x474>)
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	d118      	bne.n	8007d98 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007d66:	4b74      	ldr	r3, [pc, #464]	@ (8007f38 <HAL_RCC_OscConfig+0x474>)
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	4a73      	ldr	r2, [pc, #460]	@ (8007f38 <HAL_RCC_OscConfig+0x474>)
 8007d6c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007d70:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007d72:	f7ff fbdd 	bl	8007530 <HAL_GetTick>
 8007d76:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007d78:	e008      	b.n	8007d8c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007d7a:	f7ff fbd9 	bl	8007530 <HAL_GetTick>
 8007d7e:	4602      	mov	r2, r0
 8007d80:	693b      	ldr	r3, [r7, #16]
 8007d82:	1ad3      	subs	r3, r2, r3
 8007d84:	2b02      	cmp	r3, #2
 8007d86:	d901      	bls.n	8007d8c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8007d88:	2303      	movs	r3, #3
 8007d8a:	e10c      	b.n	8007fa6 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007d8c:	4b6a      	ldr	r3, [pc, #424]	@ (8007f38 <HAL_RCC_OscConfig+0x474>)
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d0f0      	beq.n	8007d7a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	689b      	ldr	r3, [r3, #8]
 8007d9c:	2b01      	cmp	r3, #1
 8007d9e:	d106      	bne.n	8007dae <HAL_RCC_OscConfig+0x2ea>
 8007da0:	4b64      	ldr	r3, [pc, #400]	@ (8007f34 <HAL_RCC_OscConfig+0x470>)
 8007da2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007da4:	4a63      	ldr	r2, [pc, #396]	@ (8007f34 <HAL_RCC_OscConfig+0x470>)
 8007da6:	f043 0301 	orr.w	r3, r3, #1
 8007daa:	6713      	str	r3, [r2, #112]	@ 0x70
 8007dac:	e01c      	b.n	8007de8 <HAL_RCC_OscConfig+0x324>
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	689b      	ldr	r3, [r3, #8]
 8007db2:	2b05      	cmp	r3, #5
 8007db4:	d10c      	bne.n	8007dd0 <HAL_RCC_OscConfig+0x30c>
 8007db6:	4b5f      	ldr	r3, [pc, #380]	@ (8007f34 <HAL_RCC_OscConfig+0x470>)
 8007db8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007dba:	4a5e      	ldr	r2, [pc, #376]	@ (8007f34 <HAL_RCC_OscConfig+0x470>)
 8007dbc:	f043 0304 	orr.w	r3, r3, #4
 8007dc0:	6713      	str	r3, [r2, #112]	@ 0x70
 8007dc2:	4b5c      	ldr	r3, [pc, #368]	@ (8007f34 <HAL_RCC_OscConfig+0x470>)
 8007dc4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007dc6:	4a5b      	ldr	r2, [pc, #364]	@ (8007f34 <HAL_RCC_OscConfig+0x470>)
 8007dc8:	f043 0301 	orr.w	r3, r3, #1
 8007dcc:	6713      	str	r3, [r2, #112]	@ 0x70
 8007dce:	e00b      	b.n	8007de8 <HAL_RCC_OscConfig+0x324>
 8007dd0:	4b58      	ldr	r3, [pc, #352]	@ (8007f34 <HAL_RCC_OscConfig+0x470>)
 8007dd2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007dd4:	4a57      	ldr	r2, [pc, #348]	@ (8007f34 <HAL_RCC_OscConfig+0x470>)
 8007dd6:	f023 0301 	bic.w	r3, r3, #1
 8007dda:	6713      	str	r3, [r2, #112]	@ 0x70
 8007ddc:	4b55      	ldr	r3, [pc, #340]	@ (8007f34 <HAL_RCC_OscConfig+0x470>)
 8007dde:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007de0:	4a54      	ldr	r2, [pc, #336]	@ (8007f34 <HAL_RCC_OscConfig+0x470>)
 8007de2:	f023 0304 	bic.w	r3, r3, #4
 8007de6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	689b      	ldr	r3, [r3, #8]
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d015      	beq.n	8007e1c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007df0:	f7ff fb9e 	bl	8007530 <HAL_GetTick>
 8007df4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007df6:	e00a      	b.n	8007e0e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007df8:	f7ff fb9a 	bl	8007530 <HAL_GetTick>
 8007dfc:	4602      	mov	r2, r0
 8007dfe:	693b      	ldr	r3, [r7, #16]
 8007e00:	1ad3      	subs	r3, r2, r3
 8007e02:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007e06:	4293      	cmp	r3, r2
 8007e08:	d901      	bls.n	8007e0e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8007e0a:	2303      	movs	r3, #3
 8007e0c:	e0cb      	b.n	8007fa6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007e0e:	4b49      	ldr	r3, [pc, #292]	@ (8007f34 <HAL_RCC_OscConfig+0x470>)
 8007e10:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007e12:	f003 0302 	and.w	r3, r3, #2
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d0ee      	beq.n	8007df8 <HAL_RCC_OscConfig+0x334>
 8007e1a:	e014      	b.n	8007e46 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007e1c:	f7ff fb88 	bl	8007530 <HAL_GetTick>
 8007e20:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007e22:	e00a      	b.n	8007e3a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007e24:	f7ff fb84 	bl	8007530 <HAL_GetTick>
 8007e28:	4602      	mov	r2, r0
 8007e2a:	693b      	ldr	r3, [r7, #16]
 8007e2c:	1ad3      	subs	r3, r2, r3
 8007e2e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007e32:	4293      	cmp	r3, r2
 8007e34:	d901      	bls.n	8007e3a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8007e36:	2303      	movs	r3, #3
 8007e38:	e0b5      	b.n	8007fa6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007e3a:	4b3e      	ldr	r3, [pc, #248]	@ (8007f34 <HAL_RCC_OscConfig+0x470>)
 8007e3c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007e3e:	f003 0302 	and.w	r3, r3, #2
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d1ee      	bne.n	8007e24 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8007e46:	7dfb      	ldrb	r3, [r7, #23]
 8007e48:	2b01      	cmp	r3, #1
 8007e4a:	d105      	bne.n	8007e58 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007e4c:	4b39      	ldr	r3, [pc, #228]	@ (8007f34 <HAL_RCC_OscConfig+0x470>)
 8007e4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007e50:	4a38      	ldr	r2, [pc, #224]	@ (8007f34 <HAL_RCC_OscConfig+0x470>)
 8007e52:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007e56:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	699b      	ldr	r3, [r3, #24]
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	f000 80a1 	beq.w	8007fa4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007e62:	4b34      	ldr	r3, [pc, #208]	@ (8007f34 <HAL_RCC_OscConfig+0x470>)
 8007e64:	689b      	ldr	r3, [r3, #8]
 8007e66:	f003 030c 	and.w	r3, r3, #12
 8007e6a:	2b08      	cmp	r3, #8
 8007e6c:	d05c      	beq.n	8007f28 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	699b      	ldr	r3, [r3, #24]
 8007e72:	2b02      	cmp	r3, #2
 8007e74:	d141      	bne.n	8007efa <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007e76:	4b31      	ldr	r3, [pc, #196]	@ (8007f3c <HAL_RCC_OscConfig+0x478>)
 8007e78:	2200      	movs	r2, #0
 8007e7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007e7c:	f7ff fb58 	bl	8007530 <HAL_GetTick>
 8007e80:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007e82:	e008      	b.n	8007e96 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007e84:	f7ff fb54 	bl	8007530 <HAL_GetTick>
 8007e88:	4602      	mov	r2, r0
 8007e8a:	693b      	ldr	r3, [r7, #16]
 8007e8c:	1ad3      	subs	r3, r2, r3
 8007e8e:	2b02      	cmp	r3, #2
 8007e90:	d901      	bls.n	8007e96 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8007e92:	2303      	movs	r3, #3
 8007e94:	e087      	b.n	8007fa6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007e96:	4b27      	ldr	r3, [pc, #156]	@ (8007f34 <HAL_RCC_OscConfig+0x470>)
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d1f0      	bne.n	8007e84 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	69da      	ldr	r2, [r3, #28]
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	6a1b      	ldr	r3, [r3, #32]
 8007eaa:	431a      	orrs	r2, r3
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007eb0:	019b      	lsls	r3, r3, #6
 8007eb2:	431a      	orrs	r2, r3
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007eb8:	085b      	lsrs	r3, r3, #1
 8007eba:	3b01      	subs	r3, #1
 8007ebc:	041b      	lsls	r3, r3, #16
 8007ebe:	431a      	orrs	r2, r3
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ec4:	061b      	lsls	r3, r3, #24
 8007ec6:	491b      	ldr	r1, [pc, #108]	@ (8007f34 <HAL_RCC_OscConfig+0x470>)
 8007ec8:	4313      	orrs	r3, r2
 8007eca:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007ecc:	4b1b      	ldr	r3, [pc, #108]	@ (8007f3c <HAL_RCC_OscConfig+0x478>)
 8007ece:	2201      	movs	r2, #1
 8007ed0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007ed2:	f7ff fb2d 	bl	8007530 <HAL_GetTick>
 8007ed6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007ed8:	e008      	b.n	8007eec <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007eda:	f7ff fb29 	bl	8007530 <HAL_GetTick>
 8007ede:	4602      	mov	r2, r0
 8007ee0:	693b      	ldr	r3, [r7, #16]
 8007ee2:	1ad3      	subs	r3, r2, r3
 8007ee4:	2b02      	cmp	r3, #2
 8007ee6:	d901      	bls.n	8007eec <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8007ee8:	2303      	movs	r3, #3
 8007eea:	e05c      	b.n	8007fa6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007eec:	4b11      	ldr	r3, [pc, #68]	@ (8007f34 <HAL_RCC_OscConfig+0x470>)
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	d0f0      	beq.n	8007eda <HAL_RCC_OscConfig+0x416>
 8007ef8:	e054      	b.n	8007fa4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007efa:	4b10      	ldr	r3, [pc, #64]	@ (8007f3c <HAL_RCC_OscConfig+0x478>)
 8007efc:	2200      	movs	r2, #0
 8007efe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007f00:	f7ff fb16 	bl	8007530 <HAL_GetTick>
 8007f04:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007f06:	e008      	b.n	8007f1a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007f08:	f7ff fb12 	bl	8007530 <HAL_GetTick>
 8007f0c:	4602      	mov	r2, r0
 8007f0e:	693b      	ldr	r3, [r7, #16]
 8007f10:	1ad3      	subs	r3, r2, r3
 8007f12:	2b02      	cmp	r3, #2
 8007f14:	d901      	bls.n	8007f1a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8007f16:	2303      	movs	r3, #3
 8007f18:	e045      	b.n	8007fa6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007f1a:	4b06      	ldr	r3, [pc, #24]	@ (8007f34 <HAL_RCC_OscConfig+0x470>)
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d1f0      	bne.n	8007f08 <HAL_RCC_OscConfig+0x444>
 8007f26:	e03d      	b.n	8007fa4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	699b      	ldr	r3, [r3, #24]
 8007f2c:	2b01      	cmp	r3, #1
 8007f2e:	d107      	bne.n	8007f40 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8007f30:	2301      	movs	r3, #1
 8007f32:	e038      	b.n	8007fa6 <HAL_RCC_OscConfig+0x4e2>
 8007f34:	40023800 	.word	0x40023800
 8007f38:	40007000 	.word	0x40007000
 8007f3c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8007f40:	4b1b      	ldr	r3, [pc, #108]	@ (8007fb0 <HAL_RCC_OscConfig+0x4ec>)
 8007f42:	685b      	ldr	r3, [r3, #4]
 8007f44:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	699b      	ldr	r3, [r3, #24]
 8007f4a:	2b01      	cmp	r3, #1
 8007f4c:	d028      	beq.n	8007fa0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007f58:	429a      	cmp	r2, r3
 8007f5a:	d121      	bne.n	8007fa0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007f66:	429a      	cmp	r2, r3
 8007f68:	d11a      	bne.n	8007fa0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007f6a:	68fa      	ldr	r2, [r7, #12]
 8007f6c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8007f70:	4013      	ands	r3, r2
 8007f72:	687a      	ldr	r2, [r7, #4]
 8007f74:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8007f76:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007f78:	4293      	cmp	r3, r2
 8007f7a:	d111      	bne.n	8007fa0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f86:	085b      	lsrs	r3, r3, #1
 8007f88:	3b01      	subs	r3, #1
 8007f8a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007f8c:	429a      	cmp	r2, r3
 8007f8e:	d107      	bne.n	8007fa0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f9a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007f9c:	429a      	cmp	r2, r3
 8007f9e:	d001      	beq.n	8007fa4 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8007fa0:	2301      	movs	r3, #1
 8007fa2:	e000      	b.n	8007fa6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8007fa4:	2300      	movs	r3, #0
}
 8007fa6:	4618      	mov	r0, r3
 8007fa8:	3718      	adds	r7, #24
 8007faa:	46bd      	mov	sp, r7
 8007fac:	bd80      	pop	{r7, pc}
 8007fae:	bf00      	nop
 8007fb0:	40023800 	.word	0x40023800

08007fb4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007fb4:	b580      	push	{r7, lr}
 8007fb6:	b084      	sub	sp, #16
 8007fb8:	af00      	add	r7, sp, #0
 8007fba:	6078      	str	r0, [r7, #4]
 8007fbc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d101      	bne.n	8007fc8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007fc4:	2301      	movs	r3, #1
 8007fc6:	e0cc      	b.n	8008162 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007fc8:	4b68      	ldr	r3, [pc, #416]	@ (800816c <HAL_RCC_ClockConfig+0x1b8>)
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	f003 0307 	and.w	r3, r3, #7
 8007fd0:	683a      	ldr	r2, [r7, #0]
 8007fd2:	429a      	cmp	r2, r3
 8007fd4:	d90c      	bls.n	8007ff0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007fd6:	4b65      	ldr	r3, [pc, #404]	@ (800816c <HAL_RCC_ClockConfig+0x1b8>)
 8007fd8:	683a      	ldr	r2, [r7, #0]
 8007fda:	b2d2      	uxtb	r2, r2
 8007fdc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007fde:	4b63      	ldr	r3, [pc, #396]	@ (800816c <HAL_RCC_ClockConfig+0x1b8>)
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	f003 0307 	and.w	r3, r3, #7
 8007fe6:	683a      	ldr	r2, [r7, #0]
 8007fe8:	429a      	cmp	r2, r3
 8007fea:	d001      	beq.n	8007ff0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007fec:	2301      	movs	r3, #1
 8007fee:	e0b8      	b.n	8008162 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	f003 0302 	and.w	r3, r3, #2
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	d020      	beq.n	800803e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	f003 0304 	and.w	r3, r3, #4
 8008004:	2b00      	cmp	r3, #0
 8008006:	d005      	beq.n	8008014 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008008:	4b59      	ldr	r3, [pc, #356]	@ (8008170 <HAL_RCC_ClockConfig+0x1bc>)
 800800a:	689b      	ldr	r3, [r3, #8]
 800800c:	4a58      	ldr	r2, [pc, #352]	@ (8008170 <HAL_RCC_ClockConfig+0x1bc>)
 800800e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8008012:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	f003 0308 	and.w	r3, r3, #8
 800801c:	2b00      	cmp	r3, #0
 800801e:	d005      	beq.n	800802c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008020:	4b53      	ldr	r3, [pc, #332]	@ (8008170 <HAL_RCC_ClockConfig+0x1bc>)
 8008022:	689b      	ldr	r3, [r3, #8]
 8008024:	4a52      	ldr	r2, [pc, #328]	@ (8008170 <HAL_RCC_ClockConfig+0x1bc>)
 8008026:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800802a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800802c:	4b50      	ldr	r3, [pc, #320]	@ (8008170 <HAL_RCC_ClockConfig+0x1bc>)
 800802e:	689b      	ldr	r3, [r3, #8]
 8008030:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	689b      	ldr	r3, [r3, #8]
 8008038:	494d      	ldr	r1, [pc, #308]	@ (8008170 <HAL_RCC_ClockConfig+0x1bc>)
 800803a:	4313      	orrs	r3, r2
 800803c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	f003 0301 	and.w	r3, r3, #1
 8008046:	2b00      	cmp	r3, #0
 8008048:	d044      	beq.n	80080d4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	685b      	ldr	r3, [r3, #4]
 800804e:	2b01      	cmp	r3, #1
 8008050:	d107      	bne.n	8008062 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008052:	4b47      	ldr	r3, [pc, #284]	@ (8008170 <HAL_RCC_ClockConfig+0x1bc>)
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800805a:	2b00      	cmp	r3, #0
 800805c:	d119      	bne.n	8008092 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800805e:	2301      	movs	r3, #1
 8008060:	e07f      	b.n	8008162 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	685b      	ldr	r3, [r3, #4]
 8008066:	2b02      	cmp	r3, #2
 8008068:	d003      	beq.n	8008072 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800806e:	2b03      	cmp	r3, #3
 8008070:	d107      	bne.n	8008082 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008072:	4b3f      	ldr	r3, [pc, #252]	@ (8008170 <HAL_RCC_ClockConfig+0x1bc>)
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800807a:	2b00      	cmp	r3, #0
 800807c:	d109      	bne.n	8008092 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800807e:	2301      	movs	r3, #1
 8008080:	e06f      	b.n	8008162 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008082:	4b3b      	ldr	r3, [pc, #236]	@ (8008170 <HAL_RCC_ClockConfig+0x1bc>)
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	f003 0302 	and.w	r3, r3, #2
 800808a:	2b00      	cmp	r3, #0
 800808c:	d101      	bne.n	8008092 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800808e:	2301      	movs	r3, #1
 8008090:	e067      	b.n	8008162 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008092:	4b37      	ldr	r3, [pc, #220]	@ (8008170 <HAL_RCC_ClockConfig+0x1bc>)
 8008094:	689b      	ldr	r3, [r3, #8]
 8008096:	f023 0203 	bic.w	r2, r3, #3
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	685b      	ldr	r3, [r3, #4]
 800809e:	4934      	ldr	r1, [pc, #208]	@ (8008170 <HAL_RCC_ClockConfig+0x1bc>)
 80080a0:	4313      	orrs	r3, r2
 80080a2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80080a4:	f7ff fa44 	bl	8007530 <HAL_GetTick>
 80080a8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80080aa:	e00a      	b.n	80080c2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80080ac:	f7ff fa40 	bl	8007530 <HAL_GetTick>
 80080b0:	4602      	mov	r2, r0
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	1ad3      	subs	r3, r2, r3
 80080b6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80080ba:	4293      	cmp	r3, r2
 80080bc:	d901      	bls.n	80080c2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80080be:	2303      	movs	r3, #3
 80080c0:	e04f      	b.n	8008162 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80080c2:	4b2b      	ldr	r3, [pc, #172]	@ (8008170 <HAL_RCC_ClockConfig+0x1bc>)
 80080c4:	689b      	ldr	r3, [r3, #8]
 80080c6:	f003 020c 	and.w	r2, r3, #12
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	685b      	ldr	r3, [r3, #4]
 80080ce:	009b      	lsls	r3, r3, #2
 80080d0:	429a      	cmp	r2, r3
 80080d2:	d1eb      	bne.n	80080ac <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80080d4:	4b25      	ldr	r3, [pc, #148]	@ (800816c <HAL_RCC_ClockConfig+0x1b8>)
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	f003 0307 	and.w	r3, r3, #7
 80080dc:	683a      	ldr	r2, [r7, #0]
 80080de:	429a      	cmp	r2, r3
 80080e0:	d20c      	bcs.n	80080fc <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80080e2:	4b22      	ldr	r3, [pc, #136]	@ (800816c <HAL_RCC_ClockConfig+0x1b8>)
 80080e4:	683a      	ldr	r2, [r7, #0]
 80080e6:	b2d2      	uxtb	r2, r2
 80080e8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80080ea:	4b20      	ldr	r3, [pc, #128]	@ (800816c <HAL_RCC_ClockConfig+0x1b8>)
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	f003 0307 	and.w	r3, r3, #7
 80080f2:	683a      	ldr	r2, [r7, #0]
 80080f4:	429a      	cmp	r2, r3
 80080f6:	d001      	beq.n	80080fc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80080f8:	2301      	movs	r3, #1
 80080fa:	e032      	b.n	8008162 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	f003 0304 	and.w	r3, r3, #4
 8008104:	2b00      	cmp	r3, #0
 8008106:	d008      	beq.n	800811a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008108:	4b19      	ldr	r3, [pc, #100]	@ (8008170 <HAL_RCC_ClockConfig+0x1bc>)
 800810a:	689b      	ldr	r3, [r3, #8]
 800810c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	68db      	ldr	r3, [r3, #12]
 8008114:	4916      	ldr	r1, [pc, #88]	@ (8008170 <HAL_RCC_ClockConfig+0x1bc>)
 8008116:	4313      	orrs	r3, r2
 8008118:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	f003 0308 	and.w	r3, r3, #8
 8008122:	2b00      	cmp	r3, #0
 8008124:	d009      	beq.n	800813a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008126:	4b12      	ldr	r3, [pc, #72]	@ (8008170 <HAL_RCC_ClockConfig+0x1bc>)
 8008128:	689b      	ldr	r3, [r3, #8]
 800812a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	691b      	ldr	r3, [r3, #16]
 8008132:	00db      	lsls	r3, r3, #3
 8008134:	490e      	ldr	r1, [pc, #56]	@ (8008170 <HAL_RCC_ClockConfig+0x1bc>)
 8008136:	4313      	orrs	r3, r2
 8008138:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800813a:	f000 f821 	bl	8008180 <HAL_RCC_GetSysClockFreq>
 800813e:	4602      	mov	r2, r0
 8008140:	4b0b      	ldr	r3, [pc, #44]	@ (8008170 <HAL_RCC_ClockConfig+0x1bc>)
 8008142:	689b      	ldr	r3, [r3, #8]
 8008144:	091b      	lsrs	r3, r3, #4
 8008146:	f003 030f 	and.w	r3, r3, #15
 800814a:	490a      	ldr	r1, [pc, #40]	@ (8008174 <HAL_RCC_ClockConfig+0x1c0>)
 800814c:	5ccb      	ldrb	r3, [r1, r3]
 800814e:	fa22 f303 	lsr.w	r3, r2, r3
 8008152:	4a09      	ldr	r2, [pc, #36]	@ (8008178 <HAL_RCC_ClockConfig+0x1c4>)
 8008154:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8008156:	4b09      	ldr	r3, [pc, #36]	@ (800817c <HAL_RCC_ClockConfig+0x1c8>)
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	4618      	mov	r0, r3
 800815c:	f7f9 f870 	bl	8001240 <HAL_InitTick>

  return HAL_OK;
 8008160:	2300      	movs	r3, #0
}
 8008162:	4618      	mov	r0, r3
 8008164:	3710      	adds	r7, #16
 8008166:	46bd      	mov	sp, r7
 8008168:	bd80      	pop	{r7, pc}
 800816a:	bf00      	nop
 800816c:	40023c00 	.word	0x40023c00
 8008170:	40023800 	.word	0x40023800
 8008174:	0800da00 	.word	0x0800da00
 8008178:	20000080 	.word	0x20000080
 800817c:	200000d0 	.word	0x200000d0

08008180 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008180:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008184:	b094      	sub	sp, #80	@ 0x50
 8008186:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8008188:	2300      	movs	r3, #0
 800818a:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 800818c:	2300      	movs	r3, #0
 800818e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8008190:	2300      	movs	r3, #0
 8008192:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8008194:	2300      	movs	r3, #0
 8008196:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008198:	4b79      	ldr	r3, [pc, #484]	@ (8008380 <HAL_RCC_GetSysClockFreq+0x200>)
 800819a:	689b      	ldr	r3, [r3, #8]
 800819c:	f003 030c 	and.w	r3, r3, #12
 80081a0:	2b08      	cmp	r3, #8
 80081a2:	d00d      	beq.n	80081c0 <HAL_RCC_GetSysClockFreq+0x40>
 80081a4:	2b08      	cmp	r3, #8
 80081a6:	f200 80e1 	bhi.w	800836c <HAL_RCC_GetSysClockFreq+0x1ec>
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d002      	beq.n	80081b4 <HAL_RCC_GetSysClockFreq+0x34>
 80081ae:	2b04      	cmp	r3, #4
 80081b0:	d003      	beq.n	80081ba <HAL_RCC_GetSysClockFreq+0x3a>
 80081b2:	e0db      	b.n	800836c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80081b4:	4b73      	ldr	r3, [pc, #460]	@ (8008384 <HAL_RCC_GetSysClockFreq+0x204>)
 80081b6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80081b8:	e0db      	b.n	8008372 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80081ba:	4b73      	ldr	r3, [pc, #460]	@ (8008388 <HAL_RCC_GetSysClockFreq+0x208>)
 80081bc:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80081be:	e0d8      	b.n	8008372 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80081c0:	4b6f      	ldr	r3, [pc, #444]	@ (8008380 <HAL_RCC_GetSysClockFreq+0x200>)
 80081c2:	685b      	ldr	r3, [r3, #4]
 80081c4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80081c8:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80081ca:	4b6d      	ldr	r3, [pc, #436]	@ (8008380 <HAL_RCC_GetSysClockFreq+0x200>)
 80081cc:	685b      	ldr	r3, [r3, #4]
 80081ce:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	d063      	beq.n	800829e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80081d6:	4b6a      	ldr	r3, [pc, #424]	@ (8008380 <HAL_RCC_GetSysClockFreq+0x200>)
 80081d8:	685b      	ldr	r3, [r3, #4]
 80081da:	099b      	lsrs	r3, r3, #6
 80081dc:	2200      	movs	r2, #0
 80081de:	63bb      	str	r3, [r7, #56]	@ 0x38
 80081e0:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80081e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80081e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80081e8:	633b      	str	r3, [r7, #48]	@ 0x30
 80081ea:	2300      	movs	r3, #0
 80081ec:	637b      	str	r3, [r7, #52]	@ 0x34
 80081ee:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80081f2:	4622      	mov	r2, r4
 80081f4:	462b      	mov	r3, r5
 80081f6:	f04f 0000 	mov.w	r0, #0
 80081fa:	f04f 0100 	mov.w	r1, #0
 80081fe:	0159      	lsls	r1, r3, #5
 8008200:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008204:	0150      	lsls	r0, r2, #5
 8008206:	4602      	mov	r2, r0
 8008208:	460b      	mov	r3, r1
 800820a:	4621      	mov	r1, r4
 800820c:	1a51      	subs	r1, r2, r1
 800820e:	6139      	str	r1, [r7, #16]
 8008210:	4629      	mov	r1, r5
 8008212:	eb63 0301 	sbc.w	r3, r3, r1
 8008216:	617b      	str	r3, [r7, #20]
 8008218:	f04f 0200 	mov.w	r2, #0
 800821c:	f04f 0300 	mov.w	r3, #0
 8008220:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008224:	4659      	mov	r1, fp
 8008226:	018b      	lsls	r3, r1, #6
 8008228:	4651      	mov	r1, sl
 800822a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800822e:	4651      	mov	r1, sl
 8008230:	018a      	lsls	r2, r1, #6
 8008232:	4651      	mov	r1, sl
 8008234:	ebb2 0801 	subs.w	r8, r2, r1
 8008238:	4659      	mov	r1, fp
 800823a:	eb63 0901 	sbc.w	r9, r3, r1
 800823e:	f04f 0200 	mov.w	r2, #0
 8008242:	f04f 0300 	mov.w	r3, #0
 8008246:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800824a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800824e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008252:	4690      	mov	r8, r2
 8008254:	4699      	mov	r9, r3
 8008256:	4623      	mov	r3, r4
 8008258:	eb18 0303 	adds.w	r3, r8, r3
 800825c:	60bb      	str	r3, [r7, #8]
 800825e:	462b      	mov	r3, r5
 8008260:	eb49 0303 	adc.w	r3, r9, r3
 8008264:	60fb      	str	r3, [r7, #12]
 8008266:	f04f 0200 	mov.w	r2, #0
 800826a:	f04f 0300 	mov.w	r3, #0
 800826e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8008272:	4629      	mov	r1, r5
 8008274:	024b      	lsls	r3, r1, #9
 8008276:	4621      	mov	r1, r4
 8008278:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800827c:	4621      	mov	r1, r4
 800827e:	024a      	lsls	r2, r1, #9
 8008280:	4610      	mov	r0, r2
 8008282:	4619      	mov	r1, r3
 8008284:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008286:	2200      	movs	r2, #0
 8008288:	62bb      	str	r3, [r7, #40]	@ 0x28
 800828a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800828c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8008290:	f7f8 f80e 	bl	80002b0 <__aeabi_uldivmod>
 8008294:	4602      	mov	r2, r0
 8008296:	460b      	mov	r3, r1
 8008298:	4613      	mov	r3, r2
 800829a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800829c:	e058      	b.n	8008350 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800829e:	4b38      	ldr	r3, [pc, #224]	@ (8008380 <HAL_RCC_GetSysClockFreq+0x200>)
 80082a0:	685b      	ldr	r3, [r3, #4]
 80082a2:	099b      	lsrs	r3, r3, #6
 80082a4:	2200      	movs	r2, #0
 80082a6:	4618      	mov	r0, r3
 80082a8:	4611      	mov	r1, r2
 80082aa:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80082ae:	623b      	str	r3, [r7, #32]
 80082b0:	2300      	movs	r3, #0
 80082b2:	627b      	str	r3, [r7, #36]	@ 0x24
 80082b4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80082b8:	4642      	mov	r2, r8
 80082ba:	464b      	mov	r3, r9
 80082bc:	f04f 0000 	mov.w	r0, #0
 80082c0:	f04f 0100 	mov.w	r1, #0
 80082c4:	0159      	lsls	r1, r3, #5
 80082c6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80082ca:	0150      	lsls	r0, r2, #5
 80082cc:	4602      	mov	r2, r0
 80082ce:	460b      	mov	r3, r1
 80082d0:	4641      	mov	r1, r8
 80082d2:	ebb2 0a01 	subs.w	sl, r2, r1
 80082d6:	4649      	mov	r1, r9
 80082d8:	eb63 0b01 	sbc.w	fp, r3, r1
 80082dc:	f04f 0200 	mov.w	r2, #0
 80082e0:	f04f 0300 	mov.w	r3, #0
 80082e4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80082e8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80082ec:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80082f0:	ebb2 040a 	subs.w	r4, r2, sl
 80082f4:	eb63 050b 	sbc.w	r5, r3, fp
 80082f8:	f04f 0200 	mov.w	r2, #0
 80082fc:	f04f 0300 	mov.w	r3, #0
 8008300:	00eb      	lsls	r3, r5, #3
 8008302:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008306:	00e2      	lsls	r2, r4, #3
 8008308:	4614      	mov	r4, r2
 800830a:	461d      	mov	r5, r3
 800830c:	4643      	mov	r3, r8
 800830e:	18e3      	adds	r3, r4, r3
 8008310:	603b      	str	r3, [r7, #0]
 8008312:	464b      	mov	r3, r9
 8008314:	eb45 0303 	adc.w	r3, r5, r3
 8008318:	607b      	str	r3, [r7, #4]
 800831a:	f04f 0200 	mov.w	r2, #0
 800831e:	f04f 0300 	mov.w	r3, #0
 8008322:	e9d7 4500 	ldrd	r4, r5, [r7]
 8008326:	4629      	mov	r1, r5
 8008328:	028b      	lsls	r3, r1, #10
 800832a:	4621      	mov	r1, r4
 800832c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8008330:	4621      	mov	r1, r4
 8008332:	028a      	lsls	r2, r1, #10
 8008334:	4610      	mov	r0, r2
 8008336:	4619      	mov	r1, r3
 8008338:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800833a:	2200      	movs	r2, #0
 800833c:	61bb      	str	r3, [r7, #24]
 800833e:	61fa      	str	r2, [r7, #28]
 8008340:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008344:	f7f7 ffb4 	bl	80002b0 <__aeabi_uldivmod>
 8008348:	4602      	mov	r2, r0
 800834a:	460b      	mov	r3, r1
 800834c:	4613      	mov	r3, r2
 800834e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8008350:	4b0b      	ldr	r3, [pc, #44]	@ (8008380 <HAL_RCC_GetSysClockFreq+0x200>)
 8008352:	685b      	ldr	r3, [r3, #4]
 8008354:	0c1b      	lsrs	r3, r3, #16
 8008356:	f003 0303 	and.w	r3, r3, #3
 800835a:	3301      	adds	r3, #1
 800835c:	005b      	lsls	r3, r3, #1
 800835e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8008360:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8008362:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008364:	fbb2 f3f3 	udiv	r3, r2, r3
 8008368:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800836a:	e002      	b.n	8008372 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800836c:	4b05      	ldr	r3, [pc, #20]	@ (8008384 <HAL_RCC_GetSysClockFreq+0x204>)
 800836e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8008370:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008372:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8008374:	4618      	mov	r0, r3
 8008376:	3750      	adds	r7, #80	@ 0x50
 8008378:	46bd      	mov	sp, r7
 800837a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800837e:	bf00      	nop
 8008380:	40023800 	.word	0x40023800
 8008384:	00f42400 	.word	0x00f42400
 8008388:	007a1200 	.word	0x007a1200

0800838c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800838c:	b480      	push	{r7}
 800838e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008390:	4b03      	ldr	r3, [pc, #12]	@ (80083a0 <HAL_RCC_GetHCLKFreq+0x14>)
 8008392:	681b      	ldr	r3, [r3, #0]
}
 8008394:	4618      	mov	r0, r3
 8008396:	46bd      	mov	sp, r7
 8008398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800839c:	4770      	bx	lr
 800839e:	bf00      	nop
 80083a0:	20000080 	.word	0x20000080

080083a4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80083a4:	b580      	push	{r7, lr}
 80083a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80083a8:	f7ff fff0 	bl	800838c <HAL_RCC_GetHCLKFreq>
 80083ac:	4602      	mov	r2, r0
 80083ae:	4b05      	ldr	r3, [pc, #20]	@ (80083c4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80083b0:	689b      	ldr	r3, [r3, #8]
 80083b2:	0a9b      	lsrs	r3, r3, #10
 80083b4:	f003 0307 	and.w	r3, r3, #7
 80083b8:	4903      	ldr	r1, [pc, #12]	@ (80083c8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80083ba:	5ccb      	ldrb	r3, [r1, r3]
 80083bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80083c0:	4618      	mov	r0, r3
 80083c2:	bd80      	pop	{r7, pc}
 80083c4:	40023800 	.word	0x40023800
 80083c8:	0800da10 	.word	0x0800da10

080083cc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80083cc:	b580      	push	{r7, lr}
 80083ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80083d0:	f7ff ffdc 	bl	800838c <HAL_RCC_GetHCLKFreq>
 80083d4:	4602      	mov	r2, r0
 80083d6:	4b05      	ldr	r3, [pc, #20]	@ (80083ec <HAL_RCC_GetPCLK2Freq+0x20>)
 80083d8:	689b      	ldr	r3, [r3, #8]
 80083da:	0b5b      	lsrs	r3, r3, #13
 80083dc:	f003 0307 	and.w	r3, r3, #7
 80083e0:	4903      	ldr	r1, [pc, #12]	@ (80083f0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80083e2:	5ccb      	ldrb	r3, [r1, r3]
 80083e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80083e8:	4618      	mov	r0, r3
 80083ea:	bd80      	pop	{r7, pc}
 80083ec:	40023800 	.word	0x40023800
 80083f0:	0800da10 	.word	0x0800da10

080083f4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80083f4:	b480      	push	{r7}
 80083f6:	b083      	sub	sp, #12
 80083f8:	af00      	add	r7, sp, #0
 80083fa:	6078      	str	r0, [r7, #4]
 80083fc:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	220f      	movs	r2, #15
 8008402:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8008404:	4b12      	ldr	r3, [pc, #72]	@ (8008450 <HAL_RCC_GetClockConfig+0x5c>)
 8008406:	689b      	ldr	r3, [r3, #8]
 8008408:	f003 0203 	and.w	r2, r3, #3
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8008410:	4b0f      	ldr	r3, [pc, #60]	@ (8008450 <HAL_RCC_GetClockConfig+0x5c>)
 8008412:	689b      	ldr	r3, [r3, #8]
 8008414:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800841c:	4b0c      	ldr	r3, [pc, #48]	@ (8008450 <HAL_RCC_GetClockConfig+0x5c>)
 800841e:	689b      	ldr	r3, [r3, #8]
 8008420:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8008428:	4b09      	ldr	r3, [pc, #36]	@ (8008450 <HAL_RCC_GetClockConfig+0x5c>)
 800842a:	689b      	ldr	r3, [r3, #8]
 800842c:	08db      	lsrs	r3, r3, #3
 800842e:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8008436:	4b07      	ldr	r3, [pc, #28]	@ (8008454 <HAL_RCC_GetClockConfig+0x60>)
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	f003 0207 	and.w	r2, r3, #7
 800843e:	683b      	ldr	r3, [r7, #0]
 8008440:	601a      	str	r2, [r3, #0]
}
 8008442:	bf00      	nop
 8008444:	370c      	adds	r7, #12
 8008446:	46bd      	mov	sp, r7
 8008448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800844c:	4770      	bx	lr
 800844e:	bf00      	nop
 8008450:	40023800 	.word	0x40023800
 8008454:	40023c00 	.word	0x40023c00

08008458 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008458:	b580      	push	{r7, lr}
 800845a:	b082      	sub	sp, #8
 800845c:	af00      	add	r7, sp, #0
 800845e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	2b00      	cmp	r3, #0
 8008464:	d101      	bne.n	800846a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008466:	2301      	movs	r3, #1
 8008468:	e07b      	b.n	8008562 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800846e:	2b00      	cmp	r3, #0
 8008470:	d108      	bne.n	8008484 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	685b      	ldr	r3, [r3, #4]
 8008476:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800847a:	d009      	beq.n	8008490 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	2200      	movs	r2, #0
 8008480:	61da      	str	r2, [r3, #28]
 8008482:	e005      	b.n	8008490 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	2200      	movs	r2, #0
 8008488:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	2200      	movs	r2, #0
 800848e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	2200      	movs	r2, #0
 8008494:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800849c:	b2db      	uxtb	r3, r3
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d106      	bne.n	80084b0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	2200      	movs	r2, #0
 80084a6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80084aa:	6878      	ldr	r0, [r7, #4]
 80084ac:	f7f8 fe38 	bl	8001120 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	2202      	movs	r2, #2
 80084b4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	681a      	ldr	r2, [r3, #0]
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80084c6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	685b      	ldr	r3, [r3, #4]
 80084cc:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	689b      	ldr	r3, [r3, #8]
 80084d4:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80084d8:	431a      	orrs	r2, r3
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	68db      	ldr	r3, [r3, #12]
 80084de:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80084e2:	431a      	orrs	r2, r3
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	691b      	ldr	r3, [r3, #16]
 80084e8:	f003 0302 	and.w	r3, r3, #2
 80084ec:	431a      	orrs	r2, r3
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	695b      	ldr	r3, [r3, #20]
 80084f2:	f003 0301 	and.w	r3, r3, #1
 80084f6:	431a      	orrs	r2, r3
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	699b      	ldr	r3, [r3, #24]
 80084fc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008500:	431a      	orrs	r2, r3
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	69db      	ldr	r3, [r3, #28]
 8008506:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800850a:	431a      	orrs	r2, r3
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	6a1b      	ldr	r3, [r3, #32]
 8008510:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008514:	ea42 0103 	orr.w	r1, r2, r3
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800851c:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	430a      	orrs	r2, r1
 8008526:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	699b      	ldr	r3, [r3, #24]
 800852c:	0c1b      	lsrs	r3, r3, #16
 800852e:	f003 0104 	and.w	r1, r3, #4
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008536:	f003 0210 	and.w	r2, r3, #16
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	430a      	orrs	r2, r1
 8008540:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	69da      	ldr	r2, [r3, #28]
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8008550:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	2200      	movs	r2, #0
 8008556:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	2201      	movs	r2, #1
 800855c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8008560:	2300      	movs	r3, #0
}
 8008562:	4618      	mov	r0, r3
 8008564:	3708      	adds	r7, #8
 8008566:	46bd      	mov	sp, r7
 8008568:	bd80      	pop	{r7, pc}

0800856a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800856a:	b580      	push	{r7, lr}
 800856c:	b082      	sub	sp, #8
 800856e:	af00      	add	r7, sp, #0
 8008570:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	2b00      	cmp	r3, #0
 8008576:	d101      	bne.n	800857c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008578:	2301      	movs	r3, #1
 800857a:	e041      	b.n	8008600 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008582:	b2db      	uxtb	r3, r3
 8008584:	2b00      	cmp	r3, #0
 8008586:	d106      	bne.n	8008596 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	2200      	movs	r2, #0
 800858c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008590:	6878      	ldr	r0, [r7, #4]
 8008592:	f000 f839 	bl	8008608 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	2202      	movs	r2, #2
 800859a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	681a      	ldr	r2, [r3, #0]
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	3304      	adds	r3, #4
 80085a6:	4619      	mov	r1, r3
 80085a8:	4610      	mov	r0, r2
 80085aa:	f000 f9b1 	bl	8008910 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	2201      	movs	r2, #1
 80085b2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	2201      	movs	r2, #1
 80085ba:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	2201      	movs	r2, #1
 80085c2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	2201      	movs	r2, #1
 80085ca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	2201      	movs	r2, #1
 80085d2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	2201      	movs	r2, #1
 80085da:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	2201      	movs	r2, #1
 80085e2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	2201      	movs	r2, #1
 80085ea:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	2201      	movs	r2, #1
 80085f2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	2201      	movs	r2, #1
 80085fa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80085fe:	2300      	movs	r3, #0
}
 8008600:	4618      	mov	r0, r3
 8008602:	3708      	adds	r7, #8
 8008604:	46bd      	mov	sp, r7
 8008606:	bd80      	pop	{r7, pc}

08008608 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8008608:	b480      	push	{r7}
 800860a:	b083      	sub	sp, #12
 800860c:	af00      	add	r7, sp, #0
 800860e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8008610:	bf00      	nop
 8008612:	370c      	adds	r7, #12
 8008614:	46bd      	mov	sp, r7
 8008616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800861a:	4770      	bx	lr

0800861c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800861c:	b480      	push	{r7}
 800861e:	b085      	sub	sp, #20
 8008620:	af00      	add	r7, sp, #0
 8008622:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800862a:	b2db      	uxtb	r3, r3
 800862c:	2b01      	cmp	r3, #1
 800862e:	d001      	beq.n	8008634 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008630:	2301      	movs	r3, #1
 8008632:	e044      	b.n	80086be <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	2202      	movs	r2, #2
 8008638:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	68da      	ldr	r2, [r3, #12]
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	f042 0201 	orr.w	r2, r2, #1
 800864a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	4a1e      	ldr	r2, [pc, #120]	@ (80086cc <HAL_TIM_Base_Start_IT+0xb0>)
 8008652:	4293      	cmp	r3, r2
 8008654:	d018      	beq.n	8008688 <HAL_TIM_Base_Start_IT+0x6c>
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800865e:	d013      	beq.n	8008688 <HAL_TIM_Base_Start_IT+0x6c>
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	4a1a      	ldr	r2, [pc, #104]	@ (80086d0 <HAL_TIM_Base_Start_IT+0xb4>)
 8008666:	4293      	cmp	r3, r2
 8008668:	d00e      	beq.n	8008688 <HAL_TIM_Base_Start_IT+0x6c>
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	4a19      	ldr	r2, [pc, #100]	@ (80086d4 <HAL_TIM_Base_Start_IT+0xb8>)
 8008670:	4293      	cmp	r3, r2
 8008672:	d009      	beq.n	8008688 <HAL_TIM_Base_Start_IT+0x6c>
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	4a17      	ldr	r2, [pc, #92]	@ (80086d8 <HAL_TIM_Base_Start_IT+0xbc>)
 800867a:	4293      	cmp	r3, r2
 800867c:	d004      	beq.n	8008688 <HAL_TIM_Base_Start_IT+0x6c>
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	4a16      	ldr	r2, [pc, #88]	@ (80086dc <HAL_TIM_Base_Start_IT+0xc0>)
 8008684:	4293      	cmp	r3, r2
 8008686:	d111      	bne.n	80086ac <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	689b      	ldr	r3, [r3, #8]
 800868e:	f003 0307 	and.w	r3, r3, #7
 8008692:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	2b06      	cmp	r3, #6
 8008698:	d010      	beq.n	80086bc <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	681a      	ldr	r2, [r3, #0]
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	f042 0201 	orr.w	r2, r2, #1
 80086a8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80086aa:	e007      	b.n	80086bc <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	681a      	ldr	r2, [r3, #0]
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	f042 0201 	orr.w	r2, r2, #1
 80086ba:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80086bc:	2300      	movs	r3, #0
}
 80086be:	4618      	mov	r0, r3
 80086c0:	3714      	adds	r7, #20
 80086c2:	46bd      	mov	sp, r7
 80086c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086c8:	4770      	bx	lr
 80086ca:	bf00      	nop
 80086cc:	40010000 	.word	0x40010000
 80086d0:	40000400 	.word	0x40000400
 80086d4:	40000800 	.word	0x40000800
 80086d8:	40000c00 	.word	0x40000c00
 80086dc:	40014000 	.word	0x40014000

080086e0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80086e0:	b580      	push	{r7, lr}
 80086e2:	b084      	sub	sp, #16
 80086e4:	af00      	add	r7, sp, #0
 80086e6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	68db      	ldr	r3, [r3, #12]
 80086ee:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	691b      	ldr	r3, [r3, #16]
 80086f6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80086f8:	68bb      	ldr	r3, [r7, #8]
 80086fa:	f003 0302 	and.w	r3, r3, #2
 80086fe:	2b00      	cmp	r3, #0
 8008700:	d020      	beq.n	8008744 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	f003 0302 	and.w	r3, r3, #2
 8008708:	2b00      	cmp	r3, #0
 800870a:	d01b      	beq.n	8008744 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	f06f 0202 	mvn.w	r2, #2
 8008714:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	2201      	movs	r2, #1
 800871a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	699b      	ldr	r3, [r3, #24]
 8008722:	f003 0303 	and.w	r3, r3, #3
 8008726:	2b00      	cmp	r3, #0
 8008728:	d003      	beq.n	8008732 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800872a:	6878      	ldr	r0, [r7, #4]
 800872c:	f000 f8d2 	bl	80088d4 <HAL_TIM_IC_CaptureCallback>
 8008730:	e005      	b.n	800873e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008732:	6878      	ldr	r0, [r7, #4]
 8008734:	f000 f8c4 	bl	80088c0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008738:	6878      	ldr	r0, [r7, #4]
 800873a:	f000 f8d5 	bl	80088e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	2200      	movs	r2, #0
 8008742:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8008744:	68bb      	ldr	r3, [r7, #8]
 8008746:	f003 0304 	and.w	r3, r3, #4
 800874a:	2b00      	cmp	r3, #0
 800874c:	d020      	beq.n	8008790 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	f003 0304 	and.w	r3, r3, #4
 8008754:	2b00      	cmp	r3, #0
 8008756:	d01b      	beq.n	8008790 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	f06f 0204 	mvn.w	r2, #4
 8008760:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	2202      	movs	r2, #2
 8008766:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	699b      	ldr	r3, [r3, #24]
 800876e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008772:	2b00      	cmp	r3, #0
 8008774:	d003      	beq.n	800877e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008776:	6878      	ldr	r0, [r7, #4]
 8008778:	f000 f8ac 	bl	80088d4 <HAL_TIM_IC_CaptureCallback>
 800877c:	e005      	b.n	800878a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800877e:	6878      	ldr	r0, [r7, #4]
 8008780:	f000 f89e 	bl	80088c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008784:	6878      	ldr	r0, [r7, #4]
 8008786:	f000 f8af 	bl	80088e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	2200      	movs	r2, #0
 800878e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8008790:	68bb      	ldr	r3, [r7, #8]
 8008792:	f003 0308 	and.w	r3, r3, #8
 8008796:	2b00      	cmp	r3, #0
 8008798:	d020      	beq.n	80087dc <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	f003 0308 	and.w	r3, r3, #8
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	d01b      	beq.n	80087dc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	f06f 0208 	mvn.w	r2, #8
 80087ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	2204      	movs	r2, #4
 80087b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	69db      	ldr	r3, [r3, #28]
 80087ba:	f003 0303 	and.w	r3, r3, #3
 80087be:	2b00      	cmp	r3, #0
 80087c0:	d003      	beq.n	80087ca <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80087c2:	6878      	ldr	r0, [r7, #4]
 80087c4:	f000 f886 	bl	80088d4 <HAL_TIM_IC_CaptureCallback>
 80087c8:	e005      	b.n	80087d6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80087ca:	6878      	ldr	r0, [r7, #4]
 80087cc:	f000 f878 	bl	80088c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80087d0:	6878      	ldr	r0, [r7, #4]
 80087d2:	f000 f889 	bl	80088e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	2200      	movs	r2, #0
 80087da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80087dc:	68bb      	ldr	r3, [r7, #8]
 80087de:	f003 0310 	and.w	r3, r3, #16
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	d020      	beq.n	8008828 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80087e6:	68fb      	ldr	r3, [r7, #12]
 80087e8:	f003 0310 	and.w	r3, r3, #16
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	d01b      	beq.n	8008828 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	f06f 0210 	mvn.w	r2, #16
 80087f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	2208      	movs	r2, #8
 80087fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	69db      	ldr	r3, [r3, #28]
 8008806:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800880a:	2b00      	cmp	r3, #0
 800880c:	d003      	beq.n	8008816 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800880e:	6878      	ldr	r0, [r7, #4]
 8008810:	f000 f860 	bl	80088d4 <HAL_TIM_IC_CaptureCallback>
 8008814:	e005      	b.n	8008822 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008816:	6878      	ldr	r0, [r7, #4]
 8008818:	f000 f852 	bl	80088c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800881c:	6878      	ldr	r0, [r7, #4]
 800881e:	f000 f863 	bl	80088e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	2200      	movs	r2, #0
 8008826:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8008828:	68bb      	ldr	r3, [r7, #8]
 800882a:	f003 0301 	and.w	r3, r3, #1
 800882e:	2b00      	cmp	r3, #0
 8008830:	d00c      	beq.n	800884c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	f003 0301 	and.w	r3, r3, #1
 8008838:	2b00      	cmp	r3, #0
 800883a:	d007      	beq.n	800884c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	f06f 0201 	mvn.w	r2, #1
 8008844:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008846:	6878      	ldr	r0, [r7, #4]
 8008848:	f7f8 fc10 	bl	800106c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800884c:	68bb      	ldr	r3, [r7, #8]
 800884e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008852:	2b00      	cmp	r3, #0
 8008854:	d00c      	beq.n	8008870 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800885c:	2b00      	cmp	r3, #0
 800885e:	d007      	beq.n	8008870 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8008868:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800886a:	6878      	ldr	r0, [r7, #4]
 800886c:	f000 f8e6 	bl	8008a3c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8008870:	68bb      	ldr	r3, [r7, #8]
 8008872:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008876:	2b00      	cmp	r3, #0
 8008878:	d00c      	beq.n	8008894 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008880:	2b00      	cmp	r3, #0
 8008882:	d007      	beq.n	8008894 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800888c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800888e:	6878      	ldr	r0, [r7, #4]
 8008890:	f000 f834 	bl	80088fc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8008894:	68bb      	ldr	r3, [r7, #8]
 8008896:	f003 0320 	and.w	r3, r3, #32
 800889a:	2b00      	cmp	r3, #0
 800889c:	d00c      	beq.n	80088b8 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800889e:	68fb      	ldr	r3, [r7, #12]
 80088a0:	f003 0320 	and.w	r3, r3, #32
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	d007      	beq.n	80088b8 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	f06f 0220 	mvn.w	r2, #32
 80088b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80088b2:	6878      	ldr	r0, [r7, #4]
 80088b4:	f000 f8b8 	bl	8008a28 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80088b8:	bf00      	nop
 80088ba:	3710      	adds	r7, #16
 80088bc:	46bd      	mov	sp, r7
 80088be:	bd80      	pop	{r7, pc}

080088c0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80088c0:	b480      	push	{r7}
 80088c2:	b083      	sub	sp, #12
 80088c4:	af00      	add	r7, sp, #0
 80088c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80088c8:	bf00      	nop
 80088ca:	370c      	adds	r7, #12
 80088cc:	46bd      	mov	sp, r7
 80088ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088d2:	4770      	bx	lr

080088d4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80088d4:	b480      	push	{r7}
 80088d6:	b083      	sub	sp, #12
 80088d8:	af00      	add	r7, sp, #0
 80088da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80088dc:	bf00      	nop
 80088de:	370c      	adds	r7, #12
 80088e0:	46bd      	mov	sp, r7
 80088e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088e6:	4770      	bx	lr

080088e8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80088e8:	b480      	push	{r7}
 80088ea:	b083      	sub	sp, #12
 80088ec:	af00      	add	r7, sp, #0
 80088ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80088f0:	bf00      	nop
 80088f2:	370c      	adds	r7, #12
 80088f4:	46bd      	mov	sp, r7
 80088f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088fa:	4770      	bx	lr

080088fc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80088fc:	b480      	push	{r7}
 80088fe:	b083      	sub	sp, #12
 8008900:	af00      	add	r7, sp, #0
 8008902:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008904:	bf00      	nop
 8008906:	370c      	adds	r7, #12
 8008908:	46bd      	mov	sp, r7
 800890a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800890e:	4770      	bx	lr

08008910 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008910:	b480      	push	{r7}
 8008912:	b085      	sub	sp, #20
 8008914:	af00      	add	r7, sp, #0
 8008916:	6078      	str	r0, [r7, #4]
 8008918:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	4a3a      	ldr	r2, [pc, #232]	@ (8008a0c <TIM_Base_SetConfig+0xfc>)
 8008924:	4293      	cmp	r3, r2
 8008926:	d00f      	beq.n	8008948 <TIM_Base_SetConfig+0x38>
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800892e:	d00b      	beq.n	8008948 <TIM_Base_SetConfig+0x38>
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	4a37      	ldr	r2, [pc, #220]	@ (8008a10 <TIM_Base_SetConfig+0x100>)
 8008934:	4293      	cmp	r3, r2
 8008936:	d007      	beq.n	8008948 <TIM_Base_SetConfig+0x38>
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	4a36      	ldr	r2, [pc, #216]	@ (8008a14 <TIM_Base_SetConfig+0x104>)
 800893c:	4293      	cmp	r3, r2
 800893e:	d003      	beq.n	8008948 <TIM_Base_SetConfig+0x38>
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	4a35      	ldr	r2, [pc, #212]	@ (8008a18 <TIM_Base_SetConfig+0x108>)
 8008944:	4293      	cmp	r3, r2
 8008946:	d108      	bne.n	800895a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800894e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008950:	683b      	ldr	r3, [r7, #0]
 8008952:	685b      	ldr	r3, [r3, #4]
 8008954:	68fa      	ldr	r2, [r7, #12]
 8008956:	4313      	orrs	r3, r2
 8008958:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	4a2b      	ldr	r2, [pc, #172]	@ (8008a0c <TIM_Base_SetConfig+0xfc>)
 800895e:	4293      	cmp	r3, r2
 8008960:	d01b      	beq.n	800899a <TIM_Base_SetConfig+0x8a>
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008968:	d017      	beq.n	800899a <TIM_Base_SetConfig+0x8a>
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	4a28      	ldr	r2, [pc, #160]	@ (8008a10 <TIM_Base_SetConfig+0x100>)
 800896e:	4293      	cmp	r3, r2
 8008970:	d013      	beq.n	800899a <TIM_Base_SetConfig+0x8a>
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	4a27      	ldr	r2, [pc, #156]	@ (8008a14 <TIM_Base_SetConfig+0x104>)
 8008976:	4293      	cmp	r3, r2
 8008978:	d00f      	beq.n	800899a <TIM_Base_SetConfig+0x8a>
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	4a26      	ldr	r2, [pc, #152]	@ (8008a18 <TIM_Base_SetConfig+0x108>)
 800897e:	4293      	cmp	r3, r2
 8008980:	d00b      	beq.n	800899a <TIM_Base_SetConfig+0x8a>
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	4a25      	ldr	r2, [pc, #148]	@ (8008a1c <TIM_Base_SetConfig+0x10c>)
 8008986:	4293      	cmp	r3, r2
 8008988:	d007      	beq.n	800899a <TIM_Base_SetConfig+0x8a>
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	4a24      	ldr	r2, [pc, #144]	@ (8008a20 <TIM_Base_SetConfig+0x110>)
 800898e:	4293      	cmp	r3, r2
 8008990:	d003      	beq.n	800899a <TIM_Base_SetConfig+0x8a>
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	4a23      	ldr	r2, [pc, #140]	@ (8008a24 <TIM_Base_SetConfig+0x114>)
 8008996:	4293      	cmp	r3, r2
 8008998:	d108      	bne.n	80089ac <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800899a:	68fb      	ldr	r3, [r7, #12]
 800899c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80089a0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80089a2:	683b      	ldr	r3, [r7, #0]
 80089a4:	68db      	ldr	r3, [r3, #12]
 80089a6:	68fa      	ldr	r2, [r7, #12]
 80089a8:	4313      	orrs	r3, r2
 80089aa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80089b2:	683b      	ldr	r3, [r7, #0]
 80089b4:	695b      	ldr	r3, [r3, #20]
 80089b6:	4313      	orrs	r3, r2
 80089b8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	68fa      	ldr	r2, [r7, #12]
 80089be:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80089c0:	683b      	ldr	r3, [r7, #0]
 80089c2:	689a      	ldr	r2, [r3, #8]
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80089c8:	683b      	ldr	r3, [r7, #0]
 80089ca:	681a      	ldr	r2, [r3, #0]
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	4a0e      	ldr	r2, [pc, #56]	@ (8008a0c <TIM_Base_SetConfig+0xfc>)
 80089d4:	4293      	cmp	r3, r2
 80089d6:	d103      	bne.n	80089e0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80089d8:	683b      	ldr	r3, [r7, #0]
 80089da:	691a      	ldr	r2, [r3, #16]
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	2201      	movs	r2, #1
 80089e4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	691b      	ldr	r3, [r3, #16]
 80089ea:	f003 0301 	and.w	r3, r3, #1
 80089ee:	2b01      	cmp	r3, #1
 80089f0:	d105      	bne.n	80089fe <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	691b      	ldr	r3, [r3, #16]
 80089f6:	f023 0201 	bic.w	r2, r3, #1
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	611a      	str	r2, [r3, #16]
  }
}
 80089fe:	bf00      	nop
 8008a00:	3714      	adds	r7, #20
 8008a02:	46bd      	mov	sp, r7
 8008a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a08:	4770      	bx	lr
 8008a0a:	bf00      	nop
 8008a0c:	40010000 	.word	0x40010000
 8008a10:	40000400 	.word	0x40000400
 8008a14:	40000800 	.word	0x40000800
 8008a18:	40000c00 	.word	0x40000c00
 8008a1c:	40014000 	.word	0x40014000
 8008a20:	40014400 	.word	0x40014400
 8008a24:	40014800 	.word	0x40014800

08008a28 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008a28:	b480      	push	{r7}
 8008a2a:	b083      	sub	sp, #12
 8008a2c:	af00      	add	r7, sp, #0
 8008a2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008a30:	bf00      	nop
 8008a32:	370c      	adds	r7, #12
 8008a34:	46bd      	mov	sp, r7
 8008a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a3a:	4770      	bx	lr

08008a3c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008a3c:	b480      	push	{r7}
 8008a3e:	b083      	sub	sp, #12
 8008a40:	af00      	add	r7, sp, #0
 8008a42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008a44:	bf00      	nop
 8008a46:	370c      	adds	r7, #12
 8008a48:	46bd      	mov	sp, r7
 8008a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a4e:	4770      	bx	lr

08008a50 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008a50:	b580      	push	{r7, lr}
 8008a52:	b082      	sub	sp, #8
 8008a54:	af00      	add	r7, sp, #0
 8008a56:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	d101      	bne.n	8008a62 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008a5e:	2301      	movs	r3, #1
 8008a60:	e042      	b.n	8008ae8 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008a68:	b2db      	uxtb	r3, r3
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	d106      	bne.n	8008a7c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	2200      	movs	r2, #0
 8008a72:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008a76:	6878      	ldr	r0, [r7, #4]
 8008a78:	f7f8 fb9a 	bl	80011b0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	2224      	movs	r2, #36	@ 0x24
 8008a80:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	68da      	ldr	r2, [r3, #12]
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8008a92:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008a94:	6878      	ldr	r0, [r7, #4]
 8008a96:	f000 f973 	bl	8008d80 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	691a      	ldr	r2, [r3, #16]
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8008aa8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	695a      	ldr	r2, [r3, #20]
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8008ab8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	68da      	ldr	r2, [r3, #12]
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8008ac8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	2200      	movs	r2, #0
 8008ace:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	2220      	movs	r2, #32
 8008ad4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	2220      	movs	r2, #32
 8008adc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	2200      	movs	r2, #0
 8008ae4:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8008ae6:	2300      	movs	r3, #0
}
 8008ae8:	4618      	mov	r0, r3
 8008aea:	3708      	adds	r7, #8
 8008aec:	46bd      	mov	sp, r7
 8008aee:	bd80      	pop	{r7, pc}

08008af0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008af0:	b580      	push	{r7, lr}
 8008af2:	b08a      	sub	sp, #40	@ 0x28
 8008af4:	af02      	add	r7, sp, #8
 8008af6:	60f8      	str	r0, [r7, #12]
 8008af8:	60b9      	str	r1, [r7, #8]
 8008afa:	603b      	str	r3, [r7, #0]
 8008afc:	4613      	mov	r3, r2
 8008afe:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8008b00:	2300      	movs	r3, #0
 8008b02:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008b04:	68fb      	ldr	r3, [r7, #12]
 8008b06:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008b0a:	b2db      	uxtb	r3, r3
 8008b0c:	2b20      	cmp	r3, #32
 8008b0e:	d175      	bne.n	8008bfc <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8008b10:	68bb      	ldr	r3, [r7, #8]
 8008b12:	2b00      	cmp	r3, #0
 8008b14:	d002      	beq.n	8008b1c <HAL_UART_Transmit+0x2c>
 8008b16:	88fb      	ldrh	r3, [r7, #6]
 8008b18:	2b00      	cmp	r3, #0
 8008b1a:	d101      	bne.n	8008b20 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8008b1c:	2301      	movs	r3, #1
 8008b1e:	e06e      	b.n	8008bfe <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	2200      	movs	r2, #0
 8008b24:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	2221      	movs	r2, #33	@ 0x21
 8008b2a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008b2e:	f7fe fcff 	bl	8007530 <HAL_GetTick>
 8008b32:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	88fa      	ldrh	r2, [r7, #6]
 8008b38:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8008b3a:	68fb      	ldr	r3, [r7, #12]
 8008b3c:	88fa      	ldrh	r2, [r7, #6]
 8008b3e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008b40:	68fb      	ldr	r3, [r7, #12]
 8008b42:	689b      	ldr	r3, [r3, #8]
 8008b44:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008b48:	d108      	bne.n	8008b5c <HAL_UART_Transmit+0x6c>
 8008b4a:	68fb      	ldr	r3, [r7, #12]
 8008b4c:	691b      	ldr	r3, [r3, #16]
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	d104      	bne.n	8008b5c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8008b52:	2300      	movs	r3, #0
 8008b54:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008b56:	68bb      	ldr	r3, [r7, #8]
 8008b58:	61bb      	str	r3, [r7, #24]
 8008b5a:	e003      	b.n	8008b64 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8008b5c:	68bb      	ldr	r3, [r7, #8]
 8008b5e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008b60:	2300      	movs	r3, #0
 8008b62:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8008b64:	e02e      	b.n	8008bc4 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008b66:	683b      	ldr	r3, [r7, #0]
 8008b68:	9300      	str	r3, [sp, #0]
 8008b6a:	697b      	ldr	r3, [r7, #20]
 8008b6c:	2200      	movs	r2, #0
 8008b6e:	2180      	movs	r1, #128	@ 0x80
 8008b70:	68f8      	ldr	r0, [r7, #12]
 8008b72:	f000 f848 	bl	8008c06 <UART_WaitOnFlagUntilTimeout>
 8008b76:	4603      	mov	r3, r0
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	d005      	beq.n	8008b88 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8008b7c:	68fb      	ldr	r3, [r7, #12]
 8008b7e:	2220      	movs	r2, #32
 8008b80:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8008b84:	2303      	movs	r3, #3
 8008b86:	e03a      	b.n	8008bfe <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8008b88:	69fb      	ldr	r3, [r7, #28]
 8008b8a:	2b00      	cmp	r3, #0
 8008b8c:	d10b      	bne.n	8008ba6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008b8e:	69bb      	ldr	r3, [r7, #24]
 8008b90:	881b      	ldrh	r3, [r3, #0]
 8008b92:	461a      	mov	r2, r3
 8008b94:	68fb      	ldr	r3, [r7, #12]
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008b9c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8008b9e:	69bb      	ldr	r3, [r7, #24]
 8008ba0:	3302      	adds	r3, #2
 8008ba2:	61bb      	str	r3, [r7, #24]
 8008ba4:	e007      	b.n	8008bb6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8008ba6:	69fb      	ldr	r3, [r7, #28]
 8008ba8:	781a      	ldrb	r2, [r3, #0]
 8008baa:	68fb      	ldr	r3, [r7, #12]
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8008bb0:	69fb      	ldr	r3, [r7, #28]
 8008bb2:	3301      	adds	r3, #1
 8008bb4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008bb6:	68fb      	ldr	r3, [r7, #12]
 8008bb8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8008bba:	b29b      	uxth	r3, r3
 8008bbc:	3b01      	subs	r3, #1
 8008bbe:	b29a      	uxth	r2, r3
 8008bc0:	68fb      	ldr	r3, [r7, #12]
 8008bc2:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8008bc4:	68fb      	ldr	r3, [r7, #12]
 8008bc6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8008bc8:	b29b      	uxth	r3, r3
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	d1cb      	bne.n	8008b66 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008bce:	683b      	ldr	r3, [r7, #0]
 8008bd0:	9300      	str	r3, [sp, #0]
 8008bd2:	697b      	ldr	r3, [r7, #20]
 8008bd4:	2200      	movs	r2, #0
 8008bd6:	2140      	movs	r1, #64	@ 0x40
 8008bd8:	68f8      	ldr	r0, [r7, #12]
 8008bda:	f000 f814 	bl	8008c06 <UART_WaitOnFlagUntilTimeout>
 8008bde:	4603      	mov	r3, r0
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	d005      	beq.n	8008bf0 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	2220      	movs	r2, #32
 8008be8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8008bec:	2303      	movs	r3, #3
 8008bee:	e006      	b.n	8008bfe <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	2220      	movs	r2, #32
 8008bf4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8008bf8:	2300      	movs	r3, #0
 8008bfa:	e000      	b.n	8008bfe <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8008bfc:	2302      	movs	r3, #2
  }
}
 8008bfe:	4618      	mov	r0, r3
 8008c00:	3720      	adds	r7, #32
 8008c02:	46bd      	mov	sp, r7
 8008c04:	bd80      	pop	{r7, pc}

08008c06 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8008c06:	b580      	push	{r7, lr}
 8008c08:	b086      	sub	sp, #24
 8008c0a:	af00      	add	r7, sp, #0
 8008c0c:	60f8      	str	r0, [r7, #12]
 8008c0e:	60b9      	str	r1, [r7, #8]
 8008c10:	603b      	str	r3, [r7, #0]
 8008c12:	4613      	mov	r3, r2
 8008c14:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008c16:	e03b      	b.n	8008c90 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008c18:	6a3b      	ldr	r3, [r7, #32]
 8008c1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c1e:	d037      	beq.n	8008c90 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008c20:	f7fe fc86 	bl	8007530 <HAL_GetTick>
 8008c24:	4602      	mov	r2, r0
 8008c26:	683b      	ldr	r3, [r7, #0]
 8008c28:	1ad3      	subs	r3, r2, r3
 8008c2a:	6a3a      	ldr	r2, [r7, #32]
 8008c2c:	429a      	cmp	r2, r3
 8008c2e:	d302      	bcc.n	8008c36 <UART_WaitOnFlagUntilTimeout+0x30>
 8008c30:	6a3b      	ldr	r3, [r7, #32]
 8008c32:	2b00      	cmp	r3, #0
 8008c34:	d101      	bne.n	8008c3a <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008c36:	2303      	movs	r3, #3
 8008c38:	e03a      	b.n	8008cb0 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008c3a:	68fb      	ldr	r3, [r7, #12]
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	68db      	ldr	r3, [r3, #12]
 8008c40:	f003 0304 	and.w	r3, r3, #4
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	d023      	beq.n	8008c90 <UART_WaitOnFlagUntilTimeout+0x8a>
 8008c48:	68bb      	ldr	r3, [r7, #8]
 8008c4a:	2b80      	cmp	r3, #128	@ 0x80
 8008c4c:	d020      	beq.n	8008c90 <UART_WaitOnFlagUntilTimeout+0x8a>
 8008c4e:	68bb      	ldr	r3, [r7, #8]
 8008c50:	2b40      	cmp	r3, #64	@ 0x40
 8008c52:	d01d      	beq.n	8008c90 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008c54:	68fb      	ldr	r3, [r7, #12]
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	f003 0308 	and.w	r3, r3, #8
 8008c5e:	2b08      	cmp	r3, #8
 8008c60:	d116      	bne.n	8008c90 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8008c62:	2300      	movs	r3, #0
 8008c64:	617b      	str	r3, [r7, #20]
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	617b      	str	r3, [r7, #20]
 8008c6e:	68fb      	ldr	r3, [r7, #12]
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	685b      	ldr	r3, [r3, #4]
 8008c74:	617b      	str	r3, [r7, #20]
 8008c76:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008c78:	68f8      	ldr	r0, [r7, #12]
 8008c7a:	f000 f81d 	bl	8008cb8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008c7e:	68fb      	ldr	r3, [r7, #12]
 8008c80:	2208      	movs	r2, #8
 8008c82:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008c84:	68fb      	ldr	r3, [r7, #12]
 8008c86:	2200      	movs	r2, #0
 8008c88:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8008c8c:	2301      	movs	r3, #1
 8008c8e:	e00f      	b.n	8008cb0 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008c90:	68fb      	ldr	r3, [r7, #12]
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	681a      	ldr	r2, [r3, #0]
 8008c96:	68bb      	ldr	r3, [r7, #8]
 8008c98:	4013      	ands	r3, r2
 8008c9a:	68ba      	ldr	r2, [r7, #8]
 8008c9c:	429a      	cmp	r2, r3
 8008c9e:	bf0c      	ite	eq
 8008ca0:	2301      	moveq	r3, #1
 8008ca2:	2300      	movne	r3, #0
 8008ca4:	b2db      	uxtb	r3, r3
 8008ca6:	461a      	mov	r2, r3
 8008ca8:	79fb      	ldrb	r3, [r7, #7]
 8008caa:	429a      	cmp	r2, r3
 8008cac:	d0b4      	beq.n	8008c18 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008cae:	2300      	movs	r3, #0
}
 8008cb0:	4618      	mov	r0, r3
 8008cb2:	3718      	adds	r7, #24
 8008cb4:	46bd      	mov	sp, r7
 8008cb6:	bd80      	pop	{r7, pc}

08008cb8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008cb8:	b480      	push	{r7}
 8008cba:	b095      	sub	sp, #84	@ 0x54
 8008cbc:	af00      	add	r7, sp, #0
 8008cbe:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	330c      	adds	r3, #12
 8008cc6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cc8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008cca:	e853 3f00 	ldrex	r3, [r3]
 8008cce:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008cd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008cd2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008cd6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	330c      	adds	r3, #12
 8008cde:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8008ce0:	643a      	str	r2, [r7, #64]	@ 0x40
 8008ce2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ce4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008ce6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008ce8:	e841 2300 	strex	r3, r2, [r1]
 8008cec:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008cee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	d1e5      	bne.n	8008cc0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	3314      	adds	r3, #20
 8008cfa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cfc:	6a3b      	ldr	r3, [r7, #32]
 8008cfe:	e853 3f00 	ldrex	r3, [r3]
 8008d02:	61fb      	str	r3, [r7, #28]
   return(result);
 8008d04:	69fb      	ldr	r3, [r7, #28]
 8008d06:	f023 0301 	bic.w	r3, r3, #1
 8008d0a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	3314      	adds	r3, #20
 8008d12:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008d14:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008d16:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d18:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008d1a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008d1c:	e841 2300 	strex	r3, r2, [r1]
 8008d20:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008d22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	d1e5      	bne.n	8008cf4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008d2c:	2b01      	cmp	r3, #1
 8008d2e:	d119      	bne.n	8008d64 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	330c      	adds	r3, #12
 8008d36:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d38:	68fb      	ldr	r3, [r7, #12]
 8008d3a:	e853 3f00 	ldrex	r3, [r3]
 8008d3e:	60bb      	str	r3, [r7, #8]
   return(result);
 8008d40:	68bb      	ldr	r3, [r7, #8]
 8008d42:	f023 0310 	bic.w	r3, r3, #16
 8008d46:	647b      	str	r3, [r7, #68]	@ 0x44
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	330c      	adds	r3, #12
 8008d4e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008d50:	61ba      	str	r2, [r7, #24]
 8008d52:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d54:	6979      	ldr	r1, [r7, #20]
 8008d56:	69ba      	ldr	r2, [r7, #24]
 8008d58:	e841 2300 	strex	r3, r2, [r1]
 8008d5c:	613b      	str	r3, [r7, #16]
   return(result);
 8008d5e:	693b      	ldr	r3, [r7, #16]
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	d1e5      	bne.n	8008d30 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	2220      	movs	r2, #32
 8008d68:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	2200      	movs	r2, #0
 8008d70:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8008d72:	bf00      	nop
 8008d74:	3754      	adds	r7, #84	@ 0x54
 8008d76:	46bd      	mov	sp, r7
 8008d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d7c:	4770      	bx	lr
	...

08008d80 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008d80:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008d84:	b0c0      	sub	sp, #256	@ 0x100
 8008d86:	af00      	add	r7, sp, #0
 8008d88:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008d8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	691b      	ldr	r3, [r3, #16]
 8008d94:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8008d98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008d9c:	68d9      	ldr	r1, [r3, #12]
 8008d9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008da2:	681a      	ldr	r2, [r3, #0]
 8008da4:	ea40 0301 	orr.w	r3, r0, r1
 8008da8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008daa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008dae:	689a      	ldr	r2, [r3, #8]
 8008db0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008db4:	691b      	ldr	r3, [r3, #16]
 8008db6:	431a      	orrs	r2, r3
 8008db8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008dbc:	695b      	ldr	r3, [r3, #20]
 8008dbe:	431a      	orrs	r2, r3
 8008dc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008dc4:	69db      	ldr	r3, [r3, #28]
 8008dc6:	4313      	orrs	r3, r2
 8008dc8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8008dcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	68db      	ldr	r3, [r3, #12]
 8008dd4:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8008dd8:	f021 010c 	bic.w	r1, r1, #12
 8008ddc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008de0:	681a      	ldr	r2, [r3, #0]
 8008de2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8008de6:	430b      	orrs	r3, r1
 8008de8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008dea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	695b      	ldr	r3, [r3, #20]
 8008df2:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8008df6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008dfa:	6999      	ldr	r1, [r3, #24]
 8008dfc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008e00:	681a      	ldr	r2, [r3, #0]
 8008e02:	ea40 0301 	orr.w	r3, r0, r1
 8008e06:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008e08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008e0c:	681a      	ldr	r2, [r3, #0]
 8008e0e:	4b8f      	ldr	r3, [pc, #572]	@ (800904c <UART_SetConfig+0x2cc>)
 8008e10:	429a      	cmp	r2, r3
 8008e12:	d005      	beq.n	8008e20 <UART_SetConfig+0xa0>
 8008e14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008e18:	681a      	ldr	r2, [r3, #0]
 8008e1a:	4b8d      	ldr	r3, [pc, #564]	@ (8009050 <UART_SetConfig+0x2d0>)
 8008e1c:	429a      	cmp	r2, r3
 8008e1e:	d104      	bne.n	8008e2a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008e20:	f7ff fad4 	bl	80083cc <HAL_RCC_GetPCLK2Freq>
 8008e24:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8008e28:	e003      	b.n	8008e32 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008e2a:	f7ff fabb 	bl	80083a4 <HAL_RCC_GetPCLK1Freq>
 8008e2e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008e32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008e36:	69db      	ldr	r3, [r3, #28]
 8008e38:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008e3c:	f040 810c 	bne.w	8009058 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008e40:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008e44:	2200      	movs	r2, #0
 8008e46:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8008e4a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8008e4e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8008e52:	4622      	mov	r2, r4
 8008e54:	462b      	mov	r3, r5
 8008e56:	1891      	adds	r1, r2, r2
 8008e58:	65b9      	str	r1, [r7, #88]	@ 0x58
 8008e5a:	415b      	adcs	r3, r3
 8008e5c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008e5e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8008e62:	4621      	mov	r1, r4
 8008e64:	eb12 0801 	adds.w	r8, r2, r1
 8008e68:	4629      	mov	r1, r5
 8008e6a:	eb43 0901 	adc.w	r9, r3, r1
 8008e6e:	f04f 0200 	mov.w	r2, #0
 8008e72:	f04f 0300 	mov.w	r3, #0
 8008e76:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008e7a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008e7e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008e82:	4690      	mov	r8, r2
 8008e84:	4699      	mov	r9, r3
 8008e86:	4623      	mov	r3, r4
 8008e88:	eb18 0303 	adds.w	r3, r8, r3
 8008e8c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8008e90:	462b      	mov	r3, r5
 8008e92:	eb49 0303 	adc.w	r3, r9, r3
 8008e96:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8008e9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008e9e:	685b      	ldr	r3, [r3, #4]
 8008ea0:	2200      	movs	r2, #0
 8008ea2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8008ea6:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8008eaa:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8008eae:	460b      	mov	r3, r1
 8008eb0:	18db      	adds	r3, r3, r3
 8008eb2:	653b      	str	r3, [r7, #80]	@ 0x50
 8008eb4:	4613      	mov	r3, r2
 8008eb6:	eb42 0303 	adc.w	r3, r2, r3
 8008eba:	657b      	str	r3, [r7, #84]	@ 0x54
 8008ebc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8008ec0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8008ec4:	f7f7 f9f4 	bl	80002b0 <__aeabi_uldivmod>
 8008ec8:	4602      	mov	r2, r0
 8008eca:	460b      	mov	r3, r1
 8008ecc:	4b61      	ldr	r3, [pc, #388]	@ (8009054 <UART_SetConfig+0x2d4>)
 8008ece:	fba3 2302 	umull	r2, r3, r3, r2
 8008ed2:	095b      	lsrs	r3, r3, #5
 8008ed4:	011c      	lsls	r4, r3, #4
 8008ed6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008eda:	2200      	movs	r2, #0
 8008edc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008ee0:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8008ee4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8008ee8:	4642      	mov	r2, r8
 8008eea:	464b      	mov	r3, r9
 8008eec:	1891      	adds	r1, r2, r2
 8008eee:	64b9      	str	r1, [r7, #72]	@ 0x48
 8008ef0:	415b      	adcs	r3, r3
 8008ef2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008ef4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8008ef8:	4641      	mov	r1, r8
 8008efa:	eb12 0a01 	adds.w	sl, r2, r1
 8008efe:	4649      	mov	r1, r9
 8008f00:	eb43 0b01 	adc.w	fp, r3, r1
 8008f04:	f04f 0200 	mov.w	r2, #0
 8008f08:	f04f 0300 	mov.w	r3, #0
 8008f0c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8008f10:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8008f14:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008f18:	4692      	mov	sl, r2
 8008f1a:	469b      	mov	fp, r3
 8008f1c:	4643      	mov	r3, r8
 8008f1e:	eb1a 0303 	adds.w	r3, sl, r3
 8008f22:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008f26:	464b      	mov	r3, r9
 8008f28:	eb4b 0303 	adc.w	r3, fp, r3
 8008f2c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8008f30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008f34:	685b      	ldr	r3, [r3, #4]
 8008f36:	2200      	movs	r2, #0
 8008f38:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008f3c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8008f40:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8008f44:	460b      	mov	r3, r1
 8008f46:	18db      	adds	r3, r3, r3
 8008f48:	643b      	str	r3, [r7, #64]	@ 0x40
 8008f4a:	4613      	mov	r3, r2
 8008f4c:	eb42 0303 	adc.w	r3, r2, r3
 8008f50:	647b      	str	r3, [r7, #68]	@ 0x44
 8008f52:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8008f56:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8008f5a:	f7f7 f9a9 	bl	80002b0 <__aeabi_uldivmod>
 8008f5e:	4602      	mov	r2, r0
 8008f60:	460b      	mov	r3, r1
 8008f62:	4611      	mov	r1, r2
 8008f64:	4b3b      	ldr	r3, [pc, #236]	@ (8009054 <UART_SetConfig+0x2d4>)
 8008f66:	fba3 2301 	umull	r2, r3, r3, r1
 8008f6a:	095b      	lsrs	r3, r3, #5
 8008f6c:	2264      	movs	r2, #100	@ 0x64
 8008f6e:	fb02 f303 	mul.w	r3, r2, r3
 8008f72:	1acb      	subs	r3, r1, r3
 8008f74:	00db      	lsls	r3, r3, #3
 8008f76:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8008f7a:	4b36      	ldr	r3, [pc, #216]	@ (8009054 <UART_SetConfig+0x2d4>)
 8008f7c:	fba3 2302 	umull	r2, r3, r3, r2
 8008f80:	095b      	lsrs	r3, r3, #5
 8008f82:	005b      	lsls	r3, r3, #1
 8008f84:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8008f88:	441c      	add	r4, r3
 8008f8a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008f8e:	2200      	movs	r2, #0
 8008f90:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008f94:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8008f98:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8008f9c:	4642      	mov	r2, r8
 8008f9e:	464b      	mov	r3, r9
 8008fa0:	1891      	adds	r1, r2, r2
 8008fa2:	63b9      	str	r1, [r7, #56]	@ 0x38
 8008fa4:	415b      	adcs	r3, r3
 8008fa6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008fa8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8008fac:	4641      	mov	r1, r8
 8008fae:	1851      	adds	r1, r2, r1
 8008fb0:	6339      	str	r1, [r7, #48]	@ 0x30
 8008fb2:	4649      	mov	r1, r9
 8008fb4:	414b      	adcs	r3, r1
 8008fb6:	637b      	str	r3, [r7, #52]	@ 0x34
 8008fb8:	f04f 0200 	mov.w	r2, #0
 8008fbc:	f04f 0300 	mov.w	r3, #0
 8008fc0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8008fc4:	4659      	mov	r1, fp
 8008fc6:	00cb      	lsls	r3, r1, #3
 8008fc8:	4651      	mov	r1, sl
 8008fca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008fce:	4651      	mov	r1, sl
 8008fd0:	00ca      	lsls	r2, r1, #3
 8008fd2:	4610      	mov	r0, r2
 8008fd4:	4619      	mov	r1, r3
 8008fd6:	4603      	mov	r3, r0
 8008fd8:	4642      	mov	r2, r8
 8008fda:	189b      	adds	r3, r3, r2
 8008fdc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008fe0:	464b      	mov	r3, r9
 8008fe2:	460a      	mov	r2, r1
 8008fe4:	eb42 0303 	adc.w	r3, r2, r3
 8008fe8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008fec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008ff0:	685b      	ldr	r3, [r3, #4]
 8008ff2:	2200      	movs	r2, #0
 8008ff4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8008ff8:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8008ffc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8009000:	460b      	mov	r3, r1
 8009002:	18db      	adds	r3, r3, r3
 8009004:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009006:	4613      	mov	r3, r2
 8009008:	eb42 0303 	adc.w	r3, r2, r3
 800900c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800900e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8009012:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8009016:	f7f7 f94b 	bl	80002b0 <__aeabi_uldivmod>
 800901a:	4602      	mov	r2, r0
 800901c:	460b      	mov	r3, r1
 800901e:	4b0d      	ldr	r3, [pc, #52]	@ (8009054 <UART_SetConfig+0x2d4>)
 8009020:	fba3 1302 	umull	r1, r3, r3, r2
 8009024:	095b      	lsrs	r3, r3, #5
 8009026:	2164      	movs	r1, #100	@ 0x64
 8009028:	fb01 f303 	mul.w	r3, r1, r3
 800902c:	1ad3      	subs	r3, r2, r3
 800902e:	00db      	lsls	r3, r3, #3
 8009030:	3332      	adds	r3, #50	@ 0x32
 8009032:	4a08      	ldr	r2, [pc, #32]	@ (8009054 <UART_SetConfig+0x2d4>)
 8009034:	fba2 2303 	umull	r2, r3, r2, r3
 8009038:	095b      	lsrs	r3, r3, #5
 800903a:	f003 0207 	and.w	r2, r3, #7
 800903e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	4422      	add	r2, r4
 8009046:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8009048:	e106      	b.n	8009258 <UART_SetConfig+0x4d8>
 800904a:	bf00      	nop
 800904c:	40011000 	.word	0x40011000
 8009050:	40011400 	.word	0x40011400
 8009054:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009058:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800905c:	2200      	movs	r2, #0
 800905e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8009062:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8009066:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800906a:	4642      	mov	r2, r8
 800906c:	464b      	mov	r3, r9
 800906e:	1891      	adds	r1, r2, r2
 8009070:	6239      	str	r1, [r7, #32]
 8009072:	415b      	adcs	r3, r3
 8009074:	627b      	str	r3, [r7, #36]	@ 0x24
 8009076:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800907a:	4641      	mov	r1, r8
 800907c:	1854      	adds	r4, r2, r1
 800907e:	4649      	mov	r1, r9
 8009080:	eb43 0501 	adc.w	r5, r3, r1
 8009084:	f04f 0200 	mov.w	r2, #0
 8009088:	f04f 0300 	mov.w	r3, #0
 800908c:	00eb      	lsls	r3, r5, #3
 800908e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8009092:	00e2      	lsls	r2, r4, #3
 8009094:	4614      	mov	r4, r2
 8009096:	461d      	mov	r5, r3
 8009098:	4643      	mov	r3, r8
 800909a:	18e3      	adds	r3, r4, r3
 800909c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80090a0:	464b      	mov	r3, r9
 80090a2:	eb45 0303 	adc.w	r3, r5, r3
 80090a6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80090aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80090ae:	685b      	ldr	r3, [r3, #4]
 80090b0:	2200      	movs	r2, #0
 80090b2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80090b6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80090ba:	f04f 0200 	mov.w	r2, #0
 80090be:	f04f 0300 	mov.w	r3, #0
 80090c2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80090c6:	4629      	mov	r1, r5
 80090c8:	008b      	lsls	r3, r1, #2
 80090ca:	4621      	mov	r1, r4
 80090cc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80090d0:	4621      	mov	r1, r4
 80090d2:	008a      	lsls	r2, r1, #2
 80090d4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80090d8:	f7f7 f8ea 	bl	80002b0 <__aeabi_uldivmod>
 80090dc:	4602      	mov	r2, r0
 80090de:	460b      	mov	r3, r1
 80090e0:	4b60      	ldr	r3, [pc, #384]	@ (8009264 <UART_SetConfig+0x4e4>)
 80090e2:	fba3 2302 	umull	r2, r3, r3, r2
 80090e6:	095b      	lsrs	r3, r3, #5
 80090e8:	011c      	lsls	r4, r3, #4
 80090ea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80090ee:	2200      	movs	r2, #0
 80090f0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80090f4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80090f8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80090fc:	4642      	mov	r2, r8
 80090fe:	464b      	mov	r3, r9
 8009100:	1891      	adds	r1, r2, r2
 8009102:	61b9      	str	r1, [r7, #24]
 8009104:	415b      	adcs	r3, r3
 8009106:	61fb      	str	r3, [r7, #28]
 8009108:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800910c:	4641      	mov	r1, r8
 800910e:	1851      	adds	r1, r2, r1
 8009110:	6139      	str	r1, [r7, #16]
 8009112:	4649      	mov	r1, r9
 8009114:	414b      	adcs	r3, r1
 8009116:	617b      	str	r3, [r7, #20]
 8009118:	f04f 0200 	mov.w	r2, #0
 800911c:	f04f 0300 	mov.w	r3, #0
 8009120:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8009124:	4659      	mov	r1, fp
 8009126:	00cb      	lsls	r3, r1, #3
 8009128:	4651      	mov	r1, sl
 800912a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800912e:	4651      	mov	r1, sl
 8009130:	00ca      	lsls	r2, r1, #3
 8009132:	4610      	mov	r0, r2
 8009134:	4619      	mov	r1, r3
 8009136:	4603      	mov	r3, r0
 8009138:	4642      	mov	r2, r8
 800913a:	189b      	adds	r3, r3, r2
 800913c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009140:	464b      	mov	r3, r9
 8009142:	460a      	mov	r2, r1
 8009144:	eb42 0303 	adc.w	r3, r2, r3
 8009148:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800914c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009150:	685b      	ldr	r3, [r3, #4]
 8009152:	2200      	movs	r2, #0
 8009154:	67bb      	str	r3, [r7, #120]	@ 0x78
 8009156:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8009158:	f04f 0200 	mov.w	r2, #0
 800915c:	f04f 0300 	mov.w	r3, #0
 8009160:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8009164:	4649      	mov	r1, r9
 8009166:	008b      	lsls	r3, r1, #2
 8009168:	4641      	mov	r1, r8
 800916a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800916e:	4641      	mov	r1, r8
 8009170:	008a      	lsls	r2, r1, #2
 8009172:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8009176:	f7f7 f89b 	bl	80002b0 <__aeabi_uldivmod>
 800917a:	4602      	mov	r2, r0
 800917c:	460b      	mov	r3, r1
 800917e:	4611      	mov	r1, r2
 8009180:	4b38      	ldr	r3, [pc, #224]	@ (8009264 <UART_SetConfig+0x4e4>)
 8009182:	fba3 2301 	umull	r2, r3, r3, r1
 8009186:	095b      	lsrs	r3, r3, #5
 8009188:	2264      	movs	r2, #100	@ 0x64
 800918a:	fb02 f303 	mul.w	r3, r2, r3
 800918e:	1acb      	subs	r3, r1, r3
 8009190:	011b      	lsls	r3, r3, #4
 8009192:	3332      	adds	r3, #50	@ 0x32
 8009194:	4a33      	ldr	r2, [pc, #204]	@ (8009264 <UART_SetConfig+0x4e4>)
 8009196:	fba2 2303 	umull	r2, r3, r2, r3
 800919a:	095b      	lsrs	r3, r3, #5
 800919c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80091a0:	441c      	add	r4, r3
 80091a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80091a6:	2200      	movs	r2, #0
 80091a8:	673b      	str	r3, [r7, #112]	@ 0x70
 80091aa:	677a      	str	r2, [r7, #116]	@ 0x74
 80091ac:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80091b0:	4642      	mov	r2, r8
 80091b2:	464b      	mov	r3, r9
 80091b4:	1891      	adds	r1, r2, r2
 80091b6:	60b9      	str	r1, [r7, #8]
 80091b8:	415b      	adcs	r3, r3
 80091ba:	60fb      	str	r3, [r7, #12]
 80091bc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80091c0:	4641      	mov	r1, r8
 80091c2:	1851      	adds	r1, r2, r1
 80091c4:	6039      	str	r1, [r7, #0]
 80091c6:	4649      	mov	r1, r9
 80091c8:	414b      	adcs	r3, r1
 80091ca:	607b      	str	r3, [r7, #4]
 80091cc:	f04f 0200 	mov.w	r2, #0
 80091d0:	f04f 0300 	mov.w	r3, #0
 80091d4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80091d8:	4659      	mov	r1, fp
 80091da:	00cb      	lsls	r3, r1, #3
 80091dc:	4651      	mov	r1, sl
 80091de:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80091e2:	4651      	mov	r1, sl
 80091e4:	00ca      	lsls	r2, r1, #3
 80091e6:	4610      	mov	r0, r2
 80091e8:	4619      	mov	r1, r3
 80091ea:	4603      	mov	r3, r0
 80091ec:	4642      	mov	r2, r8
 80091ee:	189b      	adds	r3, r3, r2
 80091f0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80091f2:	464b      	mov	r3, r9
 80091f4:	460a      	mov	r2, r1
 80091f6:	eb42 0303 	adc.w	r3, r2, r3
 80091fa:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80091fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009200:	685b      	ldr	r3, [r3, #4]
 8009202:	2200      	movs	r2, #0
 8009204:	663b      	str	r3, [r7, #96]	@ 0x60
 8009206:	667a      	str	r2, [r7, #100]	@ 0x64
 8009208:	f04f 0200 	mov.w	r2, #0
 800920c:	f04f 0300 	mov.w	r3, #0
 8009210:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8009214:	4649      	mov	r1, r9
 8009216:	008b      	lsls	r3, r1, #2
 8009218:	4641      	mov	r1, r8
 800921a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800921e:	4641      	mov	r1, r8
 8009220:	008a      	lsls	r2, r1, #2
 8009222:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8009226:	f7f7 f843 	bl	80002b0 <__aeabi_uldivmod>
 800922a:	4602      	mov	r2, r0
 800922c:	460b      	mov	r3, r1
 800922e:	4b0d      	ldr	r3, [pc, #52]	@ (8009264 <UART_SetConfig+0x4e4>)
 8009230:	fba3 1302 	umull	r1, r3, r3, r2
 8009234:	095b      	lsrs	r3, r3, #5
 8009236:	2164      	movs	r1, #100	@ 0x64
 8009238:	fb01 f303 	mul.w	r3, r1, r3
 800923c:	1ad3      	subs	r3, r2, r3
 800923e:	011b      	lsls	r3, r3, #4
 8009240:	3332      	adds	r3, #50	@ 0x32
 8009242:	4a08      	ldr	r2, [pc, #32]	@ (8009264 <UART_SetConfig+0x4e4>)
 8009244:	fba2 2303 	umull	r2, r3, r2, r3
 8009248:	095b      	lsrs	r3, r3, #5
 800924a:	f003 020f 	and.w	r2, r3, #15
 800924e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	4422      	add	r2, r4
 8009256:	609a      	str	r2, [r3, #8]
}
 8009258:	bf00      	nop
 800925a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800925e:	46bd      	mov	sp, r7
 8009260:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009264:	51eb851f 	.word	0x51eb851f

08009268 <__NVIC_SetPriority>:
{
 8009268:	b480      	push	{r7}
 800926a:	b083      	sub	sp, #12
 800926c:	af00      	add	r7, sp, #0
 800926e:	4603      	mov	r3, r0
 8009270:	6039      	str	r1, [r7, #0]
 8009272:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009274:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009278:	2b00      	cmp	r3, #0
 800927a:	db0a      	blt.n	8009292 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800927c:	683b      	ldr	r3, [r7, #0]
 800927e:	b2da      	uxtb	r2, r3
 8009280:	490c      	ldr	r1, [pc, #48]	@ (80092b4 <__NVIC_SetPriority+0x4c>)
 8009282:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009286:	0112      	lsls	r2, r2, #4
 8009288:	b2d2      	uxtb	r2, r2
 800928a:	440b      	add	r3, r1
 800928c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8009290:	e00a      	b.n	80092a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009292:	683b      	ldr	r3, [r7, #0]
 8009294:	b2da      	uxtb	r2, r3
 8009296:	4908      	ldr	r1, [pc, #32]	@ (80092b8 <__NVIC_SetPriority+0x50>)
 8009298:	79fb      	ldrb	r3, [r7, #7]
 800929a:	f003 030f 	and.w	r3, r3, #15
 800929e:	3b04      	subs	r3, #4
 80092a0:	0112      	lsls	r2, r2, #4
 80092a2:	b2d2      	uxtb	r2, r2
 80092a4:	440b      	add	r3, r1
 80092a6:	761a      	strb	r2, [r3, #24]
}
 80092a8:	bf00      	nop
 80092aa:	370c      	adds	r7, #12
 80092ac:	46bd      	mov	sp, r7
 80092ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092b2:	4770      	bx	lr
 80092b4:	e000e100 	.word	0xe000e100
 80092b8:	e000ed00 	.word	0xe000ed00

080092bc <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80092bc:	b580      	push	{r7, lr}
 80092be:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80092c0:	4b05      	ldr	r3, [pc, #20]	@ (80092d8 <SysTick_Handler+0x1c>)
 80092c2:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80092c4:	f001 fe54 	bl	800af70 <xTaskGetSchedulerState>
 80092c8:	4603      	mov	r3, r0
 80092ca:	2b01      	cmp	r3, #1
 80092cc:	d001      	beq.n	80092d2 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80092ce:	f002 fc4b 	bl	800bb68 <xPortSysTickHandler>
  }
}
 80092d2:	bf00      	nop
 80092d4:	bd80      	pop	{r7, pc}
 80092d6:	bf00      	nop
 80092d8:	e000e010 	.word	0xe000e010

080092dc <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80092dc:	b580      	push	{r7, lr}
 80092de:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80092e0:	2100      	movs	r1, #0
 80092e2:	f06f 0004 	mvn.w	r0, #4
 80092e6:	f7ff ffbf 	bl	8009268 <__NVIC_SetPriority>
#endif
}
 80092ea:	bf00      	nop
 80092ec:	bd80      	pop	{r7, pc}
	...

080092f0 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80092f0:	b480      	push	{r7}
 80092f2:	b083      	sub	sp, #12
 80092f4:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80092f6:	f3ef 8305 	mrs	r3, IPSR
 80092fa:	603b      	str	r3, [r7, #0]
  return(result);
 80092fc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80092fe:	2b00      	cmp	r3, #0
 8009300:	d003      	beq.n	800930a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8009302:	f06f 0305 	mvn.w	r3, #5
 8009306:	607b      	str	r3, [r7, #4]
 8009308:	e00c      	b.n	8009324 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800930a:	4b0a      	ldr	r3, [pc, #40]	@ (8009334 <osKernelInitialize+0x44>)
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	2b00      	cmp	r3, #0
 8009310:	d105      	bne.n	800931e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8009312:	4b08      	ldr	r3, [pc, #32]	@ (8009334 <osKernelInitialize+0x44>)
 8009314:	2201      	movs	r2, #1
 8009316:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8009318:	2300      	movs	r3, #0
 800931a:	607b      	str	r3, [r7, #4]
 800931c:	e002      	b.n	8009324 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800931e:	f04f 33ff 	mov.w	r3, #4294967295
 8009322:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8009324:	687b      	ldr	r3, [r7, #4]
}
 8009326:	4618      	mov	r0, r3
 8009328:	370c      	adds	r7, #12
 800932a:	46bd      	mov	sp, r7
 800932c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009330:	4770      	bx	lr
 8009332:	bf00      	nop
 8009334:	20000e3c 	.word	0x20000e3c

08009338 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8009338:	b580      	push	{r7, lr}
 800933a:	b082      	sub	sp, #8
 800933c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800933e:	f3ef 8305 	mrs	r3, IPSR
 8009342:	603b      	str	r3, [r7, #0]
  return(result);
 8009344:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009346:	2b00      	cmp	r3, #0
 8009348:	d003      	beq.n	8009352 <osKernelStart+0x1a>
    stat = osErrorISR;
 800934a:	f06f 0305 	mvn.w	r3, #5
 800934e:	607b      	str	r3, [r7, #4]
 8009350:	e010      	b.n	8009374 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8009352:	4b0b      	ldr	r3, [pc, #44]	@ (8009380 <osKernelStart+0x48>)
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	2b01      	cmp	r3, #1
 8009358:	d109      	bne.n	800936e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800935a:	f7ff ffbf 	bl	80092dc <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800935e:	4b08      	ldr	r3, [pc, #32]	@ (8009380 <osKernelStart+0x48>)
 8009360:	2202      	movs	r2, #2
 8009362:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8009364:	f001 f9a0 	bl	800a6a8 <vTaskStartScheduler>
      stat = osOK;
 8009368:	2300      	movs	r3, #0
 800936a:	607b      	str	r3, [r7, #4]
 800936c:	e002      	b.n	8009374 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800936e:	f04f 33ff 	mov.w	r3, #4294967295
 8009372:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8009374:	687b      	ldr	r3, [r7, #4]
}
 8009376:	4618      	mov	r0, r3
 8009378:	3708      	adds	r7, #8
 800937a:	46bd      	mov	sp, r7
 800937c:	bd80      	pop	{r7, pc}
 800937e:	bf00      	nop
 8009380:	20000e3c 	.word	0x20000e3c

08009384 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8009384:	b580      	push	{r7, lr}
 8009386:	b08e      	sub	sp, #56	@ 0x38
 8009388:	af04      	add	r7, sp, #16
 800938a:	60f8      	str	r0, [r7, #12]
 800938c:	60b9      	str	r1, [r7, #8]
 800938e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8009390:	2300      	movs	r3, #0
 8009392:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009394:	f3ef 8305 	mrs	r3, IPSR
 8009398:	617b      	str	r3, [r7, #20]
  return(result);
 800939a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800939c:	2b00      	cmp	r3, #0
 800939e:	d17e      	bne.n	800949e <osThreadNew+0x11a>
 80093a0:	68fb      	ldr	r3, [r7, #12]
 80093a2:	2b00      	cmp	r3, #0
 80093a4:	d07b      	beq.n	800949e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80093a6:	2380      	movs	r3, #128	@ 0x80
 80093a8:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80093aa:	2318      	movs	r3, #24
 80093ac:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80093ae:	2300      	movs	r3, #0
 80093b0:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 80093b2:	f04f 33ff 	mov.w	r3, #4294967295
 80093b6:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	2b00      	cmp	r3, #0
 80093bc:	d045      	beq.n	800944a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	2b00      	cmp	r3, #0
 80093c4:	d002      	beq.n	80093cc <osThreadNew+0x48>
        name = attr->name;
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	699b      	ldr	r3, [r3, #24]
 80093d0:	2b00      	cmp	r3, #0
 80093d2:	d002      	beq.n	80093da <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	699b      	ldr	r3, [r3, #24]
 80093d8:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80093da:	69fb      	ldr	r3, [r7, #28]
 80093dc:	2b00      	cmp	r3, #0
 80093de:	d008      	beq.n	80093f2 <osThreadNew+0x6e>
 80093e0:	69fb      	ldr	r3, [r7, #28]
 80093e2:	2b38      	cmp	r3, #56	@ 0x38
 80093e4:	d805      	bhi.n	80093f2 <osThreadNew+0x6e>
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	685b      	ldr	r3, [r3, #4]
 80093ea:	f003 0301 	and.w	r3, r3, #1
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	d001      	beq.n	80093f6 <osThreadNew+0x72>
        return (NULL);
 80093f2:	2300      	movs	r3, #0
 80093f4:	e054      	b.n	80094a0 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	695b      	ldr	r3, [r3, #20]
 80093fa:	2b00      	cmp	r3, #0
 80093fc:	d003      	beq.n	8009406 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	695b      	ldr	r3, [r3, #20]
 8009402:	089b      	lsrs	r3, r3, #2
 8009404:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	689b      	ldr	r3, [r3, #8]
 800940a:	2b00      	cmp	r3, #0
 800940c:	d00e      	beq.n	800942c <osThreadNew+0xa8>
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	68db      	ldr	r3, [r3, #12]
 8009412:	2ba7      	cmp	r3, #167	@ 0xa7
 8009414:	d90a      	bls.n	800942c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800941a:	2b00      	cmp	r3, #0
 800941c:	d006      	beq.n	800942c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	695b      	ldr	r3, [r3, #20]
 8009422:	2b00      	cmp	r3, #0
 8009424:	d002      	beq.n	800942c <osThreadNew+0xa8>
        mem = 1;
 8009426:	2301      	movs	r3, #1
 8009428:	61bb      	str	r3, [r7, #24]
 800942a:	e010      	b.n	800944e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	689b      	ldr	r3, [r3, #8]
 8009430:	2b00      	cmp	r3, #0
 8009432:	d10c      	bne.n	800944e <osThreadNew+0xca>
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	68db      	ldr	r3, [r3, #12]
 8009438:	2b00      	cmp	r3, #0
 800943a:	d108      	bne.n	800944e <osThreadNew+0xca>
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	691b      	ldr	r3, [r3, #16]
 8009440:	2b00      	cmp	r3, #0
 8009442:	d104      	bne.n	800944e <osThreadNew+0xca>
          mem = 0;
 8009444:	2300      	movs	r3, #0
 8009446:	61bb      	str	r3, [r7, #24]
 8009448:	e001      	b.n	800944e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800944a:	2300      	movs	r3, #0
 800944c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800944e:	69bb      	ldr	r3, [r7, #24]
 8009450:	2b01      	cmp	r3, #1
 8009452:	d110      	bne.n	8009476 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8009458:	687a      	ldr	r2, [r7, #4]
 800945a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800945c:	9202      	str	r2, [sp, #8]
 800945e:	9301      	str	r3, [sp, #4]
 8009460:	69fb      	ldr	r3, [r7, #28]
 8009462:	9300      	str	r3, [sp, #0]
 8009464:	68bb      	ldr	r3, [r7, #8]
 8009466:	6a3a      	ldr	r2, [r7, #32]
 8009468:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800946a:	68f8      	ldr	r0, [r7, #12]
 800946c:	f000 ff28 	bl	800a2c0 <xTaskCreateStatic>
 8009470:	4603      	mov	r3, r0
 8009472:	613b      	str	r3, [r7, #16]
 8009474:	e013      	b.n	800949e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8009476:	69bb      	ldr	r3, [r7, #24]
 8009478:	2b00      	cmp	r3, #0
 800947a:	d110      	bne.n	800949e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800947c:	6a3b      	ldr	r3, [r7, #32]
 800947e:	b29a      	uxth	r2, r3
 8009480:	f107 0310 	add.w	r3, r7, #16
 8009484:	9301      	str	r3, [sp, #4]
 8009486:	69fb      	ldr	r3, [r7, #28]
 8009488:	9300      	str	r3, [sp, #0]
 800948a:	68bb      	ldr	r3, [r7, #8]
 800948c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800948e:	68f8      	ldr	r0, [r7, #12]
 8009490:	f000 ff76 	bl	800a380 <xTaskCreate>
 8009494:	4603      	mov	r3, r0
 8009496:	2b01      	cmp	r3, #1
 8009498:	d001      	beq.n	800949e <osThreadNew+0x11a>
            hTask = NULL;
 800949a:	2300      	movs	r3, #0
 800949c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800949e:	693b      	ldr	r3, [r7, #16]
}
 80094a0:	4618      	mov	r0, r3
 80094a2:	3728      	adds	r7, #40	@ 0x28
 80094a4:	46bd      	mov	sp, r7
 80094a6:	bd80      	pop	{r7, pc}

080094a8 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80094a8:	b580      	push	{r7, lr}
 80094aa:	b084      	sub	sp, #16
 80094ac:	af00      	add	r7, sp, #0
 80094ae:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80094b0:	f3ef 8305 	mrs	r3, IPSR
 80094b4:	60bb      	str	r3, [r7, #8]
  return(result);
 80094b6:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80094b8:	2b00      	cmp	r3, #0
 80094ba:	d003      	beq.n	80094c4 <osDelay+0x1c>
    stat = osErrorISR;
 80094bc:	f06f 0305 	mvn.w	r3, #5
 80094c0:	60fb      	str	r3, [r7, #12]
 80094c2:	e007      	b.n	80094d4 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80094c4:	2300      	movs	r3, #0
 80094c6:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	2b00      	cmp	r3, #0
 80094cc:	d002      	beq.n	80094d4 <osDelay+0x2c>
      vTaskDelay(ticks);
 80094ce:	6878      	ldr	r0, [r7, #4]
 80094d0:	f001 f8b4 	bl	800a63c <vTaskDelay>
    }
  }

  return (stat);
 80094d4:	68fb      	ldr	r3, [r7, #12]
}
 80094d6:	4618      	mov	r0, r3
 80094d8:	3710      	adds	r7, #16
 80094da:	46bd      	mov	sp, r7
 80094dc:	bd80      	pop	{r7, pc}

080094de <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 80094de:	b580      	push	{r7, lr}
 80094e0:	b08a      	sub	sp, #40	@ 0x28
 80094e2:	af02      	add	r7, sp, #8
 80094e4:	60f8      	str	r0, [r7, #12]
 80094e6:	60b9      	str	r1, [r7, #8]
 80094e8:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 80094ea:	2300      	movs	r3, #0
 80094ec:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80094ee:	f3ef 8305 	mrs	r3, IPSR
 80094f2:	613b      	str	r3, [r7, #16]
  return(result);
 80094f4:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 80094f6:	2b00      	cmp	r3, #0
 80094f8:	d15f      	bne.n	80095ba <osMessageQueueNew+0xdc>
 80094fa:	68fb      	ldr	r3, [r7, #12]
 80094fc:	2b00      	cmp	r3, #0
 80094fe:	d05c      	beq.n	80095ba <osMessageQueueNew+0xdc>
 8009500:	68bb      	ldr	r3, [r7, #8]
 8009502:	2b00      	cmp	r3, #0
 8009504:	d059      	beq.n	80095ba <osMessageQueueNew+0xdc>
    mem = -1;
 8009506:	f04f 33ff 	mov.w	r3, #4294967295
 800950a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	2b00      	cmp	r3, #0
 8009510:	d029      	beq.n	8009566 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	689b      	ldr	r3, [r3, #8]
 8009516:	2b00      	cmp	r3, #0
 8009518:	d012      	beq.n	8009540 <osMessageQueueNew+0x62>
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	68db      	ldr	r3, [r3, #12]
 800951e:	2b4f      	cmp	r3, #79	@ 0x4f
 8009520:	d90e      	bls.n	8009540 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8009526:	2b00      	cmp	r3, #0
 8009528:	d00a      	beq.n	8009540 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	695a      	ldr	r2, [r3, #20]
 800952e:	68fb      	ldr	r3, [r7, #12]
 8009530:	68b9      	ldr	r1, [r7, #8]
 8009532:	fb01 f303 	mul.w	r3, r1, r3
 8009536:	429a      	cmp	r2, r3
 8009538:	d302      	bcc.n	8009540 <osMessageQueueNew+0x62>
        mem = 1;
 800953a:	2301      	movs	r3, #1
 800953c:	61bb      	str	r3, [r7, #24]
 800953e:	e014      	b.n	800956a <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	689b      	ldr	r3, [r3, #8]
 8009544:	2b00      	cmp	r3, #0
 8009546:	d110      	bne.n	800956a <osMessageQueueNew+0x8c>
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	68db      	ldr	r3, [r3, #12]
 800954c:	2b00      	cmp	r3, #0
 800954e:	d10c      	bne.n	800956a <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8009554:	2b00      	cmp	r3, #0
 8009556:	d108      	bne.n	800956a <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	695b      	ldr	r3, [r3, #20]
 800955c:	2b00      	cmp	r3, #0
 800955e:	d104      	bne.n	800956a <osMessageQueueNew+0x8c>
          mem = 0;
 8009560:	2300      	movs	r3, #0
 8009562:	61bb      	str	r3, [r7, #24]
 8009564:	e001      	b.n	800956a <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8009566:	2300      	movs	r3, #0
 8009568:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800956a:	69bb      	ldr	r3, [r7, #24]
 800956c:	2b01      	cmp	r3, #1
 800956e:	d10b      	bne.n	8009588 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	691a      	ldr	r2, [r3, #16]
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	689b      	ldr	r3, [r3, #8]
 8009578:	2100      	movs	r1, #0
 800957a:	9100      	str	r1, [sp, #0]
 800957c:	68b9      	ldr	r1, [r7, #8]
 800957e:	68f8      	ldr	r0, [r7, #12]
 8009580:	f000 f9d2 	bl	8009928 <xQueueGenericCreateStatic>
 8009584:	61f8      	str	r0, [r7, #28]
 8009586:	e008      	b.n	800959a <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8009588:	69bb      	ldr	r3, [r7, #24]
 800958a:	2b00      	cmp	r3, #0
 800958c:	d105      	bne.n	800959a <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800958e:	2200      	movs	r2, #0
 8009590:	68b9      	ldr	r1, [r7, #8]
 8009592:	68f8      	ldr	r0, [r7, #12]
 8009594:	f000 fa45 	bl	8009a22 <xQueueGenericCreate>
 8009598:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800959a:	69fb      	ldr	r3, [r7, #28]
 800959c:	2b00      	cmp	r3, #0
 800959e:	d00c      	beq.n	80095ba <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	2b00      	cmp	r3, #0
 80095a4:	d003      	beq.n	80095ae <osMessageQueueNew+0xd0>
        name = attr->name;
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	681b      	ldr	r3, [r3, #0]
 80095aa:	617b      	str	r3, [r7, #20]
 80095ac:	e001      	b.n	80095b2 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 80095ae:	2300      	movs	r3, #0
 80095b0:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 80095b2:	6979      	ldr	r1, [r7, #20]
 80095b4:	69f8      	ldr	r0, [r7, #28]
 80095b6:	f000 fe25 	bl	800a204 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 80095ba:	69fb      	ldr	r3, [r7, #28]
}
 80095bc:	4618      	mov	r0, r3
 80095be:	3720      	adds	r7, #32
 80095c0:	46bd      	mov	sp, r7
 80095c2:	bd80      	pop	{r7, pc}

080095c4 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 80095c4:	b580      	push	{r7, lr}
 80095c6:	b088      	sub	sp, #32
 80095c8:	af00      	add	r7, sp, #0
 80095ca:	60f8      	str	r0, [r7, #12]
 80095cc:	60b9      	str	r1, [r7, #8]
 80095ce:	603b      	str	r3, [r7, #0]
 80095d0:	4613      	mov	r3, r2
 80095d2:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80095d4:	68fb      	ldr	r3, [r7, #12]
 80095d6:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80095d8:	2300      	movs	r3, #0
 80095da:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80095dc:	f3ef 8305 	mrs	r3, IPSR
 80095e0:	617b      	str	r3, [r7, #20]
  return(result);
 80095e2:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 80095e4:	2b00      	cmp	r3, #0
 80095e6:	d028      	beq.n	800963a <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80095e8:	69bb      	ldr	r3, [r7, #24]
 80095ea:	2b00      	cmp	r3, #0
 80095ec:	d005      	beq.n	80095fa <osMessageQueuePut+0x36>
 80095ee:	68bb      	ldr	r3, [r7, #8]
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	d002      	beq.n	80095fa <osMessageQueuePut+0x36>
 80095f4:	683b      	ldr	r3, [r7, #0]
 80095f6:	2b00      	cmp	r3, #0
 80095f8:	d003      	beq.n	8009602 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 80095fa:	f06f 0303 	mvn.w	r3, #3
 80095fe:	61fb      	str	r3, [r7, #28]
 8009600:	e038      	b.n	8009674 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 8009602:	2300      	movs	r3, #0
 8009604:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8009606:	f107 0210 	add.w	r2, r7, #16
 800960a:	2300      	movs	r3, #0
 800960c:	68b9      	ldr	r1, [r7, #8]
 800960e:	69b8      	ldr	r0, [r7, #24]
 8009610:	f000 fb68 	bl	8009ce4 <xQueueGenericSendFromISR>
 8009614:	4603      	mov	r3, r0
 8009616:	2b01      	cmp	r3, #1
 8009618:	d003      	beq.n	8009622 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 800961a:	f06f 0302 	mvn.w	r3, #2
 800961e:	61fb      	str	r3, [r7, #28]
 8009620:	e028      	b.n	8009674 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 8009622:	693b      	ldr	r3, [r7, #16]
 8009624:	2b00      	cmp	r3, #0
 8009626:	d025      	beq.n	8009674 <osMessageQueuePut+0xb0>
 8009628:	4b15      	ldr	r3, [pc, #84]	@ (8009680 <osMessageQueuePut+0xbc>)
 800962a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800962e:	601a      	str	r2, [r3, #0]
 8009630:	f3bf 8f4f 	dsb	sy
 8009634:	f3bf 8f6f 	isb	sy
 8009638:	e01c      	b.n	8009674 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800963a:	69bb      	ldr	r3, [r7, #24]
 800963c:	2b00      	cmp	r3, #0
 800963e:	d002      	beq.n	8009646 <osMessageQueuePut+0x82>
 8009640:	68bb      	ldr	r3, [r7, #8]
 8009642:	2b00      	cmp	r3, #0
 8009644:	d103      	bne.n	800964e <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 8009646:	f06f 0303 	mvn.w	r3, #3
 800964a:	61fb      	str	r3, [r7, #28]
 800964c:	e012      	b.n	8009674 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800964e:	2300      	movs	r3, #0
 8009650:	683a      	ldr	r2, [r7, #0]
 8009652:	68b9      	ldr	r1, [r7, #8]
 8009654:	69b8      	ldr	r0, [r7, #24]
 8009656:	f000 fa43 	bl	8009ae0 <xQueueGenericSend>
 800965a:	4603      	mov	r3, r0
 800965c:	2b01      	cmp	r3, #1
 800965e:	d009      	beq.n	8009674 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8009660:	683b      	ldr	r3, [r7, #0]
 8009662:	2b00      	cmp	r3, #0
 8009664:	d003      	beq.n	800966e <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 8009666:	f06f 0301 	mvn.w	r3, #1
 800966a:	61fb      	str	r3, [r7, #28]
 800966c:	e002      	b.n	8009674 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 800966e:	f06f 0302 	mvn.w	r3, #2
 8009672:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8009674:	69fb      	ldr	r3, [r7, #28]
}
 8009676:	4618      	mov	r0, r3
 8009678:	3720      	adds	r7, #32
 800967a:	46bd      	mov	sp, r7
 800967c:	bd80      	pop	{r7, pc}
 800967e:	bf00      	nop
 8009680:	e000ed04 	.word	0xe000ed04

08009684 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8009684:	b480      	push	{r7}
 8009686:	b085      	sub	sp, #20
 8009688:	af00      	add	r7, sp, #0
 800968a:	60f8      	str	r0, [r7, #12]
 800968c:	60b9      	str	r1, [r7, #8]
 800968e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8009690:	68fb      	ldr	r3, [r7, #12]
 8009692:	4a07      	ldr	r2, [pc, #28]	@ (80096b0 <vApplicationGetIdleTaskMemory+0x2c>)
 8009694:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8009696:	68bb      	ldr	r3, [r7, #8]
 8009698:	4a06      	ldr	r2, [pc, #24]	@ (80096b4 <vApplicationGetIdleTaskMemory+0x30>)
 800969a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	2280      	movs	r2, #128	@ 0x80
 80096a0:	601a      	str	r2, [r3, #0]
}
 80096a2:	bf00      	nop
 80096a4:	3714      	adds	r7, #20
 80096a6:	46bd      	mov	sp, r7
 80096a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ac:	4770      	bx	lr
 80096ae:	bf00      	nop
 80096b0:	20000e40 	.word	0x20000e40
 80096b4:	20000ee8 	.word	0x20000ee8

080096b8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80096b8:	b480      	push	{r7}
 80096ba:	b085      	sub	sp, #20
 80096bc:	af00      	add	r7, sp, #0
 80096be:	60f8      	str	r0, [r7, #12]
 80096c0:	60b9      	str	r1, [r7, #8]
 80096c2:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80096c4:	68fb      	ldr	r3, [r7, #12]
 80096c6:	4a07      	ldr	r2, [pc, #28]	@ (80096e4 <vApplicationGetTimerTaskMemory+0x2c>)
 80096c8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80096ca:	68bb      	ldr	r3, [r7, #8]
 80096cc:	4a06      	ldr	r2, [pc, #24]	@ (80096e8 <vApplicationGetTimerTaskMemory+0x30>)
 80096ce:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80096d6:	601a      	str	r2, [r3, #0]
}
 80096d8:	bf00      	nop
 80096da:	3714      	adds	r7, #20
 80096dc:	46bd      	mov	sp, r7
 80096de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096e2:	4770      	bx	lr
 80096e4:	200010e8 	.word	0x200010e8
 80096e8:	20001190 	.word	0x20001190

080096ec <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80096ec:	b480      	push	{r7}
 80096ee:	b083      	sub	sp, #12
 80096f0:	af00      	add	r7, sp, #0
 80096f2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	f103 0208 	add.w	r2, r3, #8
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	f04f 32ff 	mov.w	r2, #4294967295
 8009704:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	f103 0208 	add.w	r2, r3, #8
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	f103 0208 	add.w	r2, r3, #8
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	2200      	movs	r2, #0
 800971e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8009720:	bf00      	nop
 8009722:	370c      	adds	r7, #12
 8009724:	46bd      	mov	sp, r7
 8009726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800972a:	4770      	bx	lr

0800972c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800972c:	b480      	push	{r7}
 800972e:	b083      	sub	sp, #12
 8009730:	af00      	add	r7, sp, #0
 8009732:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	2200      	movs	r2, #0
 8009738:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800973a:	bf00      	nop
 800973c:	370c      	adds	r7, #12
 800973e:	46bd      	mov	sp, r7
 8009740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009744:	4770      	bx	lr

08009746 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009746:	b480      	push	{r7}
 8009748:	b085      	sub	sp, #20
 800974a:	af00      	add	r7, sp, #0
 800974c:	6078      	str	r0, [r7, #4]
 800974e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	685b      	ldr	r3, [r3, #4]
 8009754:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8009756:	683b      	ldr	r3, [r7, #0]
 8009758:	68fa      	ldr	r2, [r7, #12]
 800975a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800975c:	68fb      	ldr	r3, [r7, #12]
 800975e:	689a      	ldr	r2, [r3, #8]
 8009760:	683b      	ldr	r3, [r7, #0]
 8009762:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8009764:	68fb      	ldr	r3, [r7, #12]
 8009766:	689b      	ldr	r3, [r3, #8]
 8009768:	683a      	ldr	r2, [r7, #0]
 800976a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800976c:	68fb      	ldr	r3, [r7, #12]
 800976e:	683a      	ldr	r2, [r7, #0]
 8009770:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8009772:	683b      	ldr	r3, [r7, #0]
 8009774:	687a      	ldr	r2, [r7, #4]
 8009776:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	681b      	ldr	r3, [r3, #0]
 800977c:	1c5a      	adds	r2, r3, #1
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	601a      	str	r2, [r3, #0]
}
 8009782:	bf00      	nop
 8009784:	3714      	adds	r7, #20
 8009786:	46bd      	mov	sp, r7
 8009788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800978c:	4770      	bx	lr

0800978e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800978e:	b480      	push	{r7}
 8009790:	b085      	sub	sp, #20
 8009792:	af00      	add	r7, sp, #0
 8009794:	6078      	str	r0, [r7, #4]
 8009796:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8009798:	683b      	ldr	r3, [r7, #0]
 800979a:	681b      	ldr	r3, [r3, #0]
 800979c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800979e:	68bb      	ldr	r3, [r7, #8]
 80097a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80097a4:	d103      	bne.n	80097ae <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	691b      	ldr	r3, [r3, #16]
 80097aa:	60fb      	str	r3, [r7, #12]
 80097ac:	e00c      	b.n	80097c8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	3308      	adds	r3, #8
 80097b2:	60fb      	str	r3, [r7, #12]
 80097b4:	e002      	b.n	80097bc <vListInsert+0x2e>
 80097b6:	68fb      	ldr	r3, [r7, #12]
 80097b8:	685b      	ldr	r3, [r3, #4]
 80097ba:	60fb      	str	r3, [r7, #12]
 80097bc:	68fb      	ldr	r3, [r7, #12]
 80097be:	685b      	ldr	r3, [r3, #4]
 80097c0:	681b      	ldr	r3, [r3, #0]
 80097c2:	68ba      	ldr	r2, [r7, #8]
 80097c4:	429a      	cmp	r2, r3
 80097c6:	d2f6      	bcs.n	80097b6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80097c8:	68fb      	ldr	r3, [r7, #12]
 80097ca:	685a      	ldr	r2, [r3, #4]
 80097cc:	683b      	ldr	r3, [r7, #0]
 80097ce:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80097d0:	683b      	ldr	r3, [r7, #0]
 80097d2:	685b      	ldr	r3, [r3, #4]
 80097d4:	683a      	ldr	r2, [r7, #0]
 80097d6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80097d8:	683b      	ldr	r3, [r7, #0]
 80097da:	68fa      	ldr	r2, [r7, #12]
 80097dc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80097de:	68fb      	ldr	r3, [r7, #12]
 80097e0:	683a      	ldr	r2, [r7, #0]
 80097e2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80097e4:	683b      	ldr	r3, [r7, #0]
 80097e6:	687a      	ldr	r2, [r7, #4]
 80097e8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	681b      	ldr	r3, [r3, #0]
 80097ee:	1c5a      	adds	r2, r3, #1
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	601a      	str	r2, [r3, #0]
}
 80097f4:	bf00      	nop
 80097f6:	3714      	adds	r7, #20
 80097f8:	46bd      	mov	sp, r7
 80097fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097fe:	4770      	bx	lr

08009800 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8009800:	b480      	push	{r7}
 8009802:	b085      	sub	sp, #20
 8009804:	af00      	add	r7, sp, #0
 8009806:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	691b      	ldr	r3, [r3, #16]
 800980c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	685b      	ldr	r3, [r3, #4]
 8009812:	687a      	ldr	r2, [r7, #4]
 8009814:	6892      	ldr	r2, [r2, #8]
 8009816:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	689b      	ldr	r3, [r3, #8]
 800981c:	687a      	ldr	r2, [r7, #4]
 800981e:	6852      	ldr	r2, [r2, #4]
 8009820:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8009822:	68fb      	ldr	r3, [r7, #12]
 8009824:	685b      	ldr	r3, [r3, #4]
 8009826:	687a      	ldr	r2, [r7, #4]
 8009828:	429a      	cmp	r2, r3
 800982a:	d103      	bne.n	8009834 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	689a      	ldr	r2, [r3, #8]
 8009830:	68fb      	ldr	r3, [r7, #12]
 8009832:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	2200      	movs	r2, #0
 8009838:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800983a:	68fb      	ldr	r3, [r7, #12]
 800983c:	681b      	ldr	r3, [r3, #0]
 800983e:	1e5a      	subs	r2, r3, #1
 8009840:	68fb      	ldr	r3, [r7, #12]
 8009842:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8009844:	68fb      	ldr	r3, [r7, #12]
 8009846:	681b      	ldr	r3, [r3, #0]
}
 8009848:	4618      	mov	r0, r3
 800984a:	3714      	adds	r7, #20
 800984c:	46bd      	mov	sp, r7
 800984e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009852:	4770      	bx	lr

08009854 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8009854:	b580      	push	{r7, lr}
 8009856:	b084      	sub	sp, #16
 8009858:	af00      	add	r7, sp, #0
 800985a:	6078      	str	r0, [r7, #4]
 800985c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8009862:	68fb      	ldr	r3, [r7, #12]
 8009864:	2b00      	cmp	r3, #0
 8009866:	d10b      	bne.n	8009880 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8009868:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800986c:	f383 8811 	msr	BASEPRI, r3
 8009870:	f3bf 8f6f 	isb	sy
 8009874:	f3bf 8f4f 	dsb	sy
 8009878:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800987a:	bf00      	nop
 800987c:	bf00      	nop
 800987e:	e7fd      	b.n	800987c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8009880:	f002 f8e2 	bl	800ba48 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009884:	68fb      	ldr	r3, [r7, #12]
 8009886:	681a      	ldr	r2, [r3, #0]
 8009888:	68fb      	ldr	r3, [r7, #12]
 800988a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800988c:	68f9      	ldr	r1, [r7, #12]
 800988e:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8009890:	fb01 f303 	mul.w	r3, r1, r3
 8009894:	441a      	add	r2, r3
 8009896:	68fb      	ldr	r3, [r7, #12]
 8009898:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800989a:	68fb      	ldr	r3, [r7, #12]
 800989c:	2200      	movs	r2, #0
 800989e:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80098a0:	68fb      	ldr	r3, [r7, #12]
 80098a2:	681a      	ldr	r2, [r3, #0]
 80098a4:	68fb      	ldr	r3, [r7, #12]
 80098a6:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80098a8:	68fb      	ldr	r3, [r7, #12]
 80098aa:	681a      	ldr	r2, [r3, #0]
 80098ac:	68fb      	ldr	r3, [r7, #12]
 80098ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80098b0:	3b01      	subs	r3, #1
 80098b2:	68f9      	ldr	r1, [r7, #12]
 80098b4:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80098b6:	fb01 f303 	mul.w	r3, r1, r3
 80098ba:	441a      	add	r2, r3
 80098bc:	68fb      	ldr	r3, [r7, #12]
 80098be:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80098c0:	68fb      	ldr	r3, [r7, #12]
 80098c2:	22ff      	movs	r2, #255	@ 0xff
 80098c4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80098c8:	68fb      	ldr	r3, [r7, #12]
 80098ca:	22ff      	movs	r2, #255	@ 0xff
 80098cc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 80098d0:	683b      	ldr	r3, [r7, #0]
 80098d2:	2b00      	cmp	r3, #0
 80098d4:	d114      	bne.n	8009900 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80098d6:	68fb      	ldr	r3, [r7, #12]
 80098d8:	691b      	ldr	r3, [r3, #16]
 80098da:	2b00      	cmp	r3, #0
 80098dc:	d01a      	beq.n	8009914 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80098de:	68fb      	ldr	r3, [r7, #12]
 80098e0:	3310      	adds	r3, #16
 80098e2:	4618      	mov	r0, r3
 80098e4:	f001 f97e 	bl	800abe4 <xTaskRemoveFromEventList>
 80098e8:	4603      	mov	r3, r0
 80098ea:	2b00      	cmp	r3, #0
 80098ec:	d012      	beq.n	8009914 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80098ee:	4b0d      	ldr	r3, [pc, #52]	@ (8009924 <xQueueGenericReset+0xd0>)
 80098f0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80098f4:	601a      	str	r2, [r3, #0]
 80098f6:	f3bf 8f4f 	dsb	sy
 80098fa:	f3bf 8f6f 	isb	sy
 80098fe:	e009      	b.n	8009914 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8009900:	68fb      	ldr	r3, [r7, #12]
 8009902:	3310      	adds	r3, #16
 8009904:	4618      	mov	r0, r3
 8009906:	f7ff fef1 	bl	80096ec <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800990a:	68fb      	ldr	r3, [r7, #12]
 800990c:	3324      	adds	r3, #36	@ 0x24
 800990e:	4618      	mov	r0, r3
 8009910:	f7ff feec 	bl	80096ec <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8009914:	f002 f8ca 	bl	800baac <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8009918:	2301      	movs	r3, #1
}
 800991a:	4618      	mov	r0, r3
 800991c:	3710      	adds	r7, #16
 800991e:	46bd      	mov	sp, r7
 8009920:	bd80      	pop	{r7, pc}
 8009922:	bf00      	nop
 8009924:	e000ed04 	.word	0xe000ed04

08009928 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8009928:	b580      	push	{r7, lr}
 800992a:	b08e      	sub	sp, #56	@ 0x38
 800992c:	af02      	add	r7, sp, #8
 800992e:	60f8      	str	r0, [r7, #12]
 8009930:	60b9      	str	r1, [r7, #8]
 8009932:	607a      	str	r2, [r7, #4]
 8009934:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009936:	68fb      	ldr	r3, [r7, #12]
 8009938:	2b00      	cmp	r3, #0
 800993a:	d10b      	bne.n	8009954 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800993c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009940:	f383 8811 	msr	BASEPRI, r3
 8009944:	f3bf 8f6f 	isb	sy
 8009948:	f3bf 8f4f 	dsb	sy
 800994c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800994e:	bf00      	nop
 8009950:	bf00      	nop
 8009952:	e7fd      	b.n	8009950 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8009954:	683b      	ldr	r3, [r7, #0]
 8009956:	2b00      	cmp	r3, #0
 8009958:	d10b      	bne.n	8009972 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800995a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800995e:	f383 8811 	msr	BASEPRI, r3
 8009962:	f3bf 8f6f 	isb	sy
 8009966:	f3bf 8f4f 	dsb	sy
 800996a:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800996c:	bf00      	nop
 800996e:	bf00      	nop
 8009970:	e7fd      	b.n	800996e <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	2b00      	cmp	r3, #0
 8009976:	d002      	beq.n	800997e <xQueueGenericCreateStatic+0x56>
 8009978:	68bb      	ldr	r3, [r7, #8]
 800997a:	2b00      	cmp	r3, #0
 800997c:	d001      	beq.n	8009982 <xQueueGenericCreateStatic+0x5a>
 800997e:	2301      	movs	r3, #1
 8009980:	e000      	b.n	8009984 <xQueueGenericCreateStatic+0x5c>
 8009982:	2300      	movs	r3, #0
 8009984:	2b00      	cmp	r3, #0
 8009986:	d10b      	bne.n	80099a0 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8009988:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800998c:	f383 8811 	msr	BASEPRI, r3
 8009990:	f3bf 8f6f 	isb	sy
 8009994:	f3bf 8f4f 	dsb	sy
 8009998:	623b      	str	r3, [r7, #32]
}
 800999a:	bf00      	nop
 800999c:	bf00      	nop
 800999e:	e7fd      	b.n	800999c <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	2b00      	cmp	r3, #0
 80099a4:	d102      	bne.n	80099ac <xQueueGenericCreateStatic+0x84>
 80099a6:	68bb      	ldr	r3, [r7, #8]
 80099a8:	2b00      	cmp	r3, #0
 80099aa:	d101      	bne.n	80099b0 <xQueueGenericCreateStatic+0x88>
 80099ac:	2301      	movs	r3, #1
 80099ae:	e000      	b.n	80099b2 <xQueueGenericCreateStatic+0x8a>
 80099b0:	2300      	movs	r3, #0
 80099b2:	2b00      	cmp	r3, #0
 80099b4:	d10b      	bne.n	80099ce <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 80099b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80099ba:	f383 8811 	msr	BASEPRI, r3
 80099be:	f3bf 8f6f 	isb	sy
 80099c2:	f3bf 8f4f 	dsb	sy
 80099c6:	61fb      	str	r3, [r7, #28]
}
 80099c8:	bf00      	nop
 80099ca:	bf00      	nop
 80099cc:	e7fd      	b.n	80099ca <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80099ce:	2350      	movs	r3, #80	@ 0x50
 80099d0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80099d2:	697b      	ldr	r3, [r7, #20]
 80099d4:	2b50      	cmp	r3, #80	@ 0x50
 80099d6:	d00b      	beq.n	80099f0 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 80099d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80099dc:	f383 8811 	msr	BASEPRI, r3
 80099e0:	f3bf 8f6f 	isb	sy
 80099e4:	f3bf 8f4f 	dsb	sy
 80099e8:	61bb      	str	r3, [r7, #24]
}
 80099ea:	bf00      	nop
 80099ec:	bf00      	nop
 80099ee:	e7fd      	b.n	80099ec <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80099f0:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80099f2:	683b      	ldr	r3, [r7, #0]
 80099f4:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 80099f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80099f8:	2b00      	cmp	r3, #0
 80099fa:	d00d      	beq.n	8009a18 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80099fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80099fe:	2201      	movs	r2, #1
 8009a00:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009a04:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8009a08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009a0a:	9300      	str	r3, [sp, #0]
 8009a0c:	4613      	mov	r3, r2
 8009a0e:	687a      	ldr	r2, [r7, #4]
 8009a10:	68b9      	ldr	r1, [r7, #8]
 8009a12:	68f8      	ldr	r0, [r7, #12]
 8009a14:	f000 f840 	bl	8009a98 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8009a18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8009a1a:	4618      	mov	r0, r3
 8009a1c:	3730      	adds	r7, #48	@ 0x30
 8009a1e:	46bd      	mov	sp, r7
 8009a20:	bd80      	pop	{r7, pc}

08009a22 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8009a22:	b580      	push	{r7, lr}
 8009a24:	b08a      	sub	sp, #40	@ 0x28
 8009a26:	af02      	add	r7, sp, #8
 8009a28:	60f8      	str	r0, [r7, #12]
 8009a2a:	60b9      	str	r1, [r7, #8]
 8009a2c:	4613      	mov	r3, r2
 8009a2e:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009a30:	68fb      	ldr	r3, [r7, #12]
 8009a32:	2b00      	cmp	r3, #0
 8009a34:	d10b      	bne.n	8009a4e <xQueueGenericCreate+0x2c>
	__asm volatile
 8009a36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a3a:	f383 8811 	msr	BASEPRI, r3
 8009a3e:	f3bf 8f6f 	isb	sy
 8009a42:	f3bf 8f4f 	dsb	sy
 8009a46:	613b      	str	r3, [r7, #16]
}
 8009a48:	bf00      	nop
 8009a4a:	bf00      	nop
 8009a4c:	e7fd      	b.n	8009a4a <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009a4e:	68fb      	ldr	r3, [r7, #12]
 8009a50:	68ba      	ldr	r2, [r7, #8]
 8009a52:	fb02 f303 	mul.w	r3, r2, r3
 8009a56:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8009a58:	69fb      	ldr	r3, [r7, #28]
 8009a5a:	3350      	adds	r3, #80	@ 0x50
 8009a5c:	4618      	mov	r0, r3
 8009a5e:	f002 f915 	bl	800bc8c <pvPortMalloc>
 8009a62:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8009a64:	69bb      	ldr	r3, [r7, #24]
 8009a66:	2b00      	cmp	r3, #0
 8009a68:	d011      	beq.n	8009a8e <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8009a6a:	69bb      	ldr	r3, [r7, #24]
 8009a6c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009a6e:	697b      	ldr	r3, [r7, #20]
 8009a70:	3350      	adds	r3, #80	@ 0x50
 8009a72:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8009a74:	69bb      	ldr	r3, [r7, #24]
 8009a76:	2200      	movs	r2, #0
 8009a78:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009a7c:	79fa      	ldrb	r2, [r7, #7]
 8009a7e:	69bb      	ldr	r3, [r7, #24]
 8009a80:	9300      	str	r3, [sp, #0]
 8009a82:	4613      	mov	r3, r2
 8009a84:	697a      	ldr	r2, [r7, #20]
 8009a86:	68b9      	ldr	r1, [r7, #8]
 8009a88:	68f8      	ldr	r0, [r7, #12]
 8009a8a:	f000 f805 	bl	8009a98 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8009a8e:	69bb      	ldr	r3, [r7, #24]
	}
 8009a90:	4618      	mov	r0, r3
 8009a92:	3720      	adds	r7, #32
 8009a94:	46bd      	mov	sp, r7
 8009a96:	bd80      	pop	{r7, pc}

08009a98 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8009a98:	b580      	push	{r7, lr}
 8009a9a:	b084      	sub	sp, #16
 8009a9c:	af00      	add	r7, sp, #0
 8009a9e:	60f8      	str	r0, [r7, #12]
 8009aa0:	60b9      	str	r1, [r7, #8]
 8009aa2:	607a      	str	r2, [r7, #4]
 8009aa4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8009aa6:	68bb      	ldr	r3, [r7, #8]
 8009aa8:	2b00      	cmp	r3, #0
 8009aaa:	d103      	bne.n	8009ab4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8009aac:	69bb      	ldr	r3, [r7, #24]
 8009aae:	69ba      	ldr	r2, [r7, #24]
 8009ab0:	601a      	str	r2, [r3, #0]
 8009ab2:	e002      	b.n	8009aba <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8009ab4:	69bb      	ldr	r3, [r7, #24]
 8009ab6:	687a      	ldr	r2, [r7, #4]
 8009ab8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8009aba:	69bb      	ldr	r3, [r7, #24]
 8009abc:	68fa      	ldr	r2, [r7, #12]
 8009abe:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8009ac0:	69bb      	ldr	r3, [r7, #24]
 8009ac2:	68ba      	ldr	r2, [r7, #8]
 8009ac4:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8009ac6:	2101      	movs	r1, #1
 8009ac8:	69b8      	ldr	r0, [r7, #24]
 8009aca:	f7ff fec3 	bl	8009854 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8009ace:	69bb      	ldr	r3, [r7, #24]
 8009ad0:	78fa      	ldrb	r2, [r7, #3]
 8009ad2:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8009ad6:	bf00      	nop
 8009ad8:	3710      	adds	r7, #16
 8009ada:	46bd      	mov	sp, r7
 8009adc:	bd80      	pop	{r7, pc}
	...

08009ae0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8009ae0:	b580      	push	{r7, lr}
 8009ae2:	b08e      	sub	sp, #56	@ 0x38
 8009ae4:	af00      	add	r7, sp, #0
 8009ae6:	60f8      	str	r0, [r7, #12]
 8009ae8:	60b9      	str	r1, [r7, #8]
 8009aea:	607a      	str	r2, [r7, #4]
 8009aec:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8009aee:	2300      	movs	r3, #0
 8009af0:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009af2:	68fb      	ldr	r3, [r7, #12]
 8009af4:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8009af6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009af8:	2b00      	cmp	r3, #0
 8009afa:	d10b      	bne.n	8009b14 <xQueueGenericSend+0x34>
	__asm volatile
 8009afc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b00:	f383 8811 	msr	BASEPRI, r3
 8009b04:	f3bf 8f6f 	isb	sy
 8009b08:	f3bf 8f4f 	dsb	sy
 8009b0c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8009b0e:	bf00      	nop
 8009b10:	bf00      	nop
 8009b12:	e7fd      	b.n	8009b10 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009b14:	68bb      	ldr	r3, [r7, #8]
 8009b16:	2b00      	cmp	r3, #0
 8009b18:	d103      	bne.n	8009b22 <xQueueGenericSend+0x42>
 8009b1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009b1e:	2b00      	cmp	r3, #0
 8009b20:	d101      	bne.n	8009b26 <xQueueGenericSend+0x46>
 8009b22:	2301      	movs	r3, #1
 8009b24:	e000      	b.n	8009b28 <xQueueGenericSend+0x48>
 8009b26:	2300      	movs	r3, #0
 8009b28:	2b00      	cmp	r3, #0
 8009b2a:	d10b      	bne.n	8009b44 <xQueueGenericSend+0x64>
	__asm volatile
 8009b2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b30:	f383 8811 	msr	BASEPRI, r3
 8009b34:	f3bf 8f6f 	isb	sy
 8009b38:	f3bf 8f4f 	dsb	sy
 8009b3c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8009b3e:	bf00      	nop
 8009b40:	bf00      	nop
 8009b42:	e7fd      	b.n	8009b40 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009b44:	683b      	ldr	r3, [r7, #0]
 8009b46:	2b02      	cmp	r3, #2
 8009b48:	d103      	bne.n	8009b52 <xQueueGenericSend+0x72>
 8009b4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b4c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009b4e:	2b01      	cmp	r3, #1
 8009b50:	d101      	bne.n	8009b56 <xQueueGenericSend+0x76>
 8009b52:	2301      	movs	r3, #1
 8009b54:	e000      	b.n	8009b58 <xQueueGenericSend+0x78>
 8009b56:	2300      	movs	r3, #0
 8009b58:	2b00      	cmp	r3, #0
 8009b5a:	d10b      	bne.n	8009b74 <xQueueGenericSend+0x94>
	__asm volatile
 8009b5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b60:	f383 8811 	msr	BASEPRI, r3
 8009b64:	f3bf 8f6f 	isb	sy
 8009b68:	f3bf 8f4f 	dsb	sy
 8009b6c:	623b      	str	r3, [r7, #32]
}
 8009b6e:	bf00      	nop
 8009b70:	bf00      	nop
 8009b72:	e7fd      	b.n	8009b70 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009b74:	f001 f9fc 	bl	800af70 <xTaskGetSchedulerState>
 8009b78:	4603      	mov	r3, r0
 8009b7a:	2b00      	cmp	r3, #0
 8009b7c:	d102      	bne.n	8009b84 <xQueueGenericSend+0xa4>
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	2b00      	cmp	r3, #0
 8009b82:	d101      	bne.n	8009b88 <xQueueGenericSend+0xa8>
 8009b84:	2301      	movs	r3, #1
 8009b86:	e000      	b.n	8009b8a <xQueueGenericSend+0xaa>
 8009b88:	2300      	movs	r3, #0
 8009b8a:	2b00      	cmp	r3, #0
 8009b8c:	d10b      	bne.n	8009ba6 <xQueueGenericSend+0xc6>
	__asm volatile
 8009b8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b92:	f383 8811 	msr	BASEPRI, r3
 8009b96:	f3bf 8f6f 	isb	sy
 8009b9a:	f3bf 8f4f 	dsb	sy
 8009b9e:	61fb      	str	r3, [r7, #28]
}
 8009ba0:	bf00      	nop
 8009ba2:	bf00      	nop
 8009ba4:	e7fd      	b.n	8009ba2 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009ba6:	f001 ff4f 	bl	800ba48 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009baa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009bac:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009bae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009bb0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009bb2:	429a      	cmp	r2, r3
 8009bb4:	d302      	bcc.n	8009bbc <xQueueGenericSend+0xdc>
 8009bb6:	683b      	ldr	r3, [r7, #0]
 8009bb8:	2b02      	cmp	r3, #2
 8009bba:	d129      	bne.n	8009c10 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009bbc:	683a      	ldr	r2, [r7, #0]
 8009bbe:	68b9      	ldr	r1, [r7, #8]
 8009bc0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009bc2:	f000 fa0f 	bl	8009fe4 <prvCopyDataToQueue>
 8009bc6:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009bc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009bca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009bcc:	2b00      	cmp	r3, #0
 8009bce:	d010      	beq.n	8009bf2 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009bd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009bd2:	3324      	adds	r3, #36	@ 0x24
 8009bd4:	4618      	mov	r0, r3
 8009bd6:	f001 f805 	bl	800abe4 <xTaskRemoveFromEventList>
 8009bda:	4603      	mov	r3, r0
 8009bdc:	2b00      	cmp	r3, #0
 8009bde:	d013      	beq.n	8009c08 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8009be0:	4b3f      	ldr	r3, [pc, #252]	@ (8009ce0 <xQueueGenericSend+0x200>)
 8009be2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009be6:	601a      	str	r2, [r3, #0]
 8009be8:	f3bf 8f4f 	dsb	sy
 8009bec:	f3bf 8f6f 	isb	sy
 8009bf0:	e00a      	b.n	8009c08 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8009bf2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009bf4:	2b00      	cmp	r3, #0
 8009bf6:	d007      	beq.n	8009c08 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8009bf8:	4b39      	ldr	r3, [pc, #228]	@ (8009ce0 <xQueueGenericSend+0x200>)
 8009bfa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009bfe:	601a      	str	r2, [r3, #0]
 8009c00:	f3bf 8f4f 	dsb	sy
 8009c04:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8009c08:	f001 ff50 	bl	800baac <vPortExitCritical>
				return pdPASS;
 8009c0c:	2301      	movs	r3, #1
 8009c0e:	e063      	b.n	8009cd8 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	2b00      	cmp	r3, #0
 8009c14:	d103      	bne.n	8009c1e <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009c16:	f001 ff49 	bl	800baac <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8009c1a:	2300      	movs	r3, #0
 8009c1c:	e05c      	b.n	8009cd8 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009c1e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009c20:	2b00      	cmp	r3, #0
 8009c22:	d106      	bne.n	8009c32 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009c24:	f107 0314 	add.w	r3, r7, #20
 8009c28:	4618      	mov	r0, r3
 8009c2a:	f001 f83f 	bl	800acac <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009c2e:	2301      	movs	r3, #1
 8009c30:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009c32:	f001 ff3b 	bl	800baac <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009c36:	f000 fda7 	bl	800a788 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009c3a:	f001 ff05 	bl	800ba48 <vPortEnterCritical>
 8009c3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c40:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009c44:	b25b      	sxtb	r3, r3
 8009c46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c4a:	d103      	bne.n	8009c54 <xQueueGenericSend+0x174>
 8009c4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c4e:	2200      	movs	r2, #0
 8009c50:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009c54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c56:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009c5a:	b25b      	sxtb	r3, r3
 8009c5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c60:	d103      	bne.n	8009c6a <xQueueGenericSend+0x18a>
 8009c62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c64:	2200      	movs	r2, #0
 8009c66:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009c6a:	f001 ff1f 	bl	800baac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009c6e:	1d3a      	adds	r2, r7, #4
 8009c70:	f107 0314 	add.w	r3, r7, #20
 8009c74:	4611      	mov	r1, r2
 8009c76:	4618      	mov	r0, r3
 8009c78:	f001 f82e 	bl	800acd8 <xTaskCheckForTimeOut>
 8009c7c:	4603      	mov	r3, r0
 8009c7e:	2b00      	cmp	r3, #0
 8009c80:	d124      	bne.n	8009ccc <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8009c82:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009c84:	f000 faa6 	bl	800a1d4 <prvIsQueueFull>
 8009c88:	4603      	mov	r3, r0
 8009c8a:	2b00      	cmp	r3, #0
 8009c8c:	d018      	beq.n	8009cc0 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8009c8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c90:	3310      	adds	r3, #16
 8009c92:	687a      	ldr	r2, [r7, #4]
 8009c94:	4611      	mov	r1, r2
 8009c96:	4618      	mov	r0, r3
 8009c98:	f000 ff52 	bl	800ab40 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8009c9c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009c9e:	f000 fa31 	bl	800a104 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8009ca2:	f000 fd7f 	bl	800a7a4 <xTaskResumeAll>
 8009ca6:	4603      	mov	r3, r0
 8009ca8:	2b00      	cmp	r3, #0
 8009caa:	f47f af7c 	bne.w	8009ba6 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8009cae:	4b0c      	ldr	r3, [pc, #48]	@ (8009ce0 <xQueueGenericSend+0x200>)
 8009cb0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009cb4:	601a      	str	r2, [r3, #0]
 8009cb6:	f3bf 8f4f 	dsb	sy
 8009cba:	f3bf 8f6f 	isb	sy
 8009cbe:	e772      	b.n	8009ba6 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8009cc0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009cc2:	f000 fa1f 	bl	800a104 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009cc6:	f000 fd6d 	bl	800a7a4 <xTaskResumeAll>
 8009cca:	e76c      	b.n	8009ba6 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8009ccc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009cce:	f000 fa19 	bl	800a104 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009cd2:	f000 fd67 	bl	800a7a4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8009cd6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8009cd8:	4618      	mov	r0, r3
 8009cda:	3738      	adds	r7, #56	@ 0x38
 8009cdc:	46bd      	mov	sp, r7
 8009cde:	bd80      	pop	{r7, pc}
 8009ce0:	e000ed04 	.word	0xe000ed04

08009ce4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8009ce4:	b580      	push	{r7, lr}
 8009ce6:	b090      	sub	sp, #64	@ 0x40
 8009ce8:	af00      	add	r7, sp, #0
 8009cea:	60f8      	str	r0, [r7, #12]
 8009cec:	60b9      	str	r1, [r7, #8]
 8009cee:	607a      	str	r2, [r7, #4]
 8009cf0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8009cf2:	68fb      	ldr	r3, [r7, #12]
 8009cf4:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8009cf6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009cf8:	2b00      	cmp	r3, #0
 8009cfa:	d10b      	bne.n	8009d14 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8009cfc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d00:	f383 8811 	msr	BASEPRI, r3
 8009d04:	f3bf 8f6f 	isb	sy
 8009d08:	f3bf 8f4f 	dsb	sy
 8009d0c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8009d0e:	bf00      	nop
 8009d10:	bf00      	nop
 8009d12:	e7fd      	b.n	8009d10 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009d14:	68bb      	ldr	r3, [r7, #8]
 8009d16:	2b00      	cmp	r3, #0
 8009d18:	d103      	bne.n	8009d22 <xQueueGenericSendFromISR+0x3e>
 8009d1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009d1e:	2b00      	cmp	r3, #0
 8009d20:	d101      	bne.n	8009d26 <xQueueGenericSendFromISR+0x42>
 8009d22:	2301      	movs	r3, #1
 8009d24:	e000      	b.n	8009d28 <xQueueGenericSendFromISR+0x44>
 8009d26:	2300      	movs	r3, #0
 8009d28:	2b00      	cmp	r3, #0
 8009d2a:	d10b      	bne.n	8009d44 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8009d2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d30:	f383 8811 	msr	BASEPRI, r3
 8009d34:	f3bf 8f6f 	isb	sy
 8009d38:	f3bf 8f4f 	dsb	sy
 8009d3c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8009d3e:	bf00      	nop
 8009d40:	bf00      	nop
 8009d42:	e7fd      	b.n	8009d40 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009d44:	683b      	ldr	r3, [r7, #0]
 8009d46:	2b02      	cmp	r3, #2
 8009d48:	d103      	bne.n	8009d52 <xQueueGenericSendFromISR+0x6e>
 8009d4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d4c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009d4e:	2b01      	cmp	r3, #1
 8009d50:	d101      	bne.n	8009d56 <xQueueGenericSendFromISR+0x72>
 8009d52:	2301      	movs	r3, #1
 8009d54:	e000      	b.n	8009d58 <xQueueGenericSendFromISR+0x74>
 8009d56:	2300      	movs	r3, #0
 8009d58:	2b00      	cmp	r3, #0
 8009d5a:	d10b      	bne.n	8009d74 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8009d5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d60:	f383 8811 	msr	BASEPRI, r3
 8009d64:	f3bf 8f6f 	isb	sy
 8009d68:	f3bf 8f4f 	dsb	sy
 8009d6c:	623b      	str	r3, [r7, #32]
}
 8009d6e:	bf00      	nop
 8009d70:	bf00      	nop
 8009d72:	e7fd      	b.n	8009d70 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009d74:	f001 ff48 	bl	800bc08 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8009d78:	f3ef 8211 	mrs	r2, BASEPRI
 8009d7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d80:	f383 8811 	msr	BASEPRI, r3
 8009d84:	f3bf 8f6f 	isb	sy
 8009d88:	f3bf 8f4f 	dsb	sy
 8009d8c:	61fa      	str	r2, [r7, #28]
 8009d8e:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8009d90:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009d92:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009d94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d96:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009d98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d9a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009d9c:	429a      	cmp	r2, r3
 8009d9e:	d302      	bcc.n	8009da6 <xQueueGenericSendFromISR+0xc2>
 8009da0:	683b      	ldr	r3, [r7, #0]
 8009da2:	2b02      	cmp	r3, #2
 8009da4:	d12f      	bne.n	8009e06 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8009da6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009da8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009dac:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009db0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009db2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009db4:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009db6:	683a      	ldr	r2, [r7, #0]
 8009db8:	68b9      	ldr	r1, [r7, #8]
 8009dba:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8009dbc:	f000 f912 	bl	8009fe4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8009dc0:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8009dc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009dc8:	d112      	bne.n	8009df0 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009dca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009dcc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009dce:	2b00      	cmp	r3, #0
 8009dd0:	d016      	beq.n	8009e00 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009dd2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009dd4:	3324      	adds	r3, #36	@ 0x24
 8009dd6:	4618      	mov	r0, r3
 8009dd8:	f000 ff04 	bl	800abe4 <xTaskRemoveFromEventList>
 8009ddc:	4603      	mov	r3, r0
 8009dde:	2b00      	cmp	r3, #0
 8009de0:	d00e      	beq.n	8009e00 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	2b00      	cmp	r3, #0
 8009de6:	d00b      	beq.n	8009e00 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	2201      	movs	r2, #1
 8009dec:	601a      	str	r2, [r3, #0]
 8009dee:	e007      	b.n	8009e00 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8009df0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8009df4:	3301      	adds	r3, #1
 8009df6:	b2db      	uxtb	r3, r3
 8009df8:	b25a      	sxtb	r2, r3
 8009dfa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009dfc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8009e00:	2301      	movs	r3, #1
 8009e02:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8009e04:	e001      	b.n	8009e0a <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8009e06:	2300      	movs	r3, #0
 8009e08:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009e0a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009e0c:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8009e0e:	697b      	ldr	r3, [r7, #20]
 8009e10:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8009e14:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009e16:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8009e18:	4618      	mov	r0, r3
 8009e1a:	3740      	adds	r7, #64	@ 0x40
 8009e1c:	46bd      	mov	sp, r7
 8009e1e:	bd80      	pop	{r7, pc}

08009e20 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8009e20:	b580      	push	{r7, lr}
 8009e22:	b08c      	sub	sp, #48	@ 0x30
 8009e24:	af00      	add	r7, sp, #0
 8009e26:	60f8      	str	r0, [r7, #12]
 8009e28:	60b9      	str	r1, [r7, #8]
 8009e2a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8009e2c:	2300      	movs	r3, #0
 8009e2e:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009e30:	68fb      	ldr	r3, [r7, #12]
 8009e32:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8009e34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e36:	2b00      	cmp	r3, #0
 8009e38:	d10b      	bne.n	8009e52 <xQueueReceive+0x32>
	__asm volatile
 8009e3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e3e:	f383 8811 	msr	BASEPRI, r3
 8009e42:	f3bf 8f6f 	isb	sy
 8009e46:	f3bf 8f4f 	dsb	sy
 8009e4a:	623b      	str	r3, [r7, #32]
}
 8009e4c:	bf00      	nop
 8009e4e:	bf00      	nop
 8009e50:	e7fd      	b.n	8009e4e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009e52:	68bb      	ldr	r3, [r7, #8]
 8009e54:	2b00      	cmp	r3, #0
 8009e56:	d103      	bne.n	8009e60 <xQueueReceive+0x40>
 8009e58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009e5c:	2b00      	cmp	r3, #0
 8009e5e:	d101      	bne.n	8009e64 <xQueueReceive+0x44>
 8009e60:	2301      	movs	r3, #1
 8009e62:	e000      	b.n	8009e66 <xQueueReceive+0x46>
 8009e64:	2300      	movs	r3, #0
 8009e66:	2b00      	cmp	r3, #0
 8009e68:	d10b      	bne.n	8009e82 <xQueueReceive+0x62>
	__asm volatile
 8009e6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e6e:	f383 8811 	msr	BASEPRI, r3
 8009e72:	f3bf 8f6f 	isb	sy
 8009e76:	f3bf 8f4f 	dsb	sy
 8009e7a:	61fb      	str	r3, [r7, #28]
}
 8009e7c:	bf00      	nop
 8009e7e:	bf00      	nop
 8009e80:	e7fd      	b.n	8009e7e <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009e82:	f001 f875 	bl	800af70 <xTaskGetSchedulerState>
 8009e86:	4603      	mov	r3, r0
 8009e88:	2b00      	cmp	r3, #0
 8009e8a:	d102      	bne.n	8009e92 <xQueueReceive+0x72>
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	2b00      	cmp	r3, #0
 8009e90:	d101      	bne.n	8009e96 <xQueueReceive+0x76>
 8009e92:	2301      	movs	r3, #1
 8009e94:	e000      	b.n	8009e98 <xQueueReceive+0x78>
 8009e96:	2300      	movs	r3, #0
 8009e98:	2b00      	cmp	r3, #0
 8009e9a:	d10b      	bne.n	8009eb4 <xQueueReceive+0x94>
	__asm volatile
 8009e9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ea0:	f383 8811 	msr	BASEPRI, r3
 8009ea4:	f3bf 8f6f 	isb	sy
 8009ea8:	f3bf 8f4f 	dsb	sy
 8009eac:	61bb      	str	r3, [r7, #24]
}
 8009eae:	bf00      	nop
 8009eb0:	bf00      	nop
 8009eb2:	e7fd      	b.n	8009eb0 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009eb4:	f001 fdc8 	bl	800ba48 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009eb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009eba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009ebc:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009ebe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ec0:	2b00      	cmp	r3, #0
 8009ec2:	d01f      	beq.n	8009f04 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009ec4:	68b9      	ldr	r1, [r7, #8]
 8009ec6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009ec8:	f000 f8f6 	bl	800a0b8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009ecc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ece:	1e5a      	subs	r2, r3, #1
 8009ed0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ed2:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009ed4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ed6:	691b      	ldr	r3, [r3, #16]
 8009ed8:	2b00      	cmp	r3, #0
 8009eda:	d00f      	beq.n	8009efc <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009edc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ede:	3310      	adds	r3, #16
 8009ee0:	4618      	mov	r0, r3
 8009ee2:	f000 fe7f 	bl	800abe4 <xTaskRemoveFromEventList>
 8009ee6:	4603      	mov	r3, r0
 8009ee8:	2b00      	cmp	r3, #0
 8009eea:	d007      	beq.n	8009efc <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8009eec:	4b3c      	ldr	r3, [pc, #240]	@ (8009fe0 <xQueueReceive+0x1c0>)
 8009eee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009ef2:	601a      	str	r2, [r3, #0]
 8009ef4:	f3bf 8f4f 	dsb	sy
 8009ef8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8009efc:	f001 fdd6 	bl	800baac <vPortExitCritical>
				return pdPASS;
 8009f00:	2301      	movs	r3, #1
 8009f02:	e069      	b.n	8009fd8 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	2b00      	cmp	r3, #0
 8009f08:	d103      	bne.n	8009f12 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009f0a:	f001 fdcf 	bl	800baac <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8009f0e:	2300      	movs	r3, #0
 8009f10:	e062      	b.n	8009fd8 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009f12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009f14:	2b00      	cmp	r3, #0
 8009f16:	d106      	bne.n	8009f26 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009f18:	f107 0310 	add.w	r3, r7, #16
 8009f1c:	4618      	mov	r0, r3
 8009f1e:	f000 fec5 	bl	800acac <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009f22:	2301      	movs	r3, #1
 8009f24:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009f26:	f001 fdc1 	bl	800baac <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009f2a:	f000 fc2d 	bl	800a788 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009f2e:	f001 fd8b 	bl	800ba48 <vPortEnterCritical>
 8009f32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009f34:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009f38:	b25b      	sxtb	r3, r3
 8009f3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f3e:	d103      	bne.n	8009f48 <xQueueReceive+0x128>
 8009f40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009f42:	2200      	movs	r2, #0
 8009f44:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009f48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009f4a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009f4e:	b25b      	sxtb	r3, r3
 8009f50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f54:	d103      	bne.n	8009f5e <xQueueReceive+0x13e>
 8009f56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009f58:	2200      	movs	r2, #0
 8009f5a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009f5e:	f001 fda5 	bl	800baac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009f62:	1d3a      	adds	r2, r7, #4
 8009f64:	f107 0310 	add.w	r3, r7, #16
 8009f68:	4611      	mov	r1, r2
 8009f6a:	4618      	mov	r0, r3
 8009f6c:	f000 feb4 	bl	800acd8 <xTaskCheckForTimeOut>
 8009f70:	4603      	mov	r3, r0
 8009f72:	2b00      	cmp	r3, #0
 8009f74:	d123      	bne.n	8009fbe <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009f76:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009f78:	f000 f916 	bl	800a1a8 <prvIsQueueEmpty>
 8009f7c:	4603      	mov	r3, r0
 8009f7e:	2b00      	cmp	r3, #0
 8009f80:	d017      	beq.n	8009fb2 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009f82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009f84:	3324      	adds	r3, #36	@ 0x24
 8009f86:	687a      	ldr	r2, [r7, #4]
 8009f88:	4611      	mov	r1, r2
 8009f8a:	4618      	mov	r0, r3
 8009f8c:	f000 fdd8 	bl	800ab40 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8009f90:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009f92:	f000 f8b7 	bl	800a104 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009f96:	f000 fc05 	bl	800a7a4 <xTaskResumeAll>
 8009f9a:	4603      	mov	r3, r0
 8009f9c:	2b00      	cmp	r3, #0
 8009f9e:	d189      	bne.n	8009eb4 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8009fa0:	4b0f      	ldr	r3, [pc, #60]	@ (8009fe0 <xQueueReceive+0x1c0>)
 8009fa2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009fa6:	601a      	str	r2, [r3, #0]
 8009fa8:	f3bf 8f4f 	dsb	sy
 8009fac:	f3bf 8f6f 	isb	sy
 8009fb0:	e780      	b.n	8009eb4 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8009fb2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009fb4:	f000 f8a6 	bl	800a104 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009fb8:	f000 fbf4 	bl	800a7a4 <xTaskResumeAll>
 8009fbc:	e77a      	b.n	8009eb4 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8009fbe:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009fc0:	f000 f8a0 	bl	800a104 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009fc4:	f000 fbee 	bl	800a7a4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009fc8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009fca:	f000 f8ed 	bl	800a1a8 <prvIsQueueEmpty>
 8009fce:	4603      	mov	r3, r0
 8009fd0:	2b00      	cmp	r3, #0
 8009fd2:	f43f af6f 	beq.w	8009eb4 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8009fd6:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8009fd8:	4618      	mov	r0, r3
 8009fda:	3730      	adds	r7, #48	@ 0x30
 8009fdc:	46bd      	mov	sp, r7
 8009fde:	bd80      	pop	{r7, pc}
 8009fe0:	e000ed04 	.word	0xe000ed04

08009fe4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8009fe4:	b580      	push	{r7, lr}
 8009fe6:	b086      	sub	sp, #24
 8009fe8:	af00      	add	r7, sp, #0
 8009fea:	60f8      	str	r0, [r7, #12]
 8009fec:	60b9      	str	r1, [r7, #8]
 8009fee:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8009ff0:	2300      	movs	r3, #0
 8009ff2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009ff4:	68fb      	ldr	r3, [r7, #12]
 8009ff6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009ff8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8009ffa:	68fb      	ldr	r3, [r7, #12]
 8009ffc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009ffe:	2b00      	cmp	r3, #0
 800a000:	d10d      	bne.n	800a01e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a002:	68fb      	ldr	r3, [r7, #12]
 800a004:	681b      	ldr	r3, [r3, #0]
 800a006:	2b00      	cmp	r3, #0
 800a008:	d14d      	bne.n	800a0a6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800a00a:	68fb      	ldr	r3, [r7, #12]
 800a00c:	689b      	ldr	r3, [r3, #8]
 800a00e:	4618      	mov	r0, r3
 800a010:	f000 ffcc 	bl	800afac <xTaskPriorityDisinherit>
 800a014:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800a016:	68fb      	ldr	r3, [r7, #12]
 800a018:	2200      	movs	r2, #0
 800a01a:	609a      	str	r2, [r3, #8]
 800a01c:	e043      	b.n	800a0a6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	2b00      	cmp	r3, #0
 800a022:	d119      	bne.n	800a058 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a024:	68fb      	ldr	r3, [r7, #12]
 800a026:	6858      	ldr	r0, [r3, #4]
 800a028:	68fb      	ldr	r3, [r7, #12]
 800a02a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a02c:	461a      	mov	r2, r3
 800a02e:	68b9      	ldr	r1, [r7, #8]
 800a030:	f002 fb2f 	bl	800c692 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a034:	68fb      	ldr	r3, [r7, #12]
 800a036:	685a      	ldr	r2, [r3, #4]
 800a038:	68fb      	ldr	r3, [r7, #12]
 800a03a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a03c:	441a      	add	r2, r3
 800a03e:	68fb      	ldr	r3, [r7, #12]
 800a040:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a042:	68fb      	ldr	r3, [r7, #12]
 800a044:	685a      	ldr	r2, [r3, #4]
 800a046:	68fb      	ldr	r3, [r7, #12]
 800a048:	689b      	ldr	r3, [r3, #8]
 800a04a:	429a      	cmp	r2, r3
 800a04c:	d32b      	bcc.n	800a0a6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800a04e:	68fb      	ldr	r3, [r7, #12]
 800a050:	681a      	ldr	r2, [r3, #0]
 800a052:	68fb      	ldr	r3, [r7, #12]
 800a054:	605a      	str	r2, [r3, #4]
 800a056:	e026      	b.n	800a0a6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800a058:	68fb      	ldr	r3, [r7, #12]
 800a05a:	68d8      	ldr	r0, [r3, #12]
 800a05c:	68fb      	ldr	r3, [r7, #12]
 800a05e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a060:	461a      	mov	r2, r3
 800a062:	68b9      	ldr	r1, [r7, #8]
 800a064:	f002 fb15 	bl	800c692 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800a068:	68fb      	ldr	r3, [r7, #12]
 800a06a:	68da      	ldr	r2, [r3, #12]
 800a06c:	68fb      	ldr	r3, [r7, #12]
 800a06e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a070:	425b      	negs	r3, r3
 800a072:	441a      	add	r2, r3
 800a074:	68fb      	ldr	r3, [r7, #12]
 800a076:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a078:	68fb      	ldr	r3, [r7, #12]
 800a07a:	68da      	ldr	r2, [r3, #12]
 800a07c:	68fb      	ldr	r3, [r7, #12]
 800a07e:	681b      	ldr	r3, [r3, #0]
 800a080:	429a      	cmp	r2, r3
 800a082:	d207      	bcs.n	800a094 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800a084:	68fb      	ldr	r3, [r7, #12]
 800a086:	689a      	ldr	r2, [r3, #8]
 800a088:	68fb      	ldr	r3, [r7, #12]
 800a08a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a08c:	425b      	negs	r3, r3
 800a08e:	441a      	add	r2, r3
 800a090:	68fb      	ldr	r3, [r7, #12]
 800a092:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	2b02      	cmp	r3, #2
 800a098:	d105      	bne.n	800a0a6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a09a:	693b      	ldr	r3, [r7, #16]
 800a09c:	2b00      	cmp	r3, #0
 800a09e:	d002      	beq.n	800a0a6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800a0a0:	693b      	ldr	r3, [r7, #16]
 800a0a2:	3b01      	subs	r3, #1
 800a0a4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a0a6:	693b      	ldr	r3, [r7, #16]
 800a0a8:	1c5a      	adds	r2, r3, #1
 800a0aa:	68fb      	ldr	r3, [r7, #12]
 800a0ac:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800a0ae:	697b      	ldr	r3, [r7, #20]
}
 800a0b0:	4618      	mov	r0, r3
 800a0b2:	3718      	adds	r7, #24
 800a0b4:	46bd      	mov	sp, r7
 800a0b6:	bd80      	pop	{r7, pc}

0800a0b8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800a0b8:	b580      	push	{r7, lr}
 800a0ba:	b082      	sub	sp, #8
 800a0bc:	af00      	add	r7, sp, #0
 800a0be:	6078      	str	r0, [r7, #4]
 800a0c0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a0c6:	2b00      	cmp	r3, #0
 800a0c8:	d018      	beq.n	800a0fc <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	68da      	ldr	r2, [r3, #12]
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a0d2:	441a      	add	r2, r3
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	68da      	ldr	r2, [r3, #12]
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	689b      	ldr	r3, [r3, #8]
 800a0e0:	429a      	cmp	r2, r3
 800a0e2:	d303      	bcc.n	800a0ec <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	681a      	ldr	r2, [r3, #0]
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	68d9      	ldr	r1, [r3, #12]
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a0f4:	461a      	mov	r2, r3
 800a0f6:	6838      	ldr	r0, [r7, #0]
 800a0f8:	f002 facb 	bl	800c692 <memcpy>
	}
}
 800a0fc:	bf00      	nop
 800a0fe:	3708      	adds	r7, #8
 800a100:	46bd      	mov	sp, r7
 800a102:	bd80      	pop	{r7, pc}

0800a104 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800a104:	b580      	push	{r7, lr}
 800a106:	b084      	sub	sp, #16
 800a108:	af00      	add	r7, sp, #0
 800a10a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800a10c:	f001 fc9c 	bl	800ba48 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a116:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a118:	e011      	b.n	800a13e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a11e:	2b00      	cmp	r3, #0
 800a120:	d012      	beq.n	800a148 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	3324      	adds	r3, #36	@ 0x24
 800a126:	4618      	mov	r0, r3
 800a128:	f000 fd5c 	bl	800abe4 <xTaskRemoveFromEventList>
 800a12c:	4603      	mov	r3, r0
 800a12e:	2b00      	cmp	r3, #0
 800a130:	d001      	beq.n	800a136 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800a132:	f000 fe35 	bl	800ada0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800a136:	7bfb      	ldrb	r3, [r7, #15]
 800a138:	3b01      	subs	r3, #1
 800a13a:	b2db      	uxtb	r3, r3
 800a13c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a13e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a142:	2b00      	cmp	r3, #0
 800a144:	dce9      	bgt.n	800a11a <prvUnlockQueue+0x16>
 800a146:	e000      	b.n	800a14a <prvUnlockQueue+0x46>
					break;
 800a148:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	22ff      	movs	r2, #255	@ 0xff
 800a14e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800a152:	f001 fcab 	bl	800baac <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800a156:	f001 fc77 	bl	800ba48 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a160:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a162:	e011      	b.n	800a188 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	691b      	ldr	r3, [r3, #16]
 800a168:	2b00      	cmp	r3, #0
 800a16a:	d012      	beq.n	800a192 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	3310      	adds	r3, #16
 800a170:	4618      	mov	r0, r3
 800a172:	f000 fd37 	bl	800abe4 <xTaskRemoveFromEventList>
 800a176:	4603      	mov	r3, r0
 800a178:	2b00      	cmp	r3, #0
 800a17a:	d001      	beq.n	800a180 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800a17c:	f000 fe10 	bl	800ada0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800a180:	7bbb      	ldrb	r3, [r7, #14]
 800a182:	3b01      	subs	r3, #1
 800a184:	b2db      	uxtb	r3, r3
 800a186:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a188:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a18c:	2b00      	cmp	r3, #0
 800a18e:	dce9      	bgt.n	800a164 <prvUnlockQueue+0x60>
 800a190:	e000      	b.n	800a194 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800a192:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	22ff      	movs	r2, #255	@ 0xff
 800a198:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800a19c:	f001 fc86 	bl	800baac <vPortExitCritical>
}
 800a1a0:	bf00      	nop
 800a1a2:	3710      	adds	r7, #16
 800a1a4:	46bd      	mov	sp, r7
 800a1a6:	bd80      	pop	{r7, pc}

0800a1a8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800a1a8:	b580      	push	{r7, lr}
 800a1aa:	b084      	sub	sp, #16
 800a1ac:	af00      	add	r7, sp, #0
 800a1ae:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a1b0:	f001 fc4a 	bl	800ba48 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a1b8:	2b00      	cmp	r3, #0
 800a1ba:	d102      	bne.n	800a1c2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800a1bc:	2301      	movs	r3, #1
 800a1be:	60fb      	str	r3, [r7, #12]
 800a1c0:	e001      	b.n	800a1c6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800a1c2:	2300      	movs	r3, #0
 800a1c4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a1c6:	f001 fc71 	bl	800baac <vPortExitCritical>

	return xReturn;
 800a1ca:	68fb      	ldr	r3, [r7, #12]
}
 800a1cc:	4618      	mov	r0, r3
 800a1ce:	3710      	adds	r7, #16
 800a1d0:	46bd      	mov	sp, r7
 800a1d2:	bd80      	pop	{r7, pc}

0800a1d4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800a1d4:	b580      	push	{r7, lr}
 800a1d6:	b084      	sub	sp, #16
 800a1d8:	af00      	add	r7, sp, #0
 800a1da:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a1dc:	f001 fc34 	bl	800ba48 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a1e8:	429a      	cmp	r2, r3
 800a1ea:	d102      	bne.n	800a1f2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800a1ec:	2301      	movs	r3, #1
 800a1ee:	60fb      	str	r3, [r7, #12]
 800a1f0:	e001      	b.n	800a1f6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800a1f2:	2300      	movs	r3, #0
 800a1f4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a1f6:	f001 fc59 	bl	800baac <vPortExitCritical>

	return xReturn;
 800a1fa:	68fb      	ldr	r3, [r7, #12]
}
 800a1fc:	4618      	mov	r0, r3
 800a1fe:	3710      	adds	r7, #16
 800a200:	46bd      	mov	sp, r7
 800a202:	bd80      	pop	{r7, pc}

0800a204 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800a204:	b480      	push	{r7}
 800a206:	b085      	sub	sp, #20
 800a208:	af00      	add	r7, sp, #0
 800a20a:	6078      	str	r0, [r7, #4]
 800a20c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a20e:	2300      	movs	r3, #0
 800a210:	60fb      	str	r3, [r7, #12]
 800a212:	e014      	b.n	800a23e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800a214:	4a0f      	ldr	r2, [pc, #60]	@ (800a254 <vQueueAddToRegistry+0x50>)
 800a216:	68fb      	ldr	r3, [r7, #12]
 800a218:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800a21c:	2b00      	cmp	r3, #0
 800a21e:	d10b      	bne.n	800a238 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800a220:	490c      	ldr	r1, [pc, #48]	@ (800a254 <vQueueAddToRegistry+0x50>)
 800a222:	68fb      	ldr	r3, [r7, #12]
 800a224:	683a      	ldr	r2, [r7, #0]
 800a226:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800a22a:	4a0a      	ldr	r2, [pc, #40]	@ (800a254 <vQueueAddToRegistry+0x50>)
 800a22c:	68fb      	ldr	r3, [r7, #12]
 800a22e:	00db      	lsls	r3, r3, #3
 800a230:	4413      	add	r3, r2
 800a232:	687a      	ldr	r2, [r7, #4]
 800a234:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800a236:	e006      	b.n	800a246 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a238:	68fb      	ldr	r3, [r7, #12]
 800a23a:	3301      	adds	r3, #1
 800a23c:	60fb      	str	r3, [r7, #12]
 800a23e:	68fb      	ldr	r3, [r7, #12]
 800a240:	2b07      	cmp	r3, #7
 800a242:	d9e7      	bls.n	800a214 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800a244:	bf00      	nop
 800a246:	bf00      	nop
 800a248:	3714      	adds	r7, #20
 800a24a:	46bd      	mov	sp, r7
 800a24c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a250:	4770      	bx	lr
 800a252:	bf00      	nop
 800a254:	20001590 	.word	0x20001590

0800a258 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a258:	b580      	push	{r7, lr}
 800a25a:	b086      	sub	sp, #24
 800a25c:	af00      	add	r7, sp, #0
 800a25e:	60f8      	str	r0, [r7, #12]
 800a260:	60b9      	str	r1, [r7, #8]
 800a262:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800a264:	68fb      	ldr	r3, [r7, #12]
 800a266:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800a268:	f001 fbee 	bl	800ba48 <vPortEnterCritical>
 800a26c:	697b      	ldr	r3, [r7, #20]
 800a26e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a272:	b25b      	sxtb	r3, r3
 800a274:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a278:	d103      	bne.n	800a282 <vQueueWaitForMessageRestricted+0x2a>
 800a27a:	697b      	ldr	r3, [r7, #20]
 800a27c:	2200      	movs	r2, #0
 800a27e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a282:	697b      	ldr	r3, [r7, #20]
 800a284:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a288:	b25b      	sxtb	r3, r3
 800a28a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a28e:	d103      	bne.n	800a298 <vQueueWaitForMessageRestricted+0x40>
 800a290:	697b      	ldr	r3, [r7, #20]
 800a292:	2200      	movs	r2, #0
 800a294:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a298:	f001 fc08 	bl	800baac <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800a29c:	697b      	ldr	r3, [r7, #20]
 800a29e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a2a0:	2b00      	cmp	r3, #0
 800a2a2:	d106      	bne.n	800a2b2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800a2a4:	697b      	ldr	r3, [r7, #20]
 800a2a6:	3324      	adds	r3, #36	@ 0x24
 800a2a8:	687a      	ldr	r2, [r7, #4]
 800a2aa:	68b9      	ldr	r1, [r7, #8]
 800a2ac:	4618      	mov	r0, r3
 800a2ae:	f000 fc6d 	bl	800ab8c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800a2b2:	6978      	ldr	r0, [r7, #20]
 800a2b4:	f7ff ff26 	bl	800a104 <prvUnlockQueue>
	}
 800a2b8:	bf00      	nop
 800a2ba:	3718      	adds	r7, #24
 800a2bc:	46bd      	mov	sp, r7
 800a2be:	bd80      	pop	{r7, pc}

0800a2c0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800a2c0:	b580      	push	{r7, lr}
 800a2c2:	b08e      	sub	sp, #56	@ 0x38
 800a2c4:	af04      	add	r7, sp, #16
 800a2c6:	60f8      	str	r0, [r7, #12]
 800a2c8:	60b9      	str	r1, [r7, #8]
 800a2ca:	607a      	str	r2, [r7, #4]
 800a2cc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800a2ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a2d0:	2b00      	cmp	r3, #0
 800a2d2:	d10b      	bne.n	800a2ec <xTaskCreateStatic+0x2c>
	__asm volatile
 800a2d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a2d8:	f383 8811 	msr	BASEPRI, r3
 800a2dc:	f3bf 8f6f 	isb	sy
 800a2e0:	f3bf 8f4f 	dsb	sy
 800a2e4:	623b      	str	r3, [r7, #32]
}
 800a2e6:	bf00      	nop
 800a2e8:	bf00      	nop
 800a2ea:	e7fd      	b.n	800a2e8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800a2ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a2ee:	2b00      	cmp	r3, #0
 800a2f0:	d10b      	bne.n	800a30a <xTaskCreateStatic+0x4a>
	__asm volatile
 800a2f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a2f6:	f383 8811 	msr	BASEPRI, r3
 800a2fa:	f3bf 8f6f 	isb	sy
 800a2fe:	f3bf 8f4f 	dsb	sy
 800a302:	61fb      	str	r3, [r7, #28]
}
 800a304:	bf00      	nop
 800a306:	bf00      	nop
 800a308:	e7fd      	b.n	800a306 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800a30a:	23a8      	movs	r3, #168	@ 0xa8
 800a30c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800a30e:	693b      	ldr	r3, [r7, #16]
 800a310:	2ba8      	cmp	r3, #168	@ 0xa8
 800a312:	d00b      	beq.n	800a32c <xTaskCreateStatic+0x6c>
	__asm volatile
 800a314:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a318:	f383 8811 	msr	BASEPRI, r3
 800a31c:	f3bf 8f6f 	isb	sy
 800a320:	f3bf 8f4f 	dsb	sy
 800a324:	61bb      	str	r3, [r7, #24]
}
 800a326:	bf00      	nop
 800a328:	bf00      	nop
 800a32a:	e7fd      	b.n	800a328 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800a32c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800a32e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a330:	2b00      	cmp	r3, #0
 800a332:	d01e      	beq.n	800a372 <xTaskCreateStatic+0xb2>
 800a334:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a336:	2b00      	cmp	r3, #0
 800a338:	d01b      	beq.n	800a372 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a33a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a33c:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800a33e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a340:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a342:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800a344:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a346:	2202      	movs	r2, #2
 800a348:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800a34c:	2300      	movs	r3, #0
 800a34e:	9303      	str	r3, [sp, #12]
 800a350:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a352:	9302      	str	r3, [sp, #8]
 800a354:	f107 0314 	add.w	r3, r7, #20
 800a358:	9301      	str	r3, [sp, #4]
 800a35a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a35c:	9300      	str	r3, [sp, #0]
 800a35e:	683b      	ldr	r3, [r7, #0]
 800a360:	687a      	ldr	r2, [r7, #4]
 800a362:	68b9      	ldr	r1, [r7, #8]
 800a364:	68f8      	ldr	r0, [r7, #12]
 800a366:	f000 f851 	bl	800a40c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a36a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800a36c:	f000 f8f6 	bl	800a55c <prvAddNewTaskToReadyList>
 800a370:	e001      	b.n	800a376 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800a372:	2300      	movs	r3, #0
 800a374:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800a376:	697b      	ldr	r3, [r7, #20]
	}
 800a378:	4618      	mov	r0, r3
 800a37a:	3728      	adds	r7, #40	@ 0x28
 800a37c:	46bd      	mov	sp, r7
 800a37e:	bd80      	pop	{r7, pc}

0800a380 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800a380:	b580      	push	{r7, lr}
 800a382:	b08c      	sub	sp, #48	@ 0x30
 800a384:	af04      	add	r7, sp, #16
 800a386:	60f8      	str	r0, [r7, #12]
 800a388:	60b9      	str	r1, [r7, #8]
 800a38a:	603b      	str	r3, [r7, #0]
 800a38c:	4613      	mov	r3, r2
 800a38e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800a390:	88fb      	ldrh	r3, [r7, #6]
 800a392:	009b      	lsls	r3, r3, #2
 800a394:	4618      	mov	r0, r3
 800a396:	f001 fc79 	bl	800bc8c <pvPortMalloc>
 800a39a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800a39c:	697b      	ldr	r3, [r7, #20]
 800a39e:	2b00      	cmp	r3, #0
 800a3a0:	d00e      	beq.n	800a3c0 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800a3a2:	20a8      	movs	r0, #168	@ 0xa8
 800a3a4:	f001 fc72 	bl	800bc8c <pvPortMalloc>
 800a3a8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800a3aa:	69fb      	ldr	r3, [r7, #28]
 800a3ac:	2b00      	cmp	r3, #0
 800a3ae:	d003      	beq.n	800a3b8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800a3b0:	69fb      	ldr	r3, [r7, #28]
 800a3b2:	697a      	ldr	r2, [r7, #20]
 800a3b4:	631a      	str	r2, [r3, #48]	@ 0x30
 800a3b6:	e005      	b.n	800a3c4 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800a3b8:	6978      	ldr	r0, [r7, #20]
 800a3ba:	f001 fd35 	bl	800be28 <vPortFree>
 800a3be:	e001      	b.n	800a3c4 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800a3c0:	2300      	movs	r3, #0
 800a3c2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800a3c4:	69fb      	ldr	r3, [r7, #28]
 800a3c6:	2b00      	cmp	r3, #0
 800a3c8:	d017      	beq.n	800a3fa <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800a3ca:	69fb      	ldr	r3, [r7, #28]
 800a3cc:	2200      	movs	r2, #0
 800a3ce:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800a3d2:	88fa      	ldrh	r2, [r7, #6]
 800a3d4:	2300      	movs	r3, #0
 800a3d6:	9303      	str	r3, [sp, #12]
 800a3d8:	69fb      	ldr	r3, [r7, #28]
 800a3da:	9302      	str	r3, [sp, #8]
 800a3dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a3de:	9301      	str	r3, [sp, #4]
 800a3e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a3e2:	9300      	str	r3, [sp, #0]
 800a3e4:	683b      	ldr	r3, [r7, #0]
 800a3e6:	68b9      	ldr	r1, [r7, #8]
 800a3e8:	68f8      	ldr	r0, [r7, #12]
 800a3ea:	f000 f80f 	bl	800a40c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a3ee:	69f8      	ldr	r0, [r7, #28]
 800a3f0:	f000 f8b4 	bl	800a55c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800a3f4:	2301      	movs	r3, #1
 800a3f6:	61bb      	str	r3, [r7, #24]
 800a3f8:	e002      	b.n	800a400 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800a3fa:	f04f 33ff 	mov.w	r3, #4294967295
 800a3fe:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800a400:	69bb      	ldr	r3, [r7, #24]
	}
 800a402:	4618      	mov	r0, r3
 800a404:	3720      	adds	r7, #32
 800a406:	46bd      	mov	sp, r7
 800a408:	bd80      	pop	{r7, pc}
	...

0800a40c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800a40c:	b580      	push	{r7, lr}
 800a40e:	b088      	sub	sp, #32
 800a410:	af00      	add	r7, sp, #0
 800a412:	60f8      	str	r0, [r7, #12]
 800a414:	60b9      	str	r1, [r7, #8]
 800a416:	607a      	str	r2, [r7, #4]
 800a418:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800a41a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a41c:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	009b      	lsls	r3, r3, #2
 800a422:	461a      	mov	r2, r3
 800a424:	21a5      	movs	r1, #165	@ 0xa5
 800a426:	f002 f829 	bl	800c47c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800a42a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a42c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800a434:	3b01      	subs	r3, #1
 800a436:	009b      	lsls	r3, r3, #2
 800a438:	4413      	add	r3, r2
 800a43a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800a43c:	69bb      	ldr	r3, [r7, #24]
 800a43e:	f023 0307 	bic.w	r3, r3, #7
 800a442:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800a444:	69bb      	ldr	r3, [r7, #24]
 800a446:	f003 0307 	and.w	r3, r3, #7
 800a44a:	2b00      	cmp	r3, #0
 800a44c:	d00b      	beq.n	800a466 <prvInitialiseNewTask+0x5a>
	__asm volatile
 800a44e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a452:	f383 8811 	msr	BASEPRI, r3
 800a456:	f3bf 8f6f 	isb	sy
 800a45a:	f3bf 8f4f 	dsb	sy
 800a45e:	617b      	str	r3, [r7, #20]
}
 800a460:	bf00      	nop
 800a462:	bf00      	nop
 800a464:	e7fd      	b.n	800a462 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800a466:	68bb      	ldr	r3, [r7, #8]
 800a468:	2b00      	cmp	r3, #0
 800a46a:	d01f      	beq.n	800a4ac <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a46c:	2300      	movs	r3, #0
 800a46e:	61fb      	str	r3, [r7, #28]
 800a470:	e012      	b.n	800a498 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800a472:	68ba      	ldr	r2, [r7, #8]
 800a474:	69fb      	ldr	r3, [r7, #28]
 800a476:	4413      	add	r3, r2
 800a478:	7819      	ldrb	r1, [r3, #0]
 800a47a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a47c:	69fb      	ldr	r3, [r7, #28]
 800a47e:	4413      	add	r3, r2
 800a480:	3334      	adds	r3, #52	@ 0x34
 800a482:	460a      	mov	r2, r1
 800a484:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800a486:	68ba      	ldr	r2, [r7, #8]
 800a488:	69fb      	ldr	r3, [r7, #28]
 800a48a:	4413      	add	r3, r2
 800a48c:	781b      	ldrb	r3, [r3, #0]
 800a48e:	2b00      	cmp	r3, #0
 800a490:	d006      	beq.n	800a4a0 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a492:	69fb      	ldr	r3, [r7, #28]
 800a494:	3301      	adds	r3, #1
 800a496:	61fb      	str	r3, [r7, #28]
 800a498:	69fb      	ldr	r3, [r7, #28]
 800a49a:	2b0f      	cmp	r3, #15
 800a49c:	d9e9      	bls.n	800a472 <prvInitialiseNewTask+0x66>
 800a49e:	e000      	b.n	800a4a2 <prvInitialiseNewTask+0x96>
			{
				break;
 800a4a0:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800a4a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a4a4:	2200      	movs	r2, #0
 800a4a6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800a4aa:	e003      	b.n	800a4b4 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800a4ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a4ae:	2200      	movs	r2, #0
 800a4b0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800a4b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a4b6:	2b37      	cmp	r3, #55	@ 0x37
 800a4b8:	d901      	bls.n	800a4be <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800a4ba:	2337      	movs	r3, #55	@ 0x37
 800a4bc:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800a4be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a4c0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a4c2:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800a4c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a4c6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a4c8:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800a4ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a4cc:	2200      	movs	r2, #0
 800a4ce:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800a4d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a4d2:	3304      	adds	r3, #4
 800a4d4:	4618      	mov	r0, r3
 800a4d6:	f7ff f929 	bl	800972c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800a4da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a4dc:	3318      	adds	r3, #24
 800a4de:	4618      	mov	r0, r3
 800a4e0:	f7ff f924 	bl	800972c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800a4e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a4e6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a4e8:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a4ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a4ec:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800a4f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a4f2:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800a4f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a4f6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a4f8:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800a4fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a4fc:	2200      	movs	r2, #0
 800a4fe:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800a502:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a504:	2200      	movs	r2, #0
 800a506:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800a50a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a50c:	3354      	adds	r3, #84	@ 0x54
 800a50e:	224c      	movs	r2, #76	@ 0x4c
 800a510:	2100      	movs	r1, #0
 800a512:	4618      	mov	r0, r3
 800a514:	f001 ffb2 	bl	800c47c <memset>
 800a518:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a51a:	4a0d      	ldr	r2, [pc, #52]	@ (800a550 <prvInitialiseNewTask+0x144>)
 800a51c:	659a      	str	r2, [r3, #88]	@ 0x58
 800a51e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a520:	4a0c      	ldr	r2, [pc, #48]	@ (800a554 <prvInitialiseNewTask+0x148>)
 800a522:	65da      	str	r2, [r3, #92]	@ 0x5c
 800a524:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a526:	4a0c      	ldr	r2, [pc, #48]	@ (800a558 <prvInitialiseNewTask+0x14c>)
 800a528:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800a52a:	683a      	ldr	r2, [r7, #0]
 800a52c:	68f9      	ldr	r1, [r7, #12]
 800a52e:	69b8      	ldr	r0, [r7, #24]
 800a530:	f001 f95a 	bl	800b7e8 <pxPortInitialiseStack>
 800a534:	4602      	mov	r2, r0
 800a536:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a538:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800a53a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a53c:	2b00      	cmp	r3, #0
 800a53e:	d002      	beq.n	800a546 <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800a540:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a542:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a544:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a546:	bf00      	nop
 800a548:	3720      	adds	r7, #32
 800a54a:	46bd      	mov	sp, r7
 800a54c:	bd80      	pop	{r7, pc}
 800a54e:	bf00      	nop
 800a550:	20005824 	.word	0x20005824
 800a554:	2000588c 	.word	0x2000588c
 800a558:	200058f4 	.word	0x200058f4

0800a55c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800a55c:	b580      	push	{r7, lr}
 800a55e:	b082      	sub	sp, #8
 800a560:	af00      	add	r7, sp, #0
 800a562:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800a564:	f001 fa70 	bl	800ba48 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800a568:	4b2d      	ldr	r3, [pc, #180]	@ (800a620 <prvAddNewTaskToReadyList+0xc4>)
 800a56a:	681b      	ldr	r3, [r3, #0]
 800a56c:	3301      	adds	r3, #1
 800a56e:	4a2c      	ldr	r2, [pc, #176]	@ (800a620 <prvAddNewTaskToReadyList+0xc4>)
 800a570:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800a572:	4b2c      	ldr	r3, [pc, #176]	@ (800a624 <prvAddNewTaskToReadyList+0xc8>)
 800a574:	681b      	ldr	r3, [r3, #0]
 800a576:	2b00      	cmp	r3, #0
 800a578:	d109      	bne.n	800a58e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800a57a:	4a2a      	ldr	r2, [pc, #168]	@ (800a624 <prvAddNewTaskToReadyList+0xc8>)
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800a580:	4b27      	ldr	r3, [pc, #156]	@ (800a620 <prvAddNewTaskToReadyList+0xc4>)
 800a582:	681b      	ldr	r3, [r3, #0]
 800a584:	2b01      	cmp	r3, #1
 800a586:	d110      	bne.n	800a5aa <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800a588:	f000 fc2e 	bl	800ade8 <prvInitialiseTaskLists>
 800a58c:	e00d      	b.n	800a5aa <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800a58e:	4b26      	ldr	r3, [pc, #152]	@ (800a628 <prvAddNewTaskToReadyList+0xcc>)
 800a590:	681b      	ldr	r3, [r3, #0]
 800a592:	2b00      	cmp	r3, #0
 800a594:	d109      	bne.n	800a5aa <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800a596:	4b23      	ldr	r3, [pc, #140]	@ (800a624 <prvAddNewTaskToReadyList+0xc8>)
 800a598:	681b      	ldr	r3, [r3, #0]
 800a59a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a5a0:	429a      	cmp	r2, r3
 800a5a2:	d802      	bhi.n	800a5aa <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800a5a4:	4a1f      	ldr	r2, [pc, #124]	@ (800a624 <prvAddNewTaskToReadyList+0xc8>)
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800a5aa:	4b20      	ldr	r3, [pc, #128]	@ (800a62c <prvAddNewTaskToReadyList+0xd0>)
 800a5ac:	681b      	ldr	r3, [r3, #0]
 800a5ae:	3301      	adds	r3, #1
 800a5b0:	4a1e      	ldr	r2, [pc, #120]	@ (800a62c <prvAddNewTaskToReadyList+0xd0>)
 800a5b2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800a5b4:	4b1d      	ldr	r3, [pc, #116]	@ (800a62c <prvAddNewTaskToReadyList+0xd0>)
 800a5b6:	681a      	ldr	r2, [r3, #0]
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a5c0:	4b1b      	ldr	r3, [pc, #108]	@ (800a630 <prvAddNewTaskToReadyList+0xd4>)
 800a5c2:	681b      	ldr	r3, [r3, #0]
 800a5c4:	429a      	cmp	r2, r3
 800a5c6:	d903      	bls.n	800a5d0 <prvAddNewTaskToReadyList+0x74>
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a5cc:	4a18      	ldr	r2, [pc, #96]	@ (800a630 <prvAddNewTaskToReadyList+0xd4>)
 800a5ce:	6013      	str	r3, [r2, #0]
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a5d4:	4613      	mov	r3, r2
 800a5d6:	009b      	lsls	r3, r3, #2
 800a5d8:	4413      	add	r3, r2
 800a5da:	009b      	lsls	r3, r3, #2
 800a5dc:	4a15      	ldr	r2, [pc, #84]	@ (800a634 <prvAddNewTaskToReadyList+0xd8>)
 800a5de:	441a      	add	r2, r3
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	3304      	adds	r3, #4
 800a5e4:	4619      	mov	r1, r3
 800a5e6:	4610      	mov	r0, r2
 800a5e8:	f7ff f8ad 	bl	8009746 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800a5ec:	f001 fa5e 	bl	800baac <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800a5f0:	4b0d      	ldr	r3, [pc, #52]	@ (800a628 <prvAddNewTaskToReadyList+0xcc>)
 800a5f2:	681b      	ldr	r3, [r3, #0]
 800a5f4:	2b00      	cmp	r3, #0
 800a5f6:	d00e      	beq.n	800a616 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800a5f8:	4b0a      	ldr	r3, [pc, #40]	@ (800a624 <prvAddNewTaskToReadyList+0xc8>)
 800a5fa:	681b      	ldr	r3, [r3, #0]
 800a5fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a602:	429a      	cmp	r2, r3
 800a604:	d207      	bcs.n	800a616 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800a606:	4b0c      	ldr	r3, [pc, #48]	@ (800a638 <prvAddNewTaskToReadyList+0xdc>)
 800a608:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a60c:	601a      	str	r2, [r3, #0]
 800a60e:	f3bf 8f4f 	dsb	sy
 800a612:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a616:	bf00      	nop
 800a618:	3708      	adds	r7, #8
 800a61a:	46bd      	mov	sp, r7
 800a61c:	bd80      	pop	{r7, pc}
 800a61e:	bf00      	nop
 800a620:	20001aa4 	.word	0x20001aa4
 800a624:	200015d0 	.word	0x200015d0
 800a628:	20001ab0 	.word	0x20001ab0
 800a62c:	20001ac0 	.word	0x20001ac0
 800a630:	20001aac 	.word	0x20001aac
 800a634:	200015d4 	.word	0x200015d4
 800a638:	e000ed04 	.word	0xe000ed04

0800a63c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800a63c:	b580      	push	{r7, lr}
 800a63e:	b084      	sub	sp, #16
 800a640:	af00      	add	r7, sp, #0
 800a642:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800a644:	2300      	movs	r3, #0
 800a646:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	2b00      	cmp	r3, #0
 800a64c:	d018      	beq.n	800a680 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800a64e:	4b14      	ldr	r3, [pc, #80]	@ (800a6a0 <vTaskDelay+0x64>)
 800a650:	681b      	ldr	r3, [r3, #0]
 800a652:	2b00      	cmp	r3, #0
 800a654:	d00b      	beq.n	800a66e <vTaskDelay+0x32>
	__asm volatile
 800a656:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a65a:	f383 8811 	msr	BASEPRI, r3
 800a65e:	f3bf 8f6f 	isb	sy
 800a662:	f3bf 8f4f 	dsb	sy
 800a666:	60bb      	str	r3, [r7, #8]
}
 800a668:	bf00      	nop
 800a66a:	bf00      	nop
 800a66c:	e7fd      	b.n	800a66a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800a66e:	f000 f88b 	bl	800a788 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800a672:	2100      	movs	r1, #0
 800a674:	6878      	ldr	r0, [r7, #4]
 800a676:	f000 fd09 	bl	800b08c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800a67a:	f000 f893 	bl	800a7a4 <xTaskResumeAll>
 800a67e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800a680:	68fb      	ldr	r3, [r7, #12]
 800a682:	2b00      	cmp	r3, #0
 800a684:	d107      	bne.n	800a696 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800a686:	4b07      	ldr	r3, [pc, #28]	@ (800a6a4 <vTaskDelay+0x68>)
 800a688:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a68c:	601a      	str	r2, [r3, #0]
 800a68e:	f3bf 8f4f 	dsb	sy
 800a692:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a696:	bf00      	nop
 800a698:	3710      	adds	r7, #16
 800a69a:	46bd      	mov	sp, r7
 800a69c:	bd80      	pop	{r7, pc}
 800a69e:	bf00      	nop
 800a6a0:	20001acc 	.word	0x20001acc
 800a6a4:	e000ed04 	.word	0xe000ed04

0800a6a8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800a6a8:	b580      	push	{r7, lr}
 800a6aa:	b08a      	sub	sp, #40	@ 0x28
 800a6ac:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800a6ae:	2300      	movs	r3, #0
 800a6b0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800a6b2:	2300      	movs	r3, #0
 800a6b4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800a6b6:	463a      	mov	r2, r7
 800a6b8:	1d39      	adds	r1, r7, #4
 800a6ba:	f107 0308 	add.w	r3, r7, #8
 800a6be:	4618      	mov	r0, r3
 800a6c0:	f7fe ffe0 	bl	8009684 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800a6c4:	6839      	ldr	r1, [r7, #0]
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	68ba      	ldr	r2, [r7, #8]
 800a6ca:	9202      	str	r2, [sp, #8]
 800a6cc:	9301      	str	r3, [sp, #4]
 800a6ce:	2300      	movs	r3, #0
 800a6d0:	9300      	str	r3, [sp, #0]
 800a6d2:	2300      	movs	r3, #0
 800a6d4:	460a      	mov	r2, r1
 800a6d6:	4924      	ldr	r1, [pc, #144]	@ (800a768 <vTaskStartScheduler+0xc0>)
 800a6d8:	4824      	ldr	r0, [pc, #144]	@ (800a76c <vTaskStartScheduler+0xc4>)
 800a6da:	f7ff fdf1 	bl	800a2c0 <xTaskCreateStatic>
 800a6de:	4603      	mov	r3, r0
 800a6e0:	4a23      	ldr	r2, [pc, #140]	@ (800a770 <vTaskStartScheduler+0xc8>)
 800a6e2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800a6e4:	4b22      	ldr	r3, [pc, #136]	@ (800a770 <vTaskStartScheduler+0xc8>)
 800a6e6:	681b      	ldr	r3, [r3, #0]
 800a6e8:	2b00      	cmp	r3, #0
 800a6ea:	d002      	beq.n	800a6f2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800a6ec:	2301      	movs	r3, #1
 800a6ee:	617b      	str	r3, [r7, #20]
 800a6f0:	e001      	b.n	800a6f6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800a6f2:	2300      	movs	r3, #0
 800a6f4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800a6f6:	697b      	ldr	r3, [r7, #20]
 800a6f8:	2b01      	cmp	r3, #1
 800a6fa:	d102      	bne.n	800a702 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800a6fc:	f000 fd1a 	bl	800b134 <xTimerCreateTimerTask>
 800a700:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800a702:	697b      	ldr	r3, [r7, #20]
 800a704:	2b01      	cmp	r3, #1
 800a706:	d11b      	bne.n	800a740 <vTaskStartScheduler+0x98>
	__asm volatile
 800a708:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a70c:	f383 8811 	msr	BASEPRI, r3
 800a710:	f3bf 8f6f 	isb	sy
 800a714:	f3bf 8f4f 	dsb	sy
 800a718:	613b      	str	r3, [r7, #16]
}
 800a71a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800a71c:	4b15      	ldr	r3, [pc, #84]	@ (800a774 <vTaskStartScheduler+0xcc>)
 800a71e:	681b      	ldr	r3, [r3, #0]
 800a720:	3354      	adds	r3, #84	@ 0x54
 800a722:	4a15      	ldr	r2, [pc, #84]	@ (800a778 <vTaskStartScheduler+0xd0>)
 800a724:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800a726:	4b15      	ldr	r3, [pc, #84]	@ (800a77c <vTaskStartScheduler+0xd4>)
 800a728:	f04f 32ff 	mov.w	r2, #4294967295
 800a72c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800a72e:	4b14      	ldr	r3, [pc, #80]	@ (800a780 <vTaskStartScheduler+0xd8>)
 800a730:	2201      	movs	r2, #1
 800a732:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800a734:	4b13      	ldr	r3, [pc, #76]	@ (800a784 <vTaskStartScheduler+0xdc>)
 800a736:	2200      	movs	r2, #0
 800a738:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800a73a:	f001 f8e1 	bl	800b900 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800a73e:	e00f      	b.n	800a760 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800a740:	697b      	ldr	r3, [r7, #20]
 800a742:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a746:	d10b      	bne.n	800a760 <vTaskStartScheduler+0xb8>
	__asm volatile
 800a748:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a74c:	f383 8811 	msr	BASEPRI, r3
 800a750:	f3bf 8f6f 	isb	sy
 800a754:	f3bf 8f4f 	dsb	sy
 800a758:	60fb      	str	r3, [r7, #12]
}
 800a75a:	bf00      	nop
 800a75c:	bf00      	nop
 800a75e:	e7fd      	b.n	800a75c <vTaskStartScheduler+0xb4>
}
 800a760:	bf00      	nop
 800a762:	3718      	adds	r7, #24
 800a764:	46bd      	mov	sp, r7
 800a766:	bd80      	pop	{r7, pc}
 800a768:	0800d9c4 	.word	0x0800d9c4
 800a76c:	0800adb9 	.word	0x0800adb9
 800a770:	20001ac8 	.word	0x20001ac8
 800a774:	200015d0 	.word	0x200015d0
 800a778:	200000e8 	.word	0x200000e8
 800a77c:	20001ac4 	.word	0x20001ac4
 800a780:	20001ab0 	.word	0x20001ab0
 800a784:	20001aa8 	.word	0x20001aa8

0800a788 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800a788:	b480      	push	{r7}
 800a78a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800a78c:	4b04      	ldr	r3, [pc, #16]	@ (800a7a0 <vTaskSuspendAll+0x18>)
 800a78e:	681b      	ldr	r3, [r3, #0]
 800a790:	3301      	adds	r3, #1
 800a792:	4a03      	ldr	r2, [pc, #12]	@ (800a7a0 <vTaskSuspendAll+0x18>)
 800a794:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800a796:	bf00      	nop
 800a798:	46bd      	mov	sp, r7
 800a79a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a79e:	4770      	bx	lr
 800a7a0:	20001acc 	.word	0x20001acc

0800a7a4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800a7a4:	b580      	push	{r7, lr}
 800a7a6:	b084      	sub	sp, #16
 800a7a8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800a7aa:	2300      	movs	r3, #0
 800a7ac:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800a7ae:	2300      	movs	r3, #0
 800a7b0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800a7b2:	4b42      	ldr	r3, [pc, #264]	@ (800a8bc <xTaskResumeAll+0x118>)
 800a7b4:	681b      	ldr	r3, [r3, #0]
 800a7b6:	2b00      	cmp	r3, #0
 800a7b8:	d10b      	bne.n	800a7d2 <xTaskResumeAll+0x2e>
	__asm volatile
 800a7ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a7be:	f383 8811 	msr	BASEPRI, r3
 800a7c2:	f3bf 8f6f 	isb	sy
 800a7c6:	f3bf 8f4f 	dsb	sy
 800a7ca:	603b      	str	r3, [r7, #0]
}
 800a7cc:	bf00      	nop
 800a7ce:	bf00      	nop
 800a7d0:	e7fd      	b.n	800a7ce <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800a7d2:	f001 f939 	bl	800ba48 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800a7d6:	4b39      	ldr	r3, [pc, #228]	@ (800a8bc <xTaskResumeAll+0x118>)
 800a7d8:	681b      	ldr	r3, [r3, #0]
 800a7da:	3b01      	subs	r3, #1
 800a7dc:	4a37      	ldr	r2, [pc, #220]	@ (800a8bc <xTaskResumeAll+0x118>)
 800a7de:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a7e0:	4b36      	ldr	r3, [pc, #216]	@ (800a8bc <xTaskResumeAll+0x118>)
 800a7e2:	681b      	ldr	r3, [r3, #0]
 800a7e4:	2b00      	cmp	r3, #0
 800a7e6:	d162      	bne.n	800a8ae <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800a7e8:	4b35      	ldr	r3, [pc, #212]	@ (800a8c0 <xTaskResumeAll+0x11c>)
 800a7ea:	681b      	ldr	r3, [r3, #0]
 800a7ec:	2b00      	cmp	r3, #0
 800a7ee:	d05e      	beq.n	800a8ae <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a7f0:	e02f      	b.n	800a852 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a7f2:	4b34      	ldr	r3, [pc, #208]	@ (800a8c4 <xTaskResumeAll+0x120>)
 800a7f4:	68db      	ldr	r3, [r3, #12]
 800a7f6:	68db      	ldr	r3, [r3, #12]
 800a7f8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a7fa:	68fb      	ldr	r3, [r7, #12]
 800a7fc:	3318      	adds	r3, #24
 800a7fe:	4618      	mov	r0, r3
 800a800:	f7fe fffe 	bl	8009800 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a804:	68fb      	ldr	r3, [r7, #12]
 800a806:	3304      	adds	r3, #4
 800a808:	4618      	mov	r0, r3
 800a80a:	f7fe fff9 	bl	8009800 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a80e:	68fb      	ldr	r3, [r7, #12]
 800a810:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a812:	4b2d      	ldr	r3, [pc, #180]	@ (800a8c8 <xTaskResumeAll+0x124>)
 800a814:	681b      	ldr	r3, [r3, #0]
 800a816:	429a      	cmp	r2, r3
 800a818:	d903      	bls.n	800a822 <xTaskResumeAll+0x7e>
 800a81a:	68fb      	ldr	r3, [r7, #12]
 800a81c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a81e:	4a2a      	ldr	r2, [pc, #168]	@ (800a8c8 <xTaskResumeAll+0x124>)
 800a820:	6013      	str	r3, [r2, #0]
 800a822:	68fb      	ldr	r3, [r7, #12]
 800a824:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a826:	4613      	mov	r3, r2
 800a828:	009b      	lsls	r3, r3, #2
 800a82a:	4413      	add	r3, r2
 800a82c:	009b      	lsls	r3, r3, #2
 800a82e:	4a27      	ldr	r2, [pc, #156]	@ (800a8cc <xTaskResumeAll+0x128>)
 800a830:	441a      	add	r2, r3
 800a832:	68fb      	ldr	r3, [r7, #12]
 800a834:	3304      	adds	r3, #4
 800a836:	4619      	mov	r1, r3
 800a838:	4610      	mov	r0, r2
 800a83a:	f7fe ff84 	bl	8009746 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a83e:	68fb      	ldr	r3, [r7, #12]
 800a840:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a842:	4b23      	ldr	r3, [pc, #140]	@ (800a8d0 <xTaskResumeAll+0x12c>)
 800a844:	681b      	ldr	r3, [r3, #0]
 800a846:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a848:	429a      	cmp	r2, r3
 800a84a:	d302      	bcc.n	800a852 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800a84c:	4b21      	ldr	r3, [pc, #132]	@ (800a8d4 <xTaskResumeAll+0x130>)
 800a84e:	2201      	movs	r2, #1
 800a850:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a852:	4b1c      	ldr	r3, [pc, #112]	@ (800a8c4 <xTaskResumeAll+0x120>)
 800a854:	681b      	ldr	r3, [r3, #0]
 800a856:	2b00      	cmp	r3, #0
 800a858:	d1cb      	bne.n	800a7f2 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800a85a:	68fb      	ldr	r3, [r7, #12]
 800a85c:	2b00      	cmp	r3, #0
 800a85e:	d001      	beq.n	800a864 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800a860:	f000 fb66 	bl	800af30 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800a864:	4b1c      	ldr	r3, [pc, #112]	@ (800a8d8 <xTaskResumeAll+0x134>)
 800a866:	681b      	ldr	r3, [r3, #0]
 800a868:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	2b00      	cmp	r3, #0
 800a86e:	d010      	beq.n	800a892 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800a870:	f000 f846 	bl	800a900 <xTaskIncrementTick>
 800a874:	4603      	mov	r3, r0
 800a876:	2b00      	cmp	r3, #0
 800a878:	d002      	beq.n	800a880 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800a87a:	4b16      	ldr	r3, [pc, #88]	@ (800a8d4 <xTaskResumeAll+0x130>)
 800a87c:	2201      	movs	r2, #1
 800a87e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	3b01      	subs	r3, #1
 800a884:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	2b00      	cmp	r3, #0
 800a88a:	d1f1      	bne.n	800a870 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800a88c:	4b12      	ldr	r3, [pc, #72]	@ (800a8d8 <xTaskResumeAll+0x134>)
 800a88e:	2200      	movs	r2, #0
 800a890:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800a892:	4b10      	ldr	r3, [pc, #64]	@ (800a8d4 <xTaskResumeAll+0x130>)
 800a894:	681b      	ldr	r3, [r3, #0]
 800a896:	2b00      	cmp	r3, #0
 800a898:	d009      	beq.n	800a8ae <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800a89a:	2301      	movs	r3, #1
 800a89c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800a89e:	4b0f      	ldr	r3, [pc, #60]	@ (800a8dc <xTaskResumeAll+0x138>)
 800a8a0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a8a4:	601a      	str	r2, [r3, #0]
 800a8a6:	f3bf 8f4f 	dsb	sy
 800a8aa:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a8ae:	f001 f8fd 	bl	800baac <vPortExitCritical>

	return xAlreadyYielded;
 800a8b2:	68bb      	ldr	r3, [r7, #8]
}
 800a8b4:	4618      	mov	r0, r3
 800a8b6:	3710      	adds	r7, #16
 800a8b8:	46bd      	mov	sp, r7
 800a8ba:	bd80      	pop	{r7, pc}
 800a8bc:	20001acc 	.word	0x20001acc
 800a8c0:	20001aa4 	.word	0x20001aa4
 800a8c4:	20001a64 	.word	0x20001a64
 800a8c8:	20001aac 	.word	0x20001aac
 800a8cc:	200015d4 	.word	0x200015d4
 800a8d0:	200015d0 	.word	0x200015d0
 800a8d4:	20001ab8 	.word	0x20001ab8
 800a8d8:	20001ab4 	.word	0x20001ab4
 800a8dc:	e000ed04 	.word	0xe000ed04

0800a8e0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800a8e0:	b480      	push	{r7}
 800a8e2:	b083      	sub	sp, #12
 800a8e4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800a8e6:	4b05      	ldr	r3, [pc, #20]	@ (800a8fc <xTaskGetTickCount+0x1c>)
 800a8e8:	681b      	ldr	r3, [r3, #0]
 800a8ea:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800a8ec:	687b      	ldr	r3, [r7, #4]
}
 800a8ee:	4618      	mov	r0, r3
 800a8f0:	370c      	adds	r7, #12
 800a8f2:	46bd      	mov	sp, r7
 800a8f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8f8:	4770      	bx	lr
 800a8fa:	bf00      	nop
 800a8fc:	20001aa8 	.word	0x20001aa8

0800a900 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800a900:	b580      	push	{r7, lr}
 800a902:	b086      	sub	sp, #24
 800a904:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800a906:	2300      	movs	r3, #0
 800a908:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a90a:	4b4f      	ldr	r3, [pc, #316]	@ (800aa48 <xTaskIncrementTick+0x148>)
 800a90c:	681b      	ldr	r3, [r3, #0]
 800a90e:	2b00      	cmp	r3, #0
 800a910:	f040 8090 	bne.w	800aa34 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800a914:	4b4d      	ldr	r3, [pc, #308]	@ (800aa4c <xTaskIncrementTick+0x14c>)
 800a916:	681b      	ldr	r3, [r3, #0]
 800a918:	3301      	adds	r3, #1
 800a91a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800a91c:	4a4b      	ldr	r2, [pc, #300]	@ (800aa4c <xTaskIncrementTick+0x14c>)
 800a91e:	693b      	ldr	r3, [r7, #16]
 800a920:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800a922:	693b      	ldr	r3, [r7, #16]
 800a924:	2b00      	cmp	r3, #0
 800a926:	d121      	bne.n	800a96c <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800a928:	4b49      	ldr	r3, [pc, #292]	@ (800aa50 <xTaskIncrementTick+0x150>)
 800a92a:	681b      	ldr	r3, [r3, #0]
 800a92c:	681b      	ldr	r3, [r3, #0]
 800a92e:	2b00      	cmp	r3, #0
 800a930:	d00b      	beq.n	800a94a <xTaskIncrementTick+0x4a>
	__asm volatile
 800a932:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a936:	f383 8811 	msr	BASEPRI, r3
 800a93a:	f3bf 8f6f 	isb	sy
 800a93e:	f3bf 8f4f 	dsb	sy
 800a942:	603b      	str	r3, [r7, #0]
}
 800a944:	bf00      	nop
 800a946:	bf00      	nop
 800a948:	e7fd      	b.n	800a946 <xTaskIncrementTick+0x46>
 800a94a:	4b41      	ldr	r3, [pc, #260]	@ (800aa50 <xTaskIncrementTick+0x150>)
 800a94c:	681b      	ldr	r3, [r3, #0]
 800a94e:	60fb      	str	r3, [r7, #12]
 800a950:	4b40      	ldr	r3, [pc, #256]	@ (800aa54 <xTaskIncrementTick+0x154>)
 800a952:	681b      	ldr	r3, [r3, #0]
 800a954:	4a3e      	ldr	r2, [pc, #248]	@ (800aa50 <xTaskIncrementTick+0x150>)
 800a956:	6013      	str	r3, [r2, #0]
 800a958:	4a3e      	ldr	r2, [pc, #248]	@ (800aa54 <xTaskIncrementTick+0x154>)
 800a95a:	68fb      	ldr	r3, [r7, #12]
 800a95c:	6013      	str	r3, [r2, #0]
 800a95e:	4b3e      	ldr	r3, [pc, #248]	@ (800aa58 <xTaskIncrementTick+0x158>)
 800a960:	681b      	ldr	r3, [r3, #0]
 800a962:	3301      	adds	r3, #1
 800a964:	4a3c      	ldr	r2, [pc, #240]	@ (800aa58 <xTaskIncrementTick+0x158>)
 800a966:	6013      	str	r3, [r2, #0]
 800a968:	f000 fae2 	bl	800af30 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800a96c:	4b3b      	ldr	r3, [pc, #236]	@ (800aa5c <xTaskIncrementTick+0x15c>)
 800a96e:	681b      	ldr	r3, [r3, #0]
 800a970:	693a      	ldr	r2, [r7, #16]
 800a972:	429a      	cmp	r2, r3
 800a974:	d349      	bcc.n	800aa0a <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a976:	4b36      	ldr	r3, [pc, #216]	@ (800aa50 <xTaskIncrementTick+0x150>)
 800a978:	681b      	ldr	r3, [r3, #0]
 800a97a:	681b      	ldr	r3, [r3, #0]
 800a97c:	2b00      	cmp	r3, #0
 800a97e:	d104      	bne.n	800a98a <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a980:	4b36      	ldr	r3, [pc, #216]	@ (800aa5c <xTaskIncrementTick+0x15c>)
 800a982:	f04f 32ff 	mov.w	r2, #4294967295
 800a986:	601a      	str	r2, [r3, #0]
					break;
 800a988:	e03f      	b.n	800aa0a <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a98a:	4b31      	ldr	r3, [pc, #196]	@ (800aa50 <xTaskIncrementTick+0x150>)
 800a98c:	681b      	ldr	r3, [r3, #0]
 800a98e:	68db      	ldr	r3, [r3, #12]
 800a990:	68db      	ldr	r3, [r3, #12]
 800a992:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800a994:	68bb      	ldr	r3, [r7, #8]
 800a996:	685b      	ldr	r3, [r3, #4]
 800a998:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800a99a:	693a      	ldr	r2, [r7, #16]
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	429a      	cmp	r2, r3
 800a9a0:	d203      	bcs.n	800a9aa <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800a9a2:	4a2e      	ldr	r2, [pc, #184]	@ (800aa5c <xTaskIncrementTick+0x15c>)
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800a9a8:	e02f      	b.n	800aa0a <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a9aa:	68bb      	ldr	r3, [r7, #8]
 800a9ac:	3304      	adds	r3, #4
 800a9ae:	4618      	mov	r0, r3
 800a9b0:	f7fe ff26 	bl	8009800 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800a9b4:	68bb      	ldr	r3, [r7, #8]
 800a9b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a9b8:	2b00      	cmp	r3, #0
 800a9ba:	d004      	beq.n	800a9c6 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a9bc:	68bb      	ldr	r3, [r7, #8]
 800a9be:	3318      	adds	r3, #24
 800a9c0:	4618      	mov	r0, r3
 800a9c2:	f7fe ff1d 	bl	8009800 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800a9c6:	68bb      	ldr	r3, [r7, #8]
 800a9c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a9ca:	4b25      	ldr	r3, [pc, #148]	@ (800aa60 <xTaskIncrementTick+0x160>)
 800a9cc:	681b      	ldr	r3, [r3, #0]
 800a9ce:	429a      	cmp	r2, r3
 800a9d0:	d903      	bls.n	800a9da <xTaskIncrementTick+0xda>
 800a9d2:	68bb      	ldr	r3, [r7, #8]
 800a9d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a9d6:	4a22      	ldr	r2, [pc, #136]	@ (800aa60 <xTaskIncrementTick+0x160>)
 800a9d8:	6013      	str	r3, [r2, #0]
 800a9da:	68bb      	ldr	r3, [r7, #8]
 800a9dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a9de:	4613      	mov	r3, r2
 800a9e0:	009b      	lsls	r3, r3, #2
 800a9e2:	4413      	add	r3, r2
 800a9e4:	009b      	lsls	r3, r3, #2
 800a9e6:	4a1f      	ldr	r2, [pc, #124]	@ (800aa64 <xTaskIncrementTick+0x164>)
 800a9e8:	441a      	add	r2, r3
 800a9ea:	68bb      	ldr	r3, [r7, #8]
 800a9ec:	3304      	adds	r3, #4
 800a9ee:	4619      	mov	r1, r3
 800a9f0:	4610      	mov	r0, r2
 800a9f2:	f7fe fea8 	bl	8009746 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a9f6:	68bb      	ldr	r3, [r7, #8]
 800a9f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a9fa:	4b1b      	ldr	r3, [pc, #108]	@ (800aa68 <xTaskIncrementTick+0x168>)
 800a9fc:	681b      	ldr	r3, [r3, #0]
 800a9fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aa00:	429a      	cmp	r2, r3
 800aa02:	d3b8      	bcc.n	800a976 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800aa04:	2301      	movs	r3, #1
 800aa06:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800aa08:	e7b5      	b.n	800a976 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800aa0a:	4b17      	ldr	r3, [pc, #92]	@ (800aa68 <xTaskIncrementTick+0x168>)
 800aa0c:	681b      	ldr	r3, [r3, #0]
 800aa0e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800aa10:	4914      	ldr	r1, [pc, #80]	@ (800aa64 <xTaskIncrementTick+0x164>)
 800aa12:	4613      	mov	r3, r2
 800aa14:	009b      	lsls	r3, r3, #2
 800aa16:	4413      	add	r3, r2
 800aa18:	009b      	lsls	r3, r3, #2
 800aa1a:	440b      	add	r3, r1
 800aa1c:	681b      	ldr	r3, [r3, #0]
 800aa1e:	2b01      	cmp	r3, #1
 800aa20:	d901      	bls.n	800aa26 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800aa22:	2301      	movs	r3, #1
 800aa24:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800aa26:	4b11      	ldr	r3, [pc, #68]	@ (800aa6c <xTaskIncrementTick+0x16c>)
 800aa28:	681b      	ldr	r3, [r3, #0]
 800aa2a:	2b00      	cmp	r3, #0
 800aa2c:	d007      	beq.n	800aa3e <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800aa2e:	2301      	movs	r3, #1
 800aa30:	617b      	str	r3, [r7, #20]
 800aa32:	e004      	b.n	800aa3e <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800aa34:	4b0e      	ldr	r3, [pc, #56]	@ (800aa70 <xTaskIncrementTick+0x170>)
 800aa36:	681b      	ldr	r3, [r3, #0]
 800aa38:	3301      	adds	r3, #1
 800aa3a:	4a0d      	ldr	r2, [pc, #52]	@ (800aa70 <xTaskIncrementTick+0x170>)
 800aa3c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800aa3e:	697b      	ldr	r3, [r7, #20]
}
 800aa40:	4618      	mov	r0, r3
 800aa42:	3718      	adds	r7, #24
 800aa44:	46bd      	mov	sp, r7
 800aa46:	bd80      	pop	{r7, pc}
 800aa48:	20001acc 	.word	0x20001acc
 800aa4c:	20001aa8 	.word	0x20001aa8
 800aa50:	20001a5c 	.word	0x20001a5c
 800aa54:	20001a60 	.word	0x20001a60
 800aa58:	20001abc 	.word	0x20001abc
 800aa5c:	20001ac4 	.word	0x20001ac4
 800aa60:	20001aac 	.word	0x20001aac
 800aa64:	200015d4 	.word	0x200015d4
 800aa68:	200015d0 	.word	0x200015d0
 800aa6c:	20001ab8 	.word	0x20001ab8
 800aa70:	20001ab4 	.word	0x20001ab4

0800aa74 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800aa74:	b480      	push	{r7}
 800aa76:	b085      	sub	sp, #20
 800aa78:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800aa7a:	4b2b      	ldr	r3, [pc, #172]	@ (800ab28 <vTaskSwitchContext+0xb4>)
 800aa7c:	681b      	ldr	r3, [r3, #0]
 800aa7e:	2b00      	cmp	r3, #0
 800aa80:	d003      	beq.n	800aa8a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800aa82:	4b2a      	ldr	r3, [pc, #168]	@ (800ab2c <vTaskSwitchContext+0xb8>)
 800aa84:	2201      	movs	r2, #1
 800aa86:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800aa88:	e047      	b.n	800ab1a <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 800aa8a:	4b28      	ldr	r3, [pc, #160]	@ (800ab2c <vTaskSwitchContext+0xb8>)
 800aa8c:	2200      	movs	r2, #0
 800aa8e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800aa90:	4b27      	ldr	r3, [pc, #156]	@ (800ab30 <vTaskSwitchContext+0xbc>)
 800aa92:	681b      	ldr	r3, [r3, #0]
 800aa94:	60fb      	str	r3, [r7, #12]
 800aa96:	e011      	b.n	800aabc <vTaskSwitchContext+0x48>
 800aa98:	68fb      	ldr	r3, [r7, #12]
 800aa9a:	2b00      	cmp	r3, #0
 800aa9c:	d10b      	bne.n	800aab6 <vTaskSwitchContext+0x42>
	__asm volatile
 800aa9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aaa2:	f383 8811 	msr	BASEPRI, r3
 800aaa6:	f3bf 8f6f 	isb	sy
 800aaaa:	f3bf 8f4f 	dsb	sy
 800aaae:	607b      	str	r3, [r7, #4]
}
 800aab0:	bf00      	nop
 800aab2:	bf00      	nop
 800aab4:	e7fd      	b.n	800aab2 <vTaskSwitchContext+0x3e>
 800aab6:	68fb      	ldr	r3, [r7, #12]
 800aab8:	3b01      	subs	r3, #1
 800aaba:	60fb      	str	r3, [r7, #12]
 800aabc:	491d      	ldr	r1, [pc, #116]	@ (800ab34 <vTaskSwitchContext+0xc0>)
 800aabe:	68fa      	ldr	r2, [r7, #12]
 800aac0:	4613      	mov	r3, r2
 800aac2:	009b      	lsls	r3, r3, #2
 800aac4:	4413      	add	r3, r2
 800aac6:	009b      	lsls	r3, r3, #2
 800aac8:	440b      	add	r3, r1
 800aaca:	681b      	ldr	r3, [r3, #0]
 800aacc:	2b00      	cmp	r3, #0
 800aace:	d0e3      	beq.n	800aa98 <vTaskSwitchContext+0x24>
 800aad0:	68fa      	ldr	r2, [r7, #12]
 800aad2:	4613      	mov	r3, r2
 800aad4:	009b      	lsls	r3, r3, #2
 800aad6:	4413      	add	r3, r2
 800aad8:	009b      	lsls	r3, r3, #2
 800aada:	4a16      	ldr	r2, [pc, #88]	@ (800ab34 <vTaskSwitchContext+0xc0>)
 800aadc:	4413      	add	r3, r2
 800aade:	60bb      	str	r3, [r7, #8]
 800aae0:	68bb      	ldr	r3, [r7, #8]
 800aae2:	685b      	ldr	r3, [r3, #4]
 800aae4:	685a      	ldr	r2, [r3, #4]
 800aae6:	68bb      	ldr	r3, [r7, #8]
 800aae8:	605a      	str	r2, [r3, #4]
 800aaea:	68bb      	ldr	r3, [r7, #8]
 800aaec:	685a      	ldr	r2, [r3, #4]
 800aaee:	68bb      	ldr	r3, [r7, #8]
 800aaf0:	3308      	adds	r3, #8
 800aaf2:	429a      	cmp	r2, r3
 800aaf4:	d104      	bne.n	800ab00 <vTaskSwitchContext+0x8c>
 800aaf6:	68bb      	ldr	r3, [r7, #8]
 800aaf8:	685b      	ldr	r3, [r3, #4]
 800aafa:	685a      	ldr	r2, [r3, #4]
 800aafc:	68bb      	ldr	r3, [r7, #8]
 800aafe:	605a      	str	r2, [r3, #4]
 800ab00:	68bb      	ldr	r3, [r7, #8]
 800ab02:	685b      	ldr	r3, [r3, #4]
 800ab04:	68db      	ldr	r3, [r3, #12]
 800ab06:	4a0c      	ldr	r2, [pc, #48]	@ (800ab38 <vTaskSwitchContext+0xc4>)
 800ab08:	6013      	str	r3, [r2, #0]
 800ab0a:	4a09      	ldr	r2, [pc, #36]	@ (800ab30 <vTaskSwitchContext+0xbc>)
 800ab0c:	68fb      	ldr	r3, [r7, #12]
 800ab0e:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800ab10:	4b09      	ldr	r3, [pc, #36]	@ (800ab38 <vTaskSwitchContext+0xc4>)
 800ab12:	681b      	ldr	r3, [r3, #0]
 800ab14:	3354      	adds	r3, #84	@ 0x54
 800ab16:	4a09      	ldr	r2, [pc, #36]	@ (800ab3c <vTaskSwitchContext+0xc8>)
 800ab18:	6013      	str	r3, [r2, #0]
}
 800ab1a:	bf00      	nop
 800ab1c:	3714      	adds	r7, #20
 800ab1e:	46bd      	mov	sp, r7
 800ab20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab24:	4770      	bx	lr
 800ab26:	bf00      	nop
 800ab28:	20001acc 	.word	0x20001acc
 800ab2c:	20001ab8 	.word	0x20001ab8
 800ab30:	20001aac 	.word	0x20001aac
 800ab34:	200015d4 	.word	0x200015d4
 800ab38:	200015d0 	.word	0x200015d0
 800ab3c:	200000e8 	.word	0x200000e8

0800ab40 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800ab40:	b580      	push	{r7, lr}
 800ab42:	b084      	sub	sp, #16
 800ab44:	af00      	add	r7, sp, #0
 800ab46:	6078      	str	r0, [r7, #4]
 800ab48:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	2b00      	cmp	r3, #0
 800ab4e:	d10b      	bne.n	800ab68 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800ab50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ab54:	f383 8811 	msr	BASEPRI, r3
 800ab58:	f3bf 8f6f 	isb	sy
 800ab5c:	f3bf 8f4f 	dsb	sy
 800ab60:	60fb      	str	r3, [r7, #12]
}
 800ab62:	bf00      	nop
 800ab64:	bf00      	nop
 800ab66:	e7fd      	b.n	800ab64 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800ab68:	4b07      	ldr	r3, [pc, #28]	@ (800ab88 <vTaskPlaceOnEventList+0x48>)
 800ab6a:	681b      	ldr	r3, [r3, #0]
 800ab6c:	3318      	adds	r3, #24
 800ab6e:	4619      	mov	r1, r3
 800ab70:	6878      	ldr	r0, [r7, #4]
 800ab72:	f7fe fe0c 	bl	800978e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800ab76:	2101      	movs	r1, #1
 800ab78:	6838      	ldr	r0, [r7, #0]
 800ab7a:	f000 fa87 	bl	800b08c <prvAddCurrentTaskToDelayedList>
}
 800ab7e:	bf00      	nop
 800ab80:	3710      	adds	r7, #16
 800ab82:	46bd      	mov	sp, r7
 800ab84:	bd80      	pop	{r7, pc}
 800ab86:	bf00      	nop
 800ab88:	200015d0 	.word	0x200015d0

0800ab8c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800ab8c:	b580      	push	{r7, lr}
 800ab8e:	b086      	sub	sp, #24
 800ab90:	af00      	add	r7, sp, #0
 800ab92:	60f8      	str	r0, [r7, #12]
 800ab94:	60b9      	str	r1, [r7, #8]
 800ab96:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800ab98:	68fb      	ldr	r3, [r7, #12]
 800ab9a:	2b00      	cmp	r3, #0
 800ab9c:	d10b      	bne.n	800abb6 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800ab9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aba2:	f383 8811 	msr	BASEPRI, r3
 800aba6:	f3bf 8f6f 	isb	sy
 800abaa:	f3bf 8f4f 	dsb	sy
 800abae:	617b      	str	r3, [r7, #20]
}
 800abb0:	bf00      	nop
 800abb2:	bf00      	nop
 800abb4:	e7fd      	b.n	800abb2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800abb6:	4b0a      	ldr	r3, [pc, #40]	@ (800abe0 <vTaskPlaceOnEventListRestricted+0x54>)
 800abb8:	681b      	ldr	r3, [r3, #0]
 800abba:	3318      	adds	r3, #24
 800abbc:	4619      	mov	r1, r3
 800abbe:	68f8      	ldr	r0, [r7, #12]
 800abc0:	f7fe fdc1 	bl	8009746 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	2b00      	cmp	r3, #0
 800abc8:	d002      	beq.n	800abd0 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800abca:	f04f 33ff 	mov.w	r3, #4294967295
 800abce:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800abd0:	6879      	ldr	r1, [r7, #4]
 800abd2:	68b8      	ldr	r0, [r7, #8]
 800abd4:	f000 fa5a 	bl	800b08c <prvAddCurrentTaskToDelayedList>
	}
 800abd8:	bf00      	nop
 800abda:	3718      	adds	r7, #24
 800abdc:	46bd      	mov	sp, r7
 800abde:	bd80      	pop	{r7, pc}
 800abe0:	200015d0 	.word	0x200015d0

0800abe4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800abe4:	b580      	push	{r7, lr}
 800abe6:	b086      	sub	sp, #24
 800abe8:	af00      	add	r7, sp, #0
 800abea:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	68db      	ldr	r3, [r3, #12]
 800abf0:	68db      	ldr	r3, [r3, #12]
 800abf2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800abf4:	693b      	ldr	r3, [r7, #16]
 800abf6:	2b00      	cmp	r3, #0
 800abf8:	d10b      	bne.n	800ac12 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800abfa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800abfe:	f383 8811 	msr	BASEPRI, r3
 800ac02:	f3bf 8f6f 	isb	sy
 800ac06:	f3bf 8f4f 	dsb	sy
 800ac0a:	60fb      	str	r3, [r7, #12]
}
 800ac0c:	bf00      	nop
 800ac0e:	bf00      	nop
 800ac10:	e7fd      	b.n	800ac0e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800ac12:	693b      	ldr	r3, [r7, #16]
 800ac14:	3318      	adds	r3, #24
 800ac16:	4618      	mov	r0, r3
 800ac18:	f7fe fdf2 	bl	8009800 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ac1c:	4b1d      	ldr	r3, [pc, #116]	@ (800ac94 <xTaskRemoveFromEventList+0xb0>)
 800ac1e:	681b      	ldr	r3, [r3, #0]
 800ac20:	2b00      	cmp	r3, #0
 800ac22:	d11d      	bne.n	800ac60 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800ac24:	693b      	ldr	r3, [r7, #16]
 800ac26:	3304      	adds	r3, #4
 800ac28:	4618      	mov	r0, r3
 800ac2a:	f7fe fde9 	bl	8009800 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800ac2e:	693b      	ldr	r3, [r7, #16]
 800ac30:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ac32:	4b19      	ldr	r3, [pc, #100]	@ (800ac98 <xTaskRemoveFromEventList+0xb4>)
 800ac34:	681b      	ldr	r3, [r3, #0]
 800ac36:	429a      	cmp	r2, r3
 800ac38:	d903      	bls.n	800ac42 <xTaskRemoveFromEventList+0x5e>
 800ac3a:	693b      	ldr	r3, [r7, #16]
 800ac3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ac3e:	4a16      	ldr	r2, [pc, #88]	@ (800ac98 <xTaskRemoveFromEventList+0xb4>)
 800ac40:	6013      	str	r3, [r2, #0]
 800ac42:	693b      	ldr	r3, [r7, #16]
 800ac44:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ac46:	4613      	mov	r3, r2
 800ac48:	009b      	lsls	r3, r3, #2
 800ac4a:	4413      	add	r3, r2
 800ac4c:	009b      	lsls	r3, r3, #2
 800ac4e:	4a13      	ldr	r2, [pc, #76]	@ (800ac9c <xTaskRemoveFromEventList+0xb8>)
 800ac50:	441a      	add	r2, r3
 800ac52:	693b      	ldr	r3, [r7, #16]
 800ac54:	3304      	adds	r3, #4
 800ac56:	4619      	mov	r1, r3
 800ac58:	4610      	mov	r0, r2
 800ac5a:	f7fe fd74 	bl	8009746 <vListInsertEnd>
 800ac5e:	e005      	b.n	800ac6c <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800ac60:	693b      	ldr	r3, [r7, #16]
 800ac62:	3318      	adds	r3, #24
 800ac64:	4619      	mov	r1, r3
 800ac66:	480e      	ldr	r0, [pc, #56]	@ (800aca0 <xTaskRemoveFromEventList+0xbc>)
 800ac68:	f7fe fd6d 	bl	8009746 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800ac6c:	693b      	ldr	r3, [r7, #16]
 800ac6e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ac70:	4b0c      	ldr	r3, [pc, #48]	@ (800aca4 <xTaskRemoveFromEventList+0xc0>)
 800ac72:	681b      	ldr	r3, [r3, #0]
 800ac74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ac76:	429a      	cmp	r2, r3
 800ac78:	d905      	bls.n	800ac86 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800ac7a:	2301      	movs	r3, #1
 800ac7c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800ac7e:	4b0a      	ldr	r3, [pc, #40]	@ (800aca8 <xTaskRemoveFromEventList+0xc4>)
 800ac80:	2201      	movs	r2, #1
 800ac82:	601a      	str	r2, [r3, #0]
 800ac84:	e001      	b.n	800ac8a <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800ac86:	2300      	movs	r3, #0
 800ac88:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800ac8a:	697b      	ldr	r3, [r7, #20]
}
 800ac8c:	4618      	mov	r0, r3
 800ac8e:	3718      	adds	r7, #24
 800ac90:	46bd      	mov	sp, r7
 800ac92:	bd80      	pop	{r7, pc}
 800ac94:	20001acc 	.word	0x20001acc
 800ac98:	20001aac 	.word	0x20001aac
 800ac9c:	200015d4 	.word	0x200015d4
 800aca0:	20001a64 	.word	0x20001a64
 800aca4:	200015d0 	.word	0x200015d0
 800aca8:	20001ab8 	.word	0x20001ab8

0800acac <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800acac:	b480      	push	{r7}
 800acae:	b083      	sub	sp, #12
 800acb0:	af00      	add	r7, sp, #0
 800acb2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800acb4:	4b06      	ldr	r3, [pc, #24]	@ (800acd0 <vTaskInternalSetTimeOutState+0x24>)
 800acb6:	681a      	ldr	r2, [r3, #0]
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800acbc:	4b05      	ldr	r3, [pc, #20]	@ (800acd4 <vTaskInternalSetTimeOutState+0x28>)
 800acbe:	681a      	ldr	r2, [r3, #0]
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	605a      	str	r2, [r3, #4]
}
 800acc4:	bf00      	nop
 800acc6:	370c      	adds	r7, #12
 800acc8:	46bd      	mov	sp, r7
 800acca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acce:	4770      	bx	lr
 800acd0:	20001abc 	.word	0x20001abc
 800acd4:	20001aa8 	.word	0x20001aa8

0800acd8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800acd8:	b580      	push	{r7, lr}
 800acda:	b088      	sub	sp, #32
 800acdc:	af00      	add	r7, sp, #0
 800acde:	6078      	str	r0, [r7, #4]
 800ace0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	2b00      	cmp	r3, #0
 800ace6:	d10b      	bne.n	800ad00 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800ace8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800acec:	f383 8811 	msr	BASEPRI, r3
 800acf0:	f3bf 8f6f 	isb	sy
 800acf4:	f3bf 8f4f 	dsb	sy
 800acf8:	613b      	str	r3, [r7, #16]
}
 800acfa:	bf00      	nop
 800acfc:	bf00      	nop
 800acfe:	e7fd      	b.n	800acfc <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800ad00:	683b      	ldr	r3, [r7, #0]
 800ad02:	2b00      	cmp	r3, #0
 800ad04:	d10b      	bne.n	800ad1e <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800ad06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ad0a:	f383 8811 	msr	BASEPRI, r3
 800ad0e:	f3bf 8f6f 	isb	sy
 800ad12:	f3bf 8f4f 	dsb	sy
 800ad16:	60fb      	str	r3, [r7, #12]
}
 800ad18:	bf00      	nop
 800ad1a:	bf00      	nop
 800ad1c:	e7fd      	b.n	800ad1a <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800ad1e:	f000 fe93 	bl	800ba48 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800ad22:	4b1d      	ldr	r3, [pc, #116]	@ (800ad98 <xTaskCheckForTimeOut+0xc0>)
 800ad24:	681b      	ldr	r3, [r3, #0]
 800ad26:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	685b      	ldr	r3, [r3, #4]
 800ad2c:	69ba      	ldr	r2, [r7, #24]
 800ad2e:	1ad3      	subs	r3, r2, r3
 800ad30:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800ad32:	683b      	ldr	r3, [r7, #0]
 800ad34:	681b      	ldr	r3, [r3, #0]
 800ad36:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ad3a:	d102      	bne.n	800ad42 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800ad3c:	2300      	movs	r3, #0
 800ad3e:	61fb      	str	r3, [r7, #28]
 800ad40:	e023      	b.n	800ad8a <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	681a      	ldr	r2, [r3, #0]
 800ad46:	4b15      	ldr	r3, [pc, #84]	@ (800ad9c <xTaskCheckForTimeOut+0xc4>)
 800ad48:	681b      	ldr	r3, [r3, #0]
 800ad4a:	429a      	cmp	r2, r3
 800ad4c:	d007      	beq.n	800ad5e <xTaskCheckForTimeOut+0x86>
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	685b      	ldr	r3, [r3, #4]
 800ad52:	69ba      	ldr	r2, [r7, #24]
 800ad54:	429a      	cmp	r2, r3
 800ad56:	d302      	bcc.n	800ad5e <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800ad58:	2301      	movs	r3, #1
 800ad5a:	61fb      	str	r3, [r7, #28]
 800ad5c:	e015      	b.n	800ad8a <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800ad5e:	683b      	ldr	r3, [r7, #0]
 800ad60:	681b      	ldr	r3, [r3, #0]
 800ad62:	697a      	ldr	r2, [r7, #20]
 800ad64:	429a      	cmp	r2, r3
 800ad66:	d20b      	bcs.n	800ad80 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800ad68:	683b      	ldr	r3, [r7, #0]
 800ad6a:	681a      	ldr	r2, [r3, #0]
 800ad6c:	697b      	ldr	r3, [r7, #20]
 800ad6e:	1ad2      	subs	r2, r2, r3
 800ad70:	683b      	ldr	r3, [r7, #0]
 800ad72:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800ad74:	6878      	ldr	r0, [r7, #4]
 800ad76:	f7ff ff99 	bl	800acac <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800ad7a:	2300      	movs	r3, #0
 800ad7c:	61fb      	str	r3, [r7, #28]
 800ad7e:	e004      	b.n	800ad8a <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800ad80:	683b      	ldr	r3, [r7, #0]
 800ad82:	2200      	movs	r2, #0
 800ad84:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800ad86:	2301      	movs	r3, #1
 800ad88:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800ad8a:	f000 fe8f 	bl	800baac <vPortExitCritical>

	return xReturn;
 800ad8e:	69fb      	ldr	r3, [r7, #28]
}
 800ad90:	4618      	mov	r0, r3
 800ad92:	3720      	adds	r7, #32
 800ad94:	46bd      	mov	sp, r7
 800ad96:	bd80      	pop	{r7, pc}
 800ad98:	20001aa8 	.word	0x20001aa8
 800ad9c:	20001abc 	.word	0x20001abc

0800ada0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800ada0:	b480      	push	{r7}
 800ada2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800ada4:	4b03      	ldr	r3, [pc, #12]	@ (800adb4 <vTaskMissedYield+0x14>)
 800ada6:	2201      	movs	r2, #1
 800ada8:	601a      	str	r2, [r3, #0]
}
 800adaa:	bf00      	nop
 800adac:	46bd      	mov	sp, r7
 800adae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adb2:	4770      	bx	lr
 800adb4:	20001ab8 	.word	0x20001ab8

0800adb8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800adb8:	b580      	push	{r7, lr}
 800adba:	b082      	sub	sp, #8
 800adbc:	af00      	add	r7, sp, #0
 800adbe:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800adc0:	f000 f852 	bl	800ae68 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800adc4:	4b06      	ldr	r3, [pc, #24]	@ (800ade0 <prvIdleTask+0x28>)
 800adc6:	681b      	ldr	r3, [r3, #0]
 800adc8:	2b01      	cmp	r3, #1
 800adca:	d9f9      	bls.n	800adc0 <prvIdleTask+0x8>
			{
				taskYIELD();
 800adcc:	4b05      	ldr	r3, [pc, #20]	@ (800ade4 <prvIdleTask+0x2c>)
 800adce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800add2:	601a      	str	r2, [r3, #0]
 800add4:	f3bf 8f4f 	dsb	sy
 800add8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800addc:	e7f0      	b.n	800adc0 <prvIdleTask+0x8>
 800adde:	bf00      	nop
 800ade0:	200015d4 	.word	0x200015d4
 800ade4:	e000ed04 	.word	0xe000ed04

0800ade8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800ade8:	b580      	push	{r7, lr}
 800adea:	b082      	sub	sp, #8
 800adec:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800adee:	2300      	movs	r3, #0
 800adf0:	607b      	str	r3, [r7, #4]
 800adf2:	e00c      	b.n	800ae0e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800adf4:	687a      	ldr	r2, [r7, #4]
 800adf6:	4613      	mov	r3, r2
 800adf8:	009b      	lsls	r3, r3, #2
 800adfa:	4413      	add	r3, r2
 800adfc:	009b      	lsls	r3, r3, #2
 800adfe:	4a12      	ldr	r2, [pc, #72]	@ (800ae48 <prvInitialiseTaskLists+0x60>)
 800ae00:	4413      	add	r3, r2
 800ae02:	4618      	mov	r0, r3
 800ae04:	f7fe fc72 	bl	80096ec <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	3301      	adds	r3, #1
 800ae0c:	607b      	str	r3, [r7, #4]
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	2b37      	cmp	r3, #55	@ 0x37
 800ae12:	d9ef      	bls.n	800adf4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800ae14:	480d      	ldr	r0, [pc, #52]	@ (800ae4c <prvInitialiseTaskLists+0x64>)
 800ae16:	f7fe fc69 	bl	80096ec <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800ae1a:	480d      	ldr	r0, [pc, #52]	@ (800ae50 <prvInitialiseTaskLists+0x68>)
 800ae1c:	f7fe fc66 	bl	80096ec <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800ae20:	480c      	ldr	r0, [pc, #48]	@ (800ae54 <prvInitialiseTaskLists+0x6c>)
 800ae22:	f7fe fc63 	bl	80096ec <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800ae26:	480c      	ldr	r0, [pc, #48]	@ (800ae58 <prvInitialiseTaskLists+0x70>)
 800ae28:	f7fe fc60 	bl	80096ec <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800ae2c:	480b      	ldr	r0, [pc, #44]	@ (800ae5c <prvInitialiseTaskLists+0x74>)
 800ae2e:	f7fe fc5d 	bl	80096ec <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800ae32:	4b0b      	ldr	r3, [pc, #44]	@ (800ae60 <prvInitialiseTaskLists+0x78>)
 800ae34:	4a05      	ldr	r2, [pc, #20]	@ (800ae4c <prvInitialiseTaskLists+0x64>)
 800ae36:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800ae38:	4b0a      	ldr	r3, [pc, #40]	@ (800ae64 <prvInitialiseTaskLists+0x7c>)
 800ae3a:	4a05      	ldr	r2, [pc, #20]	@ (800ae50 <prvInitialiseTaskLists+0x68>)
 800ae3c:	601a      	str	r2, [r3, #0]
}
 800ae3e:	bf00      	nop
 800ae40:	3708      	adds	r7, #8
 800ae42:	46bd      	mov	sp, r7
 800ae44:	bd80      	pop	{r7, pc}
 800ae46:	bf00      	nop
 800ae48:	200015d4 	.word	0x200015d4
 800ae4c:	20001a34 	.word	0x20001a34
 800ae50:	20001a48 	.word	0x20001a48
 800ae54:	20001a64 	.word	0x20001a64
 800ae58:	20001a78 	.word	0x20001a78
 800ae5c:	20001a90 	.word	0x20001a90
 800ae60:	20001a5c 	.word	0x20001a5c
 800ae64:	20001a60 	.word	0x20001a60

0800ae68 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800ae68:	b580      	push	{r7, lr}
 800ae6a:	b082      	sub	sp, #8
 800ae6c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ae6e:	e019      	b.n	800aea4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800ae70:	f000 fdea 	bl	800ba48 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ae74:	4b10      	ldr	r3, [pc, #64]	@ (800aeb8 <prvCheckTasksWaitingTermination+0x50>)
 800ae76:	68db      	ldr	r3, [r3, #12]
 800ae78:	68db      	ldr	r3, [r3, #12]
 800ae7a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	3304      	adds	r3, #4
 800ae80:	4618      	mov	r0, r3
 800ae82:	f7fe fcbd 	bl	8009800 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800ae86:	4b0d      	ldr	r3, [pc, #52]	@ (800aebc <prvCheckTasksWaitingTermination+0x54>)
 800ae88:	681b      	ldr	r3, [r3, #0]
 800ae8a:	3b01      	subs	r3, #1
 800ae8c:	4a0b      	ldr	r2, [pc, #44]	@ (800aebc <prvCheckTasksWaitingTermination+0x54>)
 800ae8e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800ae90:	4b0b      	ldr	r3, [pc, #44]	@ (800aec0 <prvCheckTasksWaitingTermination+0x58>)
 800ae92:	681b      	ldr	r3, [r3, #0]
 800ae94:	3b01      	subs	r3, #1
 800ae96:	4a0a      	ldr	r2, [pc, #40]	@ (800aec0 <prvCheckTasksWaitingTermination+0x58>)
 800ae98:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800ae9a:	f000 fe07 	bl	800baac <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800ae9e:	6878      	ldr	r0, [r7, #4]
 800aea0:	f000 f810 	bl	800aec4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800aea4:	4b06      	ldr	r3, [pc, #24]	@ (800aec0 <prvCheckTasksWaitingTermination+0x58>)
 800aea6:	681b      	ldr	r3, [r3, #0]
 800aea8:	2b00      	cmp	r3, #0
 800aeaa:	d1e1      	bne.n	800ae70 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800aeac:	bf00      	nop
 800aeae:	bf00      	nop
 800aeb0:	3708      	adds	r7, #8
 800aeb2:	46bd      	mov	sp, r7
 800aeb4:	bd80      	pop	{r7, pc}
 800aeb6:	bf00      	nop
 800aeb8:	20001a78 	.word	0x20001a78
 800aebc:	20001aa4 	.word	0x20001aa4
 800aec0:	20001a8c 	.word	0x20001a8c

0800aec4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800aec4:	b580      	push	{r7, lr}
 800aec6:	b084      	sub	sp, #16
 800aec8:	af00      	add	r7, sp, #0
 800aeca:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	3354      	adds	r3, #84	@ 0x54
 800aed0:	4618      	mov	r0, r3
 800aed2:	f001 fb1d 	bl	800c510 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800aedc:	2b00      	cmp	r3, #0
 800aede:	d108      	bne.n	800aef2 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800aee4:	4618      	mov	r0, r3
 800aee6:	f000 ff9f 	bl	800be28 <vPortFree>
				vPortFree( pxTCB );
 800aeea:	6878      	ldr	r0, [r7, #4]
 800aeec:	f000 ff9c 	bl	800be28 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800aef0:	e019      	b.n	800af26 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800aef8:	2b01      	cmp	r3, #1
 800aefa:	d103      	bne.n	800af04 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800aefc:	6878      	ldr	r0, [r7, #4]
 800aefe:	f000 ff93 	bl	800be28 <vPortFree>
	}
 800af02:	e010      	b.n	800af26 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800af0a:	2b02      	cmp	r3, #2
 800af0c:	d00b      	beq.n	800af26 <prvDeleteTCB+0x62>
	__asm volatile
 800af0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800af12:	f383 8811 	msr	BASEPRI, r3
 800af16:	f3bf 8f6f 	isb	sy
 800af1a:	f3bf 8f4f 	dsb	sy
 800af1e:	60fb      	str	r3, [r7, #12]
}
 800af20:	bf00      	nop
 800af22:	bf00      	nop
 800af24:	e7fd      	b.n	800af22 <prvDeleteTCB+0x5e>
	}
 800af26:	bf00      	nop
 800af28:	3710      	adds	r7, #16
 800af2a:	46bd      	mov	sp, r7
 800af2c:	bd80      	pop	{r7, pc}
	...

0800af30 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800af30:	b480      	push	{r7}
 800af32:	b083      	sub	sp, #12
 800af34:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800af36:	4b0c      	ldr	r3, [pc, #48]	@ (800af68 <prvResetNextTaskUnblockTime+0x38>)
 800af38:	681b      	ldr	r3, [r3, #0]
 800af3a:	681b      	ldr	r3, [r3, #0]
 800af3c:	2b00      	cmp	r3, #0
 800af3e:	d104      	bne.n	800af4a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800af40:	4b0a      	ldr	r3, [pc, #40]	@ (800af6c <prvResetNextTaskUnblockTime+0x3c>)
 800af42:	f04f 32ff 	mov.w	r2, #4294967295
 800af46:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800af48:	e008      	b.n	800af5c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800af4a:	4b07      	ldr	r3, [pc, #28]	@ (800af68 <prvResetNextTaskUnblockTime+0x38>)
 800af4c:	681b      	ldr	r3, [r3, #0]
 800af4e:	68db      	ldr	r3, [r3, #12]
 800af50:	68db      	ldr	r3, [r3, #12]
 800af52:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	685b      	ldr	r3, [r3, #4]
 800af58:	4a04      	ldr	r2, [pc, #16]	@ (800af6c <prvResetNextTaskUnblockTime+0x3c>)
 800af5a:	6013      	str	r3, [r2, #0]
}
 800af5c:	bf00      	nop
 800af5e:	370c      	adds	r7, #12
 800af60:	46bd      	mov	sp, r7
 800af62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af66:	4770      	bx	lr
 800af68:	20001a5c 	.word	0x20001a5c
 800af6c:	20001ac4 	.word	0x20001ac4

0800af70 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800af70:	b480      	push	{r7}
 800af72:	b083      	sub	sp, #12
 800af74:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800af76:	4b0b      	ldr	r3, [pc, #44]	@ (800afa4 <xTaskGetSchedulerState+0x34>)
 800af78:	681b      	ldr	r3, [r3, #0]
 800af7a:	2b00      	cmp	r3, #0
 800af7c:	d102      	bne.n	800af84 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800af7e:	2301      	movs	r3, #1
 800af80:	607b      	str	r3, [r7, #4]
 800af82:	e008      	b.n	800af96 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800af84:	4b08      	ldr	r3, [pc, #32]	@ (800afa8 <xTaskGetSchedulerState+0x38>)
 800af86:	681b      	ldr	r3, [r3, #0]
 800af88:	2b00      	cmp	r3, #0
 800af8a:	d102      	bne.n	800af92 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800af8c:	2302      	movs	r3, #2
 800af8e:	607b      	str	r3, [r7, #4]
 800af90:	e001      	b.n	800af96 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800af92:	2300      	movs	r3, #0
 800af94:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800af96:	687b      	ldr	r3, [r7, #4]
	}
 800af98:	4618      	mov	r0, r3
 800af9a:	370c      	adds	r7, #12
 800af9c:	46bd      	mov	sp, r7
 800af9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afa2:	4770      	bx	lr
 800afa4:	20001ab0 	.word	0x20001ab0
 800afa8:	20001acc 	.word	0x20001acc

0800afac <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800afac:	b580      	push	{r7, lr}
 800afae:	b086      	sub	sp, #24
 800afb0:	af00      	add	r7, sp, #0
 800afb2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800afb8:	2300      	movs	r3, #0
 800afba:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	2b00      	cmp	r3, #0
 800afc0:	d058      	beq.n	800b074 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800afc2:	4b2f      	ldr	r3, [pc, #188]	@ (800b080 <xTaskPriorityDisinherit+0xd4>)
 800afc4:	681b      	ldr	r3, [r3, #0]
 800afc6:	693a      	ldr	r2, [r7, #16]
 800afc8:	429a      	cmp	r2, r3
 800afca:	d00b      	beq.n	800afe4 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800afcc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800afd0:	f383 8811 	msr	BASEPRI, r3
 800afd4:	f3bf 8f6f 	isb	sy
 800afd8:	f3bf 8f4f 	dsb	sy
 800afdc:	60fb      	str	r3, [r7, #12]
}
 800afde:	bf00      	nop
 800afe0:	bf00      	nop
 800afe2:	e7fd      	b.n	800afe0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800afe4:	693b      	ldr	r3, [r7, #16]
 800afe6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800afe8:	2b00      	cmp	r3, #0
 800afea:	d10b      	bne.n	800b004 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800afec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aff0:	f383 8811 	msr	BASEPRI, r3
 800aff4:	f3bf 8f6f 	isb	sy
 800aff8:	f3bf 8f4f 	dsb	sy
 800affc:	60bb      	str	r3, [r7, #8]
}
 800affe:	bf00      	nop
 800b000:	bf00      	nop
 800b002:	e7fd      	b.n	800b000 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800b004:	693b      	ldr	r3, [r7, #16]
 800b006:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b008:	1e5a      	subs	r2, r3, #1
 800b00a:	693b      	ldr	r3, [r7, #16]
 800b00c:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800b00e:	693b      	ldr	r3, [r7, #16]
 800b010:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b012:	693b      	ldr	r3, [r7, #16]
 800b014:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b016:	429a      	cmp	r2, r3
 800b018:	d02c      	beq.n	800b074 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800b01a:	693b      	ldr	r3, [r7, #16]
 800b01c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b01e:	2b00      	cmp	r3, #0
 800b020:	d128      	bne.n	800b074 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b022:	693b      	ldr	r3, [r7, #16]
 800b024:	3304      	adds	r3, #4
 800b026:	4618      	mov	r0, r3
 800b028:	f7fe fbea 	bl	8009800 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800b02c:	693b      	ldr	r3, [r7, #16]
 800b02e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800b030:	693b      	ldr	r3, [r7, #16]
 800b032:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b034:	693b      	ldr	r3, [r7, #16]
 800b036:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b038:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800b03c:	693b      	ldr	r3, [r7, #16]
 800b03e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800b040:	693b      	ldr	r3, [r7, #16]
 800b042:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b044:	4b0f      	ldr	r3, [pc, #60]	@ (800b084 <xTaskPriorityDisinherit+0xd8>)
 800b046:	681b      	ldr	r3, [r3, #0]
 800b048:	429a      	cmp	r2, r3
 800b04a:	d903      	bls.n	800b054 <xTaskPriorityDisinherit+0xa8>
 800b04c:	693b      	ldr	r3, [r7, #16]
 800b04e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b050:	4a0c      	ldr	r2, [pc, #48]	@ (800b084 <xTaskPriorityDisinherit+0xd8>)
 800b052:	6013      	str	r3, [r2, #0]
 800b054:	693b      	ldr	r3, [r7, #16]
 800b056:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b058:	4613      	mov	r3, r2
 800b05a:	009b      	lsls	r3, r3, #2
 800b05c:	4413      	add	r3, r2
 800b05e:	009b      	lsls	r3, r3, #2
 800b060:	4a09      	ldr	r2, [pc, #36]	@ (800b088 <xTaskPriorityDisinherit+0xdc>)
 800b062:	441a      	add	r2, r3
 800b064:	693b      	ldr	r3, [r7, #16]
 800b066:	3304      	adds	r3, #4
 800b068:	4619      	mov	r1, r3
 800b06a:	4610      	mov	r0, r2
 800b06c:	f7fe fb6b 	bl	8009746 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800b070:	2301      	movs	r3, #1
 800b072:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800b074:	697b      	ldr	r3, [r7, #20]
	}
 800b076:	4618      	mov	r0, r3
 800b078:	3718      	adds	r7, #24
 800b07a:	46bd      	mov	sp, r7
 800b07c:	bd80      	pop	{r7, pc}
 800b07e:	bf00      	nop
 800b080:	200015d0 	.word	0x200015d0
 800b084:	20001aac 	.word	0x20001aac
 800b088:	200015d4 	.word	0x200015d4

0800b08c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800b08c:	b580      	push	{r7, lr}
 800b08e:	b084      	sub	sp, #16
 800b090:	af00      	add	r7, sp, #0
 800b092:	6078      	str	r0, [r7, #4]
 800b094:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800b096:	4b21      	ldr	r3, [pc, #132]	@ (800b11c <prvAddCurrentTaskToDelayedList+0x90>)
 800b098:	681b      	ldr	r3, [r3, #0]
 800b09a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b09c:	4b20      	ldr	r3, [pc, #128]	@ (800b120 <prvAddCurrentTaskToDelayedList+0x94>)
 800b09e:	681b      	ldr	r3, [r3, #0]
 800b0a0:	3304      	adds	r3, #4
 800b0a2:	4618      	mov	r0, r3
 800b0a4:	f7fe fbac 	bl	8009800 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b0ae:	d10a      	bne.n	800b0c6 <prvAddCurrentTaskToDelayedList+0x3a>
 800b0b0:	683b      	ldr	r3, [r7, #0]
 800b0b2:	2b00      	cmp	r3, #0
 800b0b4:	d007      	beq.n	800b0c6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b0b6:	4b1a      	ldr	r3, [pc, #104]	@ (800b120 <prvAddCurrentTaskToDelayedList+0x94>)
 800b0b8:	681b      	ldr	r3, [r3, #0]
 800b0ba:	3304      	adds	r3, #4
 800b0bc:	4619      	mov	r1, r3
 800b0be:	4819      	ldr	r0, [pc, #100]	@ (800b124 <prvAddCurrentTaskToDelayedList+0x98>)
 800b0c0:	f7fe fb41 	bl	8009746 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800b0c4:	e026      	b.n	800b114 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800b0c6:	68fa      	ldr	r2, [r7, #12]
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	4413      	add	r3, r2
 800b0cc:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800b0ce:	4b14      	ldr	r3, [pc, #80]	@ (800b120 <prvAddCurrentTaskToDelayedList+0x94>)
 800b0d0:	681b      	ldr	r3, [r3, #0]
 800b0d2:	68ba      	ldr	r2, [r7, #8]
 800b0d4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800b0d6:	68ba      	ldr	r2, [r7, #8]
 800b0d8:	68fb      	ldr	r3, [r7, #12]
 800b0da:	429a      	cmp	r2, r3
 800b0dc:	d209      	bcs.n	800b0f2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b0de:	4b12      	ldr	r3, [pc, #72]	@ (800b128 <prvAddCurrentTaskToDelayedList+0x9c>)
 800b0e0:	681a      	ldr	r2, [r3, #0]
 800b0e2:	4b0f      	ldr	r3, [pc, #60]	@ (800b120 <prvAddCurrentTaskToDelayedList+0x94>)
 800b0e4:	681b      	ldr	r3, [r3, #0]
 800b0e6:	3304      	adds	r3, #4
 800b0e8:	4619      	mov	r1, r3
 800b0ea:	4610      	mov	r0, r2
 800b0ec:	f7fe fb4f 	bl	800978e <vListInsert>
}
 800b0f0:	e010      	b.n	800b114 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b0f2:	4b0e      	ldr	r3, [pc, #56]	@ (800b12c <prvAddCurrentTaskToDelayedList+0xa0>)
 800b0f4:	681a      	ldr	r2, [r3, #0]
 800b0f6:	4b0a      	ldr	r3, [pc, #40]	@ (800b120 <prvAddCurrentTaskToDelayedList+0x94>)
 800b0f8:	681b      	ldr	r3, [r3, #0]
 800b0fa:	3304      	adds	r3, #4
 800b0fc:	4619      	mov	r1, r3
 800b0fe:	4610      	mov	r0, r2
 800b100:	f7fe fb45 	bl	800978e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800b104:	4b0a      	ldr	r3, [pc, #40]	@ (800b130 <prvAddCurrentTaskToDelayedList+0xa4>)
 800b106:	681b      	ldr	r3, [r3, #0]
 800b108:	68ba      	ldr	r2, [r7, #8]
 800b10a:	429a      	cmp	r2, r3
 800b10c:	d202      	bcs.n	800b114 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800b10e:	4a08      	ldr	r2, [pc, #32]	@ (800b130 <prvAddCurrentTaskToDelayedList+0xa4>)
 800b110:	68bb      	ldr	r3, [r7, #8]
 800b112:	6013      	str	r3, [r2, #0]
}
 800b114:	bf00      	nop
 800b116:	3710      	adds	r7, #16
 800b118:	46bd      	mov	sp, r7
 800b11a:	bd80      	pop	{r7, pc}
 800b11c:	20001aa8 	.word	0x20001aa8
 800b120:	200015d0 	.word	0x200015d0
 800b124:	20001a90 	.word	0x20001a90
 800b128:	20001a60 	.word	0x20001a60
 800b12c:	20001a5c 	.word	0x20001a5c
 800b130:	20001ac4 	.word	0x20001ac4

0800b134 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800b134:	b580      	push	{r7, lr}
 800b136:	b08a      	sub	sp, #40	@ 0x28
 800b138:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800b13a:	2300      	movs	r3, #0
 800b13c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800b13e:	f000 fb13 	bl	800b768 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800b142:	4b1d      	ldr	r3, [pc, #116]	@ (800b1b8 <xTimerCreateTimerTask+0x84>)
 800b144:	681b      	ldr	r3, [r3, #0]
 800b146:	2b00      	cmp	r3, #0
 800b148:	d021      	beq.n	800b18e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800b14a:	2300      	movs	r3, #0
 800b14c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800b14e:	2300      	movs	r3, #0
 800b150:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800b152:	1d3a      	adds	r2, r7, #4
 800b154:	f107 0108 	add.w	r1, r7, #8
 800b158:	f107 030c 	add.w	r3, r7, #12
 800b15c:	4618      	mov	r0, r3
 800b15e:	f7fe faab 	bl	80096b8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800b162:	6879      	ldr	r1, [r7, #4]
 800b164:	68bb      	ldr	r3, [r7, #8]
 800b166:	68fa      	ldr	r2, [r7, #12]
 800b168:	9202      	str	r2, [sp, #8]
 800b16a:	9301      	str	r3, [sp, #4]
 800b16c:	2302      	movs	r3, #2
 800b16e:	9300      	str	r3, [sp, #0]
 800b170:	2300      	movs	r3, #0
 800b172:	460a      	mov	r2, r1
 800b174:	4911      	ldr	r1, [pc, #68]	@ (800b1bc <xTimerCreateTimerTask+0x88>)
 800b176:	4812      	ldr	r0, [pc, #72]	@ (800b1c0 <xTimerCreateTimerTask+0x8c>)
 800b178:	f7ff f8a2 	bl	800a2c0 <xTaskCreateStatic>
 800b17c:	4603      	mov	r3, r0
 800b17e:	4a11      	ldr	r2, [pc, #68]	@ (800b1c4 <xTimerCreateTimerTask+0x90>)
 800b180:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800b182:	4b10      	ldr	r3, [pc, #64]	@ (800b1c4 <xTimerCreateTimerTask+0x90>)
 800b184:	681b      	ldr	r3, [r3, #0]
 800b186:	2b00      	cmp	r3, #0
 800b188:	d001      	beq.n	800b18e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800b18a:	2301      	movs	r3, #1
 800b18c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800b18e:	697b      	ldr	r3, [r7, #20]
 800b190:	2b00      	cmp	r3, #0
 800b192:	d10b      	bne.n	800b1ac <xTimerCreateTimerTask+0x78>
	__asm volatile
 800b194:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b198:	f383 8811 	msr	BASEPRI, r3
 800b19c:	f3bf 8f6f 	isb	sy
 800b1a0:	f3bf 8f4f 	dsb	sy
 800b1a4:	613b      	str	r3, [r7, #16]
}
 800b1a6:	bf00      	nop
 800b1a8:	bf00      	nop
 800b1aa:	e7fd      	b.n	800b1a8 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800b1ac:	697b      	ldr	r3, [r7, #20]
}
 800b1ae:	4618      	mov	r0, r3
 800b1b0:	3718      	adds	r7, #24
 800b1b2:	46bd      	mov	sp, r7
 800b1b4:	bd80      	pop	{r7, pc}
 800b1b6:	bf00      	nop
 800b1b8:	20001b00 	.word	0x20001b00
 800b1bc:	0800d9cc 	.word	0x0800d9cc
 800b1c0:	0800b301 	.word	0x0800b301
 800b1c4:	20001b04 	.word	0x20001b04

0800b1c8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800b1c8:	b580      	push	{r7, lr}
 800b1ca:	b08a      	sub	sp, #40	@ 0x28
 800b1cc:	af00      	add	r7, sp, #0
 800b1ce:	60f8      	str	r0, [r7, #12]
 800b1d0:	60b9      	str	r1, [r7, #8]
 800b1d2:	607a      	str	r2, [r7, #4]
 800b1d4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800b1d6:	2300      	movs	r3, #0
 800b1d8:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800b1da:	68fb      	ldr	r3, [r7, #12]
 800b1dc:	2b00      	cmp	r3, #0
 800b1de:	d10b      	bne.n	800b1f8 <xTimerGenericCommand+0x30>
	__asm volatile
 800b1e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b1e4:	f383 8811 	msr	BASEPRI, r3
 800b1e8:	f3bf 8f6f 	isb	sy
 800b1ec:	f3bf 8f4f 	dsb	sy
 800b1f0:	623b      	str	r3, [r7, #32]
}
 800b1f2:	bf00      	nop
 800b1f4:	bf00      	nop
 800b1f6:	e7fd      	b.n	800b1f4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800b1f8:	4b19      	ldr	r3, [pc, #100]	@ (800b260 <xTimerGenericCommand+0x98>)
 800b1fa:	681b      	ldr	r3, [r3, #0]
 800b1fc:	2b00      	cmp	r3, #0
 800b1fe:	d02a      	beq.n	800b256 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800b200:	68bb      	ldr	r3, [r7, #8]
 800b202:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800b208:	68fb      	ldr	r3, [r7, #12]
 800b20a:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800b20c:	68bb      	ldr	r3, [r7, #8]
 800b20e:	2b05      	cmp	r3, #5
 800b210:	dc18      	bgt.n	800b244 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800b212:	f7ff fead 	bl	800af70 <xTaskGetSchedulerState>
 800b216:	4603      	mov	r3, r0
 800b218:	2b02      	cmp	r3, #2
 800b21a:	d109      	bne.n	800b230 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800b21c:	4b10      	ldr	r3, [pc, #64]	@ (800b260 <xTimerGenericCommand+0x98>)
 800b21e:	6818      	ldr	r0, [r3, #0]
 800b220:	f107 0110 	add.w	r1, r7, #16
 800b224:	2300      	movs	r3, #0
 800b226:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b228:	f7fe fc5a 	bl	8009ae0 <xQueueGenericSend>
 800b22c:	6278      	str	r0, [r7, #36]	@ 0x24
 800b22e:	e012      	b.n	800b256 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800b230:	4b0b      	ldr	r3, [pc, #44]	@ (800b260 <xTimerGenericCommand+0x98>)
 800b232:	6818      	ldr	r0, [r3, #0]
 800b234:	f107 0110 	add.w	r1, r7, #16
 800b238:	2300      	movs	r3, #0
 800b23a:	2200      	movs	r2, #0
 800b23c:	f7fe fc50 	bl	8009ae0 <xQueueGenericSend>
 800b240:	6278      	str	r0, [r7, #36]	@ 0x24
 800b242:	e008      	b.n	800b256 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800b244:	4b06      	ldr	r3, [pc, #24]	@ (800b260 <xTimerGenericCommand+0x98>)
 800b246:	6818      	ldr	r0, [r3, #0]
 800b248:	f107 0110 	add.w	r1, r7, #16
 800b24c:	2300      	movs	r3, #0
 800b24e:	683a      	ldr	r2, [r7, #0]
 800b250:	f7fe fd48 	bl	8009ce4 <xQueueGenericSendFromISR>
 800b254:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800b256:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800b258:	4618      	mov	r0, r3
 800b25a:	3728      	adds	r7, #40	@ 0x28
 800b25c:	46bd      	mov	sp, r7
 800b25e:	bd80      	pop	{r7, pc}
 800b260:	20001b00 	.word	0x20001b00

0800b264 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800b264:	b580      	push	{r7, lr}
 800b266:	b088      	sub	sp, #32
 800b268:	af02      	add	r7, sp, #8
 800b26a:	6078      	str	r0, [r7, #4]
 800b26c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b26e:	4b23      	ldr	r3, [pc, #140]	@ (800b2fc <prvProcessExpiredTimer+0x98>)
 800b270:	681b      	ldr	r3, [r3, #0]
 800b272:	68db      	ldr	r3, [r3, #12]
 800b274:	68db      	ldr	r3, [r3, #12]
 800b276:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b278:	697b      	ldr	r3, [r7, #20]
 800b27a:	3304      	adds	r3, #4
 800b27c:	4618      	mov	r0, r3
 800b27e:	f7fe fabf 	bl	8009800 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b282:	697b      	ldr	r3, [r7, #20]
 800b284:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b288:	f003 0304 	and.w	r3, r3, #4
 800b28c:	2b00      	cmp	r3, #0
 800b28e:	d023      	beq.n	800b2d8 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800b290:	697b      	ldr	r3, [r7, #20]
 800b292:	699a      	ldr	r2, [r3, #24]
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	18d1      	adds	r1, r2, r3
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	683a      	ldr	r2, [r7, #0]
 800b29c:	6978      	ldr	r0, [r7, #20]
 800b29e:	f000 f8d5 	bl	800b44c <prvInsertTimerInActiveList>
 800b2a2:	4603      	mov	r3, r0
 800b2a4:	2b00      	cmp	r3, #0
 800b2a6:	d020      	beq.n	800b2ea <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b2a8:	2300      	movs	r3, #0
 800b2aa:	9300      	str	r3, [sp, #0]
 800b2ac:	2300      	movs	r3, #0
 800b2ae:	687a      	ldr	r2, [r7, #4]
 800b2b0:	2100      	movs	r1, #0
 800b2b2:	6978      	ldr	r0, [r7, #20]
 800b2b4:	f7ff ff88 	bl	800b1c8 <xTimerGenericCommand>
 800b2b8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800b2ba:	693b      	ldr	r3, [r7, #16]
 800b2bc:	2b00      	cmp	r3, #0
 800b2be:	d114      	bne.n	800b2ea <prvProcessExpiredTimer+0x86>
	__asm volatile
 800b2c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b2c4:	f383 8811 	msr	BASEPRI, r3
 800b2c8:	f3bf 8f6f 	isb	sy
 800b2cc:	f3bf 8f4f 	dsb	sy
 800b2d0:	60fb      	str	r3, [r7, #12]
}
 800b2d2:	bf00      	nop
 800b2d4:	bf00      	nop
 800b2d6:	e7fd      	b.n	800b2d4 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b2d8:	697b      	ldr	r3, [r7, #20]
 800b2da:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b2de:	f023 0301 	bic.w	r3, r3, #1
 800b2e2:	b2da      	uxtb	r2, r3
 800b2e4:	697b      	ldr	r3, [r7, #20]
 800b2e6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b2ea:	697b      	ldr	r3, [r7, #20]
 800b2ec:	6a1b      	ldr	r3, [r3, #32]
 800b2ee:	6978      	ldr	r0, [r7, #20]
 800b2f0:	4798      	blx	r3
}
 800b2f2:	bf00      	nop
 800b2f4:	3718      	adds	r7, #24
 800b2f6:	46bd      	mov	sp, r7
 800b2f8:	bd80      	pop	{r7, pc}
 800b2fa:	bf00      	nop
 800b2fc:	20001af8 	.word	0x20001af8

0800b300 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800b300:	b580      	push	{r7, lr}
 800b302:	b084      	sub	sp, #16
 800b304:	af00      	add	r7, sp, #0
 800b306:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b308:	f107 0308 	add.w	r3, r7, #8
 800b30c:	4618      	mov	r0, r3
 800b30e:	f000 f859 	bl	800b3c4 <prvGetNextExpireTime>
 800b312:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800b314:	68bb      	ldr	r3, [r7, #8]
 800b316:	4619      	mov	r1, r3
 800b318:	68f8      	ldr	r0, [r7, #12]
 800b31a:	f000 f805 	bl	800b328 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800b31e:	f000 f8d7 	bl	800b4d0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b322:	bf00      	nop
 800b324:	e7f0      	b.n	800b308 <prvTimerTask+0x8>
	...

0800b328 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800b328:	b580      	push	{r7, lr}
 800b32a:	b084      	sub	sp, #16
 800b32c:	af00      	add	r7, sp, #0
 800b32e:	6078      	str	r0, [r7, #4]
 800b330:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800b332:	f7ff fa29 	bl	800a788 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b336:	f107 0308 	add.w	r3, r7, #8
 800b33a:	4618      	mov	r0, r3
 800b33c:	f000 f866 	bl	800b40c <prvSampleTimeNow>
 800b340:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800b342:	68bb      	ldr	r3, [r7, #8]
 800b344:	2b00      	cmp	r3, #0
 800b346:	d130      	bne.n	800b3aa <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800b348:	683b      	ldr	r3, [r7, #0]
 800b34a:	2b00      	cmp	r3, #0
 800b34c:	d10a      	bne.n	800b364 <prvProcessTimerOrBlockTask+0x3c>
 800b34e:	687a      	ldr	r2, [r7, #4]
 800b350:	68fb      	ldr	r3, [r7, #12]
 800b352:	429a      	cmp	r2, r3
 800b354:	d806      	bhi.n	800b364 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800b356:	f7ff fa25 	bl	800a7a4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800b35a:	68f9      	ldr	r1, [r7, #12]
 800b35c:	6878      	ldr	r0, [r7, #4]
 800b35e:	f7ff ff81 	bl	800b264 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800b362:	e024      	b.n	800b3ae <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800b364:	683b      	ldr	r3, [r7, #0]
 800b366:	2b00      	cmp	r3, #0
 800b368:	d008      	beq.n	800b37c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800b36a:	4b13      	ldr	r3, [pc, #76]	@ (800b3b8 <prvProcessTimerOrBlockTask+0x90>)
 800b36c:	681b      	ldr	r3, [r3, #0]
 800b36e:	681b      	ldr	r3, [r3, #0]
 800b370:	2b00      	cmp	r3, #0
 800b372:	d101      	bne.n	800b378 <prvProcessTimerOrBlockTask+0x50>
 800b374:	2301      	movs	r3, #1
 800b376:	e000      	b.n	800b37a <prvProcessTimerOrBlockTask+0x52>
 800b378:	2300      	movs	r3, #0
 800b37a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800b37c:	4b0f      	ldr	r3, [pc, #60]	@ (800b3bc <prvProcessTimerOrBlockTask+0x94>)
 800b37e:	6818      	ldr	r0, [r3, #0]
 800b380:	687a      	ldr	r2, [r7, #4]
 800b382:	68fb      	ldr	r3, [r7, #12]
 800b384:	1ad3      	subs	r3, r2, r3
 800b386:	683a      	ldr	r2, [r7, #0]
 800b388:	4619      	mov	r1, r3
 800b38a:	f7fe ff65 	bl	800a258 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800b38e:	f7ff fa09 	bl	800a7a4 <xTaskResumeAll>
 800b392:	4603      	mov	r3, r0
 800b394:	2b00      	cmp	r3, #0
 800b396:	d10a      	bne.n	800b3ae <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800b398:	4b09      	ldr	r3, [pc, #36]	@ (800b3c0 <prvProcessTimerOrBlockTask+0x98>)
 800b39a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b39e:	601a      	str	r2, [r3, #0]
 800b3a0:	f3bf 8f4f 	dsb	sy
 800b3a4:	f3bf 8f6f 	isb	sy
}
 800b3a8:	e001      	b.n	800b3ae <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800b3aa:	f7ff f9fb 	bl	800a7a4 <xTaskResumeAll>
}
 800b3ae:	bf00      	nop
 800b3b0:	3710      	adds	r7, #16
 800b3b2:	46bd      	mov	sp, r7
 800b3b4:	bd80      	pop	{r7, pc}
 800b3b6:	bf00      	nop
 800b3b8:	20001afc 	.word	0x20001afc
 800b3bc:	20001b00 	.word	0x20001b00
 800b3c0:	e000ed04 	.word	0xe000ed04

0800b3c4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800b3c4:	b480      	push	{r7}
 800b3c6:	b085      	sub	sp, #20
 800b3c8:	af00      	add	r7, sp, #0
 800b3ca:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800b3cc:	4b0e      	ldr	r3, [pc, #56]	@ (800b408 <prvGetNextExpireTime+0x44>)
 800b3ce:	681b      	ldr	r3, [r3, #0]
 800b3d0:	681b      	ldr	r3, [r3, #0]
 800b3d2:	2b00      	cmp	r3, #0
 800b3d4:	d101      	bne.n	800b3da <prvGetNextExpireTime+0x16>
 800b3d6:	2201      	movs	r2, #1
 800b3d8:	e000      	b.n	800b3dc <prvGetNextExpireTime+0x18>
 800b3da:	2200      	movs	r2, #0
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	681b      	ldr	r3, [r3, #0]
 800b3e4:	2b00      	cmp	r3, #0
 800b3e6:	d105      	bne.n	800b3f4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b3e8:	4b07      	ldr	r3, [pc, #28]	@ (800b408 <prvGetNextExpireTime+0x44>)
 800b3ea:	681b      	ldr	r3, [r3, #0]
 800b3ec:	68db      	ldr	r3, [r3, #12]
 800b3ee:	681b      	ldr	r3, [r3, #0]
 800b3f0:	60fb      	str	r3, [r7, #12]
 800b3f2:	e001      	b.n	800b3f8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800b3f4:	2300      	movs	r3, #0
 800b3f6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800b3f8:	68fb      	ldr	r3, [r7, #12]
}
 800b3fa:	4618      	mov	r0, r3
 800b3fc:	3714      	adds	r7, #20
 800b3fe:	46bd      	mov	sp, r7
 800b400:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b404:	4770      	bx	lr
 800b406:	bf00      	nop
 800b408:	20001af8 	.word	0x20001af8

0800b40c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800b40c:	b580      	push	{r7, lr}
 800b40e:	b084      	sub	sp, #16
 800b410:	af00      	add	r7, sp, #0
 800b412:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800b414:	f7ff fa64 	bl	800a8e0 <xTaskGetTickCount>
 800b418:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800b41a:	4b0b      	ldr	r3, [pc, #44]	@ (800b448 <prvSampleTimeNow+0x3c>)
 800b41c:	681b      	ldr	r3, [r3, #0]
 800b41e:	68fa      	ldr	r2, [r7, #12]
 800b420:	429a      	cmp	r2, r3
 800b422:	d205      	bcs.n	800b430 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800b424:	f000 f93a 	bl	800b69c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	2201      	movs	r2, #1
 800b42c:	601a      	str	r2, [r3, #0]
 800b42e:	e002      	b.n	800b436 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	2200      	movs	r2, #0
 800b434:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800b436:	4a04      	ldr	r2, [pc, #16]	@ (800b448 <prvSampleTimeNow+0x3c>)
 800b438:	68fb      	ldr	r3, [r7, #12]
 800b43a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800b43c:	68fb      	ldr	r3, [r7, #12]
}
 800b43e:	4618      	mov	r0, r3
 800b440:	3710      	adds	r7, #16
 800b442:	46bd      	mov	sp, r7
 800b444:	bd80      	pop	{r7, pc}
 800b446:	bf00      	nop
 800b448:	20001b08 	.word	0x20001b08

0800b44c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800b44c:	b580      	push	{r7, lr}
 800b44e:	b086      	sub	sp, #24
 800b450:	af00      	add	r7, sp, #0
 800b452:	60f8      	str	r0, [r7, #12]
 800b454:	60b9      	str	r1, [r7, #8]
 800b456:	607a      	str	r2, [r7, #4]
 800b458:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800b45a:	2300      	movs	r3, #0
 800b45c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800b45e:	68fb      	ldr	r3, [r7, #12]
 800b460:	68ba      	ldr	r2, [r7, #8]
 800b462:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b464:	68fb      	ldr	r3, [r7, #12]
 800b466:	68fa      	ldr	r2, [r7, #12]
 800b468:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800b46a:	68ba      	ldr	r2, [r7, #8]
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	429a      	cmp	r2, r3
 800b470:	d812      	bhi.n	800b498 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b472:	687a      	ldr	r2, [r7, #4]
 800b474:	683b      	ldr	r3, [r7, #0]
 800b476:	1ad2      	subs	r2, r2, r3
 800b478:	68fb      	ldr	r3, [r7, #12]
 800b47a:	699b      	ldr	r3, [r3, #24]
 800b47c:	429a      	cmp	r2, r3
 800b47e:	d302      	bcc.n	800b486 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800b480:	2301      	movs	r3, #1
 800b482:	617b      	str	r3, [r7, #20]
 800b484:	e01b      	b.n	800b4be <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800b486:	4b10      	ldr	r3, [pc, #64]	@ (800b4c8 <prvInsertTimerInActiveList+0x7c>)
 800b488:	681a      	ldr	r2, [r3, #0]
 800b48a:	68fb      	ldr	r3, [r7, #12]
 800b48c:	3304      	adds	r3, #4
 800b48e:	4619      	mov	r1, r3
 800b490:	4610      	mov	r0, r2
 800b492:	f7fe f97c 	bl	800978e <vListInsert>
 800b496:	e012      	b.n	800b4be <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800b498:	687a      	ldr	r2, [r7, #4]
 800b49a:	683b      	ldr	r3, [r7, #0]
 800b49c:	429a      	cmp	r2, r3
 800b49e:	d206      	bcs.n	800b4ae <prvInsertTimerInActiveList+0x62>
 800b4a0:	68ba      	ldr	r2, [r7, #8]
 800b4a2:	683b      	ldr	r3, [r7, #0]
 800b4a4:	429a      	cmp	r2, r3
 800b4a6:	d302      	bcc.n	800b4ae <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800b4a8:	2301      	movs	r3, #1
 800b4aa:	617b      	str	r3, [r7, #20]
 800b4ac:	e007      	b.n	800b4be <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b4ae:	4b07      	ldr	r3, [pc, #28]	@ (800b4cc <prvInsertTimerInActiveList+0x80>)
 800b4b0:	681a      	ldr	r2, [r3, #0]
 800b4b2:	68fb      	ldr	r3, [r7, #12]
 800b4b4:	3304      	adds	r3, #4
 800b4b6:	4619      	mov	r1, r3
 800b4b8:	4610      	mov	r0, r2
 800b4ba:	f7fe f968 	bl	800978e <vListInsert>
		}
	}

	return xProcessTimerNow;
 800b4be:	697b      	ldr	r3, [r7, #20]
}
 800b4c0:	4618      	mov	r0, r3
 800b4c2:	3718      	adds	r7, #24
 800b4c4:	46bd      	mov	sp, r7
 800b4c6:	bd80      	pop	{r7, pc}
 800b4c8:	20001afc 	.word	0x20001afc
 800b4cc:	20001af8 	.word	0x20001af8

0800b4d0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800b4d0:	b580      	push	{r7, lr}
 800b4d2:	b08e      	sub	sp, #56	@ 0x38
 800b4d4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b4d6:	e0ce      	b.n	800b676 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	2b00      	cmp	r3, #0
 800b4dc:	da19      	bge.n	800b512 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800b4de:	1d3b      	adds	r3, r7, #4
 800b4e0:	3304      	adds	r3, #4
 800b4e2:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800b4e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b4e6:	2b00      	cmp	r3, #0
 800b4e8:	d10b      	bne.n	800b502 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800b4ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b4ee:	f383 8811 	msr	BASEPRI, r3
 800b4f2:	f3bf 8f6f 	isb	sy
 800b4f6:	f3bf 8f4f 	dsb	sy
 800b4fa:	61fb      	str	r3, [r7, #28]
}
 800b4fc:	bf00      	nop
 800b4fe:	bf00      	nop
 800b500:	e7fd      	b.n	800b4fe <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800b502:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b504:	681b      	ldr	r3, [r3, #0]
 800b506:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b508:	6850      	ldr	r0, [r2, #4]
 800b50a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b50c:	6892      	ldr	r2, [r2, #8]
 800b50e:	4611      	mov	r1, r2
 800b510:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	2b00      	cmp	r3, #0
 800b516:	f2c0 80ae 	blt.w	800b676 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800b51a:	68fb      	ldr	r3, [r7, #12]
 800b51c:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800b51e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b520:	695b      	ldr	r3, [r3, #20]
 800b522:	2b00      	cmp	r3, #0
 800b524:	d004      	beq.n	800b530 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b526:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b528:	3304      	adds	r3, #4
 800b52a:	4618      	mov	r0, r3
 800b52c:	f7fe f968 	bl	8009800 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b530:	463b      	mov	r3, r7
 800b532:	4618      	mov	r0, r3
 800b534:	f7ff ff6a 	bl	800b40c <prvSampleTimeNow>
 800b538:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	2b09      	cmp	r3, #9
 800b53e:	f200 8097 	bhi.w	800b670 <prvProcessReceivedCommands+0x1a0>
 800b542:	a201      	add	r2, pc, #4	@ (adr r2, 800b548 <prvProcessReceivedCommands+0x78>)
 800b544:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b548:	0800b571 	.word	0x0800b571
 800b54c:	0800b571 	.word	0x0800b571
 800b550:	0800b571 	.word	0x0800b571
 800b554:	0800b5e7 	.word	0x0800b5e7
 800b558:	0800b5fb 	.word	0x0800b5fb
 800b55c:	0800b647 	.word	0x0800b647
 800b560:	0800b571 	.word	0x0800b571
 800b564:	0800b571 	.word	0x0800b571
 800b568:	0800b5e7 	.word	0x0800b5e7
 800b56c:	0800b5fb 	.word	0x0800b5fb
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b570:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b572:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b576:	f043 0301 	orr.w	r3, r3, #1
 800b57a:	b2da      	uxtb	r2, r3
 800b57c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b57e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800b582:	68ba      	ldr	r2, [r7, #8]
 800b584:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b586:	699b      	ldr	r3, [r3, #24]
 800b588:	18d1      	adds	r1, r2, r3
 800b58a:	68bb      	ldr	r3, [r7, #8]
 800b58c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b58e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b590:	f7ff ff5c 	bl	800b44c <prvInsertTimerInActiveList>
 800b594:	4603      	mov	r3, r0
 800b596:	2b00      	cmp	r3, #0
 800b598:	d06c      	beq.n	800b674 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b59a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b59c:	6a1b      	ldr	r3, [r3, #32]
 800b59e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b5a0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b5a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b5a4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b5a8:	f003 0304 	and.w	r3, r3, #4
 800b5ac:	2b00      	cmp	r3, #0
 800b5ae:	d061      	beq.n	800b674 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800b5b0:	68ba      	ldr	r2, [r7, #8]
 800b5b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b5b4:	699b      	ldr	r3, [r3, #24]
 800b5b6:	441a      	add	r2, r3
 800b5b8:	2300      	movs	r3, #0
 800b5ba:	9300      	str	r3, [sp, #0]
 800b5bc:	2300      	movs	r3, #0
 800b5be:	2100      	movs	r1, #0
 800b5c0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b5c2:	f7ff fe01 	bl	800b1c8 <xTimerGenericCommand>
 800b5c6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800b5c8:	6a3b      	ldr	r3, [r7, #32]
 800b5ca:	2b00      	cmp	r3, #0
 800b5cc:	d152      	bne.n	800b674 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800b5ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b5d2:	f383 8811 	msr	BASEPRI, r3
 800b5d6:	f3bf 8f6f 	isb	sy
 800b5da:	f3bf 8f4f 	dsb	sy
 800b5de:	61bb      	str	r3, [r7, #24]
}
 800b5e0:	bf00      	nop
 800b5e2:	bf00      	nop
 800b5e4:	e7fd      	b.n	800b5e2 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b5e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b5e8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b5ec:	f023 0301 	bic.w	r3, r3, #1
 800b5f0:	b2da      	uxtb	r2, r3
 800b5f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b5f4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800b5f8:	e03d      	b.n	800b676 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b5fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b5fc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b600:	f043 0301 	orr.w	r3, r3, #1
 800b604:	b2da      	uxtb	r2, r3
 800b606:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b608:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800b60c:	68ba      	ldr	r2, [r7, #8]
 800b60e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b610:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800b612:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b614:	699b      	ldr	r3, [r3, #24]
 800b616:	2b00      	cmp	r3, #0
 800b618:	d10b      	bne.n	800b632 <prvProcessReceivedCommands+0x162>
	__asm volatile
 800b61a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b61e:	f383 8811 	msr	BASEPRI, r3
 800b622:	f3bf 8f6f 	isb	sy
 800b626:	f3bf 8f4f 	dsb	sy
 800b62a:	617b      	str	r3, [r7, #20]
}
 800b62c:	bf00      	nop
 800b62e:	bf00      	nop
 800b630:	e7fd      	b.n	800b62e <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800b632:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b634:	699a      	ldr	r2, [r3, #24]
 800b636:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b638:	18d1      	adds	r1, r2, r3
 800b63a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b63c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b63e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b640:	f7ff ff04 	bl	800b44c <prvInsertTimerInActiveList>
					break;
 800b644:	e017      	b.n	800b676 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800b646:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b648:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b64c:	f003 0302 	and.w	r3, r3, #2
 800b650:	2b00      	cmp	r3, #0
 800b652:	d103      	bne.n	800b65c <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800b654:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b656:	f000 fbe7 	bl	800be28 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800b65a:	e00c      	b.n	800b676 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b65c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b65e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b662:	f023 0301 	bic.w	r3, r3, #1
 800b666:	b2da      	uxtb	r2, r3
 800b668:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b66a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800b66e:	e002      	b.n	800b676 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800b670:	bf00      	nop
 800b672:	e000      	b.n	800b676 <prvProcessReceivedCommands+0x1a6>
					break;
 800b674:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b676:	4b08      	ldr	r3, [pc, #32]	@ (800b698 <prvProcessReceivedCommands+0x1c8>)
 800b678:	681b      	ldr	r3, [r3, #0]
 800b67a:	1d39      	adds	r1, r7, #4
 800b67c:	2200      	movs	r2, #0
 800b67e:	4618      	mov	r0, r3
 800b680:	f7fe fbce 	bl	8009e20 <xQueueReceive>
 800b684:	4603      	mov	r3, r0
 800b686:	2b00      	cmp	r3, #0
 800b688:	f47f af26 	bne.w	800b4d8 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800b68c:	bf00      	nop
 800b68e:	bf00      	nop
 800b690:	3730      	adds	r7, #48	@ 0x30
 800b692:	46bd      	mov	sp, r7
 800b694:	bd80      	pop	{r7, pc}
 800b696:	bf00      	nop
 800b698:	20001b00 	.word	0x20001b00

0800b69c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800b69c:	b580      	push	{r7, lr}
 800b69e:	b088      	sub	sp, #32
 800b6a0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b6a2:	e049      	b.n	800b738 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b6a4:	4b2e      	ldr	r3, [pc, #184]	@ (800b760 <prvSwitchTimerLists+0xc4>)
 800b6a6:	681b      	ldr	r3, [r3, #0]
 800b6a8:	68db      	ldr	r3, [r3, #12]
 800b6aa:	681b      	ldr	r3, [r3, #0]
 800b6ac:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b6ae:	4b2c      	ldr	r3, [pc, #176]	@ (800b760 <prvSwitchTimerLists+0xc4>)
 800b6b0:	681b      	ldr	r3, [r3, #0]
 800b6b2:	68db      	ldr	r3, [r3, #12]
 800b6b4:	68db      	ldr	r3, [r3, #12]
 800b6b6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b6b8:	68fb      	ldr	r3, [r7, #12]
 800b6ba:	3304      	adds	r3, #4
 800b6bc:	4618      	mov	r0, r3
 800b6be:	f7fe f89f 	bl	8009800 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b6c2:	68fb      	ldr	r3, [r7, #12]
 800b6c4:	6a1b      	ldr	r3, [r3, #32]
 800b6c6:	68f8      	ldr	r0, [r7, #12]
 800b6c8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b6ca:	68fb      	ldr	r3, [r7, #12]
 800b6cc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b6d0:	f003 0304 	and.w	r3, r3, #4
 800b6d4:	2b00      	cmp	r3, #0
 800b6d6:	d02f      	beq.n	800b738 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800b6d8:	68fb      	ldr	r3, [r7, #12]
 800b6da:	699b      	ldr	r3, [r3, #24]
 800b6dc:	693a      	ldr	r2, [r7, #16]
 800b6de:	4413      	add	r3, r2
 800b6e0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800b6e2:	68ba      	ldr	r2, [r7, #8]
 800b6e4:	693b      	ldr	r3, [r7, #16]
 800b6e6:	429a      	cmp	r2, r3
 800b6e8:	d90e      	bls.n	800b708 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800b6ea:	68fb      	ldr	r3, [r7, #12]
 800b6ec:	68ba      	ldr	r2, [r7, #8]
 800b6ee:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b6f0:	68fb      	ldr	r3, [r7, #12]
 800b6f2:	68fa      	ldr	r2, [r7, #12]
 800b6f4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b6f6:	4b1a      	ldr	r3, [pc, #104]	@ (800b760 <prvSwitchTimerLists+0xc4>)
 800b6f8:	681a      	ldr	r2, [r3, #0]
 800b6fa:	68fb      	ldr	r3, [r7, #12]
 800b6fc:	3304      	adds	r3, #4
 800b6fe:	4619      	mov	r1, r3
 800b700:	4610      	mov	r0, r2
 800b702:	f7fe f844 	bl	800978e <vListInsert>
 800b706:	e017      	b.n	800b738 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b708:	2300      	movs	r3, #0
 800b70a:	9300      	str	r3, [sp, #0]
 800b70c:	2300      	movs	r3, #0
 800b70e:	693a      	ldr	r2, [r7, #16]
 800b710:	2100      	movs	r1, #0
 800b712:	68f8      	ldr	r0, [r7, #12]
 800b714:	f7ff fd58 	bl	800b1c8 <xTimerGenericCommand>
 800b718:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800b71a:	687b      	ldr	r3, [r7, #4]
 800b71c:	2b00      	cmp	r3, #0
 800b71e:	d10b      	bne.n	800b738 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800b720:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b724:	f383 8811 	msr	BASEPRI, r3
 800b728:	f3bf 8f6f 	isb	sy
 800b72c:	f3bf 8f4f 	dsb	sy
 800b730:	603b      	str	r3, [r7, #0]
}
 800b732:	bf00      	nop
 800b734:	bf00      	nop
 800b736:	e7fd      	b.n	800b734 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b738:	4b09      	ldr	r3, [pc, #36]	@ (800b760 <prvSwitchTimerLists+0xc4>)
 800b73a:	681b      	ldr	r3, [r3, #0]
 800b73c:	681b      	ldr	r3, [r3, #0]
 800b73e:	2b00      	cmp	r3, #0
 800b740:	d1b0      	bne.n	800b6a4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800b742:	4b07      	ldr	r3, [pc, #28]	@ (800b760 <prvSwitchTimerLists+0xc4>)
 800b744:	681b      	ldr	r3, [r3, #0]
 800b746:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800b748:	4b06      	ldr	r3, [pc, #24]	@ (800b764 <prvSwitchTimerLists+0xc8>)
 800b74a:	681b      	ldr	r3, [r3, #0]
 800b74c:	4a04      	ldr	r2, [pc, #16]	@ (800b760 <prvSwitchTimerLists+0xc4>)
 800b74e:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800b750:	4a04      	ldr	r2, [pc, #16]	@ (800b764 <prvSwitchTimerLists+0xc8>)
 800b752:	697b      	ldr	r3, [r7, #20]
 800b754:	6013      	str	r3, [r2, #0]
}
 800b756:	bf00      	nop
 800b758:	3718      	adds	r7, #24
 800b75a:	46bd      	mov	sp, r7
 800b75c:	bd80      	pop	{r7, pc}
 800b75e:	bf00      	nop
 800b760:	20001af8 	.word	0x20001af8
 800b764:	20001afc 	.word	0x20001afc

0800b768 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800b768:	b580      	push	{r7, lr}
 800b76a:	b082      	sub	sp, #8
 800b76c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800b76e:	f000 f96b 	bl	800ba48 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800b772:	4b15      	ldr	r3, [pc, #84]	@ (800b7c8 <prvCheckForValidListAndQueue+0x60>)
 800b774:	681b      	ldr	r3, [r3, #0]
 800b776:	2b00      	cmp	r3, #0
 800b778:	d120      	bne.n	800b7bc <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800b77a:	4814      	ldr	r0, [pc, #80]	@ (800b7cc <prvCheckForValidListAndQueue+0x64>)
 800b77c:	f7fd ffb6 	bl	80096ec <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800b780:	4813      	ldr	r0, [pc, #76]	@ (800b7d0 <prvCheckForValidListAndQueue+0x68>)
 800b782:	f7fd ffb3 	bl	80096ec <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800b786:	4b13      	ldr	r3, [pc, #76]	@ (800b7d4 <prvCheckForValidListAndQueue+0x6c>)
 800b788:	4a10      	ldr	r2, [pc, #64]	@ (800b7cc <prvCheckForValidListAndQueue+0x64>)
 800b78a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800b78c:	4b12      	ldr	r3, [pc, #72]	@ (800b7d8 <prvCheckForValidListAndQueue+0x70>)
 800b78e:	4a10      	ldr	r2, [pc, #64]	@ (800b7d0 <prvCheckForValidListAndQueue+0x68>)
 800b790:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800b792:	2300      	movs	r3, #0
 800b794:	9300      	str	r3, [sp, #0]
 800b796:	4b11      	ldr	r3, [pc, #68]	@ (800b7dc <prvCheckForValidListAndQueue+0x74>)
 800b798:	4a11      	ldr	r2, [pc, #68]	@ (800b7e0 <prvCheckForValidListAndQueue+0x78>)
 800b79a:	2110      	movs	r1, #16
 800b79c:	200a      	movs	r0, #10
 800b79e:	f7fe f8c3 	bl	8009928 <xQueueGenericCreateStatic>
 800b7a2:	4603      	mov	r3, r0
 800b7a4:	4a08      	ldr	r2, [pc, #32]	@ (800b7c8 <prvCheckForValidListAndQueue+0x60>)
 800b7a6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800b7a8:	4b07      	ldr	r3, [pc, #28]	@ (800b7c8 <prvCheckForValidListAndQueue+0x60>)
 800b7aa:	681b      	ldr	r3, [r3, #0]
 800b7ac:	2b00      	cmp	r3, #0
 800b7ae:	d005      	beq.n	800b7bc <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800b7b0:	4b05      	ldr	r3, [pc, #20]	@ (800b7c8 <prvCheckForValidListAndQueue+0x60>)
 800b7b2:	681b      	ldr	r3, [r3, #0]
 800b7b4:	490b      	ldr	r1, [pc, #44]	@ (800b7e4 <prvCheckForValidListAndQueue+0x7c>)
 800b7b6:	4618      	mov	r0, r3
 800b7b8:	f7fe fd24 	bl	800a204 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b7bc:	f000 f976 	bl	800baac <vPortExitCritical>
}
 800b7c0:	bf00      	nop
 800b7c2:	46bd      	mov	sp, r7
 800b7c4:	bd80      	pop	{r7, pc}
 800b7c6:	bf00      	nop
 800b7c8:	20001b00 	.word	0x20001b00
 800b7cc:	20001ad0 	.word	0x20001ad0
 800b7d0:	20001ae4 	.word	0x20001ae4
 800b7d4:	20001af8 	.word	0x20001af8
 800b7d8:	20001afc 	.word	0x20001afc
 800b7dc:	20001bac 	.word	0x20001bac
 800b7e0:	20001b0c 	.word	0x20001b0c
 800b7e4:	0800d9d4 	.word	0x0800d9d4

0800b7e8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800b7e8:	b480      	push	{r7}
 800b7ea:	b085      	sub	sp, #20
 800b7ec:	af00      	add	r7, sp, #0
 800b7ee:	60f8      	str	r0, [r7, #12]
 800b7f0:	60b9      	str	r1, [r7, #8]
 800b7f2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800b7f4:	68fb      	ldr	r3, [r7, #12]
 800b7f6:	3b04      	subs	r3, #4
 800b7f8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800b7fa:	68fb      	ldr	r3, [r7, #12]
 800b7fc:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800b800:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b802:	68fb      	ldr	r3, [r7, #12]
 800b804:	3b04      	subs	r3, #4
 800b806:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800b808:	68bb      	ldr	r3, [r7, #8]
 800b80a:	f023 0201 	bic.w	r2, r3, #1
 800b80e:	68fb      	ldr	r3, [r7, #12]
 800b810:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b812:	68fb      	ldr	r3, [r7, #12]
 800b814:	3b04      	subs	r3, #4
 800b816:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800b818:	4a0c      	ldr	r2, [pc, #48]	@ (800b84c <pxPortInitialiseStack+0x64>)
 800b81a:	68fb      	ldr	r3, [r7, #12]
 800b81c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800b81e:	68fb      	ldr	r3, [r7, #12]
 800b820:	3b14      	subs	r3, #20
 800b822:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800b824:	687a      	ldr	r2, [r7, #4]
 800b826:	68fb      	ldr	r3, [r7, #12]
 800b828:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800b82a:	68fb      	ldr	r3, [r7, #12]
 800b82c:	3b04      	subs	r3, #4
 800b82e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800b830:	68fb      	ldr	r3, [r7, #12]
 800b832:	f06f 0202 	mvn.w	r2, #2
 800b836:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800b838:	68fb      	ldr	r3, [r7, #12]
 800b83a:	3b20      	subs	r3, #32
 800b83c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800b83e:	68fb      	ldr	r3, [r7, #12]
}
 800b840:	4618      	mov	r0, r3
 800b842:	3714      	adds	r7, #20
 800b844:	46bd      	mov	sp, r7
 800b846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b84a:	4770      	bx	lr
 800b84c:	0800b851 	.word	0x0800b851

0800b850 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800b850:	b480      	push	{r7}
 800b852:	b085      	sub	sp, #20
 800b854:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800b856:	2300      	movs	r3, #0
 800b858:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800b85a:	4b13      	ldr	r3, [pc, #76]	@ (800b8a8 <prvTaskExitError+0x58>)
 800b85c:	681b      	ldr	r3, [r3, #0]
 800b85e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b862:	d00b      	beq.n	800b87c <prvTaskExitError+0x2c>
	__asm volatile
 800b864:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b868:	f383 8811 	msr	BASEPRI, r3
 800b86c:	f3bf 8f6f 	isb	sy
 800b870:	f3bf 8f4f 	dsb	sy
 800b874:	60fb      	str	r3, [r7, #12]
}
 800b876:	bf00      	nop
 800b878:	bf00      	nop
 800b87a:	e7fd      	b.n	800b878 <prvTaskExitError+0x28>
	__asm volatile
 800b87c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b880:	f383 8811 	msr	BASEPRI, r3
 800b884:	f3bf 8f6f 	isb	sy
 800b888:	f3bf 8f4f 	dsb	sy
 800b88c:	60bb      	str	r3, [r7, #8]
}
 800b88e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800b890:	bf00      	nop
 800b892:	687b      	ldr	r3, [r7, #4]
 800b894:	2b00      	cmp	r3, #0
 800b896:	d0fc      	beq.n	800b892 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800b898:	bf00      	nop
 800b89a:	bf00      	nop
 800b89c:	3714      	adds	r7, #20
 800b89e:	46bd      	mov	sp, r7
 800b8a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8a4:	4770      	bx	lr
 800b8a6:	bf00      	nop
 800b8a8:	200000d8 	.word	0x200000d8
 800b8ac:	00000000 	.word	0x00000000

0800b8b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800b8b0:	4b07      	ldr	r3, [pc, #28]	@ (800b8d0 <pxCurrentTCBConst2>)
 800b8b2:	6819      	ldr	r1, [r3, #0]
 800b8b4:	6808      	ldr	r0, [r1, #0]
 800b8b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b8ba:	f380 8809 	msr	PSP, r0
 800b8be:	f3bf 8f6f 	isb	sy
 800b8c2:	f04f 0000 	mov.w	r0, #0
 800b8c6:	f380 8811 	msr	BASEPRI, r0
 800b8ca:	4770      	bx	lr
 800b8cc:	f3af 8000 	nop.w

0800b8d0 <pxCurrentTCBConst2>:
 800b8d0:	200015d0 	.word	0x200015d0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800b8d4:	bf00      	nop
 800b8d6:	bf00      	nop

0800b8d8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800b8d8:	4808      	ldr	r0, [pc, #32]	@ (800b8fc <prvPortStartFirstTask+0x24>)
 800b8da:	6800      	ldr	r0, [r0, #0]
 800b8dc:	6800      	ldr	r0, [r0, #0]
 800b8de:	f380 8808 	msr	MSP, r0
 800b8e2:	f04f 0000 	mov.w	r0, #0
 800b8e6:	f380 8814 	msr	CONTROL, r0
 800b8ea:	b662      	cpsie	i
 800b8ec:	b661      	cpsie	f
 800b8ee:	f3bf 8f4f 	dsb	sy
 800b8f2:	f3bf 8f6f 	isb	sy
 800b8f6:	df00      	svc	0
 800b8f8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800b8fa:	bf00      	nop
 800b8fc:	e000ed08 	.word	0xe000ed08

0800b900 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800b900:	b580      	push	{r7, lr}
 800b902:	b086      	sub	sp, #24
 800b904:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800b906:	4b47      	ldr	r3, [pc, #284]	@ (800ba24 <xPortStartScheduler+0x124>)
 800b908:	681b      	ldr	r3, [r3, #0]
 800b90a:	4a47      	ldr	r2, [pc, #284]	@ (800ba28 <xPortStartScheduler+0x128>)
 800b90c:	4293      	cmp	r3, r2
 800b90e:	d10b      	bne.n	800b928 <xPortStartScheduler+0x28>
	__asm volatile
 800b910:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b914:	f383 8811 	msr	BASEPRI, r3
 800b918:	f3bf 8f6f 	isb	sy
 800b91c:	f3bf 8f4f 	dsb	sy
 800b920:	613b      	str	r3, [r7, #16]
}
 800b922:	bf00      	nop
 800b924:	bf00      	nop
 800b926:	e7fd      	b.n	800b924 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800b928:	4b3e      	ldr	r3, [pc, #248]	@ (800ba24 <xPortStartScheduler+0x124>)
 800b92a:	681b      	ldr	r3, [r3, #0]
 800b92c:	4a3f      	ldr	r2, [pc, #252]	@ (800ba2c <xPortStartScheduler+0x12c>)
 800b92e:	4293      	cmp	r3, r2
 800b930:	d10b      	bne.n	800b94a <xPortStartScheduler+0x4a>
	__asm volatile
 800b932:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b936:	f383 8811 	msr	BASEPRI, r3
 800b93a:	f3bf 8f6f 	isb	sy
 800b93e:	f3bf 8f4f 	dsb	sy
 800b942:	60fb      	str	r3, [r7, #12]
}
 800b944:	bf00      	nop
 800b946:	bf00      	nop
 800b948:	e7fd      	b.n	800b946 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800b94a:	4b39      	ldr	r3, [pc, #228]	@ (800ba30 <xPortStartScheduler+0x130>)
 800b94c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800b94e:	697b      	ldr	r3, [r7, #20]
 800b950:	781b      	ldrb	r3, [r3, #0]
 800b952:	b2db      	uxtb	r3, r3
 800b954:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800b956:	697b      	ldr	r3, [r7, #20]
 800b958:	22ff      	movs	r2, #255	@ 0xff
 800b95a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800b95c:	697b      	ldr	r3, [r7, #20]
 800b95e:	781b      	ldrb	r3, [r3, #0]
 800b960:	b2db      	uxtb	r3, r3
 800b962:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800b964:	78fb      	ldrb	r3, [r7, #3]
 800b966:	b2db      	uxtb	r3, r3
 800b968:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800b96c:	b2da      	uxtb	r2, r3
 800b96e:	4b31      	ldr	r3, [pc, #196]	@ (800ba34 <xPortStartScheduler+0x134>)
 800b970:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800b972:	4b31      	ldr	r3, [pc, #196]	@ (800ba38 <xPortStartScheduler+0x138>)
 800b974:	2207      	movs	r2, #7
 800b976:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b978:	e009      	b.n	800b98e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800b97a:	4b2f      	ldr	r3, [pc, #188]	@ (800ba38 <xPortStartScheduler+0x138>)
 800b97c:	681b      	ldr	r3, [r3, #0]
 800b97e:	3b01      	subs	r3, #1
 800b980:	4a2d      	ldr	r2, [pc, #180]	@ (800ba38 <xPortStartScheduler+0x138>)
 800b982:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800b984:	78fb      	ldrb	r3, [r7, #3]
 800b986:	b2db      	uxtb	r3, r3
 800b988:	005b      	lsls	r3, r3, #1
 800b98a:	b2db      	uxtb	r3, r3
 800b98c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b98e:	78fb      	ldrb	r3, [r7, #3]
 800b990:	b2db      	uxtb	r3, r3
 800b992:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b996:	2b80      	cmp	r3, #128	@ 0x80
 800b998:	d0ef      	beq.n	800b97a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800b99a:	4b27      	ldr	r3, [pc, #156]	@ (800ba38 <xPortStartScheduler+0x138>)
 800b99c:	681b      	ldr	r3, [r3, #0]
 800b99e:	f1c3 0307 	rsb	r3, r3, #7
 800b9a2:	2b04      	cmp	r3, #4
 800b9a4:	d00b      	beq.n	800b9be <xPortStartScheduler+0xbe>
	__asm volatile
 800b9a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b9aa:	f383 8811 	msr	BASEPRI, r3
 800b9ae:	f3bf 8f6f 	isb	sy
 800b9b2:	f3bf 8f4f 	dsb	sy
 800b9b6:	60bb      	str	r3, [r7, #8]
}
 800b9b8:	bf00      	nop
 800b9ba:	bf00      	nop
 800b9bc:	e7fd      	b.n	800b9ba <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800b9be:	4b1e      	ldr	r3, [pc, #120]	@ (800ba38 <xPortStartScheduler+0x138>)
 800b9c0:	681b      	ldr	r3, [r3, #0]
 800b9c2:	021b      	lsls	r3, r3, #8
 800b9c4:	4a1c      	ldr	r2, [pc, #112]	@ (800ba38 <xPortStartScheduler+0x138>)
 800b9c6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800b9c8:	4b1b      	ldr	r3, [pc, #108]	@ (800ba38 <xPortStartScheduler+0x138>)
 800b9ca:	681b      	ldr	r3, [r3, #0]
 800b9cc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800b9d0:	4a19      	ldr	r2, [pc, #100]	@ (800ba38 <xPortStartScheduler+0x138>)
 800b9d2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800b9d4:	687b      	ldr	r3, [r7, #4]
 800b9d6:	b2da      	uxtb	r2, r3
 800b9d8:	697b      	ldr	r3, [r7, #20]
 800b9da:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800b9dc:	4b17      	ldr	r3, [pc, #92]	@ (800ba3c <xPortStartScheduler+0x13c>)
 800b9de:	681b      	ldr	r3, [r3, #0]
 800b9e0:	4a16      	ldr	r2, [pc, #88]	@ (800ba3c <xPortStartScheduler+0x13c>)
 800b9e2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800b9e6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800b9e8:	4b14      	ldr	r3, [pc, #80]	@ (800ba3c <xPortStartScheduler+0x13c>)
 800b9ea:	681b      	ldr	r3, [r3, #0]
 800b9ec:	4a13      	ldr	r2, [pc, #76]	@ (800ba3c <xPortStartScheduler+0x13c>)
 800b9ee:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800b9f2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800b9f4:	f000 f8da 	bl	800bbac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800b9f8:	4b11      	ldr	r3, [pc, #68]	@ (800ba40 <xPortStartScheduler+0x140>)
 800b9fa:	2200      	movs	r2, #0
 800b9fc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800b9fe:	f000 f8f9 	bl	800bbf4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800ba02:	4b10      	ldr	r3, [pc, #64]	@ (800ba44 <xPortStartScheduler+0x144>)
 800ba04:	681b      	ldr	r3, [r3, #0]
 800ba06:	4a0f      	ldr	r2, [pc, #60]	@ (800ba44 <xPortStartScheduler+0x144>)
 800ba08:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800ba0c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800ba0e:	f7ff ff63 	bl	800b8d8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800ba12:	f7ff f82f 	bl	800aa74 <vTaskSwitchContext>
	prvTaskExitError();
 800ba16:	f7ff ff1b 	bl	800b850 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800ba1a:	2300      	movs	r3, #0
}
 800ba1c:	4618      	mov	r0, r3
 800ba1e:	3718      	adds	r7, #24
 800ba20:	46bd      	mov	sp, r7
 800ba22:	bd80      	pop	{r7, pc}
 800ba24:	e000ed00 	.word	0xe000ed00
 800ba28:	410fc271 	.word	0x410fc271
 800ba2c:	410fc270 	.word	0x410fc270
 800ba30:	e000e400 	.word	0xe000e400
 800ba34:	20001bfc 	.word	0x20001bfc
 800ba38:	20001c00 	.word	0x20001c00
 800ba3c:	e000ed20 	.word	0xe000ed20
 800ba40:	200000d8 	.word	0x200000d8
 800ba44:	e000ef34 	.word	0xe000ef34

0800ba48 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800ba48:	b480      	push	{r7}
 800ba4a:	b083      	sub	sp, #12
 800ba4c:	af00      	add	r7, sp, #0
	__asm volatile
 800ba4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ba52:	f383 8811 	msr	BASEPRI, r3
 800ba56:	f3bf 8f6f 	isb	sy
 800ba5a:	f3bf 8f4f 	dsb	sy
 800ba5e:	607b      	str	r3, [r7, #4]
}
 800ba60:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800ba62:	4b10      	ldr	r3, [pc, #64]	@ (800baa4 <vPortEnterCritical+0x5c>)
 800ba64:	681b      	ldr	r3, [r3, #0]
 800ba66:	3301      	adds	r3, #1
 800ba68:	4a0e      	ldr	r2, [pc, #56]	@ (800baa4 <vPortEnterCritical+0x5c>)
 800ba6a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800ba6c:	4b0d      	ldr	r3, [pc, #52]	@ (800baa4 <vPortEnterCritical+0x5c>)
 800ba6e:	681b      	ldr	r3, [r3, #0]
 800ba70:	2b01      	cmp	r3, #1
 800ba72:	d110      	bne.n	800ba96 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800ba74:	4b0c      	ldr	r3, [pc, #48]	@ (800baa8 <vPortEnterCritical+0x60>)
 800ba76:	681b      	ldr	r3, [r3, #0]
 800ba78:	b2db      	uxtb	r3, r3
 800ba7a:	2b00      	cmp	r3, #0
 800ba7c:	d00b      	beq.n	800ba96 <vPortEnterCritical+0x4e>
	__asm volatile
 800ba7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ba82:	f383 8811 	msr	BASEPRI, r3
 800ba86:	f3bf 8f6f 	isb	sy
 800ba8a:	f3bf 8f4f 	dsb	sy
 800ba8e:	603b      	str	r3, [r7, #0]
}
 800ba90:	bf00      	nop
 800ba92:	bf00      	nop
 800ba94:	e7fd      	b.n	800ba92 <vPortEnterCritical+0x4a>
	}
}
 800ba96:	bf00      	nop
 800ba98:	370c      	adds	r7, #12
 800ba9a:	46bd      	mov	sp, r7
 800ba9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baa0:	4770      	bx	lr
 800baa2:	bf00      	nop
 800baa4:	200000d8 	.word	0x200000d8
 800baa8:	e000ed04 	.word	0xe000ed04

0800baac <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800baac:	b480      	push	{r7}
 800baae:	b083      	sub	sp, #12
 800bab0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800bab2:	4b12      	ldr	r3, [pc, #72]	@ (800bafc <vPortExitCritical+0x50>)
 800bab4:	681b      	ldr	r3, [r3, #0]
 800bab6:	2b00      	cmp	r3, #0
 800bab8:	d10b      	bne.n	800bad2 <vPortExitCritical+0x26>
	__asm volatile
 800baba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800babe:	f383 8811 	msr	BASEPRI, r3
 800bac2:	f3bf 8f6f 	isb	sy
 800bac6:	f3bf 8f4f 	dsb	sy
 800baca:	607b      	str	r3, [r7, #4]
}
 800bacc:	bf00      	nop
 800bace:	bf00      	nop
 800bad0:	e7fd      	b.n	800bace <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800bad2:	4b0a      	ldr	r3, [pc, #40]	@ (800bafc <vPortExitCritical+0x50>)
 800bad4:	681b      	ldr	r3, [r3, #0]
 800bad6:	3b01      	subs	r3, #1
 800bad8:	4a08      	ldr	r2, [pc, #32]	@ (800bafc <vPortExitCritical+0x50>)
 800bada:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800badc:	4b07      	ldr	r3, [pc, #28]	@ (800bafc <vPortExitCritical+0x50>)
 800bade:	681b      	ldr	r3, [r3, #0]
 800bae0:	2b00      	cmp	r3, #0
 800bae2:	d105      	bne.n	800baf0 <vPortExitCritical+0x44>
 800bae4:	2300      	movs	r3, #0
 800bae6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800bae8:	683b      	ldr	r3, [r7, #0]
 800baea:	f383 8811 	msr	BASEPRI, r3
}
 800baee:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800baf0:	bf00      	nop
 800baf2:	370c      	adds	r7, #12
 800baf4:	46bd      	mov	sp, r7
 800baf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bafa:	4770      	bx	lr
 800bafc:	200000d8 	.word	0x200000d8

0800bb00 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800bb00:	f3ef 8009 	mrs	r0, PSP
 800bb04:	f3bf 8f6f 	isb	sy
 800bb08:	4b15      	ldr	r3, [pc, #84]	@ (800bb60 <pxCurrentTCBConst>)
 800bb0a:	681a      	ldr	r2, [r3, #0]
 800bb0c:	f01e 0f10 	tst.w	lr, #16
 800bb10:	bf08      	it	eq
 800bb12:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800bb16:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb1a:	6010      	str	r0, [r2, #0]
 800bb1c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800bb20:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800bb24:	f380 8811 	msr	BASEPRI, r0
 800bb28:	f3bf 8f4f 	dsb	sy
 800bb2c:	f3bf 8f6f 	isb	sy
 800bb30:	f7fe ffa0 	bl	800aa74 <vTaskSwitchContext>
 800bb34:	f04f 0000 	mov.w	r0, #0
 800bb38:	f380 8811 	msr	BASEPRI, r0
 800bb3c:	bc09      	pop	{r0, r3}
 800bb3e:	6819      	ldr	r1, [r3, #0]
 800bb40:	6808      	ldr	r0, [r1, #0]
 800bb42:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb46:	f01e 0f10 	tst.w	lr, #16
 800bb4a:	bf08      	it	eq
 800bb4c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800bb50:	f380 8809 	msr	PSP, r0
 800bb54:	f3bf 8f6f 	isb	sy
 800bb58:	4770      	bx	lr
 800bb5a:	bf00      	nop
 800bb5c:	f3af 8000 	nop.w

0800bb60 <pxCurrentTCBConst>:
 800bb60:	200015d0 	.word	0x200015d0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800bb64:	bf00      	nop
 800bb66:	bf00      	nop

0800bb68 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800bb68:	b580      	push	{r7, lr}
 800bb6a:	b082      	sub	sp, #8
 800bb6c:	af00      	add	r7, sp, #0
	__asm volatile
 800bb6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bb72:	f383 8811 	msr	BASEPRI, r3
 800bb76:	f3bf 8f6f 	isb	sy
 800bb7a:	f3bf 8f4f 	dsb	sy
 800bb7e:	607b      	str	r3, [r7, #4]
}
 800bb80:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800bb82:	f7fe febd 	bl	800a900 <xTaskIncrementTick>
 800bb86:	4603      	mov	r3, r0
 800bb88:	2b00      	cmp	r3, #0
 800bb8a:	d003      	beq.n	800bb94 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800bb8c:	4b06      	ldr	r3, [pc, #24]	@ (800bba8 <xPortSysTickHandler+0x40>)
 800bb8e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bb92:	601a      	str	r2, [r3, #0]
 800bb94:	2300      	movs	r3, #0
 800bb96:	603b      	str	r3, [r7, #0]
	__asm volatile
 800bb98:	683b      	ldr	r3, [r7, #0]
 800bb9a:	f383 8811 	msr	BASEPRI, r3
}
 800bb9e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800bba0:	bf00      	nop
 800bba2:	3708      	adds	r7, #8
 800bba4:	46bd      	mov	sp, r7
 800bba6:	bd80      	pop	{r7, pc}
 800bba8:	e000ed04 	.word	0xe000ed04

0800bbac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800bbac:	b480      	push	{r7}
 800bbae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800bbb0:	4b0b      	ldr	r3, [pc, #44]	@ (800bbe0 <vPortSetupTimerInterrupt+0x34>)
 800bbb2:	2200      	movs	r2, #0
 800bbb4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800bbb6:	4b0b      	ldr	r3, [pc, #44]	@ (800bbe4 <vPortSetupTimerInterrupt+0x38>)
 800bbb8:	2200      	movs	r2, #0
 800bbba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800bbbc:	4b0a      	ldr	r3, [pc, #40]	@ (800bbe8 <vPortSetupTimerInterrupt+0x3c>)
 800bbbe:	681b      	ldr	r3, [r3, #0]
 800bbc0:	4a0a      	ldr	r2, [pc, #40]	@ (800bbec <vPortSetupTimerInterrupt+0x40>)
 800bbc2:	fba2 2303 	umull	r2, r3, r2, r3
 800bbc6:	099b      	lsrs	r3, r3, #6
 800bbc8:	4a09      	ldr	r2, [pc, #36]	@ (800bbf0 <vPortSetupTimerInterrupt+0x44>)
 800bbca:	3b01      	subs	r3, #1
 800bbcc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800bbce:	4b04      	ldr	r3, [pc, #16]	@ (800bbe0 <vPortSetupTimerInterrupt+0x34>)
 800bbd0:	2207      	movs	r2, #7
 800bbd2:	601a      	str	r2, [r3, #0]
}
 800bbd4:	bf00      	nop
 800bbd6:	46bd      	mov	sp, r7
 800bbd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbdc:	4770      	bx	lr
 800bbde:	bf00      	nop
 800bbe0:	e000e010 	.word	0xe000e010
 800bbe4:	e000e018 	.word	0xe000e018
 800bbe8:	20000080 	.word	0x20000080
 800bbec:	10624dd3 	.word	0x10624dd3
 800bbf0:	e000e014 	.word	0xe000e014

0800bbf4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800bbf4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800bc04 <vPortEnableVFP+0x10>
 800bbf8:	6801      	ldr	r1, [r0, #0]
 800bbfa:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800bbfe:	6001      	str	r1, [r0, #0]
 800bc00:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800bc02:	bf00      	nop
 800bc04:	e000ed88 	.word	0xe000ed88

0800bc08 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800bc08:	b480      	push	{r7}
 800bc0a:	b085      	sub	sp, #20
 800bc0c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800bc0e:	f3ef 8305 	mrs	r3, IPSR
 800bc12:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800bc14:	68fb      	ldr	r3, [r7, #12]
 800bc16:	2b0f      	cmp	r3, #15
 800bc18:	d915      	bls.n	800bc46 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800bc1a:	4a18      	ldr	r2, [pc, #96]	@ (800bc7c <vPortValidateInterruptPriority+0x74>)
 800bc1c:	68fb      	ldr	r3, [r7, #12]
 800bc1e:	4413      	add	r3, r2
 800bc20:	781b      	ldrb	r3, [r3, #0]
 800bc22:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800bc24:	4b16      	ldr	r3, [pc, #88]	@ (800bc80 <vPortValidateInterruptPriority+0x78>)
 800bc26:	781b      	ldrb	r3, [r3, #0]
 800bc28:	7afa      	ldrb	r2, [r7, #11]
 800bc2a:	429a      	cmp	r2, r3
 800bc2c:	d20b      	bcs.n	800bc46 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800bc2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bc32:	f383 8811 	msr	BASEPRI, r3
 800bc36:	f3bf 8f6f 	isb	sy
 800bc3a:	f3bf 8f4f 	dsb	sy
 800bc3e:	607b      	str	r3, [r7, #4]
}
 800bc40:	bf00      	nop
 800bc42:	bf00      	nop
 800bc44:	e7fd      	b.n	800bc42 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800bc46:	4b0f      	ldr	r3, [pc, #60]	@ (800bc84 <vPortValidateInterruptPriority+0x7c>)
 800bc48:	681b      	ldr	r3, [r3, #0]
 800bc4a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800bc4e:	4b0e      	ldr	r3, [pc, #56]	@ (800bc88 <vPortValidateInterruptPriority+0x80>)
 800bc50:	681b      	ldr	r3, [r3, #0]
 800bc52:	429a      	cmp	r2, r3
 800bc54:	d90b      	bls.n	800bc6e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800bc56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bc5a:	f383 8811 	msr	BASEPRI, r3
 800bc5e:	f3bf 8f6f 	isb	sy
 800bc62:	f3bf 8f4f 	dsb	sy
 800bc66:	603b      	str	r3, [r7, #0]
}
 800bc68:	bf00      	nop
 800bc6a:	bf00      	nop
 800bc6c:	e7fd      	b.n	800bc6a <vPortValidateInterruptPriority+0x62>
	}
 800bc6e:	bf00      	nop
 800bc70:	3714      	adds	r7, #20
 800bc72:	46bd      	mov	sp, r7
 800bc74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc78:	4770      	bx	lr
 800bc7a:	bf00      	nop
 800bc7c:	e000e3f0 	.word	0xe000e3f0
 800bc80:	20001bfc 	.word	0x20001bfc
 800bc84:	e000ed0c 	.word	0xe000ed0c
 800bc88:	20001c00 	.word	0x20001c00

0800bc8c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800bc8c:	b580      	push	{r7, lr}
 800bc8e:	b08a      	sub	sp, #40	@ 0x28
 800bc90:	af00      	add	r7, sp, #0
 800bc92:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800bc94:	2300      	movs	r3, #0
 800bc96:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800bc98:	f7fe fd76 	bl	800a788 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800bc9c:	4b5c      	ldr	r3, [pc, #368]	@ (800be10 <pvPortMalloc+0x184>)
 800bc9e:	681b      	ldr	r3, [r3, #0]
 800bca0:	2b00      	cmp	r3, #0
 800bca2:	d101      	bne.n	800bca8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800bca4:	f000 f924 	bl	800bef0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800bca8:	4b5a      	ldr	r3, [pc, #360]	@ (800be14 <pvPortMalloc+0x188>)
 800bcaa:	681a      	ldr	r2, [r3, #0]
 800bcac:	687b      	ldr	r3, [r7, #4]
 800bcae:	4013      	ands	r3, r2
 800bcb0:	2b00      	cmp	r3, #0
 800bcb2:	f040 8095 	bne.w	800bde0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800bcb6:	687b      	ldr	r3, [r7, #4]
 800bcb8:	2b00      	cmp	r3, #0
 800bcba:	d01e      	beq.n	800bcfa <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800bcbc:	2208      	movs	r2, #8
 800bcbe:	687b      	ldr	r3, [r7, #4]
 800bcc0:	4413      	add	r3, r2
 800bcc2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800bcc4:	687b      	ldr	r3, [r7, #4]
 800bcc6:	f003 0307 	and.w	r3, r3, #7
 800bcca:	2b00      	cmp	r3, #0
 800bccc:	d015      	beq.n	800bcfa <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800bcce:	687b      	ldr	r3, [r7, #4]
 800bcd0:	f023 0307 	bic.w	r3, r3, #7
 800bcd4:	3308      	adds	r3, #8
 800bcd6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800bcd8:	687b      	ldr	r3, [r7, #4]
 800bcda:	f003 0307 	and.w	r3, r3, #7
 800bcde:	2b00      	cmp	r3, #0
 800bce0:	d00b      	beq.n	800bcfa <pvPortMalloc+0x6e>
	__asm volatile
 800bce2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bce6:	f383 8811 	msr	BASEPRI, r3
 800bcea:	f3bf 8f6f 	isb	sy
 800bcee:	f3bf 8f4f 	dsb	sy
 800bcf2:	617b      	str	r3, [r7, #20]
}
 800bcf4:	bf00      	nop
 800bcf6:	bf00      	nop
 800bcf8:	e7fd      	b.n	800bcf6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800bcfa:	687b      	ldr	r3, [r7, #4]
 800bcfc:	2b00      	cmp	r3, #0
 800bcfe:	d06f      	beq.n	800bde0 <pvPortMalloc+0x154>
 800bd00:	4b45      	ldr	r3, [pc, #276]	@ (800be18 <pvPortMalloc+0x18c>)
 800bd02:	681b      	ldr	r3, [r3, #0]
 800bd04:	687a      	ldr	r2, [r7, #4]
 800bd06:	429a      	cmp	r2, r3
 800bd08:	d86a      	bhi.n	800bde0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800bd0a:	4b44      	ldr	r3, [pc, #272]	@ (800be1c <pvPortMalloc+0x190>)
 800bd0c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800bd0e:	4b43      	ldr	r3, [pc, #268]	@ (800be1c <pvPortMalloc+0x190>)
 800bd10:	681b      	ldr	r3, [r3, #0]
 800bd12:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800bd14:	e004      	b.n	800bd20 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800bd16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bd18:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800bd1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bd1c:	681b      	ldr	r3, [r3, #0]
 800bd1e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800bd20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bd22:	685b      	ldr	r3, [r3, #4]
 800bd24:	687a      	ldr	r2, [r7, #4]
 800bd26:	429a      	cmp	r2, r3
 800bd28:	d903      	bls.n	800bd32 <pvPortMalloc+0xa6>
 800bd2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bd2c:	681b      	ldr	r3, [r3, #0]
 800bd2e:	2b00      	cmp	r3, #0
 800bd30:	d1f1      	bne.n	800bd16 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800bd32:	4b37      	ldr	r3, [pc, #220]	@ (800be10 <pvPortMalloc+0x184>)
 800bd34:	681b      	ldr	r3, [r3, #0]
 800bd36:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bd38:	429a      	cmp	r2, r3
 800bd3a:	d051      	beq.n	800bde0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800bd3c:	6a3b      	ldr	r3, [r7, #32]
 800bd3e:	681b      	ldr	r3, [r3, #0]
 800bd40:	2208      	movs	r2, #8
 800bd42:	4413      	add	r3, r2
 800bd44:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800bd46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bd48:	681a      	ldr	r2, [r3, #0]
 800bd4a:	6a3b      	ldr	r3, [r7, #32]
 800bd4c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800bd4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bd50:	685a      	ldr	r2, [r3, #4]
 800bd52:	687b      	ldr	r3, [r7, #4]
 800bd54:	1ad2      	subs	r2, r2, r3
 800bd56:	2308      	movs	r3, #8
 800bd58:	005b      	lsls	r3, r3, #1
 800bd5a:	429a      	cmp	r2, r3
 800bd5c:	d920      	bls.n	800bda0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800bd5e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bd60:	687b      	ldr	r3, [r7, #4]
 800bd62:	4413      	add	r3, r2
 800bd64:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800bd66:	69bb      	ldr	r3, [r7, #24]
 800bd68:	f003 0307 	and.w	r3, r3, #7
 800bd6c:	2b00      	cmp	r3, #0
 800bd6e:	d00b      	beq.n	800bd88 <pvPortMalloc+0xfc>
	__asm volatile
 800bd70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bd74:	f383 8811 	msr	BASEPRI, r3
 800bd78:	f3bf 8f6f 	isb	sy
 800bd7c:	f3bf 8f4f 	dsb	sy
 800bd80:	613b      	str	r3, [r7, #16]
}
 800bd82:	bf00      	nop
 800bd84:	bf00      	nop
 800bd86:	e7fd      	b.n	800bd84 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800bd88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bd8a:	685a      	ldr	r2, [r3, #4]
 800bd8c:	687b      	ldr	r3, [r7, #4]
 800bd8e:	1ad2      	subs	r2, r2, r3
 800bd90:	69bb      	ldr	r3, [r7, #24]
 800bd92:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800bd94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bd96:	687a      	ldr	r2, [r7, #4]
 800bd98:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800bd9a:	69b8      	ldr	r0, [r7, #24]
 800bd9c:	f000 f90a 	bl	800bfb4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800bda0:	4b1d      	ldr	r3, [pc, #116]	@ (800be18 <pvPortMalloc+0x18c>)
 800bda2:	681a      	ldr	r2, [r3, #0]
 800bda4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bda6:	685b      	ldr	r3, [r3, #4]
 800bda8:	1ad3      	subs	r3, r2, r3
 800bdaa:	4a1b      	ldr	r2, [pc, #108]	@ (800be18 <pvPortMalloc+0x18c>)
 800bdac:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800bdae:	4b1a      	ldr	r3, [pc, #104]	@ (800be18 <pvPortMalloc+0x18c>)
 800bdb0:	681a      	ldr	r2, [r3, #0]
 800bdb2:	4b1b      	ldr	r3, [pc, #108]	@ (800be20 <pvPortMalloc+0x194>)
 800bdb4:	681b      	ldr	r3, [r3, #0]
 800bdb6:	429a      	cmp	r2, r3
 800bdb8:	d203      	bcs.n	800bdc2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800bdba:	4b17      	ldr	r3, [pc, #92]	@ (800be18 <pvPortMalloc+0x18c>)
 800bdbc:	681b      	ldr	r3, [r3, #0]
 800bdbe:	4a18      	ldr	r2, [pc, #96]	@ (800be20 <pvPortMalloc+0x194>)
 800bdc0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800bdc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bdc4:	685a      	ldr	r2, [r3, #4]
 800bdc6:	4b13      	ldr	r3, [pc, #76]	@ (800be14 <pvPortMalloc+0x188>)
 800bdc8:	681b      	ldr	r3, [r3, #0]
 800bdca:	431a      	orrs	r2, r3
 800bdcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bdce:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800bdd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bdd2:	2200      	movs	r2, #0
 800bdd4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800bdd6:	4b13      	ldr	r3, [pc, #76]	@ (800be24 <pvPortMalloc+0x198>)
 800bdd8:	681b      	ldr	r3, [r3, #0]
 800bdda:	3301      	adds	r3, #1
 800bddc:	4a11      	ldr	r2, [pc, #68]	@ (800be24 <pvPortMalloc+0x198>)
 800bdde:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800bde0:	f7fe fce0 	bl	800a7a4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800bde4:	69fb      	ldr	r3, [r7, #28]
 800bde6:	f003 0307 	and.w	r3, r3, #7
 800bdea:	2b00      	cmp	r3, #0
 800bdec:	d00b      	beq.n	800be06 <pvPortMalloc+0x17a>
	__asm volatile
 800bdee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bdf2:	f383 8811 	msr	BASEPRI, r3
 800bdf6:	f3bf 8f6f 	isb	sy
 800bdfa:	f3bf 8f4f 	dsb	sy
 800bdfe:	60fb      	str	r3, [r7, #12]
}
 800be00:	bf00      	nop
 800be02:	bf00      	nop
 800be04:	e7fd      	b.n	800be02 <pvPortMalloc+0x176>
	return pvReturn;
 800be06:	69fb      	ldr	r3, [r7, #28]
}
 800be08:	4618      	mov	r0, r3
 800be0a:	3728      	adds	r7, #40	@ 0x28
 800be0c:	46bd      	mov	sp, r7
 800be0e:	bd80      	pop	{r7, pc}
 800be10:	2000580c 	.word	0x2000580c
 800be14:	20005820 	.word	0x20005820
 800be18:	20005810 	.word	0x20005810
 800be1c:	20005804 	.word	0x20005804
 800be20:	20005814 	.word	0x20005814
 800be24:	20005818 	.word	0x20005818

0800be28 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800be28:	b580      	push	{r7, lr}
 800be2a:	b086      	sub	sp, #24
 800be2c:	af00      	add	r7, sp, #0
 800be2e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	2b00      	cmp	r3, #0
 800be38:	d04f      	beq.n	800beda <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800be3a:	2308      	movs	r3, #8
 800be3c:	425b      	negs	r3, r3
 800be3e:	697a      	ldr	r2, [r7, #20]
 800be40:	4413      	add	r3, r2
 800be42:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800be44:	697b      	ldr	r3, [r7, #20]
 800be46:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800be48:	693b      	ldr	r3, [r7, #16]
 800be4a:	685a      	ldr	r2, [r3, #4]
 800be4c:	4b25      	ldr	r3, [pc, #148]	@ (800bee4 <vPortFree+0xbc>)
 800be4e:	681b      	ldr	r3, [r3, #0]
 800be50:	4013      	ands	r3, r2
 800be52:	2b00      	cmp	r3, #0
 800be54:	d10b      	bne.n	800be6e <vPortFree+0x46>
	__asm volatile
 800be56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800be5a:	f383 8811 	msr	BASEPRI, r3
 800be5e:	f3bf 8f6f 	isb	sy
 800be62:	f3bf 8f4f 	dsb	sy
 800be66:	60fb      	str	r3, [r7, #12]
}
 800be68:	bf00      	nop
 800be6a:	bf00      	nop
 800be6c:	e7fd      	b.n	800be6a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800be6e:	693b      	ldr	r3, [r7, #16]
 800be70:	681b      	ldr	r3, [r3, #0]
 800be72:	2b00      	cmp	r3, #0
 800be74:	d00b      	beq.n	800be8e <vPortFree+0x66>
	__asm volatile
 800be76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800be7a:	f383 8811 	msr	BASEPRI, r3
 800be7e:	f3bf 8f6f 	isb	sy
 800be82:	f3bf 8f4f 	dsb	sy
 800be86:	60bb      	str	r3, [r7, #8]
}
 800be88:	bf00      	nop
 800be8a:	bf00      	nop
 800be8c:	e7fd      	b.n	800be8a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800be8e:	693b      	ldr	r3, [r7, #16]
 800be90:	685a      	ldr	r2, [r3, #4]
 800be92:	4b14      	ldr	r3, [pc, #80]	@ (800bee4 <vPortFree+0xbc>)
 800be94:	681b      	ldr	r3, [r3, #0]
 800be96:	4013      	ands	r3, r2
 800be98:	2b00      	cmp	r3, #0
 800be9a:	d01e      	beq.n	800beda <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800be9c:	693b      	ldr	r3, [r7, #16]
 800be9e:	681b      	ldr	r3, [r3, #0]
 800bea0:	2b00      	cmp	r3, #0
 800bea2:	d11a      	bne.n	800beda <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800bea4:	693b      	ldr	r3, [r7, #16]
 800bea6:	685a      	ldr	r2, [r3, #4]
 800bea8:	4b0e      	ldr	r3, [pc, #56]	@ (800bee4 <vPortFree+0xbc>)
 800beaa:	681b      	ldr	r3, [r3, #0]
 800beac:	43db      	mvns	r3, r3
 800beae:	401a      	ands	r2, r3
 800beb0:	693b      	ldr	r3, [r7, #16]
 800beb2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800beb4:	f7fe fc68 	bl	800a788 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800beb8:	693b      	ldr	r3, [r7, #16]
 800beba:	685a      	ldr	r2, [r3, #4]
 800bebc:	4b0a      	ldr	r3, [pc, #40]	@ (800bee8 <vPortFree+0xc0>)
 800bebe:	681b      	ldr	r3, [r3, #0]
 800bec0:	4413      	add	r3, r2
 800bec2:	4a09      	ldr	r2, [pc, #36]	@ (800bee8 <vPortFree+0xc0>)
 800bec4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800bec6:	6938      	ldr	r0, [r7, #16]
 800bec8:	f000 f874 	bl	800bfb4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800becc:	4b07      	ldr	r3, [pc, #28]	@ (800beec <vPortFree+0xc4>)
 800bece:	681b      	ldr	r3, [r3, #0]
 800bed0:	3301      	adds	r3, #1
 800bed2:	4a06      	ldr	r2, [pc, #24]	@ (800beec <vPortFree+0xc4>)
 800bed4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800bed6:	f7fe fc65 	bl	800a7a4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800beda:	bf00      	nop
 800bedc:	3718      	adds	r7, #24
 800bede:	46bd      	mov	sp, r7
 800bee0:	bd80      	pop	{r7, pc}
 800bee2:	bf00      	nop
 800bee4:	20005820 	.word	0x20005820
 800bee8:	20005810 	.word	0x20005810
 800beec:	2000581c 	.word	0x2000581c

0800bef0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800bef0:	b480      	push	{r7}
 800bef2:	b085      	sub	sp, #20
 800bef4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800bef6:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800befa:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800befc:	4b27      	ldr	r3, [pc, #156]	@ (800bf9c <prvHeapInit+0xac>)
 800befe:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800bf00:	68fb      	ldr	r3, [r7, #12]
 800bf02:	f003 0307 	and.w	r3, r3, #7
 800bf06:	2b00      	cmp	r3, #0
 800bf08:	d00c      	beq.n	800bf24 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800bf0a:	68fb      	ldr	r3, [r7, #12]
 800bf0c:	3307      	adds	r3, #7
 800bf0e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800bf10:	68fb      	ldr	r3, [r7, #12]
 800bf12:	f023 0307 	bic.w	r3, r3, #7
 800bf16:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800bf18:	68ba      	ldr	r2, [r7, #8]
 800bf1a:	68fb      	ldr	r3, [r7, #12]
 800bf1c:	1ad3      	subs	r3, r2, r3
 800bf1e:	4a1f      	ldr	r2, [pc, #124]	@ (800bf9c <prvHeapInit+0xac>)
 800bf20:	4413      	add	r3, r2
 800bf22:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800bf24:	68fb      	ldr	r3, [r7, #12]
 800bf26:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800bf28:	4a1d      	ldr	r2, [pc, #116]	@ (800bfa0 <prvHeapInit+0xb0>)
 800bf2a:	687b      	ldr	r3, [r7, #4]
 800bf2c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800bf2e:	4b1c      	ldr	r3, [pc, #112]	@ (800bfa0 <prvHeapInit+0xb0>)
 800bf30:	2200      	movs	r2, #0
 800bf32:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800bf34:	687b      	ldr	r3, [r7, #4]
 800bf36:	68ba      	ldr	r2, [r7, #8]
 800bf38:	4413      	add	r3, r2
 800bf3a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800bf3c:	2208      	movs	r2, #8
 800bf3e:	68fb      	ldr	r3, [r7, #12]
 800bf40:	1a9b      	subs	r3, r3, r2
 800bf42:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800bf44:	68fb      	ldr	r3, [r7, #12]
 800bf46:	f023 0307 	bic.w	r3, r3, #7
 800bf4a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800bf4c:	68fb      	ldr	r3, [r7, #12]
 800bf4e:	4a15      	ldr	r2, [pc, #84]	@ (800bfa4 <prvHeapInit+0xb4>)
 800bf50:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800bf52:	4b14      	ldr	r3, [pc, #80]	@ (800bfa4 <prvHeapInit+0xb4>)
 800bf54:	681b      	ldr	r3, [r3, #0]
 800bf56:	2200      	movs	r2, #0
 800bf58:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800bf5a:	4b12      	ldr	r3, [pc, #72]	@ (800bfa4 <prvHeapInit+0xb4>)
 800bf5c:	681b      	ldr	r3, [r3, #0]
 800bf5e:	2200      	movs	r2, #0
 800bf60:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800bf62:	687b      	ldr	r3, [r7, #4]
 800bf64:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800bf66:	683b      	ldr	r3, [r7, #0]
 800bf68:	68fa      	ldr	r2, [r7, #12]
 800bf6a:	1ad2      	subs	r2, r2, r3
 800bf6c:	683b      	ldr	r3, [r7, #0]
 800bf6e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800bf70:	4b0c      	ldr	r3, [pc, #48]	@ (800bfa4 <prvHeapInit+0xb4>)
 800bf72:	681a      	ldr	r2, [r3, #0]
 800bf74:	683b      	ldr	r3, [r7, #0]
 800bf76:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800bf78:	683b      	ldr	r3, [r7, #0]
 800bf7a:	685b      	ldr	r3, [r3, #4]
 800bf7c:	4a0a      	ldr	r2, [pc, #40]	@ (800bfa8 <prvHeapInit+0xb8>)
 800bf7e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800bf80:	683b      	ldr	r3, [r7, #0]
 800bf82:	685b      	ldr	r3, [r3, #4]
 800bf84:	4a09      	ldr	r2, [pc, #36]	@ (800bfac <prvHeapInit+0xbc>)
 800bf86:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800bf88:	4b09      	ldr	r3, [pc, #36]	@ (800bfb0 <prvHeapInit+0xc0>)
 800bf8a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800bf8e:	601a      	str	r2, [r3, #0]
}
 800bf90:	bf00      	nop
 800bf92:	3714      	adds	r7, #20
 800bf94:	46bd      	mov	sp, r7
 800bf96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf9a:	4770      	bx	lr
 800bf9c:	20001c04 	.word	0x20001c04
 800bfa0:	20005804 	.word	0x20005804
 800bfa4:	2000580c 	.word	0x2000580c
 800bfa8:	20005814 	.word	0x20005814
 800bfac:	20005810 	.word	0x20005810
 800bfb0:	20005820 	.word	0x20005820

0800bfb4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800bfb4:	b480      	push	{r7}
 800bfb6:	b085      	sub	sp, #20
 800bfb8:	af00      	add	r7, sp, #0
 800bfba:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800bfbc:	4b28      	ldr	r3, [pc, #160]	@ (800c060 <prvInsertBlockIntoFreeList+0xac>)
 800bfbe:	60fb      	str	r3, [r7, #12]
 800bfc0:	e002      	b.n	800bfc8 <prvInsertBlockIntoFreeList+0x14>
 800bfc2:	68fb      	ldr	r3, [r7, #12]
 800bfc4:	681b      	ldr	r3, [r3, #0]
 800bfc6:	60fb      	str	r3, [r7, #12]
 800bfc8:	68fb      	ldr	r3, [r7, #12]
 800bfca:	681b      	ldr	r3, [r3, #0]
 800bfcc:	687a      	ldr	r2, [r7, #4]
 800bfce:	429a      	cmp	r2, r3
 800bfd0:	d8f7      	bhi.n	800bfc2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800bfd2:	68fb      	ldr	r3, [r7, #12]
 800bfd4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800bfd6:	68fb      	ldr	r3, [r7, #12]
 800bfd8:	685b      	ldr	r3, [r3, #4]
 800bfda:	68ba      	ldr	r2, [r7, #8]
 800bfdc:	4413      	add	r3, r2
 800bfde:	687a      	ldr	r2, [r7, #4]
 800bfe0:	429a      	cmp	r2, r3
 800bfe2:	d108      	bne.n	800bff6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800bfe4:	68fb      	ldr	r3, [r7, #12]
 800bfe6:	685a      	ldr	r2, [r3, #4]
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	685b      	ldr	r3, [r3, #4]
 800bfec:	441a      	add	r2, r3
 800bfee:	68fb      	ldr	r3, [r7, #12]
 800bff0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800bff2:	68fb      	ldr	r3, [r7, #12]
 800bff4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800bff6:	687b      	ldr	r3, [r7, #4]
 800bff8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800bffa:	687b      	ldr	r3, [r7, #4]
 800bffc:	685b      	ldr	r3, [r3, #4]
 800bffe:	68ba      	ldr	r2, [r7, #8]
 800c000:	441a      	add	r2, r3
 800c002:	68fb      	ldr	r3, [r7, #12]
 800c004:	681b      	ldr	r3, [r3, #0]
 800c006:	429a      	cmp	r2, r3
 800c008:	d118      	bne.n	800c03c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800c00a:	68fb      	ldr	r3, [r7, #12]
 800c00c:	681a      	ldr	r2, [r3, #0]
 800c00e:	4b15      	ldr	r3, [pc, #84]	@ (800c064 <prvInsertBlockIntoFreeList+0xb0>)
 800c010:	681b      	ldr	r3, [r3, #0]
 800c012:	429a      	cmp	r2, r3
 800c014:	d00d      	beq.n	800c032 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800c016:	687b      	ldr	r3, [r7, #4]
 800c018:	685a      	ldr	r2, [r3, #4]
 800c01a:	68fb      	ldr	r3, [r7, #12]
 800c01c:	681b      	ldr	r3, [r3, #0]
 800c01e:	685b      	ldr	r3, [r3, #4]
 800c020:	441a      	add	r2, r3
 800c022:	687b      	ldr	r3, [r7, #4]
 800c024:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800c026:	68fb      	ldr	r3, [r7, #12]
 800c028:	681b      	ldr	r3, [r3, #0]
 800c02a:	681a      	ldr	r2, [r3, #0]
 800c02c:	687b      	ldr	r3, [r7, #4]
 800c02e:	601a      	str	r2, [r3, #0]
 800c030:	e008      	b.n	800c044 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800c032:	4b0c      	ldr	r3, [pc, #48]	@ (800c064 <prvInsertBlockIntoFreeList+0xb0>)
 800c034:	681a      	ldr	r2, [r3, #0]
 800c036:	687b      	ldr	r3, [r7, #4]
 800c038:	601a      	str	r2, [r3, #0]
 800c03a:	e003      	b.n	800c044 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800c03c:	68fb      	ldr	r3, [r7, #12]
 800c03e:	681a      	ldr	r2, [r3, #0]
 800c040:	687b      	ldr	r3, [r7, #4]
 800c042:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800c044:	68fa      	ldr	r2, [r7, #12]
 800c046:	687b      	ldr	r3, [r7, #4]
 800c048:	429a      	cmp	r2, r3
 800c04a:	d002      	beq.n	800c052 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800c04c:	68fb      	ldr	r3, [r7, #12]
 800c04e:	687a      	ldr	r2, [r7, #4]
 800c050:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c052:	bf00      	nop
 800c054:	3714      	adds	r7, #20
 800c056:	46bd      	mov	sp, r7
 800c058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c05c:	4770      	bx	lr
 800c05e:	bf00      	nop
 800c060:	20005804 	.word	0x20005804
 800c064:	2000580c 	.word	0x2000580c

0800c068 <std>:
 800c068:	2300      	movs	r3, #0
 800c06a:	b510      	push	{r4, lr}
 800c06c:	4604      	mov	r4, r0
 800c06e:	e9c0 3300 	strd	r3, r3, [r0]
 800c072:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c076:	6083      	str	r3, [r0, #8]
 800c078:	8181      	strh	r1, [r0, #12]
 800c07a:	6643      	str	r3, [r0, #100]	@ 0x64
 800c07c:	81c2      	strh	r2, [r0, #14]
 800c07e:	6183      	str	r3, [r0, #24]
 800c080:	4619      	mov	r1, r3
 800c082:	2208      	movs	r2, #8
 800c084:	305c      	adds	r0, #92	@ 0x5c
 800c086:	f000 f9f9 	bl	800c47c <memset>
 800c08a:	4b0d      	ldr	r3, [pc, #52]	@ (800c0c0 <std+0x58>)
 800c08c:	6263      	str	r3, [r4, #36]	@ 0x24
 800c08e:	4b0d      	ldr	r3, [pc, #52]	@ (800c0c4 <std+0x5c>)
 800c090:	62a3      	str	r3, [r4, #40]	@ 0x28
 800c092:	4b0d      	ldr	r3, [pc, #52]	@ (800c0c8 <std+0x60>)
 800c094:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800c096:	4b0d      	ldr	r3, [pc, #52]	@ (800c0cc <std+0x64>)
 800c098:	6323      	str	r3, [r4, #48]	@ 0x30
 800c09a:	4b0d      	ldr	r3, [pc, #52]	@ (800c0d0 <std+0x68>)
 800c09c:	6224      	str	r4, [r4, #32]
 800c09e:	429c      	cmp	r4, r3
 800c0a0:	d006      	beq.n	800c0b0 <std+0x48>
 800c0a2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800c0a6:	4294      	cmp	r4, r2
 800c0a8:	d002      	beq.n	800c0b0 <std+0x48>
 800c0aa:	33d0      	adds	r3, #208	@ 0xd0
 800c0ac:	429c      	cmp	r4, r3
 800c0ae:	d105      	bne.n	800c0bc <std+0x54>
 800c0b0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800c0b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c0b8:	f000 bae0 	b.w	800c67c <__retarget_lock_init_recursive>
 800c0bc:	bd10      	pop	{r4, pc}
 800c0be:	bf00      	nop
 800c0c0:	0800c2cd 	.word	0x0800c2cd
 800c0c4:	0800c2ef 	.word	0x0800c2ef
 800c0c8:	0800c327 	.word	0x0800c327
 800c0cc:	0800c34b 	.word	0x0800c34b
 800c0d0:	20005824 	.word	0x20005824

0800c0d4 <stdio_exit_handler>:
 800c0d4:	4a02      	ldr	r2, [pc, #8]	@ (800c0e0 <stdio_exit_handler+0xc>)
 800c0d6:	4903      	ldr	r1, [pc, #12]	@ (800c0e4 <stdio_exit_handler+0x10>)
 800c0d8:	4803      	ldr	r0, [pc, #12]	@ (800c0e8 <stdio_exit_handler+0x14>)
 800c0da:	f000 b869 	b.w	800c1b0 <_fwalk_sglue>
 800c0de:	bf00      	nop
 800c0e0:	200000dc 	.word	0x200000dc
 800c0e4:	0800cf49 	.word	0x0800cf49
 800c0e8:	200000ec 	.word	0x200000ec

0800c0ec <cleanup_stdio>:
 800c0ec:	6841      	ldr	r1, [r0, #4]
 800c0ee:	4b0c      	ldr	r3, [pc, #48]	@ (800c120 <cleanup_stdio+0x34>)
 800c0f0:	4299      	cmp	r1, r3
 800c0f2:	b510      	push	{r4, lr}
 800c0f4:	4604      	mov	r4, r0
 800c0f6:	d001      	beq.n	800c0fc <cleanup_stdio+0x10>
 800c0f8:	f000 ff26 	bl	800cf48 <_fflush_r>
 800c0fc:	68a1      	ldr	r1, [r4, #8]
 800c0fe:	4b09      	ldr	r3, [pc, #36]	@ (800c124 <cleanup_stdio+0x38>)
 800c100:	4299      	cmp	r1, r3
 800c102:	d002      	beq.n	800c10a <cleanup_stdio+0x1e>
 800c104:	4620      	mov	r0, r4
 800c106:	f000 ff1f 	bl	800cf48 <_fflush_r>
 800c10a:	68e1      	ldr	r1, [r4, #12]
 800c10c:	4b06      	ldr	r3, [pc, #24]	@ (800c128 <cleanup_stdio+0x3c>)
 800c10e:	4299      	cmp	r1, r3
 800c110:	d004      	beq.n	800c11c <cleanup_stdio+0x30>
 800c112:	4620      	mov	r0, r4
 800c114:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c118:	f000 bf16 	b.w	800cf48 <_fflush_r>
 800c11c:	bd10      	pop	{r4, pc}
 800c11e:	bf00      	nop
 800c120:	20005824 	.word	0x20005824
 800c124:	2000588c 	.word	0x2000588c
 800c128:	200058f4 	.word	0x200058f4

0800c12c <global_stdio_init.part.0>:
 800c12c:	b510      	push	{r4, lr}
 800c12e:	4b0b      	ldr	r3, [pc, #44]	@ (800c15c <global_stdio_init.part.0+0x30>)
 800c130:	4c0b      	ldr	r4, [pc, #44]	@ (800c160 <global_stdio_init.part.0+0x34>)
 800c132:	4a0c      	ldr	r2, [pc, #48]	@ (800c164 <global_stdio_init.part.0+0x38>)
 800c134:	601a      	str	r2, [r3, #0]
 800c136:	4620      	mov	r0, r4
 800c138:	2200      	movs	r2, #0
 800c13a:	2104      	movs	r1, #4
 800c13c:	f7ff ff94 	bl	800c068 <std>
 800c140:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800c144:	2201      	movs	r2, #1
 800c146:	2109      	movs	r1, #9
 800c148:	f7ff ff8e 	bl	800c068 <std>
 800c14c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800c150:	2202      	movs	r2, #2
 800c152:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c156:	2112      	movs	r1, #18
 800c158:	f7ff bf86 	b.w	800c068 <std>
 800c15c:	2000595c 	.word	0x2000595c
 800c160:	20005824 	.word	0x20005824
 800c164:	0800c0d5 	.word	0x0800c0d5

0800c168 <__sfp_lock_acquire>:
 800c168:	4801      	ldr	r0, [pc, #4]	@ (800c170 <__sfp_lock_acquire+0x8>)
 800c16a:	f000 ba88 	b.w	800c67e <__retarget_lock_acquire_recursive>
 800c16e:	bf00      	nop
 800c170:	20005965 	.word	0x20005965

0800c174 <__sfp_lock_release>:
 800c174:	4801      	ldr	r0, [pc, #4]	@ (800c17c <__sfp_lock_release+0x8>)
 800c176:	f000 ba83 	b.w	800c680 <__retarget_lock_release_recursive>
 800c17a:	bf00      	nop
 800c17c:	20005965 	.word	0x20005965

0800c180 <__sinit>:
 800c180:	b510      	push	{r4, lr}
 800c182:	4604      	mov	r4, r0
 800c184:	f7ff fff0 	bl	800c168 <__sfp_lock_acquire>
 800c188:	6a23      	ldr	r3, [r4, #32]
 800c18a:	b11b      	cbz	r3, 800c194 <__sinit+0x14>
 800c18c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c190:	f7ff bff0 	b.w	800c174 <__sfp_lock_release>
 800c194:	4b04      	ldr	r3, [pc, #16]	@ (800c1a8 <__sinit+0x28>)
 800c196:	6223      	str	r3, [r4, #32]
 800c198:	4b04      	ldr	r3, [pc, #16]	@ (800c1ac <__sinit+0x2c>)
 800c19a:	681b      	ldr	r3, [r3, #0]
 800c19c:	2b00      	cmp	r3, #0
 800c19e:	d1f5      	bne.n	800c18c <__sinit+0xc>
 800c1a0:	f7ff ffc4 	bl	800c12c <global_stdio_init.part.0>
 800c1a4:	e7f2      	b.n	800c18c <__sinit+0xc>
 800c1a6:	bf00      	nop
 800c1a8:	0800c0ed 	.word	0x0800c0ed
 800c1ac:	2000595c 	.word	0x2000595c

0800c1b0 <_fwalk_sglue>:
 800c1b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c1b4:	4607      	mov	r7, r0
 800c1b6:	4688      	mov	r8, r1
 800c1b8:	4614      	mov	r4, r2
 800c1ba:	2600      	movs	r6, #0
 800c1bc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c1c0:	f1b9 0901 	subs.w	r9, r9, #1
 800c1c4:	d505      	bpl.n	800c1d2 <_fwalk_sglue+0x22>
 800c1c6:	6824      	ldr	r4, [r4, #0]
 800c1c8:	2c00      	cmp	r4, #0
 800c1ca:	d1f7      	bne.n	800c1bc <_fwalk_sglue+0xc>
 800c1cc:	4630      	mov	r0, r6
 800c1ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c1d2:	89ab      	ldrh	r3, [r5, #12]
 800c1d4:	2b01      	cmp	r3, #1
 800c1d6:	d907      	bls.n	800c1e8 <_fwalk_sglue+0x38>
 800c1d8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c1dc:	3301      	adds	r3, #1
 800c1de:	d003      	beq.n	800c1e8 <_fwalk_sglue+0x38>
 800c1e0:	4629      	mov	r1, r5
 800c1e2:	4638      	mov	r0, r7
 800c1e4:	47c0      	blx	r8
 800c1e6:	4306      	orrs	r6, r0
 800c1e8:	3568      	adds	r5, #104	@ 0x68
 800c1ea:	e7e9      	b.n	800c1c0 <_fwalk_sglue+0x10>

0800c1ec <iprintf>:
 800c1ec:	b40f      	push	{r0, r1, r2, r3}
 800c1ee:	b507      	push	{r0, r1, r2, lr}
 800c1f0:	4906      	ldr	r1, [pc, #24]	@ (800c20c <iprintf+0x20>)
 800c1f2:	ab04      	add	r3, sp, #16
 800c1f4:	6808      	ldr	r0, [r1, #0]
 800c1f6:	f853 2b04 	ldr.w	r2, [r3], #4
 800c1fa:	6881      	ldr	r1, [r0, #8]
 800c1fc:	9301      	str	r3, [sp, #4]
 800c1fe:	f000 fb79 	bl	800c8f4 <_vfiprintf_r>
 800c202:	b003      	add	sp, #12
 800c204:	f85d eb04 	ldr.w	lr, [sp], #4
 800c208:	b004      	add	sp, #16
 800c20a:	4770      	bx	lr
 800c20c:	200000e8 	.word	0x200000e8

0800c210 <_puts_r>:
 800c210:	6a03      	ldr	r3, [r0, #32]
 800c212:	b570      	push	{r4, r5, r6, lr}
 800c214:	6884      	ldr	r4, [r0, #8]
 800c216:	4605      	mov	r5, r0
 800c218:	460e      	mov	r6, r1
 800c21a:	b90b      	cbnz	r3, 800c220 <_puts_r+0x10>
 800c21c:	f7ff ffb0 	bl	800c180 <__sinit>
 800c220:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c222:	07db      	lsls	r3, r3, #31
 800c224:	d405      	bmi.n	800c232 <_puts_r+0x22>
 800c226:	89a3      	ldrh	r3, [r4, #12]
 800c228:	0598      	lsls	r0, r3, #22
 800c22a:	d402      	bmi.n	800c232 <_puts_r+0x22>
 800c22c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c22e:	f000 fa26 	bl	800c67e <__retarget_lock_acquire_recursive>
 800c232:	89a3      	ldrh	r3, [r4, #12]
 800c234:	0719      	lsls	r1, r3, #28
 800c236:	d502      	bpl.n	800c23e <_puts_r+0x2e>
 800c238:	6923      	ldr	r3, [r4, #16]
 800c23a:	2b00      	cmp	r3, #0
 800c23c:	d135      	bne.n	800c2aa <_puts_r+0x9a>
 800c23e:	4621      	mov	r1, r4
 800c240:	4628      	mov	r0, r5
 800c242:	f000 f8c5 	bl	800c3d0 <__swsetup_r>
 800c246:	b380      	cbz	r0, 800c2aa <_puts_r+0x9a>
 800c248:	f04f 35ff 	mov.w	r5, #4294967295
 800c24c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c24e:	07da      	lsls	r2, r3, #31
 800c250:	d405      	bmi.n	800c25e <_puts_r+0x4e>
 800c252:	89a3      	ldrh	r3, [r4, #12]
 800c254:	059b      	lsls	r3, r3, #22
 800c256:	d402      	bmi.n	800c25e <_puts_r+0x4e>
 800c258:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c25a:	f000 fa11 	bl	800c680 <__retarget_lock_release_recursive>
 800c25e:	4628      	mov	r0, r5
 800c260:	bd70      	pop	{r4, r5, r6, pc}
 800c262:	2b00      	cmp	r3, #0
 800c264:	da04      	bge.n	800c270 <_puts_r+0x60>
 800c266:	69a2      	ldr	r2, [r4, #24]
 800c268:	429a      	cmp	r2, r3
 800c26a:	dc17      	bgt.n	800c29c <_puts_r+0x8c>
 800c26c:	290a      	cmp	r1, #10
 800c26e:	d015      	beq.n	800c29c <_puts_r+0x8c>
 800c270:	6823      	ldr	r3, [r4, #0]
 800c272:	1c5a      	adds	r2, r3, #1
 800c274:	6022      	str	r2, [r4, #0]
 800c276:	7019      	strb	r1, [r3, #0]
 800c278:	68a3      	ldr	r3, [r4, #8]
 800c27a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800c27e:	3b01      	subs	r3, #1
 800c280:	60a3      	str	r3, [r4, #8]
 800c282:	2900      	cmp	r1, #0
 800c284:	d1ed      	bne.n	800c262 <_puts_r+0x52>
 800c286:	2b00      	cmp	r3, #0
 800c288:	da11      	bge.n	800c2ae <_puts_r+0x9e>
 800c28a:	4622      	mov	r2, r4
 800c28c:	210a      	movs	r1, #10
 800c28e:	4628      	mov	r0, r5
 800c290:	f000 f85f 	bl	800c352 <__swbuf_r>
 800c294:	3001      	adds	r0, #1
 800c296:	d0d7      	beq.n	800c248 <_puts_r+0x38>
 800c298:	250a      	movs	r5, #10
 800c29a:	e7d7      	b.n	800c24c <_puts_r+0x3c>
 800c29c:	4622      	mov	r2, r4
 800c29e:	4628      	mov	r0, r5
 800c2a0:	f000 f857 	bl	800c352 <__swbuf_r>
 800c2a4:	3001      	adds	r0, #1
 800c2a6:	d1e7      	bne.n	800c278 <_puts_r+0x68>
 800c2a8:	e7ce      	b.n	800c248 <_puts_r+0x38>
 800c2aa:	3e01      	subs	r6, #1
 800c2ac:	e7e4      	b.n	800c278 <_puts_r+0x68>
 800c2ae:	6823      	ldr	r3, [r4, #0]
 800c2b0:	1c5a      	adds	r2, r3, #1
 800c2b2:	6022      	str	r2, [r4, #0]
 800c2b4:	220a      	movs	r2, #10
 800c2b6:	701a      	strb	r2, [r3, #0]
 800c2b8:	e7ee      	b.n	800c298 <_puts_r+0x88>
	...

0800c2bc <puts>:
 800c2bc:	4b02      	ldr	r3, [pc, #8]	@ (800c2c8 <puts+0xc>)
 800c2be:	4601      	mov	r1, r0
 800c2c0:	6818      	ldr	r0, [r3, #0]
 800c2c2:	f7ff bfa5 	b.w	800c210 <_puts_r>
 800c2c6:	bf00      	nop
 800c2c8:	200000e8 	.word	0x200000e8

0800c2cc <__sread>:
 800c2cc:	b510      	push	{r4, lr}
 800c2ce:	460c      	mov	r4, r1
 800c2d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c2d4:	f000 f984 	bl	800c5e0 <_read_r>
 800c2d8:	2800      	cmp	r0, #0
 800c2da:	bfab      	itete	ge
 800c2dc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800c2de:	89a3      	ldrhlt	r3, [r4, #12]
 800c2e0:	181b      	addge	r3, r3, r0
 800c2e2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800c2e6:	bfac      	ite	ge
 800c2e8:	6563      	strge	r3, [r4, #84]	@ 0x54
 800c2ea:	81a3      	strhlt	r3, [r4, #12]
 800c2ec:	bd10      	pop	{r4, pc}

0800c2ee <__swrite>:
 800c2ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c2f2:	461f      	mov	r7, r3
 800c2f4:	898b      	ldrh	r3, [r1, #12]
 800c2f6:	05db      	lsls	r3, r3, #23
 800c2f8:	4605      	mov	r5, r0
 800c2fa:	460c      	mov	r4, r1
 800c2fc:	4616      	mov	r6, r2
 800c2fe:	d505      	bpl.n	800c30c <__swrite+0x1e>
 800c300:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c304:	2302      	movs	r3, #2
 800c306:	2200      	movs	r2, #0
 800c308:	f000 f958 	bl	800c5bc <_lseek_r>
 800c30c:	89a3      	ldrh	r3, [r4, #12]
 800c30e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c312:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800c316:	81a3      	strh	r3, [r4, #12]
 800c318:	4632      	mov	r2, r6
 800c31a:	463b      	mov	r3, r7
 800c31c:	4628      	mov	r0, r5
 800c31e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c322:	f000 b96f 	b.w	800c604 <_write_r>

0800c326 <__sseek>:
 800c326:	b510      	push	{r4, lr}
 800c328:	460c      	mov	r4, r1
 800c32a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c32e:	f000 f945 	bl	800c5bc <_lseek_r>
 800c332:	1c43      	adds	r3, r0, #1
 800c334:	89a3      	ldrh	r3, [r4, #12]
 800c336:	bf15      	itete	ne
 800c338:	6560      	strne	r0, [r4, #84]	@ 0x54
 800c33a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800c33e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800c342:	81a3      	strheq	r3, [r4, #12]
 800c344:	bf18      	it	ne
 800c346:	81a3      	strhne	r3, [r4, #12]
 800c348:	bd10      	pop	{r4, pc}

0800c34a <__sclose>:
 800c34a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c34e:	f000 b8cf 	b.w	800c4f0 <_close_r>

0800c352 <__swbuf_r>:
 800c352:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c354:	460e      	mov	r6, r1
 800c356:	4614      	mov	r4, r2
 800c358:	4605      	mov	r5, r0
 800c35a:	b118      	cbz	r0, 800c364 <__swbuf_r+0x12>
 800c35c:	6a03      	ldr	r3, [r0, #32]
 800c35e:	b90b      	cbnz	r3, 800c364 <__swbuf_r+0x12>
 800c360:	f7ff ff0e 	bl	800c180 <__sinit>
 800c364:	69a3      	ldr	r3, [r4, #24]
 800c366:	60a3      	str	r3, [r4, #8]
 800c368:	89a3      	ldrh	r3, [r4, #12]
 800c36a:	071a      	lsls	r2, r3, #28
 800c36c:	d501      	bpl.n	800c372 <__swbuf_r+0x20>
 800c36e:	6923      	ldr	r3, [r4, #16]
 800c370:	b943      	cbnz	r3, 800c384 <__swbuf_r+0x32>
 800c372:	4621      	mov	r1, r4
 800c374:	4628      	mov	r0, r5
 800c376:	f000 f82b 	bl	800c3d0 <__swsetup_r>
 800c37a:	b118      	cbz	r0, 800c384 <__swbuf_r+0x32>
 800c37c:	f04f 37ff 	mov.w	r7, #4294967295
 800c380:	4638      	mov	r0, r7
 800c382:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c384:	6823      	ldr	r3, [r4, #0]
 800c386:	6922      	ldr	r2, [r4, #16]
 800c388:	1a98      	subs	r0, r3, r2
 800c38a:	6963      	ldr	r3, [r4, #20]
 800c38c:	b2f6      	uxtb	r6, r6
 800c38e:	4283      	cmp	r3, r0
 800c390:	4637      	mov	r7, r6
 800c392:	dc05      	bgt.n	800c3a0 <__swbuf_r+0x4e>
 800c394:	4621      	mov	r1, r4
 800c396:	4628      	mov	r0, r5
 800c398:	f000 fdd6 	bl	800cf48 <_fflush_r>
 800c39c:	2800      	cmp	r0, #0
 800c39e:	d1ed      	bne.n	800c37c <__swbuf_r+0x2a>
 800c3a0:	68a3      	ldr	r3, [r4, #8]
 800c3a2:	3b01      	subs	r3, #1
 800c3a4:	60a3      	str	r3, [r4, #8]
 800c3a6:	6823      	ldr	r3, [r4, #0]
 800c3a8:	1c5a      	adds	r2, r3, #1
 800c3aa:	6022      	str	r2, [r4, #0]
 800c3ac:	701e      	strb	r6, [r3, #0]
 800c3ae:	6962      	ldr	r2, [r4, #20]
 800c3b0:	1c43      	adds	r3, r0, #1
 800c3b2:	429a      	cmp	r2, r3
 800c3b4:	d004      	beq.n	800c3c0 <__swbuf_r+0x6e>
 800c3b6:	89a3      	ldrh	r3, [r4, #12]
 800c3b8:	07db      	lsls	r3, r3, #31
 800c3ba:	d5e1      	bpl.n	800c380 <__swbuf_r+0x2e>
 800c3bc:	2e0a      	cmp	r6, #10
 800c3be:	d1df      	bne.n	800c380 <__swbuf_r+0x2e>
 800c3c0:	4621      	mov	r1, r4
 800c3c2:	4628      	mov	r0, r5
 800c3c4:	f000 fdc0 	bl	800cf48 <_fflush_r>
 800c3c8:	2800      	cmp	r0, #0
 800c3ca:	d0d9      	beq.n	800c380 <__swbuf_r+0x2e>
 800c3cc:	e7d6      	b.n	800c37c <__swbuf_r+0x2a>
	...

0800c3d0 <__swsetup_r>:
 800c3d0:	b538      	push	{r3, r4, r5, lr}
 800c3d2:	4b29      	ldr	r3, [pc, #164]	@ (800c478 <__swsetup_r+0xa8>)
 800c3d4:	4605      	mov	r5, r0
 800c3d6:	6818      	ldr	r0, [r3, #0]
 800c3d8:	460c      	mov	r4, r1
 800c3da:	b118      	cbz	r0, 800c3e4 <__swsetup_r+0x14>
 800c3dc:	6a03      	ldr	r3, [r0, #32]
 800c3de:	b90b      	cbnz	r3, 800c3e4 <__swsetup_r+0x14>
 800c3e0:	f7ff fece 	bl	800c180 <__sinit>
 800c3e4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c3e8:	0719      	lsls	r1, r3, #28
 800c3ea:	d422      	bmi.n	800c432 <__swsetup_r+0x62>
 800c3ec:	06da      	lsls	r2, r3, #27
 800c3ee:	d407      	bmi.n	800c400 <__swsetup_r+0x30>
 800c3f0:	2209      	movs	r2, #9
 800c3f2:	602a      	str	r2, [r5, #0]
 800c3f4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c3f8:	81a3      	strh	r3, [r4, #12]
 800c3fa:	f04f 30ff 	mov.w	r0, #4294967295
 800c3fe:	e033      	b.n	800c468 <__swsetup_r+0x98>
 800c400:	0758      	lsls	r0, r3, #29
 800c402:	d512      	bpl.n	800c42a <__swsetup_r+0x5a>
 800c404:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c406:	b141      	cbz	r1, 800c41a <__swsetup_r+0x4a>
 800c408:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c40c:	4299      	cmp	r1, r3
 800c40e:	d002      	beq.n	800c416 <__swsetup_r+0x46>
 800c410:	4628      	mov	r0, r5
 800c412:	f000 f94d 	bl	800c6b0 <_free_r>
 800c416:	2300      	movs	r3, #0
 800c418:	6363      	str	r3, [r4, #52]	@ 0x34
 800c41a:	89a3      	ldrh	r3, [r4, #12]
 800c41c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800c420:	81a3      	strh	r3, [r4, #12]
 800c422:	2300      	movs	r3, #0
 800c424:	6063      	str	r3, [r4, #4]
 800c426:	6923      	ldr	r3, [r4, #16]
 800c428:	6023      	str	r3, [r4, #0]
 800c42a:	89a3      	ldrh	r3, [r4, #12]
 800c42c:	f043 0308 	orr.w	r3, r3, #8
 800c430:	81a3      	strh	r3, [r4, #12]
 800c432:	6923      	ldr	r3, [r4, #16]
 800c434:	b94b      	cbnz	r3, 800c44a <__swsetup_r+0x7a>
 800c436:	89a3      	ldrh	r3, [r4, #12]
 800c438:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800c43c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c440:	d003      	beq.n	800c44a <__swsetup_r+0x7a>
 800c442:	4621      	mov	r1, r4
 800c444:	4628      	mov	r0, r5
 800c446:	f000 fdcd 	bl	800cfe4 <__smakebuf_r>
 800c44a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c44e:	f013 0201 	ands.w	r2, r3, #1
 800c452:	d00a      	beq.n	800c46a <__swsetup_r+0x9a>
 800c454:	2200      	movs	r2, #0
 800c456:	60a2      	str	r2, [r4, #8]
 800c458:	6962      	ldr	r2, [r4, #20]
 800c45a:	4252      	negs	r2, r2
 800c45c:	61a2      	str	r2, [r4, #24]
 800c45e:	6922      	ldr	r2, [r4, #16]
 800c460:	b942      	cbnz	r2, 800c474 <__swsetup_r+0xa4>
 800c462:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800c466:	d1c5      	bne.n	800c3f4 <__swsetup_r+0x24>
 800c468:	bd38      	pop	{r3, r4, r5, pc}
 800c46a:	0799      	lsls	r1, r3, #30
 800c46c:	bf58      	it	pl
 800c46e:	6962      	ldrpl	r2, [r4, #20]
 800c470:	60a2      	str	r2, [r4, #8]
 800c472:	e7f4      	b.n	800c45e <__swsetup_r+0x8e>
 800c474:	2000      	movs	r0, #0
 800c476:	e7f7      	b.n	800c468 <__swsetup_r+0x98>
 800c478:	200000e8 	.word	0x200000e8

0800c47c <memset>:
 800c47c:	4402      	add	r2, r0
 800c47e:	4603      	mov	r3, r0
 800c480:	4293      	cmp	r3, r2
 800c482:	d100      	bne.n	800c486 <memset+0xa>
 800c484:	4770      	bx	lr
 800c486:	f803 1b01 	strb.w	r1, [r3], #1
 800c48a:	e7f9      	b.n	800c480 <memset+0x4>

0800c48c <strchr>:
 800c48c:	b2c9      	uxtb	r1, r1
 800c48e:	4603      	mov	r3, r0
 800c490:	4618      	mov	r0, r3
 800c492:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c496:	b112      	cbz	r2, 800c49e <strchr+0x12>
 800c498:	428a      	cmp	r2, r1
 800c49a:	d1f9      	bne.n	800c490 <strchr+0x4>
 800c49c:	4770      	bx	lr
 800c49e:	2900      	cmp	r1, #0
 800c4a0:	bf18      	it	ne
 800c4a2:	2000      	movne	r0, #0
 800c4a4:	4770      	bx	lr

0800c4a6 <strncmp>:
 800c4a6:	b510      	push	{r4, lr}
 800c4a8:	b16a      	cbz	r2, 800c4c6 <strncmp+0x20>
 800c4aa:	3901      	subs	r1, #1
 800c4ac:	1884      	adds	r4, r0, r2
 800c4ae:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c4b2:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800c4b6:	429a      	cmp	r2, r3
 800c4b8:	d103      	bne.n	800c4c2 <strncmp+0x1c>
 800c4ba:	42a0      	cmp	r0, r4
 800c4bc:	d001      	beq.n	800c4c2 <strncmp+0x1c>
 800c4be:	2a00      	cmp	r2, #0
 800c4c0:	d1f5      	bne.n	800c4ae <strncmp+0x8>
 800c4c2:	1ad0      	subs	r0, r2, r3
 800c4c4:	bd10      	pop	{r4, pc}
 800c4c6:	4610      	mov	r0, r2
 800c4c8:	e7fc      	b.n	800c4c4 <strncmp+0x1e>

0800c4ca <strncpy>:
 800c4ca:	b510      	push	{r4, lr}
 800c4cc:	3901      	subs	r1, #1
 800c4ce:	4603      	mov	r3, r0
 800c4d0:	b132      	cbz	r2, 800c4e0 <strncpy+0x16>
 800c4d2:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800c4d6:	f803 4b01 	strb.w	r4, [r3], #1
 800c4da:	3a01      	subs	r2, #1
 800c4dc:	2c00      	cmp	r4, #0
 800c4de:	d1f7      	bne.n	800c4d0 <strncpy+0x6>
 800c4e0:	441a      	add	r2, r3
 800c4e2:	2100      	movs	r1, #0
 800c4e4:	4293      	cmp	r3, r2
 800c4e6:	d100      	bne.n	800c4ea <strncpy+0x20>
 800c4e8:	bd10      	pop	{r4, pc}
 800c4ea:	f803 1b01 	strb.w	r1, [r3], #1
 800c4ee:	e7f9      	b.n	800c4e4 <strncpy+0x1a>

0800c4f0 <_close_r>:
 800c4f0:	b538      	push	{r3, r4, r5, lr}
 800c4f2:	4d06      	ldr	r5, [pc, #24]	@ (800c50c <_close_r+0x1c>)
 800c4f4:	2300      	movs	r3, #0
 800c4f6:	4604      	mov	r4, r0
 800c4f8:	4608      	mov	r0, r1
 800c4fa:	602b      	str	r3, [r5, #0]
 800c4fc:	f7f4 ff71 	bl	80013e2 <_close>
 800c500:	1c43      	adds	r3, r0, #1
 800c502:	d102      	bne.n	800c50a <_close_r+0x1a>
 800c504:	682b      	ldr	r3, [r5, #0]
 800c506:	b103      	cbz	r3, 800c50a <_close_r+0x1a>
 800c508:	6023      	str	r3, [r4, #0]
 800c50a:	bd38      	pop	{r3, r4, r5, pc}
 800c50c:	20005960 	.word	0x20005960

0800c510 <_reclaim_reent>:
 800c510:	4b29      	ldr	r3, [pc, #164]	@ (800c5b8 <_reclaim_reent+0xa8>)
 800c512:	681b      	ldr	r3, [r3, #0]
 800c514:	4283      	cmp	r3, r0
 800c516:	b570      	push	{r4, r5, r6, lr}
 800c518:	4604      	mov	r4, r0
 800c51a:	d04b      	beq.n	800c5b4 <_reclaim_reent+0xa4>
 800c51c:	69c3      	ldr	r3, [r0, #28]
 800c51e:	b1ab      	cbz	r3, 800c54c <_reclaim_reent+0x3c>
 800c520:	68db      	ldr	r3, [r3, #12]
 800c522:	b16b      	cbz	r3, 800c540 <_reclaim_reent+0x30>
 800c524:	2500      	movs	r5, #0
 800c526:	69e3      	ldr	r3, [r4, #28]
 800c528:	68db      	ldr	r3, [r3, #12]
 800c52a:	5959      	ldr	r1, [r3, r5]
 800c52c:	2900      	cmp	r1, #0
 800c52e:	d13b      	bne.n	800c5a8 <_reclaim_reent+0x98>
 800c530:	3504      	adds	r5, #4
 800c532:	2d80      	cmp	r5, #128	@ 0x80
 800c534:	d1f7      	bne.n	800c526 <_reclaim_reent+0x16>
 800c536:	69e3      	ldr	r3, [r4, #28]
 800c538:	4620      	mov	r0, r4
 800c53a:	68d9      	ldr	r1, [r3, #12]
 800c53c:	f000 f8b8 	bl	800c6b0 <_free_r>
 800c540:	69e3      	ldr	r3, [r4, #28]
 800c542:	6819      	ldr	r1, [r3, #0]
 800c544:	b111      	cbz	r1, 800c54c <_reclaim_reent+0x3c>
 800c546:	4620      	mov	r0, r4
 800c548:	f000 f8b2 	bl	800c6b0 <_free_r>
 800c54c:	6961      	ldr	r1, [r4, #20]
 800c54e:	b111      	cbz	r1, 800c556 <_reclaim_reent+0x46>
 800c550:	4620      	mov	r0, r4
 800c552:	f000 f8ad 	bl	800c6b0 <_free_r>
 800c556:	69e1      	ldr	r1, [r4, #28]
 800c558:	b111      	cbz	r1, 800c560 <_reclaim_reent+0x50>
 800c55a:	4620      	mov	r0, r4
 800c55c:	f000 f8a8 	bl	800c6b0 <_free_r>
 800c560:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800c562:	b111      	cbz	r1, 800c56a <_reclaim_reent+0x5a>
 800c564:	4620      	mov	r0, r4
 800c566:	f000 f8a3 	bl	800c6b0 <_free_r>
 800c56a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c56c:	b111      	cbz	r1, 800c574 <_reclaim_reent+0x64>
 800c56e:	4620      	mov	r0, r4
 800c570:	f000 f89e 	bl	800c6b0 <_free_r>
 800c574:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800c576:	b111      	cbz	r1, 800c57e <_reclaim_reent+0x6e>
 800c578:	4620      	mov	r0, r4
 800c57a:	f000 f899 	bl	800c6b0 <_free_r>
 800c57e:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800c580:	b111      	cbz	r1, 800c588 <_reclaim_reent+0x78>
 800c582:	4620      	mov	r0, r4
 800c584:	f000 f894 	bl	800c6b0 <_free_r>
 800c588:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800c58a:	b111      	cbz	r1, 800c592 <_reclaim_reent+0x82>
 800c58c:	4620      	mov	r0, r4
 800c58e:	f000 f88f 	bl	800c6b0 <_free_r>
 800c592:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800c594:	b111      	cbz	r1, 800c59c <_reclaim_reent+0x8c>
 800c596:	4620      	mov	r0, r4
 800c598:	f000 f88a 	bl	800c6b0 <_free_r>
 800c59c:	6a23      	ldr	r3, [r4, #32]
 800c59e:	b14b      	cbz	r3, 800c5b4 <_reclaim_reent+0xa4>
 800c5a0:	4620      	mov	r0, r4
 800c5a2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800c5a6:	4718      	bx	r3
 800c5a8:	680e      	ldr	r6, [r1, #0]
 800c5aa:	4620      	mov	r0, r4
 800c5ac:	f000 f880 	bl	800c6b0 <_free_r>
 800c5b0:	4631      	mov	r1, r6
 800c5b2:	e7bb      	b.n	800c52c <_reclaim_reent+0x1c>
 800c5b4:	bd70      	pop	{r4, r5, r6, pc}
 800c5b6:	bf00      	nop
 800c5b8:	200000e8 	.word	0x200000e8

0800c5bc <_lseek_r>:
 800c5bc:	b538      	push	{r3, r4, r5, lr}
 800c5be:	4d07      	ldr	r5, [pc, #28]	@ (800c5dc <_lseek_r+0x20>)
 800c5c0:	4604      	mov	r4, r0
 800c5c2:	4608      	mov	r0, r1
 800c5c4:	4611      	mov	r1, r2
 800c5c6:	2200      	movs	r2, #0
 800c5c8:	602a      	str	r2, [r5, #0]
 800c5ca:	461a      	mov	r2, r3
 800c5cc:	f7f4 ff30 	bl	8001430 <_lseek>
 800c5d0:	1c43      	adds	r3, r0, #1
 800c5d2:	d102      	bne.n	800c5da <_lseek_r+0x1e>
 800c5d4:	682b      	ldr	r3, [r5, #0]
 800c5d6:	b103      	cbz	r3, 800c5da <_lseek_r+0x1e>
 800c5d8:	6023      	str	r3, [r4, #0]
 800c5da:	bd38      	pop	{r3, r4, r5, pc}
 800c5dc:	20005960 	.word	0x20005960

0800c5e0 <_read_r>:
 800c5e0:	b538      	push	{r3, r4, r5, lr}
 800c5e2:	4d07      	ldr	r5, [pc, #28]	@ (800c600 <_read_r+0x20>)
 800c5e4:	4604      	mov	r4, r0
 800c5e6:	4608      	mov	r0, r1
 800c5e8:	4611      	mov	r1, r2
 800c5ea:	2200      	movs	r2, #0
 800c5ec:	602a      	str	r2, [r5, #0]
 800c5ee:	461a      	mov	r2, r3
 800c5f0:	f7f4 febe 	bl	8001370 <_read>
 800c5f4:	1c43      	adds	r3, r0, #1
 800c5f6:	d102      	bne.n	800c5fe <_read_r+0x1e>
 800c5f8:	682b      	ldr	r3, [r5, #0]
 800c5fa:	b103      	cbz	r3, 800c5fe <_read_r+0x1e>
 800c5fc:	6023      	str	r3, [r4, #0]
 800c5fe:	bd38      	pop	{r3, r4, r5, pc}
 800c600:	20005960 	.word	0x20005960

0800c604 <_write_r>:
 800c604:	b538      	push	{r3, r4, r5, lr}
 800c606:	4d07      	ldr	r5, [pc, #28]	@ (800c624 <_write_r+0x20>)
 800c608:	4604      	mov	r4, r0
 800c60a:	4608      	mov	r0, r1
 800c60c:	4611      	mov	r1, r2
 800c60e:	2200      	movs	r2, #0
 800c610:	602a      	str	r2, [r5, #0]
 800c612:	461a      	mov	r2, r3
 800c614:	f7f4 fec9 	bl	80013aa <_write>
 800c618:	1c43      	adds	r3, r0, #1
 800c61a:	d102      	bne.n	800c622 <_write_r+0x1e>
 800c61c:	682b      	ldr	r3, [r5, #0]
 800c61e:	b103      	cbz	r3, 800c622 <_write_r+0x1e>
 800c620:	6023      	str	r3, [r4, #0]
 800c622:	bd38      	pop	{r3, r4, r5, pc}
 800c624:	20005960 	.word	0x20005960

0800c628 <__errno>:
 800c628:	4b01      	ldr	r3, [pc, #4]	@ (800c630 <__errno+0x8>)
 800c62a:	6818      	ldr	r0, [r3, #0]
 800c62c:	4770      	bx	lr
 800c62e:	bf00      	nop
 800c630:	200000e8 	.word	0x200000e8

0800c634 <__libc_init_array>:
 800c634:	b570      	push	{r4, r5, r6, lr}
 800c636:	4d0d      	ldr	r5, [pc, #52]	@ (800c66c <__libc_init_array+0x38>)
 800c638:	4c0d      	ldr	r4, [pc, #52]	@ (800c670 <__libc_init_array+0x3c>)
 800c63a:	1b64      	subs	r4, r4, r5
 800c63c:	10a4      	asrs	r4, r4, #2
 800c63e:	2600      	movs	r6, #0
 800c640:	42a6      	cmp	r6, r4
 800c642:	d109      	bne.n	800c658 <__libc_init_array+0x24>
 800c644:	4d0b      	ldr	r5, [pc, #44]	@ (800c674 <__libc_init_array+0x40>)
 800c646:	4c0c      	ldr	r4, [pc, #48]	@ (800c678 <__libc_init_array+0x44>)
 800c648:	f000 fd3a 	bl	800d0c0 <_init>
 800c64c:	1b64      	subs	r4, r4, r5
 800c64e:	10a4      	asrs	r4, r4, #2
 800c650:	2600      	movs	r6, #0
 800c652:	42a6      	cmp	r6, r4
 800c654:	d105      	bne.n	800c662 <__libc_init_array+0x2e>
 800c656:	bd70      	pop	{r4, r5, r6, pc}
 800c658:	f855 3b04 	ldr.w	r3, [r5], #4
 800c65c:	4798      	blx	r3
 800c65e:	3601      	adds	r6, #1
 800c660:	e7ee      	b.n	800c640 <__libc_init_array+0xc>
 800c662:	f855 3b04 	ldr.w	r3, [r5], #4
 800c666:	4798      	blx	r3
 800c668:	3601      	adds	r6, #1
 800c66a:	e7f2      	b.n	800c652 <__libc_init_array+0x1e>
 800c66c:	0800da54 	.word	0x0800da54
 800c670:	0800da54 	.word	0x0800da54
 800c674:	0800da54 	.word	0x0800da54
 800c678:	0800da58 	.word	0x0800da58

0800c67c <__retarget_lock_init_recursive>:
 800c67c:	4770      	bx	lr

0800c67e <__retarget_lock_acquire_recursive>:
 800c67e:	4770      	bx	lr

0800c680 <__retarget_lock_release_recursive>:
 800c680:	4770      	bx	lr

0800c682 <strcpy>:
 800c682:	4603      	mov	r3, r0
 800c684:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c688:	f803 2b01 	strb.w	r2, [r3], #1
 800c68c:	2a00      	cmp	r2, #0
 800c68e:	d1f9      	bne.n	800c684 <strcpy+0x2>
 800c690:	4770      	bx	lr

0800c692 <memcpy>:
 800c692:	440a      	add	r2, r1
 800c694:	4291      	cmp	r1, r2
 800c696:	f100 33ff 	add.w	r3, r0, #4294967295
 800c69a:	d100      	bne.n	800c69e <memcpy+0xc>
 800c69c:	4770      	bx	lr
 800c69e:	b510      	push	{r4, lr}
 800c6a0:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c6a4:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c6a8:	4291      	cmp	r1, r2
 800c6aa:	d1f9      	bne.n	800c6a0 <memcpy+0xe>
 800c6ac:	bd10      	pop	{r4, pc}
	...

0800c6b0 <_free_r>:
 800c6b0:	b538      	push	{r3, r4, r5, lr}
 800c6b2:	4605      	mov	r5, r0
 800c6b4:	2900      	cmp	r1, #0
 800c6b6:	d041      	beq.n	800c73c <_free_r+0x8c>
 800c6b8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c6bc:	1f0c      	subs	r4, r1, #4
 800c6be:	2b00      	cmp	r3, #0
 800c6c0:	bfb8      	it	lt
 800c6c2:	18e4      	addlt	r4, r4, r3
 800c6c4:	f000 f8e0 	bl	800c888 <__malloc_lock>
 800c6c8:	4a1d      	ldr	r2, [pc, #116]	@ (800c740 <_free_r+0x90>)
 800c6ca:	6813      	ldr	r3, [r2, #0]
 800c6cc:	b933      	cbnz	r3, 800c6dc <_free_r+0x2c>
 800c6ce:	6063      	str	r3, [r4, #4]
 800c6d0:	6014      	str	r4, [r2, #0]
 800c6d2:	4628      	mov	r0, r5
 800c6d4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c6d8:	f000 b8dc 	b.w	800c894 <__malloc_unlock>
 800c6dc:	42a3      	cmp	r3, r4
 800c6de:	d908      	bls.n	800c6f2 <_free_r+0x42>
 800c6e0:	6820      	ldr	r0, [r4, #0]
 800c6e2:	1821      	adds	r1, r4, r0
 800c6e4:	428b      	cmp	r3, r1
 800c6e6:	bf01      	itttt	eq
 800c6e8:	6819      	ldreq	r1, [r3, #0]
 800c6ea:	685b      	ldreq	r3, [r3, #4]
 800c6ec:	1809      	addeq	r1, r1, r0
 800c6ee:	6021      	streq	r1, [r4, #0]
 800c6f0:	e7ed      	b.n	800c6ce <_free_r+0x1e>
 800c6f2:	461a      	mov	r2, r3
 800c6f4:	685b      	ldr	r3, [r3, #4]
 800c6f6:	b10b      	cbz	r3, 800c6fc <_free_r+0x4c>
 800c6f8:	42a3      	cmp	r3, r4
 800c6fa:	d9fa      	bls.n	800c6f2 <_free_r+0x42>
 800c6fc:	6811      	ldr	r1, [r2, #0]
 800c6fe:	1850      	adds	r0, r2, r1
 800c700:	42a0      	cmp	r0, r4
 800c702:	d10b      	bne.n	800c71c <_free_r+0x6c>
 800c704:	6820      	ldr	r0, [r4, #0]
 800c706:	4401      	add	r1, r0
 800c708:	1850      	adds	r0, r2, r1
 800c70a:	4283      	cmp	r3, r0
 800c70c:	6011      	str	r1, [r2, #0]
 800c70e:	d1e0      	bne.n	800c6d2 <_free_r+0x22>
 800c710:	6818      	ldr	r0, [r3, #0]
 800c712:	685b      	ldr	r3, [r3, #4]
 800c714:	6053      	str	r3, [r2, #4]
 800c716:	4408      	add	r0, r1
 800c718:	6010      	str	r0, [r2, #0]
 800c71a:	e7da      	b.n	800c6d2 <_free_r+0x22>
 800c71c:	d902      	bls.n	800c724 <_free_r+0x74>
 800c71e:	230c      	movs	r3, #12
 800c720:	602b      	str	r3, [r5, #0]
 800c722:	e7d6      	b.n	800c6d2 <_free_r+0x22>
 800c724:	6820      	ldr	r0, [r4, #0]
 800c726:	1821      	adds	r1, r4, r0
 800c728:	428b      	cmp	r3, r1
 800c72a:	bf04      	itt	eq
 800c72c:	6819      	ldreq	r1, [r3, #0]
 800c72e:	685b      	ldreq	r3, [r3, #4]
 800c730:	6063      	str	r3, [r4, #4]
 800c732:	bf04      	itt	eq
 800c734:	1809      	addeq	r1, r1, r0
 800c736:	6021      	streq	r1, [r4, #0]
 800c738:	6054      	str	r4, [r2, #4]
 800c73a:	e7ca      	b.n	800c6d2 <_free_r+0x22>
 800c73c:	bd38      	pop	{r3, r4, r5, pc}
 800c73e:	bf00      	nop
 800c740:	2000596c 	.word	0x2000596c

0800c744 <sbrk_aligned>:
 800c744:	b570      	push	{r4, r5, r6, lr}
 800c746:	4e0f      	ldr	r6, [pc, #60]	@ (800c784 <sbrk_aligned+0x40>)
 800c748:	460c      	mov	r4, r1
 800c74a:	6831      	ldr	r1, [r6, #0]
 800c74c:	4605      	mov	r5, r0
 800c74e:	b911      	cbnz	r1, 800c756 <sbrk_aligned+0x12>
 800c750:	f000 fca6 	bl	800d0a0 <_sbrk_r>
 800c754:	6030      	str	r0, [r6, #0]
 800c756:	4621      	mov	r1, r4
 800c758:	4628      	mov	r0, r5
 800c75a:	f000 fca1 	bl	800d0a0 <_sbrk_r>
 800c75e:	1c43      	adds	r3, r0, #1
 800c760:	d103      	bne.n	800c76a <sbrk_aligned+0x26>
 800c762:	f04f 34ff 	mov.w	r4, #4294967295
 800c766:	4620      	mov	r0, r4
 800c768:	bd70      	pop	{r4, r5, r6, pc}
 800c76a:	1cc4      	adds	r4, r0, #3
 800c76c:	f024 0403 	bic.w	r4, r4, #3
 800c770:	42a0      	cmp	r0, r4
 800c772:	d0f8      	beq.n	800c766 <sbrk_aligned+0x22>
 800c774:	1a21      	subs	r1, r4, r0
 800c776:	4628      	mov	r0, r5
 800c778:	f000 fc92 	bl	800d0a0 <_sbrk_r>
 800c77c:	3001      	adds	r0, #1
 800c77e:	d1f2      	bne.n	800c766 <sbrk_aligned+0x22>
 800c780:	e7ef      	b.n	800c762 <sbrk_aligned+0x1e>
 800c782:	bf00      	nop
 800c784:	20005968 	.word	0x20005968

0800c788 <_malloc_r>:
 800c788:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c78c:	1ccd      	adds	r5, r1, #3
 800c78e:	f025 0503 	bic.w	r5, r5, #3
 800c792:	3508      	adds	r5, #8
 800c794:	2d0c      	cmp	r5, #12
 800c796:	bf38      	it	cc
 800c798:	250c      	movcc	r5, #12
 800c79a:	2d00      	cmp	r5, #0
 800c79c:	4606      	mov	r6, r0
 800c79e:	db01      	blt.n	800c7a4 <_malloc_r+0x1c>
 800c7a0:	42a9      	cmp	r1, r5
 800c7a2:	d904      	bls.n	800c7ae <_malloc_r+0x26>
 800c7a4:	230c      	movs	r3, #12
 800c7a6:	6033      	str	r3, [r6, #0]
 800c7a8:	2000      	movs	r0, #0
 800c7aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c7ae:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800c884 <_malloc_r+0xfc>
 800c7b2:	f000 f869 	bl	800c888 <__malloc_lock>
 800c7b6:	f8d8 3000 	ldr.w	r3, [r8]
 800c7ba:	461c      	mov	r4, r3
 800c7bc:	bb44      	cbnz	r4, 800c810 <_malloc_r+0x88>
 800c7be:	4629      	mov	r1, r5
 800c7c0:	4630      	mov	r0, r6
 800c7c2:	f7ff ffbf 	bl	800c744 <sbrk_aligned>
 800c7c6:	1c43      	adds	r3, r0, #1
 800c7c8:	4604      	mov	r4, r0
 800c7ca:	d158      	bne.n	800c87e <_malloc_r+0xf6>
 800c7cc:	f8d8 4000 	ldr.w	r4, [r8]
 800c7d0:	4627      	mov	r7, r4
 800c7d2:	2f00      	cmp	r7, #0
 800c7d4:	d143      	bne.n	800c85e <_malloc_r+0xd6>
 800c7d6:	2c00      	cmp	r4, #0
 800c7d8:	d04b      	beq.n	800c872 <_malloc_r+0xea>
 800c7da:	6823      	ldr	r3, [r4, #0]
 800c7dc:	4639      	mov	r1, r7
 800c7de:	4630      	mov	r0, r6
 800c7e0:	eb04 0903 	add.w	r9, r4, r3
 800c7e4:	f000 fc5c 	bl	800d0a0 <_sbrk_r>
 800c7e8:	4581      	cmp	r9, r0
 800c7ea:	d142      	bne.n	800c872 <_malloc_r+0xea>
 800c7ec:	6821      	ldr	r1, [r4, #0]
 800c7ee:	1a6d      	subs	r5, r5, r1
 800c7f0:	4629      	mov	r1, r5
 800c7f2:	4630      	mov	r0, r6
 800c7f4:	f7ff ffa6 	bl	800c744 <sbrk_aligned>
 800c7f8:	3001      	adds	r0, #1
 800c7fa:	d03a      	beq.n	800c872 <_malloc_r+0xea>
 800c7fc:	6823      	ldr	r3, [r4, #0]
 800c7fe:	442b      	add	r3, r5
 800c800:	6023      	str	r3, [r4, #0]
 800c802:	f8d8 3000 	ldr.w	r3, [r8]
 800c806:	685a      	ldr	r2, [r3, #4]
 800c808:	bb62      	cbnz	r2, 800c864 <_malloc_r+0xdc>
 800c80a:	f8c8 7000 	str.w	r7, [r8]
 800c80e:	e00f      	b.n	800c830 <_malloc_r+0xa8>
 800c810:	6822      	ldr	r2, [r4, #0]
 800c812:	1b52      	subs	r2, r2, r5
 800c814:	d420      	bmi.n	800c858 <_malloc_r+0xd0>
 800c816:	2a0b      	cmp	r2, #11
 800c818:	d917      	bls.n	800c84a <_malloc_r+0xc2>
 800c81a:	1961      	adds	r1, r4, r5
 800c81c:	42a3      	cmp	r3, r4
 800c81e:	6025      	str	r5, [r4, #0]
 800c820:	bf18      	it	ne
 800c822:	6059      	strne	r1, [r3, #4]
 800c824:	6863      	ldr	r3, [r4, #4]
 800c826:	bf08      	it	eq
 800c828:	f8c8 1000 	streq.w	r1, [r8]
 800c82c:	5162      	str	r2, [r4, r5]
 800c82e:	604b      	str	r3, [r1, #4]
 800c830:	4630      	mov	r0, r6
 800c832:	f000 f82f 	bl	800c894 <__malloc_unlock>
 800c836:	f104 000b 	add.w	r0, r4, #11
 800c83a:	1d23      	adds	r3, r4, #4
 800c83c:	f020 0007 	bic.w	r0, r0, #7
 800c840:	1ac2      	subs	r2, r0, r3
 800c842:	bf1c      	itt	ne
 800c844:	1a1b      	subne	r3, r3, r0
 800c846:	50a3      	strne	r3, [r4, r2]
 800c848:	e7af      	b.n	800c7aa <_malloc_r+0x22>
 800c84a:	6862      	ldr	r2, [r4, #4]
 800c84c:	42a3      	cmp	r3, r4
 800c84e:	bf0c      	ite	eq
 800c850:	f8c8 2000 	streq.w	r2, [r8]
 800c854:	605a      	strne	r2, [r3, #4]
 800c856:	e7eb      	b.n	800c830 <_malloc_r+0xa8>
 800c858:	4623      	mov	r3, r4
 800c85a:	6864      	ldr	r4, [r4, #4]
 800c85c:	e7ae      	b.n	800c7bc <_malloc_r+0x34>
 800c85e:	463c      	mov	r4, r7
 800c860:	687f      	ldr	r7, [r7, #4]
 800c862:	e7b6      	b.n	800c7d2 <_malloc_r+0x4a>
 800c864:	461a      	mov	r2, r3
 800c866:	685b      	ldr	r3, [r3, #4]
 800c868:	42a3      	cmp	r3, r4
 800c86a:	d1fb      	bne.n	800c864 <_malloc_r+0xdc>
 800c86c:	2300      	movs	r3, #0
 800c86e:	6053      	str	r3, [r2, #4]
 800c870:	e7de      	b.n	800c830 <_malloc_r+0xa8>
 800c872:	230c      	movs	r3, #12
 800c874:	6033      	str	r3, [r6, #0]
 800c876:	4630      	mov	r0, r6
 800c878:	f000 f80c 	bl	800c894 <__malloc_unlock>
 800c87c:	e794      	b.n	800c7a8 <_malloc_r+0x20>
 800c87e:	6005      	str	r5, [r0, #0]
 800c880:	e7d6      	b.n	800c830 <_malloc_r+0xa8>
 800c882:	bf00      	nop
 800c884:	2000596c 	.word	0x2000596c

0800c888 <__malloc_lock>:
 800c888:	4801      	ldr	r0, [pc, #4]	@ (800c890 <__malloc_lock+0x8>)
 800c88a:	f7ff bef8 	b.w	800c67e <__retarget_lock_acquire_recursive>
 800c88e:	bf00      	nop
 800c890:	20005964 	.word	0x20005964

0800c894 <__malloc_unlock>:
 800c894:	4801      	ldr	r0, [pc, #4]	@ (800c89c <__malloc_unlock+0x8>)
 800c896:	f7ff bef3 	b.w	800c680 <__retarget_lock_release_recursive>
 800c89a:	bf00      	nop
 800c89c:	20005964 	.word	0x20005964

0800c8a0 <__sfputc_r>:
 800c8a0:	6893      	ldr	r3, [r2, #8]
 800c8a2:	3b01      	subs	r3, #1
 800c8a4:	2b00      	cmp	r3, #0
 800c8a6:	b410      	push	{r4}
 800c8a8:	6093      	str	r3, [r2, #8]
 800c8aa:	da08      	bge.n	800c8be <__sfputc_r+0x1e>
 800c8ac:	6994      	ldr	r4, [r2, #24]
 800c8ae:	42a3      	cmp	r3, r4
 800c8b0:	db01      	blt.n	800c8b6 <__sfputc_r+0x16>
 800c8b2:	290a      	cmp	r1, #10
 800c8b4:	d103      	bne.n	800c8be <__sfputc_r+0x1e>
 800c8b6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c8ba:	f7ff bd4a 	b.w	800c352 <__swbuf_r>
 800c8be:	6813      	ldr	r3, [r2, #0]
 800c8c0:	1c58      	adds	r0, r3, #1
 800c8c2:	6010      	str	r0, [r2, #0]
 800c8c4:	7019      	strb	r1, [r3, #0]
 800c8c6:	4608      	mov	r0, r1
 800c8c8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c8cc:	4770      	bx	lr

0800c8ce <__sfputs_r>:
 800c8ce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c8d0:	4606      	mov	r6, r0
 800c8d2:	460f      	mov	r7, r1
 800c8d4:	4614      	mov	r4, r2
 800c8d6:	18d5      	adds	r5, r2, r3
 800c8d8:	42ac      	cmp	r4, r5
 800c8da:	d101      	bne.n	800c8e0 <__sfputs_r+0x12>
 800c8dc:	2000      	movs	r0, #0
 800c8de:	e007      	b.n	800c8f0 <__sfputs_r+0x22>
 800c8e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c8e4:	463a      	mov	r2, r7
 800c8e6:	4630      	mov	r0, r6
 800c8e8:	f7ff ffda 	bl	800c8a0 <__sfputc_r>
 800c8ec:	1c43      	adds	r3, r0, #1
 800c8ee:	d1f3      	bne.n	800c8d8 <__sfputs_r+0xa>
 800c8f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c8f4 <_vfiprintf_r>:
 800c8f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c8f8:	460d      	mov	r5, r1
 800c8fa:	b09d      	sub	sp, #116	@ 0x74
 800c8fc:	4614      	mov	r4, r2
 800c8fe:	4698      	mov	r8, r3
 800c900:	4606      	mov	r6, r0
 800c902:	b118      	cbz	r0, 800c90c <_vfiprintf_r+0x18>
 800c904:	6a03      	ldr	r3, [r0, #32]
 800c906:	b90b      	cbnz	r3, 800c90c <_vfiprintf_r+0x18>
 800c908:	f7ff fc3a 	bl	800c180 <__sinit>
 800c90c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c90e:	07d9      	lsls	r1, r3, #31
 800c910:	d405      	bmi.n	800c91e <_vfiprintf_r+0x2a>
 800c912:	89ab      	ldrh	r3, [r5, #12]
 800c914:	059a      	lsls	r2, r3, #22
 800c916:	d402      	bmi.n	800c91e <_vfiprintf_r+0x2a>
 800c918:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c91a:	f7ff feb0 	bl	800c67e <__retarget_lock_acquire_recursive>
 800c91e:	89ab      	ldrh	r3, [r5, #12]
 800c920:	071b      	lsls	r3, r3, #28
 800c922:	d501      	bpl.n	800c928 <_vfiprintf_r+0x34>
 800c924:	692b      	ldr	r3, [r5, #16]
 800c926:	b99b      	cbnz	r3, 800c950 <_vfiprintf_r+0x5c>
 800c928:	4629      	mov	r1, r5
 800c92a:	4630      	mov	r0, r6
 800c92c:	f7ff fd50 	bl	800c3d0 <__swsetup_r>
 800c930:	b170      	cbz	r0, 800c950 <_vfiprintf_r+0x5c>
 800c932:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c934:	07dc      	lsls	r4, r3, #31
 800c936:	d504      	bpl.n	800c942 <_vfiprintf_r+0x4e>
 800c938:	f04f 30ff 	mov.w	r0, #4294967295
 800c93c:	b01d      	add	sp, #116	@ 0x74
 800c93e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c942:	89ab      	ldrh	r3, [r5, #12]
 800c944:	0598      	lsls	r0, r3, #22
 800c946:	d4f7      	bmi.n	800c938 <_vfiprintf_r+0x44>
 800c948:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c94a:	f7ff fe99 	bl	800c680 <__retarget_lock_release_recursive>
 800c94e:	e7f3      	b.n	800c938 <_vfiprintf_r+0x44>
 800c950:	2300      	movs	r3, #0
 800c952:	9309      	str	r3, [sp, #36]	@ 0x24
 800c954:	2320      	movs	r3, #32
 800c956:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c95a:	f8cd 800c 	str.w	r8, [sp, #12]
 800c95e:	2330      	movs	r3, #48	@ 0x30
 800c960:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800cb10 <_vfiprintf_r+0x21c>
 800c964:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c968:	f04f 0901 	mov.w	r9, #1
 800c96c:	4623      	mov	r3, r4
 800c96e:	469a      	mov	sl, r3
 800c970:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c974:	b10a      	cbz	r2, 800c97a <_vfiprintf_r+0x86>
 800c976:	2a25      	cmp	r2, #37	@ 0x25
 800c978:	d1f9      	bne.n	800c96e <_vfiprintf_r+0x7a>
 800c97a:	ebba 0b04 	subs.w	fp, sl, r4
 800c97e:	d00b      	beq.n	800c998 <_vfiprintf_r+0xa4>
 800c980:	465b      	mov	r3, fp
 800c982:	4622      	mov	r2, r4
 800c984:	4629      	mov	r1, r5
 800c986:	4630      	mov	r0, r6
 800c988:	f7ff ffa1 	bl	800c8ce <__sfputs_r>
 800c98c:	3001      	adds	r0, #1
 800c98e:	f000 80a7 	beq.w	800cae0 <_vfiprintf_r+0x1ec>
 800c992:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c994:	445a      	add	r2, fp
 800c996:	9209      	str	r2, [sp, #36]	@ 0x24
 800c998:	f89a 3000 	ldrb.w	r3, [sl]
 800c99c:	2b00      	cmp	r3, #0
 800c99e:	f000 809f 	beq.w	800cae0 <_vfiprintf_r+0x1ec>
 800c9a2:	2300      	movs	r3, #0
 800c9a4:	f04f 32ff 	mov.w	r2, #4294967295
 800c9a8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c9ac:	f10a 0a01 	add.w	sl, sl, #1
 800c9b0:	9304      	str	r3, [sp, #16]
 800c9b2:	9307      	str	r3, [sp, #28]
 800c9b4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c9b8:	931a      	str	r3, [sp, #104]	@ 0x68
 800c9ba:	4654      	mov	r4, sl
 800c9bc:	2205      	movs	r2, #5
 800c9be:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c9c2:	4853      	ldr	r0, [pc, #332]	@ (800cb10 <_vfiprintf_r+0x21c>)
 800c9c4:	f7f3 fc24 	bl	8000210 <memchr>
 800c9c8:	9a04      	ldr	r2, [sp, #16]
 800c9ca:	b9d8      	cbnz	r0, 800ca04 <_vfiprintf_r+0x110>
 800c9cc:	06d1      	lsls	r1, r2, #27
 800c9ce:	bf44      	itt	mi
 800c9d0:	2320      	movmi	r3, #32
 800c9d2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c9d6:	0713      	lsls	r3, r2, #28
 800c9d8:	bf44      	itt	mi
 800c9da:	232b      	movmi	r3, #43	@ 0x2b
 800c9dc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c9e0:	f89a 3000 	ldrb.w	r3, [sl]
 800c9e4:	2b2a      	cmp	r3, #42	@ 0x2a
 800c9e6:	d015      	beq.n	800ca14 <_vfiprintf_r+0x120>
 800c9e8:	9a07      	ldr	r2, [sp, #28]
 800c9ea:	4654      	mov	r4, sl
 800c9ec:	2000      	movs	r0, #0
 800c9ee:	f04f 0c0a 	mov.w	ip, #10
 800c9f2:	4621      	mov	r1, r4
 800c9f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c9f8:	3b30      	subs	r3, #48	@ 0x30
 800c9fa:	2b09      	cmp	r3, #9
 800c9fc:	d94b      	bls.n	800ca96 <_vfiprintf_r+0x1a2>
 800c9fe:	b1b0      	cbz	r0, 800ca2e <_vfiprintf_r+0x13a>
 800ca00:	9207      	str	r2, [sp, #28]
 800ca02:	e014      	b.n	800ca2e <_vfiprintf_r+0x13a>
 800ca04:	eba0 0308 	sub.w	r3, r0, r8
 800ca08:	fa09 f303 	lsl.w	r3, r9, r3
 800ca0c:	4313      	orrs	r3, r2
 800ca0e:	9304      	str	r3, [sp, #16]
 800ca10:	46a2      	mov	sl, r4
 800ca12:	e7d2      	b.n	800c9ba <_vfiprintf_r+0xc6>
 800ca14:	9b03      	ldr	r3, [sp, #12]
 800ca16:	1d19      	adds	r1, r3, #4
 800ca18:	681b      	ldr	r3, [r3, #0]
 800ca1a:	9103      	str	r1, [sp, #12]
 800ca1c:	2b00      	cmp	r3, #0
 800ca1e:	bfbb      	ittet	lt
 800ca20:	425b      	neglt	r3, r3
 800ca22:	f042 0202 	orrlt.w	r2, r2, #2
 800ca26:	9307      	strge	r3, [sp, #28]
 800ca28:	9307      	strlt	r3, [sp, #28]
 800ca2a:	bfb8      	it	lt
 800ca2c:	9204      	strlt	r2, [sp, #16]
 800ca2e:	7823      	ldrb	r3, [r4, #0]
 800ca30:	2b2e      	cmp	r3, #46	@ 0x2e
 800ca32:	d10a      	bne.n	800ca4a <_vfiprintf_r+0x156>
 800ca34:	7863      	ldrb	r3, [r4, #1]
 800ca36:	2b2a      	cmp	r3, #42	@ 0x2a
 800ca38:	d132      	bne.n	800caa0 <_vfiprintf_r+0x1ac>
 800ca3a:	9b03      	ldr	r3, [sp, #12]
 800ca3c:	1d1a      	adds	r2, r3, #4
 800ca3e:	681b      	ldr	r3, [r3, #0]
 800ca40:	9203      	str	r2, [sp, #12]
 800ca42:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800ca46:	3402      	adds	r4, #2
 800ca48:	9305      	str	r3, [sp, #20]
 800ca4a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800cb20 <_vfiprintf_r+0x22c>
 800ca4e:	7821      	ldrb	r1, [r4, #0]
 800ca50:	2203      	movs	r2, #3
 800ca52:	4650      	mov	r0, sl
 800ca54:	f7f3 fbdc 	bl	8000210 <memchr>
 800ca58:	b138      	cbz	r0, 800ca6a <_vfiprintf_r+0x176>
 800ca5a:	9b04      	ldr	r3, [sp, #16]
 800ca5c:	eba0 000a 	sub.w	r0, r0, sl
 800ca60:	2240      	movs	r2, #64	@ 0x40
 800ca62:	4082      	lsls	r2, r0
 800ca64:	4313      	orrs	r3, r2
 800ca66:	3401      	adds	r4, #1
 800ca68:	9304      	str	r3, [sp, #16]
 800ca6a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ca6e:	4829      	ldr	r0, [pc, #164]	@ (800cb14 <_vfiprintf_r+0x220>)
 800ca70:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800ca74:	2206      	movs	r2, #6
 800ca76:	f7f3 fbcb 	bl	8000210 <memchr>
 800ca7a:	2800      	cmp	r0, #0
 800ca7c:	d03f      	beq.n	800cafe <_vfiprintf_r+0x20a>
 800ca7e:	4b26      	ldr	r3, [pc, #152]	@ (800cb18 <_vfiprintf_r+0x224>)
 800ca80:	bb1b      	cbnz	r3, 800caca <_vfiprintf_r+0x1d6>
 800ca82:	9b03      	ldr	r3, [sp, #12]
 800ca84:	3307      	adds	r3, #7
 800ca86:	f023 0307 	bic.w	r3, r3, #7
 800ca8a:	3308      	adds	r3, #8
 800ca8c:	9303      	str	r3, [sp, #12]
 800ca8e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ca90:	443b      	add	r3, r7
 800ca92:	9309      	str	r3, [sp, #36]	@ 0x24
 800ca94:	e76a      	b.n	800c96c <_vfiprintf_r+0x78>
 800ca96:	fb0c 3202 	mla	r2, ip, r2, r3
 800ca9a:	460c      	mov	r4, r1
 800ca9c:	2001      	movs	r0, #1
 800ca9e:	e7a8      	b.n	800c9f2 <_vfiprintf_r+0xfe>
 800caa0:	2300      	movs	r3, #0
 800caa2:	3401      	adds	r4, #1
 800caa4:	9305      	str	r3, [sp, #20]
 800caa6:	4619      	mov	r1, r3
 800caa8:	f04f 0c0a 	mov.w	ip, #10
 800caac:	4620      	mov	r0, r4
 800caae:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cab2:	3a30      	subs	r2, #48	@ 0x30
 800cab4:	2a09      	cmp	r2, #9
 800cab6:	d903      	bls.n	800cac0 <_vfiprintf_r+0x1cc>
 800cab8:	2b00      	cmp	r3, #0
 800caba:	d0c6      	beq.n	800ca4a <_vfiprintf_r+0x156>
 800cabc:	9105      	str	r1, [sp, #20]
 800cabe:	e7c4      	b.n	800ca4a <_vfiprintf_r+0x156>
 800cac0:	fb0c 2101 	mla	r1, ip, r1, r2
 800cac4:	4604      	mov	r4, r0
 800cac6:	2301      	movs	r3, #1
 800cac8:	e7f0      	b.n	800caac <_vfiprintf_r+0x1b8>
 800caca:	ab03      	add	r3, sp, #12
 800cacc:	9300      	str	r3, [sp, #0]
 800cace:	462a      	mov	r2, r5
 800cad0:	4b12      	ldr	r3, [pc, #72]	@ (800cb1c <_vfiprintf_r+0x228>)
 800cad2:	a904      	add	r1, sp, #16
 800cad4:	4630      	mov	r0, r6
 800cad6:	f3af 8000 	nop.w
 800cada:	4607      	mov	r7, r0
 800cadc:	1c78      	adds	r0, r7, #1
 800cade:	d1d6      	bne.n	800ca8e <_vfiprintf_r+0x19a>
 800cae0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800cae2:	07d9      	lsls	r1, r3, #31
 800cae4:	d405      	bmi.n	800caf2 <_vfiprintf_r+0x1fe>
 800cae6:	89ab      	ldrh	r3, [r5, #12]
 800cae8:	059a      	lsls	r2, r3, #22
 800caea:	d402      	bmi.n	800caf2 <_vfiprintf_r+0x1fe>
 800caec:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800caee:	f7ff fdc7 	bl	800c680 <__retarget_lock_release_recursive>
 800caf2:	89ab      	ldrh	r3, [r5, #12]
 800caf4:	065b      	lsls	r3, r3, #25
 800caf6:	f53f af1f 	bmi.w	800c938 <_vfiprintf_r+0x44>
 800cafa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800cafc:	e71e      	b.n	800c93c <_vfiprintf_r+0x48>
 800cafe:	ab03      	add	r3, sp, #12
 800cb00:	9300      	str	r3, [sp, #0]
 800cb02:	462a      	mov	r2, r5
 800cb04:	4b05      	ldr	r3, [pc, #20]	@ (800cb1c <_vfiprintf_r+0x228>)
 800cb06:	a904      	add	r1, sp, #16
 800cb08:	4630      	mov	r0, r6
 800cb0a:	f000 f879 	bl	800cc00 <_printf_i>
 800cb0e:	e7e4      	b.n	800cada <_vfiprintf_r+0x1e6>
 800cb10:	0800da18 	.word	0x0800da18
 800cb14:	0800da22 	.word	0x0800da22
 800cb18:	00000000 	.word	0x00000000
 800cb1c:	0800c8cf 	.word	0x0800c8cf
 800cb20:	0800da1e 	.word	0x0800da1e

0800cb24 <_printf_common>:
 800cb24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cb28:	4616      	mov	r6, r2
 800cb2a:	4698      	mov	r8, r3
 800cb2c:	688a      	ldr	r2, [r1, #8]
 800cb2e:	690b      	ldr	r3, [r1, #16]
 800cb30:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800cb34:	4293      	cmp	r3, r2
 800cb36:	bfb8      	it	lt
 800cb38:	4613      	movlt	r3, r2
 800cb3a:	6033      	str	r3, [r6, #0]
 800cb3c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800cb40:	4607      	mov	r7, r0
 800cb42:	460c      	mov	r4, r1
 800cb44:	b10a      	cbz	r2, 800cb4a <_printf_common+0x26>
 800cb46:	3301      	adds	r3, #1
 800cb48:	6033      	str	r3, [r6, #0]
 800cb4a:	6823      	ldr	r3, [r4, #0]
 800cb4c:	0699      	lsls	r1, r3, #26
 800cb4e:	bf42      	ittt	mi
 800cb50:	6833      	ldrmi	r3, [r6, #0]
 800cb52:	3302      	addmi	r3, #2
 800cb54:	6033      	strmi	r3, [r6, #0]
 800cb56:	6825      	ldr	r5, [r4, #0]
 800cb58:	f015 0506 	ands.w	r5, r5, #6
 800cb5c:	d106      	bne.n	800cb6c <_printf_common+0x48>
 800cb5e:	f104 0a19 	add.w	sl, r4, #25
 800cb62:	68e3      	ldr	r3, [r4, #12]
 800cb64:	6832      	ldr	r2, [r6, #0]
 800cb66:	1a9b      	subs	r3, r3, r2
 800cb68:	42ab      	cmp	r3, r5
 800cb6a:	dc26      	bgt.n	800cbba <_printf_common+0x96>
 800cb6c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800cb70:	6822      	ldr	r2, [r4, #0]
 800cb72:	3b00      	subs	r3, #0
 800cb74:	bf18      	it	ne
 800cb76:	2301      	movne	r3, #1
 800cb78:	0692      	lsls	r2, r2, #26
 800cb7a:	d42b      	bmi.n	800cbd4 <_printf_common+0xb0>
 800cb7c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800cb80:	4641      	mov	r1, r8
 800cb82:	4638      	mov	r0, r7
 800cb84:	47c8      	blx	r9
 800cb86:	3001      	adds	r0, #1
 800cb88:	d01e      	beq.n	800cbc8 <_printf_common+0xa4>
 800cb8a:	6823      	ldr	r3, [r4, #0]
 800cb8c:	6922      	ldr	r2, [r4, #16]
 800cb8e:	f003 0306 	and.w	r3, r3, #6
 800cb92:	2b04      	cmp	r3, #4
 800cb94:	bf02      	ittt	eq
 800cb96:	68e5      	ldreq	r5, [r4, #12]
 800cb98:	6833      	ldreq	r3, [r6, #0]
 800cb9a:	1aed      	subeq	r5, r5, r3
 800cb9c:	68a3      	ldr	r3, [r4, #8]
 800cb9e:	bf0c      	ite	eq
 800cba0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800cba4:	2500      	movne	r5, #0
 800cba6:	4293      	cmp	r3, r2
 800cba8:	bfc4      	itt	gt
 800cbaa:	1a9b      	subgt	r3, r3, r2
 800cbac:	18ed      	addgt	r5, r5, r3
 800cbae:	2600      	movs	r6, #0
 800cbb0:	341a      	adds	r4, #26
 800cbb2:	42b5      	cmp	r5, r6
 800cbb4:	d11a      	bne.n	800cbec <_printf_common+0xc8>
 800cbb6:	2000      	movs	r0, #0
 800cbb8:	e008      	b.n	800cbcc <_printf_common+0xa8>
 800cbba:	2301      	movs	r3, #1
 800cbbc:	4652      	mov	r2, sl
 800cbbe:	4641      	mov	r1, r8
 800cbc0:	4638      	mov	r0, r7
 800cbc2:	47c8      	blx	r9
 800cbc4:	3001      	adds	r0, #1
 800cbc6:	d103      	bne.n	800cbd0 <_printf_common+0xac>
 800cbc8:	f04f 30ff 	mov.w	r0, #4294967295
 800cbcc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cbd0:	3501      	adds	r5, #1
 800cbd2:	e7c6      	b.n	800cb62 <_printf_common+0x3e>
 800cbd4:	18e1      	adds	r1, r4, r3
 800cbd6:	1c5a      	adds	r2, r3, #1
 800cbd8:	2030      	movs	r0, #48	@ 0x30
 800cbda:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800cbde:	4422      	add	r2, r4
 800cbe0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800cbe4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800cbe8:	3302      	adds	r3, #2
 800cbea:	e7c7      	b.n	800cb7c <_printf_common+0x58>
 800cbec:	2301      	movs	r3, #1
 800cbee:	4622      	mov	r2, r4
 800cbf0:	4641      	mov	r1, r8
 800cbf2:	4638      	mov	r0, r7
 800cbf4:	47c8      	blx	r9
 800cbf6:	3001      	adds	r0, #1
 800cbf8:	d0e6      	beq.n	800cbc8 <_printf_common+0xa4>
 800cbfa:	3601      	adds	r6, #1
 800cbfc:	e7d9      	b.n	800cbb2 <_printf_common+0x8e>
	...

0800cc00 <_printf_i>:
 800cc00:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800cc04:	7e0f      	ldrb	r7, [r1, #24]
 800cc06:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800cc08:	2f78      	cmp	r7, #120	@ 0x78
 800cc0a:	4691      	mov	r9, r2
 800cc0c:	4680      	mov	r8, r0
 800cc0e:	460c      	mov	r4, r1
 800cc10:	469a      	mov	sl, r3
 800cc12:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800cc16:	d807      	bhi.n	800cc28 <_printf_i+0x28>
 800cc18:	2f62      	cmp	r7, #98	@ 0x62
 800cc1a:	d80a      	bhi.n	800cc32 <_printf_i+0x32>
 800cc1c:	2f00      	cmp	r7, #0
 800cc1e:	f000 80d2 	beq.w	800cdc6 <_printf_i+0x1c6>
 800cc22:	2f58      	cmp	r7, #88	@ 0x58
 800cc24:	f000 80b9 	beq.w	800cd9a <_printf_i+0x19a>
 800cc28:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800cc2c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800cc30:	e03a      	b.n	800cca8 <_printf_i+0xa8>
 800cc32:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800cc36:	2b15      	cmp	r3, #21
 800cc38:	d8f6      	bhi.n	800cc28 <_printf_i+0x28>
 800cc3a:	a101      	add	r1, pc, #4	@ (adr r1, 800cc40 <_printf_i+0x40>)
 800cc3c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800cc40:	0800cc99 	.word	0x0800cc99
 800cc44:	0800ccad 	.word	0x0800ccad
 800cc48:	0800cc29 	.word	0x0800cc29
 800cc4c:	0800cc29 	.word	0x0800cc29
 800cc50:	0800cc29 	.word	0x0800cc29
 800cc54:	0800cc29 	.word	0x0800cc29
 800cc58:	0800ccad 	.word	0x0800ccad
 800cc5c:	0800cc29 	.word	0x0800cc29
 800cc60:	0800cc29 	.word	0x0800cc29
 800cc64:	0800cc29 	.word	0x0800cc29
 800cc68:	0800cc29 	.word	0x0800cc29
 800cc6c:	0800cdad 	.word	0x0800cdad
 800cc70:	0800ccd7 	.word	0x0800ccd7
 800cc74:	0800cd67 	.word	0x0800cd67
 800cc78:	0800cc29 	.word	0x0800cc29
 800cc7c:	0800cc29 	.word	0x0800cc29
 800cc80:	0800cdcf 	.word	0x0800cdcf
 800cc84:	0800cc29 	.word	0x0800cc29
 800cc88:	0800ccd7 	.word	0x0800ccd7
 800cc8c:	0800cc29 	.word	0x0800cc29
 800cc90:	0800cc29 	.word	0x0800cc29
 800cc94:	0800cd6f 	.word	0x0800cd6f
 800cc98:	6833      	ldr	r3, [r6, #0]
 800cc9a:	1d1a      	adds	r2, r3, #4
 800cc9c:	681b      	ldr	r3, [r3, #0]
 800cc9e:	6032      	str	r2, [r6, #0]
 800cca0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800cca4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800cca8:	2301      	movs	r3, #1
 800ccaa:	e09d      	b.n	800cde8 <_printf_i+0x1e8>
 800ccac:	6833      	ldr	r3, [r6, #0]
 800ccae:	6820      	ldr	r0, [r4, #0]
 800ccb0:	1d19      	adds	r1, r3, #4
 800ccb2:	6031      	str	r1, [r6, #0]
 800ccb4:	0606      	lsls	r6, r0, #24
 800ccb6:	d501      	bpl.n	800ccbc <_printf_i+0xbc>
 800ccb8:	681d      	ldr	r5, [r3, #0]
 800ccba:	e003      	b.n	800ccc4 <_printf_i+0xc4>
 800ccbc:	0645      	lsls	r5, r0, #25
 800ccbe:	d5fb      	bpl.n	800ccb8 <_printf_i+0xb8>
 800ccc0:	f9b3 5000 	ldrsh.w	r5, [r3]
 800ccc4:	2d00      	cmp	r5, #0
 800ccc6:	da03      	bge.n	800ccd0 <_printf_i+0xd0>
 800ccc8:	232d      	movs	r3, #45	@ 0x2d
 800ccca:	426d      	negs	r5, r5
 800cccc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ccd0:	4859      	ldr	r0, [pc, #356]	@ (800ce38 <_printf_i+0x238>)
 800ccd2:	230a      	movs	r3, #10
 800ccd4:	e011      	b.n	800ccfa <_printf_i+0xfa>
 800ccd6:	6821      	ldr	r1, [r4, #0]
 800ccd8:	6833      	ldr	r3, [r6, #0]
 800ccda:	0608      	lsls	r0, r1, #24
 800ccdc:	f853 5b04 	ldr.w	r5, [r3], #4
 800cce0:	d402      	bmi.n	800cce8 <_printf_i+0xe8>
 800cce2:	0649      	lsls	r1, r1, #25
 800cce4:	bf48      	it	mi
 800cce6:	b2ad      	uxthmi	r5, r5
 800cce8:	2f6f      	cmp	r7, #111	@ 0x6f
 800ccea:	4853      	ldr	r0, [pc, #332]	@ (800ce38 <_printf_i+0x238>)
 800ccec:	6033      	str	r3, [r6, #0]
 800ccee:	bf14      	ite	ne
 800ccf0:	230a      	movne	r3, #10
 800ccf2:	2308      	moveq	r3, #8
 800ccf4:	2100      	movs	r1, #0
 800ccf6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800ccfa:	6866      	ldr	r6, [r4, #4]
 800ccfc:	60a6      	str	r6, [r4, #8]
 800ccfe:	2e00      	cmp	r6, #0
 800cd00:	bfa2      	ittt	ge
 800cd02:	6821      	ldrge	r1, [r4, #0]
 800cd04:	f021 0104 	bicge.w	r1, r1, #4
 800cd08:	6021      	strge	r1, [r4, #0]
 800cd0a:	b90d      	cbnz	r5, 800cd10 <_printf_i+0x110>
 800cd0c:	2e00      	cmp	r6, #0
 800cd0e:	d04b      	beq.n	800cda8 <_printf_i+0x1a8>
 800cd10:	4616      	mov	r6, r2
 800cd12:	fbb5 f1f3 	udiv	r1, r5, r3
 800cd16:	fb03 5711 	mls	r7, r3, r1, r5
 800cd1a:	5dc7      	ldrb	r7, [r0, r7]
 800cd1c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800cd20:	462f      	mov	r7, r5
 800cd22:	42bb      	cmp	r3, r7
 800cd24:	460d      	mov	r5, r1
 800cd26:	d9f4      	bls.n	800cd12 <_printf_i+0x112>
 800cd28:	2b08      	cmp	r3, #8
 800cd2a:	d10b      	bne.n	800cd44 <_printf_i+0x144>
 800cd2c:	6823      	ldr	r3, [r4, #0]
 800cd2e:	07df      	lsls	r7, r3, #31
 800cd30:	d508      	bpl.n	800cd44 <_printf_i+0x144>
 800cd32:	6923      	ldr	r3, [r4, #16]
 800cd34:	6861      	ldr	r1, [r4, #4]
 800cd36:	4299      	cmp	r1, r3
 800cd38:	bfde      	ittt	le
 800cd3a:	2330      	movle	r3, #48	@ 0x30
 800cd3c:	f806 3c01 	strble.w	r3, [r6, #-1]
 800cd40:	f106 36ff 	addle.w	r6, r6, #4294967295
 800cd44:	1b92      	subs	r2, r2, r6
 800cd46:	6122      	str	r2, [r4, #16]
 800cd48:	f8cd a000 	str.w	sl, [sp]
 800cd4c:	464b      	mov	r3, r9
 800cd4e:	aa03      	add	r2, sp, #12
 800cd50:	4621      	mov	r1, r4
 800cd52:	4640      	mov	r0, r8
 800cd54:	f7ff fee6 	bl	800cb24 <_printf_common>
 800cd58:	3001      	adds	r0, #1
 800cd5a:	d14a      	bne.n	800cdf2 <_printf_i+0x1f2>
 800cd5c:	f04f 30ff 	mov.w	r0, #4294967295
 800cd60:	b004      	add	sp, #16
 800cd62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cd66:	6823      	ldr	r3, [r4, #0]
 800cd68:	f043 0320 	orr.w	r3, r3, #32
 800cd6c:	6023      	str	r3, [r4, #0]
 800cd6e:	4833      	ldr	r0, [pc, #204]	@ (800ce3c <_printf_i+0x23c>)
 800cd70:	2778      	movs	r7, #120	@ 0x78
 800cd72:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800cd76:	6823      	ldr	r3, [r4, #0]
 800cd78:	6831      	ldr	r1, [r6, #0]
 800cd7a:	061f      	lsls	r7, r3, #24
 800cd7c:	f851 5b04 	ldr.w	r5, [r1], #4
 800cd80:	d402      	bmi.n	800cd88 <_printf_i+0x188>
 800cd82:	065f      	lsls	r7, r3, #25
 800cd84:	bf48      	it	mi
 800cd86:	b2ad      	uxthmi	r5, r5
 800cd88:	6031      	str	r1, [r6, #0]
 800cd8a:	07d9      	lsls	r1, r3, #31
 800cd8c:	bf44      	itt	mi
 800cd8e:	f043 0320 	orrmi.w	r3, r3, #32
 800cd92:	6023      	strmi	r3, [r4, #0]
 800cd94:	b11d      	cbz	r5, 800cd9e <_printf_i+0x19e>
 800cd96:	2310      	movs	r3, #16
 800cd98:	e7ac      	b.n	800ccf4 <_printf_i+0xf4>
 800cd9a:	4827      	ldr	r0, [pc, #156]	@ (800ce38 <_printf_i+0x238>)
 800cd9c:	e7e9      	b.n	800cd72 <_printf_i+0x172>
 800cd9e:	6823      	ldr	r3, [r4, #0]
 800cda0:	f023 0320 	bic.w	r3, r3, #32
 800cda4:	6023      	str	r3, [r4, #0]
 800cda6:	e7f6      	b.n	800cd96 <_printf_i+0x196>
 800cda8:	4616      	mov	r6, r2
 800cdaa:	e7bd      	b.n	800cd28 <_printf_i+0x128>
 800cdac:	6833      	ldr	r3, [r6, #0]
 800cdae:	6825      	ldr	r5, [r4, #0]
 800cdb0:	6961      	ldr	r1, [r4, #20]
 800cdb2:	1d18      	adds	r0, r3, #4
 800cdb4:	6030      	str	r0, [r6, #0]
 800cdb6:	062e      	lsls	r6, r5, #24
 800cdb8:	681b      	ldr	r3, [r3, #0]
 800cdba:	d501      	bpl.n	800cdc0 <_printf_i+0x1c0>
 800cdbc:	6019      	str	r1, [r3, #0]
 800cdbe:	e002      	b.n	800cdc6 <_printf_i+0x1c6>
 800cdc0:	0668      	lsls	r0, r5, #25
 800cdc2:	d5fb      	bpl.n	800cdbc <_printf_i+0x1bc>
 800cdc4:	8019      	strh	r1, [r3, #0]
 800cdc6:	2300      	movs	r3, #0
 800cdc8:	6123      	str	r3, [r4, #16]
 800cdca:	4616      	mov	r6, r2
 800cdcc:	e7bc      	b.n	800cd48 <_printf_i+0x148>
 800cdce:	6833      	ldr	r3, [r6, #0]
 800cdd0:	1d1a      	adds	r2, r3, #4
 800cdd2:	6032      	str	r2, [r6, #0]
 800cdd4:	681e      	ldr	r6, [r3, #0]
 800cdd6:	6862      	ldr	r2, [r4, #4]
 800cdd8:	2100      	movs	r1, #0
 800cdda:	4630      	mov	r0, r6
 800cddc:	f7f3 fa18 	bl	8000210 <memchr>
 800cde0:	b108      	cbz	r0, 800cde6 <_printf_i+0x1e6>
 800cde2:	1b80      	subs	r0, r0, r6
 800cde4:	6060      	str	r0, [r4, #4]
 800cde6:	6863      	ldr	r3, [r4, #4]
 800cde8:	6123      	str	r3, [r4, #16]
 800cdea:	2300      	movs	r3, #0
 800cdec:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800cdf0:	e7aa      	b.n	800cd48 <_printf_i+0x148>
 800cdf2:	6923      	ldr	r3, [r4, #16]
 800cdf4:	4632      	mov	r2, r6
 800cdf6:	4649      	mov	r1, r9
 800cdf8:	4640      	mov	r0, r8
 800cdfa:	47d0      	blx	sl
 800cdfc:	3001      	adds	r0, #1
 800cdfe:	d0ad      	beq.n	800cd5c <_printf_i+0x15c>
 800ce00:	6823      	ldr	r3, [r4, #0]
 800ce02:	079b      	lsls	r3, r3, #30
 800ce04:	d413      	bmi.n	800ce2e <_printf_i+0x22e>
 800ce06:	68e0      	ldr	r0, [r4, #12]
 800ce08:	9b03      	ldr	r3, [sp, #12]
 800ce0a:	4298      	cmp	r0, r3
 800ce0c:	bfb8      	it	lt
 800ce0e:	4618      	movlt	r0, r3
 800ce10:	e7a6      	b.n	800cd60 <_printf_i+0x160>
 800ce12:	2301      	movs	r3, #1
 800ce14:	4632      	mov	r2, r6
 800ce16:	4649      	mov	r1, r9
 800ce18:	4640      	mov	r0, r8
 800ce1a:	47d0      	blx	sl
 800ce1c:	3001      	adds	r0, #1
 800ce1e:	d09d      	beq.n	800cd5c <_printf_i+0x15c>
 800ce20:	3501      	adds	r5, #1
 800ce22:	68e3      	ldr	r3, [r4, #12]
 800ce24:	9903      	ldr	r1, [sp, #12]
 800ce26:	1a5b      	subs	r3, r3, r1
 800ce28:	42ab      	cmp	r3, r5
 800ce2a:	dcf2      	bgt.n	800ce12 <_printf_i+0x212>
 800ce2c:	e7eb      	b.n	800ce06 <_printf_i+0x206>
 800ce2e:	2500      	movs	r5, #0
 800ce30:	f104 0619 	add.w	r6, r4, #25
 800ce34:	e7f5      	b.n	800ce22 <_printf_i+0x222>
 800ce36:	bf00      	nop
 800ce38:	0800da29 	.word	0x0800da29
 800ce3c:	0800da3a 	.word	0x0800da3a

0800ce40 <__sflush_r>:
 800ce40:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800ce44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ce48:	0716      	lsls	r6, r2, #28
 800ce4a:	4605      	mov	r5, r0
 800ce4c:	460c      	mov	r4, r1
 800ce4e:	d454      	bmi.n	800cefa <__sflush_r+0xba>
 800ce50:	684b      	ldr	r3, [r1, #4]
 800ce52:	2b00      	cmp	r3, #0
 800ce54:	dc02      	bgt.n	800ce5c <__sflush_r+0x1c>
 800ce56:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800ce58:	2b00      	cmp	r3, #0
 800ce5a:	dd48      	ble.n	800ceee <__sflush_r+0xae>
 800ce5c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ce5e:	2e00      	cmp	r6, #0
 800ce60:	d045      	beq.n	800ceee <__sflush_r+0xae>
 800ce62:	2300      	movs	r3, #0
 800ce64:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800ce68:	682f      	ldr	r7, [r5, #0]
 800ce6a:	6a21      	ldr	r1, [r4, #32]
 800ce6c:	602b      	str	r3, [r5, #0]
 800ce6e:	d030      	beq.n	800ced2 <__sflush_r+0x92>
 800ce70:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800ce72:	89a3      	ldrh	r3, [r4, #12]
 800ce74:	0759      	lsls	r1, r3, #29
 800ce76:	d505      	bpl.n	800ce84 <__sflush_r+0x44>
 800ce78:	6863      	ldr	r3, [r4, #4]
 800ce7a:	1ad2      	subs	r2, r2, r3
 800ce7c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800ce7e:	b10b      	cbz	r3, 800ce84 <__sflush_r+0x44>
 800ce80:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800ce82:	1ad2      	subs	r2, r2, r3
 800ce84:	2300      	movs	r3, #0
 800ce86:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ce88:	6a21      	ldr	r1, [r4, #32]
 800ce8a:	4628      	mov	r0, r5
 800ce8c:	47b0      	blx	r6
 800ce8e:	1c43      	adds	r3, r0, #1
 800ce90:	89a3      	ldrh	r3, [r4, #12]
 800ce92:	d106      	bne.n	800cea2 <__sflush_r+0x62>
 800ce94:	6829      	ldr	r1, [r5, #0]
 800ce96:	291d      	cmp	r1, #29
 800ce98:	d82b      	bhi.n	800cef2 <__sflush_r+0xb2>
 800ce9a:	4a2a      	ldr	r2, [pc, #168]	@ (800cf44 <__sflush_r+0x104>)
 800ce9c:	410a      	asrs	r2, r1
 800ce9e:	07d6      	lsls	r6, r2, #31
 800cea0:	d427      	bmi.n	800cef2 <__sflush_r+0xb2>
 800cea2:	2200      	movs	r2, #0
 800cea4:	6062      	str	r2, [r4, #4]
 800cea6:	04d9      	lsls	r1, r3, #19
 800cea8:	6922      	ldr	r2, [r4, #16]
 800ceaa:	6022      	str	r2, [r4, #0]
 800ceac:	d504      	bpl.n	800ceb8 <__sflush_r+0x78>
 800ceae:	1c42      	adds	r2, r0, #1
 800ceb0:	d101      	bne.n	800ceb6 <__sflush_r+0x76>
 800ceb2:	682b      	ldr	r3, [r5, #0]
 800ceb4:	b903      	cbnz	r3, 800ceb8 <__sflush_r+0x78>
 800ceb6:	6560      	str	r0, [r4, #84]	@ 0x54
 800ceb8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ceba:	602f      	str	r7, [r5, #0]
 800cebc:	b1b9      	cbz	r1, 800ceee <__sflush_r+0xae>
 800cebe:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800cec2:	4299      	cmp	r1, r3
 800cec4:	d002      	beq.n	800cecc <__sflush_r+0x8c>
 800cec6:	4628      	mov	r0, r5
 800cec8:	f7ff fbf2 	bl	800c6b0 <_free_r>
 800cecc:	2300      	movs	r3, #0
 800cece:	6363      	str	r3, [r4, #52]	@ 0x34
 800ced0:	e00d      	b.n	800ceee <__sflush_r+0xae>
 800ced2:	2301      	movs	r3, #1
 800ced4:	4628      	mov	r0, r5
 800ced6:	47b0      	blx	r6
 800ced8:	4602      	mov	r2, r0
 800ceda:	1c50      	adds	r0, r2, #1
 800cedc:	d1c9      	bne.n	800ce72 <__sflush_r+0x32>
 800cede:	682b      	ldr	r3, [r5, #0]
 800cee0:	2b00      	cmp	r3, #0
 800cee2:	d0c6      	beq.n	800ce72 <__sflush_r+0x32>
 800cee4:	2b1d      	cmp	r3, #29
 800cee6:	d001      	beq.n	800ceec <__sflush_r+0xac>
 800cee8:	2b16      	cmp	r3, #22
 800ceea:	d11e      	bne.n	800cf2a <__sflush_r+0xea>
 800ceec:	602f      	str	r7, [r5, #0]
 800ceee:	2000      	movs	r0, #0
 800cef0:	e022      	b.n	800cf38 <__sflush_r+0xf8>
 800cef2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cef6:	b21b      	sxth	r3, r3
 800cef8:	e01b      	b.n	800cf32 <__sflush_r+0xf2>
 800cefa:	690f      	ldr	r7, [r1, #16]
 800cefc:	2f00      	cmp	r7, #0
 800cefe:	d0f6      	beq.n	800ceee <__sflush_r+0xae>
 800cf00:	0793      	lsls	r3, r2, #30
 800cf02:	680e      	ldr	r6, [r1, #0]
 800cf04:	bf08      	it	eq
 800cf06:	694b      	ldreq	r3, [r1, #20]
 800cf08:	600f      	str	r7, [r1, #0]
 800cf0a:	bf18      	it	ne
 800cf0c:	2300      	movne	r3, #0
 800cf0e:	eba6 0807 	sub.w	r8, r6, r7
 800cf12:	608b      	str	r3, [r1, #8]
 800cf14:	f1b8 0f00 	cmp.w	r8, #0
 800cf18:	dde9      	ble.n	800ceee <__sflush_r+0xae>
 800cf1a:	6a21      	ldr	r1, [r4, #32]
 800cf1c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800cf1e:	4643      	mov	r3, r8
 800cf20:	463a      	mov	r2, r7
 800cf22:	4628      	mov	r0, r5
 800cf24:	47b0      	blx	r6
 800cf26:	2800      	cmp	r0, #0
 800cf28:	dc08      	bgt.n	800cf3c <__sflush_r+0xfc>
 800cf2a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cf2e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cf32:	81a3      	strh	r3, [r4, #12]
 800cf34:	f04f 30ff 	mov.w	r0, #4294967295
 800cf38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cf3c:	4407      	add	r7, r0
 800cf3e:	eba8 0800 	sub.w	r8, r8, r0
 800cf42:	e7e7      	b.n	800cf14 <__sflush_r+0xd4>
 800cf44:	dfbffffe 	.word	0xdfbffffe

0800cf48 <_fflush_r>:
 800cf48:	b538      	push	{r3, r4, r5, lr}
 800cf4a:	690b      	ldr	r3, [r1, #16]
 800cf4c:	4605      	mov	r5, r0
 800cf4e:	460c      	mov	r4, r1
 800cf50:	b913      	cbnz	r3, 800cf58 <_fflush_r+0x10>
 800cf52:	2500      	movs	r5, #0
 800cf54:	4628      	mov	r0, r5
 800cf56:	bd38      	pop	{r3, r4, r5, pc}
 800cf58:	b118      	cbz	r0, 800cf62 <_fflush_r+0x1a>
 800cf5a:	6a03      	ldr	r3, [r0, #32]
 800cf5c:	b90b      	cbnz	r3, 800cf62 <_fflush_r+0x1a>
 800cf5e:	f7ff f90f 	bl	800c180 <__sinit>
 800cf62:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cf66:	2b00      	cmp	r3, #0
 800cf68:	d0f3      	beq.n	800cf52 <_fflush_r+0xa>
 800cf6a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800cf6c:	07d0      	lsls	r0, r2, #31
 800cf6e:	d404      	bmi.n	800cf7a <_fflush_r+0x32>
 800cf70:	0599      	lsls	r1, r3, #22
 800cf72:	d402      	bmi.n	800cf7a <_fflush_r+0x32>
 800cf74:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800cf76:	f7ff fb82 	bl	800c67e <__retarget_lock_acquire_recursive>
 800cf7a:	4628      	mov	r0, r5
 800cf7c:	4621      	mov	r1, r4
 800cf7e:	f7ff ff5f 	bl	800ce40 <__sflush_r>
 800cf82:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800cf84:	07da      	lsls	r2, r3, #31
 800cf86:	4605      	mov	r5, r0
 800cf88:	d4e4      	bmi.n	800cf54 <_fflush_r+0xc>
 800cf8a:	89a3      	ldrh	r3, [r4, #12]
 800cf8c:	059b      	lsls	r3, r3, #22
 800cf8e:	d4e1      	bmi.n	800cf54 <_fflush_r+0xc>
 800cf90:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800cf92:	f7ff fb75 	bl	800c680 <__retarget_lock_release_recursive>
 800cf96:	e7dd      	b.n	800cf54 <_fflush_r+0xc>

0800cf98 <__swhatbuf_r>:
 800cf98:	b570      	push	{r4, r5, r6, lr}
 800cf9a:	460c      	mov	r4, r1
 800cf9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cfa0:	2900      	cmp	r1, #0
 800cfa2:	b096      	sub	sp, #88	@ 0x58
 800cfa4:	4615      	mov	r5, r2
 800cfa6:	461e      	mov	r6, r3
 800cfa8:	da0d      	bge.n	800cfc6 <__swhatbuf_r+0x2e>
 800cfaa:	89a3      	ldrh	r3, [r4, #12]
 800cfac:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800cfb0:	f04f 0100 	mov.w	r1, #0
 800cfb4:	bf14      	ite	ne
 800cfb6:	2340      	movne	r3, #64	@ 0x40
 800cfb8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800cfbc:	2000      	movs	r0, #0
 800cfbe:	6031      	str	r1, [r6, #0]
 800cfc0:	602b      	str	r3, [r5, #0]
 800cfc2:	b016      	add	sp, #88	@ 0x58
 800cfc4:	bd70      	pop	{r4, r5, r6, pc}
 800cfc6:	466a      	mov	r2, sp
 800cfc8:	f000 f848 	bl	800d05c <_fstat_r>
 800cfcc:	2800      	cmp	r0, #0
 800cfce:	dbec      	blt.n	800cfaa <__swhatbuf_r+0x12>
 800cfd0:	9901      	ldr	r1, [sp, #4]
 800cfd2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800cfd6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800cfda:	4259      	negs	r1, r3
 800cfdc:	4159      	adcs	r1, r3
 800cfde:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800cfe2:	e7eb      	b.n	800cfbc <__swhatbuf_r+0x24>

0800cfe4 <__smakebuf_r>:
 800cfe4:	898b      	ldrh	r3, [r1, #12]
 800cfe6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cfe8:	079d      	lsls	r5, r3, #30
 800cfea:	4606      	mov	r6, r0
 800cfec:	460c      	mov	r4, r1
 800cfee:	d507      	bpl.n	800d000 <__smakebuf_r+0x1c>
 800cff0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800cff4:	6023      	str	r3, [r4, #0]
 800cff6:	6123      	str	r3, [r4, #16]
 800cff8:	2301      	movs	r3, #1
 800cffa:	6163      	str	r3, [r4, #20]
 800cffc:	b003      	add	sp, #12
 800cffe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d000:	ab01      	add	r3, sp, #4
 800d002:	466a      	mov	r2, sp
 800d004:	f7ff ffc8 	bl	800cf98 <__swhatbuf_r>
 800d008:	9f00      	ldr	r7, [sp, #0]
 800d00a:	4605      	mov	r5, r0
 800d00c:	4639      	mov	r1, r7
 800d00e:	4630      	mov	r0, r6
 800d010:	f7ff fbba 	bl	800c788 <_malloc_r>
 800d014:	b948      	cbnz	r0, 800d02a <__smakebuf_r+0x46>
 800d016:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d01a:	059a      	lsls	r2, r3, #22
 800d01c:	d4ee      	bmi.n	800cffc <__smakebuf_r+0x18>
 800d01e:	f023 0303 	bic.w	r3, r3, #3
 800d022:	f043 0302 	orr.w	r3, r3, #2
 800d026:	81a3      	strh	r3, [r4, #12]
 800d028:	e7e2      	b.n	800cff0 <__smakebuf_r+0xc>
 800d02a:	89a3      	ldrh	r3, [r4, #12]
 800d02c:	6020      	str	r0, [r4, #0]
 800d02e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d032:	81a3      	strh	r3, [r4, #12]
 800d034:	9b01      	ldr	r3, [sp, #4]
 800d036:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800d03a:	b15b      	cbz	r3, 800d054 <__smakebuf_r+0x70>
 800d03c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d040:	4630      	mov	r0, r6
 800d042:	f000 f81d 	bl	800d080 <_isatty_r>
 800d046:	b128      	cbz	r0, 800d054 <__smakebuf_r+0x70>
 800d048:	89a3      	ldrh	r3, [r4, #12]
 800d04a:	f023 0303 	bic.w	r3, r3, #3
 800d04e:	f043 0301 	orr.w	r3, r3, #1
 800d052:	81a3      	strh	r3, [r4, #12]
 800d054:	89a3      	ldrh	r3, [r4, #12]
 800d056:	431d      	orrs	r5, r3
 800d058:	81a5      	strh	r5, [r4, #12]
 800d05a:	e7cf      	b.n	800cffc <__smakebuf_r+0x18>

0800d05c <_fstat_r>:
 800d05c:	b538      	push	{r3, r4, r5, lr}
 800d05e:	4d07      	ldr	r5, [pc, #28]	@ (800d07c <_fstat_r+0x20>)
 800d060:	2300      	movs	r3, #0
 800d062:	4604      	mov	r4, r0
 800d064:	4608      	mov	r0, r1
 800d066:	4611      	mov	r1, r2
 800d068:	602b      	str	r3, [r5, #0]
 800d06a:	f7f4 f9c6 	bl	80013fa <_fstat>
 800d06e:	1c43      	adds	r3, r0, #1
 800d070:	d102      	bne.n	800d078 <_fstat_r+0x1c>
 800d072:	682b      	ldr	r3, [r5, #0]
 800d074:	b103      	cbz	r3, 800d078 <_fstat_r+0x1c>
 800d076:	6023      	str	r3, [r4, #0]
 800d078:	bd38      	pop	{r3, r4, r5, pc}
 800d07a:	bf00      	nop
 800d07c:	20005960 	.word	0x20005960

0800d080 <_isatty_r>:
 800d080:	b538      	push	{r3, r4, r5, lr}
 800d082:	4d06      	ldr	r5, [pc, #24]	@ (800d09c <_isatty_r+0x1c>)
 800d084:	2300      	movs	r3, #0
 800d086:	4604      	mov	r4, r0
 800d088:	4608      	mov	r0, r1
 800d08a:	602b      	str	r3, [r5, #0]
 800d08c:	f7f4 f9c5 	bl	800141a <_isatty>
 800d090:	1c43      	adds	r3, r0, #1
 800d092:	d102      	bne.n	800d09a <_isatty_r+0x1a>
 800d094:	682b      	ldr	r3, [r5, #0]
 800d096:	b103      	cbz	r3, 800d09a <_isatty_r+0x1a>
 800d098:	6023      	str	r3, [r4, #0]
 800d09a:	bd38      	pop	{r3, r4, r5, pc}
 800d09c:	20005960 	.word	0x20005960

0800d0a0 <_sbrk_r>:
 800d0a0:	b538      	push	{r3, r4, r5, lr}
 800d0a2:	4d06      	ldr	r5, [pc, #24]	@ (800d0bc <_sbrk_r+0x1c>)
 800d0a4:	2300      	movs	r3, #0
 800d0a6:	4604      	mov	r4, r0
 800d0a8:	4608      	mov	r0, r1
 800d0aa:	602b      	str	r3, [r5, #0]
 800d0ac:	f7f4 f9ce 	bl	800144c <_sbrk>
 800d0b0:	1c43      	adds	r3, r0, #1
 800d0b2:	d102      	bne.n	800d0ba <_sbrk_r+0x1a>
 800d0b4:	682b      	ldr	r3, [r5, #0]
 800d0b6:	b103      	cbz	r3, 800d0ba <_sbrk_r+0x1a>
 800d0b8:	6023      	str	r3, [r4, #0]
 800d0ba:	bd38      	pop	{r3, r4, r5, pc}
 800d0bc:	20005960 	.word	0x20005960

0800d0c0 <_init>:
 800d0c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d0c2:	bf00      	nop
 800d0c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d0c6:	bc08      	pop	{r3}
 800d0c8:	469e      	mov	lr, r3
 800d0ca:	4770      	bx	lr

0800d0cc <_fini>:
 800d0cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d0ce:	bf00      	nop
 800d0d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d0d2:	bc08      	pop	{r3}
 800d0d4:	469e      	mov	lr, r3
 800d0d6:	4770      	bx	lr
