
RELAY_HUB_W5500.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010798  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000c68  08010938  08010938  00011938  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080115a0  080115a0  000132b4  2**0
                  CONTENTS
  4 .ARM          00000008  080115a0  080115a0  000125a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080115a8  080115a8  000132b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080115a8  080115a8  000125a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080115ac  080115ac  000125ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000002b4  20000000  080115b0  00013000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005840  200002b4  08011864  000132b4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20005af4  08011864  00013af4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000132b4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002347e  00000000  00000000  000132e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000057d5  00000000  00000000  00036762  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000020d8  00000000  00000000  0003bf38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001a02  00000000  00000000  0003e010  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00008368  00000000  00000000  0003fa12  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00024448  00000000  00000000  00047d7a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a4448  00000000  00000000  0006c1c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0011060a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009cfc  00000000  00000000  00110650  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  0011a34c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200002b4 	.word	0x200002b4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08010920 	.word	0x08010920

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200002b8 	.word	0x200002b8
 80001dc:	08010920 	.word	0x08010920

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	@ 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_d2iz>:
 8000b5c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b60:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b64:	d215      	bcs.n	8000b92 <__aeabi_d2iz+0x36>
 8000b66:	d511      	bpl.n	8000b8c <__aeabi_d2iz+0x30>
 8000b68:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b6c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b70:	d912      	bls.n	8000b98 <__aeabi_d2iz+0x3c>
 8000b72:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b76:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b7a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b82:	fa23 f002 	lsr.w	r0, r3, r2
 8000b86:	bf18      	it	ne
 8000b88:	4240      	negne	r0, r0
 8000b8a:	4770      	bx	lr
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b96:	d105      	bne.n	8000ba4 <__aeabi_d2iz+0x48>
 8000b98:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b9c:	bf08      	it	eq
 8000b9e:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000ba2:	4770      	bx	lr
 8000ba4:	f04f 0000 	mov.w	r0, #0
 8000ba8:	4770      	bx	lr
 8000baa:	bf00      	nop

08000bac <__aeabi_d2uiz>:
 8000bac:	004a      	lsls	r2, r1, #1
 8000bae:	d211      	bcs.n	8000bd4 <__aeabi_d2uiz+0x28>
 8000bb0:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb4:	d211      	bcs.n	8000bda <__aeabi_d2uiz+0x2e>
 8000bb6:	d50d      	bpl.n	8000bd4 <__aeabi_d2uiz+0x28>
 8000bb8:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bbc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bc0:	d40e      	bmi.n	8000be0 <__aeabi_d2uiz+0x34>
 8000bc2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bca:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	4770      	bx	lr
 8000bd4:	f04f 0000 	mov.w	r0, #0
 8000bd8:	4770      	bx	lr
 8000bda:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bde:	d102      	bne.n	8000be6 <__aeabi_d2uiz+0x3a>
 8000be0:	f04f 30ff 	mov.w	r0, #4294967295
 8000be4:	4770      	bx	lr
 8000be6:	f04f 0000 	mov.w	r0, #0
 8000bea:	4770      	bx	lr

08000bec <__aeabi_uldivmod>:
 8000bec:	b953      	cbnz	r3, 8000c04 <__aeabi_uldivmod+0x18>
 8000bee:	b94a      	cbnz	r2, 8000c04 <__aeabi_uldivmod+0x18>
 8000bf0:	2900      	cmp	r1, #0
 8000bf2:	bf08      	it	eq
 8000bf4:	2800      	cmpeq	r0, #0
 8000bf6:	bf1c      	itt	ne
 8000bf8:	f04f 31ff 	movne.w	r1, #4294967295
 8000bfc:	f04f 30ff 	movne.w	r0, #4294967295
 8000c00:	f000 b9a0 	b.w	8000f44 <__aeabi_idiv0>
 8000c04:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c08:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c0c:	f000 f83c 	bl	8000c88 <__udivmoddi4>
 8000c10:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c14:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c18:	b004      	add	sp, #16
 8000c1a:	4770      	bx	lr

08000c1c <__aeabi_d2lz>:
 8000c1c:	b538      	push	{r3, r4, r5, lr}
 8000c1e:	2200      	movs	r2, #0
 8000c20:	2300      	movs	r3, #0
 8000c22:	4604      	mov	r4, r0
 8000c24:	460d      	mov	r5, r1
 8000c26:	f7ff ff71 	bl	8000b0c <__aeabi_dcmplt>
 8000c2a:	b928      	cbnz	r0, 8000c38 <__aeabi_d2lz+0x1c>
 8000c2c:	4620      	mov	r0, r4
 8000c2e:	4629      	mov	r1, r5
 8000c30:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000c34:	f000 b80a 	b.w	8000c4c <__aeabi_d2ulz>
 8000c38:	4620      	mov	r0, r4
 8000c3a:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000c3e:	f000 f805 	bl	8000c4c <__aeabi_d2ulz>
 8000c42:	4240      	negs	r0, r0
 8000c44:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c48:	bd38      	pop	{r3, r4, r5, pc}
 8000c4a:	bf00      	nop

08000c4c <__aeabi_d2ulz>:
 8000c4c:	b5d0      	push	{r4, r6, r7, lr}
 8000c4e:	4b0c      	ldr	r3, [pc, #48]	@ (8000c80 <__aeabi_d2ulz+0x34>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	4606      	mov	r6, r0
 8000c54:	460f      	mov	r7, r1
 8000c56:	f7ff fce7 	bl	8000628 <__aeabi_dmul>
 8000c5a:	f7ff ffa7 	bl	8000bac <__aeabi_d2uiz>
 8000c5e:	4604      	mov	r4, r0
 8000c60:	f7ff fc68 	bl	8000534 <__aeabi_ui2d>
 8000c64:	4b07      	ldr	r3, [pc, #28]	@ (8000c84 <__aeabi_d2ulz+0x38>)
 8000c66:	2200      	movs	r2, #0
 8000c68:	f7ff fcde 	bl	8000628 <__aeabi_dmul>
 8000c6c:	4602      	mov	r2, r0
 8000c6e:	460b      	mov	r3, r1
 8000c70:	4630      	mov	r0, r6
 8000c72:	4639      	mov	r1, r7
 8000c74:	f7ff fb20 	bl	80002b8 <__aeabi_dsub>
 8000c78:	f7ff ff98 	bl	8000bac <__aeabi_d2uiz>
 8000c7c:	4621      	mov	r1, r4
 8000c7e:	bdd0      	pop	{r4, r6, r7, pc}
 8000c80:	3df00000 	.word	0x3df00000
 8000c84:	41f00000 	.word	0x41f00000

08000c88 <__udivmoddi4>:
 8000c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c8c:	9d08      	ldr	r5, [sp, #32]
 8000c8e:	460c      	mov	r4, r1
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d14e      	bne.n	8000d32 <__udivmoddi4+0xaa>
 8000c94:	4694      	mov	ip, r2
 8000c96:	458c      	cmp	ip, r1
 8000c98:	4686      	mov	lr, r0
 8000c9a:	fab2 f282 	clz	r2, r2
 8000c9e:	d962      	bls.n	8000d66 <__udivmoddi4+0xde>
 8000ca0:	b14a      	cbz	r2, 8000cb6 <__udivmoddi4+0x2e>
 8000ca2:	f1c2 0320 	rsb	r3, r2, #32
 8000ca6:	4091      	lsls	r1, r2
 8000ca8:	fa20 f303 	lsr.w	r3, r0, r3
 8000cac:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cb0:	4319      	orrs	r1, r3
 8000cb2:	fa00 fe02 	lsl.w	lr, r0, r2
 8000cb6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cba:	fa1f f68c 	uxth.w	r6, ip
 8000cbe:	fbb1 f4f7 	udiv	r4, r1, r7
 8000cc2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cc6:	fb07 1114 	mls	r1, r7, r4, r1
 8000cca:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cce:	fb04 f106 	mul.w	r1, r4, r6
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	d90a      	bls.n	8000cec <__udivmoddi4+0x64>
 8000cd6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cda:	f104 30ff 	add.w	r0, r4, #4294967295
 8000cde:	f080 8112 	bcs.w	8000f06 <__udivmoddi4+0x27e>
 8000ce2:	4299      	cmp	r1, r3
 8000ce4:	f240 810f 	bls.w	8000f06 <__udivmoddi4+0x27e>
 8000ce8:	3c02      	subs	r4, #2
 8000cea:	4463      	add	r3, ip
 8000cec:	1a59      	subs	r1, r3, r1
 8000cee:	fa1f f38e 	uxth.w	r3, lr
 8000cf2:	fbb1 f0f7 	udiv	r0, r1, r7
 8000cf6:	fb07 1110 	mls	r1, r7, r0, r1
 8000cfa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cfe:	fb00 f606 	mul.w	r6, r0, r6
 8000d02:	429e      	cmp	r6, r3
 8000d04:	d90a      	bls.n	8000d1c <__udivmoddi4+0x94>
 8000d06:	eb1c 0303 	adds.w	r3, ip, r3
 8000d0a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d0e:	f080 80fc 	bcs.w	8000f0a <__udivmoddi4+0x282>
 8000d12:	429e      	cmp	r6, r3
 8000d14:	f240 80f9 	bls.w	8000f0a <__udivmoddi4+0x282>
 8000d18:	4463      	add	r3, ip
 8000d1a:	3802      	subs	r0, #2
 8000d1c:	1b9b      	subs	r3, r3, r6
 8000d1e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d22:	2100      	movs	r1, #0
 8000d24:	b11d      	cbz	r5, 8000d2e <__udivmoddi4+0xa6>
 8000d26:	40d3      	lsrs	r3, r2
 8000d28:	2200      	movs	r2, #0
 8000d2a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d32:	428b      	cmp	r3, r1
 8000d34:	d905      	bls.n	8000d42 <__udivmoddi4+0xba>
 8000d36:	b10d      	cbz	r5, 8000d3c <__udivmoddi4+0xb4>
 8000d38:	e9c5 0100 	strd	r0, r1, [r5]
 8000d3c:	2100      	movs	r1, #0
 8000d3e:	4608      	mov	r0, r1
 8000d40:	e7f5      	b.n	8000d2e <__udivmoddi4+0xa6>
 8000d42:	fab3 f183 	clz	r1, r3
 8000d46:	2900      	cmp	r1, #0
 8000d48:	d146      	bne.n	8000dd8 <__udivmoddi4+0x150>
 8000d4a:	42a3      	cmp	r3, r4
 8000d4c:	d302      	bcc.n	8000d54 <__udivmoddi4+0xcc>
 8000d4e:	4290      	cmp	r0, r2
 8000d50:	f0c0 80f0 	bcc.w	8000f34 <__udivmoddi4+0x2ac>
 8000d54:	1a86      	subs	r6, r0, r2
 8000d56:	eb64 0303 	sbc.w	r3, r4, r3
 8000d5a:	2001      	movs	r0, #1
 8000d5c:	2d00      	cmp	r5, #0
 8000d5e:	d0e6      	beq.n	8000d2e <__udivmoddi4+0xa6>
 8000d60:	e9c5 6300 	strd	r6, r3, [r5]
 8000d64:	e7e3      	b.n	8000d2e <__udivmoddi4+0xa6>
 8000d66:	2a00      	cmp	r2, #0
 8000d68:	f040 8090 	bne.w	8000e8c <__udivmoddi4+0x204>
 8000d6c:	eba1 040c 	sub.w	r4, r1, ip
 8000d70:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d74:	fa1f f78c 	uxth.w	r7, ip
 8000d78:	2101      	movs	r1, #1
 8000d7a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d7e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d82:	fb08 4416 	mls	r4, r8, r6, r4
 8000d86:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d8a:	fb07 f006 	mul.w	r0, r7, r6
 8000d8e:	4298      	cmp	r0, r3
 8000d90:	d908      	bls.n	8000da4 <__udivmoddi4+0x11c>
 8000d92:	eb1c 0303 	adds.w	r3, ip, r3
 8000d96:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d9a:	d202      	bcs.n	8000da2 <__udivmoddi4+0x11a>
 8000d9c:	4298      	cmp	r0, r3
 8000d9e:	f200 80cd 	bhi.w	8000f3c <__udivmoddi4+0x2b4>
 8000da2:	4626      	mov	r6, r4
 8000da4:	1a1c      	subs	r4, r3, r0
 8000da6:	fa1f f38e 	uxth.w	r3, lr
 8000daa:	fbb4 f0f8 	udiv	r0, r4, r8
 8000dae:	fb08 4410 	mls	r4, r8, r0, r4
 8000db2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000db6:	fb00 f707 	mul.w	r7, r0, r7
 8000dba:	429f      	cmp	r7, r3
 8000dbc:	d908      	bls.n	8000dd0 <__udivmoddi4+0x148>
 8000dbe:	eb1c 0303 	adds.w	r3, ip, r3
 8000dc2:	f100 34ff 	add.w	r4, r0, #4294967295
 8000dc6:	d202      	bcs.n	8000dce <__udivmoddi4+0x146>
 8000dc8:	429f      	cmp	r7, r3
 8000dca:	f200 80b0 	bhi.w	8000f2e <__udivmoddi4+0x2a6>
 8000dce:	4620      	mov	r0, r4
 8000dd0:	1bdb      	subs	r3, r3, r7
 8000dd2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dd6:	e7a5      	b.n	8000d24 <__udivmoddi4+0x9c>
 8000dd8:	f1c1 0620 	rsb	r6, r1, #32
 8000ddc:	408b      	lsls	r3, r1
 8000dde:	fa22 f706 	lsr.w	r7, r2, r6
 8000de2:	431f      	orrs	r7, r3
 8000de4:	fa20 fc06 	lsr.w	ip, r0, r6
 8000de8:	fa04 f301 	lsl.w	r3, r4, r1
 8000dec:	ea43 030c 	orr.w	r3, r3, ip
 8000df0:	40f4      	lsrs	r4, r6
 8000df2:	fa00 f801 	lsl.w	r8, r0, r1
 8000df6:	0c38      	lsrs	r0, r7, #16
 8000df8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000dfc:	fbb4 fef0 	udiv	lr, r4, r0
 8000e00:	fa1f fc87 	uxth.w	ip, r7
 8000e04:	fb00 441e 	mls	r4, r0, lr, r4
 8000e08:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e0c:	fb0e f90c 	mul.w	r9, lr, ip
 8000e10:	45a1      	cmp	r9, r4
 8000e12:	fa02 f201 	lsl.w	r2, r2, r1
 8000e16:	d90a      	bls.n	8000e2e <__udivmoddi4+0x1a6>
 8000e18:	193c      	adds	r4, r7, r4
 8000e1a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000e1e:	f080 8084 	bcs.w	8000f2a <__udivmoddi4+0x2a2>
 8000e22:	45a1      	cmp	r9, r4
 8000e24:	f240 8081 	bls.w	8000f2a <__udivmoddi4+0x2a2>
 8000e28:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e2c:	443c      	add	r4, r7
 8000e2e:	eba4 0409 	sub.w	r4, r4, r9
 8000e32:	fa1f f983 	uxth.w	r9, r3
 8000e36:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e3a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e3e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e42:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e46:	45a4      	cmp	ip, r4
 8000e48:	d907      	bls.n	8000e5a <__udivmoddi4+0x1d2>
 8000e4a:	193c      	adds	r4, r7, r4
 8000e4c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000e50:	d267      	bcs.n	8000f22 <__udivmoddi4+0x29a>
 8000e52:	45a4      	cmp	ip, r4
 8000e54:	d965      	bls.n	8000f22 <__udivmoddi4+0x29a>
 8000e56:	3b02      	subs	r3, #2
 8000e58:	443c      	add	r4, r7
 8000e5a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e5e:	fba0 9302 	umull	r9, r3, r0, r2
 8000e62:	eba4 040c 	sub.w	r4, r4, ip
 8000e66:	429c      	cmp	r4, r3
 8000e68:	46ce      	mov	lr, r9
 8000e6a:	469c      	mov	ip, r3
 8000e6c:	d351      	bcc.n	8000f12 <__udivmoddi4+0x28a>
 8000e6e:	d04e      	beq.n	8000f0e <__udivmoddi4+0x286>
 8000e70:	b155      	cbz	r5, 8000e88 <__udivmoddi4+0x200>
 8000e72:	ebb8 030e 	subs.w	r3, r8, lr
 8000e76:	eb64 040c 	sbc.w	r4, r4, ip
 8000e7a:	fa04 f606 	lsl.w	r6, r4, r6
 8000e7e:	40cb      	lsrs	r3, r1
 8000e80:	431e      	orrs	r6, r3
 8000e82:	40cc      	lsrs	r4, r1
 8000e84:	e9c5 6400 	strd	r6, r4, [r5]
 8000e88:	2100      	movs	r1, #0
 8000e8a:	e750      	b.n	8000d2e <__udivmoddi4+0xa6>
 8000e8c:	f1c2 0320 	rsb	r3, r2, #32
 8000e90:	fa20 f103 	lsr.w	r1, r0, r3
 8000e94:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e98:	fa24 f303 	lsr.w	r3, r4, r3
 8000e9c:	4094      	lsls	r4, r2
 8000e9e:	430c      	orrs	r4, r1
 8000ea0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ea4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ea8:	fa1f f78c 	uxth.w	r7, ip
 8000eac:	fbb3 f0f8 	udiv	r0, r3, r8
 8000eb0:	fb08 3110 	mls	r1, r8, r0, r3
 8000eb4:	0c23      	lsrs	r3, r4, #16
 8000eb6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000eba:	fb00 f107 	mul.w	r1, r0, r7
 8000ebe:	4299      	cmp	r1, r3
 8000ec0:	d908      	bls.n	8000ed4 <__udivmoddi4+0x24c>
 8000ec2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ec6:	f100 36ff 	add.w	r6, r0, #4294967295
 8000eca:	d22c      	bcs.n	8000f26 <__udivmoddi4+0x29e>
 8000ecc:	4299      	cmp	r1, r3
 8000ece:	d92a      	bls.n	8000f26 <__udivmoddi4+0x29e>
 8000ed0:	3802      	subs	r0, #2
 8000ed2:	4463      	add	r3, ip
 8000ed4:	1a5b      	subs	r3, r3, r1
 8000ed6:	b2a4      	uxth	r4, r4
 8000ed8:	fbb3 f1f8 	udiv	r1, r3, r8
 8000edc:	fb08 3311 	mls	r3, r8, r1, r3
 8000ee0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ee4:	fb01 f307 	mul.w	r3, r1, r7
 8000ee8:	42a3      	cmp	r3, r4
 8000eea:	d908      	bls.n	8000efe <__udivmoddi4+0x276>
 8000eec:	eb1c 0404 	adds.w	r4, ip, r4
 8000ef0:	f101 36ff 	add.w	r6, r1, #4294967295
 8000ef4:	d213      	bcs.n	8000f1e <__udivmoddi4+0x296>
 8000ef6:	42a3      	cmp	r3, r4
 8000ef8:	d911      	bls.n	8000f1e <__udivmoddi4+0x296>
 8000efa:	3902      	subs	r1, #2
 8000efc:	4464      	add	r4, ip
 8000efe:	1ae4      	subs	r4, r4, r3
 8000f00:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f04:	e739      	b.n	8000d7a <__udivmoddi4+0xf2>
 8000f06:	4604      	mov	r4, r0
 8000f08:	e6f0      	b.n	8000cec <__udivmoddi4+0x64>
 8000f0a:	4608      	mov	r0, r1
 8000f0c:	e706      	b.n	8000d1c <__udivmoddi4+0x94>
 8000f0e:	45c8      	cmp	r8, r9
 8000f10:	d2ae      	bcs.n	8000e70 <__udivmoddi4+0x1e8>
 8000f12:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f16:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f1a:	3801      	subs	r0, #1
 8000f1c:	e7a8      	b.n	8000e70 <__udivmoddi4+0x1e8>
 8000f1e:	4631      	mov	r1, r6
 8000f20:	e7ed      	b.n	8000efe <__udivmoddi4+0x276>
 8000f22:	4603      	mov	r3, r0
 8000f24:	e799      	b.n	8000e5a <__udivmoddi4+0x1d2>
 8000f26:	4630      	mov	r0, r6
 8000f28:	e7d4      	b.n	8000ed4 <__udivmoddi4+0x24c>
 8000f2a:	46d6      	mov	lr, sl
 8000f2c:	e77f      	b.n	8000e2e <__udivmoddi4+0x1a6>
 8000f2e:	4463      	add	r3, ip
 8000f30:	3802      	subs	r0, #2
 8000f32:	e74d      	b.n	8000dd0 <__udivmoddi4+0x148>
 8000f34:	4606      	mov	r6, r0
 8000f36:	4623      	mov	r3, r4
 8000f38:	4608      	mov	r0, r1
 8000f3a:	e70f      	b.n	8000d5c <__udivmoddi4+0xd4>
 8000f3c:	3e02      	subs	r6, #2
 8000f3e:	4463      	add	r3, ip
 8000f40:	e730      	b.n	8000da4 <__udivmoddi4+0x11c>
 8000f42:	bf00      	nop

08000f44 <__aeabi_idiv0>:
 8000f44:	4770      	bx	lr
 8000f46:	bf00      	nop

08000f48 <case_insensitive_strcmp>:
    return version;
}

/* Case insensitive string comparison, doesn't consider two NULL pointers equal though */
static int case_insensitive_strcmp(const unsigned char *string1, const unsigned char *string2)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	b085      	sub	sp, #20
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
 8000f50:	6039      	str	r1, [r7, #0]
    if ((string1 == NULL) || (string2 == NULL))
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d002      	beq.n	8000f5e <case_insensitive_strcmp+0x16>
 8000f58:	683b      	ldr	r3, [r7, #0]
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d101      	bne.n	8000f62 <case_insensitive_strcmp+0x1a>
    {
        return 1;
 8000f5e:	2301      	movs	r3, #1
 8000f60:	e056      	b.n	8001010 <case_insensitive_strcmp+0xc8>
    }

    if (string1 == string2)
 8000f62:	687a      	ldr	r2, [r7, #4]
 8000f64:	683b      	ldr	r3, [r7, #0]
 8000f66:	429a      	cmp	r2, r3
 8000f68:	d10d      	bne.n	8000f86 <case_insensitive_strcmp+0x3e>
    {
        return 0;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	e050      	b.n	8001010 <case_insensitive_strcmp+0xc8>
    }

    for(; tolower(*string1) == tolower(*string2); (void)string1++, string2++)
    {
        if (*string1 == '\0')
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	781b      	ldrb	r3, [r3, #0]
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d101      	bne.n	8000f7a <case_insensitive_strcmp+0x32>
        {
            return 0;
 8000f76:	2300      	movs	r3, #0
 8000f78:	e04a      	b.n	8001010 <case_insensitive_strcmp+0xc8>
    for(; tolower(*string1) == tolower(*string2); (void)string1++, string2++)
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	3301      	adds	r3, #1
 8000f7e:	607b      	str	r3, [r7, #4]
 8000f80:	683b      	ldr	r3, [r7, #0]
 8000f82:	3301      	adds	r3, #1
 8000f84:	603b      	str	r3, [r7, #0]
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	781b      	ldrb	r3, [r3, #0]
 8000f8a:	73fb      	strb	r3, [r7, #15]
 8000f8c:	7bfb      	ldrb	r3, [r7, #15]
 8000f8e:	3301      	adds	r3, #1
 8000f90:	4a22      	ldr	r2, [pc, #136]	@ (800101c <case_insensitive_strcmp+0xd4>)
 8000f92:	4413      	add	r3, r2
 8000f94:	781b      	ldrb	r3, [r3, #0]
 8000f96:	f003 0303 	and.w	r3, r3, #3
 8000f9a:	2b01      	cmp	r3, #1
 8000f9c:	d103      	bne.n	8000fa6 <case_insensitive_strcmp+0x5e>
 8000f9e:	7bfb      	ldrb	r3, [r7, #15]
 8000fa0:	f103 0220 	add.w	r2, r3, #32
 8000fa4:	e000      	b.n	8000fa8 <case_insensitive_strcmp+0x60>
 8000fa6:	7bfa      	ldrb	r2, [r7, #15]
 8000fa8:	683b      	ldr	r3, [r7, #0]
 8000faa:	781b      	ldrb	r3, [r3, #0]
 8000fac:	73bb      	strb	r3, [r7, #14]
 8000fae:	7bbb      	ldrb	r3, [r7, #14]
 8000fb0:	3301      	adds	r3, #1
 8000fb2:	491a      	ldr	r1, [pc, #104]	@ (800101c <case_insensitive_strcmp+0xd4>)
 8000fb4:	440b      	add	r3, r1
 8000fb6:	781b      	ldrb	r3, [r3, #0]
 8000fb8:	f003 0303 	and.w	r3, r3, #3
 8000fbc:	2b01      	cmp	r3, #1
 8000fbe:	d102      	bne.n	8000fc6 <case_insensitive_strcmp+0x7e>
 8000fc0:	7bbb      	ldrb	r3, [r7, #14]
 8000fc2:	3320      	adds	r3, #32
 8000fc4:	e000      	b.n	8000fc8 <case_insensitive_strcmp+0x80>
 8000fc6:	7bbb      	ldrb	r3, [r7, #14]
 8000fc8:	429a      	cmp	r2, r3
 8000fca:	d0d0      	beq.n	8000f6e <case_insensitive_strcmp+0x26>
        }
    }

    return tolower(*string1) - tolower(*string2);
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	781b      	ldrb	r3, [r3, #0]
 8000fd0:	737b      	strb	r3, [r7, #13]
 8000fd2:	7b7b      	ldrb	r3, [r7, #13]
 8000fd4:	3301      	adds	r3, #1
 8000fd6:	4a11      	ldr	r2, [pc, #68]	@ (800101c <case_insensitive_strcmp+0xd4>)
 8000fd8:	4413      	add	r3, r2
 8000fda:	781b      	ldrb	r3, [r3, #0]
 8000fdc:	f003 0303 	and.w	r3, r3, #3
 8000fe0:	2b01      	cmp	r3, #1
 8000fe2:	d103      	bne.n	8000fec <case_insensitive_strcmp+0xa4>
 8000fe4:	7b7b      	ldrb	r3, [r7, #13]
 8000fe6:	f103 0220 	add.w	r2, r3, #32
 8000fea:	e000      	b.n	8000fee <case_insensitive_strcmp+0xa6>
 8000fec:	7b7a      	ldrb	r2, [r7, #13]
 8000fee:	683b      	ldr	r3, [r7, #0]
 8000ff0:	781b      	ldrb	r3, [r3, #0]
 8000ff2:	733b      	strb	r3, [r7, #12]
 8000ff4:	7b3b      	ldrb	r3, [r7, #12]
 8000ff6:	3301      	adds	r3, #1
 8000ff8:	4908      	ldr	r1, [pc, #32]	@ (800101c <case_insensitive_strcmp+0xd4>)
 8000ffa:	440b      	add	r3, r1
 8000ffc:	781b      	ldrb	r3, [r3, #0]
 8000ffe:	f003 0303 	and.w	r3, r3, #3
 8001002:	2b01      	cmp	r3, #1
 8001004:	d102      	bne.n	800100c <case_insensitive_strcmp+0xc4>
 8001006:	7b3b      	ldrb	r3, [r7, #12]
 8001008:	3320      	adds	r3, #32
 800100a:	e000      	b.n	800100e <case_insensitive_strcmp+0xc6>
 800100c:	7b3b      	ldrb	r3, [r7, #12]
 800100e:	1ad3      	subs	r3, r2, r3
}
 8001010:	4618      	mov	r0, r3
 8001012:	3714      	adds	r7, #20
 8001014:	46bd      	mov	sp, r7
 8001016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101a:	4770      	bx	lr
 800101c:	08011248 	.word	0x08011248

08001020 <cJSON_New_Item>:
    }
}

/* Internal constructor. */
static cJSON *cJSON_New_Item(const internal_hooks * const hooks)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b084      	sub	sp, #16
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
    cJSON* node = (cJSON*)hooks->allocate(sizeof(cJSON));
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	2028      	movs	r0, #40	@ 0x28
 800102e:	4798      	blx	r3
 8001030:	60f8      	str	r0, [r7, #12]
    if (node)
 8001032:	68fb      	ldr	r3, [r7, #12]
 8001034:	2b00      	cmp	r3, #0
 8001036:	d004      	beq.n	8001042 <cJSON_New_Item+0x22>
    {
        memset(node, '\0', sizeof(cJSON));
 8001038:	2228      	movs	r2, #40	@ 0x28
 800103a:	2100      	movs	r1, #0
 800103c:	68f8      	ldr	r0, [r7, #12]
 800103e:	f00d fe51 	bl	800ece4 <memset>
    }

    return node;
 8001042:	68fb      	ldr	r3, [r7, #12]
}
 8001044:	4618      	mov	r0, r3
 8001046:	3710      	adds	r7, #16
 8001048:	46bd      	mov	sp, r7
 800104a:	bd80      	pop	{r7, pc}

0800104c <cJSON_Delete>:

/* Delete a cJSON structure. */
CJSON_PUBLIC(void) cJSON_Delete(cJSON *item)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b084      	sub	sp, #16
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
    cJSON *next = NULL;
 8001054:	2300      	movs	r3, #0
 8001056:	60fb      	str	r3, [r7, #12]
    while (item != NULL)
 8001058:	e03d      	b.n	80010d6 <cJSON_Delete+0x8a>
    {
        next = item->next;
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	60fb      	str	r3, [r7, #12]
        if (!(item->type & cJSON_IsReference) && (item->child != NULL))
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	68db      	ldr	r3, [r3, #12]
 8001064:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001068:	2b00      	cmp	r3, #0
 800106a:	d108      	bne.n	800107e <cJSON_Delete+0x32>
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	689b      	ldr	r3, [r3, #8]
 8001070:	2b00      	cmp	r3, #0
 8001072:	d004      	beq.n	800107e <cJSON_Delete+0x32>
        {
            cJSON_Delete(item->child);
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	689b      	ldr	r3, [r3, #8]
 8001078:	4618      	mov	r0, r3
 800107a:	f7ff ffe7 	bl	800104c <cJSON_Delete>
        }
        if (!(item->type & cJSON_IsReference) && (item->valuestring != NULL))
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	68db      	ldr	r3, [r3, #12]
 8001082:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001086:	2b00      	cmp	r3, #0
 8001088:	d10c      	bne.n	80010a4 <cJSON_Delete+0x58>
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	691b      	ldr	r3, [r3, #16]
 800108e:	2b00      	cmp	r3, #0
 8001090:	d008      	beq.n	80010a4 <cJSON_Delete+0x58>
        {
            global_hooks.deallocate(item->valuestring);
 8001092:	4b15      	ldr	r3, [pc, #84]	@ (80010e8 <cJSON_Delete+0x9c>)
 8001094:	685b      	ldr	r3, [r3, #4]
 8001096:	687a      	ldr	r2, [r7, #4]
 8001098:	6912      	ldr	r2, [r2, #16]
 800109a:	4610      	mov	r0, r2
 800109c:	4798      	blx	r3
            item->valuestring = NULL;
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	2200      	movs	r2, #0
 80010a2:	611a      	str	r2, [r3, #16]
        }
        if (!(item->type & cJSON_StringIsConst) && (item->string != NULL))
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	68db      	ldr	r3, [r3, #12]
 80010a8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d10c      	bne.n	80010ca <cJSON_Delete+0x7e>
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	6a1b      	ldr	r3, [r3, #32]
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d008      	beq.n	80010ca <cJSON_Delete+0x7e>
        {
            global_hooks.deallocate(item->string);
 80010b8:	4b0b      	ldr	r3, [pc, #44]	@ (80010e8 <cJSON_Delete+0x9c>)
 80010ba:	685b      	ldr	r3, [r3, #4]
 80010bc:	687a      	ldr	r2, [r7, #4]
 80010be:	6a12      	ldr	r2, [r2, #32]
 80010c0:	4610      	mov	r0, r2
 80010c2:	4798      	blx	r3
            item->string = NULL;
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	2200      	movs	r2, #0
 80010c8:	621a      	str	r2, [r3, #32]
        }
        global_hooks.deallocate(item);
 80010ca:	4b07      	ldr	r3, [pc, #28]	@ (80010e8 <cJSON_Delete+0x9c>)
 80010cc:	685b      	ldr	r3, [r3, #4]
 80010ce:	6878      	ldr	r0, [r7, #4]
 80010d0:	4798      	blx	r3
        item = next;
 80010d2:	68fb      	ldr	r3, [r7, #12]
 80010d4:	607b      	str	r3, [r7, #4]
    while (item != NULL)
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d1be      	bne.n	800105a <cJSON_Delete+0xe>
    }
}
 80010dc:	bf00      	nop
 80010de:	bf00      	nop
 80010e0:	3710      	adds	r7, #16
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bd80      	pop	{r7, pc}
 80010e6:	bf00      	nop
 80010e8:	20000000 	.word	0x20000000

080010ec <get_decimal_point>:

/* get the decimal point character of the current locale */
static unsigned char get_decimal_point(void)
{
 80010ec:	b480      	push	{r7}
 80010ee:	af00      	add	r7, sp, #0
#ifdef ENABLE_LOCALES
    struct lconv *lconv = localeconv();
    return (unsigned char) lconv->decimal_point[0];
#else
    return '.';
 80010f0:	232e      	movs	r3, #46	@ 0x2e
#endif
}
 80010f2:	4618      	mov	r0, r3
 80010f4:	46bd      	mov	sp, r7
 80010f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fa:	4770      	bx	lr
 80010fc:	0000      	movs	r0, r0
	...

08001100 <parse_number>:
/* get a pointer to the buffer at the position */
#define buffer_at_offset(buffer) ((buffer)->content + (buffer)->offset)

/* Parse the input text to generate a number, and populate the result into item. */
static cJSON_bool parse_number(cJSON * const item, parse_buffer * const input_buffer)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b098      	sub	sp, #96	@ 0x60
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
 8001108:	6039      	str	r1, [r7, #0]
    double number = 0;
 800110a:	f04f 0200 	mov.w	r2, #0
 800110e:	f04f 0300 	mov.w	r3, #0
 8001112:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
    unsigned char *after_end = NULL;
 8001116:	2300      	movs	r3, #0
 8001118:	64bb      	str	r3, [r7, #72]	@ 0x48
    unsigned char number_c_string[64];
    unsigned char decimal_point = get_decimal_point();
 800111a:	f7ff ffe7 	bl	80010ec <get_decimal_point>
 800111e:	4603      	mov	r3, r0
 8001120:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
    size_t i = 0;
 8001124:	2300      	movs	r3, #0
 8001126:	65fb      	str	r3, [r7, #92]	@ 0x5c

    if ((input_buffer == NULL) || (input_buffer->content == NULL))
 8001128:	683b      	ldr	r3, [r7, #0]
 800112a:	2b00      	cmp	r3, #0
 800112c:	d003      	beq.n	8001136 <parse_number+0x36>
 800112e:	683b      	ldr	r3, [r7, #0]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	2b00      	cmp	r3, #0
 8001134:	d101      	bne.n	800113a <parse_number+0x3a>
    {
        return false;
 8001136:	2300      	movs	r3, #0
 8001138:	e0a0      	b.n	800127c <parse_number+0x17c>
    }

    /* copy the number into a temporary buffer and replace '.' with the decimal point
     * of the current locale (for strtod)
     * This also takes care of '\0' not necessarily being available for marking the end of the input */
    for (i = 0; (i < (sizeof(number_c_string) - 1)) && can_access_at_index(input_buffer, i); i++)
 800113a:	2300      	movs	r3, #0
 800113c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800113e:	e03d      	b.n	80011bc <parse_number+0xbc>
    {
        switch (buffer_at_offset(input_buffer)[i])
 8001140:	683b      	ldr	r3, [r7, #0]
 8001142:	681a      	ldr	r2, [r3, #0]
 8001144:	683b      	ldr	r3, [r7, #0]
 8001146:	6899      	ldr	r1, [r3, #8]
 8001148:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800114a:	440b      	add	r3, r1
 800114c:	4413      	add	r3, r2
 800114e:	781b      	ldrb	r3, [r3, #0]
 8001150:	2b45      	cmp	r3, #69	@ 0x45
 8001152:	dc17      	bgt.n	8001184 <parse_number+0x84>
 8001154:	2b2b      	cmp	r3, #43	@ 0x2b
 8001156:	db40      	blt.n	80011da <parse_number+0xda>
 8001158:	3b2b      	subs	r3, #43	@ 0x2b
 800115a:	2201      	movs	r2, #1
 800115c:	409a      	lsls	r2, r3
 800115e:	4b4c      	ldr	r3, [pc, #304]	@ (8001290 <parse_number+0x190>)
 8001160:	4013      	ands	r3, r2
 8001162:	2b00      	cmp	r3, #0
 8001164:	bf14      	ite	ne
 8001166:	2301      	movne	r3, #1
 8001168:	2300      	moveq	r3, #0
 800116a:	b2db      	uxtb	r3, r3
 800116c:	2b00      	cmp	r3, #0
 800116e:	d10b      	bne.n	8001188 <parse_number+0x88>
 8001170:	f002 0308 	and.w	r3, r2, #8
 8001174:	2b00      	cmp	r3, #0
 8001176:	bf14      	ite	ne
 8001178:	2301      	movne	r3, #1
 800117a:	2300      	moveq	r3, #0
 800117c:	b2db      	uxtb	r3, r3
 800117e:	2b00      	cmp	r3, #0
 8001180:	d111      	bne.n	80011a6 <parse_number+0xa6>
            case '.':
                number_c_string[i] = decimal_point;
                break;

            default:
                goto loop_end;
 8001182:	e02a      	b.n	80011da <parse_number+0xda>
        switch (buffer_at_offset(input_buffer)[i])
 8001184:	2b65      	cmp	r3, #101	@ 0x65
 8001186:	d128      	bne.n	80011da <parse_number+0xda>
                number_c_string[i] = buffer_at_offset(input_buffer)[i];
 8001188:	683b      	ldr	r3, [r7, #0]
 800118a:	681a      	ldr	r2, [r3, #0]
 800118c:	683b      	ldr	r3, [r7, #0]
 800118e:	6899      	ldr	r1, [r3, #8]
 8001190:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001192:	440b      	add	r3, r1
 8001194:	4413      	add	r3, r2
 8001196:	7819      	ldrb	r1, [r3, #0]
 8001198:	f107 0208 	add.w	r2, r7, #8
 800119c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800119e:	4413      	add	r3, r2
 80011a0:	460a      	mov	r2, r1
 80011a2:	701a      	strb	r2, [r3, #0]
                break;
 80011a4:	e007      	b.n	80011b6 <parse_number+0xb6>
                number_c_string[i] = decimal_point;
 80011a6:	f107 0208 	add.w	r2, r7, #8
 80011aa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80011ac:	4413      	add	r3, r2
 80011ae:	f897 204f 	ldrb.w	r2, [r7, #79]	@ 0x4f
 80011b2:	701a      	strb	r2, [r3, #0]
                break;
 80011b4:	bf00      	nop
    for (i = 0; (i < (sizeof(number_c_string) - 1)) && can_access_at_index(input_buffer, i); i++)
 80011b6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80011b8:	3301      	adds	r3, #1
 80011ba:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80011bc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80011be:	2b3e      	cmp	r3, #62	@ 0x3e
 80011c0:	d80d      	bhi.n	80011de <parse_number+0xde>
 80011c2:	683b      	ldr	r3, [r7, #0]
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d00a      	beq.n	80011de <parse_number+0xde>
 80011c8:	683b      	ldr	r3, [r7, #0]
 80011ca:	689a      	ldr	r2, [r3, #8]
 80011cc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80011ce:	441a      	add	r2, r3
 80011d0:	683b      	ldr	r3, [r7, #0]
 80011d2:	685b      	ldr	r3, [r3, #4]
 80011d4:	429a      	cmp	r2, r3
 80011d6:	d3b3      	bcc.n	8001140 <parse_number+0x40>
        }
    }
loop_end:
 80011d8:	e001      	b.n	80011de <parse_number+0xde>
                goto loop_end;
 80011da:	bf00      	nop
 80011dc:	e000      	b.n	80011e0 <parse_number+0xe0>
loop_end:
 80011de:	bf00      	nop
    number_c_string[i] = '\0';
 80011e0:	f107 0208 	add.w	r2, r7, #8
 80011e4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80011e6:	4413      	add	r3, r2
 80011e8:	2200      	movs	r2, #0
 80011ea:	701a      	strb	r2, [r3, #0]

    number = strtod((const char*)number_c_string, (char**)&after_end);
 80011ec:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 80011f0:	f107 0308 	add.w	r3, r7, #8
 80011f4:	4611      	mov	r1, r2
 80011f6:	4618      	mov	r0, r3
 80011f8:	f00d fb5e 	bl	800e8b8 <strtod>
 80011fc:	ed87 0b14 	vstr	d0, [r7, #80]	@ 0x50
    if (number_c_string == after_end)
 8001200:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8001202:	f107 0308 	add.w	r3, r7, #8
 8001206:	429a      	cmp	r2, r3
 8001208:	d101      	bne.n	800120e <parse_number+0x10e>
    {
        return false; /* parse_error */
 800120a:	2300      	movs	r3, #0
 800120c:	e036      	b.n	800127c <parse_number+0x17c>
    }

    item->valuedouble = number;
 800120e:	6879      	ldr	r1, [r7, #4]
 8001210:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8001214:	e9c1 2306 	strd	r2, r3, [r1, #24]

    /* use saturation in case of overflow */
    if (number >= INT_MAX)
 8001218:	a31b      	add	r3, pc, #108	@ (adr r3, 8001288 <parse_number+0x188>)
 800121a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800121e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 8001222:	f7ff fc87 	bl	8000b34 <__aeabi_dcmpge>
 8001226:	4603      	mov	r3, r0
 8001228:	2b00      	cmp	r3, #0
 800122a:	d004      	beq.n	8001236 <parse_number+0x136>
    {
        item->valueint = INT_MAX;
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 8001232:	615a      	str	r2, [r3, #20]
 8001234:	e015      	b.n	8001262 <parse_number+0x162>
    }
    else if (number <= (double)INT_MIN)
 8001236:	f04f 0200 	mov.w	r2, #0
 800123a:	4b16      	ldr	r3, [pc, #88]	@ (8001294 <parse_number+0x194>)
 800123c:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 8001240:	f7ff fc6e 	bl	8000b20 <__aeabi_dcmple>
 8001244:	4603      	mov	r3, r0
 8001246:	2b00      	cmp	r3, #0
 8001248:	d004      	beq.n	8001254 <parse_number+0x154>
    {
        item->valueint = INT_MIN;
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8001250:	615a      	str	r2, [r3, #20]
 8001252:	e006      	b.n	8001262 <parse_number+0x162>
    }
    else
    {
        item->valueint = (int)number;
 8001254:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 8001258:	f7ff fc80 	bl	8000b5c <__aeabi_d2iz>
 800125c:	4602      	mov	r2, r0
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	615a      	str	r2, [r3, #20]
    }

    item->type = cJSON_Number;
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	2208      	movs	r2, #8
 8001266:	60da      	str	r2, [r3, #12]

    input_buffer->offset += (size_t)(after_end - number_c_string);
 8001268:	683b      	ldr	r3, [r7, #0]
 800126a:	689b      	ldr	r3, [r3, #8]
 800126c:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 800126e:	f107 0208 	add.w	r2, r7, #8
 8001272:	1a8a      	subs	r2, r1, r2
 8001274:	441a      	add	r2, r3
 8001276:	683b      	ldr	r3, [r7, #0]
 8001278:	609a      	str	r2, [r3, #8]
    return true;
 800127a:	2301      	movs	r3, #1
}
 800127c:	4618      	mov	r0, r3
 800127e:	3760      	adds	r7, #96	@ 0x60
 8001280:	46bd      	mov	sp, r7
 8001282:	bd80      	pop	{r7, pc}
 8001284:	f3af 8000 	nop.w
 8001288:	ffc00000 	.word	0xffc00000
 800128c:	41dfffff 	.word	0x41dfffff
 8001290:	04007fe5 	.word	0x04007fe5
 8001294:	c1e00000 	.word	0xc1e00000

08001298 <parse_hex4>:
    return true;
}

/* parse 4 digit hexadecimal number */
static unsigned parse_hex4(const unsigned char * const input)
{
 8001298:	b480      	push	{r7}
 800129a:	b085      	sub	sp, #20
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
    unsigned int h = 0;
 80012a0:	2300      	movs	r3, #0
 80012a2:	60fb      	str	r3, [r7, #12]
    size_t i = 0;
 80012a4:	2300      	movs	r3, #0
 80012a6:	60bb      	str	r3, [r7, #8]

    for (i = 0; i < 4; i++)
 80012a8:	2300      	movs	r3, #0
 80012aa:	60bb      	str	r3, [r7, #8]
 80012ac:	e04c      	b.n	8001348 <parse_hex4+0xb0>
    {
        /* parse digit */
        if ((input[i] >= '0') && (input[i] <= '9'))
 80012ae:	687a      	ldr	r2, [r7, #4]
 80012b0:	68bb      	ldr	r3, [r7, #8]
 80012b2:	4413      	add	r3, r2
 80012b4:	781b      	ldrb	r3, [r3, #0]
 80012b6:	2b2f      	cmp	r3, #47	@ 0x2f
 80012b8:	d90f      	bls.n	80012da <parse_hex4+0x42>
 80012ba:	687a      	ldr	r2, [r7, #4]
 80012bc:	68bb      	ldr	r3, [r7, #8]
 80012be:	4413      	add	r3, r2
 80012c0:	781b      	ldrb	r3, [r3, #0]
 80012c2:	2b39      	cmp	r3, #57	@ 0x39
 80012c4:	d809      	bhi.n	80012da <parse_hex4+0x42>
        {
            h += (unsigned int) input[i] - '0';
 80012c6:	687a      	ldr	r2, [r7, #4]
 80012c8:	68bb      	ldr	r3, [r7, #8]
 80012ca:	4413      	add	r3, r2
 80012cc:	781b      	ldrb	r3, [r3, #0]
 80012ce:	461a      	mov	r2, r3
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	4413      	add	r3, r2
 80012d4:	3b30      	subs	r3, #48	@ 0x30
 80012d6:	60fb      	str	r3, [r7, #12]
 80012d8:	e02d      	b.n	8001336 <parse_hex4+0x9e>
        }
        else if ((input[i] >= 'A') && (input[i] <= 'F'))
 80012da:	687a      	ldr	r2, [r7, #4]
 80012dc:	68bb      	ldr	r3, [r7, #8]
 80012de:	4413      	add	r3, r2
 80012e0:	781b      	ldrb	r3, [r3, #0]
 80012e2:	2b40      	cmp	r3, #64	@ 0x40
 80012e4:	d90f      	bls.n	8001306 <parse_hex4+0x6e>
 80012e6:	687a      	ldr	r2, [r7, #4]
 80012e8:	68bb      	ldr	r3, [r7, #8]
 80012ea:	4413      	add	r3, r2
 80012ec:	781b      	ldrb	r3, [r3, #0]
 80012ee:	2b46      	cmp	r3, #70	@ 0x46
 80012f0:	d809      	bhi.n	8001306 <parse_hex4+0x6e>
        {
            h += (unsigned int) 10 + input[i] - 'A';
 80012f2:	687a      	ldr	r2, [r7, #4]
 80012f4:	68bb      	ldr	r3, [r7, #8]
 80012f6:	4413      	add	r3, r2
 80012f8:	781b      	ldrb	r3, [r3, #0]
 80012fa:	461a      	mov	r2, r3
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	4413      	add	r3, r2
 8001300:	3b37      	subs	r3, #55	@ 0x37
 8001302:	60fb      	str	r3, [r7, #12]
 8001304:	e017      	b.n	8001336 <parse_hex4+0x9e>
        }
        else if ((input[i] >= 'a') && (input[i] <= 'f'))
 8001306:	687a      	ldr	r2, [r7, #4]
 8001308:	68bb      	ldr	r3, [r7, #8]
 800130a:	4413      	add	r3, r2
 800130c:	781b      	ldrb	r3, [r3, #0]
 800130e:	2b60      	cmp	r3, #96	@ 0x60
 8001310:	d90f      	bls.n	8001332 <parse_hex4+0x9a>
 8001312:	687a      	ldr	r2, [r7, #4]
 8001314:	68bb      	ldr	r3, [r7, #8]
 8001316:	4413      	add	r3, r2
 8001318:	781b      	ldrb	r3, [r3, #0]
 800131a:	2b66      	cmp	r3, #102	@ 0x66
 800131c:	d809      	bhi.n	8001332 <parse_hex4+0x9a>
        {
            h += (unsigned int) 10 + input[i] - 'a';
 800131e:	687a      	ldr	r2, [r7, #4]
 8001320:	68bb      	ldr	r3, [r7, #8]
 8001322:	4413      	add	r3, r2
 8001324:	781b      	ldrb	r3, [r3, #0]
 8001326:	461a      	mov	r2, r3
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	4413      	add	r3, r2
 800132c:	3b57      	subs	r3, #87	@ 0x57
 800132e:	60fb      	str	r3, [r7, #12]
 8001330:	e001      	b.n	8001336 <parse_hex4+0x9e>
        }
        else /* invalid */
        {
            return 0;
 8001332:	2300      	movs	r3, #0
 8001334:	e00c      	b.n	8001350 <parse_hex4+0xb8>
        }

        if (i < 3)
 8001336:	68bb      	ldr	r3, [r7, #8]
 8001338:	2b02      	cmp	r3, #2
 800133a:	d802      	bhi.n	8001342 <parse_hex4+0xaa>
        {
            /* shift left to make place for the next nibble */
            h = h << 4;
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	011b      	lsls	r3, r3, #4
 8001340:	60fb      	str	r3, [r7, #12]
    for (i = 0; i < 4; i++)
 8001342:	68bb      	ldr	r3, [r7, #8]
 8001344:	3301      	adds	r3, #1
 8001346:	60bb      	str	r3, [r7, #8]
 8001348:	68bb      	ldr	r3, [r7, #8]
 800134a:	2b03      	cmp	r3, #3
 800134c:	d9af      	bls.n	80012ae <parse_hex4+0x16>
        }
    }

    return h;
 800134e:	68fb      	ldr	r3, [r7, #12]
}
 8001350:	4618      	mov	r0, r3
 8001352:	3714      	adds	r7, #20
 8001354:	46bd      	mov	sp, r7
 8001356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135a:	4770      	bx	lr

0800135c <utf16_literal_to_utf8>:

/* converts a UTF-16 literal to UTF-8
 * A literal can be one or two sequences of the form \uXXXX */
static unsigned char utf16_literal_to_utf8(const unsigned char * const input_pointer, const unsigned char * const input_end, unsigned char **output_pointer)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b08a      	sub	sp, #40	@ 0x28
 8001360:	af00      	add	r7, sp, #0
 8001362:	60f8      	str	r0, [r7, #12]
 8001364:	60b9      	str	r1, [r7, #8]
 8001366:	607a      	str	r2, [r7, #4]
    long unsigned int codepoint = 0;
 8001368:	2300      	movs	r3, #0
 800136a:	627b      	str	r3, [r7, #36]	@ 0x24
    unsigned int first_code = 0;
 800136c:	2300      	movs	r3, #0
 800136e:	61fb      	str	r3, [r7, #28]
    const unsigned char *first_sequence = input_pointer;
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	61bb      	str	r3, [r7, #24]
    unsigned char utf8_length = 0;
 8001374:	2300      	movs	r3, #0
 8001376:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    unsigned char utf8_position = 0;
 800137a:	2300      	movs	r3, #0
 800137c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
    unsigned char sequence_length = 0;
 8001380:	2300      	movs	r3, #0
 8001382:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
    unsigned char first_byte_mark = 0;
 8001386:	2300      	movs	r3, #0
 8001388:	f887 3020 	strb.w	r3, [r7, #32]

    if ((input_end - first_sequence) < 6)
 800138c:	68ba      	ldr	r2, [r7, #8]
 800138e:	69bb      	ldr	r3, [r7, #24]
 8001390:	1ad3      	subs	r3, r2, r3
 8001392:	2b05      	cmp	r3, #5
 8001394:	f340 80b7 	ble.w	8001506 <utf16_literal_to_utf8+0x1aa>
        /* input ends unexpectedly */
        goto fail;
    }

    /* get the first utf16 sequence */
    first_code = parse_hex4(first_sequence + 2);
 8001398:	69bb      	ldr	r3, [r7, #24]
 800139a:	3302      	adds	r3, #2
 800139c:	4618      	mov	r0, r3
 800139e:	f7ff ff7b 	bl	8001298 <parse_hex4>
 80013a2:	61f8      	str	r0, [r7, #28]

    /* check that the code is valid */
    if (((first_code >= 0xDC00) && (first_code <= 0xDFFF)))
 80013a4:	69fb      	ldr	r3, [r7, #28]
 80013a6:	f5b3 4f5c 	cmp.w	r3, #56320	@ 0xdc00
 80013aa:	d304      	bcc.n	80013b6 <utf16_literal_to_utf8+0x5a>
 80013ac:	69fb      	ldr	r3, [r7, #28]
 80013ae:	f5b3 4f60 	cmp.w	r3, #57344	@ 0xe000
 80013b2:	f0c0 80aa 	bcc.w	800150a <utf16_literal_to_utf8+0x1ae>
    {
        goto fail;
    }

    /* UTF16 surrogate pair */
    if ((first_code >= 0xD800) && (first_code <= 0xDBFF))
 80013b6:	69fb      	ldr	r3, [r7, #28]
 80013b8:	f5b3 4f58 	cmp.w	r3, #55296	@ 0xd800
 80013bc:	d337      	bcc.n	800142e <utf16_literal_to_utf8+0xd2>
 80013be:	69fb      	ldr	r3, [r7, #28]
 80013c0:	f5b3 4f5c 	cmp.w	r3, #56320	@ 0xdc00
 80013c4:	d233      	bcs.n	800142e <utf16_literal_to_utf8+0xd2>
    {
        const unsigned char *second_sequence = first_sequence + 6;
 80013c6:	69bb      	ldr	r3, [r7, #24]
 80013c8:	3306      	adds	r3, #6
 80013ca:	617b      	str	r3, [r7, #20]
        unsigned int second_code = 0;
 80013cc:	2300      	movs	r3, #0
 80013ce:	613b      	str	r3, [r7, #16]
        sequence_length = 12; /* \uXXXX\uXXXX */
 80013d0:	230c      	movs	r3, #12
 80013d2:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21

        if ((input_end - second_sequence) < 6)
 80013d6:	68ba      	ldr	r2, [r7, #8]
 80013d8:	697b      	ldr	r3, [r7, #20]
 80013da:	1ad3      	subs	r3, r2, r3
 80013dc:	2b05      	cmp	r3, #5
 80013de:	f340 8096 	ble.w	800150e <utf16_literal_to_utf8+0x1b2>
        {
            /* input ends unexpectedly */
            goto fail;
        }

        if ((second_sequence[0] != '\\') || (second_sequence[1] != 'u'))
 80013e2:	697b      	ldr	r3, [r7, #20]
 80013e4:	781b      	ldrb	r3, [r3, #0]
 80013e6:	2b5c      	cmp	r3, #92	@ 0x5c
 80013e8:	f040 8093 	bne.w	8001512 <utf16_literal_to_utf8+0x1b6>
 80013ec:	697b      	ldr	r3, [r7, #20]
 80013ee:	3301      	adds	r3, #1
 80013f0:	781b      	ldrb	r3, [r3, #0]
 80013f2:	2b75      	cmp	r3, #117	@ 0x75
 80013f4:	f040 808d 	bne.w	8001512 <utf16_literal_to_utf8+0x1b6>
            /* missing second half of the surrogate pair */
            goto fail;
        }

        /* get the second utf16 sequence */
        second_code = parse_hex4(second_sequence + 2);
 80013f8:	697b      	ldr	r3, [r7, #20]
 80013fa:	3302      	adds	r3, #2
 80013fc:	4618      	mov	r0, r3
 80013fe:	f7ff ff4b 	bl	8001298 <parse_hex4>
 8001402:	6138      	str	r0, [r7, #16]
        /* check that the code is valid */
        if ((second_code < 0xDC00) || (second_code > 0xDFFF))
 8001404:	693b      	ldr	r3, [r7, #16]
 8001406:	f5b3 4f5c 	cmp.w	r3, #56320	@ 0xdc00
 800140a:	f0c0 8084 	bcc.w	8001516 <utf16_literal_to_utf8+0x1ba>
 800140e:	693b      	ldr	r3, [r7, #16]
 8001410:	f5b3 4f60 	cmp.w	r3, #57344	@ 0xe000
 8001414:	d27f      	bcs.n	8001516 <utf16_literal_to_utf8+0x1ba>
            goto fail;
        }


        /* calculate the unicode codepoint from the surrogate pair */
        codepoint = 0x10000 + (((first_code & 0x3FF) << 10) | (second_code & 0x3FF));
 8001416:	69fb      	ldr	r3, [r7, #28]
 8001418:	029a      	lsls	r2, r3, #10
 800141a:	4b43      	ldr	r3, [pc, #268]	@ (8001528 <utf16_literal_to_utf8+0x1cc>)
 800141c:	4013      	ands	r3, r2
 800141e:	693a      	ldr	r2, [r7, #16]
 8001420:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8001424:	4313      	orrs	r3, r2
 8001426:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 800142a:	627b      	str	r3, [r7, #36]	@ 0x24
    {
 800142c:	e004      	b.n	8001438 <utf16_literal_to_utf8+0xdc>
    }
    else
    {
        sequence_length = 6; /* \uXXXX */
 800142e:	2306      	movs	r3, #6
 8001430:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
        codepoint = first_code;
 8001434:	69fb      	ldr	r3, [r7, #28]
 8001436:	627b      	str	r3, [r7, #36]	@ 0x24
    }

    /* encode as UTF-8
     * takes at maximum 4 bytes to encode:
     * 11110xxx 10xxxxxx 10xxxxxx 10xxxxxx */
    if (codepoint < 0x80)
 8001438:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800143a:	2b7f      	cmp	r3, #127	@ 0x7f
 800143c:	d803      	bhi.n	8001446 <utf16_literal_to_utf8+0xea>
    {
        /* normal ascii, encoding 0xxxxxxx */
        utf8_length = 1;
 800143e:	2301      	movs	r3, #1
 8001440:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8001444:	e01f      	b.n	8001486 <utf16_literal_to_utf8+0x12a>
    }
    else if (codepoint < 0x800)
 8001446:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001448:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800144c:	d206      	bcs.n	800145c <utf16_literal_to_utf8+0x100>
    {
        /* two bytes, encoding 110xxxxx 10xxxxxx */
        utf8_length = 2;
 800144e:	2302      	movs	r3, #2
 8001450:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        first_byte_mark = 0xC0; /* 11000000 */
 8001454:	23c0      	movs	r3, #192	@ 0xc0
 8001456:	f887 3020 	strb.w	r3, [r7, #32]
 800145a:	e014      	b.n	8001486 <utf16_literal_to_utf8+0x12a>
    }
    else if (codepoint < 0x10000)
 800145c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800145e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001462:	d206      	bcs.n	8001472 <utf16_literal_to_utf8+0x116>
    {
        /* three bytes, encoding 1110xxxx 10xxxxxx 10xxxxxx */
        utf8_length = 3;
 8001464:	2303      	movs	r3, #3
 8001466:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        first_byte_mark = 0xE0; /* 11100000 */
 800146a:	23e0      	movs	r3, #224	@ 0xe0
 800146c:	f887 3020 	strb.w	r3, [r7, #32]
 8001470:	e009      	b.n	8001486 <utf16_literal_to_utf8+0x12a>
    }
    else if (codepoint <= 0x10FFFF)
 8001472:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001474:	f5b3 1f88 	cmp.w	r3, #1114112	@ 0x110000
 8001478:	d24f      	bcs.n	800151a <utf16_literal_to_utf8+0x1be>
    {
        /* four bytes, encoding 1110xxxx 10xxxxxx 10xxxxxx 10xxxxxx */
        utf8_length = 4;
 800147a:	2304      	movs	r3, #4
 800147c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        first_byte_mark = 0xF0; /* 11110000 */
 8001480:	23f0      	movs	r3, #240	@ 0xf0
 8001482:	f887 3020 	strb.w	r3, [r7, #32]
        /* invalid unicode codepoint */
        goto fail;
    }

    /* encode as utf8 */
    for (utf8_position = (unsigned char)(utf8_length - 1); utf8_position > 0; utf8_position--)
 8001486:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800148a:	3b01      	subs	r3, #1
 800148c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8001490:	e015      	b.n	80014be <utf16_literal_to_utf8+0x162>
    {
        /* 10xxxxxx */
        (*output_pointer)[utf8_position] = (unsigned char)((codepoint | 0x80) & 0xBF);
 8001492:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001494:	b2db      	uxtb	r3, r3
 8001496:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800149a:	b2da      	uxtb	r2, r3
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	6819      	ldr	r1, [r3, #0]
 80014a0:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 80014a4:	440b      	add	r3, r1
 80014a6:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80014aa:	b2d2      	uxtb	r2, r2
 80014ac:	701a      	strb	r2, [r3, #0]
        codepoint >>= 6;
 80014ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014b0:	099b      	lsrs	r3, r3, #6
 80014b2:	627b      	str	r3, [r7, #36]	@ 0x24
    for (utf8_position = (unsigned char)(utf8_length - 1); utf8_position > 0; utf8_position--)
 80014b4:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 80014b8:	3b01      	subs	r3, #1
 80014ba:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80014be:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d1e5      	bne.n	8001492 <utf16_literal_to_utf8+0x136>
    }
    /* encode first byte */
    if (utf8_length > 1)
 80014c6:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80014ca:	2b01      	cmp	r3, #1
 80014cc:	d909      	bls.n	80014e2 <utf16_literal_to_utf8+0x186>
    {
        (*output_pointer)[0] = (unsigned char)((codepoint | first_byte_mark) & 0xFF);
 80014ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014d0:	b2d9      	uxtb	r1, r3
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	f897 2020 	ldrb.w	r2, [r7, #32]
 80014da:	430a      	orrs	r2, r1
 80014dc:	b2d2      	uxtb	r2, r2
 80014de:	701a      	strb	r2, [r3, #0]
 80014e0:	e007      	b.n	80014f2 <utf16_literal_to_utf8+0x196>
    }
    else
    {
        (*output_pointer)[0] = (unsigned char)(codepoint & 0x7F);
 80014e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014e4:	b2da      	uxtb	r2, r3
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80014ee:	b2d2      	uxtb	r2, r2
 80014f0:	701a      	strb	r2, [r3, #0]
    }

    *output_pointer += utf8_length;
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681a      	ldr	r2, [r3, #0]
 80014f6:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80014fa:	441a      	add	r2, r3
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	601a      	str	r2, [r3, #0]

    return sequence_length;
 8001500:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8001504:	e00b      	b.n	800151e <utf16_literal_to_utf8+0x1c2>
        goto fail;
 8001506:	bf00      	nop
 8001508:	e008      	b.n	800151c <utf16_literal_to_utf8+0x1c0>
        goto fail;
 800150a:	bf00      	nop
 800150c:	e006      	b.n	800151c <utf16_literal_to_utf8+0x1c0>
            goto fail;
 800150e:	bf00      	nop
 8001510:	e004      	b.n	800151c <utf16_literal_to_utf8+0x1c0>
            goto fail;
 8001512:	bf00      	nop
 8001514:	e002      	b.n	800151c <utf16_literal_to_utf8+0x1c0>
            goto fail;
 8001516:	bf00      	nop
 8001518:	e000      	b.n	800151c <utf16_literal_to_utf8+0x1c0>
        goto fail;
 800151a:	bf00      	nop

fail:
    return 0;
 800151c:	2300      	movs	r3, #0
}
 800151e:	4618      	mov	r0, r3
 8001520:	3728      	adds	r7, #40	@ 0x28
 8001522:	46bd      	mov	sp, r7
 8001524:	bd80      	pop	{r7, pc}
 8001526:	bf00      	nop
 8001528:	000ffc00 	.word	0x000ffc00

0800152c <parse_string>:

/* Parse the input text into an unescaped cinput, and populate item. */
static cJSON_bool parse_string(cJSON * const item, parse_buffer * const input_buffer)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b08a      	sub	sp, #40	@ 0x28
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
 8001534:	6039      	str	r1, [r7, #0]
    const unsigned char *input_pointer = buffer_at_offset(input_buffer) + 1;
 8001536:	683b      	ldr	r3, [r7, #0]
 8001538:	681a      	ldr	r2, [r3, #0]
 800153a:	683b      	ldr	r3, [r7, #0]
 800153c:	689b      	ldr	r3, [r3, #8]
 800153e:	3301      	adds	r3, #1
 8001540:	4413      	add	r3, r2
 8001542:	627b      	str	r3, [r7, #36]	@ 0x24
    const unsigned char *input_end = buffer_at_offset(input_buffer) + 1;
 8001544:	683b      	ldr	r3, [r7, #0]
 8001546:	681a      	ldr	r2, [r3, #0]
 8001548:	683b      	ldr	r3, [r7, #0]
 800154a:	689b      	ldr	r3, [r3, #8]
 800154c:	3301      	adds	r3, #1
 800154e:	4413      	add	r3, r2
 8001550:	623b      	str	r3, [r7, #32]
    unsigned char *output_pointer = NULL;
 8001552:	2300      	movs	r3, #0
 8001554:	60fb      	str	r3, [r7, #12]
    unsigned char *output = NULL;
 8001556:	2300      	movs	r3, #0
 8001558:	61fb      	str	r3, [r7, #28]

    /* not a string */
    if (buffer_at_offset(input_buffer)[0] != '\"')
 800155a:	683b      	ldr	r3, [r7, #0]
 800155c:	681a      	ldr	r2, [r3, #0]
 800155e:	683b      	ldr	r3, [r7, #0]
 8001560:	689b      	ldr	r3, [r3, #8]
 8001562:	4413      	add	r3, r2
 8001564:	781b      	ldrb	r3, [r3, #0]
 8001566:	2b22      	cmp	r3, #34	@ 0x22
 8001568:	f040 8103 	bne.w	8001772 <parse_string+0x246>
        goto fail;
    }

    {
        /* calculate approximate size of the output (overestimate) */
        size_t allocation_length = 0;
 800156c:	2300      	movs	r3, #0
 800156e:	613b      	str	r3, [r7, #16]
        size_t skipped_bytes = 0;
 8001570:	2300      	movs	r3, #0
 8001572:	61bb      	str	r3, [r7, #24]
        while (((size_t)(input_end - input_buffer->content) < input_buffer->length) && (*input_end != '\"'))
 8001574:	e017      	b.n	80015a6 <parse_string+0x7a>
        {
            /* is escape sequence */
            if (input_end[0] == '\\')
 8001576:	6a3b      	ldr	r3, [r7, #32]
 8001578:	781b      	ldrb	r3, [r3, #0]
 800157a:	2b5c      	cmp	r3, #92	@ 0x5c
 800157c:	d110      	bne.n	80015a0 <parse_string+0x74>
            {
                if ((size_t)(input_end + 1 - input_buffer->content) >= input_buffer->length)
 800157e:	6a3b      	ldr	r3, [r7, #32]
 8001580:	1c5a      	adds	r2, r3, #1
 8001582:	683b      	ldr	r3, [r7, #0]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	1ad3      	subs	r3, r2, r3
 8001588:	461a      	mov	r2, r3
 800158a:	683b      	ldr	r3, [r7, #0]
 800158c:	685b      	ldr	r3, [r3, #4]
 800158e:	429a      	cmp	r2, r3
 8001590:	f080 80f1 	bcs.w	8001776 <parse_string+0x24a>
                {
                    /* prevent buffer overflow when last input character is a backslash */
                    goto fail;
                }
                skipped_bytes++;
 8001594:	69bb      	ldr	r3, [r7, #24]
 8001596:	3301      	adds	r3, #1
 8001598:	61bb      	str	r3, [r7, #24]
                input_end++;
 800159a:	6a3b      	ldr	r3, [r7, #32]
 800159c:	3301      	adds	r3, #1
 800159e:	623b      	str	r3, [r7, #32]
            }
            input_end++;
 80015a0:	6a3b      	ldr	r3, [r7, #32]
 80015a2:	3301      	adds	r3, #1
 80015a4:	623b      	str	r3, [r7, #32]
        while (((size_t)(input_end - input_buffer->content) < input_buffer->length) && (*input_end != '\"'))
 80015a6:	683b      	ldr	r3, [r7, #0]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	6a3a      	ldr	r2, [r7, #32]
 80015ac:	1ad3      	subs	r3, r2, r3
 80015ae:	461a      	mov	r2, r3
 80015b0:	683b      	ldr	r3, [r7, #0]
 80015b2:	685b      	ldr	r3, [r3, #4]
 80015b4:	429a      	cmp	r2, r3
 80015b6:	d203      	bcs.n	80015c0 <parse_string+0x94>
 80015b8:	6a3b      	ldr	r3, [r7, #32]
 80015ba:	781b      	ldrb	r3, [r3, #0]
 80015bc:	2b22      	cmp	r3, #34	@ 0x22
 80015be:	d1da      	bne.n	8001576 <parse_string+0x4a>
        }
        if (((size_t)(input_end - input_buffer->content) >= input_buffer->length) || (*input_end != '\"'))
 80015c0:	683b      	ldr	r3, [r7, #0]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	6a3a      	ldr	r2, [r7, #32]
 80015c6:	1ad3      	subs	r3, r2, r3
 80015c8:	461a      	mov	r2, r3
 80015ca:	683b      	ldr	r3, [r7, #0]
 80015cc:	685b      	ldr	r3, [r3, #4]
 80015ce:	429a      	cmp	r2, r3
 80015d0:	f080 80d3 	bcs.w	800177a <parse_string+0x24e>
 80015d4:	6a3b      	ldr	r3, [r7, #32]
 80015d6:	781b      	ldrb	r3, [r3, #0]
 80015d8:	2b22      	cmp	r3, #34	@ 0x22
 80015da:	f040 80ce 	bne.w	800177a <parse_string+0x24e>
        {
            goto fail; /* string ended unexpectedly */
        }

        /* This is at most how much we need for the output */
        allocation_length = (size_t) (input_end - buffer_at_offset(input_buffer)) - skipped_bytes;
 80015de:	683b      	ldr	r3, [r7, #0]
 80015e0:	681a      	ldr	r2, [r3, #0]
 80015e2:	683b      	ldr	r3, [r7, #0]
 80015e4:	689b      	ldr	r3, [r3, #8]
 80015e6:	4413      	add	r3, r2
 80015e8:	6a3a      	ldr	r2, [r7, #32]
 80015ea:	1ad3      	subs	r3, r2, r3
 80015ec:	461a      	mov	r2, r3
 80015ee:	69bb      	ldr	r3, [r7, #24]
 80015f0:	1ad3      	subs	r3, r2, r3
 80015f2:	613b      	str	r3, [r7, #16]
        output = (unsigned char*)input_buffer->hooks.allocate(allocation_length + sizeof(""));
 80015f4:	683b      	ldr	r3, [r7, #0]
 80015f6:	691b      	ldr	r3, [r3, #16]
 80015f8:	693a      	ldr	r2, [r7, #16]
 80015fa:	3201      	adds	r2, #1
 80015fc:	4610      	mov	r0, r2
 80015fe:	4798      	blx	r3
 8001600:	61f8      	str	r0, [r7, #28]
        if (output == NULL)
 8001602:	69fb      	ldr	r3, [r7, #28]
 8001604:	2b00      	cmp	r3, #0
 8001606:	f000 80ba 	beq.w	800177e <parse_string+0x252>
        {
            goto fail; /* allocation failure */
        }
    }

    output_pointer = output;
 800160a:	69fb      	ldr	r3, [r7, #28]
 800160c:	60fb      	str	r3, [r7, #12]
    /* loop through the string literal */
    while (input_pointer < input_end)
 800160e:	e094      	b.n	800173a <parse_string+0x20e>
    {
        if (*input_pointer != '\\')
 8001610:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001612:	781b      	ldrb	r3, [r3, #0]
 8001614:	2b5c      	cmp	r3, #92	@ 0x5c
 8001616:	d008      	beq.n	800162a <parse_string+0xfe>
        {
            *output_pointer++ = *input_pointer++;
 8001618:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800161a:	1c53      	adds	r3, r2, #1
 800161c:	627b      	str	r3, [r7, #36]	@ 0x24
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	1c59      	adds	r1, r3, #1
 8001622:	60f9      	str	r1, [r7, #12]
 8001624:	7812      	ldrb	r2, [r2, #0]
 8001626:	701a      	strb	r2, [r3, #0]
 8001628:	e087      	b.n	800173a <parse_string+0x20e>
        }
        /* escape sequence */
        else
        {
            unsigned char sequence_length = 2;
 800162a:	2302      	movs	r3, #2
 800162c:	75fb      	strb	r3, [r7, #23]
            if ((input_end - input_pointer) < 1)
 800162e:	6a3a      	ldr	r2, [r7, #32]
 8001630:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001632:	1ad3      	subs	r3, r2, r3
 8001634:	2b00      	cmp	r3, #0
 8001636:	f340 80a4 	ble.w	8001782 <parse_string+0x256>
            {
                goto fail;
            }

            switch (input_pointer[1])
 800163a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800163c:	3301      	adds	r3, #1
 800163e:	781b      	ldrb	r3, [r3, #0]
 8001640:	2b75      	cmp	r3, #117	@ 0x75
 8001642:	f300 80a0 	bgt.w	8001786 <parse_string+0x25a>
 8001646:	2b5c      	cmp	r3, #92	@ 0x5c
 8001648:	da04      	bge.n	8001654 <parse_string+0x128>
 800164a:	2b22      	cmp	r3, #34	@ 0x22
 800164c:	d05c      	beq.n	8001708 <parse_string+0x1dc>
 800164e:	2b2f      	cmp	r3, #47	@ 0x2f
 8001650:	d05a      	beq.n	8001708 <parse_string+0x1dc>
                        goto fail;
                    }
                    break;

                default:
                    goto fail;
 8001652:	e098      	b.n	8001786 <parse_string+0x25a>
            switch (input_pointer[1])
 8001654:	3b5c      	subs	r3, #92	@ 0x5c
 8001656:	2b19      	cmp	r3, #25
 8001658:	f200 8095 	bhi.w	8001786 <parse_string+0x25a>
 800165c:	a201      	add	r2, pc, #4	@ (adr r2, 8001664 <parse_string+0x138>)
 800165e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001662:	bf00      	nop
 8001664:	08001709 	.word	0x08001709
 8001668:	08001787 	.word	0x08001787
 800166c:	08001787 	.word	0x08001787
 8001670:	08001787 	.word	0x08001787
 8001674:	08001787 	.word	0x08001787
 8001678:	08001787 	.word	0x08001787
 800167c:	080016cd 	.word	0x080016cd
 8001680:	08001787 	.word	0x08001787
 8001684:	08001787 	.word	0x08001787
 8001688:	08001787 	.word	0x08001787
 800168c:	080016d9 	.word	0x080016d9
 8001690:	08001787 	.word	0x08001787
 8001694:	08001787 	.word	0x08001787
 8001698:	08001787 	.word	0x08001787
 800169c:	08001787 	.word	0x08001787
 80016a0:	08001787 	.word	0x08001787
 80016a4:	08001787 	.word	0x08001787
 80016a8:	08001787 	.word	0x08001787
 80016ac:	080016e5 	.word	0x080016e5
 80016b0:	08001787 	.word	0x08001787
 80016b4:	08001787 	.word	0x08001787
 80016b8:	08001787 	.word	0x08001787
 80016bc:	080016f1 	.word	0x080016f1
 80016c0:	08001787 	.word	0x08001787
 80016c4:	080016fd 	.word	0x080016fd
 80016c8:	08001719 	.word	0x08001719
                    *output_pointer++ = '\b';
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	1c5a      	adds	r2, r3, #1
 80016d0:	60fa      	str	r2, [r7, #12]
 80016d2:	2208      	movs	r2, #8
 80016d4:	701a      	strb	r2, [r3, #0]
                    break;
 80016d6:	e02c      	b.n	8001732 <parse_string+0x206>
                    *output_pointer++ = '\f';
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	1c5a      	adds	r2, r3, #1
 80016dc:	60fa      	str	r2, [r7, #12]
 80016de:	220c      	movs	r2, #12
 80016e0:	701a      	strb	r2, [r3, #0]
                    break;
 80016e2:	e026      	b.n	8001732 <parse_string+0x206>
                    *output_pointer++ = '\n';
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	1c5a      	adds	r2, r3, #1
 80016e8:	60fa      	str	r2, [r7, #12]
 80016ea:	220a      	movs	r2, #10
 80016ec:	701a      	strb	r2, [r3, #0]
                    break;
 80016ee:	e020      	b.n	8001732 <parse_string+0x206>
                    *output_pointer++ = '\r';
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	1c5a      	adds	r2, r3, #1
 80016f4:	60fa      	str	r2, [r7, #12]
 80016f6:	220d      	movs	r2, #13
 80016f8:	701a      	strb	r2, [r3, #0]
                    break;
 80016fa:	e01a      	b.n	8001732 <parse_string+0x206>
                    *output_pointer++ = '\t';
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	1c5a      	adds	r2, r3, #1
 8001700:	60fa      	str	r2, [r7, #12]
 8001702:	2209      	movs	r2, #9
 8001704:	701a      	strb	r2, [r3, #0]
                    break;
 8001706:	e014      	b.n	8001732 <parse_string+0x206>
                    *output_pointer++ = input_pointer[1];
 8001708:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800170a:	1c5a      	adds	r2, r3, #1
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	1c59      	adds	r1, r3, #1
 8001710:	60f9      	str	r1, [r7, #12]
 8001712:	7812      	ldrb	r2, [r2, #0]
 8001714:	701a      	strb	r2, [r3, #0]
                    break;
 8001716:	e00c      	b.n	8001732 <parse_string+0x206>
                    sequence_length = utf16_literal_to_utf8(input_pointer, input_end, &output_pointer);
 8001718:	f107 030c 	add.w	r3, r7, #12
 800171c:	461a      	mov	r2, r3
 800171e:	6a39      	ldr	r1, [r7, #32]
 8001720:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001722:	f7ff fe1b 	bl	800135c <utf16_literal_to_utf8>
 8001726:	4603      	mov	r3, r0
 8001728:	75fb      	strb	r3, [r7, #23]
                    if (sequence_length == 0)
 800172a:	7dfb      	ldrb	r3, [r7, #23]
 800172c:	2b00      	cmp	r3, #0
 800172e:	d02c      	beq.n	800178a <parse_string+0x25e>
                    break;
 8001730:	bf00      	nop
            }
            input_pointer += sequence_length;
 8001732:	7dfb      	ldrb	r3, [r7, #23]
 8001734:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001736:	4413      	add	r3, r2
 8001738:	627b      	str	r3, [r7, #36]	@ 0x24
    while (input_pointer < input_end)
 800173a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800173c:	6a3b      	ldr	r3, [r7, #32]
 800173e:	429a      	cmp	r2, r3
 8001740:	f4ff af66 	bcc.w	8001610 <parse_string+0xe4>
        }
    }

    /* zero terminate the output */
    *output_pointer = '\0';
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	2200      	movs	r2, #0
 8001748:	701a      	strb	r2, [r3, #0]

    item->type = cJSON_String;
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	2210      	movs	r2, #16
 800174e:	60da      	str	r2, [r3, #12]
    item->valuestring = (char*)output;
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	69fa      	ldr	r2, [r7, #28]
 8001754:	611a      	str	r2, [r3, #16]

    input_buffer->offset = (size_t) (input_end - input_buffer->content);
 8001756:	683b      	ldr	r3, [r7, #0]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	6a3a      	ldr	r2, [r7, #32]
 800175c:	1ad3      	subs	r3, r2, r3
 800175e:	461a      	mov	r2, r3
 8001760:	683b      	ldr	r3, [r7, #0]
 8001762:	609a      	str	r2, [r3, #8]
    input_buffer->offset++;
 8001764:	683b      	ldr	r3, [r7, #0]
 8001766:	689b      	ldr	r3, [r3, #8]
 8001768:	1c5a      	adds	r2, r3, #1
 800176a:	683b      	ldr	r3, [r7, #0]
 800176c:	609a      	str	r2, [r3, #8]

    return true;
 800176e:	2301      	movs	r3, #1
 8001770:	e020      	b.n	80017b4 <parse_string+0x288>
        goto fail;
 8001772:	bf00      	nop
 8001774:	e00a      	b.n	800178c <parse_string+0x260>
                    goto fail;
 8001776:	bf00      	nop
 8001778:	e008      	b.n	800178c <parse_string+0x260>
            goto fail; /* string ended unexpectedly */
 800177a:	bf00      	nop
 800177c:	e006      	b.n	800178c <parse_string+0x260>
            goto fail; /* allocation failure */
 800177e:	bf00      	nop
 8001780:	e004      	b.n	800178c <parse_string+0x260>
                goto fail;
 8001782:	bf00      	nop
 8001784:	e002      	b.n	800178c <parse_string+0x260>
                    goto fail;
 8001786:	bf00      	nop
 8001788:	e000      	b.n	800178c <parse_string+0x260>
                        goto fail;
 800178a:	bf00      	nop

fail:
    if (output != NULL)
 800178c:	69fb      	ldr	r3, [r7, #28]
 800178e:	2b00      	cmp	r3, #0
 8001790:	d005      	beq.n	800179e <parse_string+0x272>
    {
        input_buffer->hooks.deallocate(output);
 8001792:	683b      	ldr	r3, [r7, #0]
 8001794:	695b      	ldr	r3, [r3, #20]
 8001796:	69f8      	ldr	r0, [r7, #28]
 8001798:	4798      	blx	r3
        output = NULL;
 800179a:	2300      	movs	r3, #0
 800179c:	61fb      	str	r3, [r7, #28]
    }

    if (input_pointer != NULL)
 800179e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d006      	beq.n	80017b2 <parse_string+0x286>
    {
        input_buffer->offset = (size_t)(input_pointer - input_buffer->content);
 80017a4:	683b      	ldr	r3, [r7, #0]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80017aa:	1ad3      	subs	r3, r2, r3
 80017ac:	461a      	mov	r2, r3
 80017ae:	683b      	ldr	r3, [r7, #0]
 80017b0:	609a      	str	r2, [r3, #8]
    }

    return false;
 80017b2:	2300      	movs	r3, #0
}
 80017b4:	4618      	mov	r0, r3
 80017b6:	3728      	adds	r7, #40	@ 0x28
 80017b8:	46bd      	mov	sp, r7
 80017ba:	bd80      	pop	{r7, pc}

080017bc <buffer_skip_whitespace>:
static cJSON_bool parse_object(cJSON * const item, parse_buffer * const input_buffer);
static cJSON_bool print_object(const cJSON * const item, printbuffer * const output_buffer);

/* Utility to jump whitespace and cr/lf */
static parse_buffer *buffer_skip_whitespace(parse_buffer * const buffer)
{
 80017bc:	b480      	push	{r7}
 80017be:	b083      	sub	sp, #12
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
    if ((buffer == NULL) || (buffer->content == NULL))
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d003      	beq.n	80017d2 <buffer_skip_whitespace+0x16>
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d101      	bne.n	80017d6 <buffer_skip_whitespace+0x1a>
    {
        return NULL;
 80017d2:	2300      	movs	r3, #0
 80017d4:	e02c      	b.n	8001830 <buffer_skip_whitespace+0x74>
    }

    if (cannot_access_at_index(buffer, 0))
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d005      	beq.n	80017e8 <buffer_skip_whitespace+0x2c>
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	689a      	ldr	r2, [r3, #8]
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	685b      	ldr	r3, [r3, #4]
 80017e4:	429a      	cmp	r2, r3
 80017e6:	d306      	bcc.n	80017f6 <buffer_skip_whitespace+0x3a>
    {
        return buffer;
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	e021      	b.n	8001830 <buffer_skip_whitespace+0x74>
    }

    while (can_access_at_index(buffer, 0) && (buffer_at_offset(buffer)[0] <= 32))
    {
       buffer->offset++;
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	689b      	ldr	r3, [r3, #8]
 80017f0:	1c5a      	adds	r2, r3, #1
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	609a      	str	r2, [r3, #8]
    while (can_access_at_index(buffer, 0) && (buffer_at_offset(buffer)[0] <= 32))
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d00d      	beq.n	8001818 <buffer_skip_whitespace+0x5c>
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	689a      	ldr	r2, [r3, #8]
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	685b      	ldr	r3, [r3, #4]
 8001804:	429a      	cmp	r2, r3
 8001806:	d207      	bcs.n	8001818 <buffer_skip_whitespace+0x5c>
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681a      	ldr	r2, [r3, #0]
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	689b      	ldr	r3, [r3, #8]
 8001810:	4413      	add	r3, r2
 8001812:	781b      	ldrb	r3, [r3, #0]
 8001814:	2b20      	cmp	r3, #32
 8001816:	d9e9      	bls.n	80017ec <buffer_skip_whitespace+0x30>
    }

    if (buffer->offset == buffer->length)
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	689a      	ldr	r2, [r3, #8]
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	685b      	ldr	r3, [r3, #4]
 8001820:	429a      	cmp	r2, r3
 8001822:	d104      	bne.n	800182e <buffer_skip_whitespace+0x72>
    {
        buffer->offset--;
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	689b      	ldr	r3, [r3, #8]
 8001828:	1e5a      	subs	r2, r3, #1
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	609a      	str	r2, [r3, #8]
    }

    return buffer;
 800182e:	687b      	ldr	r3, [r7, #4]
}
 8001830:	4618      	mov	r0, r3
 8001832:	370c      	adds	r7, #12
 8001834:	46bd      	mov	sp, r7
 8001836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183a:	4770      	bx	lr

0800183c <skip_utf8_bom>:

/* skip the UTF-8 BOM (byte order mark) if it is at the beginning of a buffer */
static parse_buffer *skip_utf8_bom(parse_buffer * const buffer)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b082      	sub	sp, #8
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
    if ((buffer == NULL) || (buffer->content == NULL) || (buffer->offset != 0))
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	2b00      	cmp	r3, #0
 8001848:	d007      	beq.n	800185a <skip_utf8_bom+0x1e>
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	2b00      	cmp	r3, #0
 8001850:	d003      	beq.n	800185a <skip_utf8_bom+0x1e>
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	689b      	ldr	r3, [r3, #8]
 8001856:	2b00      	cmp	r3, #0
 8001858:	d001      	beq.n	800185e <skip_utf8_bom+0x22>
    {
        return NULL;
 800185a:	2300      	movs	r3, #0
 800185c:	e01c      	b.n	8001898 <skip_utf8_bom+0x5c>
    }

    if (can_access_at_index(buffer, 4) && (strncmp((const char*)buffer_at_offset(buffer), "\xEF\xBB\xBF", 3) == 0))
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	2b00      	cmp	r3, #0
 8001862:	d018      	beq.n	8001896 <skip_utf8_bom+0x5a>
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	689b      	ldr	r3, [r3, #8]
 8001868:	1d1a      	adds	r2, r3, #4
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	685b      	ldr	r3, [r3, #4]
 800186e:	429a      	cmp	r2, r3
 8001870:	d211      	bcs.n	8001896 <skip_utf8_bom+0x5a>
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681a      	ldr	r2, [r3, #0]
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	689b      	ldr	r3, [r3, #8]
 800187a:	4413      	add	r3, r2
 800187c:	2203      	movs	r2, #3
 800187e:	4908      	ldr	r1, [pc, #32]	@ (80018a0 <skip_utf8_bom+0x64>)
 8001880:	4618      	mov	r0, r3
 8001882:	f00d fa44 	bl	800ed0e <strncmp>
 8001886:	4603      	mov	r3, r0
 8001888:	2b00      	cmp	r3, #0
 800188a:	d104      	bne.n	8001896 <skip_utf8_bom+0x5a>
    {
        buffer->offset += 3;
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	689b      	ldr	r3, [r3, #8]
 8001890:	1cda      	adds	r2, r3, #3
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	609a      	str	r2, [r3, #8]
    }

    return buffer;
 8001896:	687b      	ldr	r3, [r7, #4]
}
 8001898:	4618      	mov	r0, r3
 800189a:	3708      	adds	r7, #8
 800189c:	46bd      	mov	sp, r7
 800189e:	bd80      	pop	{r7, pc}
 80018a0:	08010970 	.word	0x08010970

080018a4 <cJSON_ParseWithOpts>:

CJSON_PUBLIC(cJSON *) cJSON_ParseWithOpts(const char *value, const char **return_parse_end, cJSON_bool require_null_terminated)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b086      	sub	sp, #24
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	60f8      	str	r0, [r7, #12]
 80018ac:	60b9      	str	r1, [r7, #8]
 80018ae:	607a      	str	r2, [r7, #4]
    size_t buffer_length;

    if (NULL == value)
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d101      	bne.n	80018ba <cJSON_ParseWithOpts+0x16>
    {
        return NULL;
 80018b6:	2300      	movs	r3, #0
 80018b8:	e00c      	b.n	80018d4 <cJSON_ParseWithOpts+0x30>
    }

    /* Adding null character size due to require_null_terminated. */
    buffer_length = strlen(value) + sizeof("");
 80018ba:	68f8      	ldr	r0, [r7, #12]
 80018bc:	f7fe fc9a 	bl	80001f4 <strlen>
 80018c0:	4603      	mov	r3, r0
 80018c2:	3301      	adds	r3, #1
 80018c4:	617b      	str	r3, [r7, #20]

    return cJSON_ParseWithLengthOpts(value, buffer_length, return_parse_end, require_null_terminated);
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	68ba      	ldr	r2, [r7, #8]
 80018ca:	6979      	ldr	r1, [r7, #20]
 80018cc:	68f8      	ldr	r0, [r7, #12]
 80018ce:	f000 f805 	bl	80018dc <cJSON_ParseWithLengthOpts>
 80018d2:	4603      	mov	r3, r0
}
 80018d4:	4618      	mov	r0, r3
 80018d6:	3718      	adds	r7, #24
 80018d8:	46bd      	mov	sp, r7
 80018da:	bd80      	pop	{r7, pc}

080018dc <cJSON_ParseWithLengthOpts>:

/* Parse an object - create a new root, and populate. */
CJSON_PUBLIC(cJSON *) cJSON_ParseWithLengthOpts(const char *value, size_t buffer_length, const char **return_parse_end, cJSON_bool require_null_terminated)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b08e      	sub	sp, #56	@ 0x38
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	60f8      	str	r0, [r7, #12]
 80018e4:	60b9      	str	r1, [r7, #8]
 80018e6:	607a      	str	r2, [r7, #4]
 80018e8:	603b      	str	r3, [r7, #0]
    parse_buffer buffer = { 0, 0, 0, 0, { 0, 0, 0 } };
 80018ea:	f107 0318 	add.w	r3, r7, #24
 80018ee:	2200      	movs	r2, #0
 80018f0:	601a      	str	r2, [r3, #0]
 80018f2:	605a      	str	r2, [r3, #4]
 80018f4:	609a      	str	r2, [r3, #8]
 80018f6:	60da      	str	r2, [r3, #12]
 80018f8:	611a      	str	r2, [r3, #16]
 80018fa:	615a      	str	r2, [r3, #20]
 80018fc:	619a      	str	r2, [r3, #24]
    cJSON *item = NULL;
 80018fe:	2300      	movs	r3, #0
 8001900:	637b      	str	r3, [r7, #52]	@ 0x34

    /* reset error position */
    global_error.json = NULL;
 8001902:	4b41      	ldr	r3, [pc, #260]	@ (8001a08 <cJSON_ParseWithLengthOpts+0x12c>)
 8001904:	2200      	movs	r2, #0
 8001906:	601a      	str	r2, [r3, #0]
    global_error.position = 0;
 8001908:	4b3f      	ldr	r3, [pc, #252]	@ (8001a08 <cJSON_ParseWithLengthOpts+0x12c>)
 800190a:	2200      	movs	r2, #0
 800190c:	605a      	str	r2, [r3, #4]

    if (value == NULL || 0 == buffer_length)
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	2b00      	cmp	r3, #0
 8001912:	d042      	beq.n	800199a <cJSON_ParseWithLengthOpts+0xbe>
 8001914:	68bb      	ldr	r3, [r7, #8]
 8001916:	2b00      	cmp	r3, #0
 8001918:	d03f      	beq.n	800199a <cJSON_ParseWithLengthOpts+0xbe>
    {
        goto fail;
    }

    buffer.content = (const unsigned char*)value;
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	61bb      	str	r3, [r7, #24]
    buffer.length = buffer_length;
 800191e:	68bb      	ldr	r3, [r7, #8]
 8001920:	61fb      	str	r3, [r7, #28]
    buffer.offset = 0;
 8001922:	2300      	movs	r3, #0
 8001924:	623b      	str	r3, [r7, #32]
    buffer.hooks = global_hooks;
 8001926:	4a39      	ldr	r2, [pc, #228]	@ (8001a0c <cJSON_ParseWithLengthOpts+0x130>)
 8001928:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800192c:	ca07      	ldmia	r2, {r0, r1, r2}
 800192e:	e883 0007 	stmia.w	r3, {r0, r1, r2}

    item = cJSON_New_Item(&global_hooks);
 8001932:	4836      	ldr	r0, [pc, #216]	@ (8001a0c <cJSON_ParseWithLengthOpts+0x130>)
 8001934:	f7ff fb74 	bl	8001020 <cJSON_New_Item>
 8001938:	6378      	str	r0, [r7, #52]	@ 0x34
    if (item == NULL) /* memory fail */
 800193a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800193c:	2b00      	cmp	r3, #0
 800193e:	d02e      	beq.n	800199e <cJSON_ParseWithLengthOpts+0xc2>
    {
        goto fail;
    }

    if (!parse_value(item, buffer_skip_whitespace(skip_utf8_bom(&buffer))))
 8001940:	f107 0318 	add.w	r3, r7, #24
 8001944:	4618      	mov	r0, r3
 8001946:	f7ff ff79 	bl	800183c <skip_utf8_bom>
 800194a:	4603      	mov	r3, r0
 800194c:	4618      	mov	r0, r3
 800194e:	f7ff ff35 	bl	80017bc <buffer_skip_whitespace>
 8001952:	4603      	mov	r3, r0
 8001954:	4619      	mov	r1, r3
 8001956:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8001958:	f000 f868 	bl	8001a2c <parse_value>
 800195c:	4603      	mov	r3, r0
 800195e:	2b00      	cmp	r3, #0
 8001960:	d01f      	beq.n	80019a2 <cJSON_ParseWithLengthOpts+0xc6>
        /* parse failure. ep is set. */
        goto fail;
    }

    /* if we require null-terminated JSON without appended garbage, skip and then check for a null terminator */
    if (require_null_terminated)
 8001962:	683b      	ldr	r3, [r7, #0]
 8001964:	2b00      	cmp	r3, #0
 8001966:	d00e      	beq.n	8001986 <cJSON_ParseWithLengthOpts+0xaa>
    {
        buffer_skip_whitespace(&buffer);
 8001968:	f107 0318 	add.w	r3, r7, #24
 800196c:	4618      	mov	r0, r3
 800196e:	f7ff ff25 	bl	80017bc <buffer_skip_whitespace>
        if ((buffer.offset >= buffer.length) || buffer_at_offset(&buffer)[0] != '\0')
 8001972:	6a3a      	ldr	r2, [r7, #32]
 8001974:	69fb      	ldr	r3, [r7, #28]
 8001976:	429a      	cmp	r2, r3
 8001978:	d215      	bcs.n	80019a6 <cJSON_ParseWithLengthOpts+0xca>
 800197a:	69ba      	ldr	r2, [r7, #24]
 800197c:	6a3b      	ldr	r3, [r7, #32]
 800197e:	4413      	add	r3, r2
 8001980:	781b      	ldrb	r3, [r3, #0]
 8001982:	2b00      	cmp	r3, #0
 8001984:	d10f      	bne.n	80019a6 <cJSON_ParseWithLengthOpts+0xca>
        {
            goto fail;
        }
    }
    if (return_parse_end)
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	2b00      	cmp	r3, #0
 800198a:	d004      	beq.n	8001996 <cJSON_ParseWithLengthOpts+0xba>
    {
        *return_parse_end = (const char*)buffer_at_offset(&buffer);
 800198c:	69ba      	ldr	r2, [r7, #24]
 800198e:	6a3b      	ldr	r3, [r7, #32]
 8001990:	441a      	add	r2, r3
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	601a      	str	r2, [r3, #0]
    }

    return item;
 8001996:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001998:	e031      	b.n	80019fe <cJSON_ParseWithLengthOpts+0x122>
        goto fail;
 800199a:	bf00      	nop
 800199c:	e004      	b.n	80019a8 <cJSON_ParseWithLengthOpts+0xcc>
        goto fail;
 800199e:	bf00      	nop
 80019a0:	e002      	b.n	80019a8 <cJSON_ParseWithLengthOpts+0xcc>
        goto fail;
 80019a2:	bf00      	nop
 80019a4:	e000      	b.n	80019a8 <cJSON_ParseWithLengthOpts+0xcc>
            goto fail;
 80019a6:	bf00      	nop

fail:
    if (item != NULL)
 80019a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d002      	beq.n	80019b4 <cJSON_ParseWithLengthOpts+0xd8>
    {
        cJSON_Delete(item);
 80019ae:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 80019b0:	f7ff fb4c 	bl	800104c <cJSON_Delete>
    }

    if (value != NULL)
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d020      	beq.n	80019fc <cJSON_ParseWithLengthOpts+0x120>
    {
        error local_error;
        local_error.json = (const unsigned char*)value;
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	613b      	str	r3, [r7, #16]
        local_error.position = 0;
 80019be:	2300      	movs	r3, #0
 80019c0:	617b      	str	r3, [r7, #20]

        if (buffer.offset < buffer.length)
 80019c2:	6a3a      	ldr	r2, [r7, #32]
 80019c4:	69fb      	ldr	r3, [r7, #28]
 80019c6:	429a      	cmp	r2, r3
 80019c8:	d202      	bcs.n	80019d0 <cJSON_ParseWithLengthOpts+0xf4>
        {
            local_error.position = buffer.offset;
 80019ca:	6a3b      	ldr	r3, [r7, #32]
 80019cc:	617b      	str	r3, [r7, #20]
 80019ce:	e005      	b.n	80019dc <cJSON_ParseWithLengthOpts+0x100>
        }
        else if (buffer.length > 0)
 80019d0:	69fb      	ldr	r3, [r7, #28]
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d002      	beq.n	80019dc <cJSON_ParseWithLengthOpts+0x100>
        {
            local_error.position = buffer.length - 1;
 80019d6:	69fb      	ldr	r3, [r7, #28]
 80019d8:	3b01      	subs	r3, #1
 80019da:	617b      	str	r3, [r7, #20]
        }

        if (return_parse_end != NULL)
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d004      	beq.n	80019ec <cJSON_ParseWithLengthOpts+0x110>
        {
            *return_parse_end = (const char*)local_error.json + local_error.position;
 80019e2:	693a      	ldr	r2, [r7, #16]
 80019e4:	697b      	ldr	r3, [r7, #20]
 80019e6:	441a      	add	r2, r3
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	601a      	str	r2, [r3, #0]
        }

        global_error = local_error;
 80019ec:	4b06      	ldr	r3, [pc, #24]	@ (8001a08 <cJSON_ParseWithLengthOpts+0x12c>)
 80019ee:	461a      	mov	r2, r3
 80019f0:	f107 0310 	add.w	r3, r7, #16
 80019f4:	e893 0003 	ldmia.w	r3, {r0, r1}
 80019f8:	e882 0003 	stmia.w	r2, {r0, r1}
    }

    return NULL;
 80019fc:	2300      	movs	r3, #0
}
 80019fe:	4618      	mov	r0, r3
 8001a00:	3738      	adds	r7, #56	@ 0x38
 8001a02:	46bd      	mov	sp, r7
 8001a04:	bd80      	pop	{r7, pc}
 8001a06:	bf00      	nop
 8001a08:	200002d0 	.word	0x200002d0
 8001a0c:	20000000 	.word	0x20000000

08001a10 <cJSON_Parse>:

/* Default options for cJSON_Parse */
CJSON_PUBLIC(cJSON *) cJSON_Parse(const char *value)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b082      	sub	sp, #8
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
    return cJSON_ParseWithOpts(value, 0, 0);
 8001a18:	2200      	movs	r2, #0
 8001a1a:	2100      	movs	r1, #0
 8001a1c:	6878      	ldr	r0, [r7, #4]
 8001a1e:	f7ff ff41 	bl	80018a4 <cJSON_ParseWithOpts>
 8001a22:	4603      	mov	r3, r0
}
 8001a24:	4618      	mov	r0, r3
 8001a26:	3708      	adds	r7, #8
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	bd80      	pop	{r7, pc}

08001a2c <parse_value>:
    return print_value(item, &p);
}

/* Parser core - when encountering text, process appropriately. */
static cJSON_bool parse_value(cJSON * const item, parse_buffer * const input_buffer)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b082      	sub	sp, #8
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
 8001a34:	6039      	str	r1, [r7, #0]
    if ((input_buffer == NULL) || (input_buffer->content == NULL))
 8001a36:	683b      	ldr	r3, [r7, #0]
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d003      	beq.n	8001a44 <parse_value+0x18>
 8001a3c:	683b      	ldr	r3, [r7, #0]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d101      	bne.n	8001a48 <parse_value+0x1c>
    {
        return false; /* no input */
 8001a44:	2300      	movs	r3, #0
 8001a46:	e0d2      	b.n	8001bee <parse_value+0x1c2>
    }

    /* parse the different types of values */
    /* null */
    if (can_read(input_buffer, 4) && (strncmp((const char*)buffer_at_offset(input_buffer), "null", 4) == 0))
 8001a48:	683b      	ldr	r3, [r7, #0]
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d01d      	beq.n	8001a8a <parse_value+0x5e>
 8001a4e:	683b      	ldr	r3, [r7, #0]
 8001a50:	689b      	ldr	r3, [r3, #8]
 8001a52:	1d1a      	adds	r2, r3, #4
 8001a54:	683b      	ldr	r3, [r7, #0]
 8001a56:	685b      	ldr	r3, [r3, #4]
 8001a58:	429a      	cmp	r2, r3
 8001a5a:	d816      	bhi.n	8001a8a <parse_value+0x5e>
 8001a5c:	683b      	ldr	r3, [r7, #0]
 8001a5e:	681a      	ldr	r2, [r3, #0]
 8001a60:	683b      	ldr	r3, [r7, #0]
 8001a62:	689b      	ldr	r3, [r3, #8]
 8001a64:	4413      	add	r3, r2
 8001a66:	2204      	movs	r2, #4
 8001a68:	4963      	ldr	r1, [pc, #396]	@ (8001bf8 <parse_value+0x1cc>)
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	f00d f94f 	bl	800ed0e <strncmp>
 8001a70:	4603      	mov	r3, r0
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d109      	bne.n	8001a8a <parse_value+0x5e>
    {
        item->type = cJSON_NULL;
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	2204      	movs	r2, #4
 8001a7a:	60da      	str	r2, [r3, #12]
        input_buffer->offset += 4;
 8001a7c:	683b      	ldr	r3, [r7, #0]
 8001a7e:	689b      	ldr	r3, [r3, #8]
 8001a80:	1d1a      	adds	r2, r3, #4
 8001a82:	683b      	ldr	r3, [r7, #0]
 8001a84:	609a      	str	r2, [r3, #8]
        return true;
 8001a86:	2301      	movs	r3, #1
 8001a88:	e0b1      	b.n	8001bee <parse_value+0x1c2>
    }
    /* false */
    if (can_read(input_buffer, 5) && (strncmp((const char*)buffer_at_offset(input_buffer), "false", 5) == 0))
 8001a8a:	683b      	ldr	r3, [r7, #0]
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d01d      	beq.n	8001acc <parse_value+0xa0>
 8001a90:	683b      	ldr	r3, [r7, #0]
 8001a92:	689b      	ldr	r3, [r3, #8]
 8001a94:	1d5a      	adds	r2, r3, #5
 8001a96:	683b      	ldr	r3, [r7, #0]
 8001a98:	685b      	ldr	r3, [r3, #4]
 8001a9a:	429a      	cmp	r2, r3
 8001a9c:	d816      	bhi.n	8001acc <parse_value+0xa0>
 8001a9e:	683b      	ldr	r3, [r7, #0]
 8001aa0:	681a      	ldr	r2, [r3, #0]
 8001aa2:	683b      	ldr	r3, [r7, #0]
 8001aa4:	689b      	ldr	r3, [r3, #8]
 8001aa6:	4413      	add	r3, r2
 8001aa8:	2205      	movs	r2, #5
 8001aaa:	4954      	ldr	r1, [pc, #336]	@ (8001bfc <parse_value+0x1d0>)
 8001aac:	4618      	mov	r0, r3
 8001aae:	f00d f92e 	bl	800ed0e <strncmp>
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d109      	bne.n	8001acc <parse_value+0xa0>
    {
        item->type = cJSON_False;
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	2201      	movs	r2, #1
 8001abc:	60da      	str	r2, [r3, #12]
        input_buffer->offset += 5;
 8001abe:	683b      	ldr	r3, [r7, #0]
 8001ac0:	689b      	ldr	r3, [r3, #8]
 8001ac2:	1d5a      	adds	r2, r3, #5
 8001ac4:	683b      	ldr	r3, [r7, #0]
 8001ac6:	609a      	str	r2, [r3, #8]
        return true;
 8001ac8:	2301      	movs	r3, #1
 8001aca:	e090      	b.n	8001bee <parse_value+0x1c2>
    }
    /* true */
    if (can_read(input_buffer, 4) && (strncmp((const char*)buffer_at_offset(input_buffer), "true", 4) == 0))
 8001acc:	683b      	ldr	r3, [r7, #0]
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d020      	beq.n	8001b14 <parse_value+0xe8>
 8001ad2:	683b      	ldr	r3, [r7, #0]
 8001ad4:	689b      	ldr	r3, [r3, #8]
 8001ad6:	1d1a      	adds	r2, r3, #4
 8001ad8:	683b      	ldr	r3, [r7, #0]
 8001ada:	685b      	ldr	r3, [r3, #4]
 8001adc:	429a      	cmp	r2, r3
 8001ade:	d819      	bhi.n	8001b14 <parse_value+0xe8>
 8001ae0:	683b      	ldr	r3, [r7, #0]
 8001ae2:	681a      	ldr	r2, [r3, #0]
 8001ae4:	683b      	ldr	r3, [r7, #0]
 8001ae6:	689b      	ldr	r3, [r3, #8]
 8001ae8:	4413      	add	r3, r2
 8001aea:	2204      	movs	r2, #4
 8001aec:	4944      	ldr	r1, [pc, #272]	@ (8001c00 <parse_value+0x1d4>)
 8001aee:	4618      	mov	r0, r3
 8001af0:	f00d f90d 	bl	800ed0e <strncmp>
 8001af4:	4603      	mov	r3, r0
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d10c      	bne.n	8001b14 <parse_value+0xe8>
    {
        item->type = cJSON_True;
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	2202      	movs	r2, #2
 8001afe:	60da      	str	r2, [r3, #12]
        item->valueint = 1;
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	2201      	movs	r2, #1
 8001b04:	615a      	str	r2, [r3, #20]
        input_buffer->offset += 4;
 8001b06:	683b      	ldr	r3, [r7, #0]
 8001b08:	689b      	ldr	r3, [r3, #8]
 8001b0a:	1d1a      	adds	r2, r3, #4
 8001b0c:	683b      	ldr	r3, [r7, #0]
 8001b0e:	609a      	str	r2, [r3, #8]
        return true;
 8001b10:	2301      	movs	r3, #1
 8001b12:	e06c      	b.n	8001bee <parse_value+0x1c2>
    }
    /* string */
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '\"'))
 8001b14:	683b      	ldr	r3, [r7, #0]
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d013      	beq.n	8001b42 <parse_value+0x116>
 8001b1a:	683b      	ldr	r3, [r7, #0]
 8001b1c:	689a      	ldr	r2, [r3, #8]
 8001b1e:	683b      	ldr	r3, [r7, #0]
 8001b20:	685b      	ldr	r3, [r3, #4]
 8001b22:	429a      	cmp	r2, r3
 8001b24:	d20d      	bcs.n	8001b42 <parse_value+0x116>
 8001b26:	683b      	ldr	r3, [r7, #0]
 8001b28:	681a      	ldr	r2, [r3, #0]
 8001b2a:	683b      	ldr	r3, [r7, #0]
 8001b2c:	689b      	ldr	r3, [r3, #8]
 8001b2e:	4413      	add	r3, r2
 8001b30:	781b      	ldrb	r3, [r3, #0]
 8001b32:	2b22      	cmp	r3, #34	@ 0x22
 8001b34:	d105      	bne.n	8001b42 <parse_value+0x116>
    {
        return parse_string(item, input_buffer);
 8001b36:	6839      	ldr	r1, [r7, #0]
 8001b38:	6878      	ldr	r0, [r7, #4]
 8001b3a:	f7ff fcf7 	bl	800152c <parse_string>
 8001b3e:	4603      	mov	r3, r0
 8001b40:	e055      	b.n	8001bee <parse_value+0x1c2>
    }
    /* number */
    if (can_access_at_index(input_buffer, 0) && ((buffer_at_offset(input_buffer)[0] == '-') || ((buffer_at_offset(input_buffer)[0] >= '0') && (buffer_at_offset(input_buffer)[0] <= '9'))))
 8001b42:	683b      	ldr	r3, [r7, #0]
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d023      	beq.n	8001b90 <parse_value+0x164>
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	689a      	ldr	r2, [r3, #8]
 8001b4c:	683b      	ldr	r3, [r7, #0]
 8001b4e:	685b      	ldr	r3, [r3, #4]
 8001b50:	429a      	cmp	r2, r3
 8001b52:	d21d      	bcs.n	8001b90 <parse_value+0x164>
 8001b54:	683b      	ldr	r3, [r7, #0]
 8001b56:	681a      	ldr	r2, [r3, #0]
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	689b      	ldr	r3, [r3, #8]
 8001b5c:	4413      	add	r3, r2
 8001b5e:	781b      	ldrb	r3, [r3, #0]
 8001b60:	2b2d      	cmp	r3, #45	@ 0x2d
 8001b62:	d00f      	beq.n	8001b84 <parse_value+0x158>
 8001b64:	683b      	ldr	r3, [r7, #0]
 8001b66:	681a      	ldr	r2, [r3, #0]
 8001b68:	683b      	ldr	r3, [r7, #0]
 8001b6a:	689b      	ldr	r3, [r3, #8]
 8001b6c:	4413      	add	r3, r2
 8001b6e:	781b      	ldrb	r3, [r3, #0]
 8001b70:	2b2f      	cmp	r3, #47	@ 0x2f
 8001b72:	d90d      	bls.n	8001b90 <parse_value+0x164>
 8001b74:	683b      	ldr	r3, [r7, #0]
 8001b76:	681a      	ldr	r2, [r3, #0]
 8001b78:	683b      	ldr	r3, [r7, #0]
 8001b7a:	689b      	ldr	r3, [r3, #8]
 8001b7c:	4413      	add	r3, r2
 8001b7e:	781b      	ldrb	r3, [r3, #0]
 8001b80:	2b39      	cmp	r3, #57	@ 0x39
 8001b82:	d805      	bhi.n	8001b90 <parse_value+0x164>
    {
        return parse_number(item, input_buffer);
 8001b84:	6839      	ldr	r1, [r7, #0]
 8001b86:	6878      	ldr	r0, [r7, #4]
 8001b88:	f7ff faba 	bl	8001100 <parse_number>
 8001b8c:	4603      	mov	r3, r0
 8001b8e:	e02e      	b.n	8001bee <parse_value+0x1c2>
    }
    /* array */
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '['))
 8001b90:	683b      	ldr	r3, [r7, #0]
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d013      	beq.n	8001bbe <parse_value+0x192>
 8001b96:	683b      	ldr	r3, [r7, #0]
 8001b98:	689a      	ldr	r2, [r3, #8]
 8001b9a:	683b      	ldr	r3, [r7, #0]
 8001b9c:	685b      	ldr	r3, [r3, #4]
 8001b9e:	429a      	cmp	r2, r3
 8001ba0:	d20d      	bcs.n	8001bbe <parse_value+0x192>
 8001ba2:	683b      	ldr	r3, [r7, #0]
 8001ba4:	681a      	ldr	r2, [r3, #0]
 8001ba6:	683b      	ldr	r3, [r7, #0]
 8001ba8:	689b      	ldr	r3, [r3, #8]
 8001baa:	4413      	add	r3, r2
 8001bac:	781b      	ldrb	r3, [r3, #0]
 8001bae:	2b5b      	cmp	r3, #91	@ 0x5b
 8001bb0:	d105      	bne.n	8001bbe <parse_value+0x192>
    {
        return parse_array(item, input_buffer);
 8001bb2:	6839      	ldr	r1, [r7, #0]
 8001bb4:	6878      	ldr	r0, [r7, #4]
 8001bb6:	f000 f825 	bl	8001c04 <parse_array>
 8001bba:	4603      	mov	r3, r0
 8001bbc:	e017      	b.n	8001bee <parse_value+0x1c2>
    }
    /* object */
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '{'))
 8001bbe:	683b      	ldr	r3, [r7, #0]
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d013      	beq.n	8001bec <parse_value+0x1c0>
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	689a      	ldr	r2, [r3, #8]
 8001bc8:	683b      	ldr	r3, [r7, #0]
 8001bca:	685b      	ldr	r3, [r3, #4]
 8001bcc:	429a      	cmp	r2, r3
 8001bce:	d20d      	bcs.n	8001bec <parse_value+0x1c0>
 8001bd0:	683b      	ldr	r3, [r7, #0]
 8001bd2:	681a      	ldr	r2, [r3, #0]
 8001bd4:	683b      	ldr	r3, [r7, #0]
 8001bd6:	689b      	ldr	r3, [r3, #8]
 8001bd8:	4413      	add	r3, r2
 8001bda:	781b      	ldrb	r3, [r3, #0]
 8001bdc:	2b7b      	cmp	r3, #123	@ 0x7b
 8001bde:	d105      	bne.n	8001bec <parse_value+0x1c0>
    {
        return parse_object(item, input_buffer);
 8001be0:	6839      	ldr	r1, [r7, #0]
 8001be2:	6878      	ldr	r0, [r7, #4]
 8001be4:	f000 f8d2 	bl	8001d8c <parse_object>
 8001be8:	4603      	mov	r3, r0
 8001bea:	e000      	b.n	8001bee <parse_value+0x1c2>
    }

    return false;
 8001bec:	2300      	movs	r3, #0
}
 8001bee:	4618      	mov	r0, r3
 8001bf0:	3708      	adds	r7, #8
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	bd80      	pop	{r7, pc}
 8001bf6:	bf00      	nop
 8001bf8:	08010944 	.word	0x08010944
 8001bfc:	08010974 	.word	0x08010974
 8001c00:	0801097c 	.word	0x0801097c

08001c04 <parse_array>:
    }
}

/* Build an array from input text. */
static cJSON_bool parse_array(cJSON * const item, parse_buffer * const input_buffer)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b086      	sub	sp, #24
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
 8001c0c:	6039      	str	r1, [r7, #0]
    cJSON *head = NULL; /* head of the linked list */
 8001c0e:	2300      	movs	r3, #0
 8001c10:	617b      	str	r3, [r7, #20]
    cJSON *current_item = NULL;
 8001c12:	2300      	movs	r3, #0
 8001c14:	613b      	str	r3, [r7, #16]

    if (input_buffer->depth >= CJSON_NESTING_LIMIT)
 8001c16:	683b      	ldr	r3, [r7, #0]
 8001c18:	68db      	ldr	r3, [r3, #12]
 8001c1a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001c1e:	d301      	bcc.n	8001c24 <parse_array+0x20>
    {
        return false; /* to deeply nested */
 8001c20:	2300      	movs	r3, #0
 8001c22:	e0af      	b.n	8001d84 <parse_array+0x180>
    }
    input_buffer->depth++;
 8001c24:	683b      	ldr	r3, [r7, #0]
 8001c26:	68db      	ldr	r3, [r3, #12]
 8001c28:	1c5a      	adds	r2, r3, #1
 8001c2a:	683b      	ldr	r3, [r7, #0]
 8001c2c:	60da      	str	r2, [r3, #12]

    if (buffer_at_offset(input_buffer)[0] != '[')
 8001c2e:	683b      	ldr	r3, [r7, #0]
 8001c30:	681a      	ldr	r2, [r3, #0]
 8001c32:	683b      	ldr	r3, [r7, #0]
 8001c34:	689b      	ldr	r3, [r3, #8]
 8001c36:	4413      	add	r3, r2
 8001c38:	781b      	ldrb	r3, [r3, #0]
 8001c3a:	2b5b      	cmp	r3, #91	@ 0x5b
 8001c3c:	f040 8094 	bne.w	8001d68 <parse_array+0x164>
    {
        /* not an array */
        goto fail;
    }

    input_buffer->offset++;
 8001c40:	683b      	ldr	r3, [r7, #0]
 8001c42:	689b      	ldr	r3, [r3, #8]
 8001c44:	1c5a      	adds	r2, r3, #1
 8001c46:	683b      	ldr	r3, [r7, #0]
 8001c48:	609a      	str	r2, [r3, #8]
    buffer_skip_whitespace(input_buffer);
 8001c4a:	6838      	ldr	r0, [r7, #0]
 8001c4c:	f7ff fdb6 	bl	80017bc <buffer_skip_whitespace>
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ']'))
 8001c50:	683b      	ldr	r3, [r7, #0]
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d00d      	beq.n	8001c72 <parse_array+0x6e>
 8001c56:	683b      	ldr	r3, [r7, #0]
 8001c58:	689a      	ldr	r2, [r3, #8]
 8001c5a:	683b      	ldr	r3, [r7, #0]
 8001c5c:	685b      	ldr	r3, [r3, #4]
 8001c5e:	429a      	cmp	r2, r3
 8001c60:	d207      	bcs.n	8001c72 <parse_array+0x6e>
 8001c62:	683b      	ldr	r3, [r7, #0]
 8001c64:	681a      	ldr	r2, [r3, #0]
 8001c66:	683b      	ldr	r3, [r7, #0]
 8001c68:	689b      	ldr	r3, [r3, #8]
 8001c6a:	4413      	add	r3, r2
 8001c6c:	781b      	ldrb	r3, [r3, #0]
 8001c6e:	2b5d      	cmp	r3, #93	@ 0x5d
 8001c70:	d061      	beq.n	8001d36 <parse_array+0x132>
        /* empty array */
        goto success;
    }

    /* check if we skipped to the end of the buffer */
    if (cannot_access_at_index(input_buffer, 0))
 8001c72:	683b      	ldr	r3, [r7, #0]
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d005      	beq.n	8001c84 <parse_array+0x80>
 8001c78:	683b      	ldr	r3, [r7, #0]
 8001c7a:	689a      	ldr	r2, [r3, #8]
 8001c7c:	683b      	ldr	r3, [r7, #0]
 8001c7e:	685b      	ldr	r3, [r3, #4]
 8001c80:	429a      	cmp	r2, r3
 8001c82:	d305      	bcc.n	8001c90 <parse_array+0x8c>
    {
        input_buffer->offset--;
 8001c84:	683b      	ldr	r3, [r7, #0]
 8001c86:	689b      	ldr	r3, [r3, #8]
 8001c88:	1e5a      	subs	r2, r3, #1
 8001c8a:	683b      	ldr	r3, [r7, #0]
 8001c8c:	609a      	str	r2, [r3, #8]
        goto fail;
 8001c8e:	e072      	b.n	8001d76 <parse_array+0x172>
    }

    /* step back to character in front of the first element */
    input_buffer->offset--;
 8001c90:	683b      	ldr	r3, [r7, #0]
 8001c92:	689b      	ldr	r3, [r3, #8]
 8001c94:	1e5a      	subs	r2, r3, #1
 8001c96:	683b      	ldr	r3, [r7, #0]
 8001c98:	609a      	str	r2, [r3, #8]
    /* loop through the comma separated array elements */
    do
    {
        /* allocate next item */
        cJSON *new_item = cJSON_New_Item(&(input_buffer->hooks));
 8001c9a:	683b      	ldr	r3, [r7, #0]
 8001c9c:	3310      	adds	r3, #16
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	f7ff f9be 	bl	8001020 <cJSON_New_Item>
 8001ca4:	60f8      	str	r0, [r7, #12]
        if (new_item == NULL)
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d05f      	beq.n	8001d6c <parse_array+0x168>
        {
            goto fail; /* allocation failure */
        }

        /* attach next item to list */
        if (head == NULL)
 8001cac:	697b      	ldr	r3, [r7, #20]
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d104      	bne.n	8001cbc <parse_array+0xb8>
        {
            /* start the linked list */
            current_item = head = new_item;
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	617b      	str	r3, [r7, #20]
 8001cb6:	697b      	ldr	r3, [r7, #20]
 8001cb8:	613b      	str	r3, [r7, #16]
 8001cba:	e007      	b.n	8001ccc <parse_array+0xc8>
        }
        else
        {
            /* add to the end and advance */
            current_item->next = new_item;
 8001cbc:	693b      	ldr	r3, [r7, #16]
 8001cbe:	68fa      	ldr	r2, [r7, #12]
 8001cc0:	601a      	str	r2, [r3, #0]
            new_item->prev = current_item;
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	693a      	ldr	r2, [r7, #16]
 8001cc6:	605a      	str	r2, [r3, #4]
            current_item = new_item;
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	613b      	str	r3, [r7, #16]
        }

        /* parse next value */
        input_buffer->offset++;
 8001ccc:	683b      	ldr	r3, [r7, #0]
 8001cce:	689b      	ldr	r3, [r3, #8]
 8001cd0:	1c5a      	adds	r2, r3, #1
 8001cd2:	683b      	ldr	r3, [r7, #0]
 8001cd4:	609a      	str	r2, [r3, #8]
        buffer_skip_whitespace(input_buffer);
 8001cd6:	6838      	ldr	r0, [r7, #0]
 8001cd8:	f7ff fd70 	bl	80017bc <buffer_skip_whitespace>
        if (!parse_value(current_item, input_buffer))
 8001cdc:	6839      	ldr	r1, [r7, #0]
 8001cde:	6938      	ldr	r0, [r7, #16]
 8001ce0:	f7ff fea4 	bl	8001a2c <parse_value>
 8001ce4:	4603      	mov	r3, r0
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d042      	beq.n	8001d70 <parse_array+0x16c>
        {
            goto fail; /* failed to parse value */
        }
        buffer_skip_whitespace(input_buffer);
 8001cea:	6838      	ldr	r0, [r7, #0]
 8001cec:	f7ff fd66 	bl	80017bc <buffer_skip_whitespace>
    }
    while (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ','));
 8001cf0:	683b      	ldr	r3, [r7, #0]
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d00d      	beq.n	8001d12 <parse_array+0x10e>
 8001cf6:	683b      	ldr	r3, [r7, #0]
 8001cf8:	689a      	ldr	r2, [r3, #8]
 8001cfa:	683b      	ldr	r3, [r7, #0]
 8001cfc:	685b      	ldr	r3, [r3, #4]
 8001cfe:	429a      	cmp	r2, r3
 8001d00:	d207      	bcs.n	8001d12 <parse_array+0x10e>
 8001d02:	683b      	ldr	r3, [r7, #0]
 8001d04:	681a      	ldr	r2, [r3, #0]
 8001d06:	683b      	ldr	r3, [r7, #0]
 8001d08:	689b      	ldr	r3, [r3, #8]
 8001d0a:	4413      	add	r3, r2
 8001d0c:	781b      	ldrb	r3, [r3, #0]
 8001d0e:	2b2c      	cmp	r3, #44	@ 0x2c
 8001d10:	d0c3      	beq.n	8001c9a <parse_array+0x96>

    if (cannot_access_at_index(input_buffer, 0) || buffer_at_offset(input_buffer)[0] != ']')
 8001d12:	683b      	ldr	r3, [r7, #0]
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d02d      	beq.n	8001d74 <parse_array+0x170>
 8001d18:	683b      	ldr	r3, [r7, #0]
 8001d1a:	689a      	ldr	r2, [r3, #8]
 8001d1c:	683b      	ldr	r3, [r7, #0]
 8001d1e:	685b      	ldr	r3, [r3, #4]
 8001d20:	429a      	cmp	r2, r3
 8001d22:	d227      	bcs.n	8001d74 <parse_array+0x170>
 8001d24:	683b      	ldr	r3, [r7, #0]
 8001d26:	681a      	ldr	r2, [r3, #0]
 8001d28:	683b      	ldr	r3, [r7, #0]
 8001d2a:	689b      	ldr	r3, [r3, #8]
 8001d2c:	4413      	add	r3, r2
 8001d2e:	781b      	ldrb	r3, [r3, #0]
 8001d30:	2b5d      	cmp	r3, #93	@ 0x5d
 8001d32:	d11f      	bne.n	8001d74 <parse_array+0x170>
    {
        goto fail; /* expected end of array */
    }

success:
 8001d34:	e000      	b.n	8001d38 <parse_array+0x134>
        goto success;
 8001d36:	bf00      	nop
    input_buffer->depth--;
 8001d38:	683b      	ldr	r3, [r7, #0]
 8001d3a:	68db      	ldr	r3, [r3, #12]
 8001d3c:	1e5a      	subs	r2, r3, #1
 8001d3e:	683b      	ldr	r3, [r7, #0]
 8001d40:	60da      	str	r2, [r3, #12]

    if (head != NULL) {
 8001d42:	697b      	ldr	r3, [r7, #20]
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d002      	beq.n	8001d4e <parse_array+0x14a>
        head->prev = current_item;
 8001d48:	697b      	ldr	r3, [r7, #20]
 8001d4a:	693a      	ldr	r2, [r7, #16]
 8001d4c:	605a      	str	r2, [r3, #4]
    }

    item->type = cJSON_Array;
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	2220      	movs	r2, #32
 8001d52:	60da      	str	r2, [r3, #12]
    item->child = head;
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	697a      	ldr	r2, [r7, #20]
 8001d58:	609a      	str	r2, [r3, #8]

    input_buffer->offset++;
 8001d5a:	683b      	ldr	r3, [r7, #0]
 8001d5c:	689b      	ldr	r3, [r3, #8]
 8001d5e:	1c5a      	adds	r2, r3, #1
 8001d60:	683b      	ldr	r3, [r7, #0]
 8001d62:	609a      	str	r2, [r3, #8]

    return true;
 8001d64:	2301      	movs	r3, #1
 8001d66:	e00d      	b.n	8001d84 <parse_array+0x180>
        goto fail;
 8001d68:	bf00      	nop
 8001d6a:	e004      	b.n	8001d76 <parse_array+0x172>
            goto fail; /* allocation failure */
 8001d6c:	bf00      	nop
 8001d6e:	e002      	b.n	8001d76 <parse_array+0x172>
            goto fail; /* failed to parse value */
 8001d70:	bf00      	nop
 8001d72:	e000      	b.n	8001d76 <parse_array+0x172>
        goto fail; /* expected end of array */
 8001d74:	bf00      	nop

fail:
    if (head != NULL)
 8001d76:	697b      	ldr	r3, [r7, #20]
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d002      	beq.n	8001d82 <parse_array+0x17e>
    {
        cJSON_Delete(head);
 8001d7c:	6978      	ldr	r0, [r7, #20]
 8001d7e:	f7ff f965 	bl	800104c <cJSON_Delete>
    }

    return false;
 8001d82:	2300      	movs	r3, #0
}
 8001d84:	4618      	mov	r0, r3
 8001d86:	3718      	adds	r7, #24
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	bd80      	pop	{r7, pc}

08001d8c <parse_object>:
    return true;
}

/* Build an object from the text. */
static cJSON_bool parse_object(cJSON * const item, parse_buffer * const input_buffer)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b086      	sub	sp, #24
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
 8001d94:	6039      	str	r1, [r7, #0]
    cJSON *head = NULL; /* linked list head */
 8001d96:	2300      	movs	r3, #0
 8001d98:	617b      	str	r3, [r7, #20]
    cJSON *current_item = NULL;
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	613b      	str	r3, [r7, #16]

    if (input_buffer->depth >= CJSON_NESTING_LIMIT)
 8001d9e:	683b      	ldr	r3, [r7, #0]
 8001da0:	68db      	ldr	r3, [r3, #12]
 8001da2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001da6:	d301      	bcc.n	8001dac <parse_object+0x20>
    {
        return false; /* to deeply nested */
 8001da8:	2300      	movs	r3, #0
 8001daa:	e0f7      	b.n	8001f9c <parse_object+0x210>
    }
    input_buffer->depth++;
 8001dac:	683b      	ldr	r3, [r7, #0]
 8001dae:	68db      	ldr	r3, [r3, #12]
 8001db0:	1c5a      	adds	r2, r3, #1
 8001db2:	683b      	ldr	r3, [r7, #0]
 8001db4:	60da      	str	r2, [r3, #12]

    if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != '{'))
 8001db6:	683b      	ldr	r3, [r7, #0]
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	f000 80db 	beq.w	8001f74 <parse_object+0x1e8>
 8001dbe:	683b      	ldr	r3, [r7, #0]
 8001dc0:	689a      	ldr	r2, [r3, #8]
 8001dc2:	683b      	ldr	r3, [r7, #0]
 8001dc4:	685b      	ldr	r3, [r3, #4]
 8001dc6:	429a      	cmp	r2, r3
 8001dc8:	f080 80d4 	bcs.w	8001f74 <parse_object+0x1e8>
 8001dcc:	683b      	ldr	r3, [r7, #0]
 8001dce:	681a      	ldr	r2, [r3, #0]
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	689b      	ldr	r3, [r3, #8]
 8001dd4:	4413      	add	r3, r2
 8001dd6:	781b      	ldrb	r3, [r3, #0]
 8001dd8:	2b7b      	cmp	r3, #123	@ 0x7b
 8001dda:	f040 80cb 	bne.w	8001f74 <parse_object+0x1e8>
    {
        goto fail; /* not an object */
    }

    input_buffer->offset++;
 8001dde:	683b      	ldr	r3, [r7, #0]
 8001de0:	689b      	ldr	r3, [r3, #8]
 8001de2:	1c5a      	adds	r2, r3, #1
 8001de4:	683b      	ldr	r3, [r7, #0]
 8001de6:	609a      	str	r2, [r3, #8]
    buffer_skip_whitespace(input_buffer);
 8001de8:	6838      	ldr	r0, [r7, #0]
 8001dea:	f7ff fce7 	bl	80017bc <buffer_skip_whitespace>
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '}'))
 8001dee:	683b      	ldr	r3, [r7, #0]
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d00e      	beq.n	8001e12 <parse_object+0x86>
 8001df4:	683b      	ldr	r3, [r7, #0]
 8001df6:	689a      	ldr	r2, [r3, #8]
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	685b      	ldr	r3, [r3, #4]
 8001dfc:	429a      	cmp	r2, r3
 8001dfe:	d208      	bcs.n	8001e12 <parse_object+0x86>
 8001e00:	683b      	ldr	r3, [r7, #0]
 8001e02:	681a      	ldr	r2, [r3, #0]
 8001e04:	683b      	ldr	r3, [r7, #0]
 8001e06:	689b      	ldr	r3, [r3, #8]
 8001e08:	4413      	add	r3, r2
 8001e0a:	781b      	ldrb	r3, [r3, #0]
 8001e0c:	2b7d      	cmp	r3, #125	@ 0x7d
 8001e0e:	f000 8098 	beq.w	8001f42 <parse_object+0x1b6>
    {
        goto success; /* empty object */
    }

    /* check if we skipped to the end of the buffer */
    if (cannot_access_at_index(input_buffer, 0))
 8001e12:	683b      	ldr	r3, [r7, #0]
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d005      	beq.n	8001e24 <parse_object+0x98>
 8001e18:	683b      	ldr	r3, [r7, #0]
 8001e1a:	689a      	ldr	r2, [r3, #8]
 8001e1c:	683b      	ldr	r3, [r7, #0]
 8001e1e:	685b      	ldr	r3, [r3, #4]
 8001e20:	429a      	cmp	r2, r3
 8001e22:	d305      	bcc.n	8001e30 <parse_object+0xa4>
    {
        input_buffer->offset--;
 8001e24:	683b      	ldr	r3, [r7, #0]
 8001e26:	689b      	ldr	r3, [r3, #8]
 8001e28:	1e5a      	subs	r2, r3, #1
 8001e2a:	683b      	ldr	r3, [r7, #0]
 8001e2c:	609a      	str	r2, [r3, #8]
        goto fail;
 8001e2e:	e0ae      	b.n	8001f8e <parse_object+0x202>
    }

    /* step back to character in front of the first element */
    input_buffer->offset--;
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	689b      	ldr	r3, [r3, #8]
 8001e34:	1e5a      	subs	r2, r3, #1
 8001e36:	683b      	ldr	r3, [r7, #0]
 8001e38:	609a      	str	r2, [r3, #8]
    /* loop through the comma separated array elements */
    do
    {
        /* allocate next item */
        cJSON *new_item = cJSON_New_Item(&(input_buffer->hooks));
 8001e3a:	683b      	ldr	r3, [r7, #0]
 8001e3c:	3310      	adds	r3, #16
 8001e3e:	4618      	mov	r0, r3
 8001e40:	f7ff f8ee 	bl	8001020 <cJSON_New_Item>
 8001e44:	60f8      	str	r0, [r7, #12]
        if (new_item == NULL)
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	f000 8095 	beq.w	8001f78 <parse_object+0x1ec>
        {
            goto fail; /* allocation failure */
        }

        /* attach next item to list */
        if (head == NULL)
 8001e4e:	697b      	ldr	r3, [r7, #20]
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d104      	bne.n	8001e5e <parse_object+0xd2>
        {
            /* start the linked list */
            current_item = head = new_item;
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	617b      	str	r3, [r7, #20]
 8001e58:	697b      	ldr	r3, [r7, #20]
 8001e5a:	613b      	str	r3, [r7, #16]
 8001e5c:	e007      	b.n	8001e6e <parse_object+0xe2>
        }
        else
        {
            /* add to the end and advance */
            current_item->next = new_item;
 8001e5e:	693b      	ldr	r3, [r7, #16]
 8001e60:	68fa      	ldr	r2, [r7, #12]
 8001e62:	601a      	str	r2, [r3, #0]
            new_item->prev = current_item;
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	693a      	ldr	r2, [r7, #16]
 8001e68:	605a      	str	r2, [r3, #4]
            current_item = new_item;
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	613b      	str	r3, [r7, #16]
        }

        if (cannot_access_at_index(input_buffer, 1))
 8001e6e:	683b      	ldr	r3, [r7, #0]
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	f000 8083 	beq.w	8001f7c <parse_object+0x1f0>
 8001e76:	683b      	ldr	r3, [r7, #0]
 8001e78:	689b      	ldr	r3, [r3, #8]
 8001e7a:	1c5a      	adds	r2, r3, #1
 8001e7c:	683b      	ldr	r3, [r7, #0]
 8001e7e:	685b      	ldr	r3, [r3, #4]
 8001e80:	429a      	cmp	r2, r3
 8001e82:	d27b      	bcs.n	8001f7c <parse_object+0x1f0>
        {
            goto fail; /* nothing comes after the comma */
        }

        /* parse the name of the child */
        input_buffer->offset++;
 8001e84:	683b      	ldr	r3, [r7, #0]
 8001e86:	689b      	ldr	r3, [r3, #8]
 8001e88:	1c5a      	adds	r2, r3, #1
 8001e8a:	683b      	ldr	r3, [r7, #0]
 8001e8c:	609a      	str	r2, [r3, #8]
        buffer_skip_whitespace(input_buffer);
 8001e8e:	6838      	ldr	r0, [r7, #0]
 8001e90:	f7ff fc94 	bl	80017bc <buffer_skip_whitespace>
        if (!parse_string(current_item, input_buffer))
 8001e94:	6839      	ldr	r1, [r7, #0]
 8001e96:	6938      	ldr	r0, [r7, #16]
 8001e98:	f7ff fb48 	bl	800152c <parse_string>
 8001e9c:	4603      	mov	r3, r0
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d06e      	beq.n	8001f80 <parse_object+0x1f4>
        {
            goto fail; /* failed to parse name */
        }
        buffer_skip_whitespace(input_buffer);
 8001ea2:	6838      	ldr	r0, [r7, #0]
 8001ea4:	f7ff fc8a 	bl	80017bc <buffer_skip_whitespace>

        /* swap valuestring and string, because we parsed the name */
        current_item->string = current_item->valuestring;
 8001ea8:	693b      	ldr	r3, [r7, #16]
 8001eaa:	691a      	ldr	r2, [r3, #16]
 8001eac:	693b      	ldr	r3, [r7, #16]
 8001eae:	621a      	str	r2, [r3, #32]
        current_item->valuestring = NULL;
 8001eb0:	693b      	ldr	r3, [r7, #16]
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	611a      	str	r2, [r3, #16]

        if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != ':'))
 8001eb6:	683b      	ldr	r3, [r7, #0]
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d063      	beq.n	8001f84 <parse_object+0x1f8>
 8001ebc:	683b      	ldr	r3, [r7, #0]
 8001ebe:	689a      	ldr	r2, [r3, #8]
 8001ec0:	683b      	ldr	r3, [r7, #0]
 8001ec2:	685b      	ldr	r3, [r3, #4]
 8001ec4:	429a      	cmp	r2, r3
 8001ec6:	d25d      	bcs.n	8001f84 <parse_object+0x1f8>
 8001ec8:	683b      	ldr	r3, [r7, #0]
 8001eca:	681a      	ldr	r2, [r3, #0]
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	689b      	ldr	r3, [r3, #8]
 8001ed0:	4413      	add	r3, r2
 8001ed2:	781b      	ldrb	r3, [r3, #0]
 8001ed4:	2b3a      	cmp	r3, #58	@ 0x3a
 8001ed6:	d155      	bne.n	8001f84 <parse_object+0x1f8>
        {
            goto fail; /* invalid object */
        }

        /* parse the value */
        input_buffer->offset++;
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	689b      	ldr	r3, [r3, #8]
 8001edc:	1c5a      	adds	r2, r3, #1
 8001ede:	683b      	ldr	r3, [r7, #0]
 8001ee0:	609a      	str	r2, [r3, #8]
        buffer_skip_whitespace(input_buffer);
 8001ee2:	6838      	ldr	r0, [r7, #0]
 8001ee4:	f7ff fc6a 	bl	80017bc <buffer_skip_whitespace>
        if (!parse_value(current_item, input_buffer))
 8001ee8:	6839      	ldr	r1, [r7, #0]
 8001eea:	6938      	ldr	r0, [r7, #16]
 8001eec:	f7ff fd9e 	bl	8001a2c <parse_value>
 8001ef0:	4603      	mov	r3, r0
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d048      	beq.n	8001f88 <parse_object+0x1fc>
        {
            goto fail; /* failed to parse value */
        }
        buffer_skip_whitespace(input_buffer);
 8001ef6:	6838      	ldr	r0, [r7, #0]
 8001ef8:	f7ff fc60 	bl	80017bc <buffer_skip_whitespace>
    }
    while (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ','));
 8001efc:	683b      	ldr	r3, [r7, #0]
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d00d      	beq.n	8001f1e <parse_object+0x192>
 8001f02:	683b      	ldr	r3, [r7, #0]
 8001f04:	689a      	ldr	r2, [r3, #8]
 8001f06:	683b      	ldr	r3, [r7, #0]
 8001f08:	685b      	ldr	r3, [r3, #4]
 8001f0a:	429a      	cmp	r2, r3
 8001f0c:	d207      	bcs.n	8001f1e <parse_object+0x192>
 8001f0e:	683b      	ldr	r3, [r7, #0]
 8001f10:	681a      	ldr	r2, [r3, #0]
 8001f12:	683b      	ldr	r3, [r7, #0]
 8001f14:	689b      	ldr	r3, [r3, #8]
 8001f16:	4413      	add	r3, r2
 8001f18:	781b      	ldrb	r3, [r3, #0]
 8001f1a:	2b2c      	cmp	r3, #44	@ 0x2c
 8001f1c:	d08d      	beq.n	8001e3a <parse_object+0xae>

    if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != '}'))
 8001f1e:	683b      	ldr	r3, [r7, #0]
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d033      	beq.n	8001f8c <parse_object+0x200>
 8001f24:	683b      	ldr	r3, [r7, #0]
 8001f26:	689a      	ldr	r2, [r3, #8]
 8001f28:	683b      	ldr	r3, [r7, #0]
 8001f2a:	685b      	ldr	r3, [r3, #4]
 8001f2c:	429a      	cmp	r2, r3
 8001f2e:	d22d      	bcs.n	8001f8c <parse_object+0x200>
 8001f30:	683b      	ldr	r3, [r7, #0]
 8001f32:	681a      	ldr	r2, [r3, #0]
 8001f34:	683b      	ldr	r3, [r7, #0]
 8001f36:	689b      	ldr	r3, [r3, #8]
 8001f38:	4413      	add	r3, r2
 8001f3a:	781b      	ldrb	r3, [r3, #0]
 8001f3c:	2b7d      	cmp	r3, #125	@ 0x7d
 8001f3e:	d125      	bne.n	8001f8c <parse_object+0x200>
    {
        goto fail; /* expected end of object */
    }

success:
 8001f40:	e000      	b.n	8001f44 <parse_object+0x1b8>
        goto success; /* empty object */
 8001f42:	bf00      	nop
    input_buffer->depth--;
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	68db      	ldr	r3, [r3, #12]
 8001f48:	1e5a      	subs	r2, r3, #1
 8001f4a:	683b      	ldr	r3, [r7, #0]
 8001f4c:	60da      	str	r2, [r3, #12]

    if (head != NULL) {
 8001f4e:	697b      	ldr	r3, [r7, #20]
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d002      	beq.n	8001f5a <parse_object+0x1ce>
        head->prev = current_item;
 8001f54:	697b      	ldr	r3, [r7, #20]
 8001f56:	693a      	ldr	r2, [r7, #16]
 8001f58:	605a      	str	r2, [r3, #4]
    }

    item->type = cJSON_Object;
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	2240      	movs	r2, #64	@ 0x40
 8001f5e:	60da      	str	r2, [r3, #12]
    item->child = head;
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	697a      	ldr	r2, [r7, #20]
 8001f64:	609a      	str	r2, [r3, #8]

    input_buffer->offset++;
 8001f66:	683b      	ldr	r3, [r7, #0]
 8001f68:	689b      	ldr	r3, [r3, #8]
 8001f6a:	1c5a      	adds	r2, r3, #1
 8001f6c:	683b      	ldr	r3, [r7, #0]
 8001f6e:	609a      	str	r2, [r3, #8]
    return true;
 8001f70:	2301      	movs	r3, #1
 8001f72:	e013      	b.n	8001f9c <parse_object+0x210>
        goto fail; /* not an object */
 8001f74:	bf00      	nop
 8001f76:	e00a      	b.n	8001f8e <parse_object+0x202>
            goto fail; /* allocation failure */
 8001f78:	bf00      	nop
 8001f7a:	e008      	b.n	8001f8e <parse_object+0x202>
            goto fail; /* nothing comes after the comma */
 8001f7c:	bf00      	nop
 8001f7e:	e006      	b.n	8001f8e <parse_object+0x202>
            goto fail; /* failed to parse name */
 8001f80:	bf00      	nop
 8001f82:	e004      	b.n	8001f8e <parse_object+0x202>
            goto fail; /* invalid object */
 8001f84:	bf00      	nop
 8001f86:	e002      	b.n	8001f8e <parse_object+0x202>
            goto fail; /* failed to parse value */
 8001f88:	bf00      	nop
 8001f8a:	e000      	b.n	8001f8e <parse_object+0x202>
        goto fail; /* expected end of object */
 8001f8c:	bf00      	nop

fail:
    if (head != NULL)
 8001f8e:	697b      	ldr	r3, [r7, #20]
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d002      	beq.n	8001f9a <parse_object+0x20e>
    {
        cJSON_Delete(head);
 8001f94:	6978      	ldr	r0, [r7, #20]
 8001f96:	f7ff f859 	bl	800104c <cJSON_Delete>
    }

    return false;
 8001f9a:	2300      	movs	r3, #0
}
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	3718      	adds	r7, #24
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	bd80      	pop	{r7, pc}

08001fa4 <get_object_item>:

    return get_array_item(array, (size_t)index);
}

static cJSON *get_object_item(const cJSON * const object, const char * const name, const cJSON_bool case_sensitive)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b086      	sub	sp, #24
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	60f8      	str	r0, [r7, #12]
 8001fac:	60b9      	str	r1, [r7, #8]
 8001fae:	607a      	str	r2, [r7, #4]
    cJSON *current_element = NULL;
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	617b      	str	r3, [r7, #20]

    if ((object == NULL) || (name == NULL))
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d002      	beq.n	8001fc0 <get_object_item+0x1c>
 8001fba:	68bb      	ldr	r3, [r7, #8]
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d101      	bne.n	8001fc4 <get_object_item+0x20>
    {
        return NULL;
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	e033      	b.n	800202c <get_object_item+0x88>
    }

    current_element = object->child;
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	689b      	ldr	r3, [r3, #8]
 8001fc8:	617b      	str	r3, [r7, #20]
    if (case_sensitive)
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d017      	beq.n	8002000 <get_object_item+0x5c>
    {
        while ((current_element != NULL) && (current_element->string != NULL) && (strcmp(name, current_element->string) != 0))
 8001fd0:	e002      	b.n	8001fd8 <get_object_item+0x34>
        {
            current_element = current_element->next;
 8001fd2:	697b      	ldr	r3, [r7, #20]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	617b      	str	r3, [r7, #20]
        while ((current_element != NULL) && (current_element->string != NULL) && (strcmp(name, current_element->string) != 0))
 8001fd8:	697b      	ldr	r3, [r7, #20]
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d01c      	beq.n	8002018 <get_object_item+0x74>
 8001fde:	697b      	ldr	r3, [r7, #20]
 8001fe0:	6a1b      	ldr	r3, [r3, #32]
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d018      	beq.n	8002018 <get_object_item+0x74>
 8001fe6:	697b      	ldr	r3, [r7, #20]
 8001fe8:	6a1b      	ldr	r3, [r3, #32]
 8001fea:	4619      	mov	r1, r3
 8001fec:	68b8      	ldr	r0, [r7, #8]
 8001fee:	f7fe f8f7 	bl	80001e0 <strcmp>
 8001ff2:	4603      	mov	r3, r0
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d1ec      	bne.n	8001fd2 <get_object_item+0x2e>
 8001ff8:	e00e      	b.n	8002018 <get_object_item+0x74>
    }
    else
    {
        while ((current_element != NULL) && (case_insensitive_strcmp((const unsigned char*)name, (const unsigned char*)(current_element->string)) != 0))
        {
            current_element = current_element->next;
 8001ffa:	697b      	ldr	r3, [r7, #20]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	617b      	str	r3, [r7, #20]
        while ((current_element != NULL) && (case_insensitive_strcmp((const unsigned char*)name, (const unsigned char*)(current_element->string)) != 0))
 8002000:	697b      	ldr	r3, [r7, #20]
 8002002:	2b00      	cmp	r3, #0
 8002004:	d008      	beq.n	8002018 <get_object_item+0x74>
 8002006:	697b      	ldr	r3, [r7, #20]
 8002008:	6a1b      	ldr	r3, [r3, #32]
 800200a:	4619      	mov	r1, r3
 800200c:	68b8      	ldr	r0, [r7, #8]
 800200e:	f7fe ff9b 	bl	8000f48 <case_insensitive_strcmp>
 8002012:	4603      	mov	r3, r0
 8002014:	2b00      	cmp	r3, #0
 8002016:	d1f0      	bne.n	8001ffa <get_object_item+0x56>
        }
    }

    if ((current_element == NULL) || (current_element->string == NULL)) {
 8002018:	697b      	ldr	r3, [r7, #20]
 800201a:	2b00      	cmp	r3, #0
 800201c:	d003      	beq.n	8002026 <get_object_item+0x82>
 800201e:	697b      	ldr	r3, [r7, #20]
 8002020:	6a1b      	ldr	r3, [r3, #32]
 8002022:	2b00      	cmp	r3, #0
 8002024:	d101      	bne.n	800202a <get_object_item+0x86>
        return NULL;
 8002026:	2300      	movs	r3, #0
 8002028:	e000      	b.n	800202c <get_object_item+0x88>
    }

    return current_element;
 800202a:	697b      	ldr	r3, [r7, #20]
}
 800202c:	4618      	mov	r0, r3
 800202e:	3718      	adds	r7, #24
 8002030:	46bd      	mov	sp, r7
 8002032:	bd80      	pop	{r7, pc}

08002034 <cJSON_GetObjectItemCaseSensitive>:
{
    return get_object_item(object, string, false);
}

CJSON_PUBLIC(cJSON *) cJSON_GetObjectItemCaseSensitive(const cJSON * const object, const char * const string)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	b082      	sub	sp, #8
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
 800203c:	6039      	str	r1, [r7, #0]
    return get_object_item(object, string, true);
 800203e:	2201      	movs	r2, #1
 8002040:	6839      	ldr	r1, [r7, #0]
 8002042:	6878      	ldr	r0, [r7, #4]
 8002044:	f7ff ffae 	bl	8001fa4 <get_object_item>
 8002048:	4603      	mov	r3, r0
}
 800204a:	4618      	mov	r0, r3
 800204c:	3708      	adds	r7, #8
 800204e:	46bd      	mov	sp, r7
 8002050:	bd80      	pop	{r7, pc}

08002052 <cJSON_IsNumber>:

    return (item->type & 0xFF) == cJSON_NULL;
}

CJSON_PUBLIC(cJSON_bool) cJSON_IsNumber(const cJSON * const item)
{
 8002052:	b480      	push	{r7}
 8002054:	b083      	sub	sp, #12
 8002056:	af00      	add	r7, sp, #0
 8002058:	6078      	str	r0, [r7, #4]
    if (item == NULL)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	2b00      	cmp	r3, #0
 800205e:	d101      	bne.n	8002064 <cJSON_IsNumber+0x12>
    {
        return false;
 8002060:	2300      	movs	r3, #0
 8002062:	e007      	b.n	8002074 <cJSON_IsNumber+0x22>
    }

    return (item->type & 0xFF) == cJSON_Number;
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	68db      	ldr	r3, [r3, #12]
 8002068:	b2db      	uxtb	r3, r3
 800206a:	2b08      	cmp	r3, #8
 800206c:	bf0c      	ite	eq
 800206e:	2301      	moveq	r3, #1
 8002070:	2300      	movne	r3, #0
 8002072:	b2db      	uxtb	r3, r3
}
 8002074:	4618      	mov	r0, r3
 8002076:	370c      	adds	r7, #12
 8002078:	46bd      	mov	sp, r7
 800207a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207e:	4770      	bx	lr

08002080 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	b08a      	sub	sp, #40	@ 0x28
 8002084:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002086:	f006 ffc9 	bl	800901c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800208a:	f000 f861 	bl	8002150 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800208e:	f000 f931 	bl	80022f4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8002092:	f000 f905 	bl	80022a0 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 8002096:	f000 f8c5 	bl	8002224 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
	printf("program_Started\r\n");
 800209a:	4825      	ldr	r0, [pc, #148]	@ (8002130 <main+0xb0>)
 800209c:	f00c fd42 	bl	800eb24 <puts>


	W5500Init();
 80020a0:	f006 f94a 	bl	8008338 <W5500Init>

	//Configure PHY by software
	wiz_PhyConf phyconf;
	phyconf.by     = PHY_CONFBY_SW;
 80020a4:	2301      	movs	r3, #1
 80020a6:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
	phyconf.duplex = PHY_DUPLEX_FULL;
 80020aa:	2301      	movs	r3, #1
 80020ac:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	phyconf.speed  = PHY_SPEED_10;
 80020b0:	2300      	movs	r3, #0
 80020b2:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	phyconf.mode   = PHY_MODE_AUTONEGO;
 80020b6:	2301      	movs	r3, #1
 80020b8:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
	ctlwizchip(CW_SET_PHYCONF, (void*) &phyconf);
 80020bc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80020c0:	4619      	mov	r1, r3
 80020c2:	200a      	movs	r0, #10
 80020c4:	f006 faba 	bl	800863c <ctlwizchip>

	PHYStatusCheck();
 80020c8:	f000 fc5c 	bl	8002984 <PHYStatusCheck>
	PrintPHYConf();
 80020cc:	f000 fc80 	bl	80029d0 <PrintPHYConf>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80020d0:	f008 fea0 	bl	800ae14 <osKernelInitialize>
  /* USER CODE BEGIN RTOS_TIMERS */
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
  mqttMessageQueueHandle = osMessageQueueNew(MQTT_EVENT_QUEUE_SIZE, sizeof(uint8_t), NULL);
 80020d4:	2200      	movs	r2, #0
 80020d6:	2101      	movs	r1, #1
 80020d8:	2040      	movs	r0, #64	@ 0x40
 80020da:	f008 ff92 	bl	800b002 <osMessageQueueNew>
 80020de:	4603      	mov	r3, r0
 80020e0:	4a14      	ldr	r2, [pc, #80]	@ (8002134 <main+0xb4>)
 80020e2:	6013      	str	r3, [r2, #0]
  if (mqttMessageQueueHandle == NULL)
 80020e4:	4b13      	ldr	r3, [pc, #76]	@ (8002134 <main+0xb4>)
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d102      	bne.n	80020f2 <main+0x72>
  {
          printf("Failed to create MQTT message queue.\n");
 80020ec:	4812      	ldr	r0, [pc, #72]	@ (8002138 <main+0xb8>)
 80020ee:	f00c fd19 	bl	800eb24 <puts>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80020f2:	4a12      	ldr	r2, [pc, #72]	@ (800213c <main+0xbc>)
 80020f4:	2100      	movs	r1, #0
 80020f6:	4812      	ldr	r0, [pc, #72]	@ (8002140 <main+0xc0>)
 80020f8:	f008 fed6 	bl	800aea8 <osThreadNew>
 80020fc:	4603      	mov	r3, r0
 80020fe:	4a11      	ldr	r2, [pc, #68]	@ (8002144 <main+0xc4>)
 8002100:	6013      	str	r3, [r2, #0]
//  	  .name = "RelayTask",
//  	  .priority = (osPriority_t)RELAY_TASK_PRIORITY,
//  	  .stack_size = RELAY_TASK_STACK_SIZE
//  	});

  	osThreadNew(Task_MQTTHandler, NULL, &(osThreadAttr_t){
 8002102:	463b      	mov	r3, r7
 8002104:	2224      	movs	r2, #36	@ 0x24
 8002106:	2100      	movs	r1, #0
 8002108:	4618      	mov	r0, r3
 800210a:	f00c fdeb 	bl	800ece4 <memset>
 800210e:	4b0e      	ldr	r3, [pc, #56]	@ (8002148 <main+0xc8>)
 8002110:	603b      	str	r3, [r7, #0]
 8002112:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002116:	617b      	str	r3, [r7, #20]
 8002118:	2303      	movs	r3, #3
 800211a:	61bb      	str	r3, [r7, #24]
 800211c:	463b      	mov	r3, r7
 800211e:	461a      	mov	r2, r3
 8002120:	2100      	movs	r1, #0
 8002122:	480a      	ldr	r0, [pc, #40]	@ (800214c <main+0xcc>)
 8002124:	f008 fec0 	bl	800aea8 <osThreadNew>
  	});
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8002128:	f008 fe98 	bl	800ae5c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800212c:	bf00      	nop
 800212e:	e7fd      	b.n	800212c <main+0xac>
 8002130:	080109bc 	.word	0x080109bc
 8002134:	2000037c 	.word	0x2000037c
 8002138:	080109d0 	.word	0x080109d0
 800213c:	080111a8 	.word	0x080111a8
 8002140:	08002b71 	.word	0x08002b71
 8002144:	20000378 	.word	0x20000378
 8002148:	080109f8 	.word	0x080109f8
 800214c:	08002459 	.word	0x08002459

08002150 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	b094      	sub	sp, #80	@ 0x50
 8002154:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002156:	f107 0320 	add.w	r3, r7, #32
 800215a:	2230      	movs	r2, #48	@ 0x30
 800215c:	2100      	movs	r1, #0
 800215e:	4618      	mov	r0, r3
 8002160:	f00c fdc0 	bl	800ece4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002164:	f107 030c 	add.w	r3, r7, #12
 8002168:	2200      	movs	r2, #0
 800216a:	601a      	str	r2, [r3, #0]
 800216c:	605a      	str	r2, [r3, #4]
 800216e:	609a      	str	r2, [r3, #8]
 8002170:	60da      	str	r2, [r3, #12]
 8002172:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002174:	2300      	movs	r3, #0
 8002176:	60bb      	str	r3, [r7, #8]
 8002178:	4b28      	ldr	r3, [pc, #160]	@ (800221c <SystemClock_Config+0xcc>)
 800217a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800217c:	4a27      	ldr	r2, [pc, #156]	@ (800221c <SystemClock_Config+0xcc>)
 800217e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002182:	6413      	str	r3, [r2, #64]	@ 0x40
 8002184:	4b25      	ldr	r3, [pc, #148]	@ (800221c <SystemClock_Config+0xcc>)
 8002186:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002188:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800218c:	60bb      	str	r3, [r7, #8]
 800218e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8002190:	2300      	movs	r3, #0
 8002192:	607b      	str	r3, [r7, #4]
 8002194:	4b22      	ldr	r3, [pc, #136]	@ (8002220 <SystemClock_Config+0xd0>)
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800219c:	4a20      	ldr	r2, [pc, #128]	@ (8002220 <SystemClock_Config+0xd0>)
 800219e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80021a2:	6013      	str	r3, [r2, #0]
 80021a4:	4b1e      	ldr	r3, [pc, #120]	@ (8002220 <SystemClock_Config+0xd0>)
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80021ac:	607b      	str	r3, [r7, #4]
 80021ae:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80021b0:	2302      	movs	r3, #2
 80021b2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80021b4:	2301      	movs	r3, #1
 80021b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80021b8:	2310      	movs	r3, #16
 80021ba:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80021bc:	2302      	movs	r3, #2
 80021be:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80021c0:	2300      	movs	r3, #0
 80021c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80021c4:	2308      	movs	r3, #8
 80021c6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 80021c8:	2360      	movs	r3, #96	@ 0x60
 80021ca:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80021cc:	2304      	movs	r3, #4
 80021ce:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80021d0:	2307      	movs	r3, #7
 80021d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80021d4:	f107 0320 	add.w	r3, r7, #32
 80021d8:	4618      	mov	r0, r3
 80021da:	f007 fa05 	bl	80095e8 <HAL_RCC_OscConfig>
 80021de:	4603      	mov	r3, r0
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d001      	beq.n	80021e8 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80021e4:	f000 fcf4 	bl	8002bd0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80021e8:	230f      	movs	r3, #15
 80021ea:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80021ec:	2302      	movs	r3, #2
 80021ee:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80021f0:	2300      	movs	r3, #0
 80021f2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80021f4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80021f8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80021fa:	2300      	movs	r3, #0
 80021fc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80021fe:	f107 030c 	add.w	r3, r7, #12
 8002202:	2101      	movs	r1, #1
 8002204:	4618      	mov	r0, r3
 8002206:	f007 fc67 	bl	8009ad8 <HAL_RCC_ClockConfig>
 800220a:	4603      	mov	r3, r0
 800220c:	2b00      	cmp	r3, #0
 800220e:	d001      	beq.n	8002214 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8002210:	f000 fcde 	bl	8002bd0 <Error_Handler>
  }
}
 8002214:	bf00      	nop
 8002216:	3750      	adds	r7, #80	@ 0x50
 8002218:	46bd      	mov	sp, r7
 800221a:	bd80      	pop	{r7, pc}
 800221c:	40023800 	.word	0x40023800
 8002220:	40007000 	.word	0x40007000

08002224 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002228:	4b1b      	ldr	r3, [pc, #108]	@ (8002298 <MX_SPI1_Init+0x74>)
 800222a:	4a1c      	ldr	r2, [pc, #112]	@ (800229c <MX_SPI1_Init+0x78>)
 800222c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800222e:	4b1a      	ldr	r3, [pc, #104]	@ (8002298 <MX_SPI1_Init+0x74>)
 8002230:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002234:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002236:	4b18      	ldr	r3, [pc, #96]	@ (8002298 <MX_SPI1_Init+0x74>)
 8002238:	2200      	movs	r2, #0
 800223a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800223c:	4b16      	ldr	r3, [pc, #88]	@ (8002298 <MX_SPI1_Init+0x74>)
 800223e:	2200      	movs	r2, #0
 8002240:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002242:	4b15      	ldr	r3, [pc, #84]	@ (8002298 <MX_SPI1_Init+0x74>)
 8002244:	2200      	movs	r2, #0
 8002246:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002248:	4b13      	ldr	r3, [pc, #76]	@ (8002298 <MX_SPI1_Init+0x74>)
 800224a:	2200      	movs	r2, #0
 800224c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800224e:	4b12      	ldr	r3, [pc, #72]	@ (8002298 <MX_SPI1_Init+0x74>)
 8002250:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002254:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8002256:	4b10      	ldr	r3, [pc, #64]	@ (8002298 <MX_SPI1_Init+0x74>)
 8002258:	2208      	movs	r2, #8
 800225a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800225c:	4b0e      	ldr	r3, [pc, #56]	@ (8002298 <MX_SPI1_Init+0x74>)
 800225e:	2200      	movs	r2, #0
 8002260:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002262:	4b0d      	ldr	r3, [pc, #52]	@ (8002298 <MX_SPI1_Init+0x74>)
 8002264:	2200      	movs	r2, #0
 8002266:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002268:	4b0b      	ldr	r3, [pc, #44]	@ (8002298 <MX_SPI1_Init+0x74>)
 800226a:	2200      	movs	r2, #0
 800226c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 800226e:	4b0a      	ldr	r3, [pc, #40]	@ (8002298 <MX_SPI1_Init+0x74>)
 8002270:	220a      	movs	r2, #10
 8002272:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002274:	4808      	ldr	r0, [pc, #32]	@ (8002298 <MX_SPI1_Init+0x74>)
 8002276:	f007 fe81 	bl	8009f7c <HAL_SPI_Init>
 800227a:	4603      	mov	r3, r0
 800227c:	2b00      	cmp	r3, #0
 800227e:	d001      	beq.n	8002284 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002280:	f000 fca6 	bl	8002bd0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */
  __HAL_SPI_ENABLE(&hspi1);
 8002284:	4b04      	ldr	r3, [pc, #16]	@ (8002298 <MX_SPI1_Init+0x74>)
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	681a      	ldr	r2, [r3, #0]
 800228a:	4b03      	ldr	r3, [pc, #12]	@ (8002298 <MX_SPI1_Init+0x74>)
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002292:	601a      	str	r2, [r3, #0]
  /* USER CODE END SPI1_Init 2 */

}
 8002294:	bf00      	nop
 8002296:	bd80      	pop	{r7, pc}
 8002298:	200002d8 	.word	0x200002d8
 800229c:	40013000 	.word	0x40013000

080022a0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80022a4:	4b11      	ldr	r3, [pc, #68]	@ (80022ec <MX_USART2_UART_Init+0x4c>)
 80022a6:	4a12      	ldr	r2, [pc, #72]	@ (80022f0 <MX_USART2_UART_Init+0x50>)
 80022a8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80022aa:	4b10      	ldr	r3, [pc, #64]	@ (80022ec <MX_USART2_UART_Init+0x4c>)
 80022ac:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80022b0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80022b2:	4b0e      	ldr	r3, [pc, #56]	@ (80022ec <MX_USART2_UART_Init+0x4c>)
 80022b4:	2200      	movs	r2, #0
 80022b6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80022b8:	4b0c      	ldr	r3, [pc, #48]	@ (80022ec <MX_USART2_UART_Init+0x4c>)
 80022ba:	2200      	movs	r2, #0
 80022bc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80022be:	4b0b      	ldr	r3, [pc, #44]	@ (80022ec <MX_USART2_UART_Init+0x4c>)
 80022c0:	2200      	movs	r2, #0
 80022c2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80022c4:	4b09      	ldr	r3, [pc, #36]	@ (80022ec <MX_USART2_UART_Init+0x4c>)
 80022c6:	220c      	movs	r2, #12
 80022c8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80022ca:	4b08      	ldr	r3, [pc, #32]	@ (80022ec <MX_USART2_UART_Init+0x4c>)
 80022cc:	2200      	movs	r2, #0
 80022ce:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80022d0:	4b06      	ldr	r3, [pc, #24]	@ (80022ec <MX_USART2_UART_Init+0x4c>)
 80022d2:	2200      	movs	r2, #0
 80022d4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80022d6:	4805      	ldr	r0, [pc, #20]	@ (80022ec <MX_USART2_UART_Init+0x4c>)
 80022d8:	f008 f94c 	bl	800a574 <HAL_UART_Init>
 80022dc:	4603      	mov	r3, r0
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d001      	beq.n	80022e6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80022e2:	f000 fc75 	bl	8002bd0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80022e6:	bf00      	nop
 80022e8:	bd80      	pop	{r7, pc}
 80022ea:	bf00      	nop
 80022ec:	20000330 	.word	0x20000330
 80022f0:	40004400 	.word	0x40004400

080022f4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b08a      	sub	sp, #40	@ 0x28
 80022f8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022fa:	f107 0314 	add.w	r3, r7, #20
 80022fe:	2200      	movs	r2, #0
 8002300:	601a      	str	r2, [r3, #0]
 8002302:	605a      	str	r2, [r3, #4]
 8002304:	609a      	str	r2, [r3, #8]
 8002306:	60da      	str	r2, [r3, #12]
 8002308:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800230a:	2300      	movs	r3, #0
 800230c:	613b      	str	r3, [r7, #16]
 800230e:	4b4d      	ldr	r3, [pc, #308]	@ (8002444 <MX_GPIO_Init+0x150>)
 8002310:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002312:	4a4c      	ldr	r2, [pc, #304]	@ (8002444 <MX_GPIO_Init+0x150>)
 8002314:	f043 0304 	orr.w	r3, r3, #4
 8002318:	6313      	str	r3, [r2, #48]	@ 0x30
 800231a:	4b4a      	ldr	r3, [pc, #296]	@ (8002444 <MX_GPIO_Init+0x150>)
 800231c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800231e:	f003 0304 	and.w	r3, r3, #4
 8002322:	613b      	str	r3, [r7, #16]
 8002324:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002326:	2300      	movs	r3, #0
 8002328:	60fb      	str	r3, [r7, #12]
 800232a:	4b46      	ldr	r3, [pc, #280]	@ (8002444 <MX_GPIO_Init+0x150>)
 800232c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800232e:	4a45      	ldr	r2, [pc, #276]	@ (8002444 <MX_GPIO_Init+0x150>)
 8002330:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002334:	6313      	str	r3, [r2, #48]	@ 0x30
 8002336:	4b43      	ldr	r3, [pc, #268]	@ (8002444 <MX_GPIO_Init+0x150>)
 8002338:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800233a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800233e:	60fb      	str	r3, [r7, #12]
 8002340:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002342:	2300      	movs	r3, #0
 8002344:	60bb      	str	r3, [r7, #8]
 8002346:	4b3f      	ldr	r3, [pc, #252]	@ (8002444 <MX_GPIO_Init+0x150>)
 8002348:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800234a:	4a3e      	ldr	r2, [pc, #248]	@ (8002444 <MX_GPIO_Init+0x150>)
 800234c:	f043 0301 	orr.w	r3, r3, #1
 8002350:	6313      	str	r3, [r2, #48]	@ 0x30
 8002352:	4b3c      	ldr	r3, [pc, #240]	@ (8002444 <MX_GPIO_Init+0x150>)
 8002354:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002356:	f003 0301 	and.w	r3, r3, #1
 800235a:	60bb      	str	r3, [r7, #8]
 800235c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800235e:	2300      	movs	r3, #0
 8002360:	607b      	str	r3, [r7, #4]
 8002362:	4b38      	ldr	r3, [pc, #224]	@ (8002444 <MX_GPIO_Init+0x150>)
 8002364:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002366:	4a37      	ldr	r2, [pc, #220]	@ (8002444 <MX_GPIO_Init+0x150>)
 8002368:	f043 0308 	orr.w	r3, r3, #8
 800236c:	6313      	str	r3, [r2, #48]	@ 0x30
 800236e:	4b35      	ldr	r3, [pc, #212]	@ (8002444 <MX_GPIO_Init+0x150>)
 8002370:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002372:	f003 0308 	and.w	r3, r3, #8
 8002376:	607b      	str	r3, [r7, #4]
 8002378:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800237a:	2300      	movs	r3, #0
 800237c:	603b      	str	r3, [r7, #0]
 800237e:	4b31      	ldr	r3, [pc, #196]	@ (8002444 <MX_GPIO_Init+0x150>)
 8002380:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002382:	4a30      	ldr	r2, [pc, #192]	@ (8002444 <MX_GPIO_Init+0x150>)
 8002384:	f043 0302 	orr.w	r3, r3, #2
 8002388:	6313      	str	r3, [r2, #48]	@ 0x30
 800238a:	4b2e      	ldr	r3, [pc, #184]	@ (8002444 <MX_GPIO_Init+0x150>)
 800238c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800238e:	f003 0302 	and.w	r3, r3, #2
 8002392:	603b      	str	r3, [r7, #0]
 8002394:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, R_LED1_Pin|R_LED2_Pin|R_LED3_Pin|R_LED4_Pin
 8002396:	2200      	movs	r2, #0
 8002398:	f641 71ef 	movw	r1, #8175	@ 0x1fef
 800239c:	482a      	ldr	r0, [pc, #168]	@ (8002448 <MX_GPIO_Init+0x154>)
 800239e:	f007 f909 	bl	80095b4 <HAL_GPIO_WritePin>
                          |RELAY6_Pin|RELAY3_Pin|RELAY12_Pin|RELAY2_Pin
                          |RELAY1_Pin|R_LED12_Pin|R_LED11_Pin|R_LED10_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SPI1_RST_Pin|SPI1_CS_Pin|RELAY11_Pin|RELAY10_Pin
 80023a2:	2200      	movs	r2, #0
 80023a4:	f641 7103 	movw	r1, #7939	@ 0x1f03
 80023a8:	4828      	ldr	r0, [pc, #160]	@ (800244c <MX_GPIO_Init+0x158>)
 80023aa:	f007 f903 	bl	80095b4 <HAL_GPIO_WritePin>
                          |RELAY9_Pin|RELAY8_Pin|RELAY7_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(R_LED9_GPIO_Port, R_LED9_Pin, GPIO_PIN_RESET);
 80023ae:	2200      	movs	r2, #0
 80023b0:	2104      	movs	r1, #4
 80023b2:	4827      	ldr	r0, [pc, #156]	@ (8002450 <MX_GPIO_Init+0x15c>)
 80023b4:	f007 f8fe 	bl	80095b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, R_LED8_Pin|R_LED7_Pin|R_LED6_Pin|R_LED5_Pin
 80023b8:	2200      	movs	r2, #0
 80023ba:	f44f 717c 	mov.w	r1, #1008	@ 0x3f0
 80023be:	4825      	ldr	r0, [pc, #148]	@ (8002454 <MX_GPIO_Init+0x160>)
 80023c0:	f007 f8f8 	bl	80095b4 <HAL_GPIO_WritePin>
                          |RELAY4_Pin|RELAY5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : R_LED1_Pin R_LED2_Pin R_LED3_Pin R_LED4_Pin
                           RELAY6_Pin RELAY3_Pin RELAY12_Pin RELAY2_Pin
                           RELAY1_Pin R_LED12_Pin R_LED11_Pin R_LED10_Pin */
  GPIO_InitStruct.Pin = R_LED1_Pin|R_LED2_Pin|R_LED3_Pin|R_LED4_Pin
 80023c4:	f641 73ef 	movw	r3, #8175	@ 0x1fef
 80023c8:	617b      	str	r3, [r7, #20]
                          |RELAY6_Pin|RELAY3_Pin|RELAY12_Pin|RELAY2_Pin
                          |RELAY1_Pin|R_LED12_Pin|R_LED11_Pin|R_LED10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80023ca:	2301      	movs	r3, #1
 80023cc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023ce:	2300      	movs	r3, #0
 80023d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023d2:	2300      	movs	r3, #0
 80023d4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80023d6:	f107 0314 	add.w	r3, r7, #20
 80023da:	4619      	mov	r1, r3
 80023dc:	481a      	ldr	r0, [pc, #104]	@ (8002448 <MX_GPIO_Init+0x154>)
 80023de:	f006 ff65 	bl	80092ac <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_RST_Pin SPI1_CS_Pin RELAY11_Pin RELAY10_Pin
                           RELAY9_Pin RELAY8_Pin RELAY7_Pin */
  GPIO_InitStruct.Pin = SPI1_RST_Pin|SPI1_CS_Pin|RELAY11_Pin|RELAY10_Pin
 80023e2:	f641 7303 	movw	r3, #7939	@ 0x1f03
 80023e6:	617b      	str	r3, [r7, #20]
                          |RELAY9_Pin|RELAY8_Pin|RELAY7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80023e8:	2301      	movs	r3, #1
 80023ea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023ec:	2300      	movs	r3, #0
 80023ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023f0:	2300      	movs	r3, #0
 80023f2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023f4:	f107 0314 	add.w	r3, r7, #20
 80023f8:	4619      	mov	r1, r3
 80023fa:	4814      	ldr	r0, [pc, #80]	@ (800244c <MX_GPIO_Init+0x158>)
 80023fc:	f006 ff56 	bl	80092ac <HAL_GPIO_Init>

  /*Configure GPIO pin : R_LED9_Pin */
  GPIO_InitStruct.Pin = R_LED9_Pin;
 8002400:	2304      	movs	r3, #4
 8002402:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002404:	2301      	movs	r3, #1
 8002406:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002408:	2300      	movs	r3, #0
 800240a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800240c:	2300      	movs	r3, #0
 800240e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(R_LED9_GPIO_Port, &GPIO_InitStruct);
 8002410:	f107 0314 	add.w	r3, r7, #20
 8002414:	4619      	mov	r1, r3
 8002416:	480e      	ldr	r0, [pc, #56]	@ (8002450 <MX_GPIO_Init+0x15c>)
 8002418:	f006 ff48 	bl	80092ac <HAL_GPIO_Init>

  /*Configure GPIO pins : R_LED8_Pin R_LED7_Pin R_LED6_Pin R_LED5_Pin
                           RELAY4_Pin RELAY5_Pin */
  GPIO_InitStruct.Pin = R_LED8_Pin|R_LED7_Pin|R_LED6_Pin|R_LED5_Pin
 800241c:	f44f 737c 	mov.w	r3, #1008	@ 0x3f0
 8002420:	617b      	str	r3, [r7, #20]
                          |RELAY4_Pin|RELAY5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002422:	2301      	movs	r3, #1
 8002424:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002426:	2300      	movs	r3, #0
 8002428:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800242a:	2300      	movs	r3, #0
 800242c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800242e:	f107 0314 	add.w	r3, r7, #20
 8002432:	4619      	mov	r1, r3
 8002434:	4807      	ldr	r0, [pc, #28]	@ (8002454 <MX_GPIO_Init+0x160>)
 8002436:	f006 ff39 	bl	80092ac <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800243a:	bf00      	nop
 800243c:	3728      	adds	r7, #40	@ 0x28
 800243e:	46bd      	mov	sp, r7
 8002440:	bd80      	pop	{r7, pc}
 8002442:	bf00      	nop
 8002444:	40023800 	.word	0x40023800
 8002448:	40020800 	.word	0x40020800
 800244c:	40020000 	.word	0x40020000
 8002450:	40020c00 	.word	0x40020c00
 8002454:	40020400 	.word	0x40020400

08002458 <Task_MQTTHandler>:
//}



void Task_MQTTHandler(void *argument)
{
 8002458:	b590      	push	{r4, r7, lr}
 800245a:	b08b      	sub	sp, #44	@ 0x2c
 800245c:	af04      	add	r7, sp, #16
 800245e:	6078      	str	r0, [r7, #4]
    uint8_t result;
    uint8_t remote_host_ip[4];
    int connection_status;

    DHCP_init(SOCKET_ID_FOR_DHCP, dhcp_buffer);
 8002460:	4969      	ldr	r1, [pc, #420]	@ (8002608 <Task_MQTTHandler+0x1b0>)
 8002462:	2007      	movs	r0, #7
 8002464:	f002 f938 	bl	80046d8 <DHCP_init>
    reg_dhcp_cbfunc(OnDHCPIPAssigned, NULL, NULL);
 8002468:	2200      	movs	r2, #0
 800246a:	2100      	movs	r1, #0
 800246c:	4867      	ldr	r0, [pc, #412]	@ (800260c <Task_MQTTHandler+0x1b4>)
 800246e:	f000 fe27 	bl	80030c0 <reg_dhcp_cbfunc>
    printf("Obtaining IP address ...\r\n");
 8002472:	4867      	ldr	r0, [pc, #412]	@ (8002610 <Task_MQTTHandler+0x1b8>)
 8002474:	f00c fb56 	bl	800eb24 <puts>

    // MQTT Client Configuration
    connect_data.willFlag = 0;
 8002478:	4b66      	ldr	r3, [pc, #408]	@ (8002614 <Task_MQTTHandler+0x1bc>)
 800247a:	2200      	movs	r2, #0
 800247c:	76da      	strb	r2, [r3, #27]
    connect_data.MQTTVersion = 3;
 800247e:	4b65      	ldr	r3, [pc, #404]	@ (8002614 <Task_MQTTHandler+0x1bc>)
 8002480:	2203      	movs	r2, #3
 8002482:	721a      	strb	r2, [r3, #8]
    connect_data.clientID.cstring = CLIENT_ID;
 8002484:	4b64      	ldr	r3, [pc, #400]	@ (8002618 <Task_MQTTHandler+0x1c0>)
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	4a62      	ldr	r2, [pc, #392]	@ (8002614 <Task_MQTTHandler+0x1bc>)
 800248a:	60d3      	str	r3, [r2, #12]
    connect_data.username.cstring = "Nikhil";
 800248c:	4b61      	ldr	r3, [pc, #388]	@ (8002614 <Task_MQTTHandler+0x1bc>)
 800248e:	4a63      	ldr	r2, [pc, #396]	@ (800261c <Task_MQTTHandler+0x1c4>)
 8002490:	641a      	str	r2, [r3, #64]	@ 0x40
    connect_data.password.cstring = "Nikhil8182";
 8002492:	4b60      	ldr	r3, [pc, #384]	@ (8002614 <Task_MQTTHandler+0x1bc>)
 8002494:	4a62      	ldr	r2, [pc, #392]	@ (8002620 <Task_MQTTHandler+0x1c8>)
 8002496:	64da      	str	r2, [r3, #76]	@ 0x4c
    connect_data.keepAliveInterval = 60; // seconds
 8002498:	4b5e      	ldr	r3, [pc, #376]	@ (8002614 <Task_MQTTHandler+0x1bc>)
 800249a:	223c      	movs	r2, #60	@ 0x3c
 800249c:	831a      	strh	r2, [r3, #24]
    connect_data.cleansession = 1;
 800249e:	4b5d      	ldr	r3, [pc, #372]	@ (8002614 <Task_MQTTHandler+0x1bc>)
 80024a0:	2201      	movs	r2, #1
 80024a2:	769a      	strb	r2, [r3, #26]

    NewNetwork(&network, 1); // 1 is the socket number to use
 80024a4:	2101      	movs	r1, #1
 80024a6:	485f      	ldr	r0, [pc, #380]	@ (8002624 <Task_MQTTHandler+0x1cc>)
 80024a8:	f003 fd44 	bl	8005f34 <NewNetwork>
    DNS_init(SOCKET_ID_FOR_DNS, dns_buffer);
 80024ac:	495e      	ldr	r1, [pc, #376]	@ (8002628 <Task_MQTTHandler+0x1d0>)
 80024ae:	2006      	movs	r0, #6
 80024b0:	f002 fe00 	bl	80050b4 <DNS_init>

    while (StateChangeFlag == false)
 80024b4:	e001      	b.n	80024ba <Task_MQTTHandler+0x62>
    {
        DHCP_run();
 80024b6:	f001 ff1f 	bl	80042f8 <DHCP_run>
    while (StateChangeFlag == false)
 80024ba:	4b5c      	ldr	r3, [pc, #368]	@ (800262c <Task_MQTTHandler+0x1d4>)
 80024bc:	781b      	ldrb	r3, [r3, #0]
 80024be:	f083 0301 	eor.w	r3, r3, #1
 80024c2:	b2db      	uxtb	r3, r3
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d1f6      	bne.n	80024b6 <Task_MQTTHandler+0x5e>
    }
    printf("Resolving hostname: %s\n", remote_host);
 80024c8:	4b59      	ldr	r3, [pc, #356]	@ (8002630 <Task_MQTTHandler+0x1d8>)
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	4619      	mov	r1, r3
 80024ce:	4859      	ldr	r0, [pc, #356]	@ (8002634 <Task_MQTTHandler+0x1dc>)
 80024d0:	f00c fac0 	bl	800ea54 <iprintf>

    while (1)
    {
        if ((tempflag == false) && (StateChangeFlag == true))
 80024d4:	4b58      	ldr	r3, [pc, #352]	@ (8002638 <Task_MQTTHandler+0x1e0>)
 80024d6:	781b      	ldrb	r3, [r3, #0]
 80024d8:	f083 0301 	eor.w	r3, r3, #1
 80024dc:	b2db      	uxtb	r3, r3
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d02b      	beq.n	800253a <Task_MQTTHandler+0xe2>
 80024e2:	4b52      	ldr	r3, [pc, #328]	@ (800262c <Task_MQTTHandler+0x1d4>)
 80024e4:	781b      	ldrb	r3, [r3, #0]
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d027      	beq.n	800253a <Task_MQTTHandler+0xe2>
        {
            result = DNS_run(dns_ip, (uint8_t *)remote_host, remote_host_ip);
 80024ea:	4b51      	ldr	r3, [pc, #324]	@ (8002630 <Task_MQTTHandler+0x1d8>)
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f107 020c 	add.w	r2, r7, #12
 80024f2:	4619      	mov	r1, r3
 80024f4:	4851      	ldr	r0, [pc, #324]	@ (800263c <Task_MQTTHandler+0x1e4>)
 80024f6:	f002 fdf9 	bl	80050ec <DNS_run>
 80024fa:	4603      	mov	r3, r0
 80024fc:	75fb      	strb	r3, [r7, #23]
            if (result != 1)
 80024fe:	7dfb      	ldrb	r3, [r7, #23]
 8002500:	2b01      	cmp	r3, #1
 8002502:	d004      	beq.n	800250e <Task_MQTTHandler+0xb6>
            {
                printf("FAILED!");
 8002504:	484e      	ldr	r0, [pc, #312]	@ (8002640 <Task_MQTTHandler+0x1e8>)
 8002506:	f00c faa5 	bl	800ea54 <iprintf>

                while (1)
 800250a:	bf00      	nop
 800250c:	e7fd      	b.n	800250a <Task_MQTTHandler+0xb2>
                    ;
            }
            printf("Success! The IP of %s is %d.%d.%d.%d", remote_host, remote_host_ip[0],
 800250e:	4b48      	ldr	r3, [pc, #288]	@ (8002630 <Task_MQTTHandler+0x1d8>)
 8002510:	6819      	ldr	r1, [r3, #0]
 8002512:	7b3b      	ldrb	r3, [r7, #12]
 8002514:	4618      	mov	r0, r3
                   remote_host_ip[1], remote_host_ip[2], remote_host_ip[3]);
 8002516:	7b7b      	ldrb	r3, [r7, #13]
            printf("Success! The IP of %s is %d.%d.%d.%d", remote_host, remote_host_ip[0],
 8002518:	461c      	mov	r4, r3
                   remote_host_ip[1], remote_host_ip[2], remote_host_ip[3]);
 800251a:	7bbb      	ldrb	r3, [r7, #14]
 800251c:	7bfa      	ldrb	r2, [r7, #15]
            printf("Success! The IP of %s is %d.%d.%d.%d", remote_host, remote_host_ip[0],
 800251e:	9201      	str	r2, [sp, #4]
 8002520:	9300      	str	r3, [sp, #0]
 8002522:	4623      	mov	r3, r4
 8002524:	4602      	mov	r2, r0
 8002526:	4847      	ldr	r0, [pc, #284]	@ (8002644 <Task_MQTTHandler+0x1ec>)
 8002528:	f00c fa94 	bl	800ea54 <iprintf>

            chk = 2;
 800252c:	4b46      	ldr	r3, [pc, #280]	@ (8002648 <Task_MQTTHandler+0x1f0>)
 800252e:	2202      	movs	r2, #2
 8002530:	701a      	strb	r2, [r3, #0]
            tempflag = true;
 8002532:	4b41      	ldr	r3, [pc, #260]	@ (8002638 <Task_MQTTHandler+0x1e0>)
 8002534:	2201      	movs	r2, #1
 8002536:	701a      	strb	r2, [r3, #0]
 8002538:	e065      	b.n	8002606 <Task_MQTTHandler+0x1ae>
        }
        else if (chk == 2)
 800253a:	4b43      	ldr	r3, [pc, #268]	@ (8002648 <Task_MQTTHandler+0x1f0>)
 800253c:	781b      	ldrb	r3, [r3, #0]
 800253e:	2b02      	cmp	r3, #2
 8002540:	d138      	bne.n	80025b4 <Task_MQTTHandler+0x15c>
        {
            connection_status = ConnectNetwork(&network, remote_host_ip, destination_port);
 8002542:	4b42      	ldr	r3, [pc, #264]	@ (800264c <Task_MQTTHandler+0x1f4>)
 8002544:	881a      	ldrh	r2, [r3, #0]
 8002546:	f107 030c 	add.w	r3, r7, #12
 800254a:	4619      	mov	r1, r3
 800254c:	4835      	ldr	r0, [pc, #212]	@ (8002624 <Task_MQTTHandler+0x1cc>)
 800254e:	f003 fd6e 	bl	800602e <ConnectNetwork>
 8002552:	6138      	str	r0, [r7, #16]
            if (connection_status != SOCK_OK)
 8002554:	693b      	ldr	r3, [r7, #16]
 8002556:	2b01      	cmp	r3, #1
 8002558:	d007      	beq.n	800256a <Task_MQTTHandler+0x112>
            {
                printf("ERROR: Cannot connect with broker! Retrying in 5 seconds...\r\n");
 800255a:	483d      	ldr	r0, [pc, #244]	@ (8002650 <Task_MQTTHandler+0x1f8>)
 800255c:	f00c fae2 	bl	800eb24 <puts>
                osDelay(5000);
 8002560:	f241 3088 	movw	r0, #5000	@ 0x1388
 8002564:	f008 fd32 	bl	800afcc <osDelay>
                continue;
 8002568:	e04d      	b.n	8002606 <Task_MQTTHandler+0x1ae>
            }

            MQTTClientInit(&mqtt_client, &network, 1000, sendbuff, 256, receivebuff, 256);
 800256a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800256e:	9302      	str	r3, [sp, #8]
 8002570:	4b38      	ldr	r3, [pc, #224]	@ (8002654 <Task_MQTTHandler+0x1fc>)
 8002572:	9301      	str	r3, [sp, #4]
 8002574:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002578:	9300      	str	r3, [sp, #0]
 800257a:	4b37      	ldr	r3, [pc, #220]	@ (8002658 <Task_MQTTHandler+0x200>)
 800257c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002580:	4928      	ldr	r1, [pc, #160]	@ (8002624 <Task_MQTTHandler+0x1cc>)
 8002582:	4836      	ldr	r0, [pc, #216]	@ (800265c <Task_MQTTHandler+0x204>)
 8002584:	f002 ff00 	bl	8005388 <MQTTClientInit>

            if (MQTTConnect(&mqtt_client, &connect_data) != MQTT_SUCCESS)
 8002588:	4922      	ldr	r1, [pc, #136]	@ (8002614 <Task_MQTTHandler+0x1bc>)
 800258a:	4834      	ldr	r0, [pc, #208]	@ (800265c <Task_MQTTHandler+0x204>)
 800258c:	f003 fb3e 	bl	8005c0c <MQTTConnect>
 8002590:	4603      	mov	r3, r0
 8002592:	2b00      	cmp	r3, #0
 8002594:	d007      	beq.n	80025a6 <Task_MQTTHandler+0x14e>
            {
                printf("\n MQTT BROKER CONNECTION ERROR. Retrying in 5 seconds...\r\n");
 8002596:	4832      	ldr	r0, [pc, #200]	@ (8002660 <Task_MQTTHandler+0x208>)
 8002598:	f00c fac4 	bl	800eb24 <puts>
                osDelay(5000);
 800259c:	f241 3088 	movw	r0, #5000	@ 0x1388
 80025a0:	f008 fd14 	bl	800afcc <osDelay>
                continue;
 80025a4:	e02f      	b.n	8002606 <Task_MQTTHandler+0x1ae>
            }
            printf("\n MQTT BROKER CONNECTION SUCCESS. . . \r\n");
 80025a6:	482f      	ldr	r0, [pc, #188]	@ (8002664 <Task_MQTTHandler+0x20c>)
 80025a8:	f00c fabc 	bl	800eb24 <puts>
            chk = 3;
 80025ac:	4b26      	ldr	r3, [pc, #152]	@ (8002648 <Task_MQTTHandler+0x1f0>)
 80025ae:	2203      	movs	r2, #3
 80025b0:	701a      	strb	r2, [r3, #0]
 80025b2:	e78f      	b.n	80024d4 <Task_MQTTHandler+0x7c>
        }
        else if (chk == 3)
 80025b4:	4b24      	ldr	r3, [pc, #144]	@ (8002648 <Task_MQTTHandler+0x1f0>)
 80025b6:	781b      	ldrb	r3, [r3, #0]
 80025b8:	2b03      	cmp	r3, #3
 80025ba:	d10c      	bne.n	80025d6 <Task_MQTTHandler+0x17e>
        {
            MQTTSubscribe(&mqtt_client, "onwords/wired003/status", QOS0, MessageArrivedHandler);
 80025bc:	4b2a      	ldr	r3, [pc, #168]	@ (8002668 <Task_MQTTHandler+0x210>)
 80025be:	2200      	movs	r2, #0
 80025c0:	492a      	ldr	r1, [pc, #168]	@ (800266c <Task_MQTTHandler+0x214>)
 80025c2:	4826      	ldr	r0, [pc, #152]	@ (800265c <Task_MQTTHandler+0x204>)
 80025c4:	f003 fc2b 	bl	8005e1e <MQTTSubscribe>
            printf("Subscribed topic....onwords/wired003/status.....\r\n");
 80025c8:	4829      	ldr	r0, [pc, #164]	@ (8002670 <Task_MQTTHandler+0x218>)
 80025ca:	f00c faab 	bl	800eb24 <puts>
            chk = 4;
 80025ce:	4b1e      	ldr	r3, [pc, #120]	@ (8002648 <Task_MQTTHandler+0x1f0>)
 80025d0:	2204      	movs	r2, #4
 80025d2:	701a      	strb	r2, [r3, #0]
 80025d4:	e77e      	b.n	80024d4 <Task_MQTTHandler+0x7c>
        }
        else if (chk == 4)
 80025d6:	4b1c      	ldr	r3, [pc, #112]	@ (8002648 <Task_MQTTHandler+0x1f0>)
 80025d8:	781b      	ldrb	r3, [r3, #0]
 80025da:	2b04      	cmp	r3, #4
 80025dc:	f47f af7a 	bne.w	80024d4 <Task_MQTTHandler+0x7c>
        {
        	while(1)
        	{
        		connection_status = MQTTYield(&mqtt_client, 100);
 80025e0:	2164      	movs	r1, #100	@ 0x64
 80025e2:	481e      	ldr	r0, [pc, #120]	@ (800265c <Task_MQTTHandler+0x204>)
 80025e4:	f003 fa30 	bl	8005a48 <MQTTYield>
 80025e8:	6138      	str	r0, [r7, #16]
				if (connection_status != MQTT_SUCCESS)
 80025ea:	693b      	ldr	r3, [r7, #16]
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d006      	beq.n	80025fe <Task_MQTTHandler+0x1a6>
				{
				   printf("MQTTYield failed. Reconnecting...\r\n");
 80025f0:	4820      	ldr	r0, [pc, #128]	@ (8002674 <Task_MQTTHandler+0x21c>)
 80025f2:	f00c fa97 	bl	800eb24 <puts>
				   chk = 2;
 80025f6:	4b14      	ldr	r3, [pc, #80]	@ (8002648 <Task_MQTTHandler+0x1f0>)
 80025f8:	2202      	movs	r2, #2
 80025fa:	701a      	strb	r2, [r3, #0]
				   break;
 80025fc:	e003      	b.n	8002606 <Task_MQTTHandler+0x1ae>
				}
				osDelay(100);
 80025fe:	2064      	movs	r0, #100	@ 0x64
 8002600:	f008 fce4 	bl	800afcc <osDelay>
        		connection_status = MQTTYield(&mqtt_client, 100);
 8002604:	e7ec      	b.n	80025e0 <Task_MQTTHandler+0x188>
        if ((tempflag == false) && (StateChangeFlag == true))
 8002606:	e765      	b.n	80024d4 <Task_MQTTHandler+0x7c>
 8002608:	20000380 	.word	0x20000380
 800260c:	08002a59 	.word	0x08002a59
 8002610:	08010a04 	.word	0x08010a04
 8002614:	20000010 	.word	0x20000010
 8002618:	2000008c 	.word	0x2000008c
 800261c:	08010a20 	.word	0x08010a20
 8002620:	08010a28 	.word	0x08010a28
 8002624:	20000be8 	.word	0x20000be8
 8002628:	20000df8 	.word	0x20000df8
 800262c:	20000f48 	.word	0x20000f48
 8002630:	20000084 	.word	0x20000084
 8002634:	08010a34 	.word	0x08010a34
 8002638:	20000ef8 	.word	0x20000ef8
 800263c:	20000080 	.word	0x20000080
 8002640:	08010a4c 	.word	0x08010a4c
 8002644:	08010a54 	.word	0x08010a54
 8002648:	20000088 	.word	0x20000088
 800264c:	2000000c 	.word	0x2000000c
 8002650:	08010a7c 	.word	0x08010a7c
 8002654:	20000cf8 	.word	0x20000cf8
 8002658:	20000bf8 	.word	0x20000bf8
 800265c:	20000b80 	.word	0x20000b80
 8002660:	08010abc 	.word	0x08010abc
 8002664:	08010af8 	.word	0x08010af8
 8002668:	08002679 	.word	0x08002679
 800266c:	08010b20 	.word	0x08010b20
 8002670:	08010b38 	.word	0x08010b38
 8002674:	08010b6c 	.word	0x08010b6c

08002678 <MessageArrivedHandler>:
        }
    }
}

void MessageArrivedHandler(MessageData *data)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	b0ac      	sub	sp, #176	@ 0xb0
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
    char received_payload[64];
    char topic_name[64];

    strncpy(topic_name, data->topicName->lenstring.data, data->topicName->lenstring.len);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	685b      	ldr	r3, [r3, #4]
 8002684:	6899      	ldr	r1, [r3, #8]
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	685b      	ldr	r3, [r3, #4]
 800268a:	685b      	ldr	r3, [r3, #4]
 800268c:	461a      	mov	r2, r3
 800268e:	f107 0308 	add.w	r3, r7, #8
 8002692:	4618      	mov	r0, r3
 8002694:	f00c fb4d 	bl	800ed32 <strncpy>
    topic_name[data->topicName->lenstring.len] = '\0';
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	685b      	ldr	r3, [r3, #4]
 800269c:	685b      	ldr	r3, [r3, #4]
 800269e:	33b0      	adds	r3, #176	@ 0xb0
 80026a0:	443b      	add	r3, r7
 80026a2:	2200      	movs	r2, #0
 80026a4:	f803 2ca8 	strb.w	r2, [r3, #-168]

    strncpy(received_payload, data->message->payload, data->message->payloadlen);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	6899      	ldr	r1, [r3, #8]
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	68da      	ldr	r2, [r3, #12]
 80026b4:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80026b8:	4618      	mov	r0, r3
 80026ba:	f00c fb3a 	bl	800ed32 <strncpy>
    received_payload[data->message->payloadlen] = '\0';
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	68db      	ldr	r3, [r3, #12]
 80026c4:	33b0      	adds	r3, #176	@ 0xb0
 80026c6:	443b      	add	r3, r7
 80026c8:	2200      	movs	r2, #0
 80026ca:	f803 2c68 	strb.w	r2, [r3, #-104]

    for (int i = strlen(received_payload) - 1; i >= 0; i--)
 80026ce:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80026d2:	4618      	mov	r0, r3
 80026d4:	f7fd fd8e 	bl	80001f4 <strlen>
 80026d8:	4603      	mov	r3, r0
 80026da:	3b01      	subs	r3, #1
 80026dc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80026e0:	e023      	b.n	800272a <MessageArrivedHandler+0xb2>
    {
        if (received_payload[i] == '\r' || received_payload[i] == '\n' || received_payload[i] == ' ')
 80026e2:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 80026e6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80026ea:	4413      	add	r3, r2
 80026ec:	781b      	ldrb	r3, [r3, #0]
 80026ee:	2b0d      	cmp	r3, #13
 80026f0:	d00f      	beq.n	8002712 <MessageArrivedHandler+0x9a>
 80026f2:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 80026f6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80026fa:	4413      	add	r3, r2
 80026fc:	781b      	ldrb	r3, [r3, #0]
 80026fe:	2b0a      	cmp	r3, #10
 8002700:	d007      	beq.n	8002712 <MessageArrivedHandler+0x9a>
 8002702:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 8002706:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800270a:	4413      	add	r3, r2
 800270c:	781b      	ldrb	r3, [r3, #0]
 800270e:	2b20      	cmp	r3, #32
 8002710:	d10f      	bne.n	8002732 <MessageArrivedHandler+0xba>
        {
            received_payload[i] = '\0';
 8002712:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 8002716:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800271a:	4413      	add	r3, r2
 800271c:	2200      	movs	r2, #0
 800271e:	701a      	strb	r2, [r3, #0]
    for (int i = strlen(received_payload) - 1; i >= 0; i--)
 8002720:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002724:	3b01      	subs	r3, #1
 8002726:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800272a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800272e:	2b00      	cmp	r3, #0
 8002730:	dad7      	bge.n	80026e2 <MessageArrivedHandler+0x6a>
        else
        {
            break;
        }
    }
    printf("Message arrived on topic %s: %s\n", topic_name, received_payload);
 8002732:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 8002736:	f107 0308 	add.w	r3, r7, #8
 800273a:	4619      	mov	r1, r3
 800273c:	487b      	ldr	r0, [pc, #492]	@ (800292c <MessageArrivedHandler+0x2b4>)
 800273e:	f00c f989 	bl	800ea54 <iprintf>
    cJSON *json = cJSON_Parse(received_payload);
 8002742:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8002746:	4618      	mov	r0, r3
 8002748:	f7ff f962 	bl	8001a10 <cJSON_Parse>
 800274c:	f8c7 00a8 	str.w	r0, [r7, #168]	@ 0xa8
    if (json == NULL) {
 8002750:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002754:	2b00      	cmp	r3, #0
 8002756:	d102      	bne.n	800275e <MessageArrivedHandler+0xe6>
        printf("jSON parse failed..");
 8002758:	4875      	ldr	r0, [pc, #468]	@ (8002930 <MessageArrivedHandler+0x2b8>)
 800275a:	f00c f97b 	bl	800ea54 <iprintf>
    }

    cJSON *device1 = cJSON_GetObjectItemCaseSensitive(json, "device1");
 800275e:	4975      	ldr	r1, [pc, #468]	@ (8002934 <MessageArrivedHandler+0x2bc>)
 8002760:	f8d7 00a8 	ldr.w	r0, [r7, #168]	@ 0xa8
 8002764:	f7ff fc66 	bl	8002034 <cJSON_GetObjectItemCaseSensitive>
 8002768:	f8c7 00a4 	str.w	r0, [r7, #164]	@ 0xa4
	if (cJSON_IsNumber(device1)) {
 800276c:	f8d7 00a4 	ldr.w	r0, [r7, #164]	@ 0xa4
 8002770:	f7ff fc6f 	bl	8002052 <cJSON_IsNumber>
 8002774:	4603      	mov	r3, r0
 8002776:	2b00      	cmp	r3, #0
 8002778:	d00d      	beq.n	8002796 <MessageArrivedHandler+0x11e>
		HAL_GPIO_WritePin(RELAY1_GPIO_Port, RELAY1_Pin, device1->valueint ? GPIO_PIN_SET : GPIO_PIN_RESET);
 800277a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800277e:	695b      	ldr	r3, [r3, #20]
 8002780:	2b00      	cmp	r3, #0
 8002782:	bf14      	ite	ne
 8002784:	2301      	movne	r3, #1
 8002786:	2300      	moveq	r3, #0
 8002788:	b2db      	uxtb	r3, r3
 800278a:	461a      	mov	r2, r3
 800278c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002790:	4869      	ldr	r0, [pc, #420]	@ (8002938 <MessageArrivedHandler+0x2c0>)
 8002792:	f006 ff0f 	bl	80095b4 <HAL_GPIO_WritePin>
	}

	cJSON *device2 = cJSON_GetObjectItemCaseSensitive(json, "device2");
 8002796:	4969      	ldr	r1, [pc, #420]	@ (800293c <MessageArrivedHandler+0x2c4>)
 8002798:	f8d7 00a8 	ldr.w	r0, [r7, #168]	@ 0xa8
 800279c:	f7ff fc4a 	bl	8002034 <cJSON_GetObjectItemCaseSensitive>
 80027a0:	f8c7 00a0 	str.w	r0, [r7, #160]	@ 0xa0
	if (cJSON_IsNumber(device2)) {
 80027a4:	f8d7 00a0 	ldr.w	r0, [r7, #160]	@ 0xa0
 80027a8:	f7ff fc53 	bl	8002052 <cJSON_IsNumber>
 80027ac:	4603      	mov	r3, r0
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d00d      	beq.n	80027ce <MessageArrivedHandler+0x156>
		HAL_GPIO_WritePin(RELAY2_GPIO_Port, RELAY2_Pin, device2->valueint ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80027b2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80027b6:	695b      	ldr	r3, [r3, #20]
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	bf14      	ite	ne
 80027bc:	2301      	movne	r3, #1
 80027be:	2300      	moveq	r3, #0
 80027c0:	b2db      	uxtb	r3, r3
 80027c2:	461a      	mov	r2, r3
 80027c4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80027c8:	485b      	ldr	r0, [pc, #364]	@ (8002938 <MessageArrivedHandler+0x2c0>)
 80027ca:	f006 fef3 	bl	80095b4 <HAL_GPIO_WritePin>

	}

	cJSON *device3 = cJSON_GetObjectItemCaseSensitive(json, "device3");
 80027ce:	495c      	ldr	r1, [pc, #368]	@ (8002940 <MessageArrivedHandler+0x2c8>)
 80027d0:	f8d7 00a8 	ldr.w	r0, [r7, #168]	@ 0xa8
 80027d4:	f7ff fc2e 	bl	8002034 <cJSON_GetObjectItemCaseSensitive>
 80027d8:	f8c7 009c 	str.w	r0, [r7, #156]	@ 0x9c
	if (cJSON_IsNumber(device3)) {
 80027dc:	f8d7 009c 	ldr.w	r0, [r7, #156]	@ 0x9c
 80027e0:	f7ff fc37 	bl	8002052 <cJSON_IsNumber>
 80027e4:	4603      	mov	r3, r0
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d00c      	beq.n	8002804 <MessageArrivedHandler+0x18c>
		HAL_GPIO_WritePin(RELAY3_GPIO_Port, RELAY3_Pin, device3->valueint ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80027ea:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80027ee:	695b      	ldr	r3, [r3, #20]
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	bf14      	ite	ne
 80027f4:	2301      	movne	r3, #1
 80027f6:	2300      	moveq	r3, #0
 80027f8:	b2db      	uxtb	r3, r3
 80027fa:	461a      	mov	r2, r3
 80027fc:	2140      	movs	r1, #64	@ 0x40
 80027fe:	484e      	ldr	r0, [pc, #312]	@ (8002938 <MessageArrivedHandler+0x2c0>)
 8002800:	f006 fed8 	bl	80095b4 <HAL_GPIO_WritePin>

	}

	cJSON *device4 = cJSON_GetObjectItemCaseSensitive(json, "device4");
 8002804:	494f      	ldr	r1, [pc, #316]	@ (8002944 <MessageArrivedHandler+0x2cc>)
 8002806:	f8d7 00a8 	ldr.w	r0, [r7, #168]	@ 0xa8
 800280a:	f7ff fc13 	bl	8002034 <cJSON_GetObjectItemCaseSensitive>
 800280e:	f8c7 0098 	str.w	r0, [r7, #152]	@ 0x98
	if (cJSON_IsNumber(device4)) {
 8002812:	f8d7 0098 	ldr.w	r0, [r7, #152]	@ 0x98
 8002816:	f7ff fc1c 	bl	8002052 <cJSON_IsNumber>
 800281a:	4603      	mov	r3, r0
 800281c:	2b00      	cmp	r3, #0
 800281e:	d00d      	beq.n	800283c <MessageArrivedHandler+0x1c4>
		HAL_GPIO_WritePin(RELAY4_GPIO_Port, RELAY4_Pin, device4->valueint ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8002820:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002824:	695b      	ldr	r3, [r3, #20]
 8002826:	2b00      	cmp	r3, #0
 8002828:	bf14      	ite	ne
 800282a:	2301      	movne	r3, #1
 800282c:	2300      	moveq	r3, #0
 800282e:	b2db      	uxtb	r3, r3
 8002830:	461a      	mov	r2, r3
 8002832:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002836:	4844      	ldr	r0, [pc, #272]	@ (8002948 <MessageArrivedHandler+0x2d0>)
 8002838:	f006 febc 	bl	80095b4 <HAL_GPIO_WritePin>
	}

	cJSON *device5 = cJSON_GetObjectItemCaseSensitive(json, "relay5");
 800283c:	4943      	ldr	r1, [pc, #268]	@ (800294c <MessageArrivedHandler+0x2d4>)
 800283e:	f8d7 00a8 	ldr.w	r0, [r7, #168]	@ 0xa8
 8002842:	f7ff fbf7 	bl	8002034 <cJSON_GetObjectItemCaseSensitive>
 8002846:	f8c7 0094 	str.w	r0, [r7, #148]	@ 0x94
	if (cJSON_IsNumber(device5)) {
 800284a:	f8d7 0094 	ldr.w	r0, [r7, #148]	@ 0x94
 800284e:	f7ff fc00 	bl	8002052 <cJSON_IsNumber>
 8002852:	4603      	mov	r3, r0
 8002854:	2b00      	cmp	r3, #0
 8002856:	d00d      	beq.n	8002874 <MessageArrivedHandler+0x1fc>
		HAL_GPIO_WritePin(RELAY5_GPIO_Port, RELAY5_Pin, device5->valueint ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8002858:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800285c:	695b      	ldr	r3, [r3, #20]
 800285e:	2b00      	cmp	r3, #0
 8002860:	bf14      	ite	ne
 8002862:	2301      	movne	r3, #1
 8002864:	2300      	moveq	r3, #0
 8002866:	b2db      	uxtb	r3, r3
 8002868:	461a      	mov	r2, r3
 800286a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800286e:	4836      	ldr	r0, [pc, #216]	@ (8002948 <MessageArrivedHandler+0x2d0>)
 8002870:	f006 fea0 	bl	80095b4 <HAL_GPIO_WritePin>
	}

	cJSON *device6 = cJSON_GetObjectItemCaseSensitive(json, "relay6");
 8002874:	4936      	ldr	r1, [pc, #216]	@ (8002950 <MessageArrivedHandler+0x2d8>)
 8002876:	f8d7 00a8 	ldr.w	r0, [r7, #168]	@ 0xa8
 800287a:	f7ff fbdb 	bl	8002034 <cJSON_GetObjectItemCaseSensitive>
 800287e:	f8c7 0090 	str.w	r0, [r7, #144]	@ 0x90
	if (cJSON_IsNumber(device6)) {
 8002882:	f8d7 0090 	ldr.w	r0, [r7, #144]	@ 0x90
 8002886:	f7ff fbe4 	bl	8002052 <cJSON_IsNumber>
 800288a:	4603      	mov	r3, r0
 800288c:	2b00      	cmp	r3, #0
 800288e:	d00c      	beq.n	80028aa <MessageArrivedHandler+0x232>
		HAL_GPIO_WritePin(RELAY6_GPIO_Port, RELAY6_Pin, device6->valueint ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8002890:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002894:	695b      	ldr	r3, [r3, #20]
 8002896:	2b00      	cmp	r3, #0
 8002898:	bf14      	ite	ne
 800289a:	2301      	movne	r3, #1
 800289c:	2300      	moveq	r3, #0
 800289e:	b2db      	uxtb	r3, r3
 80028a0:	461a      	mov	r2, r3
 80028a2:	2120      	movs	r1, #32
 80028a4:	4824      	ldr	r0, [pc, #144]	@ (8002938 <MessageArrivedHandler+0x2c0>)
 80028a6:	f006 fe85 	bl	80095b4 <HAL_GPIO_WritePin>
	}

	cJSON *device7 = cJSON_GetObjectItemCaseSensitive(json, "relay7");
 80028aa:	492a      	ldr	r1, [pc, #168]	@ (8002954 <MessageArrivedHandler+0x2dc>)
 80028ac:	f8d7 00a8 	ldr.w	r0, [r7, #168]	@ 0xa8
 80028b0:	f7ff fbc0 	bl	8002034 <cJSON_GetObjectItemCaseSensitive>
 80028b4:	f8c7 008c 	str.w	r0, [r7, #140]	@ 0x8c
	if (cJSON_IsNumber(device7)) {
 80028b8:	f8d7 008c 	ldr.w	r0, [r7, #140]	@ 0x8c
 80028bc:	f7ff fbc9 	bl	8002052 <cJSON_IsNumber>
 80028c0:	4603      	mov	r3, r0
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d00d      	beq.n	80028e2 <MessageArrivedHandler+0x26a>
		HAL_GPIO_WritePin(RELAY7_GPIO_Port, RELAY7_Pin, device7->valueint ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80028c6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80028ca:	695b      	ldr	r3, [r3, #20]
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	bf14      	ite	ne
 80028d0:	2301      	movne	r3, #1
 80028d2:	2300      	moveq	r3, #0
 80028d4:	b2db      	uxtb	r3, r3
 80028d6:	461a      	mov	r2, r3
 80028d8:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80028dc:	481e      	ldr	r0, [pc, #120]	@ (8002958 <MessageArrivedHandler+0x2e0>)
 80028de:	f006 fe69 	bl	80095b4 <HAL_GPIO_WritePin>
	}

	cJSON *device8 = cJSON_GetObjectItemCaseSensitive(json, "relay8");
 80028e2:	491e      	ldr	r1, [pc, #120]	@ (800295c <MessageArrivedHandler+0x2e4>)
 80028e4:	f8d7 00a8 	ldr.w	r0, [r7, #168]	@ 0xa8
 80028e8:	f7ff fba4 	bl	8002034 <cJSON_GetObjectItemCaseSensitive>
 80028ec:	f8c7 0088 	str.w	r0, [r7, #136]	@ 0x88
	if (cJSON_IsNumber(device8)) {
 80028f0:	f8d7 0088 	ldr.w	r0, [r7, #136]	@ 0x88
 80028f4:	f7ff fbad 	bl	8002052 <cJSON_IsNumber>
 80028f8:	4603      	mov	r3, r0
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d00d      	beq.n	800291a <MessageArrivedHandler+0x2a2>
		HAL_GPIO_WritePin(RELAY8_GPIO_Port, RELAY8_Pin, device8->valueint ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80028fe:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002902:	695b      	ldr	r3, [r3, #20]
 8002904:	2b00      	cmp	r3, #0
 8002906:	bf14      	ite	ne
 8002908:	2301      	movne	r3, #1
 800290a:	2300      	moveq	r3, #0
 800290c:	b2db      	uxtb	r3, r3
 800290e:	461a      	mov	r2, r3
 8002910:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8002914:	4810      	ldr	r0, [pc, #64]	@ (8002958 <MessageArrivedHandler+0x2e0>)
 8002916:	f006 fe4d 	bl	80095b4 <HAL_GPIO_WritePin>
	}
	cJSON_Delete(json);
 800291a:	f8d7 00a8 	ldr.w	r0, [r7, #168]	@ 0xa8
 800291e:	f7fe fb95 	bl	800104c <cJSON_Delete>
}
 8002922:	bf00      	nop
 8002924:	37b0      	adds	r7, #176	@ 0xb0
 8002926:	46bd      	mov	sp, r7
 8002928:	bd80      	pop	{r7, pc}
 800292a:	bf00      	nop
 800292c:	08010b90 	.word	0x08010b90
 8002930:	08010bb4 	.word	0x08010bb4
 8002934:	08010bc8 	.word	0x08010bc8
 8002938:	40020800 	.word	0x40020800
 800293c:	08010bd0 	.word	0x08010bd0
 8002940:	08010bd8 	.word	0x08010bd8
 8002944:	08010be0 	.word	0x08010be0
 8002948:	40020400 	.word	0x40020400
 800294c:	08010be8 	.word	0x08010be8
 8002950:	08010bf0 	.word	0x08010bf0
 8002954:	08010bf8 	.word	0x08010bf8
 8002958:	40020000 	.word	0x40020000
 800295c:	08010c00 	.word	0x08010c00

08002960 <__io_putchar>:
    }
}

#define PUTCHAR  int __io_putchar(int ch)
PUTCHAR
{
 8002960:	b580      	push	{r7, lr}
 8002962:	b082      	sub	sp, #8
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 8002968:	1d39      	adds	r1, r7, #4
 800296a:	f04f 33ff 	mov.w	r3, #4294967295
 800296e:	2201      	movs	r2, #1
 8002970:	4803      	ldr	r0, [pc, #12]	@ (8002980 <__io_putchar+0x20>)
 8002972:	f007 fe4f 	bl	800a614 <HAL_UART_Transmit>
	return ch;
 8002976:	687b      	ldr	r3, [r7, #4]
}
 8002978:	4618      	mov	r0, r3
 800297a:	3708      	adds	r7, #8
 800297c:	46bd      	mov	sp, r7
 800297e:	bd80      	pop	{r7, pc}
 8002980:	20000330 	.word	0x20000330

08002984 <PHYStatusCheck>:

void PHYStatusCheck(void)
{
 8002984:	b580      	push	{r7, lr}
 8002986:	b082      	sub	sp, #8
 8002988:	af00      	add	r7, sp, #0
	uint8_t tmp;
	do
	{
		printf("\r\nChecking Ethernet Cable Presence ...");
 800298a:	480e      	ldr	r0, [pc, #56]	@ (80029c4 <PHYStatusCheck+0x40>)
 800298c:	f00c f862 	bl	800ea54 <iprintf>
		ctlwizchip(CW_GET_PHYLINK, (void*) &tmp);
 8002990:	1dfb      	adds	r3, r7, #7
 8002992:	4619      	mov	r1, r3
 8002994:	200f      	movs	r0, #15
 8002996:	f005 fe51 	bl	800863c <ctlwizchip>

		if(tmp == PHY_LINK_OFF)
 800299a:	79fb      	ldrb	r3, [r7, #7]
 800299c:	2b00      	cmp	r3, #0
 800299e:	d106      	bne.n	80029ae <PHYStatusCheck+0x2a>
		{
			printf("NO Cable Connected!");
 80029a0:	4809      	ldr	r0, [pc, #36]	@ (80029c8 <PHYStatusCheck+0x44>)
 80029a2:	f00c f857 	bl	800ea54 <iprintf>
			HAL_Delay(1500);
 80029a6:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 80029aa:	f006 fb79 	bl	80090a0 <HAL_Delay>
		}
	}while(tmp == PHY_LINK_OFF);
 80029ae:	79fb      	ldrb	r3, [r7, #7]
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d0ea      	beq.n	800298a <PHYStatusCheck+0x6>

	printf("Good! Cable got connected!");
 80029b4:	4805      	ldr	r0, [pc, #20]	@ (80029cc <PHYStatusCheck+0x48>)
 80029b6:	f00c f84d 	bl	800ea54 <iprintf>
}
 80029ba:	bf00      	nop
 80029bc:	3708      	adds	r7, #8
 80029be:	46bd      	mov	sp, r7
 80029c0:	bd80      	pop	{r7, pc}
 80029c2:	bf00      	nop
 80029c4:	08010c20 	.word	0x08010c20
 80029c8:	08010c48 	.word	0x08010c48
 80029cc:	08010c5c 	.word	0x08010c5c

080029d0 <PrintPHYConf>:

void PrintPHYConf(void)
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	b082      	sub	sp, #8
 80029d4:	af00      	add	r7, sp, #0
	wiz_PhyConf phyconf;

	ctlwizchip(CW_GET_PHYCONF, (void*) &phyconf);
 80029d6:	1d3b      	adds	r3, r7, #4
 80029d8:	4619      	mov	r1, r3
 80029da:	200b      	movs	r0, #11
 80029dc:	f005 fe2e 	bl	800863c <ctlwizchip>

	if(phyconf.by==PHY_CONFBY_HW)
 80029e0:	793b      	ldrb	r3, [r7, #4]
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d103      	bne.n	80029ee <PrintPHYConf+0x1e>
	{
		printf("\n\rPHY Configured by Hardware Pins");
 80029e6:	4814      	ldr	r0, [pc, #80]	@ (8002a38 <PrintPHYConf+0x68>)
 80029e8:	f00c f834 	bl	800ea54 <iprintf>
 80029ec:	e002      	b.n	80029f4 <PrintPHYConf+0x24>
	}
	else
	{
		printf("\n\rPHY Configured by Registers");
 80029ee:	4813      	ldr	r0, [pc, #76]	@ (8002a3c <PrintPHYConf+0x6c>)
 80029f0:	f00c f830 	bl	800ea54 <iprintf>
	}

	if(phyconf.mode==PHY_MODE_AUTONEGO)
 80029f4:	797b      	ldrb	r3, [r7, #5]
 80029f6:	2b01      	cmp	r3, #1
 80029f8:	d103      	bne.n	8002a02 <PrintPHYConf+0x32>
	{
		printf("\n\rAutonegotiation Enabled");
 80029fa:	4811      	ldr	r0, [pc, #68]	@ (8002a40 <PrintPHYConf+0x70>)
 80029fc:	f00c f82a 	bl	800ea54 <iprintf>
 8002a00:	e002      	b.n	8002a08 <PrintPHYConf+0x38>
	}
	else
	{
		printf("\n\rAutonegotiation NOT Enabled");
 8002a02:	4810      	ldr	r0, [pc, #64]	@ (8002a44 <PrintPHYConf+0x74>)
 8002a04:	f00c f826 	bl	800ea54 <iprintf>
	}

	if(phyconf.duplex==PHY_DUPLEX_FULL)
 8002a08:	79fb      	ldrb	r3, [r7, #7]
 8002a0a:	2b01      	cmp	r3, #1
 8002a0c:	d103      	bne.n	8002a16 <PrintPHYConf+0x46>
	{
		printf("\n\rDuplex Mode: Full");
 8002a0e:	480e      	ldr	r0, [pc, #56]	@ (8002a48 <PrintPHYConf+0x78>)
 8002a10:	f00c f820 	bl	800ea54 <iprintf>
 8002a14:	e002      	b.n	8002a1c <PrintPHYConf+0x4c>
	}
	else
	{
		printf("\n\rDuplex Mode: Half");
 8002a16:	480d      	ldr	r0, [pc, #52]	@ (8002a4c <PrintPHYConf+0x7c>)
 8002a18:	f00c f81c 	bl	800ea54 <iprintf>
	}

	if(phyconf.speed==PHY_SPEED_10)
 8002a1c:	79bb      	ldrb	r3, [r7, #6]
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d103      	bne.n	8002a2a <PrintPHYConf+0x5a>
	{
		printf("\n\rSpeed: 10Mbps");
 8002a22:	480b      	ldr	r0, [pc, #44]	@ (8002a50 <PrintPHYConf+0x80>)
 8002a24:	f00c f816 	bl	800ea54 <iprintf>
	}
	else
	{
		printf("\n\rSpeed: 100Mbps");
	}
}
 8002a28:	e002      	b.n	8002a30 <PrintPHYConf+0x60>
		printf("\n\rSpeed: 100Mbps");
 8002a2a:	480a      	ldr	r0, [pc, #40]	@ (8002a54 <PrintPHYConf+0x84>)
 8002a2c:	f00c f812 	bl	800ea54 <iprintf>
}
 8002a30:	bf00      	nop
 8002a32:	3708      	adds	r7, #8
 8002a34:	46bd      	mov	sp, r7
 8002a36:	bd80      	pop	{r7, pc}
 8002a38:	08010c78 	.word	0x08010c78
 8002a3c:	08010c9c 	.word	0x08010c9c
 8002a40:	08010cbc 	.word	0x08010cbc
 8002a44:	08010cd8 	.word	0x08010cd8
 8002a48:	08010cf8 	.word	0x08010cf8
 8002a4c:	08010d0c 	.word	0x08010d0c
 8002a50:	08010d20 	.word	0x08010d20
 8002a54:	08010d30 	.word	0x08010d30

08002a58 <OnDHCPIPAssigned>:

void OnDHCPIPAssigned(void)
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	af00      	add	r7, sp, #0

	printf("IP Obtained: \r\n");
 8002a5c:	480c      	ldr	r0, [pc, #48]	@ (8002a90 <OnDHCPIPAssigned+0x38>)
 8002a5e:	f00c f861 	bl	800eb24 <puts>
	getIPfromDHCP(gWIZNETINFO.ip);
 8002a62:	480c      	ldr	r0, [pc, #48]	@ (8002a94 <OnDHCPIPAssigned+0x3c>)
 8002a64:	f001 fef0 	bl	8004848 <getIPfromDHCP>
	getGWfromDHCP(gWIZNETINFO.gw);
 8002a68:	480b      	ldr	r0, [pc, #44]	@ (8002a98 <OnDHCPIPAssigned+0x40>)
 8002a6a:	f001 ff0d 	bl	8004888 <getGWfromDHCP>
	getSNfromDHCP(gWIZNETINFO.sn);
 8002a6e:	480b      	ldr	r0, [pc, #44]	@ (8002a9c <OnDHCPIPAssigned+0x44>)
 8002a70:	f001 ff2a 	bl	80048c8 <getSNfromDHCP>
	getDNSfromDHCP(gWIZNETINFO.dns);
 8002a74:	480a      	ldr	r0, [pc, #40]	@ (8002aa0 <OnDHCPIPAssigned+0x48>)
 8002a76:	f001 ff47 	bl	8004908 <getDNSfromDHCP>

	gWIZNETINFO.dhcp = NETINFO_DHCP;
 8002a7a:	4b0a      	ldr	r3, [pc, #40]	@ (8002aa4 <OnDHCPIPAssigned+0x4c>)
 8002a7c:	2202      	movs	r2, #2
 8002a7e:	759a      	strb	r2, [r3, #22]

	ctlnetwork(CN_SET_NETINFO, (void*) &gWIZNETINFO);
 8002a80:	4908      	ldr	r1, [pc, #32]	@ (8002aa4 <OnDHCPIPAssigned+0x4c>)
 8002a82:	2000      	movs	r0, #0
 8002a84:	f005 feba 	bl	80087fc <ctlnetwork>

	DisplayNetworkConfigurations();
 8002a88:	f000 f80e 	bl	8002aa8 <DisplayNetworkConfigurations>
}
 8002a8c:	bf00      	nop
 8002a8e:	bd80      	pop	{r7, pc}
 8002a90:	08010d44 	.word	0x08010d44
 8002a94:	2000006e 	.word	0x2000006e
 8002a98:	20000076 	.word	0x20000076
 8002a9c:	20000072 	.word	0x20000072
 8002aa0:	2000007a 	.word	0x2000007a
 8002aa4:	20000068 	.word	0x20000068

08002aa8 <DisplayNetworkConfigurations>:


void DisplayNetworkConfigurations()
{
 8002aa8:	b5b0      	push	{r4, r5, r7, lr}
 8002aaa:	b084      	sub	sp, #16
 8002aac:	af04      	add	r7, sp, #16
	ctlnetwork(CN_GET_NETINFO, (void*) &gWIZNETINFO);
 8002aae:	492a      	ldr	r1, [pc, #168]	@ (8002b58 <DisplayNetworkConfigurations+0xb0>)
 8002ab0:	2001      	movs	r0, #1
 8002ab2:	f005 fea3 	bl	80087fc <ctlnetwork>

	printf(" MAC : %02X:%02X:%02X:%02X:%02X:%02X\r\n", gWIZNETINFO.mac[0], gWIZNETINFO.mac[1], gWIZNETINFO.mac[2], gWIZNETINFO.mac[3], gWIZNETINFO.mac[4], gWIZNETINFO.mac[5]);
 8002ab6:	4b28      	ldr	r3, [pc, #160]	@ (8002b58 <DisplayNetworkConfigurations+0xb0>)
 8002ab8:	781b      	ldrb	r3, [r3, #0]
 8002aba:	4618      	mov	r0, r3
 8002abc:	4b26      	ldr	r3, [pc, #152]	@ (8002b58 <DisplayNetworkConfigurations+0xb0>)
 8002abe:	785b      	ldrb	r3, [r3, #1]
 8002ac0:	461c      	mov	r4, r3
 8002ac2:	4b25      	ldr	r3, [pc, #148]	@ (8002b58 <DisplayNetworkConfigurations+0xb0>)
 8002ac4:	789b      	ldrb	r3, [r3, #2]
 8002ac6:	461d      	mov	r5, r3
 8002ac8:	4b23      	ldr	r3, [pc, #140]	@ (8002b58 <DisplayNetworkConfigurations+0xb0>)
 8002aca:	78db      	ldrb	r3, [r3, #3]
 8002acc:	461a      	mov	r2, r3
 8002ace:	4b22      	ldr	r3, [pc, #136]	@ (8002b58 <DisplayNetworkConfigurations+0xb0>)
 8002ad0:	791b      	ldrb	r3, [r3, #4]
 8002ad2:	4619      	mov	r1, r3
 8002ad4:	4b20      	ldr	r3, [pc, #128]	@ (8002b58 <DisplayNetworkConfigurations+0xb0>)
 8002ad6:	795b      	ldrb	r3, [r3, #5]
 8002ad8:	9302      	str	r3, [sp, #8]
 8002ada:	9101      	str	r1, [sp, #4]
 8002adc:	9200      	str	r2, [sp, #0]
 8002ade:	462b      	mov	r3, r5
 8002ae0:	4622      	mov	r2, r4
 8002ae2:	4601      	mov	r1, r0
 8002ae4:	481d      	ldr	r0, [pc, #116]	@ (8002b5c <DisplayNetworkConfigurations+0xb4>)
 8002ae6:	f00b ffb5 	bl	800ea54 <iprintf>
	printf(" IP : %d.%d.%d.%d\r\n", gWIZNETINFO.ip[0], gWIZNETINFO.ip[1], gWIZNETINFO.ip[2], gWIZNETINFO.ip[3]);
 8002aea:	4b1b      	ldr	r3, [pc, #108]	@ (8002b58 <DisplayNetworkConfigurations+0xb0>)
 8002aec:	799b      	ldrb	r3, [r3, #6]
 8002aee:	4619      	mov	r1, r3
 8002af0:	4b19      	ldr	r3, [pc, #100]	@ (8002b58 <DisplayNetworkConfigurations+0xb0>)
 8002af2:	79db      	ldrb	r3, [r3, #7]
 8002af4:	461a      	mov	r2, r3
 8002af6:	4b18      	ldr	r3, [pc, #96]	@ (8002b58 <DisplayNetworkConfigurations+0xb0>)
 8002af8:	7a1b      	ldrb	r3, [r3, #8]
 8002afa:	4618      	mov	r0, r3
 8002afc:	4b16      	ldr	r3, [pc, #88]	@ (8002b58 <DisplayNetworkConfigurations+0xb0>)
 8002afe:	7a5b      	ldrb	r3, [r3, #9]
 8002b00:	9300      	str	r3, [sp, #0]
 8002b02:	4603      	mov	r3, r0
 8002b04:	4816      	ldr	r0, [pc, #88]	@ (8002b60 <DisplayNetworkConfigurations+0xb8>)
 8002b06:	f00b ffa5 	bl	800ea54 <iprintf>
	printf(" GW : %d.%d.%d.%d\r\n", gWIZNETINFO.gw[0], gWIZNETINFO.gw[1], gWIZNETINFO.gw[2], gWIZNETINFO.gw[3]);
 8002b0a:	4b13      	ldr	r3, [pc, #76]	@ (8002b58 <DisplayNetworkConfigurations+0xb0>)
 8002b0c:	7b9b      	ldrb	r3, [r3, #14]
 8002b0e:	4619      	mov	r1, r3
 8002b10:	4b11      	ldr	r3, [pc, #68]	@ (8002b58 <DisplayNetworkConfigurations+0xb0>)
 8002b12:	7bdb      	ldrb	r3, [r3, #15]
 8002b14:	461a      	mov	r2, r3
 8002b16:	4b10      	ldr	r3, [pc, #64]	@ (8002b58 <DisplayNetworkConfigurations+0xb0>)
 8002b18:	7c1b      	ldrb	r3, [r3, #16]
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	4b0e      	ldr	r3, [pc, #56]	@ (8002b58 <DisplayNetworkConfigurations+0xb0>)
 8002b1e:	7c5b      	ldrb	r3, [r3, #17]
 8002b20:	9300      	str	r3, [sp, #0]
 8002b22:	4603      	mov	r3, r0
 8002b24:	480f      	ldr	r0, [pc, #60]	@ (8002b64 <DisplayNetworkConfigurations+0xbc>)
 8002b26:	f00b ff95 	bl	800ea54 <iprintf>
	printf(" SN : %d.%d.%d.%d\r\n", gWIZNETINFO.sn[0], gWIZNETINFO.sn[1], gWIZNETINFO.sn[2], gWIZNETINFO.sn[3]);
 8002b2a:	4b0b      	ldr	r3, [pc, #44]	@ (8002b58 <DisplayNetworkConfigurations+0xb0>)
 8002b2c:	7a9b      	ldrb	r3, [r3, #10]
 8002b2e:	4619      	mov	r1, r3
 8002b30:	4b09      	ldr	r3, [pc, #36]	@ (8002b58 <DisplayNetworkConfigurations+0xb0>)
 8002b32:	7adb      	ldrb	r3, [r3, #11]
 8002b34:	461a      	mov	r2, r3
 8002b36:	4b08      	ldr	r3, [pc, #32]	@ (8002b58 <DisplayNetworkConfigurations+0xb0>)
 8002b38:	7b1b      	ldrb	r3, [r3, #12]
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	4b06      	ldr	r3, [pc, #24]	@ (8002b58 <DisplayNetworkConfigurations+0xb0>)
 8002b3e:	7b5b      	ldrb	r3, [r3, #13]
 8002b40:	9300      	str	r3, [sp, #0]
 8002b42:	4603      	mov	r3, r0
 8002b44:	4808      	ldr	r0, [pc, #32]	@ (8002b68 <DisplayNetworkConfigurations+0xc0>)
 8002b46:	f00b ff85 	bl	800ea54 <iprintf>
	printf("=======================================\r\n");
 8002b4a:	4808      	ldr	r0, [pc, #32]	@ (8002b6c <DisplayNetworkConfigurations+0xc4>)
 8002b4c:	f00b ffea 	bl	800eb24 <puts>
}
 8002b50:	bf00      	nop
 8002b52:	46bd      	mov	sp, r7
 8002b54:	bdb0      	pop	{r4, r5, r7, pc}
 8002b56:	bf00      	nop
 8002b58:	20000068 	.word	0x20000068
 8002b5c:	08010d54 	.word	0x08010d54
 8002b60:	08010d7c 	.word	0x08010d7c
 8002b64:	08010d90 	.word	0x08010d90
 8002b68:	08010da4 	.word	0x08010da4
 8002b6c:	08010db8 	.word	0x08010db8

08002b70 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8002b70:	b580      	push	{r7, lr}
 8002b72:	b082      	sub	sp, #8
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8002b78:	2001      	movs	r0, #1
 8002b7a:	f008 fa27 	bl	800afcc <osDelay>
 8002b7e:	e7fb      	b.n	8002b78 <StartDefaultTask+0x8>

08002b80 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002b80:	b580      	push	{r7, lr}
 8002b82:	b082      	sub	sp, #8
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */
	//printf("HAL_Tick\r\n");
  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	4a0e      	ldr	r2, [pc, #56]	@ (8002bc8 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8002b8e:	4293      	cmp	r3, r2
 8002b90:	d101      	bne.n	8002b96 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002b92:	f006 fa65 	bl	8009060 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
  MilliTimer_Handler(); //For MQTT
 8002b96:	f003 f959 	bl	8005e4c <MilliTimer_Handler>

   //One second callback for DHCP Module
   static uint16_t milli_count;
   milli_count++;
 8002b9a:	4b0c      	ldr	r3, [pc, #48]	@ (8002bcc <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8002b9c:	881b      	ldrh	r3, [r3, #0]
 8002b9e:	3301      	adds	r3, #1
 8002ba0:	b29a      	uxth	r2, r3
 8002ba2:	4b0a      	ldr	r3, [pc, #40]	@ (8002bcc <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8002ba4:	801a      	strh	r2, [r3, #0]

 	if(milli_count==1000)
 8002ba6:	4b09      	ldr	r3, [pc, #36]	@ (8002bcc <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8002ba8:	881b      	ldrh	r3, [r3, #0]
 8002baa:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002bae:	d106      	bne.n	8002bbe <HAL_TIM_PeriodElapsedCallback+0x3e>
 	{
 	  milli_count=0;
 8002bb0:	4b06      	ldr	r3, [pc, #24]	@ (8002bcc <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	801a      	strh	r2, [r3, #0]
 	  DHCP_time_handler();
 8002bb6:	f001 fe39 	bl	800482c <DHCP_time_handler>
 	  DNS_time_handler();
 8002bba:	f002 fb63 	bl	8005284 <DNS_time_handler>
 	}
  /* USER CODE END Callback 1 */
}
 8002bbe:	bf00      	nop
 8002bc0:	3708      	adds	r7, #8
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	bd80      	pop	{r7, pc}
 8002bc6:	bf00      	nop
 8002bc8:	40010000 	.word	0x40010000
 8002bcc:	20000efa 	.word	0x20000efa

08002bd0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002bd0:	b480      	push	{r7}
 8002bd2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002bd4:	b672      	cpsid	i
}
 8002bd6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002bd8:	bf00      	nop
 8002bda:	e7fd      	b.n	8002bd8 <Error_Handler+0x8>

08002bdc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	b082      	sub	sp, #8
 8002be0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002be2:	2300      	movs	r3, #0
 8002be4:	607b      	str	r3, [r7, #4]
 8002be6:	4b12      	ldr	r3, [pc, #72]	@ (8002c30 <HAL_MspInit+0x54>)
 8002be8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002bea:	4a11      	ldr	r2, [pc, #68]	@ (8002c30 <HAL_MspInit+0x54>)
 8002bec:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002bf0:	6453      	str	r3, [r2, #68]	@ 0x44
 8002bf2:	4b0f      	ldr	r3, [pc, #60]	@ (8002c30 <HAL_MspInit+0x54>)
 8002bf4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002bf6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002bfa:	607b      	str	r3, [r7, #4]
 8002bfc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002bfe:	2300      	movs	r3, #0
 8002c00:	603b      	str	r3, [r7, #0]
 8002c02:	4b0b      	ldr	r3, [pc, #44]	@ (8002c30 <HAL_MspInit+0x54>)
 8002c04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c06:	4a0a      	ldr	r2, [pc, #40]	@ (8002c30 <HAL_MspInit+0x54>)
 8002c08:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002c0c:	6413      	str	r3, [r2, #64]	@ 0x40
 8002c0e:	4b08      	ldr	r3, [pc, #32]	@ (8002c30 <HAL_MspInit+0x54>)
 8002c10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c12:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c16:	603b      	str	r3, [r7, #0]
 8002c18:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	210f      	movs	r1, #15
 8002c1e:	f06f 0001 	mvn.w	r0, #1
 8002c22:	f006 fb19 	bl	8009258 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002c26:	bf00      	nop
 8002c28:	3708      	adds	r7, #8
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	bd80      	pop	{r7, pc}
 8002c2e:	bf00      	nop
 8002c30:	40023800 	.word	0x40023800

08002c34 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	b08a      	sub	sp, #40	@ 0x28
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c3c:	f107 0314 	add.w	r3, r7, #20
 8002c40:	2200      	movs	r2, #0
 8002c42:	601a      	str	r2, [r3, #0]
 8002c44:	605a      	str	r2, [r3, #4]
 8002c46:	609a      	str	r2, [r3, #8]
 8002c48:	60da      	str	r2, [r3, #12]
 8002c4a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	4a19      	ldr	r2, [pc, #100]	@ (8002cb8 <HAL_SPI_MspInit+0x84>)
 8002c52:	4293      	cmp	r3, r2
 8002c54:	d12b      	bne.n	8002cae <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002c56:	2300      	movs	r3, #0
 8002c58:	613b      	str	r3, [r7, #16]
 8002c5a:	4b18      	ldr	r3, [pc, #96]	@ (8002cbc <HAL_SPI_MspInit+0x88>)
 8002c5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c5e:	4a17      	ldr	r2, [pc, #92]	@ (8002cbc <HAL_SPI_MspInit+0x88>)
 8002c60:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002c64:	6453      	str	r3, [r2, #68]	@ 0x44
 8002c66:	4b15      	ldr	r3, [pc, #84]	@ (8002cbc <HAL_SPI_MspInit+0x88>)
 8002c68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c6a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002c6e:	613b      	str	r3, [r7, #16]
 8002c70:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c72:	2300      	movs	r3, #0
 8002c74:	60fb      	str	r3, [r7, #12]
 8002c76:	4b11      	ldr	r3, [pc, #68]	@ (8002cbc <HAL_SPI_MspInit+0x88>)
 8002c78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c7a:	4a10      	ldr	r2, [pc, #64]	@ (8002cbc <HAL_SPI_MspInit+0x88>)
 8002c7c:	f043 0301 	orr.w	r3, r3, #1
 8002c80:	6313      	str	r3, [r2, #48]	@ 0x30
 8002c82:	4b0e      	ldr	r3, [pc, #56]	@ (8002cbc <HAL_SPI_MspInit+0x88>)
 8002c84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c86:	f003 0301 	and.w	r3, r3, #1
 8002c8a:	60fb      	str	r3, [r7, #12]
 8002c8c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8002c8e:	23e0      	movs	r3, #224	@ 0xe0
 8002c90:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c92:	2302      	movs	r3, #2
 8002c94:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c96:	2300      	movs	r3, #0
 8002c98:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c9a:	2303      	movs	r3, #3
 8002c9c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002c9e:	2305      	movs	r3, #5
 8002ca0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ca2:	f107 0314 	add.w	r3, r7, #20
 8002ca6:	4619      	mov	r1, r3
 8002ca8:	4805      	ldr	r0, [pc, #20]	@ (8002cc0 <HAL_SPI_MspInit+0x8c>)
 8002caa:	f006 faff 	bl	80092ac <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002cae:	bf00      	nop
 8002cb0:	3728      	adds	r7, #40	@ 0x28
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	bd80      	pop	{r7, pc}
 8002cb6:	bf00      	nop
 8002cb8:	40013000 	.word	0x40013000
 8002cbc:	40023800 	.word	0x40023800
 8002cc0:	40020000 	.word	0x40020000

08002cc4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	b08a      	sub	sp, #40	@ 0x28
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ccc:	f107 0314 	add.w	r3, r7, #20
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	601a      	str	r2, [r3, #0]
 8002cd4:	605a      	str	r2, [r3, #4]
 8002cd6:	609a      	str	r2, [r3, #8]
 8002cd8:	60da      	str	r2, [r3, #12]
 8002cda:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	4a19      	ldr	r2, [pc, #100]	@ (8002d48 <HAL_UART_MspInit+0x84>)
 8002ce2:	4293      	cmp	r3, r2
 8002ce4:	d12b      	bne.n	8002d3e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002ce6:	2300      	movs	r3, #0
 8002ce8:	613b      	str	r3, [r7, #16]
 8002cea:	4b18      	ldr	r3, [pc, #96]	@ (8002d4c <HAL_UART_MspInit+0x88>)
 8002cec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cee:	4a17      	ldr	r2, [pc, #92]	@ (8002d4c <HAL_UART_MspInit+0x88>)
 8002cf0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002cf4:	6413      	str	r3, [r2, #64]	@ 0x40
 8002cf6:	4b15      	ldr	r3, [pc, #84]	@ (8002d4c <HAL_UART_MspInit+0x88>)
 8002cf8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cfa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002cfe:	613b      	str	r3, [r7, #16]
 8002d00:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d02:	2300      	movs	r3, #0
 8002d04:	60fb      	str	r3, [r7, #12]
 8002d06:	4b11      	ldr	r3, [pc, #68]	@ (8002d4c <HAL_UART_MspInit+0x88>)
 8002d08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d0a:	4a10      	ldr	r2, [pc, #64]	@ (8002d4c <HAL_UART_MspInit+0x88>)
 8002d0c:	f043 0301 	orr.w	r3, r3, #1
 8002d10:	6313      	str	r3, [r2, #48]	@ 0x30
 8002d12:	4b0e      	ldr	r3, [pc, #56]	@ (8002d4c <HAL_UART_MspInit+0x88>)
 8002d14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d16:	f003 0301 	and.w	r3, r3, #1
 8002d1a:	60fb      	str	r3, [r7, #12]
 8002d1c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002d1e:	230c      	movs	r3, #12
 8002d20:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d22:	2302      	movs	r3, #2
 8002d24:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d26:	2300      	movs	r3, #0
 8002d28:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002d2e:	2307      	movs	r3, #7
 8002d30:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d32:	f107 0314 	add.w	r3, r7, #20
 8002d36:	4619      	mov	r1, r3
 8002d38:	4805      	ldr	r0, [pc, #20]	@ (8002d50 <HAL_UART_MspInit+0x8c>)
 8002d3a:	f006 fab7 	bl	80092ac <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002d3e:	bf00      	nop
 8002d40:	3728      	adds	r7, #40	@ 0x28
 8002d42:	46bd      	mov	sp, r7
 8002d44:	bd80      	pop	{r7, pc}
 8002d46:	bf00      	nop
 8002d48:	40004400 	.word	0x40004400
 8002d4c:	40023800 	.word	0x40023800
 8002d50:	40020000 	.word	0x40020000

08002d54 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002d54:	b580      	push	{r7, lr}
 8002d56:	b08c      	sub	sp, #48	@ 0x30
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8002d5c:	2300      	movs	r3, #0
 8002d5e:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 8002d60:	2300      	movs	r3, #0
 8002d62:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8002d64:	2300      	movs	r3, #0
 8002d66:	60bb      	str	r3, [r7, #8]
 8002d68:	4b2e      	ldr	r3, [pc, #184]	@ (8002e24 <HAL_InitTick+0xd0>)
 8002d6a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d6c:	4a2d      	ldr	r2, [pc, #180]	@ (8002e24 <HAL_InitTick+0xd0>)
 8002d6e:	f043 0301 	orr.w	r3, r3, #1
 8002d72:	6453      	str	r3, [r2, #68]	@ 0x44
 8002d74:	4b2b      	ldr	r3, [pc, #172]	@ (8002e24 <HAL_InitTick+0xd0>)
 8002d76:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d78:	f003 0301 	and.w	r3, r3, #1
 8002d7c:	60bb      	str	r3, [r7, #8]
 8002d7e:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002d80:	f107 020c 	add.w	r2, r7, #12
 8002d84:	f107 0310 	add.w	r3, r7, #16
 8002d88:	4611      	mov	r1, r2
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	f007 f8c4 	bl	8009f18 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8002d90:	f007 f8ae 	bl	8009ef0 <HAL_RCC_GetPCLK2Freq>
 8002d94:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002d96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d98:	4a23      	ldr	r2, [pc, #140]	@ (8002e28 <HAL_InitTick+0xd4>)
 8002d9a:	fba2 2303 	umull	r2, r3, r2, r3
 8002d9e:	0c9b      	lsrs	r3, r3, #18
 8002da0:	3b01      	subs	r3, #1
 8002da2:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8002da4:	4b21      	ldr	r3, [pc, #132]	@ (8002e2c <HAL_InitTick+0xd8>)
 8002da6:	4a22      	ldr	r2, [pc, #136]	@ (8002e30 <HAL_InitTick+0xdc>)
 8002da8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8002daa:	4b20      	ldr	r3, [pc, #128]	@ (8002e2c <HAL_InitTick+0xd8>)
 8002dac:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002db0:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8002db2:	4a1e      	ldr	r2, [pc, #120]	@ (8002e2c <HAL_InitTick+0xd8>)
 8002db4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002db6:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8002db8:	4b1c      	ldr	r3, [pc, #112]	@ (8002e2c <HAL_InitTick+0xd8>)
 8002dba:	2200      	movs	r2, #0
 8002dbc:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002dbe:	4b1b      	ldr	r3, [pc, #108]	@ (8002e2c <HAL_InitTick+0xd8>)
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002dc4:	4b19      	ldr	r3, [pc, #100]	@ (8002e2c <HAL_InitTick+0xd8>)
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8002dca:	4818      	ldr	r0, [pc, #96]	@ (8002e2c <HAL_InitTick+0xd8>)
 8002dcc:	f007 f95f 	bl	800a08e <HAL_TIM_Base_Init>
 8002dd0:	4603      	mov	r3, r0
 8002dd2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8002dd6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d11b      	bne.n	8002e16 <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8002dde:	4813      	ldr	r0, [pc, #76]	@ (8002e2c <HAL_InitTick+0xd8>)
 8002de0:	f007 f9ae 	bl	800a140 <HAL_TIM_Base_Start_IT>
 8002de4:	4603      	mov	r3, r0
 8002de6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8002dea:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d111      	bne.n	8002e16 <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8002df2:	2019      	movs	r0, #25
 8002df4:	f006 fa4c 	bl	8009290 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	2b0f      	cmp	r3, #15
 8002dfc:	d808      	bhi.n	8002e10 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8002dfe:	2200      	movs	r2, #0
 8002e00:	6879      	ldr	r1, [r7, #4]
 8002e02:	2019      	movs	r0, #25
 8002e04:	f006 fa28 	bl	8009258 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002e08:	4a0a      	ldr	r2, [pc, #40]	@ (8002e34 <HAL_InitTick+0xe0>)
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	6013      	str	r3, [r2, #0]
 8002e0e:	e002      	b.n	8002e16 <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8002e10:	2301      	movs	r3, #1
 8002e12:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8002e16:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	3730      	adds	r7, #48	@ 0x30
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	bd80      	pop	{r7, pc}
 8002e22:	bf00      	nop
 8002e24:	40023800 	.word	0x40023800
 8002e28:	431bde83 	.word	0x431bde83
 8002e2c:	20000efc 	.word	0x20000efc
 8002e30:	40010000 	.word	0x40010000
 8002e34:	200000e0 	.word	0x200000e0

08002e38 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002e38:	b480      	push	{r7}
 8002e3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002e3c:	bf00      	nop
 8002e3e:	e7fd      	b.n	8002e3c <NMI_Handler+0x4>

08002e40 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002e40:	b480      	push	{r7}
 8002e42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002e44:	bf00      	nop
 8002e46:	e7fd      	b.n	8002e44 <HardFault_Handler+0x4>

08002e48 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002e48:	b480      	push	{r7}
 8002e4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002e4c:	bf00      	nop
 8002e4e:	e7fd      	b.n	8002e4c <MemManage_Handler+0x4>

08002e50 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002e50:	b480      	push	{r7}
 8002e52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002e54:	bf00      	nop
 8002e56:	e7fd      	b.n	8002e54 <BusFault_Handler+0x4>

08002e58 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002e58:	b480      	push	{r7}
 8002e5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002e5c:	bf00      	nop
 8002e5e:	e7fd      	b.n	8002e5c <UsageFault_Handler+0x4>

08002e60 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002e60:	b480      	push	{r7}
 8002e62:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002e64:	bf00      	nop
 8002e66:	46bd      	mov	sp, r7
 8002e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6c:	4770      	bx	lr
	...

08002e70 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002e74:	4802      	ldr	r0, [pc, #8]	@ (8002e80 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8002e76:	f007 f9c5 	bl	800a204 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8002e7a:	bf00      	nop
 8002e7c:	bd80      	pop	{r7, pc}
 8002e7e:	bf00      	nop
 8002e80:	20000efc 	.word	0x20000efc

08002e84 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002e84:	b480      	push	{r7}
 8002e86:	af00      	add	r7, sp, #0
  return 1;
 8002e88:	2301      	movs	r3, #1
}
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e92:	4770      	bx	lr

08002e94 <_kill>:

int _kill(int pid, int sig)
{
 8002e94:	b580      	push	{r7, lr}
 8002e96:	b082      	sub	sp, #8
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6078      	str	r0, [r7, #4]
 8002e9c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002e9e:	f00c f807 	bl	800eeb0 <__errno>
 8002ea2:	4603      	mov	r3, r0
 8002ea4:	2216      	movs	r2, #22
 8002ea6:	601a      	str	r2, [r3, #0]
  return -1;
 8002ea8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002eac:	4618      	mov	r0, r3
 8002eae:	3708      	adds	r7, #8
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	bd80      	pop	{r7, pc}

08002eb4 <_exit>:

void _exit (int status)
{
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	b082      	sub	sp, #8
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002ebc:	f04f 31ff 	mov.w	r1, #4294967295
 8002ec0:	6878      	ldr	r0, [r7, #4]
 8002ec2:	f7ff ffe7 	bl	8002e94 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002ec6:	bf00      	nop
 8002ec8:	e7fd      	b.n	8002ec6 <_exit+0x12>

08002eca <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002eca:	b580      	push	{r7, lr}
 8002ecc:	b086      	sub	sp, #24
 8002ece:	af00      	add	r7, sp, #0
 8002ed0:	60f8      	str	r0, [r7, #12]
 8002ed2:	60b9      	str	r1, [r7, #8]
 8002ed4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	617b      	str	r3, [r7, #20]
 8002eda:	e00a      	b.n	8002ef2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002edc:	f3af 8000 	nop.w
 8002ee0:	4601      	mov	r1, r0
 8002ee2:	68bb      	ldr	r3, [r7, #8]
 8002ee4:	1c5a      	adds	r2, r3, #1
 8002ee6:	60ba      	str	r2, [r7, #8]
 8002ee8:	b2ca      	uxtb	r2, r1
 8002eea:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002eec:	697b      	ldr	r3, [r7, #20]
 8002eee:	3301      	adds	r3, #1
 8002ef0:	617b      	str	r3, [r7, #20]
 8002ef2:	697a      	ldr	r2, [r7, #20]
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	429a      	cmp	r2, r3
 8002ef8:	dbf0      	blt.n	8002edc <_read+0x12>
  }

  return len;
 8002efa:	687b      	ldr	r3, [r7, #4]
}
 8002efc:	4618      	mov	r0, r3
 8002efe:	3718      	adds	r7, #24
 8002f00:	46bd      	mov	sp, r7
 8002f02:	bd80      	pop	{r7, pc}

08002f04 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002f04:	b580      	push	{r7, lr}
 8002f06:	b086      	sub	sp, #24
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	60f8      	str	r0, [r7, #12]
 8002f0c:	60b9      	str	r1, [r7, #8]
 8002f0e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002f10:	2300      	movs	r3, #0
 8002f12:	617b      	str	r3, [r7, #20]
 8002f14:	e009      	b.n	8002f2a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002f16:	68bb      	ldr	r3, [r7, #8]
 8002f18:	1c5a      	adds	r2, r3, #1
 8002f1a:	60ba      	str	r2, [r7, #8]
 8002f1c:	781b      	ldrb	r3, [r3, #0]
 8002f1e:	4618      	mov	r0, r3
 8002f20:	f7ff fd1e 	bl	8002960 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002f24:	697b      	ldr	r3, [r7, #20]
 8002f26:	3301      	adds	r3, #1
 8002f28:	617b      	str	r3, [r7, #20]
 8002f2a:	697a      	ldr	r2, [r7, #20]
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	429a      	cmp	r2, r3
 8002f30:	dbf1      	blt.n	8002f16 <_write+0x12>
  }
  return len;
 8002f32:	687b      	ldr	r3, [r7, #4]
}
 8002f34:	4618      	mov	r0, r3
 8002f36:	3718      	adds	r7, #24
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	bd80      	pop	{r7, pc}

08002f3c <_close>:

int _close(int file)
{
 8002f3c:	b480      	push	{r7}
 8002f3e:	b083      	sub	sp, #12
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002f44:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002f48:	4618      	mov	r0, r3
 8002f4a:	370c      	adds	r7, #12
 8002f4c:	46bd      	mov	sp, r7
 8002f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f52:	4770      	bx	lr

08002f54 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002f54:	b480      	push	{r7}
 8002f56:	b083      	sub	sp, #12
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	6078      	str	r0, [r7, #4]
 8002f5c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002f5e:	683b      	ldr	r3, [r7, #0]
 8002f60:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002f64:	605a      	str	r2, [r3, #4]
  return 0;
 8002f66:	2300      	movs	r3, #0
}
 8002f68:	4618      	mov	r0, r3
 8002f6a:	370c      	adds	r7, #12
 8002f6c:	46bd      	mov	sp, r7
 8002f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f72:	4770      	bx	lr

08002f74 <_isatty>:

int _isatty(int file)
{
 8002f74:	b480      	push	{r7}
 8002f76:	b083      	sub	sp, #12
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002f7c:	2301      	movs	r3, #1
}
 8002f7e:	4618      	mov	r0, r3
 8002f80:	370c      	adds	r7, #12
 8002f82:	46bd      	mov	sp, r7
 8002f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f88:	4770      	bx	lr

08002f8a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002f8a:	b480      	push	{r7}
 8002f8c:	b085      	sub	sp, #20
 8002f8e:	af00      	add	r7, sp, #0
 8002f90:	60f8      	str	r0, [r7, #12]
 8002f92:	60b9      	str	r1, [r7, #8]
 8002f94:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002f96:	2300      	movs	r3, #0
}
 8002f98:	4618      	mov	r0, r3
 8002f9a:	3714      	adds	r7, #20
 8002f9c:	46bd      	mov	sp, r7
 8002f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa2:	4770      	bx	lr

08002fa4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	b086      	sub	sp, #24
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002fac:	4a14      	ldr	r2, [pc, #80]	@ (8003000 <_sbrk+0x5c>)
 8002fae:	4b15      	ldr	r3, [pc, #84]	@ (8003004 <_sbrk+0x60>)
 8002fb0:	1ad3      	subs	r3, r2, r3
 8002fb2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002fb4:	697b      	ldr	r3, [r7, #20]
 8002fb6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002fb8:	4b13      	ldr	r3, [pc, #76]	@ (8003008 <_sbrk+0x64>)
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d102      	bne.n	8002fc6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002fc0:	4b11      	ldr	r3, [pc, #68]	@ (8003008 <_sbrk+0x64>)
 8002fc2:	4a12      	ldr	r2, [pc, #72]	@ (800300c <_sbrk+0x68>)
 8002fc4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002fc6:	4b10      	ldr	r3, [pc, #64]	@ (8003008 <_sbrk+0x64>)
 8002fc8:	681a      	ldr	r2, [r3, #0]
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	4413      	add	r3, r2
 8002fce:	693a      	ldr	r2, [r7, #16]
 8002fd0:	429a      	cmp	r2, r3
 8002fd2:	d207      	bcs.n	8002fe4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002fd4:	f00b ff6c 	bl	800eeb0 <__errno>
 8002fd8:	4603      	mov	r3, r0
 8002fda:	220c      	movs	r2, #12
 8002fdc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002fde:	f04f 33ff 	mov.w	r3, #4294967295
 8002fe2:	e009      	b.n	8002ff8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002fe4:	4b08      	ldr	r3, [pc, #32]	@ (8003008 <_sbrk+0x64>)
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002fea:	4b07      	ldr	r3, [pc, #28]	@ (8003008 <_sbrk+0x64>)
 8002fec:	681a      	ldr	r2, [r3, #0]
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	4413      	add	r3, r2
 8002ff2:	4a05      	ldr	r2, [pc, #20]	@ (8003008 <_sbrk+0x64>)
 8002ff4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002ff6:	68fb      	ldr	r3, [r7, #12]
}
 8002ff8:	4618      	mov	r0, r3
 8002ffa:	3718      	adds	r7, #24
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	bd80      	pop	{r7, pc}
 8003000:	20018000 	.word	0x20018000
 8003004:	00000400 	.word	0x00000400
 8003008:	20000f44 	.word	0x20000f44
 800300c:	20005af8 	.word	0x20005af8

08003010 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003010:	b480      	push	{r7}
 8003012:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003014:	4b06      	ldr	r3, [pc, #24]	@ (8003030 <SystemInit+0x20>)
 8003016:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800301a:	4a05      	ldr	r2, [pc, #20]	@ (8003030 <SystemInit+0x20>)
 800301c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003020:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003024:	bf00      	nop
 8003026:	46bd      	mov	sp, r7
 8003028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302c:	4770      	bx	lr
 800302e:	bf00      	nop
 8003030:	e000ed00 	.word	0xe000ed00

08003034 <default_ip_assign>:
/* Parse message as OFFER and ACK and NACK from DHCP server.*/
int8_t   parseDHCPCMSG(void);

/* The default handler of ip assign first */
void default_ip_assign(void)
{
 8003034:	b580      	push	{r7, lr}
 8003036:	af00      	add	r7, sp, #0
   setSIPR(DHCP_allocated_ip);
 8003038:	2204      	movs	r2, #4
 800303a:	4909      	ldr	r1, [pc, #36]	@ (8003060 <default_ip_assign+0x2c>)
 800303c:	f44f 6070 	mov.w	r0, #3840	@ 0xf00
 8003040:	f003 ff26 	bl	8006e90 <WIZCHIP_WRITE_BUF>
   setSUBR(DHCP_allocated_sn);
 8003044:	2204      	movs	r2, #4
 8003046:	4907      	ldr	r1, [pc, #28]	@ (8003064 <default_ip_assign+0x30>)
 8003048:	f44f 60a0 	mov.w	r0, #1280	@ 0x500
 800304c:	f003 ff20 	bl	8006e90 <WIZCHIP_WRITE_BUF>
   setGAR (DHCP_allocated_gw);
 8003050:	2204      	movs	r2, #4
 8003052:	4905      	ldr	r1, [pc, #20]	@ (8003068 <default_ip_assign+0x34>)
 8003054:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8003058:	f003 ff1a 	bl	8006e90 <WIZCHIP_WRITE_BUF>
}
 800305c:	bf00      	nop
 800305e:	bd80      	pop	{r7, pc}
 8003060:	20000f58 	.word	0x20000f58
 8003064:	20000f60 	.word	0x20000f60
 8003068:	20000f5c 	.word	0x20000f5c

0800306c <default_ip_update>:

/* The default handler of ip changed */
void default_ip_update(void)
{
 800306c:	b580      	push	{r7, lr}
 800306e:	af00      	add	r7, sp, #0
	/* WIZchip Software Reset */
   setMR(MR_RST);
 8003070:	2180      	movs	r1, #128	@ 0x80
 8003072:	2000      	movs	r0, #0
 8003074:	f003 fe5e 	bl	8006d34 <WIZCHIP_WRITE>
   getMR(); // for delay
 8003078:	2000      	movs	r0, #0
 800307a:	f003 fe0f 	bl	8006c9c <WIZCHIP_READ>
   default_ip_assign();
 800307e:	f7ff ffd9 	bl	8003034 <default_ip_assign>
   setSHAR(DHCP_CHADDR);
 8003082:	2206      	movs	r2, #6
 8003084:	4903      	ldr	r1, [pc, #12]	@ (8003094 <default_ip_update+0x28>)
 8003086:	f44f 6010 	mov.w	r0, #2304	@ 0x900
 800308a:	f003 ff01 	bl	8006e90 <WIZCHIP_WRITE_BUF>
}
 800308e:	bf00      	nop
 8003090:	bd80      	pop	{r7, pc}
 8003092:	bf00      	nop
 8003094:	20000f78 	.word	0x20000f78

08003098 <default_ip_conflict>:

/* The default handler of ip changed */
void default_ip_conflict(void)
{
 8003098:	b580      	push	{r7, lr}
 800309a:	af00      	add	r7, sp, #0
	// WIZchip Software Reset
	setMR(MR_RST);
 800309c:	2180      	movs	r1, #128	@ 0x80
 800309e:	2000      	movs	r0, #0
 80030a0:	f003 fe48 	bl	8006d34 <WIZCHIP_WRITE>
	getMR(); // for delay
 80030a4:	2000      	movs	r0, #0
 80030a6:	f003 fdf9 	bl	8006c9c <WIZCHIP_READ>
	setSHAR(DHCP_CHADDR);
 80030aa:	2206      	movs	r2, #6
 80030ac:	4903      	ldr	r1, [pc, #12]	@ (80030bc <default_ip_conflict+0x24>)
 80030ae:	f44f 6010 	mov.w	r0, #2304	@ 0x900
 80030b2:	f003 feed 	bl	8006e90 <WIZCHIP_WRITE_BUF>
}
 80030b6:	bf00      	nop
 80030b8:	bd80      	pop	{r7, pc}
 80030ba:	bf00      	nop
 80030bc:	20000f78 	.word	0x20000f78

080030c0 <reg_dhcp_cbfunc>:

/* register the call back func. */
void reg_dhcp_cbfunc(void(*ip_assign)(void), void(*ip_update)(void), void(*ip_conflict)(void))
{
 80030c0:	b480      	push	{r7}
 80030c2:	b085      	sub	sp, #20
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	60f8      	str	r0, [r7, #12]
 80030c8:	60b9      	str	r1, [r7, #8]
 80030ca:	607a      	str	r2, [r7, #4]
   dhcp_ip_assign   = default_ip_assign;
 80030cc:	4b10      	ldr	r3, [pc, #64]	@ (8003110 <reg_dhcp_cbfunc+0x50>)
 80030ce:	4a11      	ldr	r2, [pc, #68]	@ (8003114 <reg_dhcp_cbfunc+0x54>)
 80030d0:	601a      	str	r2, [r3, #0]
   dhcp_ip_update   = default_ip_update;
 80030d2:	4b11      	ldr	r3, [pc, #68]	@ (8003118 <reg_dhcp_cbfunc+0x58>)
 80030d4:	4a11      	ldr	r2, [pc, #68]	@ (800311c <reg_dhcp_cbfunc+0x5c>)
 80030d6:	601a      	str	r2, [r3, #0]
   dhcp_ip_conflict = default_ip_conflict;
 80030d8:	4b11      	ldr	r3, [pc, #68]	@ (8003120 <reg_dhcp_cbfunc+0x60>)
 80030da:	4a12      	ldr	r2, [pc, #72]	@ (8003124 <reg_dhcp_cbfunc+0x64>)
 80030dc:	601a      	str	r2, [r3, #0]
   if(ip_assign)   dhcp_ip_assign = ip_assign;
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d002      	beq.n	80030ea <reg_dhcp_cbfunc+0x2a>
 80030e4:	4a0a      	ldr	r2, [pc, #40]	@ (8003110 <reg_dhcp_cbfunc+0x50>)
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	6013      	str	r3, [r2, #0]
   if(ip_update)   dhcp_ip_update = ip_update;
 80030ea:	68bb      	ldr	r3, [r7, #8]
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d002      	beq.n	80030f6 <reg_dhcp_cbfunc+0x36>
 80030f0:	4a09      	ldr	r2, [pc, #36]	@ (8003118 <reg_dhcp_cbfunc+0x58>)
 80030f2:	68bb      	ldr	r3, [r7, #8]
 80030f4:	6013      	str	r3, [r2, #0]
   if(ip_conflict) dhcp_ip_conflict = ip_conflict;
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d002      	beq.n	8003102 <reg_dhcp_cbfunc+0x42>
 80030fc:	4a08      	ldr	r2, [pc, #32]	@ (8003120 <reg_dhcp_cbfunc+0x60>)
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	6013      	str	r3, [r2, #0]
}
 8003102:	bf00      	nop
 8003104:	3714      	adds	r7, #20
 8003106:	46bd      	mov	sp, r7
 8003108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800310c:	4770      	bx	lr
 800310e:	bf00      	nop
 8003110:	200000a4 	.word	0x200000a4
 8003114:	08003035 	.word	0x08003035
 8003118:	200000a8 	.word	0x200000a8
 800311c:	0800306d 	.word	0x0800306d
 8003120:	200000ac 	.word	0x200000ac
 8003124:	08003099 	.word	0x08003099

08003128 <makeDHCPMSG>:

/* make the common DHCP message */
void makeDHCPMSG(void)
{
 8003128:	b580      	push	{r7, lr}
 800312a:	b084      	sub	sp, #16
 800312c:	af00      	add	r7, sp, #0
   uint8_t  bk_mac[6];
   uint8_t* ptmp;
   uint8_t  i;
   getSHAR(bk_mac);
 800312e:	463b      	mov	r3, r7
 8003130:	2206      	movs	r2, #6
 8003132:	4619      	mov	r1, r3
 8003134:	f44f 6010 	mov.w	r0, #2304	@ 0x900
 8003138:	f003 fe4a 	bl	8006dd0 <WIZCHIP_READ_BUF>
	pDHCPMSG->op      = DHCP_BOOTREQUEST;
 800313c:	4b72      	ldr	r3, [pc, #456]	@ (8003308 <makeDHCPMSG+0x1e0>)
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	2201      	movs	r2, #1
 8003142:	701a      	strb	r2, [r3, #0]
	pDHCPMSG->htype   = DHCP_HTYPE10MB;
 8003144:	4b70      	ldr	r3, [pc, #448]	@ (8003308 <makeDHCPMSG+0x1e0>)
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	2201      	movs	r2, #1
 800314a:	705a      	strb	r2, [r3, #1]
	pDHCPMSG->hlen    = DHCP_HLENETHERNET;
 800314c:	4b6e      	ldr	r3, [pc, #440]	@ (8003308 <makeDHCPMSG+0x1e0>)
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	2206      	movs	r2, #6
 8003152:	709a      	strb	r2, [r3, #2]
	pDHCPMSG->hops    = DHCP_HOPS;
 8003154:	4b6c      	ldr	r3, [pc, #432]	@ (8003308 <makeDHCPMSG+0x1e0>)
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	2200      	movs	r2, #0
 800315a:	70da      	strb	r2, [r3, #3]
	ptmp              = (uint8_t*)(&pDHCPMSG->xid);
 800315c:	4b6a      	ldr	r3, [pc, #424]	@ (8003308 <makeDHCPMSG+0x1e0>)
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	3304      	adds	r3, #4
 8003162:	60bb      	str	r3, [r7, #8]
	*(ptmp+0)         = (uint8_t)((DHCP_XID & 0xFF000000) >> 24);
 8003164:	4b69      	ldr	r3, [pc, #420]	@ (800330c <makeDHCPMSG+0x1e4>)
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	0e1b      	lsrs	r3, r3, #24
 800316a:	b2da      	uxtb	r2, r3
 800316c:	68bb      	ldr	r3, [r7, #8]
 800316e:	701a      	strb	r2, [r3, #0]
	*(ptmp+1)         = (uint8_t)((DHCP_XID & 0x00FF0000) >> 16);
 8003170:	4b66      	ldr	r3, [pc, #408]	@ (800330c <makeDHCPMSG+0x1e4>)
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	0c1a      	lsrs	r2, r3, #16
 8003176:	68bb      	ldr	r3, [r7, #8]
 8003178:	3301      	adds	r3, #1
 800317a:	b2d2      	uxtb	r2, r2
 800317c:	701a      	strb	r2, [r3, #0]
   *(ptmp+2)         = (uint8_t)((DHCP_XID & 0x0000FF00) >>  8);
 800317e:	4b63      	ldr	r3, [pc, #396]	@ (800330c <makeDHCPMSG+0x1e4>)
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	0a1a      	lsrs	r2, r3, #8
 8003184:	68bb      	ldr	r3, [r7, #8]
 8003186:	3302      	adds	r3, #2
 8003188:	b2d2      	uxtb	r2, r2
 800318a:	701a      	strb	r2, [r3, #0]
	*(ptmp+3)         = (uint8_t)((DHCP_XID & 0x000000FF) >>  0);   
 800318c:	4b5f      	ldr	r3, [pc, #380]	@ (800330c <makeDHCPMSG+0x1e4>)
 800318e:	681a      	ldr	r2, [r3, #0]
 8003190:	68bb      	ldr	r3, [r7, #8]
 8003192:	3303      	adds	r3, #3
 8003194:	b2d2      	uxtb	r2, r2
 8003196:	701a      	strb	r2, [r3, #0]
	pDHCPMSG->secs    = DHCP_SECS;
 8003198:	4b5b      	ldr	r3, [pc, #364]	@ (8003308 <makeDHCPMSG+0x1e0>)
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	2200      	movs	r2, #0
 800319e:	811a      	strh	r2, [r3, #8]
	ptmp              = (uint8_t*)(&pDHCPMSG->flags);	
 80031a0:	4b59      	ldr	r3, [pc, #356]	@ (8003308 <makeDHCPMSG+0x1e0>)
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	330a      	adds	r3, #10
 80031a6:	60bb      	str	r3, [r7, #8]
	*(ptmp+0)         = (uint8_t)((DHCP_FLAGSBROADCAST & 0xFF00) >> 8);
 80031a8:	68bb      	ldr	r3, [r7, #8]
 80031aa:	2280      	movs	r2, #128	@ 0x80
 80031ac:	701a      	strb	r2, [r3, #0]
	*(ptmp+1)         = (uint8_t)((DHCP_FLAGSBROADCAST & 0x00FF) >> 0);
 80031ae:	68bb      	ldr	r3, [r7, #8]
 80031b0:	3301      	adds	r3, #1
 80031b2:	2200      	movs	r2, #0
 80031b4:	701a      	strb	r2, [r3, #0]

	pDHCPMSG->ciaddr[0] = 0;
 80031b6:	4b54      	ldr	r3, [pc, #336]	@ (8003308 <makeDHCPMSG+0x1e0>)
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	2200      	movs	r2, #0
 80031bc:	731a      	strb	r2, [r3, #12]
	pDHCPMSG->ciaddr[1] = 0;
 80031be:	4b52      	ldr	r3, [pc, #328]	@ (8003308 <makeDHCPMSG+0x1e0>)
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	2200      	movs	r2, #0
 80031c4:	735a      	strb	r2, [r3, #13]
	pDHCPMSG->ciaddr[2] = 0;
 80031c6:	4b50      	ldr	r3, [pc, #320]	@ (8003308 <makeDHCPMSG+0x1e0>)
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	2200      	movs	r2, #0
 80031cc:	739a      	strb	r2, [r3, #14]
	pDHCPMSG->ciaddr[3] = 0;
 80031ce:	4b4e      	ldr	r3, [pc, #312]	@ (8003308 <makeDHCPMSG+0x1e0>)
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	2200      	movs	r2, #0
 80031d4:	73da      	strb	r2, [r3, #15]

	pDHCPMSG->yiaddr[0] = 0;
 80031d6:	4b4c      	ldr	r3, [pc, #304]	@ (8003308 <makeDHCPMSG+0x1e0>)
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	2200      	movs	r2, #0
 80031dc:	741a      	strb	r2, [r3, #16]
	pDHCPMSG->yiaddr[1] = 0;
 80031de:	4b4a      	ldr	r3, [pc, #296]	@ (8003308 <makeDHCPMSG+0x1e0>)
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	2200      	movs	r2, #0
 80031e4:	745a      	strb	r2, [r3, #17]
	pDHCPMSG->yiaddr[2] = 0;
 80031e6:	4b48      	ldr	r3, [pc, #288]	@ (8003308 <makeDHCPMSG+0x1e0>)
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	2200      	movs	r2, #0
 80031ec:	749a      	strb	r2, [r3, #18]
	pDHCPMSG->yiaddr[3] = 0;
 80031ee:	4b46      	ldr	r3, [pc, #280]	@ (8003308 <makeDHCPMSG+0x1e0>)
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	2200      	movs	r2, #0
 80031f4:	74da      	strb	r2, [r3, #19]

	pDHCPMSG->siaddr[0] = 0;
 80031f6:	4b44      	ldr	r3, [pc, #272]	@ (8003308 <makeDHCPMSG+0x1e0>)
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	2200      	movs	r2, #0
 80031fc:	751a      	strb	r2, [r3, #20]
	pDHCPMSG->siaddr[1] = 0;
 80031fe:	4b42      	ldr	r3, [pc, #264]	@ (8003308 <makeDHCPMSG+0x1e0>)
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	2200      	movs	r2, #0
 8003204:	755a      	strb	r2, [r3, #21]
	pDHCPMSG->siaddr[2] = 0;
 8003206:	4b40      	ldr	r3, [pc, #256]	@ (8003308 <makeDHCPMSG+0x1e0>)
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	2200      	movs	r2, #0
 800320c:	759a      	strb	r2, [r3, #22]
	pDHCPMSG->siaddr[3] = 0;
 800320e:	4b3e      	ldr	r3, [pc, #248]	@ (8003308 <makeDHCPMSG+0x1e0>)
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	2200      	movs	r2, #0
 8003214:	75da      	strb	r2, [r3, #23]

	pDHCPMSG->giaddr[0] = 0;
 8003216:	4b3c      	ldr	r3, [pc, #240]	@ (8003308 <makeDHCPMSG+0x1e0>)
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	2200      	movs	r2, #0
 800321c:	761a      	strb	r2, [r3, #24]
	pDHCPMSG->giaddr[1] = 0;
 800321e:	4b3a      	ldr	r3, [pc, #232]	@ (8003308 <makeDHCPMSG+0x1e0>)
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	2200      	movs	r2, #0
 8003224:	765a      	strb	r2, [r3, #25]
	pDHCPMSG->giaddr[2] = 0;
 8003226:	4b38      	ldr	r3, [pc, #224]	@ (8003308 <makeDHCPMSG+0x1e0>)
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	2200      	movs	r2, #0
 800322c:	769a      	strb	r2, [r3, #26]
	pDHCPMSG->giaddr[3] = 0;
 800322e:	4b36      	ldr	r3, [pc, #216]	@ (8003308 <makeDHCPMSG+0x1e0>)
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	2200      	movs	r2, #0
 8003234:	76da      	strb	r2, [r3, #27]

	pDHCPMSG->chaddr[0] = DHCP_CHADDR[0];
 8003236:	4b34      	ldr	r3, [pc, #208]	@ (8003308 <makeDHCPMSG+0x1e0>)
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	4a35      	ldr	r2, [pc, #212]	@ (8003310 <makeDHCPMSG+0x1e8>)
 800323c:	7812      	ldrb	r2, [r2, #0]
 800323e:	771a      	strb	r2, [r3, #28]
	pDHCPMSG->chaddr[1] = DHCP_CHADDR[1];
 8003240:	4b31      	ldr	r3, [pc, #196]	@ (8003308 <makeDHCPMSG+0x1e0>)
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	4a32      	ldr	r2, [pc, #200]	@ (8003310 <makeDHCPMSG+0x1e8>)
 8003246:	7852      	ldrb	r2, [r2, #1]
 8003248:	775a      	strb	r2, [r3, #29]
	pDHCPMSG->chaddr[2] = DHCP_CHADDR[2];
 800324a:	4b2f      	ldr	r3, [pc, #188]	@ (8003308 <makeDHCPMSG+0x1e0>)
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	4a30      	ldr	r2, [pc, #192]	@ (8003310 <makeDHCPMSG+0x1e8>)
 8003250:	7892      	ldrb	r2, [r2, #2]
 8003252:	779a      	strb	r2, [r3, #30]
	pDHCPMSG->chaddr[3] = DHCP_CHADDR[3];
 8003254:	4b2c      	ldr	r3, [pc, #176]	@ (8003308 <makeDHCPMSG+0x1e0>)
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	4a2d      	ldr	r2, [pc, #180]	@ (8003310 <makeDHCPMSG+0x1e8>)
 800325a:	78d2      	ldrb	r2, [r2, #3]
 800325c:	77da      	strb	r2, [r3, #31]
	pDHCPMSG->chaddr[4] = DHCP_CHADDR[4];
 800325e:	4b2a      	ldr	r3, [pc, #168]	@ (8003308 <makeDHCPMSG+0x1e0>)
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	4a2b      	ldr	r2, [pc, #172]	@ (8003310 <makeDHCPMSG+0x1e8>)
 8003264:	7912      	ldrb	r2, [r2, #4]
 8003266:	f883 2020 	strb.w	r2, [r3, #32]
	pDHCPMSG->chaddr[5] = DHCP_CHADDR[5];
 800326a:	4b27      	ldr	r3, [pc, #156]	@ (8003308 <makeDHCPMSG+0x1e0>)
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	4a28      	ldr	r2, [pc, #160]	@ (8003310 <makeDHCPMSG+0x1e8>)
 8003270:	7952      	ldrb	r2, [r2, #5]
 8003272:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

	for (i = 6; i < 16; i++)  pDHCPMSG->chaddr[i] = 0;
 8003276:	2306      	movs	r3, #6
 8003278:	73fb      	strb	r3, [r7, #15]
 800327a:	e008      	b.n	800328e <makeDHCPMSG+0x166>
 800327c:	4b22      	ldr	r3, [pc, #136]	@ (8003308 <makeDHCPMSG+0x1e0>)
 800327e:	681a      	ldr	r2, [r3, #0]
 8003280:	7bfb      	ldrb	r3, [r7, #15]
 8003282:	4413      	add	r3, r2
 8003284:	2200      	movs	r2, #0
 8003286:	771a      	strb	r2, [r3, #28]
 8003288:	7bfb      	ldrb	r3, [r7, #15]
 800328a:	3301      	adds	r3, #1
 800328c:	73fb      	strb	r3, [r7, #15]
 800328e:	7bfb      	ldrb	r3, [r7, #15]
 8003290:	2b0f      	cmp	r3, #15
 8003292:	d9f3      	bls.n	800327c <makeDHCPMSG+0x154>
	for (i = 0; i < 64; i++)  pDHCPMSG->sname[i]  = 0;
 8003294:	2300      	movs	r3, #0
 8003296:	73fb      	strb	r3, [r7, #15]
 8003298:	e009      	b.n	80032ae <makeDHCPMSG+0x186>
 800329a:	4b1b      	ldr	r3, [pc, #108]	@ (8003308 <makeDHCPMSG+0x1e0>)
 800329c:	681a      	ldr	r2, [r3, #0]
 800329e:	7bfb      	ldrb	r3, [r7, #15]
 80032a0:	4413      	add	r3, r2
 80032a2:	2200      	movs	r2, #0
 80032a4:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
 80032a8:	7bfb      	ldrb	r3, [r7, #15]
 80032aa:	3301      	adds	r3, #1
 80032ac:	73fb      	strb	r3, [r7, #15]
 80032ae:	7bfb      	ldrb	r3, [r7, #15]
 80032b0:	2b3f      	cmp	r3, #63	@ 0x3f
 80032b2:	d9f2      	bls.n	800329a <makeDHCPMSG+0x172>
	for (i = 0; i < 128; i++) pDHCPMSG->file[i]   = 0;
 80032b4:	2300      	movs	r3, #0
 80032b6:	73fb      	strb	r3, [r7, #15]
 80032b8:	e009      	b.n	80032ce <makeDHCPMSG+0x1a6>
 80032ba:	4b13      	ldr	r3, [pc, #76]	@ (8003308 <makeDHCPMSG+0x1e0>)
 80032bc:	681a      	ldr	r2, [r3, #0]
 80032be:	7bfb      	ldrb	r3, [r7, #15]
 80032c0:	4413      	add	r3, r2
 80032c2:	2200      	movs	r2, #0
 80032c4:	f883 206c 	strb.w	r2, [r3, #108]	@ 0x6c
 80032c8:	7bfb      	ldrb	r3, [r7, #15]
 80032ca:	3301      	adds	r3, #1
 80032cc:	73fb      	strb	r3, [r7, #15]
 80032ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	daf1      	bge.n	80032ba <makeDHCPMSG+0x192>

	// MAGIC_COOKIE
	pDHCPMSG->OPT[0] = (uint8_t)((MAGIC_COOKIE & 0xFF000000) >> 24);
 80032d6:	4b0c      	ldr	r3, [pc, #48]	@ (8003308 <makeDHCPMSG+0x1e0>)
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	2263      	movs	r2, #99	@ 0x63
 80032dc:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[1] = (uint8_t)((MAGIC_COOKIE & 0x00FF0000) >> 16);
 80032e0:	4b09      	ldr	r3, [pc, #36]	@ (8003308 <makeDHCPMSG+0x1e0>)
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	2282      	movs	r2, #130	@ 0x82
 80032e6:	f883 20ed 	strb.w	r2, [r3, #237]	@ 0xed
	pDHCPMSG->OPT[2] = (uint8_t)((MAGIC_COOKIE & 0x0000FF00) >>  8);
 80032ea:	4b07      	ldr	r3, [pc, #28]	@ (8003308 <makeDHCPMSG+0x1e0>)
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	2253      	movs	r2, #83	@ 0x53
 80032f0:	f883 20ee 	strb.w	r2, [r3, #238]	@ 0xee
	pDHCPMSG->OPT[3] = (uint8_t) (MAGIC_COOKIE & 0x000000FF) >>  0;
 80032f4:	4b04      	ldr	r3, [pc, #16]	@ (8003308 <makeDHCPMSG+0x1e0>)
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	2263      	movs	r2, #99	@ 0x63
 80032fa:	f883 20ef 	strb.w	r2, [r3, #239]	@ 0xef
}
 80032fe:	bf00      	nop
 8003300:	3710      	adds	r7, #16
 8003302:	46bd      	mov	sp, r7
 8003304:	bd80      	pop	{r7, pc}
 8003306:	bf00      	nop
 8003308:	20000f74 	.word	0x20000f74
 800330c:	20000f70 	.word	0x20000f70
 8003310:	20000f78 	.word	0x20000f78

08003314 <send_DHCP_DISCOVER>:

/* SEND DHCP DISCOVER */
void send_DHCP_DISCOVER(void)
{
 8003314:	b5b0      	push	{r4, r5, r7, lr}
 8003316:	b084      	sub	sp, #16
 8003318:	af02      	add	r7, sp, #8
	uint16_t i;
	uint8_t ip[4];
	uint16_t k = 0;
 800331a:	2300      	movs	r3, #0
 800331c:	80bb      	strh	r3, [r7, #4]
   
   makeDHCPMSG();
 800331e:	f7ff ff03 	bl	8003128 <makeDHCPMSG>
   DHCP_SIP[0]=0;
 8003322:	4b56      	ldr	r3, [pc, #344]	@ (800347c <send_DHCP_DISCOVER+0x168>)
 8003324:	2200      	movs	r2, #0
 8003326:	701a      	strb	r2, [r3, #0]
   DHCP_SIP[1]=0;
 8003328:	4b54      	ldr	r3, [pc, #336]	@ (800347c <send_DHCP_DISCOVER+0x168>)
 800332a:	2200      	movs	r2, #0
 800332c:	705a      	strb	r2, [r3, #1]
   DHCP_SIP[2]=0;
 800332e:	4b53      	ldr	r3, [pc, #332]	@ (800347c <send_DHCP_DISCOVER+0x168>)
 8003330:	2200      	movs	r2, #0
 8003332:	709a      	strb	r2, [r3, #2]
   DHCP_SIP[3]=0;
 8003334:	4b51      	ldr	r3, [pc, #324]	@ (800347c <send_DHCP_DISCOVER+0x168>)
 8003336:	2200      	movs	r2, #0
 8003338:	70da      	strb	r2, [r3, #3]
   DHCP_REAL_SIP[0]=0;
 800333a:	4b51      	ldr	r3, [pc, #324]	@ (8003480 <send_DHCP_DISCOVER+0x16c>)
 800333c:	2200      	movs	r2, #0
 800333e:	701a      	strb	r2, [r3, #0]
   DHCP_REAL_SIP[1]=0;
 8003340:	4b4f      	ldr	r3, [pc, #316]	@ (8003480 <send_DHCP_DISCOVER+0x16c>)
 8003342:	2200      	movs	r2, #0
 8003344:	705a      	strb	r2, [r3, #1]
   DHCP_REAL_SIP[2]=0;
 8003346:	4b4e      	ldr	r3, [pc, #312]	@ (8003480 <send_DHCP_DISCOVER+0x16c>)
 8003348:	2200      	movs	r2, #0
 800334a:	709a      	strb	r2, [r3, #2]
   DHCP_REAL_SIP[3]=0;
 800334c:	4b4c      	ldr	r3, [pc, #304]	@ (8003480 <send_DHCP_DISCOVER+0x16c>)
 800334e:	2200      	movs	r2, #0
 8003350:	70da      	strb	r2, [r3, #3]

   k = 4;     // because MAGIC_COOKIE already made by makeDHCPMSG()
 8003352:	2304      	movs	r3, #4
 8003354:	80bb      	strh	r3, [r7, #4]
   
	// Option Request Param
	pDHCPMSG->OPT[k++] = dhcpMessageType;
 8003356:	4b4b      	ldr	r3, [pc, #300]	@ (8003484 <send_DHCP_DISCOVER+0x170>)
 8003358:	681a      	ldr	r2, [r3, #0]
 800335a:	88bb      	ldrh	r3, [r7, #4]
 800335c:	1c59      	adds	r1, r3, #1
 800335e:	80b9      	strh	r1, [r7, #4]
 8003360:	4413      	add	r3, r2
 8003362:	2235      	movs	r2, #53	@ 0x35
 8003364:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = 0x01;
 8003368:	4b46      	ldr	r3, [pc, #280]	@ (8003484 <send_DHCP_DISCOVER+0x170>)
 800336a:	681a      	ldr	r2, [r3, #0]
 800336c:	88bb      	ldrh	r3, [r7, #4]
 800336e:	1c59      	adds	r1, r3, #1
 8003370:	80b9      	strh	r1, [r7, #4]
 8003372:	4413      	add	r3, r2
 8003374:	2201      	movs	r2, #1
 8003376:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_DISCOVER;
 800337a:	4b42      	ldr	r3, [pc, #264]	@ (8003484 <send_DHCP_DISCOVER+0x170>)
 800337c:	681a      	ldr	r2, [r3, #0]
 800337e:	88bb      	ldrh	r3, [r7, #4]
 8003380:	1c59      	adds	r1, r3, #1
 8003382:	80b9      	strh	r1, [r7, #4]
 8003384:	4413      	add	r3, r2
 8003386:	2201      	movs	r2, #1
 8003388:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	
	// Client identifier
	pDHCPMSG->OPT[k++] = dhcpClientIdentifier;
 800338c:	4b3d      	ldr	r3, [pc, #244]	@ (8003484 <send_DHCP_DISCOVER+0x170>)
 800338e:	681a      	ldr	r2, [r3, #0]
 8003390:	88bb      	ldrh	r3, [r7, #4]
 8003392:	1c59      	adds	r1, r3, #1
 8003394:	80b9      	strh	r1, [r7, #4]
 8003396:	4413      	add	r3, r2
 8003398:	223d      	movs	r2, #61	@ 0x3d
 800339a:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = 0x07;
 800339e:	4b39      	ldr	r3, [pc, #228]	@ (8003484 <send_DHCP_DISCOVER+0x170>)
 80033a0:	681a      	ldr	r2, [r3, #0]
 80033a2:	88bb      	ldrh	r3, [r7, #4]
 80033a4:	1c59      	adds	r1, r3, #1
 80033a6:	80b9      	strh	r1, [r7, #4]
 80033a8:	4413      	add	r3, r2
 80033aa:	2207      	movs	r2, #7
 80033ac:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = 0x01;
 80033b0:	4b34      	ldr	r3, [pc, #208]	@ (8003484 <send_DHCP_DISCOVER+0x170>)
 80033b2:	681a      	ldr	r2, [r3, #0]
 80033b4:	88bb      	ldrh	r3, [r7, #4]
 80033b6:	1c59      	adds	r1, r3, #1
 80033b8:	80b9      	strh	r1, [r7, #4]
 80033ba:	4413      	add	r3, r2
 80033bc:	2201      	movs	r2, #1
 80033be:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[0];
 80033c2:	4b30      	ldr	r3, [pc, #192]	@ (8003484 <send_DHCP_DISCOVER+0x170>)
 80033c4:	681a      	ldr	r2, [r3, #0]
 80033c6:	88bb      	ldrh	r3, [r7, #4]
 80033c8:	1c59      	adds	r1, r3, #1
 80033ca:	80b9      	strh	r1, [r7, #4]
 80033cc:	4618      	mov	r0, r3
 80033ce:	4b2e      	ldr	r3, [pc, #184]	@ (8003488 <send_DHCP_DISCOVER+0x174>)
 80033d0:	7819      	ldrb	r1, [r3, #0]
 80033d2:	1813      	adds	r3, r2, r0
 80033d4:	460a      	mov	r2, r1
 80033d6:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[1];
 80033da:	4b2a      	ldr	r3, [pc, #168]	@ (8003484 <send_DHCP_DISCOVER+0x170>)
 80033dc:	681a      	ldr	r2, [r3, #0]
 80033de:	88bb      	ldrh	r3, [r7, #4]
 80033e0:	1c59      	adds	r1, r3, #1
 80033e2:	80b9      	strh	r1, [r7, #4]
 80033e4:	4618      	mov	r0, r3
 80033e6:	4b28      	ldr	r3, [pc, #160]	@ (8003488 <send_DHCP_DISCOVER+0x174>)
 80033e8:	7859      	ldrb	r1, [r3, #1]
 80033ea:	1813      	adds	r3, r2, r0
 80033ec:	460a      	mov	r2, r1
 80033ee:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[2];
 80033f2:	4b24      	ldr	r3, [pc, #144]	@ (8003484 <send_DHCP_DISCOVER+0x170>)
 80033f4:	681a      	ldr	r2, [r3, #0]
 80033f6:	88bb      	ldrh	r3, [r7, #4]
 80033f8:	1c59      	adds	r1, r3, #1
 80033fa:	80b9      	strh	r1, [r7, #4]
 80033fc:	4618      	mov	r0, r3
 80033fe:	4b22      	ldr	r3, [pc, #136]	@ (8003488 <send_DHCP_DISCOVER+0x174>)
 8003400:	7899      	ldrb	r1, [r3, #2]
 8003402:	1813      	adds	r3, r2, r0
 8003404:	460a      	mov	r2, r1
 8003406:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[3];
 800340a:	4b1e      	ldr	r3, [pc, #120]	@ (8003484 <send_DHCP_DISCOVER+0x170>)
 800340c:	681a      	ldr	r2, [r3, #0]
 800340e:	88bb      	ldrh	r3, [r7, #4]
 8003410:	1c59      	adds	r1, r3, #1
 8003412:	80b9      	strh	r1, [r7, #4]
 8003414:	4618      	mov	r0, r3
 8003416:	4b1c      	ldr	r3, [pc, #112]	@ (8003488 <send_DHCP_DISCOVER+0x174>)
 8003418:	78d9      	ldrb	r1, [r3, #3]
 800341a:	1813      	adds	r3, r2, r0
 800341c:	460a      	mov	r2, r1
 800341e:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[4];
 8003422:	4b18      	ldr	r3, [pc, #96]	@ (8003484 <send_DHCP_DISCOVER+0x170>)
 8003424:	681a      	ldr	r2, [r3, #0]
 8003426:	88bb      	ldrh	r3, [r7, #4]
 8003428:	1c59      	adds	r1, r3, #1
 800342a:	80b9      	strh	r1, [r7, #4]
 800342c:	4618      	mov	r0, r3
 800342e:	4b16      	ldr	r3, [pc, #88]	@ (8003488 <send_DHCP_DISCOVER+0x174>)
 8003430:	7919      	ldrb	r1, [r3, #4]
 8003432:	1813      	adds	r3, r2, r0
 8003434:	460a      	mov	r2, r1
 8003436:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[5];
 800343a:	4b12      	ldr	r3, [pc, #72]	@ (8003484 <send_DHCP_DISCOVER+0x170>)
 800343c:	681a      	ldr	r2, [r3, #0]
 800343e:	88bb      	ldrh	r3, [r7, #4]
 8003440:	1c59      	adds	r1, r3, #1
 8003442:	80b9      	strh	r1, [r7, #4]
 8003444:	4618      	mov	r0, r3
 8003446:	4b10      	ldr	r3, [pc, #64]	@ (8003488 <send_DHCP_DISCOVER+0x174>)
 8003448:	7959      	ldrb	r1, [r3, #5]
 800344a:	1813      	adds	r3, r2, r0
 800344c:	460a      	mov	r2, r1
 800344e:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	
	// host name
	pDHCPMSG->OPT[k++] = hostName;
 8003452:	4b0c      	ldr	r3, [pc, #48]	@ (8003484 <send_DHCP_DISCOVER+0x170>)
 8003454:	681a      	ldr	r2, [r3, #0]
 8003456:	88bb      	ldrh	r3, [r7, #4]
 8003458:	1c59      	adds	r1, r3, #1
 800345a:	80b9      	strh	r1, [r7, #4]
 800345c:	4413      	add	r3, r2
 800345e:	220c      	movs	r2, #12
 8003460:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = 0;          // fill zero length of hostname 
 8003464:	4b07      	ldr	r3, [pc, #28]	@ (8003484 <send_DHCP_DISCOVER+0x170>)
 8003466:	681a      	ldr	r2, [r3, #0]
 8003468:	88bb      	ldrh	r3, [r7, #4]
 800346a:	1c59      	adds	r1, r3, #1
 800346c:	80b9      	strh	r1, [r7, #4]
 800346e:	4413      	add	r3, r2
 8003470:	2200      	movs	r2, #0
 8003472:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	for(i = 0 ; HOST_NAME[i] != 0; i++)
 8003476:	2300      	movs	r3, #0
 8003478:	80fb      	strh	r3, [r7, #6]
 800347a:	e017      	b.n	80034ac <send_DHCP_DISCOVER+0x198>
 800347c:	20000f4c 	.word	0x20000f4c
 8003480:	20000f50 	.word	0x20000f50
 8003484:	20000f74 	.word	0x20000f74
 8003488:	20000f78 	.word	0x20000f78
   	pDHCPMSG->OPT[k++] = HOST_NAME[i];
 800348c:	88f9      	ldrh	r1, [r7, #6]
 800348e:	4b82      	ldr	r3, [pc, #520]	@ (8003698 <send_DHCP_DISCOVER+0x384>)
 8003490:	681a      	ldr	r2, [r3, #0]
 8003492:	88bb      	ldrh	r3, [r7, #4]
 8003494:	1c58      	adds	r0, r3, #1
 8003496:	80b8      	strh	r0, [r7, #4]
 8003498:	4618      	mov	r0, r3
 800349a:	4b80      	ldr	r3, [pc, #512]	@ (800369c <send_DHCP_DISCOVER+0x388>)
 800349c:	5c59      	ldrb	r1, [r3, r1]
 800349e:	1813      	adds	r3, r2, r0
 80034a0:	460a      	mov	r2, r1
 80034a2:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	for(i = 0 ; HOST_NAME[i] != 0; i++)
 80034a6:	88fb      	ldrh	r3, [r7, #6]
 80034a8:	3301      	adds	r3, #1
 80034aa:	80fb      	strh	r3, [r7, #6]
 80034ac:	88fb      	ldrh	r3, [r7, #6]
 80034ae:	4a7b      	ldr	r2, [pc, #492]	@ (800369c <send_DHCP_DISCOVER+0x388>)
 80034b0:	5cd3      	ldrb	r3, [r2, r3]
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d1ea      	bne.n	800348c <send_DHCP_DISCOVER+0x178>
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[3] >> 4); 
 80034b6:	4b7a      	ldr	r3, [pc, #488]	@ (80036a0 <send_DHCP_DISCOVER+0x38c>)
 80034b8:	78db      	ldrb	r3, [r3, #3]
 80034ba:	091b      	lsrs	r3, r3, #4
 80034bc:	b2da      	uxtb	r2, r3
 80034be:	4b76      	ldr	r3, [pc, #472]	@ (8003698 <send_DHCP_DISCOVER+0x384>)
 80034c0:	681c      	ldr	r4, [r3, #0]
 80034c2:	88bb      	ldrh	r3, [r7, #4]
 80034c4:	1c59      	adds	r1, r3, #1
 80034c6:	80b9      	strh	r1, [r7, #4]
 80034c8:	461d      	mov	r5, r3
 80034ca:	4610      	mov	r0, r2
 80034cc:	f001 fa3c 	bl	8004948 <NibbleToHex>
 80034d0:	4603      	mov	r3, r0
 80034d2:	461a      	mov	r2, r3
 80034d4:	1963      	adds	r3, r4, r5
 80034d6:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[3]);
 80034da:	4b71      	ldr	r3, [pc, #452]	@ (80036a0 <send_DHCP_DISCOVER+0x38c>)
 80034dc:	78da      	ldrb	r2, [r3, #3]
 80034de:	4b6e      	ldr	r3, [pc, #440]	@ (8003698 <send_DHCP_DISCOVER+0x384>)
 80034e0:	681c      	ldr	r4, [r3, #0]
 80034e2:	88bb      	ldrh	r3, [r7, #4]
 80034e4:	1c59      	adds	r1, r3, #1
 80034e6:	80b9      	strh	r1, [r7, #4]
 80034e8:	461d      	mov	r5, r3
 80034ea:	4610      	mov	r0, r2
 80034ec:	f001 fa2c 	bl	8004948 <NibbleToHex>
 80034f0:	4603      	mov	r3, r0
 80034f2:	461a      	mov	r2, r3
 80034f4:	1963      	adds	r3, r4, r5
 80034f6:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[4] >> 4); 
 80034fa:	4b69      	ldr	r3, [pc, #420]	@ (80036a0 <send_DHCP_DISCOVER+0x38c>)
 80034fc:	791b      	ldrb	r3, [r3, #4]
 80034fe:	091b      	lsrs	r3, r3, #4
 8003500:	b2da      	uxtb	r2, r3
 8003502:	4b65      	ldr	r3, [pc, #404]	@ (8003698 <send_DHCP_DISCOVER+0x384>)
 8003504:	681c      	ldr	r4, [r3, #0]
 8003506:	88bb      	ldrh	r3, [r7, #4]
 8003508:	1c59      	adds	r1, r3, #1
 800350a:	80b9      	strh	r1, [r7, #4]
 800350c:	461d      	mov	r5, r3
 800350e:	4610      	mov	r0, r2
 8003510:	f001 fa1a 	bl	8004948 <NibbleToHex>
 8003514:	4603      	mov	r3, r0
 8003516:	461a      	mov	r2, r3
 8003518:	1963      	adds	r3, r4, r5
 800351a:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[4]);
 800351e:	4b60      	ldr	r3, [pc, #384]	@ (80036a0 <send_DHCP_DISCOVER+0x38c>)
 8003520:	791a      	ldrb	r2, [r3, #4]
 8003522:	4b5d      	ldr	r3, [pc, #372]	@ (8003698 <send_DHCP_DISCOVER+0x384>)
 8003524:	681c      	ldr	r4, [r3, #0]
 8003526:	88bb      	ldrh	r3, [r7, #4]
 8003528:	1c59      	adds	r1, r3, #1
 800352a:	80b9      	strh	r1, [r7, #4]
 800352c:	461d      	mov	r5, r3
 800352e:	4610      	mov	r0, r2
 8003530:	f001 fa0a 	bl	8004948 <NibbleToHex>
 8003534:	4603      	mov	r3, r0
 8003536:	461a      	mov	r2, r3
 8003538:	1963      	adds	r3, r4, r5
 800353a:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[5] >> 4); 
 800353e:	4b58      	ldr	r3, [pc, #352]	@ (80036a0 <send_DHCP_DISCOVER+0x38c>)
 8003540:	795b      	ldrb	r3, [r3, #5]
 8003542:	091b      	lsrs	r3, r3, #4
 8003544:	b2da      	uxtb	r2, r3
 8003546:	4b54      	ldr	r3, [pc, #336]	@ (8003698 <send_DHCP_DISCOVER+0x384>)
 8003548:	681c      	ldr	r4, [r3, #0]
 800354a:	88bb      	ldrh	r3, [r7, #4]
 800354c:	1c59      	adds	r1, r3, #1
 800354e:	80b9      	strh	r1, [r7, #4]
 8003550:	461d      	mov	r5, r3
 8003552:	4610      	mov	r0, r2
 8003554:	f001 f9f8 	bl	8004948 <NibbleToHex>
 8003558:	4603      	mov	r3, r0
 800355a:	461a      	mov	r2, r3
 800355c:	1963      	adds	r3, r4, r5
 800355e:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[5]);
 8003562:	4b4f      	ldr	r3, [pc, #316]	@ (80036a0 <send_DHCP_DISCOVER+0x38c>)
 8003564:	795a      	ldrb	r2, [r3, #5]
 8003566:	4b4c      	ldr	r3, [pc, #304]	@ (8003698 <send_DHCP_DISCOVER+0x384>)
 8003568:	681c      	ldr	r4, [r3, #0]
 800356a:	88bb      	ldrh	r3, [r7, #4]
 800356c:	1c59      	adds	r1, r3, #1
 800356e:	80b9      	strh	r1, [r7, #4]
 8003570:	461d      	mov	r5, r3
 8003572:	4610      	mov	r0, r2
 8003574:	f001 f9e8 	bl	8004948 <NibbleToHex>
 8003578:	4603      	mov	r3, r0
 800357a:	461a      	mov	r2, r3
 800357c:	1963      	adds	r3, r4, r5
 800357e:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k - (i+6+1)] = i+6; // length of hostname
 8003582:	88fb      	ldrh	r3, [r7, #6]
 8003584:	b2d9      	uxtb	r1, r3
 8003586:	4b44      	ldr	r3, [pc, #272]	@ (8003698 <send_DHCP_DISCOVER+0x384>)
 8003588:	681a      	ldr	r2, [r3, #0]
 800358a:	88b8      	ldrh	r0, [r7, #4]
 800358c:	88fb      	ldrh	r3, [r7, #6]
 800358e:	3307      	adds	r3, #7
 8003590:	1ac3      	subs	r3, r0, r3
 8003592:	3106      	adds	r1, #6
 8003594:	b2c9      	uxtb	r1, r1
 8003596:	4413      	add	r3, r2
 8003598:	460a      	mov	r2, r1
 800359a:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec

	pDHCPMSG->OPT[k++] = dhcpParamRequest;
 800359e:	4b3e      	ldr	r3, [pc, #248]	@ (8003698 <send_DHCP_DISCOVER+0x384>)
 80035a0:	681a      	ldr	r2, [r3, #0]
 80035a2:	88bb      	ldrh	r3, [r7, #4]
 80035a4:	1c59      	adds	r1, r3, #1
 80035a6:	80b9      	strh	r1, [r7, #4]
 80035a8:	4413      	add	r3, r2
 80035aa:	2237      	movs	r2, #55	@ 0x37
 80035ac:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = 0x06;	// length of request
 80035b0:	4b39      	ldr	r3, [pc, #228]	@ (8003698 <send_DHCP_DISCOVER+0x384>)
 80035b2:	681a      	ldr	r2, [r3, #0]
 80035b4:	88bb      	ldrh	r3, [r7, #4]
 80035b6:	1c59      	adds	r1, r3, #1
 80035b8:	80b9      	strh	r1, [r7, #4]
 80035ba:	4413      	add	r3, r2
 80035bc:	2206      	movs	r2, #6
 80035be:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = subnetMask;
 80035c2:	4b35      	ldr	r3, [pc, #212]	@ (8003698 <send_DHCP_DISCOVER+0x384>)
 80035c4:	681a      	ldr	r2, [r3, #0]
 80035c6:	88bb      	ldrh	r3, [r7, #4]
 80035c8:	1c59      	adds	r1, r3, #1
 80035ca:	80b9      	strh	r1, [r7, #4]
 80035cc:	4413      	add	r3, r2
 80035ce:	2201      	movs	r2, #1
 80035d0:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = routersOnSubnet;
 80035d4:	4b30      	ldr	r3, [pc, #192]	@ (8003698 <send_DHCP_DISCOVER+0x384>)
 80035d6:	681a      	ldr	r2, [r3, #0]
 80035d8:	88bb      	ldrh	r3, [r7, #4]
 80035da:	1c59      	adds	r1, r3, #1
 80035dc:	80b9      	strh	r1, [r7, #4]
 80035de:	4413      	add	r3, r2
 80035e0:	2203      	movs	r2, #3
 80035e2:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = dns;
 80035e6:	4b2c      	ldr	r3, [pc, #176]	@ (8003698 <send_DHCP_DISCOVER+0x384>)
 80035e8:	681a      	ldr	r2, [r3, #0]
 80035ea:	88bb      	ldrh	r3, [r7, #4]
 80035ec:	1c59      	adds	r1, r3, #1
 80035ee:	80b9      	strh	r1, [r7, #4]
 80035f0:	4413      	add	r3, r2
 80035f2:	2206      	movs	r2, #6
 80035f4:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = domainName;
 80035f8:	4b27      	ldr	r3, [pc, #156]	@ (8003698 <send_DHCP_DISCOVER+0x384>)
 80035fa:	681a      	ldr	r2, [r3, #0]
 80035fc:	88bb      	ldrh	r3, [r7, #4]
 80035fe:	1c59      	adds	r1, r3, #1
 8003600:	80b9      	strh	r1, [r7, #4]
 8003602:	4413      	add	r3, r2
 8003604:	220f      	movs	r2, #15
 8003606:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = dhcpT1value;
 800360a:	4b23      	ldr	r3, [pc, #140]	@ (8003698 <send_DHCP_DISCOVER+0x384>)
 800360c:	681a      	ldr	r2, [r3, #0]
 800360e:	88bb      	ldrh	r3, [r7, #4]
 8003610:	1c59      	adds	r1, r3, #1
 8003612:	80b9      	strh	r1, [r7, #4]
 8003614:	4413      	add	r3, r2
 8003616:	223a      	movs	r2, #58	@ 0x3a
 8003618:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = dhcpT2value;
 800361c:	4b1e      	ldr	r3, [pc, #120]	@ (8003698 <send_DHCP_DISCOVER+0x384>)
 800361e:	681a      	ldr	r2, [r3, #0]
 8003620:	88bb      	ldrh	r3, [r7, #4]
 8003622:	1c59      	adds	r1, r3, #1
 8003624:	80b9      	strh	r1, [r7, #4]
 8003626:	4413      	add	r3, r2
 8003628:	223b      	movs	r2, #59	@ 0x3b
 800362a:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = endOption;
 800362e:	4b1a      	ldr	r3, [pc, #104]	@ (8003698 <send_DHCP_DISCOVER+0x384>)
 8003630:	681a      	ldr	r2, [r3, #0]
 8003632:	88bb      	ldrh	r3, [r7, #4]
 8003634:	1c59      	adds	r1, r3, #1
 8003636:	80b9      	strh	r1, [r7, #4]
 8003638:	4413      	add	r3, r2
 800363a:	22ff      	movs	r2, #255	@ 0xff
 800363c:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec

	for (i = k; i < OPT_SIZE; i++) pDHCPMSG->OPT[i] = 0;
 8003640:	88bb      	ldrh	r3, [r7, #4]
 8003642:	80fb      	strh	r3, [r7, #6]
 8003644:	e009      	b.n	800365a <send_DHCP_DISCOVER+0x346>
 8003646:	4b14      	ldr	r3, [pc, #80]	@ (8003698 <send_DHCP_DISCOVER+0x384>)
 8003648:	681a      	ldr	r2, [r3, #0]
 800364a:	88fb      	ldrh	r3, [r7, #6]
 800364c:	4413      	add	r3, r2
 800364e:	2200      	movs	r2, #0
 8003650:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
 8003654:	88fb      	ldrh	r3, [r7, #6]
 8003656:	3301      	adds	r3, #1
 8003658:	80fb      	strh	r3, [r7, #6]
 800365a:	88fb      	ldrh	r3, [r7, #6]
 800365c:	f5b3 7f9c 	cmp.w	r3, #312	@ 0x138
 8003660:	d3f1      	bcc.n	8003646 <send_DHCP_DISCOVER+0x332>

	// send broadcasting packet
	ip[0] = 255;
 8003662:	23ff      	movs	r3, #255	@ 0xff
 8003664:	703b      	strb	r3, [r7, #0]
	ip[1] = 255;
 8003666:	23ff      	movs	r3, #255	@ 0xff
 8003668:	707b      	strb	r3, [r7, #1]
	ip[2] = 255;
 800366a:	23ff      	movs	r3, #255	@ 0xff
 800366c:	70bb      	strb	r3, [r7, #2]
	ip[3] = 255;
 800366e:	23ff      	movs	r3, #255	@ 0xff
 8003670:	70fb      	strb	r3, [r7, #3]

#ifdef _DHCP_DEBUG_
	printf("> Send DHCP_DISCOVER\r\n");
 8003672:	480c      	ldr	r0, [pc, #48]	@ (80036a4 <send_DHCP_DISCOVER+0x390>)
 8003674:	f00b fa56 	bl	800eb24 <puts>
#endif

	sendto(DHCP_SOCKET, (uint8_t *)pDHCPMSG, RIP_MSG_SIZE, ip, DHCP_SERVER_PORT);
 8003678:	4b0b      	ldr	r3, [pc, #44]	@ (80036a8 <send_DHCP_DISCOVER+0x394>)
 800367a:	7818      	ldrb	r0, [r3, #0]
 800367c:	4b06      	ldr	r3, [pc, #24]	@ (8003698 <send_DHCP_DISCOVER+0x384>)
 800367e:	6819      	ldr	r1, [r3, #0]
 8003680:	463b      	mov	r3, r7
 8003682:	2243      	movs	r2, #67	@ 0x43
 8003684:	9200      	str	r2, [sp, #0]
 8003686:	f44f 7209 	mov.w	r2, #548	@ 0x224
 800368a:	f004 fa6d 	bl	8007b68 <sendto>
}
 800368e:	bf00      	nop
 8003690:	3708      	adds	r7, #8
 8003692:	46bd      	mov	sp, r7
 8003694:	bdb0      	pop	{r4, r5, r7, pc}
 8003696:	bf00      	nop
 8003698:	20000f74 	.word	0x20000f74
 800369c:	2000009c 	.word	0x2000009c
 80036a0:	20000f78 	.word	0x20000f78
 80036a4:	08010de4 	.word	0x08010de4
 80036a8:	20000f49 	.word	0x20000f49

080036ac <send_DHCP_REQUEST>:

/* SEND DHCP REQUEST */
void send_DHCP_REQUEST(void)
{
 80036ac:	b5b0      	push	{r4, r5, r7, lr}
 80036ae:	b086      	sub	sp, #24
 80036b0:	af02      	add	r7, sp, #8
	int i;
	uint8_t ip[4];
	uint16_t k = 0;
 80036b2:	2300      	movs	r3, #0
 80036b4:	817b      	strh	r3, [r7, #10]

   makeDHCPMSG();
 80036b6:	f7ff fd37 	bl	8003128 <makeDHCPMSG>

   if(dhcp_state == STATE_DHCP_LEASED || dhcp_state == STATE_DHCP_REREQUEST)
 80036ba:	4b1b      	ldr	r3, [pc, #108]	@ (8003728 <send_DHCP_REQUEST+0x7c>)
 80036bc:	f993 3000 	ldrsb.w	r3, [r3]
 80036c0:	2b03      	cmp	r3, #3
 80036c2:	d004      	beq.n	80036ce <send_DHCP_REQUEST+0x22>
 80036c4:	4b18      	ldr	r3, [pc, #96]	@ (8003728 <send_DHCP_REQUEST+0x7c>)
 80036c6:	f993 3000 	ldrsb.w	r3, [r3]
 80036ca:	2b04      	cmp	r3, #4
 80036cc:	d134      	bne.n	8003738 <send_DHCP_REQUEST+0x8c>
   {
   	*((uint8_t*)(&pDHCPMSG->flags))   = ((DHCP_FLAGSUNICAST & 0xFF00)>> 8);
 80036ce:	4b17      	ldr	r3, [pc, #92]	@ (800372c <send_DHCP_REQUEST+0x80>)
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	330a      	adds	r3, #10
 80036d4:	2200      	movs	r2, #0
 80036d6:	701a      	strb	r2, [r3, #0]
   	*((uint8_t*)(&pDHCPMSG->flags)+1) = (DHCP_FLAGSUNICAST & 0x00FF);
 80036d8:	4b14      	ldr	r3, [pc, #80]	@ (800372c <send_DHCP_REQUEST+0x80>)
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	330a      	adds	r3, #10
 80036de:	3301      	adds	r3, #1
 80036e0:	2200      	movs	r2, #0
 80036e2:	701a      	strb	r2, [r3, #0]
   	pDHCPMSG->ciaddr[0] = DHCP_allocated_ip[0];
 80036e4:	4b11      	ldr	r3, [pc, #68]	@ (800372c <send_DHCP_REQUEST+0x80>)
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	4a11      	ldr	r2, [pc, #68]	@ (8003730 <send_DHCP_REQUEST+0x84>)
 80036ea:	7812      	ldrb	r2, [r2, #0]
 80036ec:	731a      	strb	r2, [r3, #12]
   	pDHCPMSG->ciaddr[1] = DHCP_allocated_ip[1];
 80036ee:	4b0f      	ldr	r3, [pc, #60]	@ (800372c <send_DHCP_REQUEST+0x80>)
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	4a0f      	ldr	r2, [pc, #60]	@ (8003730 <send_DHCP_REQUEST+0x84>)
 80036f4:	7852      	ldrb	r2, [r2, #1]
 80036f6:	735a      	strb	r2, [r3, #13]
   	pDHCPMSG->ciaddr[2] = DHCP_allocated_ip[2];
 80036f8:	4b0c      	ldr	r3, [pc, #48]	@ (800372c <send_DHCP_REQUEST+0x80>)
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	4a0c      	ldr	r2, [pc, #48]	@ (8003730 <send_DHCP_REQUEST+0x84>)
 80036fe:	7892      	ldrb	r2, [r2, #2]
 8003700:	739a      	strb	r2, [r3, #14]
   	pDHCPMSG->ciaddr[3] = DHCP_allocated_ip[3];
 8003702:	4b0a      	ldr	r3, [pc, #40]	@ (800372c <send_DHCP_REQUEST+0x80>)
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	4a0a      	ldr	r2, [pc, #40]	@ (8003730 <send_DHCP_REQUEST+0x84>)
 8003708:	78d2      	ldrb	r2, [r2, #3]
 800370a:	73da      	strb	r2, [r3, #15]
   	ip[0] = DHCP_SIP[0];
 800370c:	4b09      	ldr	r3, [pc, #36]	@ (8003734 <send_DHCP_REQUEST+0x88>)
 800370e:	781b      	ldrb	r3, [r3, #0]
 8003710:	713b      	strb	r3, [r7, #4]
   	ip[1] = DHCP_SIP[1];
 8003712:	4b08      	ldr	r3, [pc, #32]	@ (8003734 <send_DHCP_REQUEST+0x88>)
 8003714:	785b      	ldrb	r3, [r3, #1]
 8003716:	717b      	strb	r3, [r7, #5]
   	ip[2] = DHCP_SIP[2];
 8003718:	4b06      	ldr	r3, [pc, #24]	@ (8003734 <send_DHCP_REQUEST+0x88>)
 800371a:	789b      	ldrb	r3, [r3, #2]
 800371c:	71bb      	strb	r3, [r7, #6]
   	ip[3] = DHCP_SIP[3];   	   	   	
 800371e:	4b05      	ldr	r3, [pc, #20]	@ (8003734 <send_DHCP_REQUEST+0x88>)
 8003720:	78db      	ldrb	r3, [r3, #3]
 8003722:	71fb      	strb	r3, [r7, #7]
 8003724:	e010      	b.n	8003748 <send_DHCP_REQUEST+0x9c>
 8003726:	bf00      	nop
 8003728:	20000f68 	.word	0x20000f68
 800372c:	20000f74 	.word	0x20000f74
 8003730:	20000f58 	.word	0x20000f58
 8003734:	20000f4c 	.word	0x20000f4c
   }
   else
   {
   	ip[0] = 255;
 8003738:	23ff      	movs	r3, #255	@ 0xff
 800373a:	713b      	strb	r3, [r7, #4]
   	ip[1] = 255;
 800373c:	23ff      	movs	r3, #255	@ 0xff
 800373e:	717b      	strb	r3, [r7, #5]
   	ip[2] = 255;
 8003740:	23ff      	movs	r3, #255	@ 0xff
 8003742:	71bb      	strb	r3, [r7, #6]
   	ip[3] = 255;   	   	   	
 8003744:	23ff      	movs	r3, #255	@ 0xff
 8003746:	71fb      	strb	r3, [r7, #7]
   }
   
   k = 4;      // because MAGIC_COOKIE already made by makeDHCPMSG()
 8003748:	2304      	movs	r3, #4
 800374a:	817b      	strh	r3, [r7, #10]
	
	// Option Request Param.
	pDHCPMSG->OPT[k++] = dhcpMessageType;
 800374c:	4b8d      	ldr	r3, [pc, #564]	@ (8003984 <send_DHCP_REQUEST+0x2d8>)
 800374e:	681a      	ldr	r2, [r3, #0]
 8003750:	897b      	ldrh	r3, [r7, #10]
 8003752:	1c59      	adds	r1, r3, #1
 8003754:	8179      	strh	r1, [r7, #10]
 8003756:	4413      	add	r3, r2
 8003758:	2235      	movs	r2, #53	@ 0x35
 800375a:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = 0x01;
 800375e:	4b89      	ldr	r3, [pc, #548]	@ (8003984 <send_DHCP_REQUEST+0x2d8>)
 8003760:	681a      	ldr	r2, [r3, #0]
 8003762:	897b      	ldrh	r3, [r7, #10]
 8003764:	1c59      	adds	r1, r3, #1
 8003766:	8179      	strh	r1, [r7, #10]
 8003768:	4413      	add	r3, r2
 800376a:	2201      	movs	r2, #1
 800376c:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_REQUEST;
 8003770:	4b84      	ldr	r3, [pc, #528]	@ (8003984 <send_DHCP_REQUEST+0x2d8>)
 8003772:	681a      	ldr	r2, [r3, #0]
 8003774:	897b      	ldrh	r3, [r7, #10]
 8003776:	1c59      	adds	r1, r3, #1
 8003778:	8179      	strh	r1, [r7, #10]
 800377a:	4413      	add	r3, r2
 800377c:	2203      	movs	r2, #3
 800377e:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec

	pDHCPMSG->OPT[k++] = dhcpClientIdentifier;
 8003782:	4b80      	ldr	r3, [pc, #512]	@ (8003984 <send_DHCP_REQUEST+0x2d8>)
 8003784:	681a      	ldr	r2, [r3, #0]
 8003786:	897b      	ldrh	r3, [r7, #10]
 8003788:	1c59      	adds	r1, r3, #1
 800378a:	8179      	strh	r1, [r7, #10]
 800378c:	4413      	add	r3, r2
 800378e:	223d      	movs	r2, #61	@ 0x3d
 8003790:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = 0x07;
 8003794:	4b7b      	ldr	r3, [pc, #492]	@ (8003984 <send_DHCP_REQUEST+0x2d8>)
 8003796:	681a      	ldr	r2, [r3, #0]
 8003798:	897b      	ldrh	r3, [r7, #10]
 800379a:	1c59      	adds	r1, r3, #1
 800379c:	8179      	strh	r1, [r7, #10]
 800379e:	4413      	add	r3, r2
 80037a0:	2207      	movs	r2, #7
 80037a2:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = 0x01;
 80037a6:	4b77      	ldr	r3, [pc, #476]	@ (8003984 <send_DHCP_REQUEST+0x2d8>)
 80037a8:	681a      	ldr	r2, [r3, #0]
 80037aa:	897b      	ldrh	r3, [r7, #10]
 80037ac:	1c59      	adds	r1, r3, #1
 80037ae:	8179      	strh	r1, [r7, #10]
 80037b0:	4413      	add	r3, r2
 80037b2:	2201      	movs	r2, #1
 80037b4:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[0];
 80037b8:	4b72      	ldr	r3, [pc, #456]	@ (8003984 <send_DHCP_REQUEST+0x2d8>)
 80037ba:	681a      	ldr	r2, [r3, #0]
 80037bc:	897b      	ldrh	r3, [r7, #10]
 80037be:	1c59      	adds	r1, r3, #1
 80037c0:	8179      	strh	r1, [r7, #10]
 80037c2:	4618      	mov	r0, r3
 80037c4:	4b70      	ldr	r3, [pc, #448]	@ (8003988 <send_DHCP_REQUEST+0x2dc>)
 80037c6:	7819      	ldrb	r1, [r3, #0]
 80037c8:	1813      	adds	r3, r2, r0
 80037ca:	460a      	mov	r2, r1
 80037cc:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[1];
 80037d0:	4b6c      	ldr	r3, [pc, #432]	@ (8003984 <send_DHCP_REQUEST+0x2d8>)
 80037d2:	681a      	ldr	r2, [r3, #0]
 80037d4:	897b      	ldrh	r3, [r7, #10]
 80037d6:	1c59      	adds	r1, r3, #1
 80037d8:	8179      	strh	r1, [r7, #10]
 80037da:	4618      	mov	r0, r3
 80037dc:	4b6a      	ldr	r3, [pc, #424]	@ (8003988 <send_DHCP_REQUEST+0x2dc>)
 80037de:	7859      	ldrb	r1, [r3, #1]
 80037e0:	1813      	adds	r3, r2, r0
 80037e2:	460a      	mov	r2, r1
 80037e4:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[2];
 80037e8:	4b66      	ldr	r3, [pc, #408]	@ (8003984 <send_DHCP_REQUEST+0x2d8>)
 80037ea:	681a      	ldr	r2, [r3, #0]
 80037ec:	897b      	ldrh	r3, [r7, #10]
 80037ee:	1c59      	adds	r1, r3, #1
 80037f0:	8179      	strh	r1, [r7, #10]
 80037f2:	4618      	mov	r0, r3
 80037f4:	4b64      	ldr	r3, [pc, #400]	@ (8003988 <send_DHCP_REQUEST+0x2dc>)
 80037f6:	7899      	ldrb	r1, [r3, #2]
 80037f8:	1813      	adds	r3, r2, r0
 80037fa:	460a      	mov	r2, r1
 80037fc:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[3];
 8003800:	4b60      	ldr	r3, [pc, #384]	@ (8003984 <send_DHCP_REQUEST+0x2d8>)
 8003802:	681a      	ldr	r2, [r3, #0]
 8003804:	897b      	ldrh	r3, [r7, #10]
 8003806:	1c59      	adds	r1, r3, #1
 8003808:	8179      	strh	r1, [r7, #10]
 800380a:	4618      	mov	r0, r3
 800380c:	4b5e      	ldr	r3, [pc, #376]	@ (8003988 <send_DHCP_REQUEST+0x2dc>)
 800380e:	78d9      	ldrb	r1, [r3, #3]
 8003810:	1813      	adds	r3, r2, r0
 8003812:	460a      	mov	r2, r1
 8003814:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[4];
 8003818:	4b5a      	ldr	r3, [pc, #360]	@ (8003984 <send_DHCP_REQUEST+0x2d8>)
 800381a:	681a      	ldr	r2, [r3, #0]
 800381c:	897b      	ldrh	r3, [r7, #10]
 800381e:	1c59      	adds	r1, r3, #1
 8003820:	8179      	strh	r1, [r7, #10]
 8003822:	4618      	mov	r0, r3
 8003824:	4b58      	ldr	r3, [pc, #352]	@ (8003988 <send_DHCP_REQUEST+0x2dc>)
 8003826:	7919      	ldrb	r1, [r3, #4]
 8003828:	1813      	adds	r3, r2, r0
 800382a:	460a      	mov	r2, r1
 800382c:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[5];
 8003830:	4b54      	ldr	r3, [pc, #336]	@ (8003984 <send_DHCP_REQUEST+0x2d8>)
 8003832:	681a      	ldr	r2, [r3, #0]
 8003834:	897b      	ldrh	r3, [r7, #10]
 8003836:	1c59      	adds	r1, r3, #1
 8003838:	8179      	strh	r1, [r7, #10]
 800383a:	4618      	mov	r0, r3
 800383c:	4b52      	ldr	r3, [pc, #328]	@ (8003988 <send_DHCP_REQUEST+0x2dc>)
 800383e:	7959      	ldrb	r1, [r3, #5]
 8003840:	1813      	adds	r3, r2, r0
 8003842:	460a      	mov	r2, r1
 8003844:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec

   if(ip[3] == 255)  // if(dchp_state == STATE_DHCP_LEASED || dchp_state == DHCP_REREQUEST_STATE)
 8003848:	79fb      	ldrb	r3, [r7, #7]
 800384a:	2bff      	cmp	r3, #255	@ 0xff
 800384c:	f040 8084 	bne.w	8003958 <send_DHCP_REQUEST+0x2ac>
   {
		pDHCPMSG->OPT[k++] = dhcpRequestedIPaddr;
 8003850:	4b4c      	ldr	r3, [pc, #304]	@ (8003984 <send_DHCP_REQUEST+0x2d8>)
 8003852:	681a      	ldr	r2, [r3, #0]
 8003854:	897b      	ldrh	r3, [r7, #10]
 8003856:	1c59      	adds	r1, r3, #1
 8003858:	8179      	strh	r1, [r7, #10]
 800385a:	4413      	add	r3, r2
 800385c:	2232      	movs	r2, #50	@ 0x32
 800385e:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
		pDHCPMSG->OPT[k++] = 0x04;
 8003862:	4b48      	ldr	r3, [pc, #288]	@ (8003984 <send_DHCP_REQUEST+0x2d8>)
 8003864:	681a      	ldr	r2, [r3, #0]
 8003866:	897b      	ldrh	r3, [r7, #10]
 8003868:	1c59      	adds	r1, r3, #1
 800386a:	8179      	strh	r1, [r7, #10]
 800386c:	4413      	add	r3, r2
 800386e:	2204      	movs	r2, #4
 8003870:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
		pDHCPMSG->OPT[k++] = DHCP_allocated_ip[0];
 8003874:	4b43      	ldr	r3, [pc, #268]	@ (8003984 <send_DHCP_REQUEST+0x2d8>)
 8003876:	681a      	ldr	r2, [r3, #0]
 8003878:	897b      	ldrh	r3, [r7, #10]
 800387a:	1c59      	adds	r1, r3, #1
 800387c:	8179      	strh	r1, [r7, #10]
 800387e:	4618      	mov	r0, r3
 8003880:	4b42      	ldr	r3, [pc, #264]	@ (800398c <send_DHCP_REQUEST+0x2e0>)
 8003882:	7819      	ldrb	r1, [r3, #0]
 8003884:	1813      	adds	r3, r2, r0
 8003886:	460a      	mov	r2, r1
 8003888:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
		pDHCPMSG->OPT[k++] = DHCP_allocated_ip[1];
 800388c:	4b3d      	ldr	r3, [pc, #244]	@ (8003984 <send_DHCP_REQUEST+0x2d8>)
 800388e:	681a      	ldr	r2, [r3, #0]
 8003890:	897b      	ldrh	r3, [r7, #10]
 8003892:	1c59      	adds	r1, r3, #1
 8003894:	8179      	strh	r1, [r7, #10]
 8003896:	4618      	mov	r0, r3
 8003898:	4b3c      	ldr	r3, [pc, #240]	@ (800398c <send_DHCP_REQUEST+0x2e0>)
 800389a:	7859      	ldrb	r1, [r3, #1]
 800389c:	1813      	adds	r3, r2, r0
 800389e:	460a      	mov	r2, r1
 80038a0:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
		pDHCPMSG->OPT[k++] = DHCP_allocated_ip[2];
 80038a4:	4b37      	ldr	r3, [pc, #220]	@ (8003984 <send_DHCP_REQUEST+0x2d8>)
 80038a6:	681a      	ldr	r2, [r3, #0]
 80038a8:	897b      	ldrh	r3, [r7, #10]
 80038aa:	1c59      	adds	r1, r3, #1
 80038ac:	8179      	strh	r1, [r7, #10]
 80038ae:	4618      	mov	r0, r3
 80038b0:	4b36      	ldr	r3, [pc, #216]	@ (800398c <send_DHCP_REQUEST+0x2e0>)
 80038b2:	7899      	ldrb	r1, [r3, #2]
 80038b4:	1813      	adds	r3, r2, r0
 80038b6:	460a      	mov	r2, r1
 80038b8:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
		pDHCPMSG->OPT[k++] = DHCP_allocated_ip[3];
 80038bc:	4b31      	ldr	r3, [pc, #196]	@ (8003984 <send_DHCP_REQUEST+0x2d8>)
 80038be:	681a      	ldr	r2, [r3, #0]
 80038c0:	897b      	ldrh	r3, [r7, #10]
 80038c2:	1c59      	adds	r1, r3, #1
 80038c4:	8179      	strh	r1, [r7, #10]
 80038c6:	4618      	mov	r0, r3
 80038c8:	4b30      	ldr	r3, [pc, #192]	@ (800398c <send_DHCP_REQUEST+0x2e0>)
 80038ca:	78d9      	ldrb	r1, [r3, #3]
 80038cc:	1813      	adds	r3, r2, r0
 80038ce:	460a      	mov	r2, r1
 80038d0:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	
		pDHCPMSG->OPT[k++] = dhcpServerIdentifier;
 80038d4:	4b2b      	ldr	r3, [pc, #172]	@ (8003984 <send_DHCP_REQUEST+0x2d8>)
 80038d6:	681a      	ldr	r2, [r3, #0]
 80038d8:	897b      	ldrh	r3, [r7, #10]
 80038da:	1c59      	adds	r1, r3, #1
 80038dc:	8179      	strh	r1, [r7, #10]
 80038de:	4413      	add	r3, r2
 80038e0:	2236      	movs	r2, #54	@ 0x36
 80038e2:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
		pDHCPMSG->OPT[k++] = 0x04;
 80038e6:	4b27      	ldr	r3, [pc, #156]	@ (8003984 <send_DHCP_REQUEST+0x2d8>)
 80038e8:	681a      	ldr	r2, [r3, #0]
 80038ea:	897b      	ldrh	r3, [r7, #10]
 80038ec:	1c59      	adds	r1, r3, #1
 80038ee:	8179      	strh	r1, [r7, #10]
 80038f0:	4413      	add	r3, r2
 80038f2:	2204      	movs	r2, #4
 80038f4:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
		pDHCPMSG->OPT[k++] = DHCP_SIP[0];
 80038f8:	4b22      	ldr	r3, [pc, #136]	@ (8003984 <send_DHCP_REQUEST+0x2d8>)
 80038fa:	681a      	ldr	r2, [r3, #0]
 80038fc:	897b      	ldrh	r3, [r7, #10]
 80038fe:	1c59      	adds	r1, r3, #1
 8003900:	8179      	strh	r1, [r7, #10]
 8003902:	4618      	mov	r0, r3
 8003904:	4b22      	ldr	r3, [pc, #136]	@ (8003990 <send_DHCP_REQUEST+0x2e4>)
 8003906:	7819      	ldrb	r1, [r3, #0]
 8003908:	1813      	adds	r3, r2, r0
 800390a:	460a      	mov	r2, r1
 800390c:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
		pDHCPMSG->OPT[k++] = DHCP_SIP[1];
 8003910:	4b1c      	ldr	r3, [pc, #112]	@ (8003984 <send_DHCP_REQUEST+0x2d8>)
 8003912:	681a      	ldr	r2, [r3, #0]
 8003914:	897b      	ldrh	r3, [r7, #10]
 8003916:	1c59      	adds	r1, r3, #1
 8003918:	8179      	strh	r1, [r7, #10]
 800391a:	4618      	mov	r0, r3
 800391c:	4b1c      	ldr	r3, [pc, #112]	@ (8003990 <send_DHCP_REQUEST+0x2e4>)
 800391e:	7859      	ldrb	r1, [r3, #1]
 8003920:	1813      	adds	r3, r2, r0
 8003922:	460a      	mov	r2, r1
 8003924:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
		pDHCPMSG->OPT[k++] = DHCP_SIP[2];
 8003928:	4b16      	ldr	r3, [pc, #88]	@ (8003984 <send_DHCP_REQUEST+0x2d8>)
 800392a:	681a      	ldr	r2, [r3, #0]
 800392c:	897b      	ldrh	r3, [r7, #10]
 800392e:	1c59      	adds	r1, r3, #1
 8003930:	8179      	strh	r1, [r7, #10]
 8003932:	4618      	mov	r0, r3
 8003934:	4b16      	ldr	r3, [pc, #88]	@ (8003990 <send_DHCP_REQUEST+0x2e4>)
 8003936:	7899      	ldrb	r1, [r3, #2]
 8003938:	1813      	adds	r3, r2, r0
 800393a:	460a      	mov	r2, r1
 800393c:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
		pDHCPMSG->OPT[k++] = DHCP_SIP[3];
 8003940:	4b10      	ldr	r3, [pc, #64]	@ (8003984 <send_DHCP_REQUEST+0x2d8>)
 8003942:	681a      	ldr	r2, [r3, #0]
 8003944:	897b      	ldrh	r3, [r7, #10]
 8003946:	1c59      	adds	r1, r3, #1
 8003948:	8179      	strh	r1, [r7, #10]
 800394a:	4618      	mov	r0, r3
 800394c:	4b10      	ldr	r3, [pc, #64]	@ (8003990 <send_DHCP_REQUEST+0x2e4>)
 800394e:	78d9      	ldrb	r1, [r3, #3]
 8003950:	1813      	adds	r3, r2, r0
 8003952:	460a      	mov	r2, r1
 8003954:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	}

	// host name
	pDHCPMSG->OPT[k++] = hostName;
 8003958:	4b0a      	ldr	r3, [pc, #40]	@ (8003984 <send_DHCP_REQUEST+0x2d8>)
 800395a:	681a      	ldr	r2, [r3, #0]
 800395c:	897b      	ldrh	r3, [r7, #10]
 800395e:	1c59      	adds	r1, r3, #1
 8003960:	8179      	strh	r1, [r7, #10]
 8003962:	4413      	add	r3, r2
 8003964:	220c      	movs	r2, #12
 8003966:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = 0; // length of hostname
 800396a:	4b06      	ldr	r3, [pc, #24]	@ (8003984 <send_DHCP_REQUEST+0x2d8>)
 800396c:	681a      	ldr	r2, [r3, #0]
 800396e:	897b      	ldrh	r3, [r7, #10]
 8003970:	1c59      	adds	r1, r3, #1
 8003972:	8179      	strh	r1, [r7, #10]
 8003974:	4413      	add	r3, r2
 8003976:	2200      	movs	r2, #0
 8003978:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	for(i = 0 ; HOST_NAME[i] != 0; i++)
 800397c:	2300      	movs	r3, #0
 800397e:	60fb      	str	r3, [r7, #12]
 8003980:	e019      	b.n	80039b6 <send_DHCP_REQUEST+0x30a>
 8003982:	bf00      	nop
 8003984:	20000f74 	.word	0x20000f74
 8003988:	20000f78 	.word	0x20000f78
 800398c:	20000f58 	.word	0x20000f58
 8003990:	20000f4c 	.word	0x20000f4c
   	pDHCPMSG->OPT[k++] = HOST_NAME[i];
 8003994:	4b88      	ldr	r3, [pc, #544]	@ (8003bb8 <send_DHCP_REQUEST+0x50c>)
 8003996:	681a      	ldr	r2, [r3, #0]
 8003998:	897b      	ldrh	r3, [r7, #10]
 800399a:	1c59      	adds	r1, r3, #1
 800399c:	8179      	strh	r1, [r7, #10]
 800399e:	4618      	mov	r0, r3
 80039a0:	4986      	ldr	r1, [pc, #536]	@ (8003bbc <send_DHCP_REQUEST+0x510>)
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	440b      	add	r3, r1
 80039a6:	7819      	ldrb	r1, [r3, #0]
 80039a8:	1813      	adds	r3, r2, r0
 80039aa:	460a      	mov	r2, r1
 80039ac:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	for(i = 0 ; HOST_NAME[i] != 0; i++)
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	3301      	adds	r3, #1
 80039b4:	60fb      	str	r3, [r7, #12]
 80039b6:	4a81      	ldr	r2, [pc, #516]	@ (8003bbc <send_DHCP_REQUEST+0x510>)
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	4413      	add	r3, r2
 80039bc:	781b      	ldrb	r3, [r3, #0]
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d1e8      	bne.n	8003994 <send_DHCP_REQUEST+0x2e8>
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[3] >> 4); 
 80039c2:	4b7f      	ldr	r3, [pc, #508]	@ (8003bc0 <send_DHCP_REQUEST+0x514>)
 80039c4:	78db      	ldrb	r3, [r3, #3]
 80039c6:	091b      	lsrs	r3, r3, #4
 80039c8:	b2da      	uxtb	r2, r3
 80039ca:	4b7b      	ldr	r3, [pc, #492]	@ (8003bb8 <send_DHCP_REQUEST+0x50c>)
 80039cc:	681c      	ldr	r4, [r3, #0]
 80039ce:	897b      	ldrh	r3, [r7, #10]
 80039d0:	1c59      	adds	r1, r3, #1
 80039d2:	8179      	strh	r1, [r7, #10]
 80039d4:	461d      	mov	r5, r3
 80039d6:	4610      	mov	r0, r2
 80039d8:	f000 ffb6 	bl	8004948 <NibbleToHex>
 80039dc:	4603      	mov	r3, r0
 80039de:	461a      	mov	r2, r3
 80039e0:	1963      	adds	r3, r4, r5
 80039e2:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[3]);
 80039e6:	4b76      	ldr	r3, [pc, #472]	@ (8003bc0 <send_DHCP_REQUEST+0x514>)
 80039e8:	78da      	ldrb	r2, [r3, #3]
 80039ea:	4b73      	ldr	r3, [pc, #460]	@ (8003bb8 <send_DHCP_REQUEST+0x50c>)
 80039ec:	681c      	ldr	r4, [r3, #0]
 80039ee:	897b      	ldrh	r3, [r7, #10]
 80039f0:	1c59      	adds	r1, r3, #1
 80039f2:	8179      	strh	r1, [r7, #10]
 80039f4:	461d      	mov	r5, r3
 80039f6:	4610      	mov	r0, r2
 80039f8:	f000 ffa6 	bl	8004948 <NibbleToHex>
 80039fc:	4603      	mov	r3, r0
 80039fe:	461a      	mov	r2, r3
 8003a00:	1963      	adds	r3, r4, r5
 8003a02:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[4] >> 4); 
 8003a06:	4b6e      	ldr	r3, [pc, #440]	@ (8003bc0 <send_DHCP_REQUEST+0x514>)
 8003a08:	791b      	ldrb	r3, [r3, #4]
 8003a0a:	091b      	lsrs	r3, r3, #4
 8003a0c:	b2da      	uxtb	r2, r3
 8003a0e:	4b6a      	ldr	r3, [pc, #424]	@ (8003bb8 <send_DHCP_REQUEST+0x50c>)
 8003a10:	681c      	ldr	r4, [r3, #0]
 8003a12:	897b      	ldrh	r3, [r7, #10]
 8003a14:	1c59      	adds	r1, r3, #1
 8003a16:	8179      	strh	r1, [r7, #10]
 8003a18:	461d      	mov	r5, r3
 8003a1a:	4610      	mov	r0, r2
 8003a1c:	f000 ff94 	bl	8004948 <NibbleToHex>
 8003a20:	4603      	mov	r3, r0
 8003a22:	461a      	mov	r2, r3
 8003a24:	1963      	adds	r3, r4, r5
 8003a26:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[4]);
 8003a2a:	4b65      	ldr	r3, [pc, #404]	@ (8003bc0 <send_DHCP_REQUEST+0x514>)
 8003a2c:	791a      	ldrb	r2, [r3, #4]
 8003a2e:	4b62      	ldr	r3, [pc, #392]	@ (8003bb8 <send_DHCP_REQUEST+0x50c>)
 8003a30:	681c      	ldr	r4, [r3, #0]
 8003a32:	897b      	ldrh	r3, [r7, #10]
 8003a34:	1c59      	adds	r1, r3, #1
 8003a36:	8179      	strh	r1, [r7, #10]
 8003a38:	461d      	mov	r5, r3
 8003a3a:	4610      	mov	r0, r2
 8003a3c:	f000 ff84 	bl	8004948 <NibbleToHex>
 8003a40:	4603      	mov	r3, r0
 8003a42:	461a      	mov	r2, r3
 8003a44:	1963      	adds	r3, r4, r5
 8003a46:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[5] >> 4); 
 8003a4a:	4b5d      	ldr	r3, [pc, #372]	@ (8003bc0 <send_DHCP_REQUEST+0x514>)
 8003a4c:	795b      	ldrb	r3, [r3, #5]
 8003a4e:	091b      	lsrs	r3, r3, #4
 8003a50:	b2da      	uxtb	r2, r3
 8003a52:	4b59      	ldr	r3, [pc, #356]	@ (8003bb8 <send_DHCP_REQUEST+0x50c>)
 8003a54:	681c      	ldr	r4, [r3, #0]
 8003a56:	897b      	ldrh	r3, [r7, #10]
 8003a58:	1c59      	adds	r1, r3, #1
 8003a5a:	8179      	strh	r1, [r7, #10]
 8003a5c:	461d      	mov	r5, r3
 8003a5e:	4610      	mov	r0, r2
 8003a60:	f000 ff72 	bl	8004948 <NibbleToHex>
 8003a64:	4603      	mov	r3, r0
 8003a66:	461a      	mov	r2, r3
 8003a68:	1963      	adds	r3, r4, r5
 8003a6a:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[5]);
 8003a6e:	4b54      	ldr	r3, [pc, #336]	@ (8003bc0 <send_DHCP_REQUEST+0x514>)
 8003a70:	795a      	ldrb	r2, [r3, #5]
 8003a72:	4b51      	ldr	r3, [pc, #324]	@ (8003bb8 <send_DHCP_REQUEST+0x50c>)
 8003a74:	681c      	ldr	r4, [r3, #0]
 8003a76:	897b      	ldrh	r3, [r7, #10]
 8003a78:	1c59      	adds	r1, r3, #1
 8003a7a:	8179      	strh	r1, [r7, #10]
 8003a7c:	461d      	mov	r5, r3
 8003a7e:	4610      	mov	r0, r2
 8003a80:	f000 ff62 	bl	8004948 <NibbleToHex>
 8003a84:	4603      	mov	r3, r0
 8003a86:	461a      	mov	r2, r3
 8003a88:	1963      	adds	r3, r4, r5
 8003a8a:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k - (i+6+1)] = i+6; // length of hostname
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	b2d9      	uxtb	r1, r3
 8003a92:	4b49      	ldr	r3, [pc, #292]	@ (8003bb8 <send_DHCP_REQUEST+0x50c>)
 8003a94:	681a      	ldr	r2, [r3, #0]
 8003a96:	8978      	ldrh	r0, [r7, #10]
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	3307      	adds	r3, #7
 8003a9c:	1ac3      	subs	r3, r0, r3
 8003a9e:	3106      	adds	r1, #6
 8003aa0:	b2c9      	uxtb	r1, r1
 8003aa2:	4413      	add	r3, r2
 8003aa4:	460a      	mov	r2, r1
 8003aa6:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	
	pDHCPMSG->OPT[k++] = dhcpParamRequest;
 8003aaa:	4b43      	ldr	r3, [pc, #268]	@ (8003bb8 <send_DHCP_REQUEST+0x50c>)
 8003aac:	681a      	ldr	r2, [r3, #0]
 8003aae:	897b      	ldrh	r3, [r7, #10]
 8003ab0:	1c59      	adds	r1, r3, #1
 8003ab2:	8179      	strh	r1, [r7, #10]
 8003ab4:	4413      	add	r3, r2
 8003ab6:	2237      	movs	r2, #55	@ 0x37
 8003ab8:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = 0x08;
 8003abc:	4b3e      	ldr	r3, [pc, #248]	@ (8003bb8 <send_DHCP_REQUEST+0x50c>)
 8003abe:	681a      	ldr	r2, [r3, #0]
 8003ac0:	897b      	ldrh	r3, [r7, #10]
 8003ac2:	1c59      	adds	r1, r3, #1
 8003ac4:	8179      	strh	r1, [r7, #10]
 8003ac6:	4413      	add	r3, r2
 8003ac8:	2208      	movs	r2, #8
 8003aca:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = subnetMask;
 8003ace:	4b3a      	ldr	r3, [pc, #232]	@ (8003bb8 <send_DHCP_REQUEST+0x50c>)
 8003ad0:	681a      	ldr	r2, [r3, #0]
 8003ad2:	897b      	ldrh	r3, [r7, #10]
 8003ad4:	1c59      	adds	r1, r3, #1
 8003ad6:	8179      	strh	r1, [r7, #10]
 8003ad8:	4413      	add	r3, r2
 8003ada:	2201      	movs	r2, #1
 8003adc:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = routersOnSubnet;
 8003ae0:	4b35      	ldr	r3, [pc, #212]	@ (8003bb8 <send_DHCP_REQUEST+0x50c>)
 8003ae2:	681a      	ldr	r2, [r3, #0]
 8003ae4:	897b      	ldrh	r3, [r7, #10]
 8003ae6:	1c59      	adds	r1, r3, #1
 8003ae8:	8179      	strh	r1, [r7, #10]
 8003aea:	4413      	add	r3, r2
 8003aec:	2203      	movs	r2, #3
 8003aee:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = dns;
 8003af2:	4b31      	ldr	r3, [pc, #196]	@ (8003bb8 <send_DHCP_REQUEST+0x50c>)
 8003af4:	681a      	ldr	r2, [r3, #0]
 8003af6:	897b      	ldrh	r3, [r7, #10]
 8003af8:	1c59      	adds	r1, r3, #1
 8003afa:	8179      	strh	r1, [r7, #10]
 8003afc:	4413      	add	r3, r2
 8003afe:	2206      	movs	r2, #6
 8003b00:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = domainName;
 8003b04:	4b2c      	ldr	r3, [pc, #176]	@ (8003bb8 <send_DHCP_REQUEST+0x50c>)
 8003b06:	681a      	ldr	r2, [r3, #0]
 8003b08:	897b      	ldrh	r3, [r7, #10]
 8003b0a:	1c59      	adds	r1, r3, #1
 8003b0c:	8179      	strh	r1, [r7, #10]
 8003b0e:	4413      	add	r3, r2
 8003b10:	220f      	movs	r2, #15
 8003b12:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = dhcpT1value;
 8003b16:	4b28      	ldr	r3, [pc, #160]	@ (8003bb8 <send_DHCP_REQUEST+0x50c>)
 8003b18:	681a      	ldr	r2, [r3, #0]
 8003b1a:	897b      	ldrh	r3, [r7, #10]
 8003b1c:	1c59      	adds	r1, r3, #1
 8003b1e:	8179      	strh	r1, [r7, #10]
 8003b20:	4413      	add	r3, r2
 8003b22:	223a      	movs	r2, #58	@ 0x3a
 8003b24:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = dhcpT2value;
 8003b28:	4b23      	ldr	r3, [pc, #140]	@ (8003bb8 <send_DHCP_REQUEST+0x50c>)
 8003b2a:	681a      	ldr	r2, [r3, #0]
 8003b2c:	897b      	ldrh	r3, [r7, #10]
 8003b2e:	1c59      	adds	r1, r3, #1
 8003b30:	8179      	strh	r1, [r7, #10]
 8003b32:	4413      	add	r3, r2
 8003b34:	223b      	movs	r2, #59	@ 0x3b
 8003b36:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = performRouterDiscovery;
 8003b3a:	4b1f      	ldr	r3, [pc, #124]	@ (8003bb8 <send_DHCP_REQUEST+0x50c>)
 8003b3c:	681a      	ldr	r2, [r3, #0]
 8003b3e:	897b      	ldrh	r3, [r7, #10]
 8003b40:	1c59      	adds	r1, r3, #1
 8003b42:	8179      	strh	r1, [r7, #10]
 8003b44:	4413      	add	r3, r2
 8003b46:	221f      	movs	r2, #31
 8003b48:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = staticRoute;
 8003b4c:	4b1a      	ldr	r3, [pc, #104]	@ (8003bb8 <send_DHCP_REQUEST+0x50c>)
 8003b4e:	681a      	ldr	r2, [r3, #0]
 8003b50:	897b      	ldrh	r3, [r7, #10]
 8003b52:	1c59      	adds	r1, r3, #1
 8003b54:	8179      	strh	r1, [r7, #10]
 8003b56:	4413      	add	r3, r2
 8003b58:	2221      	movs	r2, #33	@ 0x21
 8003b5a:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = endOption;
 8003b5e:	4b16      	ldr	r3, [pc, #88]	@ (8003bb8 <send_DHCP_REQUEST+0x50c>)
 8003b60:	681a      	ldr	r2, [r3, #0]
 8003b62:	897b      	ldrh	r3, [r7, #10]
 8003b64:	1c59      	adds	r1, r3, #1
 8003b66:	8179      	strh	r1, [r7, #10]
 8003b68:	4413      	add	r3, r2
 8003b6a:	22ff      	movs	r2, #255	@ 0xff
 8003b6c:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec

	for (i = k; i < OPT_SIZE; i++) pDHCPMSG->OPT[i] = 0;
 8003b70:	897b      	ldrh	r3, [r7, #10]
 8003b72:	60fb      	str	r3, [r7, #12]
 8003b74:	e009      	b.n	8003b8a <send_DHCP_REQUEST+0x4de>
 8003b76:	4b10      	ldr	r3, [pc, #64]	@ (8003bb8 <send_DHCP_REQUEST+0x50c>)
 8003b78:	681a      	ldr	r2, [r3, #0]
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	4413      	add	r3, r2
 8003b7e:	33ec      	adds	r3, #236	@ 0xec
 8003b80:	2200      	movs	r2, #0
 8003b82:	701a      	strb	r2, [r3, #0]
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	3301      	adds	r3, #1
 8003b88:	60fb      	str	r3, [r7, #12]
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	f5b3 7f9c 	cmp.w	r3, #312	@ 0x138
 8003b90:	dbf1      	blt.n	8003b76 <send_DHCP_REQUEST+0x4ca>

#ifdef _DHCP_DEBUG_
	printf("> Send DHCP_REQUEST\r\n");
 8003b92:	480c      	ldr	r0, [pc, #48]	@ (8003bc4 <send_DHCP_REQUEST+0x518>)
 8003b94:	f00a ffc6 	bl	800eb24 <puts>
#endif
	
	sendto(DHCP_SOCKET, (uint8_t *)pDHCPMSG, RIP_MSG_SIZE, ip, DHCP_SERVER_PORT);
 8003b98:	4b0b      	ldr	r3, [pc, #44]	@ (8003bc8 <send_DHCP_REQUEST+0x51c>)
 8003b9a:	7818      	ldrb	r0, [r3, #0]
 8003b9c:	4b06      	ldr	r3, [pc, #24]	@ (8003bb8 <send_DHCP_REQUEST+0x50c>)
 8003b9e:	6819      	ldr	r1, [r3, #0]
 8003ba0:	1d3b      	adds	r3, r7, #4
 8003ba2:	2243      	movs	r2, #67	@ 0x43
 8003ba4:	9200      	str	r2, [sp, #0]
 8003ba6:	f44f 7209 	mov.w	r2, #548	@ 0x224
 8003baa:	f003 ffdd 	bl	8007b68 <sendto>

}
 8003bae:	bf00      	nop
 8003bb0:	3710      	adds	r7, #16
 8003bb2:	46bd      	mov	sp, r7
 8003bb4:	bdb0      	pop	{r4, r5, r7, pc}
 8003bb6:	bf00      	nop
 8003bb8:	20000f74 	.word	0x20000f74
 8003bbc:	2000009c 	.word	0x2000009c
 8003bc0:	20000f78 	.word	0x20000f78
 8003bc4:	08010dfc 	.word	0x08010dfc
 8003bc8:	20000f49 	.word	0x20000f49

08003bcc <send_DHCP_DECLINE>:

/* SEND DHCP DHCPDECLINE */
void send_DHCP_DECLINE(void)
{
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	b086      	sub	sp, #24
 8003bd0:	af02      	add	r7, sp, #8
	int i;
	uint8_t ip[4];
	uint16_t k = 0;
 8003bd2:	2300      	movs	r3, #0
 8003bd4:	817b      	strh	r3, [r7, #10]
	
	makeDHCPMSG();
 8003bd6:	f7ff faa7 	bl	8003128 <makeDHCPMSG>

   k = 4;      // because MAGIC_COOKIE already made by makeDHCPMSG()
 8003bda:	2304      	movs	r3, #4
 8003bdc:	817b      	strh	r3, [r7, #10]
   
	*((uint8_t*)(&pDHCPMSG->flags))   = ((DHCP_FLAGSUNICAST & 0xFF00)>> 8);
 8003bde:	4ba0      	ldr	r3, [pc, #640]	@ (8003e60 <send_DHCP_DECLINE+0x294>)
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	330a      	adds	r3, #10
 8003be4:	2200      	movs	r2, #0
 8003be6:	701a      	strb	r2, [r3, #0]
	*((uint8_t*)(&pDHCPMSG->flags)+1) = (DHCP_FLAGSUNICAST & 0x00FF);
 8003be8:	4b9d      	ldr	r3, [pc, #628]	@ (8003e60 <send_DHCP_DECLINE+0x294>)
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	330a      	adds	r3, #10
 8003bee:	3301      	adds	r3, #1
 8003bf0:	2200      	movs	r2, #0
 8003bf2:	701a      	strb	r2, [r3, #0]

	// Option Request Param.
	pDHCPMSG->OPT[k++] = dhcpMessageType;
 8003bf4:	4b9a      	ldr	r3, [pc, #616]	@ (8003e60 <send_DHCP_DECLINE+0x294>)
 8003bf6:	681a      	ldr	r2, [r3, #0]
 8003bf8:	897b      	ldrh	r3, [r7, #10]
 8003bfa:	1c59      	adds	r1, r3, #1
 8003bfc:	8179      	strh	r1, [r7, #10]
 8003bfe:	4413      	add	r3, r2
 8003c00:	2235      	movs	r2, #53	@ 0x35
 8003c02:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = 0x01;
 8003c06:	4b96      	ldr	r3, [pc, #600]	@ (8003e60 <send_DHCP_DECLINE+0x294>)
 8003c08:	681a      	ldr	r2, [r3, #0]
 8003c0a:	897b      	ldrh	r3, [r7, #10]
 8003c0c:	1c59      	adds	r1, r3, #1
 8003c0e:	8179      	strh	r1, [r7, #10]
 8003c10:	4413      	add	r3, r2
 8003c12:	2201      	movs	r2, #1
 8003c14:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_DECLINE;
 8003c18:	4b91      	ldr	r3, [pc, #580]	@ (8003e60 <send_DHCP_DECLINE+0x294>)
 8003c1a:	681a      	ldr	r2, [r3, #0]
 8003c1c:	897b      	ldrh	r3, [r7, #10]
 8003c1e:	1c59      	adds	r1, r3, #1
 8003c20:	8179      	strh	r1, [r7, #10]
 8003c22:	4413      	add	r3, r2
 8003c24:	2204      	movs	r2, #4
 8003c26:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec

	pDHCPMSG->OPT[k++] = dhcpClientIdentifier;
 8003c2a:	4b8d      	ldr	r3, [pc, #564]	@ (8003e60 <send_DHCP_DECLINE+0x294>)
 8003c2c:	681a      	ldr	r2, [r3, #0]
 8003c2e:	897b      	ldrh	r3, [r7, #10]
 8003c30:	1c59      	adds	r1, r3, #1
 8003c32:	8179      	strh	r1, [r7, #10]
 8003c34:	4413      	add	r3, r2
 8003c36:	223d      	movs	r2, #61	@ 0x3d
 8003c38:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = 0x07;
 8003c3c:	4b88      	ldr	r3, [pc, #544]	@ (8003e60 <send_DHCP_DECLINE+0x294>)
 8003c3e:	681a      	ldr	r2, [r3, #0]
 8003c40:	897b      	ldrh	r3, [r7, #10]
 8003c42:	1c59      	adds	r1, r3, #1
 8003c44:	8179      	strh	r1, [r7, #10]
 8003c46:	4413      	add	r3, r2
 8003c48:	2207      	movs	r2, #7
 8003c4a:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = 0x01;
 8003c4e:	4b84      	ldr	r3, [pc, #528]	@ (8003e60 <send_DHCP_DECLINE+0x294>)
 8003c50:	681a      	ldr	r2, [r3, #0]
 8003c52:	897b      	ldrh	r3, [r7, #10]
 8003c54:	1c59      	adds	r1, r3, #1
 8003c56:	8179      	strh	r1, [r7, #10]
 8003c58:	4413      	add	r3, r2
 8003c5a:	2201      	movs	r2, #1
 8003c5c:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[0];
 8003c60:	4b7f      	ldr	r3, [pc, #508]	@ (8003e60 <send_DHCP_DECLINE+0x294>)
 8003c62:	681a      	ldr	r2, [r3, #0]
 8003c64:	897b      	ldrh	r3, [r7, #10]
 8003c66:	1c59      	adds	r1, r3, #1
 8003c68:	8179      	strh	r1, [r7, #10]
 8003c6a:	4618      	mov	r0, r3
 8003c6c:	4b7d      	ldr	r3, [pc, #500]	@ (8003e64 <send_DHCP_DECLINE+0x298>)
 8003c6e:	7819      	ldrb	r1, [r3, #0]
 8003c70:	1813      	adds	r3, r2, r0
 8003c72:	460a      	mov	r2, r1
 8003c74:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[1];
 8003c78:	4b79      	ldr	r3, [pc, #484]	@ (8003e60 <send_DHCP_DECLINE+0x294>)
 8003c7a:	681a      	ldr	r2, [r3, #0]
 8003c7c:	897b      	ldrh	r3, [r7, #10]
 8003c7e:	1c59      	adds	r1, r3, #1
 8003c80:	8179      	strh	r1, [r7, #10]
 8003c82:	4618      	mov	r0, r3
 8003c84:	4b77      	ldr	r3, [pc, #476]	@ (8003e64 <send_DHCP_DECLINE+0x298>)
 8003c86:	7859      	ldrb	r1, [r3, #1]
 8003c88:	1813      	adds	r3, r2, r0
 8003c8a:	460a      	mov	r2, r1
 8003c8c:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[2];
 8003c90:	4b73      	ldr	r3, [pc, #460]	@ (8003e60 <send_DHCP_DECLINE+0x294>)
 8003c92:	681a      	ldr	r2, [r3, #0]
 8003c94:	897b      	ldrh	r3, [r7, #10]
 8003c96:	1c59      	adds	r1, r3, #1
 8003c98:	8179      	strh	r1, [r7, #10]
 8003c9a:	4618      	mov	r0, r3
 8003c9c:	4b71      	ldr	r3, [pc, #452]	@ (8003e64 <send_DHCP_DECLINE+0x298>)
 8003c9e:	7899      	ldrb	r1, [r3, #2]
 8003ca0:	1813      	adds	r3, r2, r0
 8003ca2:	460a      	mov	r2, r1
 8003ca4:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[3];
 8003ca8:	4b6d      	ldr	r3, [pc, #436]	@ (8003e60 <send_DHCP_DECLINE+0x294>)
 8003caa:	681a      	ldr	r2, [r3, #0]
 8003cac:	897b      	ldrh	r3, [r7, #10]
 8003cae:	1c59      	adds	r1, r3, #1
 8003cb0:	8179      	strh	r1, [r7, #10]
 8003cb2:	4618      	mov	r0, r3
 8003cb4:	4b6b      	ldr	r3, [pc, #428]	@ (8003e64 <send_DHCP_DECLINE+0x298>)
 8003cb6:	78d9      	ldrb	r1, [r3, #3]
 8003cb8:	1813      	adds	r3, r2, r0
 8003cba:	460a      	mov	r2, r1
 8003cbc:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[4];
 8003cc0:	4b67      	ldr	r3, [pc, #412]	@ (8003e60 <send_DHCP_DECLINE+0x294>)
 8003cc2:	681a      	ldr	r2, [r3, #0]
 8003cc4:	897b      	ldrh	r3, [r7, #10]
 8003cc6:	1c59      	adds	r1, r3, #1
 8003cc8:	8179      	strh	r1, [r7, #10]
 8003cca:	4618      	mov	r0, r3
 8003ccc:	4b65      	ldr	r3, [pc, #404]	@ (8003e64 <send_DHCP_DECLINE+0x298>)
 8003cce:	7919      	ldrb	r1, [r3, #4]
 8003cd0:	1813      	adds	r3, r2, r0
 8003cd2:	460a      	mov	r2, r1
 8003cd4:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[5];
 8003cd8:	4b61      	ldr	r3, [pc, #388]	@ (8003e60 <send_DHCP_DECLINE+0x294>)
 8003cda:	681a      	ldr	r2, [r3, #0]
 8003cdc:	897b      	ldrh	r3, [r7, #10]
 8003cde:	1c59      	adds	r1, r3, #1
 8003ce0:	8179      	strh	r1, [r7, #10]
 8003ce2:	4618      	mov	r0, r3
 8003ce4:	4b5f      	ldr	r3, [pc, #380]	@ (8003e64 <send_DHCP_DECLINE+0x298>)
 8003ce6:	7959      	ldrb	r1, [r3, #5]
 8003ce8:	1813      	adds	r3, r2, r0
 8003cea:	460a      	mov	r2, r1
 8003cec:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec

	pDHCPMSG->OPT[k++] = dhcpRequestedIPaddr;
 8003cf0:	4b5b      	ldr	r3, [pc, #364]	@ (8003e60 <send_DHCP_DECLINE+0x294>)
 8003cf2:	681a      	ldr	r2, [r3, #0]
 8003cf4:	897b      	ldrh	r3, [r7, #10]
 8003cf6:	1c59      	adds	r1, r3, #1
 8003cf8:	8179      	strh	r1, [r7, #10]
 8003cfa:	4413      	add	r3, r2
 8003cfc:	2232      	movs	r2, #50	@ 0x32
 8003cfe:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = 0x04;
 8003d02:	4b57      	ldr	r3, [pc, #348]	@ (8003e60 <send_DHCP_DECLINE+0x294>)
 8003d04:	681a      	ldr	r2, [r3, #0]
 8003d06:	897b      	ldrh	r3, [r7, #10]
 8003d08:	1c59      	adds	r1, r3, #1
 8003d0a:	8179      	strh	r1, [r7, #10]
 8003d0c:	4413      	add	r3, r2
 8003d0e:	2204      	movs	r2, #4
 8003d10:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_allocated_ip[0];
 8003d14:	4b52      	ldr	r3, [pc, #328]	@ (8003e60 <send_DHCP_DECLINE+0x294>)
 8003d16:	681a      	ldr	r2, [r3, #0]
 8003d18:	897b      	ldrh	r3, [r7, #10]
 8003d1a:	1c59      	adds	r1, r3, #1
 8003d1c:	8179      	strh	r1, [r7, #10]
 8003d1e:	4618      	mov	r0, r3
 8003d20:	4b51      	ldr	r3, [pc, #324]	@ (8003e68 <send_DHCP_DECLINE+0x29c>)
 8003d22:	7819      	ldrb	r1, [r3, #0]
 8003d24:	1813      	adds	r3, r2, r0
 8003d26:	460a      	mov	r2, r1
 8003d28:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_allocated_ip[1];
 8003d2c:	4b4c      	ldr	r3, [pc, #304]	@ (8003e60 <send_DHCP_DECLINE+0x294>)
 8003d2e:	681a      	ldr	r2, [r3, #0]
 8003d30:	897b      	ldrh	r3, [r7, #10]
 8003d32:	1c59      	adds	r1, r3, #1
 8003d34:	8179      	strh	r1, [r7, #10]
 8003d36:	4618      	mov	r0, r3
 8003d38:	4b4b      	ldr	r3, [pc, #300]	@ (8003e68 <send_DHCP_DECLINE+0x29c>)
 8003d3a:	7859      	ldrb	r1, [r3, #1]
 8003d3c:	1813      	adds	r3, r2, r0
 8003d3e:	460a      	mov	r2, r1
 8003d40:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_allocated_ip[2];
 8003d44:	4b46      	ldr	r3, [pc, #280]	@ (8003e60 <send_DHCP_DECLINE+0x294>)
 8003d46:	681a      	ldr	r2, [r3, #0]
 8003d48:	897b      	ldrh	r3, [r7, #10]
 8003d4a:	1c59      	adds	r1, r3, #1
 8003d4c:	8179      	strh	r1, [r7, #10]
 8003d4e:	4618      	mov	r0, r3
 8003d50:	4b45      	ldr	r3, [pc, #276]	@ (8003e68 <send_DHCP_DECLINE+0x29c>)
 8003d52:	7899      	ldrb	r1, [r3, #2]
 8003d54:	1813      	adds	r3, r2, r0
 8003d56:	460a      	mov	r2, r1
 8003d58:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_allocated_ip[3];
 8003d5c:	4b40      	ldr	r3, [pc, #256]	@ (8003e60 <send_DHCP_DECLINE+0x294>)
 8003d5e:	681a      	ldr	r2, [r3, #0]
 8003d60:	897b      	ldrh	r3, [r7, #10]
 8003d62:	1c59      	adds	r1, r3, #1
 8003d64:	8179      	strh	r1, [r7, #10]
 8003d66:	4618      	mov	r0, r3
 8003d68:	4b3f      	ldr	r3, [pc, #252]	@ (8003e68 <send_DHCP_DECLINE+0x29c>)
 8003d6a:	78d9      	ldrb	r1, [r3, #3]
 8003d6c:	1813      	adds	r3, r2, r0
 8003d6e:	460a      	mov	r2, r1
 8003d70:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec

	pDHCPMSG->OPT[k++] = dhcpServerIdentifier;
 8003d74:	4b3a      	ldr	r3, [pc, #232]	@ (8003e60 <send_DHCP_DECLINE+0x294>)
 8003d76:	681a      	ldr	r2, [r3, #0]
 8003d78:	897b      	ldrh	r3, [r7, #10]
 8003d7a:	1c59      	adds	r1, r3, #1
 8003d7c:	8179      	strh	r1, [r7, #10]
 8003d7e:	4413      	add	r3, r2
 8003d80:	2236      	movs	r2, #54	@ 0x36
 8003d82:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = 0x04;
 8003d86:	4b36      	ldr	r3, [pc, #216]	@ (8003e60 <send_DHCP_DECLINE+0x294>)
 8003d88:	681a      	ldr	r2, [r3, #0]
 8003d8a:	897b      	ldrh	r3, [r7, #10]
 8003d8c:	1c59      	adds	r1, r3, #1
 8003d8e:	8179      	strh	r1, [r7, #10]
 8003d90:	4413      	add	r3, r2
 8003d92:	2204      	movs	r2, #4
 8003d94:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_SIP[0];
 8003d98:	4b31      	ldr	r3, [pc, #196]	@ (8003e60 <send_DHCP_DECLINE+0x294>)
 8003d9a:	681a      	ldr	r2, [r3, #0]
 8003d9c:	897b      	ldrh	r3, [r7, #10]
 8003d9e:	1c59      	adds	r1, r3, #1
 8003da0:	8179      	strh	r1, [r7, #10]
 8003da2:	4618      	mov	r0, r3
 8003da4:	4b31      	ldr	r3, [pc, #196]	@ (8003e6c <send_DHCP_DECLINE+0x2a0>)
 8003da6:	7819      	ldrb	r1, [r3, #0]
 8003da8:	1813      	adds	r3, r2, r0
 8003daa:	460a      	mov	r2, r1
 8003dac:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_SIP[1];
 8003db0:	4b2b      	ldr	r3, [pc, #172]	@ (8003e60 <send_DHCP_DECLINE+0x294>)
 8003db2:	681a      	ldr	r2, [r3, #0]
 8003db4:	897b      	ldrh	r3, [r7, #10]
 8003db6:	1c59      	adds	r1, r3, #1
 8003db8:	8179      	strh	r1, [r7, #10]
 8003dba:	4618      	mov	r0, r3
 8003dbc:	4b2b      	ldr	r3, [pc, #172]	@ (8003e6c <send_DHCP_DECLINE+0x2a0>)
 8003dbe:	7859      	ldrb	r1, [r3, #1]
 8003dc0:	1813      	adds	r3, r2, r0
 8003dc2:	460a      	mov	r2, r1
 8003dc4:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_SIP[2];
 8003dc8:	4b25      	ldr	r3, [pc, #148]	@ (8003e60 <send_DHCP_DECLINE+0x294>)
 8003dca:	681a      	ldr	r2, [r3, #0]
 8003dcc:	897b      	ldrh	r3, [r7, #10]
 8003dce:	1c59      	adds	r1, r3, #1
 8003dd0:	8179      	strh	r1, [r7, #10]
 8003dd2:	4618      	mov	r0, r3
 8003dd4:	4b25      	ldr	r3, [pc, #148]	@ (8003e6c <send_DHCP_DECLINE+0x2a0>)
 8003dd6:	7899      	ldrb	r1, [r3, #2]
 8003dd8:	1813      	adds	r3, r2, r0
 8003dda:	460a      	mov	r2, r1
 8003ddc:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_SIP[3];
 8003de0:	4b1f      	ldr	r3, [pc, #124]	@ (8003e60 <send_DHCP_DECLINE+0x294>)
 8003de2:	681a      	ldr	r2, [r3, #0]
 8003de4:	897b      	ldrh	r3, [r7, #10]
 8003de6:	1c59      	adds	r1, r3, #1
 8003de8:	8179      	strh	r1, [r7, #10]
 8003dea:	4618      	mov	r0, r3
 8003dec:	4b1f      	ldr	r3, [pc, #124]	@ (8003e6c <send_DHCP_DECLINE+0x2a0>)
 8003dee:	78d9      	ldrb	r1, [r3, #3]
 8003df0:	1813      	adds	r3, r2, r0
 8003df2:	460a      	mov	r2, r1
 8003df4:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec

	pDHCPMSG->OPT[k++] = endOption;
 8003df8:	4b19      	ldr	r3, [pc, #100]	@ (8003e60 <send_DHCP_DECLINE+0x294>)
 8003dfa:	681a      	ldr	r2, [r3, #0]
 8003dfc:	897b      	ldrh	r3, [r7, #10]
 8003dfe:	1c59      	adds	r1, r3, #1
 8003e00:	8179      	strh	r1, [r7, #10]
 8003e02:	4413      	add	r3, r2
 8003e04:	22ff      	movs	r2, #255	@ 0xff
 8003e06:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec

	for (i = k; i < OPT_SIZE; i++) pDHCPMSG->OPT[i] = 0;
 8003e0a:	897b      	ldrh	r3, [r7, #10]
 8003e0c:	60fb      	str	r3, [r7, #12]
 8003e0e:	e009      	b.n	8003e24 <send_DHCP_DECLINE+0x258>
 8003e10:	4b13      	ldr	r3, [pc, #76]	@ (8003e60 <send_DHCP_DECLINE+0x294>)
 8003e12:	681a      	ldr	r2, [r3, #0]
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	4413      	add	r3, r2
 8003e18:	33ec      	adds	r3, #236	@ 0xec
 8003e1a:	2200      	movs	r2, #0
 8003e1c:	701a      	strb	r2, [r3, #0]
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	3301      	adds	r3, #1
 8003e22:	60fb      	str	r3, [r7, #12]
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	f5b3 7f9c 	cmp.w	r3, #312	@ 0x138
 8003e2a:	dbf1      	blt.n	8003e10 <send_DHCP_DECLINE+0x244>

	//send broadcasting packet
	ip[0] = 0xFF;
 8003e2c:	23ff      	movs	r3, #255	@ 0xff
 8003e2e:	713b      	strb	r3, [r7, #4]
	ip[1] = 0xFF;
 8003e30:	23ff      	movs	r3, #255	@ 0xff
 8003e32:	717b      	strb	r3, [r7, #5]
	ip[2] = 0xFF;
 8003e34:	23ff      	movs	r3, #255	@ 0xff
 8003e36:	71bb      	strb	r3, [r7, #6]
	ip[3] = 0xFF;
 8003e38:	23ff      	movs	r3, #255	@ 0xff
 8003e3a:	71fb      	strb	r3, [r7, #7]

#ifdef _DHCP_DEBUG_
	printf("\r\n> Send DHCP_DECLINE\r\n");
 8003e3c:	480c      	ldr	r0, [pc, #48]	@ (8003e70 <send_DHCP_DECLINE+0x2a4>)
 8003e3e:	f00a fe71 	bl	800eb24 <puts>
#endif

	sendto(DHCP_SOCKET, (uint8_t *)pDHCPMSG, RIP_MSG_SIZE, ip, DHCP_SERVER_PORT);
 8003e42:	4b0c      	ldr	r3, [pc, #48]	@ (8003e74 <send_DHCP_DECLINE+0x2a8>)
 8003e44:	7818      	ldrb	r0, [r3, #0]
 8003e46:	4b06      	ldr	r3, [pc, #24]	@ (8003e60 <send_DHCP_DECLINE+0x294>)
 8003e48:	6819      	ldr	r1, [r3, #0]
 8003e4a:	1d3b      	adds	r3, r7, #4
 8003e4c:	2243      	movs	r2, #67	@ 0x43
 8003e4e:	9200      	str	r2, [sp, #0]
 8003e50:	f44f 7209 	mov.w	r2, #548	@ 0x224
 8003e54:	f003 fe88 	bl	8007b68 <sendto>
}
 8003e58:	bf00      	nop
 8003e5a:	3710      	adds	r7, #16
 8003e5c:	46bd      	mov	sp, r7
 8003e5e:	bd80      	pop	{r7, pc}
 8003e60:	20000f74 	.word	0x20000f74
 8003e64:	20000f78 	.word	0x20000f78
 8003e68:	20000f58 	.word	0x20000f58
 8003e6c:	20000f4c 	.word	0x20000f4c
 8003e70:	08010e14 	.word	0x08010e14
 8003e74:	20000f49 	.word	0x20000f49

08003e78 <parseDHCPMSG>:

/* PARSE REPLY pDHCPMSG */
int8_t parseDHCPMSG(void)
{
 8003e78:	b5b0      	push	{r4, r5, r7, lr}
 8003e7a:	b08a      	sub	sp, #40	@ 0x28
 8003e7c:	af04      	add	r7, sp, #16
	uint16_t  svr_port;
	uint16_t len;

	uint8_t * p;
	uint8_t * e;
	uint8_t type = 0;
 8003e7e:	2300      	movs	r3, #0
 8003e80:	74fb      	strb	r3, [r7, #19]
	uint8_t opt_len;
   
   if((len = getSn_RX_RSR(DHCP_SOCKET)) > 0)
 8003e82:	4b9e      	ldr	r3, [pc, #632]	@ (80040fc <parseDHCPMSG+0x284>)
 8003e84:	781b      	ldrb	r3, [r3, #0]
 8003e86:	4618      	mov	r0, r3
 8003e88:	f003 f8ab 	bl	8006fe2 <getSn_RX_RSR>
 8003e8c:	4603      	mov	r3, r0
 8003e8e:	823b      	strh	r3, [r7, #16]
 8003e90:	8a3b      	ldrh	r3, [r7, #16]
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d025      	beq.n	8003ee2 <parseDHCPMSG+0x6a>
   {
   	len = recvfrom(DHCP_SOCKET, (uint8_t *)pDHCPMSG, len, svr_addr, &svr_port);
 8003e96:	4b99      	ldr	r3, [pc, #612]	@ (80040fc <parseDHCPMSG+0x284>)
 8003e98:	7818      	ldrb	r0, [r3, #0]
 8003e9a:	4b99      	ldr	r3, [pc, #612]	@ (8004100 <parseDHCPMSG+0x288>)
 8003e9c:	6819      	ldr	r1, [r3, #0]
 8003e9e:	1d3c      	adds	r4, r7, #4
 8003ea0:	8a3a      	ldrh	r2, [r7, #16]
 8003ea2:	1cbb      	adds	r3, r7, #2
 8003ea4:	9300      	str	r3, [sp, #0]
 8003ea6:	4623      	mov	r3, r4
 8003ea8:	f003 ff92 	bl	8007dd0 <recvfrom>
 8003eac:	4603      	mov	r3, r0
 8003eae:	823b      	strh	r3, [r7, #16]
   #ifdef _DHCP_DEBUG_   
      printf("DHCP message : %d.%d.%d.%d(%d) %d received. \r\n",svr_addr[0],svr_addr[1],svr_addr[2], svr_addr[3],svr_port, len);
 8003eb0:	793b      	ldrb	r3, [r7, #4]
 8003eb2:	4618      	mov	r0, r3
 8003eb4:	797b      	ldrb	r3, [r7, #5]
 8003eb6:	461c      	mov	r4, r3
 8003eb8:	79bb      	ldrb	r3, [r7, #6]
 8003eba:	461d      	mov	r5, r3
 8003ebc:	79fb      	ldrb	r3, [r7, #7]
 8003ebe:	461a      	mov	r2, r3
 8003ec0:	887b      	ldrh	r3, [r7, #2]
 8003ec2:	4619      	mov	r1, r3
 8003ec4:	8a3b      	ldrh	r3, [r7, #16]
 8003ec6:	9302      	str	r3, [sp, #8]
 8003ec8:	9101      	str	r1, [sp, #4]
 8003eca:	9200      	str	r2, [sp, #0]
 8003ecc:	462b      	mov	r3, r5
 8003ece:	4622      	mov	r2, r4
 8003ed0:	4601      	mov	r1, r0
 8003ed2:	488c      	ldr	r0, [pc, #560]	@ (8004104 <parseDHCPMSG+0x28c>)
 8003ed4:	f00a fdbe 	bl	800ea54 <iprintf>
   #endif   
   }
   else
	   return 0;

	if (svr_port == DHCP_SERVER_PORT) {
 8003ed8:	887b      	ldrh	r3, [r7, #2]
 8003eda:	2b43      	cmp	r3, #67	@ 0x43
 8003edc:	f040 81f9 	bne.w	80042d2 <parseDHCPMSG+0x45a>
 8003ee0:	e001      	b.n	8003ee6 <parseDHCPMSG+0x6e>
	   return 0;
 8003ee2:	2300      	movs	r3, #0
 8003ee4:	e1f7      	b.n	80042d6 <parseDHCPMSG+0x45e>
      // compare mac address
		if ( (pDHCPMSG->chaddr[0] != DHCP_CHADDR[0]) || (pDHCPMSG->chaddr[1] != DHCP_CHADDR[1]) ||
 8003ee6:	4b86      	ldr	r3, [pc, #536]	@ (8004100 <parseDHCPMSG+0x288>)
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	7f1a      	ldrb	r2, [r3, #28]
 8003eec:	4b86      	ldr	r3, [pc, #536]	@ (8004108 <parseDHCPMSG+0x290>)
 8003eee:	781b      	ldrb	r3, [r3, #0]
 8003ef0:	429a      	cmp	r2, r3
 8003ef2:	d124      	bne.n	8003f3e <parseDHCPMSG+0xc6>
 8003ef4:	4b82      	ldr	r3, [pc, #520]	@ (8004100 <parseDHCPMSG+0x288>)
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	7f5a      	ldrb	r2, [r3, #29]
 8003efa:	4b83      	ldr	r3, [pc, #524]	@ (8004108 <parseDHCPMSG+0x290>)
 8003efc:	785b      	ldrb	r3, [r3, #1]
 8003efe:	429a      	cmp	r2, r3
 8003f00:	d11d      	bne.n	8003f3e <parseDHCPMSG+0xc6>
		     (pDHCPMSG->chaddr[2] != DHCP_CHADDR[2]) || (pDHCPMSG->chaddr[3] != DHCP_CHADDR[3]) ||
 8003f02:	4b7f      	ldr	r3, [pc, #508]	@ (8004100 <parseDHCPMSG+0x288>)
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	7f9a      	ldrb	r2, [r3, #30]
 8003f08:	4b7f      	ldr	r3, [pc, #508]	@ (8004108 <parseDHCPMSG+0x290>)
 8003f0a:	789b      	ldrb	r3, [r3, #2]
		if ( (pDHCPMSG->chaddr[0] != DHCP_CHADDR[0]) || (pDHCPMSG->chaddr[1] != DHCP_CHADDR[1]) ||
 8003f0c:	429a      	cmp	r2, r3
 8003f0e:	d116      	bne.n	8003f3e <parseDHCPMSG+0xc6>
		     (pDHCPMSG->chaddr[2] != DHCP_CHADDR[2]) || (pDHCPMSG->chaddr[3] != DHCP_CHADDR[3]) ||
 8003f10:	4b7b      	ldr	r3, [pc, #492]	@ (8004100 <parseDHCPMSG+0x288>)
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	7fda      	ldrb	r2, [r3, #31]
 8003f16:	4b7c      	ldr	r3, [pc, #496]	@ (8004108 <parseDHCPMSG+0x290>)
 8003f18:	78db      	ldrb	r3, [r3, #3]
 8003f1a:	429a      	cmp	r2, r3
 8003f1c:	d10f      	bne.n	8003f3e <parseDHCPMSG+0xc6>
		     (pDHCPMSG->chaddr[4] != DHCP_CHADDR[4]) || (pDHCPMSG->chaddr[5] != DHCP_CHADDR[5])   )
 8003f1e:	4b78      	ldr	r3, [pc, #480]	@ (8004100 <parseDHCPMSG+0x288>)
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f893 2020 	ldrb.w	r2, [r3, #32]
 8003f26:	4b78      	ldr	r3, [pc, #480]	@ (8004108 <parseDHCPMSG+0x290>)
 8003f28:	791b      	ldrb	r3, [r3, #4]
		     (pDHCPMSG->chaddr[2] != DHCP_CHADDR[2]) || (pDHCPMSG->chaddr[3] != DHCP_CHADDR[3]) ||
 8003f2a:	429a      	cmp	r2, r3
 8003f2c:	d107      	bne.n	8003f3e <parseDHCPMSG+0xc6>
		     (pDHCPMSG->chaddr[4] != DHCP_CHADDR[4]) || (pDHCPMSG->chaddr[5] != DHCP_CHADDR[5])   )
 8003f2e:	4b74      	ldr	r3, [pc, #464]	@ (8004100 <parseDHCPMSG+0x288>)
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f893 2021 	ldrb.w	r2, [r3, #33]	@ 0x21
 8003f36:	4b74      	ldr	r3, [pc, #464]	@ (8004108 <parseDHCPMSG+0x290>)
 8003f38:	795b      	ldrb	r3, [r3, #5]
 8003f3a:	429a      	cmp	r2, r3
 8003f3c:	d004      	beq.n	8003f48 <parseDHCPMSG+0xd0>
		{
#ifdef _DHCP_DEBUG_
            printf("No My DHCP Message. This message is ignored.\r\n");
 8003f3e:	4873      	ldr	r0, [pc, #460]	@ (800410c <parseDHCPMSG+0x294>)
 8003f40:	f00a fdf0 	bl	800eb24 <puts>
#endif
         return 0;
 8003f44:	2300      	movs	r3, #0
 8003f46:	e1c6      	b.n	80042d6 <parseDHCPMSG+0x45e>
		}
        //compare DHCP server ip address
        if((DHCP_SIP[0]!=0) || (DHCP_SIP[1]!=0) || (DHCP_SIP[2]!=0) || (DHCP_SIP[3]!=0)){
 8003f48:	4b71      	ldr	r3, [pc, #452]	@ (8004110 <parseDHCPMSG+0x298>)
 8003f4a:	781b      	ldrb	r3, [r3, #0]
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d10b      	bne.n	8003f68 <parseDHCPMSG+0xf0>
 8003f50:	4b6f      	ldr	r3, [pc, #444]	@ (8004110 <parseDHCPMSG+0x298>)
 8003f52:	785b      	ldrb	r3, [r3, #1]
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d107      	bne.n	8003f68 <parseDHCPMSG+0xf0>
 8003f58:	4b6d      	ldr	r3, [pc, #436]	@ (8004110 <parseDHCPMSG+0x298>)
 8003f5a:	789b      	ldrb	r3, [r3, #2]
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d103      	bne.n	8003f68 <parseDHCPMSG+0xf0>
 8003f60:	4b6b      	ldr	r3, [pc, #428]	@ (8004110 <parseDHCPMSG+0x298>)
 8003f62:	78db      	ldrb	r3, [r3, #3]
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d02c      	beq.n	8003fc2 <parseDHCPMSG+0x14a>
            if( ((svr_addr[0]!=DHCP_SIP[0])|| (svr_addr[1]!=DHCP_SIP[1])|| (svr_addr[2]!=DHCP_SIP[2])|| (svr_addr[3]!=DHCP_SIP[3])) &&
 8003f68:	793a      	ldrb	r2, [r7, #4]
 8003f6a:	4b69      	ldr	r3, [pc, #420]	@ (8004110 <parseDHCPMSG+0x298>)
 8003f6c:	781b      	ldrb	r3, [r3, #0]
 8003f6e:	429a      	cmp	r2, r3
 8003f70:	d10e      	bne.n	8003f90 <parseDHCPMSG+0x118>
 8003f72:	797a      	ldrb	r2, [r7, #5]
 8003f74:	4b66      	ldr	r3, [pc, #408]	@ (8004110 <parseDHCPMSG+0x298>)
 8003f76:	785b      	ldrb	r3, [r3, #1]
 8003f78:	429a      	cmp	r2, r3
 8003f7a:	d109      	bne.n	8003f90 <parseDHCPMSG+0x118>
 8003f7c:	79ba      	ldrb	r2, [r7, #6]
 8003f7e:	4b64      	ldr	r3, [pc, #400]	@ (8004110 <parseDHCPMSG+0x298>)
 8003f80:	789b      	ldrb	r3, [r3, #2]
 8003f82:	429a      	cmp	r2, r3
 8003f84:	d104      	bne.n	8003f90 <parseDHCPMSG+0x118>
 8003f86:	79fa      	ldrb	r2, [r7, #7]
 8003f88:	4b61      	ldr	r3, [pc, #388]	@ (8004110 <parseDHCPMSG+0x298>)
 8003f8a:	78db      	ldrb	r3, [r3, #3]
 8003f8c:	429a      	cmp	r2, r3
 8003f8e:	d018      	beq.n	8003fc2 <parseDHCPMSG+0x14a>
                ((svr_addr[0]!=DHCP_REAL_SIP[0])|| (svr_addr[1]!=DHCP_REAL_SIP[1])|| (svr_addr[2]!=DHCP_REAL_SIP[2])|| (svr_addr[3]!=DHCP_REAL_SIP[3]))  )
 8003f90:	793a      	ldrb	r2, [r7, #4]
 8003f92:	4b60      	ldr	r3, [pc, #384]	@ (8004114 <parseDHCPMSG+0x29c>)
 8003f94:	781b      	ldrb	r3, [r3, #0]
            if( ((svr_addr[0]!=DHCP_SIP[0])|| (svr_addr[1]!=DHCP_SIP[1])|| (svr_addr[2]!=DHCP_SIP[2])|| (svr_addr[3]!=DHCP_SIP[3])) &&
 8003f96:	429a      	cmp	r2, r3
 8003f98:	d10e      	bne.n	8003fb8 <parseDHCPMSG+0x140>
                ((svr_addr[0]!=DHCP_REAL_SIP[0])|| (svr_addr[1]!=DHCP_REAL_SIP[1])|| (svr_addr[2]!=DHCP_REAL_SIP[2])|| (svr_addr[3]!=DHCP_REAL_SIP[3]))  )
 8003f9a:	797a      	ldrb	r2, [r7, #5]
 8003f9c:	4b5d      	ldr	r3, [pc, #372]	@ (8004114 <parseDHCPMSG+0x29c>)
 8003f9e:	785b      	ldrb	r3, [r3, #1]
 8003fa0:	429a      	cmp	r2, r3
 8003fa2:	d109      	bne.n	8003fb8 <parseDHCPMSG+0x140>
 8003fa4:	79ba      	ldrb	r2, [r7, #6]
 8003fa6:	4b5b      	ldr	r3, [pc, #364]	@ (8004114 <parseDHCPMSG+0x29c>)
 8003fa8:	789b      	ldrb	r3, [r3, #2]
 8003faa:	429a      	cmp	r2, r3
 8003fac:	d104      	bne.n	8003fb8 <parseDHCPMSG+0x140>
 8003fae:	79fa      	ldrb	r2, [r7, #7]
 8003fb0:	4b58      	ldr	r3, [pc, #352]	@ (8004114 <parseDHCPMSG+0x29c>)
 8003fb2:	78db      	ldrb	r3, [r3, #3]
 8003fb4:	429a      	cmp	r2, r3
 8003fb6:	d004      	beq.n	8003fc2 <parseDHCPMSG+0x14a>
            {
#ifdef _DHCP_DEBUG_
                printf("Another DHCP sever send a response message. This is ignored.\r\n");
 8003fb8:	4857      	ldr	r0, [pc, #348]	@ (8004118 <parseDHCPMSG+0x2a0>)
 8003fba:	f00a fdb3 	bl	800eb24 <puts>
#endif
                return 0;
 8003fbe:	2300      	movs	r3, #0
 8003fc0:	e189      	b.n	80042d6 <parseDHCPMSG+0x45e>
            }
        }
		p = (uint8_t *)(&pDHCPMSG->op);
 8003fc2:	4b4f      	ldr	r3, [pc, #316]	@ (8004100 <parseDHCPMSG+0x288>)
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	617b      	str	r3, [r7, #20]
		p = p + 240;      // 240 = sizeof(RIP_MSG) + MAGIC_COOKIE size in RIP_MSG.opt - sizeof(RIP_MSG.opt)
 8003fc8:	697b      	ldr	r3, [r7, #20]
 8003fca:	33f0      	adds	r3, #240	@ 0xf0
 8003fcc:	617b      	str	r3, [r7, #20]
		e = p + (len - 240);
 8003fce:	8a3b      	ldrh	r3, [r7, #16]
 8003fd0:	3bf0      	subs	r3, #240	@ 0xf0
 8003fd2:	697a      	ldr	r2, [r7, #20]
 8003fd4:	4413      	add	r3, r2
 8003fd6:	60fb      	str	r3, [r7, #12]

		while ( p < e ) {
 8003fd8:	e176      	b.n	80042c8 <parseDHCPMSG+0x450>

			switch ( *p ) {
 8003fda:	697b      	ldr	r3, [r7, #20]
 8003fdc:	781b      	ldrb	r3, [r3, #0]
 8003fde:	2b36      	cmp	r3, #54	@ 0x36
 8003fe0:	dc76      	bgt.n	80040d0 <parseDHCPMSG+0x258>
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	f2c0 8163 	blt.w	80042ae <parseDHCPMSG+0x436>
 8003fe8:	2b36      	cmp	r3, #54	@ 0x36
 8003fea:	f200 8160 	bhi.w	80042ae <parseDHCPMSG+0x436>
 8003fee:	a201      	add	r2, pc, #4	@ (adr r2, 8003ff4 <parseDHCPMSG+0x17c>)
 8003ff0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ff4:	080040dd 	.word	0x080040dd
 8003ff8:	0800411d 	.word	0x0800411d
 8003ffc:	080042af 	.word	0x080042af
 8004000:	0800415b 	.word	0x0800415b
 8004004:	080042af 	.word	0x080042af
 8004008:	080042af 	.word	0x080042af
 800400c:	080041a7 	.word	0x080041a7
 8004010:	080042af 	.word	0x080042af
 8004014:	080042af 	.word	0x080042af
 8004018:	080042af 	.word	0x080042af
 800401c:	080042af 	.word	0x080042af
 8004020:	080042af 	.word	0x080042af
 8004024:	080042af 	.word	0x080042af
 8004028:	080042af 	.word	0x080042af
 800402c:	080042af 	.word	0x080042af
 8004030:	080042af 	.word	0x080042af
 8004034:	080042af 	.word	0x080042af
 8004038:	080042af 	.word	0x080042af
 800403c:	080042af 	.word	0x080042af
 8004040:	080042af 	.word	0x080042af
 8004044:	080042af 	.word	0x080042af
 8004048:	080042af 	.word	0x080042af
 800404c:	080042af 	.word	0x080042af
 8004050:	080042af 	.word	0x080042af
 8004054:	080042af 	.word	0x080042af
 8004058:	080042af 	.word	0x080042af
 800405c:	080042af 	.word	0x080042af
 8004060:	080042af 	.word	0x080042af
 8004064:	080042af 	.word	0x080042af
 8004068:	080042af 	.word	0x080042af
 800406c:	080042af 	.word	0x080042af
 8004070:	080042af 	.word	0x080042af
 8004074:	080042af 	.word	0x080042af
 8004078:	080042af 	.word	0x080042af
 800407c:	080042af 	.word	0x080042af
 8004080:	080042af 	.word	0x080042af
 8004084:	080042af 	.word	0x080042af
 8004088:	080042af 	.word	0x080042af
 800408c:	080042af 	.word	0x080042af
 8004090:	080042af 	.word	0x080042af
 8004094:	080042af 	.word	0x080042af
 8004098:	080042af 	.word	0x080042af
 800409c:	080042af 	.word	0x080042af
 80040a0:	080042af 	.word	0x080042af
 80040a4:	080042af 	.word	0x080042af
 80040a8:	080042af 	.word	0x080042af
 80040ac:	080042af 	.word	0x080042af
 80040b0:	080042af 	.word	0x080042af
 80040b4:	080042af 	.word	0x080042af
 80040b8:	080042af 	.word	0x080042af
 80040bc:	080042af 	.word	0x080042af
 80040c0:	080041f3 	.word	0x080041f3
 80040c4:	080042af 	.word	0x080042af
 80040c8:	080040e5 	.word	0x080040e5
 80040cc:	08004255 	.word	0x08004255
 80040d0:	2bff      	cmp	r3, #255	@ 0xff
 80040d2:	f040 80ec 	bne.w	80042ae <parseDHCPMSG+0x436>

   			case endOption :
   			   p = e;   // for break while(p < e)
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	617b      	str	r3, [r7, #20]
   				break;
 80040da:	e0f5      	b.n	80042c8 <parseDHCPMSG+0x450>
            case padOption :
   				p++;
 80040dc:	697b      	ldr	r3, [r7, #20]
 80040de:	3301      	adds	r3, #1
 80040e0:	617b      	str	r3, [r7, #20]
   				break;
 80040e2:	e0f1      	b.n	80042c8 <parseDHCPMSG+0x450>
   			case dhcpMessageType :
   				p++;
 80040e4:	697b      	ldr	r3, [r7, #20]
 80040e6:	3301      	adds	r3, #1
 80040e8:	617b      	str	r3, [r7, #20]
   				p++;
 80040ea:	697b      	ldr	r3, [r7, #20]
 80040ec:	3301      	adds	r3, #1
 80040ee:	617b      	str	r3, [r7, #20]
   				type = *p++;
 80040f0:	697b      	ldr	r3, [r7, #20]
 80040f2:	1c5a      	adds	r2, r3, #1
 80040f4:	617a      	str	r2, [r7, #20]
 80040f6:	781b      	ldrb	r3, [r3, #0]
 80040f8:	74fb      	strb	r3, [r7, #19]
   				break;
 80040fa:	e0e5      	b.n	80042c8 <parseDHCPMSG+0x450>
 80040fc:	20000f49 	.word	0x20000f49
 8004100:	20000f74 	.word	0x20000f74
 8004104:	08010e2c 	.word	0x08010e2c
 8004108:	20000f78 	.word	0x20000f78
 800410c:	08010e5c 	.word	0x08010e5c
 8004110:	20000f4c 	.word	0x20000f4c
 8004114:	20000f50 	.word	0x20000f50
 8004118:	08010e8c 	.word	0x08010e8c
   			case subnetMask :
   				p++;
 800411c:	697b      	ldr	r3, [r7, #20]
 800411e:	3301      	adds	r3, #1
 8004120:	617b      	str	r3, [r7, #20]
   				p++;
 8004122:	697b      	ldr	r3, [r7, #20]
 8004124:	3301      	adds	r3, #1
 8004126:	617b      	str	r3, [r7, #20]
   				DHCP_allocated_sn[0] = *p++;
 8004128:	697b      	ldr	r3, [r7, #20]
 800412a:	1c5a      	adds	r2, r3, #1
 800412c:	617a      	str	r2, [r7, #20]
 800412e:	781a      	ldrb	r2, [r3, #0]
 8004130:	4b6b      	ldr	r3, [pc, #428]	@ (80042e0 <parseDHCPMSG+0x468>)
 8004132:	701a      	strb	r2, [r3, #0]
   				DHCP_allocated_sn[1] = *p++;
 8004134:	697b      	ldr	r3, [r7, #20]
 8004136:	1c5a      	adds	r2, r3, #1
 8004138:	617a      	str	r2, [r7, #20]
 800413a:	781a      	ldrb	r2, [r3, #0]
 800413c:	4b68      	ldr	r3, [pc, #416]	@ (80042e0 <parseDHCPMSG+0x468>)
 800413e:	705a      	strb	r2, [r3, #1]
   				DHCP_allocated_sn[2] = *p++;
 8004140:	697b      	ldr	r3, [r7, #20]
 8004142:	1c5a      	adds	r2, r3, #1
 8004144:	617a      	str	r2, [r7, #20]
 8004146:	781a      	ldrb	r2, [r3, #0]
 8004148:	4b65      	ldr	r3, [pc, #404]	@ (80042e0 <parseDHCPMSG+0x468>)
 800414a:	709a      	strb	r2, [r3, #2]
   				DHCP_allocated_sn[3] = *p++;
 800414c:	697b      	ldr	r3, [r7, #20]
 800414e:	1c5a      	adds	r2, r3, #1
 8004150:	617a      	str	r2, [r7, #20]
 8004152:	781a      	ldrb	r2, [r3, #0]
 8004154:	4b62      	ldr	r3, [pc, #392]	@ (80042e0 <parseDHCPMSG+0x468>)
 8004156:	70da      	strb	r2, [r3, #3]
   				break;
 8004158:	e0b6      	b.n	80042c8 <parseDHCPMSG+0x450>
   			case routersOnSubnet :
   				p++;
 800415a:	697b      	ldr	r3, [r7, #20]
 800415c:	3301      	adds	r3, #1
 800415e:	617b      	str	r3, [r7, #20]
   				opt_len = *p++;       
 8004160:	697b      	ldr	r3, [r7, #20]
 8004162:	1c5a      	adds	r2, r3, #1
 8004164:	617a      	str	r2, [r7, #20]
 8004166:	781b      	ldrb	r3, [r3, #0]
 8004168:	72fb      	strb	r3, [r7, #11]
   				DHCP_allocated_gw[0] = *p++;
 800416a:	697b      	ldr	r3, [r7, #20]
 800416c:	1c5a      	adds	r2, r3, #1
 800416e:	617a      	str	r2, [r7, #20]
 8004170:	781a      	ldrb	r2, [r3, #0]
 8004172:	4b5c      	ldr	r3, [pc, #368]	@ (80042e4 <parseDHCPMSG+0x46c>)
 8004174:	701a      	strb	r2, [r3, #0]
   				DHCP_allocated_gw[1] = *p++;
 8004176:	697b      	ldr	r3, [r7, #20]
 8004178:	1c5a      	adds	r2, r3, #1
 800417a:	617a      	str	r2, [r7, #20]
 800417c:	781a      	ldrb	r2, [r3, #0]
 800417e:	4b59      	ldr	r3, [pc, #356]	@ (80042e4 <parseDHCPMSG+0x46c>)
 8004180:	705a      	strb	r2, [r3, #1]
   				DHCP_allocated_gw[2] = *p++;
 8004182:	697b      	ldr	r3, [r7, #20]
 8004184:	1c5a      	adds	r2, r3, #1
 8004186:	617a      	str	r2, [r7, #20]
 8004188:	781a      	ldrb	r2, [r3, #0]
 800418a:	4b56      	ldr	r3, [pc, #344]	@ (80042e4 <parseDHCPMSG+0x46c>)
 800418c:	709a      	strb	r2, [r3, #2]
   				DHCP_allocated_gw[3] = *p++;
 800418e:	697b      	ldr	r3, [r7, #20]
 8004190:	1c5a      	adds	r2, r3, #1
 8004192:	617a      	str	r2, [r7, #20]
 8004194:	781a      	ldrb	r2, [r3, #0]
 8004196:	4b53      	ldr	r3, [pc, #332]	@ (80042e4 <parseDHCPMSG+0x46c>)
 8004198:	70da      	strb	r2, [r3, #3]
   				p = p + (opt_len - 4);
 800419a:	7afb      	ldrb	r3, [r7, #11]
 800419c:	3b04      	subs	r3, #4
 800419e:	697a      	ldr	r2, [r7, #20]
 80041a0:	4413      	add	r3, r2
 80041a2:	617b      	str	r3, [r7, #20]
   				break;
 80041a4:	e090      	b.n	80042c8 <parseDHCPMSG+0x450>
   			case dns :
   				p++;                  
 80041a6:	697b      	ldr	r3, [r7, #20]
 80041a8:	3301      	adds	r3, #1
 80041aa:	617b      	str	r3, [r7, #20]
   				opt_len = *p++;       
 80041ac:	697b      	ldr	r3, [r7, #20]
 80041ae:	1c5a      	adds	r2, r3, #1
 80041b0:	617a      	str	r2, [r7, #20]
 80041b2:	781b      	ldrb	r3, [r3, #0]
 80041b4:	72fb      	strb	r3, [r7, #11]
   				DHCP_allocated_dns[0] = *p++;
 80041b6:	697b      	ldr	r3, [r7, #20]
 80041b8:	1c5a      	adds	r2, r3, #1
 80041ba:	617a      	str	r2, [r7, #20]
 80041bc:	781a      	ldrb	r2, [r3, #0]
 80041be:	4b4a      	ldr	r3, [pc, #296]	@ (80042e8 <parseDHCPMSG+0x470>)
 80041c0:	701a      	strb	r2, [r3, #0]
   				DHCP_allocated_dns[1] = *p++;
 80041c2:	697b      	ldr	r3, [r7, #20]
 80041c4:	1c5a      	adds	r2, r3, #1
 80041c6:	617a      	str	r2, [r7, #20]
 80041c8:	781a      	ldrb	r2, [r3, #0]
 80041ca:	4b47      	ldr	r3, [pc, #284]	@ (80042e8 <parseDHCPMSG+0x470>)
 80041cc:	705a      	strb	r2, [r3, #1]
   				DHCP_allocated_dns[2] = *p++;
 80041ce:	697b      	ldr	r3, [r7, #20]
 80041d0:	1c5a      	adds	r2, r3, #1
 80041d2:	617a      	str	r2, [r7, #20]
 80041d4:	781a      	ldrb	r2, [r3, #0]
 80041d6:	4b44      	ldr	r3, [pc, #272]	@ (80042e8 <parseDHCPMSG+0x470>)
 80041d8:	709a      	strb	r2, [r3, #2]
   				DHCP_allocated_dns[3] = *p++;
 80041da:	697b      	ldr	r3, [r7, #20]
 80041dc:	1c5a      	adds	r2, r3, #1
 80041de:	617a      	str	r2, [r7, #20]
 80041e0:	781a      	ldrb	r2, [r3, #0]
 80041e2:	4b41      	ldr	r3, [pc, #260]	@ (80042e8 <parseDHCPMSG+0x470>)
 80041e4:	70da      	strb	r2, [r3, #3]
   				p = p + (opt_len - 4);
 80041e6:	7afb      	ldrb	r3, [r7, #11]
 80041e8:	3b04      	subs	r3, #4
 80041ea:	697a      	ldr	r2, [r7, #20]
 80041ec:	4413      	add	r3, r2
 80041ee:	617b      	str	r3, [r7, #20]
   				break;
 80041f0:	e06a      	b.n	80042c8 <parseDHCPMSG+0x450>
   			case dhcpIPaddrLeaseTime :
   				p++;
 80041f2:	697b      	ldr	r3, [r7, #20]
 80041f4:	3301      	adds	r3, #1
 80041f6:	617b      	str	r3, [r7, #20]
   				opt_len = *p++;
 80041f8:	697b      	ldr	r3, [r7, #20]
 80041fa:	1c5a      	adds	r2, r3, #1
 80041fc:	617a      	str	r2, [r7, #20]
 80041fe:	781b      	ldrb	r3, [r3, #0]
 8004200:	72fb      	strb	r3, [r7, #11]
   				dhcp_lease_time  = *p++;
 8004202:	697b      	ldr	r3, [r7, #20]
 8004204:	1c5a      	adds	r2, r3, #1
 8004206:	617a      	str	r2, [r7, #20]
 8004208:	781b      	ldrb	r3, [r3, #0]
 800420a:	461a      	mov	r2, r3
 800420c:	4b37      	ldr	r3, [pc, #220]	@ (80042ec <parseDHCPMSG+0x474>)
 800420e:	601a      	str	r2, [r3, #0]
   				dhcp_lease_time  = (dhcp_lease_time << 8) + *p++;
 8004210:	4b36      	ldr	r3, [pc, #216]	@ (80042ec <parseDHCPMSG+0x474>)
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	021a      	lsls	r2, r3, #8
 8004216:	697b      	ldr	r3, [r7, #20]
 8004218:	1c59      	adds	r1, r3, #1
 800421a:	6179      	str	r1, [r7, #20]
 800421c:	781b      	ldrb	r3, [r3, #0]
 800421e:	4413      	add	r3, r2
 8004220:	4a32      	ldr	r2, [pc, #200]	@ (80042ec <parseDHCPMSG+0x474>)
 8004222:	6013      	str	r3, [r2, #0]
   				dhcp_lease_time  = (dhcp_lease_time << 8) + *p++;
 8004224:	4b31      	ldr	r3, [pc, #196]	@ (80042ec <parseDHCPMSG+0x474>)
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	021a      	lsls	r2, r3, #8
 800422a:	697b      	ldr	r3, [r7, #20]
 800422c:	1c59      	adds	r1, r3, #1
 800422e:	6179      	str	r1, [r7, #20]
 8004230:	781b      	ldrb	r3, [r3, #0]
 8004232:	4413      	add	r3, r2
 8004234:	4a2d      	ldr	r2, [pc, #180]	@ (80042ec <parseDHCPMSG+0x474>)
 8004236:	6013      	str	r3, [r2, #0]
   				dhcp_lease_time  = (dhcp_lease_time << 8) + *p++;
 8004238:	4b2c      	ldr	r3, [pc, #176]	@ (80042ec <parseDHCPMSG+0x474>)
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	021a      	lsls	r2, r3, #8
 800423e:	697b      	ldr	r3, [r7, #20]
 8004240:	1c59      	adds	r1, r3, #1
 8004242:	6179      	str	r1, [r7, #20]
 8004244:	781b      	ldrb	r3, [r3, #0]
 8004246:	4413      	add	r3, r2
 8004248:	4a28      	ldr	r2, [pc, #160]	@ (80042ec <parseDHCPMSG+0x474>)
 800424a:	6013      	str	r3, [r2, #0]
            #ifdef _DHCP_DEBUG_  
               dhcp_lease_time = 10;
 800424c:	4b27      	ldr	r3, [pc, #156]	@ (80042ec <parseDHCPMSG+0x474>)
 800424e:	220a      	movs	r2, #10
 8004250:	601a      	str	r2, [r3, #0]
 				#endif
   				break;
 8004252:	e039      	b.n	80042c8 <parseDHCPMSG+0x450>
   			case dhcpServerIdentifier :
   				p++;
 8004254:	697b      	ldr	r3, [r7, #20]
 8004256:	3301      	adds	r3, #1
 8004258:	617b      	str	r3, [r7, #20]
   				opt_len = *p++;
 800425a:	697b      	ldr	r3, [r7, #20]
 800425c:	1c5a      	adds	r2, r3, #1
 800425e:	617a      	str	r2, [r7, #20]
 8004260:	781b      	ldrb	r3, [r3, #0]
 8004262:	72fb      	strb	r3, [r7, #11]
   				DHCP_SIP[0] = *p++;
 8004264:	697b      	ldr	r3, [r7, #20]
 8004266:	1c5a      	adds	r2, r3, #1
 8004268:	617a      	str	r2, [r7, #20]
 800426a:	781a      	ldrb	r2, [r3, #0]
 800426c:	4b20      	ldr	r3, [pc, #128]	@ (80042f0 <parseDHCPMSG+0x478>)
 800426e:	701a      	strb	r2, [r3, #0]
   				DHCP_SIP[1] = *p++;
 8004270:	697b      	ldr	r3, [r7, #20]
 8004272:	1c5a      	adds	r2, r3, #1
 8004274:	617a      	str	r2, [r7, #20]
 8004276:	781a      	ldrb	r2, [r3, #0]
 8004278:	4b1d      	ldr	r3, [pc, #116]	@ (80042f0 <parseDHCPMSG+0x478>)
 800427a:	705a      	strb	r2, [r3, #1]
   				DHCP_SIP[2] = *p++;
 800427c:	697b      	ldr	r3, [r7, #20]
 800427e:	1c5a      	adds	r2, r3, #1
 8004280:	617a      	str	r2, [r7, #20]
 8004282:	781a      	ldrb	r2, [r3, #0]
 8004284:	4b1a      	ldr	r3, [pc, #104]	@ (80042f0 <parseDHCPMSG+0x478>)
 8004286:	709a      	strb	r2, [r3, #2]
   				DHCP_SIP[3] = *p++;
 8004288:	697b      	ldr	r3, [r7, #20]
 800428a:	1c5a      	adds	r2, r3, #1
 800428c:	617a      	str	r2, [r7, #20]
 800428e:	781a      	ldrb	r2, [r3, #0]
 8004290:	4b17      	ldr	r3, [pc, #92]	@ (80042f0 <parseDHCPMSG+0x478>)
 8004292:	70da      	strb	r2, [r3, #3]
                DHCP_REAL_SIP[0]=svr_addr[0];
 8004294:	793a      	ldrb	r2, [r7, #4]
 8004296:	4b17      	ldr	r3, [pc, #92]	@ (80042f4 <parseDHCPMSG+0x47c>)
 8004298:	701a      	strb	r2, [r3, #0]
                DHCP_REAL_SIP[1]=svr_addr[1];
 800429a:	797a      	ldrb	r2, [r7, #5]
 800429c:	4b15      	ldr	r3, [pc, #84]	@ (80042f4 <parseDHCPMSG+0x47c>)
 800429e:	705a      	strb	r2, [r3, #1]
                DHCP_REAL_SIP[2]=svr_addr[2];
 80042a0:	79ba      	ldrb	r2, [r7, #6]
 80042a2:	4b14      	ldr	r3, [pc, #80]	@ (80042f4 <parseDHCPMSG+0x47c>)
 80042a4:	709a      	strb	r2, [r3, #2]
                DHCP_REAL_SIP[3]=svr_addr[3];
 80042a6:	79fa      	ldrb	r2, [r7, #7]
 80042a8:	4b12      	ldr	r3, [pc, #72]	@ (80042f4 <parseDHCPMSG+0x47c>)
 80042aa:	70da      	strb	r2, [r3, #3]
   				break;
 80042ac:	e00c      	b.n	80042c8 <parseDHCPMSG+0x450>
   			default :
   				p++;
 80042ae:	697b      	ldr	r3, [r7, #20]
 80042b0:	3301      	adds	r3, #1
 80042b2:	617b      	str	r3, [r7, #20]
   				opt_len = *p++;
 80042b4:	697b      	ldr	r3, [r7, #20]
 80042b6:	1c5a      	adds	r2, r3, #1
 80042b8:	617a      	str	r2, [r7, #20]
 80042ba:	781b      	ldrb	r3, [r3, #0]
 80042bc:	72fb      	strb	r3, [r7, #11]
   				p += opt_len;
 80042be:	7afb      	ldrb	r3, [r7, #11]
 80042c0:	697a      	ldr	r2, [r7, #20]
 80042c2:	4413      	add	r3, r2
 80042c4:	617b      	str	r3, [r7, #20]
   				break;
 80042c6:	bf00      	nop
		while ( p < e ) {
 80042c8:	697a      	ldr	r2, [r7, #20]
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	429a      	cmp	r2, r3
 80042ce:	f4ff ae84 	bcc.w	8003fda <parseDHCPMSG+0x162>
			} // switch
		} // while
	} // if
	return	type;
 80042d2:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 80042d6:	4618      	mov	r0, r3
 80042d8:	3718      	adds	r7, #24
 80042da:	46bd      	mov	sp, r7
 80042dc:	bdb0      	pop	{r4, r5, r7, pc}
 80042de:	bf00      	nop
 80042e0:	20000f60 	.word	0x20000f60
 80042e4:	20000f5c 	.word	0x20000f5c
 80042e8:	20000f64 	.word	0x20000f64
 80042ec:	20000094 	.word	0x20000094
 80042f0:	20000f4c 	.word	0x20000f4c
 80042f4:	20000f50 	.word	0x20000f50

080042f8 <DHCP_run>:

uint8_t DHCP_run(void)
{
 80042f8:	b580      	push	{r7, lr}
 80042fa:	b082      	sub	sp, #8
 80042fc:	af00      	add	r7, sp, #0
	uint8_t  type;
	uint8_t  ret;

	if(dhcp_state == STATE_DHCP_STOP) return DHCP_STOPPED;
 80042fe:	4b8f      	ldr	r3, [pc, #572]	@ (800453c <DHCP_run+0x244>)
 8004300:	f993 3000 	ldrsb.w	r3, [r3]
 8004304:	2b06      	cmp	r3, #6
 8004306:	d101      	bne.n	800430c <DHCP_run+0x14>
 8004308:	2305      	movs	r3, #5
 800430a:	e112      	b.n	8004532 <DHCP_run+0x23a>

	if(getSn_SR(DHCP_SOCKET) != SOCK_UDP)
 800430c:	4b8c      	ldr	r3, [pc, #560]	@ (8004540 <DHCP_run+0x248>)
 800430e:	781b      	ldrb	r3, [r3, #0]
 8004310:	009b      	lsls	r3, r3, #2
 8004312:	3301      	adds	r3, #1
 8004314:	00db      	lsls	r3, r3, #3
 8004316:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 800431a:	4618      	mov	r0, r3
 800431c:	f002 fcbe 	bl	8006c9c <WIZCHIP_READ>
 8004320:	4603      	mov	r3, r0
 8004322:	2b22      	cmp	r3, #34	@ 0x22
 8004324:	d006      	beq.n	8004334 <DHCP_run+0x3c>
	   socket(DHCP_SOCKET, Sn_MR_UDP, DHCP_CLIENT_PORT, 0x00);
 8004326:	4b86      	ldr	r3, [pc, #536]	@ (8004540 <DHCP_run+0x248>)
 8004328:	7818      	ldrb	r0, [r3, #0]
 800432a:	2300      	movs	r3, #0
 800432c:	2244      	movs	r2, #68	@ 0x44
 800432e:	2102      	movs	r1, #2
 8004330:	f002 ff9a 	bl	8007268 <socket>

	ret = DHCP_RUNNING;
 8004334:	2301      	movs	r3, #1
 8004336:	71fb      	strb	r3, [r7, #7]
	type = parseDHCPMSG();
 8004338:	f7ff fd9e 	bl	8003e78 <parseDHCPMSG>
 800433c:	4603      	mov	r3, r0
 800433e:	71bb      	strb	r3, [r7, #6]

	switch ( dhcp_state ) {
 8004340:	4b7e      	ldr	r3, [pc, #504]	@ (800453c <DHCP_run+0x244>)
 8004342:	f993 3000 	ldrsb.w	r3, [r3]
 8004346:	2b04      	cmp	r3, #4
 8004348:	f200 80ef 	bhi.w	800452a <DHCP_run+0x232>
 800434c:	a201      	add	r2, pc, #4	@ (adr r2, 8004354 <DHCP_run+0x5c>)
 800434e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004352:	bf00      	nop
 8004354:	08004369 	.word	0x08004369
 8004358:	0800438d 	.word	0x0800438d
 800435c:	080043d7 	.word	0x080043d7
 8004360:	08004433 	.word	0x08004433
 8004364:	0800449f 	.word	0x0800449f
	   case STATE_DHCP_INIT     :
         DHCP_allocated_ip[0] = 0;
 8004368:	4b76      	ldr	r3, [pc, #472]	@ (8004544 <DHCP_run+0x24c>)
 800436a:	2200      	movs	r2, #0
 800436c:	701a      	strb	r2, [r3, #0]
         DHCP_allocated_ip[1] = 0;
 800436e:	4b75      	ldr	r3, [pc, #468]	@ (8004544 <DHCP_run+0x24c>)
 8004370:	2200      	movs	r2, #0
 8004372:	705a      	strb	r2, [r3, #1]
         DHCP_allocated_ip[2] = 0;
 8004374:	4b73      	ldr	r3, [pc, #460]	@ (8004544 <DHCP_run+0x24c>)
 8004376:	2200      	movs	r2, #0
 8004378:	709a      	strb	r2, [r3, #2]
         DHCP_allocated_ip[3] = 0;
 800437a:	4b72      	ldr	r3, [pc, #456]	@ (8004544 <DHCP_run+0x24c>)
 800437c:	2200      	movs	r2, #0
 800437e:	70da      	strb	r2, [r3, #3]
   		send_DHCP_DISCOVER();
 8004380:	f7fe ffc8 	bl	8003314 <send_DHCP_DISCOVER>
   		dhcp_state = STATE_DHCP_DISCOVER;
 8004384:	4b6d      	ldr	r3, [pc, #436]	@ (800453c <DHCP_run+0x244>)
 8004386:	2201      	movs	r2, #1
 8004388:	701a      	strb	r2, [r3, #0]
   		break;
 800438a:	e0d1      	b.n	8004530 <DHCP_run+0x238>
		case STATE_DHCP_DISCOVER :
			if (type == DHCP_OFFER){
 800438c:	79bb      	ldrb	r3, [r7, #6]
 800438e:	2b02      	cmp	r3, #2
 8004390:	d11c      	bne.n	80043cc <DHCP_run+0xd4>
#ifdef _DHCP_DEBUG_
				printf("> Receive DHCP_OFFER\r\n");
 8004392:	486d      	ldr	r0, [pc, #436]	@ (8004548 <DHCP_run+0x250>)
 8004394:	f00a fbc6 	bl	800eb24 <puts>
#endif
            DHCP_allocated_ip[0] = pDHCPMSG->yiaddr[0];
 8004398:	4b6c      	ldr	r3, [pc, #432]	@ (800454c <DHCP_run+0x254>)
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	7c1a      	ldrb	r2, [r3, #16]
 800439e:	4b69      	ldr	r3, [pc, #420]	@ (8004544 <DHCP_run+0x24c>)
 80043a0:	701a      	strb	r2, [r3, #0]
            DHCP_allocated_ip[1] = pDHCPMSG->yiaddr[1];
 80043a2:	4b6a      	ldr	r3, [pc, #424]	@ (800454c <DHCP_run+0x254>)
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	7c5a      	ldrb	r2, [r3, #17]
 80043a8:	4b66      	ldr	r3, [pc, #408]	@ (8004544 <DHCP_run+0x24c>)
 80043aa:	705a      	strb	r2, [r3, #1]
            DHCP_allocated_ip[2] = pDHCPMSG->yiaddr[2];
 80043ac:	4b67      	ldr	r3, [pc, #412]	@ (800454c <DHCP_run+0x254>)
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	7c9a      	ldrb	r2, [r3, #18]
 80043b2:	4b64      	ldr	r3, [pc, #400]	@ (8004544 <DHCP_run+0x24c>)
 80043b4:	709a      	strb	r2, [r3, #2]
            DHCP_allocated_ip[3] = pDHCPMSG->yiaddr[3];
 80043b6:	4b65      	ldr	r3, [pc, #404]	@ (800454c <DHCP_run+0x254>)
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	7cda      	ldrb	r2, [r3, #19]
 80043bc:	4b61      	ldr	r3, [pc, #388]	@ (8004544 <DHCP_run+0x24c>)
 80043be:	70da      	strb	r2, [r3, #3]

				send_DHCP_REQUEST();
 80043c0:	f7ff f974 	bl	80036ac <send_DHCP_REQUEST>
				dhcp_state = STATE_DHCP_REQUEST;
 80043c4:	4b5d      	ldr	r3, [pc, #372]	@ (800453c <DHCP_run+0x244>)
 80043c6:	2202      	movs	r2, #2
 80043c8:	701a      	strb	r2, [r3, #0]
			} else ret = check_DHCP_timeout();
         break;
 80043ca:	e0b1      	b.n	8004530 <DHCP_run+0x238>
			} else ret = check_DHCP_timeout();
 80043cc:	f000 f8e0 	bl	8004590 <check_DHCP_timeout>
 80043d0:	4603      	mov	r3, r0
 80043d2:	71fb      	strb	r3, [r7, #7]
         break;
 80043d4:	e0ac      	b.n	8004530 <DHCP_run+0x238>

		case STATE_DHCP_REQUEST :
			if (type == DHCP_ACK) {
 80043d6:	79bb      	ldrb	r3, [r7, #6]
 80043d8:	2b05      	cmp	r3, #5
 80043da:	d119      	bne.n	8004410 <DHCP_run+0x118>

#ifdef _DHCP_DEBUG_
				printf("> Receive DHCP_ACK\r\n");
 80043dc:	485c      	ldr	r0, [pc, #368]	@ (8004550 <DHCP_run+0x258>)
 80043de:	f00a fba1 	bl	800eb24 <puts>
#endif
				if (check_DHCP_leasedIP()) {
 80043e2:	f000 f935 	bl	8004650 <check_DHCP_leasedIP>
 80043e6:	4603      	mov	r3, r0
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d008      	beq.n	80043fe <DHCP_run+0x106>
					// Network info assignment from DHCP
					dhcp_ip_assign();
 80043ec:	4b59      	ldr	r3, [pc, #356]	@ (8004554 <DHCP_run+0x25c>)
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	4798      	blx	r3
					reset_DHCP_timeout();
 80043f2:	f000 fa05 	bl	8004800 <reset_DHCP_timeout>

					dhcp_state = STATE_DHCP_LEASED;
 80043f6:	4b51      	ldr	r3, [pc, #324]	@ (800453c <DHCP_run+0x244>)
 80043f8:	2203      	movs	r2, #3
 80043fa:	701a      	strb	r2, [r3, #0]

				reset_DHCP_timeout();

				dhcp_state = STATE_DHCP_DISCOVER;
			} else ret = check_DHCP_timeout();
		break;
 80043fc:	e098      	b.n	8004530 <DHCP_run+0x238>
					reset_DHCP_timeout();
 80043fe:	f000 f9ff 	bl	8004800 <reset_DHCP_timeout>
					dhcp_ip_conflict();
 8004402:	4b55      	ldr	r3, [pc, #340]	@ (8004558 <DHCP_run+0x260>)
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	4798      	blx	r3
				    dhcp_state = STATE_DHCP_INIT;
 8004408:	4b4c      	ldr	r3, [pc, #304]	@ (800453c <DHCP_run+0x244>)
 800440a:	2200      	movs	r2, #0
 800440c:	701a      	strb	r2, [r3, #0]
		break;
 800440e:	e08f      	b.n	8004530 <DHCP_run+0x238>
			} else if (type == DHCP_NAK) {
 8004410:	79bb      	ldrb	r3, [r7, #6]
 8004412:	2b06      	cmp	r3, #6
 8004414:	d108      	bne.n	8004428 <DHCP_run+0x130>
				printf("> Receive DHCP_NACK\r\n");
 8004416:	4851      	ldr	r0, [pc, #324]	@ (800455c <DHCP_run+0x264>)
 8004418:	f00a fb84 	bl	800eb24 <puts>
				reset_DHCP_timeout();
 800441c:	f000 f9f0 	bl	8004800 <reset_DHCP_timeout>
				dhcp_state = STATE_DHCP_DISCOVER;
 8004420:	4b46      	ldr	r3, [pc, #280]	@ (800453c <DHCP_run+0x244>)
 8004422:	2201      	movs	r2, #1
 8004424:	701a      	strb	r2, [r3, #0]
		break;
 8004426:	e083      	b.n	8004530 <DHCP_run+0x238>
			} else ret = check_DHCP_timeout();
 8004428:	f000 f8b2 	bl	8004590 <check_DHCP_timeout>
 800442c:	4603      	mov	r3, r0
 800442e:	71fb      	strb	r3, [r7, #7]
		break;
 8004430:	e07e      	b.n	8004530 <DHCP_run+0x238>

		case STATE_DHCP_LEASED :
		   ret = DHCP_IP_LEASED;
 8004432:	2304      	movs	r3, #4
 8004434:	71fb      	strb	r3, [r7, #7]
			if ((dhcp_lease_time != INFINITE_LEASETIME) && ((dhcp_lease_time/2) < dhcp_tick_1s)) {
 8004436:	4b4a      	ldr	r3, [pc, #296]	@ (8004560 <DHCP_run+0x268>)
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800443e:	d076      	beq.n	800452e <DHCP_run+0x236>
 8004440:	4b47      	ldr	r3, [pc, #284]	@ (8004560 <DHCP_run+0x268>)
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	085a      	lsrs	r2, r3, #1
 8004446:	4b47      	ldr	r3, [pc, #284]	@ (8004564 <DHCP_run+0x26c>)
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	429a      	cmp	r2, r3
 800444c:	d26f      	bcs.n	800452e <DHCP_run+0x236>
				
#ifdef _DHCP_DEBUG_
				 StateChangeFlag = true;
 800444e:	4b46      	ldr	r3, [pc, #280]	@ (8004568 <DHCP_run+0x270>)
 8004450:	2201      	movs	r2, #1
 8004452:	701a      	strb	r2, [r3, #0]
				tempflag = false;
 8004454:	4b45      	ldr	r3, [pc, #276]	@ (800456c <DHCP_run+0x274>)
 8004456:	2200      	movs	r2, #0
 8004458:	701a      	strb	r2, [r3, #0]
 				printf("> Maintains the IP address \r\n");
 800445a:	4845      	ldr	r0, [pc, #276]	@ (8004570 <DHCP_run+0x278>)
 800445c:	f00a fb62 	bl	800eb24 <puts>
#endif

				type = 0;
 8004460:	2300      	movs	r3, #0
 8004462:	71bb      	strb	r3, [r7, #6]
				OLD_allocated_ip[0] = DHCP_allocated_ip[0];
 8004464:	4b37      	ldr	r3, [pc, #220]	@ (8004544 <DHCP_run+0x24c>)
 8004466:	781a      	ldrb	r2, [r3, #0]
 8004468:	4b42      	ldr	r3, [pc, #264]	@ (8004574 <DHCP_run+0x27c>)
 800446a:	701a      	strb	r2, [r3, #0]
				OLD_allocated_ip[1] = DHCP_allocated_ip[1];
 800446c:	4b35      	ldr	r3, [pc, #212]	@ (8004544 <DHCP_run+0x24c>)
 800446e:	785a      	ldrb	r2, [r3, #1]
 8004470:	4b40      	ldr	r3, [pc, #256]	@ (8004574 <DHCP_run+0x27c>)
 8004472:	705a      	strb	r2, [r3, #1]
				OLD_allocated_ip[2] = DHCP_allocated_ip[2];
 8004474:	4b33      	ldr	r3, [pc, #204]	@ (8004544 <DHCP_run+0x24c>)
 8004476:	789a      	ldrb	r2, [r3, #2]
 8004478:	4b3e      	ldr	r3, [pc, #248]	@ (8004574 <DHCP_run+0x27c>)
 800447a:	709a      	strb	r2, [r3, #2]
				OLD_allocated_ip[3] = DHCP_allocated_ip[3];
 800447c:	4b31      	ldr	r3, [pc, #196]	@ (8004544 <DHCP_run+0x24c>)
 800447e:	78da      	ldrb	r2, [r3, #3]
 8004480:	4b3c      	ldr	r3, [pc, #240]	@ (8004574 <DHCP_run+0x27c>)
 8004482:	70da      	strb	r2, [r3, #3]
				
				DHCP_XID++;
 8004484:	4b3c      	ldr	r3, [pc, #240]	@ (8004578 <DHCP_run+0x280>)
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	3301      	adds	r3, #1
 800448a:	4a3b      	ldr	r2, [pc, #236]	@ (8004578 <DHCP_run+0x280>)
 800448c:	6013      	str	r3, [r2, #0]

				send_DHCP_REQUEST();
 800448e:	f7ff f90d 	bl	80036ac <send_DHCP_REQUEST>

				reset_DHCP_timeout();
 8004492:	f000 f9b5 	bl	8004800 <reset_DHCP_timeout>

				dhcp_state = STATE_DHCP_REREQUEST;
 8004496:	4b29      	ldr	r3, [pc, #164]	@ (800453c <DHCP_run+0x244>)
 8004498:	2204      	movs	r2, #4
 800449a:	701a      	strb	r2, [r3, #0]
			}
		break;
 800449c:	e047      	b.n	800452e <DHCP_run+0x236>

		case STATE_DHCP_REREQUEST :
		   ret = DHCP_IP_LEASED;
 800449e:	2304      	movs	r3, #4
 80044a0:	71fb      	strb	r3, [r7, #7]
			if (type == DHCP_ACK) {
 80044a2:	79bb      	ldrb	r3, [r7, #6]
 80044a4:	2b05      	cmp	r3, #5
 80044a6:	d12f      	bne.n	8004508 <DHCP_run+0x210>
				dhcp_retry_count = 0;
 80044a8:	4b34      	ldr	r3, [pc, #208]	@ (800457c <DHCP_run+0x284>)
 80044aa:	2200      	movs	r2, #0
 80044ac:	701a      	strb	r2, [r3, #0]
				if (OLD_allocated_ip[0] != DHCP_allocated_ip[0] || 
 80044ae:	4b31      	ldr	r3, [pc, #196]	@ (8004574 <DHCP_run+0x27c>)
 80044b0:	781a      	ldrb	r2, [r3, #0]
 80044b2:	4b24      	ldr	r3, [pc, #144]	@ (8004544 <DHCP_run+0x24c>)
 80044b4:	781b      	ldrb	r3, [r3, #0]
 80044b6:	429a      	cmp	r2, r3
 80044b8:	d111      	bne.n	80044de <DHCP_run+0x1e6>
				    OLD_allocated_ip[1] != DHCP_allocated_ip[1] ||
 80044ba:	4b2e      	ldr	r3, [pc, #184]	@ (8004574 <DHCP_run+0x27c>)
 80044bc:	785a      	ldrb	r2, [r3, #1]
 80044be:	4b21      	ldr	r3, [pc, #132]	@ (8004544 <DHCP_run+0x24c>)
 80044c0:	785b      	ldrb	r3, [r3, #1]
				if (OLD_allocated_ip[0] != DHCP_allocated_ip[0] || 
 80044c2:	429a      	cmp	r2, r3
 80044c4:	d10b      	bne.n	80044de <DHCP_run+0x1e6>
				    OLD_allocated_ip[2] != DHCP_allocated_ip[2] ||
 80044c6:	4b2b      	ldr	r3, [pc, #172]	@ (8004574 <DHCP_run+0x27c>)
 80044c8:	789a      	ldrb	r2, [r3, #2]
 80044ca:	4b1e      	ldr	r3, [pc, #120]	@ (8004544 <DHCP_run+0x24c>)
 80044cc:	789b      	ldrb	r3, [r3, #2]
				    OLD_allocated_ip[1] != DHCP_allocated_ip[1] ||
 80044ce:	429a      	cmp	r2, r3
 80044d0:	d105      	bne.n	80044de <DHCP_run+0x1e6>
				    OLD_allocated_ip[3] != DHCP_allocated_ip[3]) 
 80044d2:	4b28      	ldr	r3, [pc, #160]	@ (8004574 <DHCP_run+0x27c>)
 80044d4:	78da      	ldrb	r2, [r3, #3]
 80044d6:	4b1b      	ldr	r3, [pc, #108]	@ (8004544 <DHCP_run+0x24c>)
 80044d8:	78db      	ldrb	r3, [r3, #3]
				    OLD_allocated_ip[2] != DHCP_allocated_ip[2] ||
 80044da:	429a      	cmp	r2, r3
 80044dc:	d008      	beq.n	80044f0 <DHCP_run+0x1f8>
				{
					ret = DHCP_IP_CHANGED;
 80044de:	2303      	movs	r3, #3
 80044e0:	71fb      	strb	r3, [r7, #7]
					dhcp_ip_update();
 80044e2:	4b27      	ldr	r3, [pc, #156]	@ (8004580 <DHCP_run+0x288>)
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	4798      	blx	r3
               #ifdef _DHCP_DEBUG_
                  printf(">IP changed.\r\n");
 80044e8:	4826      	ldr	r0, [pc, #152]	@ (8004584 <DHCP_run+0x28c>)
 80044ea:	f00a fb1b 	bl	800eb24 <puts>
 80044ee:	e005      	b.n	80044fc <DHCP_run+0x204>
					
				}
         #ifdef _DHCP_DEBUG_
            else
            	{
            	  StateChangeFlag = true;
 80044f0:	4b1d      	ldr	r3, [pc, #116]	@ (8004568 <DHCP_run+0x270>)
 80044f2:	2201      	movs	r2, #1
 80044f4:	701a      	strb	r2, [r3, #0]
            	  printf(">IP is continued.\r\n");
 80044f6:	4824      	ldr	r0, [pc, #144]	@ (8004588 <DHCP_run+0x290>)
 80044f8:	f00a fb14 	bl	800eb24 <puts>
            	}
         #endif            				
				reset_DHCP_timeout();
 80044fc:	f000 f980 	bl	8004800 <reset_DHCP_timeout>
				dhcp_state = STATE_DHCP_LEASED;
 8004500:	4b0e      	ldr	r3, [pc, #56]	@ (800453c <DHCP_run+0x244>)
 8004502:	2203      	movs	r2, #3
 8004504:	701a      	strb	r2, [r3, #0]

				reset_DHCP_timeout();

				dhcp_state = STATE_DHCP_DISCOVER;
			} else ret = check_DHCP_timeout();
	   	break;
 8004506:	e013      	b.n	8004530 <DHCP_run+0x238>
			} else if (type == DHCP_NAK) {
 8004508:	79bb      	ldrb	r3, [r7, #6]
 800450a:	2b06      	cmp	r3, #6
 800450c:	d108      	bne.n	8004520 <DHCP_run+0x228>
				printf("> Receive DHCP_NACK, Failed to maintain ip\r\n");
 800450e:	481f      	ldr	r0, [pc, #124]	@ (800458c <DHCP_run+0x294>)
 8004510:	f00a fb08 	bl	800eb24 <puts>
				reset_DHCP_timeout();
 8004514:	f000 f974 	bl	8004800 <reset_DHCP_timeout>
				dhcp_state = STATE_DHCP_DISCOVER;
 8004518:	4b08      	ldr	r3, [pc, #32]	@ (800453c <DHCP_run+0x244>)
 800451a:	2201      	movs	r2, #1
 800451c:	701a      	strb	r2, [r3, #0]
	   	break;
 800451e:	e007      	b.n	8004530 <DHCP_run+0x238>
			} else ret = check_DHCP_timeout();
 8004520:	f000 f836 	bl	8004590 <check_DHCP_timeout>
 8004524:	4603      	mov	r3, r0
 8004526:	71fb      	strb	r3, [r7, #7]
	   	break;
 8004528:	e002      	b.n	8004530 <DHCP_run+0x238>
		default :
   		break;
 800452a:	bf00      	nop
 800452c:	e000      	b.n	8004530 <DHCP_run+0x238>
		break;
 800452e:	bf00      	nop
	}

	return ret;
 8004530:	79fb      	ldrb	r3, [r7, #7]
}
 8004532:	4618      	mov	r0, r3
 8004534:	3708      	adds	r7, #8
 8004536:	46bd      	mov	sp, r7
 8004538:	bd80      	pop	{r7, pc}
 800453a:	bf00      	nop
 800453c:	20000f68 	.word	0x20000f68
 8004540:	20000f49 	.word	0x20000f49
 8004544:	20000f58 	.word	0x20000f58
 8004548:	08010ecc 	.word	0x08010ecc
 800454c:	20000f74 	.word	0x20000f74
 8004550:	08010ee4 	.word	0x08010ee4
 8004554:	200000a4 	.word	0x200000a4
 8004558:	200000ac 	.word	0x200000ac
 800455c:	08010ef8 	.word	0x08010ef8
 8004560:	20000094 	.word	0x20000094
 8004564:	20000f6c 	.word	0x20000f6c
 8004568:	20000f48 	.word	0x20000f48
 800456c:	20000ef8 	.word	0x20000ef8
 8004570:	08010f10 	.word	0x08010f10
 8004574:	20000f54 	.word	0x20000f54
 8004578:	20000f70 	.word	0x20000f70
 800457c:	20000f69 	.word	0x20000f69
 8004580:	200000a8 	.word	0x200000a8
 8004584:	08010f30 	.word	0x08010f30
 8004588:	08010f40 	.word	0x08010f40
 800458c:	08010f54 	.word	0x08010f54

08004590 <check_DHCP_timeout>:
   close(DHCP_SOCKET);
   dhcp_state = STATE_DHCP_STOP;
}

uint8_t check_DHCP_timeout(void)
{
 8004590:	b580      	push	{r7, lr}
 8004592:	b082      	sub	sp, #8
 8004594:	af00      	add	r7, sp, #0
	uint8_t ret = DHCP_RUNNING;
 8004596:	2301      	movs	r3, #1
 8004598:	71fb      	strb	r3, [r7, #7]
	
	if (dhcp_retry_count < MAX_DHCP_RETRY) {
 800459a:	4b29      	ldr	r3, [pc, #164]	@ (8004640 <check_DHCP_timeout+0xb0>)
 800459c:	f993 3000 	ldrsb.w	r3, [r3]
 80045a0:	2b01      	cmp	r3, #1
 80045a2:	dc2d      	bgt.n	8004600 <check_DHCP_timeout+0x70>
		if (dhcp_tick_next < dhcp_tick_1s) {
 80045a4:	4b27      	ldr	r3, [pc, #156]	@ (8004644 <check_DHCP_timeout+0xb4>)
 80045a6:	681a      	ldr	r2, [r3, #0]
 80045a8:	4b27      	ldr	r3, [pc, #156]	@ (8004648 <check_DHCP_timeout+0xb8>)
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	429a      	cmp	r2, r3
 80045ae:	d242      	bcs.n	8004636 <check_DHCP_timeout+0xa6>

			switch ( dhcp_state ) {
 80045b0:	4b26      	ldr	r3, [pc, #152]	@ (800464c <check_DHCP_timeout+0xbc>)
 80045b2:	f993 3000 	ldrsb.w	r3, [r3]
 80045b6:	2b04      	cmp	r3, #4
 80045b8:	d00c      	beq.n	80045d4 <check_DHCP_timeout+0x44>
 80045ba:	2b04      	cmp	r3, #4
 80045bc:	dc0d      	bgt.n	80045da <check_DHCP_timeout+0x4a>
 80045be:	2b01      	cmp	r3, #1
 80045c0:	d002      	beq.n	80045c8 <check_DHCP_timeout+0x38>
 80045c2:	2b02      	cmp	r3, #2
 80045c4:	d003      	beq.n	80045ce <check_DHCP_timeout+0x3e>
					
					send_DHCP_REQUEST();
				break;
		
				default :
				break;
 80045c6:	e008      	b.n	80045da <check_DHCP_timeout+0x4a>
					send_DHCP_DISCOVER();
 80045c8:	f7fe fea4 	bl	8003314 <send_DHCP_DISCOVER>
				break;
 80045cc:	e006      	b.n	80045dc <check_DHCP_timeout+0x4c>
					send_DHCP_REQUEST();
 80045ce:	f7ff f86d 	bl	80036ac <send_DHCP_REQUEST>
				break;
 80045d2:	e003      	b.n	80045dc <check_DHCP_timeout+0x4c>
					send_DHCP_REQUEST();
 80045d4:	f7ff f86a 	bl	80036ac <send_DHCP_REQUEST>
				break;
 80045d8:	e000      	b.n	80045dc <check_DHCP_timeout+0x4c>
				break;
 80045da:	bf00      	nop
			}

			dhcp_tick_1s = 0;
 80045dc:	4b1a      	ldr	r3, [pc, #104]	@ (8004648 <check_DHCP_timeout+0xb8>)
 80045de:	2200      	movs	r2, #0
 80045e0:	601a      	str	r2, [r3, #0]
			dhcp_tick_next = dhcp_tick_1s + DHCP_WAIT_TIME;
 80045e2:	4b19      	ldr	r3, [pc, #100]	@ (8004648 <check_DHCP_timeout+0xb8>)
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	330a      	adds	r3, #10
 80045e8:	4a16      	ldr	r2, [pc, #88]	@ (8004644 <check_DHCP_timeout+0xb4>)
 80045ea:	6013      	str	r3, [r2, #0]
			dhcp_retry_count++;
 80045ec:	4b14      	ldr	r3, [pc, #80]	@ (8004640 <check_DHCP_timeout+0xb0>)
 80045ee:	f993 3000 	ldrsb.w	r3, [r3]
 80045f2:	b2db      	uxtb	r3, r3
 80045f4:	3301      	adds	r3, #1
 80045f6:	b2db      	uxtb	r3, r3
 80045f8:	b25a      	sxtb	r2, r3
 80045fa:	4b11      	ldr	r3, [pc, #68]	@ (8004640 <check_DHCP_timeout+0xb0>)
 80045fc:	701a      	strb	r2, [r3, #0]
 80045fe:	e01a      	b.n	8004636 <check_DHCP_timeout+0xa6>
		}
	} else { // timeout occurred

		switch(dhcp_state) {
 8004600:	4b12      	ldr	r3, [pc, #72]	@ (800464c <check_DHCP_timeout+0xbc>)
 8004602:	f993 3000 	ldrsb.w	r3, [r3]
 8004606:	2b04      	cmp	r3, #4
 8004608:	d00c      	beq.n	8004624 <check_DHCP_timeout+0x94>
 800460a:	2b04      	cmp	r3, #4
 800460c:	dc10      	bgt.n	8004630 <check_DHCP_timeout+0xa0>
 800460e:	2b01      	cmp	r3, #1
 8004610:	d002      	beq.n	8004618 <check_DHCP_timeout+0x88>
 8004612:	2b02      	cmp	r3, #2
 8004614:	d006      	beq.n	8004624 <check_DHCP_timeout+0x94>
			case STATE_DHCP_REREQUEST:
				send_DHCP_DISCOVER();
				dhcp_state = STATE_DHCP_DISCOVER;
				break;
			default :
				break;
 8004616:	e00b      	b.n	8004630 <check_DHCP_timeout+0xa0>
				dhcp_state = STATE_DHCP_INIT;
 8004618:	4b0c      	ldr	r3, [pc, #48]	@ (800464c <check_DHCP_timeout+0xbc>)
 800461a:	2200      	movs	r2, #0
 800461c:	701a      	strb	r2, [r3, #0]
				ret = DHCP_FAILED;
 800461e:	2300      	movs	r3, #0
 8004620:	71fb      	strb	r3, [r7, #7]
				break;
 8004622:	e006      	b.n	8004632 <check_DHCP_timeout+0xa2>
				send_DHCP_DISCOVER();
 8004624:	f7fe fe76 	bl	8003314 <send_DHCP_DISCOVER>
				dhcp_state = STATE_DHCP_DISCOVER;
 8004628:	4b08      	ldr	r3, [pc, #32]	@ (800464c <check_DHCP_timeout+0xbc>)
 800462a:	2201      	movs	r2, #1
 800462c:	701a      	strb	r2, [r3, #0]
				break;
 800462e:	e000      	b.n	8004632 <check_DHCP_timeout+0xa2>
				break;
 8004630:	bf00      	nop
		}
		reset_DHCP_timeout();
 8004632:	f000 f8e5 	bl	8004800 <reset_DHCP_timeout>
	}
	return ret;
 8004636:	79fb      	ldrb	r3, [r7, #7]
}
 8004638:	4618      	mov	r0, r3
 800463a:	3708      	adds	r7, #8
 800463c:	46bd      	mov	sp, r7
 800463e:	bd80      	pop	{r7, pc}
 8004640:	20000f69 	.word	0x20000f69
 8004644:	20000098 	.word	0x20000098
 8004648:	20000f6c 	.word	0x20000f6c
 800464c:	20000f68 	.word	0x20000f68

08004650 <check_DHCP_leasedIP>:

int8_t check_DHCP_leasedIP(void)
{
 8004650:	b580      	push	{r7, lr}
 8004652:	b084      	sub	sp, #16
 8004654:	af02      	add	r7, sp, #8
	uint8_t tmp;
	int32_t ret;

	//WIZchip RCR value changed for ARP Timeout count control
	tmp = getRCR();
 8004656:	f44f 50d8 	mov.w	r0, #6912	@ 0x1b00
 800465a:	f002 fb1f 	bl	8006c9c <WIZCHIP_READ>
 800465e:	4603      	mov	r3, r0
 8004660:	71fb      	strb	r3, [r7, #7]
	setRCR(0x03);
 8004662:	2103      	movs	r1, #3
 8004664:	f44f 50d8 	mov.w	r0, #6912	@ 0x1b00
 8004668:	f002 fb64 	bl	8006d34 <WIZCHIP_WRITE>

	// IP conflict detection : ARP request - ARP reply
	// Broadcasting ARP Request for check the IP conflict using UDP sendto() function
	ret = sendto(DHCP_SOCKET, (uint8_t *)"CHECK_IP_CONFLICT", 17, DHCP_allocated_ip, 5000);
 800466c:	4b15      	ldr	r3, [pc, #84]	@ (80046c4 <check_DHCP_leasedIP+0x74>)
 800466e:	7818      	ldrb	r0, [r3, #0]
 8004670:	f241 3388 	movw	r3, #5000	@ 0x1388
 8004674:	9300      	str	r3, [sp, #0]
 8004676:	4b14      	ldr	r3, [pc, #80]	@ (80046c8 <check_DHCP_leasedIP+0x78>)
 8004678:	2211      	movs	r2, #17
 800467a:	4914      	ldr	r1, [pc, #80]	@ (80046cc <check_DHCP_leasedIP+0x7c>)
 800467c:	f003 fa74 	bl	8007b68 <sendto>
 8004680:	6038      	str	r0, [r7, #0]

	// RCR value restore
	setRCR(tmp);
 8004682:	79fb      	ldrb	r3, [r7, #7]
 8004684:	4619      	mov	r1, r3
 8004686:	f44f 50d8 	mov.w	r0, #6912	@ 0x1b00
 800468a:	f002 fb53 	bl	8006d34 <WIZCHIP_WRITE>

	if(ret == SOCKERR_TIMEOUT) {
 800468e:	683b      	ldr	r3, [r7, #0]
 8004690:	f113 0f0d 	cmn.w	r3, #13
 8004694:	d104      	bne.n	80046a0 <check_DHCP_leasedIP+0x50>
		// UDP send Timeout occurred : allocated IP address is unique, DHCP Success

#ifdef _DHCP_DEBUG_
		printf("\r\n> Check leased IP - OK\r\n");
 8004696:	480e      	ldr	r0, [pc, #56]	@ (80046d0 <check_DHCP_leasedIP+0x80>)
 8004698:	f00a fa44 	bl	800eb24 <puts>
#endif

		return 1;
 800469c:	2301      	movs	r3, #1
 800469e:	e00c      	b.n	80046ba <check_DHCP_leasedIP+0x6a>
	} else {
		// Received ARP reply or etc : IP address conflict occur, DHCP Failed
		send_DHCP_DECLINE();
 80046a0:	f7ff fa94 	bl	8003bcc <send_DHCP_DECLINE>

		ret = dhcp_tick_1s;
 80046a4:	4b0b      	ldr	r3, [pc, #44]	@ (80046d4 <check_DHCP_leasedIP+0x84>)
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	603b      	str	r3, [r7, #0]
		while((dhcp_tick_1s - ret) < 2) ;   // wait for 1s over; wait to complete to send DECLINE message;
 80046aa:	bf00      	nop
 80046ac:	4b09      	ldr	r3, [pc, #36]	@ (80046d4 <check_DHCP_leasedIP+0x84>)
 80046ae:	681a      	ldr	r2, [r3, #0]
 80046b0:	683b      	ldr	r3, [r7, #0]
 80046b2:	1ad3      	subs	r3, r2, r3
 80046b4:	2b01      	cmp	r3, #1
 80046b6:	d9f9      	bls.n	80046ac <check_DHCP_leasedIP+0x5c>

		return 0;
 80046b8:	2300      	movs	r3, #0
	}
}	
 80046ba:	4618      	mov	r0, r3
 80046bc:	3708      	adds	r7, #8
 80046be:	46bd      	mov	sp, r7
 80046c0:	bd80      	pop	{r7, pc}
 80046c2:	bf00      	nop
 80046c4:	20000f49 	.word	0x20000f49
 80046c8:	20000f58 	.word	0x20000f58
 80046cc:	08010f80 	.word	0x08010f80
 80046d0:	08010f94 	.word	0x08010f94
 80046d4:	20000f6c 	.word	0x20000f6c

080046d8 <DHCP_init>:

void DHCP_init(uint8_t s, uint8_t * buf)
{
 80046d8:	b580      	push	{r7, lr}
 80046da:	b084      	sub	sp, #16
 80046dc:	af00      	add	r7, sp, #0
 80046de:	4603      	mov	r3, r0
 80046e0:	6039      	str	r1, [r7, #0]
 80046e2:	71fb      	strb	r3, [r7, #7]
   uint8_t zeroip[4] = {0,0,0,0};
 80046e4:	2300      	movs	r3, #0
 80046e6:	60fb      	str	r3, [r7, #12]
   getSHAR(DHCP_CHADDR);
 80046e8:	2206      	movs	r2, #6
 80046ea:	493f      	ldr	r1, [pc, #252]	@ (80047e8 <DHCP_init+0x110>)
 80046ec:	f44f 6010 	mov.w	r0, #2304	@ 0x900
 80046f0:	f002 fb6e 	bl	8006dd0 <WIZCHIP_READ_BUF>
   if((DHCP_CHADDR[0] | DHCP_CHADDR[1]  | DHCP_CHADDR[2] | DHCP_CHADDR[3] | DHCP_CHADDR[4] | DHCP_CHADDR[5]) == 0x00)
 80046f4:	4b3c      	ldr	r3, [pc, #240]	@ (80047e8 <DHCP_init+0x110>)
 80046f6:	781a      	ldrb	r2, [r3, #0]
 80046f8:	4b3b      	ldr	r3, [pc, #236]	@ (80047e8 <DHCP_init+0x110>)
 80046fa:	785b      	ldrb	r3, [r3, #1]
 80046fc:	4313      	orrs	r3, r2
 80046fe:	b2da      	uxtb	r2, r3
 8004700:	4b39      	ldr	r3, [pc, #228]	@ (80047e8 <DHCP_init+0x110>)
 8004702:	789b      	ldrb	r3, [r3, #2]
 8004704:	4313      	orrs	r3, r2
 8004706:	b2da      	uxtb	r2, r3
 8004708:	4b37      	ldr	r3, [pc, #220]	@ (80047e8 <DHCP_init+0x110>)
 800470a:	78db      	ldrb	r3, [r3, #3]
 800470c:	4313      	orrs	r3, r2
 800470e:	b2da      	uxtb	r2, r3
 8004710:	4b35      	ldr	r3, [pc, #212]	@ (80047e8 <DHCP_init+0x110>)
 8004712:	791b      	ldrb	r3, [r3, #4]
 8004714:	4313      	orrs	r3, r2
 8004716:	b2da      	uxtb	r2, r3
 8004718:	4b33      	ldr	r3, [pc, #204]	@ (80047e8 <DHCP_init+0x110>)
 800471a:	795b      	ldrb	r3, [r3, #5]
 800471c:	4313      	orrs	r3, r2
 800471e:	b2db      	uxtb	r3, r3
 8004720:	2b00      	cmp	r3, #0
 8004722:	d117      	bne.n	8004754 <DHCP_init+0x7c>
   {
      // assigning temporary mac address, you should be set SHAR before call this function. 
      DHCP_CHADDR[0] = 0x00;
 8004724:	4b30      	ldr	r3, [pc, #192]	@ (80047e8 <DHCP_init+0x110>)
 8004726:	2200      	movs	r2, #0
 8004728:	701a      	strb	r2, [r3, #0]
      DHCP_CHADDR[1] = 0x08;
 800472a:	4b2f      	ldr	r3, [pc, #188]	@ (80047e8 <DHCP_init+0x110>)
 800472c:	2208      	movs	r2, #8
 800472e:	705a      	strb	r2, [r3, #1]
      DHCP_CHADDR[2] = 0xdc;      
 8004730:	4b2d      	ldr	r3, [pc, #180]	@ (80047e8 <DHCP_init+0x110>)
 8004732:	22dc      	movs	r2, #220	@ 0xdc
 8004734:	709a      	strb	r2, [r3, #2]
      DHCP_CHADDR[3] = 0x00;
 8004736:	4b2c      	ldr	r3, [pc, #176]	@ (80047e8 <DHCP_init+0x110>)
 8004738:	2200      	movs	r2, #0
 800473a:	70da      	strb	r2, [r3, #3]
      DHCP_CHADDR[4] = 0x00;
 800473c:	4b2a      	ldr	r3, [pc, #168]	@ (80047e8 <DHCP_init+0x110>)
 800473e:	2200      	movs	r2, #0
 8004740:	711a      	strb	r2, [r3, #4]
      DHCP_CHADDR[5] = 0x00; 
 8004742:	4b29      	ldr	r3, [pc, #164]	@ (80047e8 <DHCP_init+0x110>)
 8004744:	2200      	movs	r2, #0
 8004746:	715a      	strb	r2, [r3, #5]
      setSHAR(DHCP_CHADDR);     
 8004748:	2206      	movs	r2, #6
 800474a:	4927      	ldr	r1, [pc, #156]	@ (80047e8 <DHCP_init+0x110>)
 800474c:	f44f 6010 	mov.w	r0, #2304	@ 0x900
 8004750:	f002 fb9e 	bl	8006e90 <WIZCHIP_WRITE_BUF>
   }

	DHCP_SOCKET = s; // SOCK_DHCP
 8004754:	4a25      	ldr	r2, [pc, #148]	@ (80047ec <DHCP_init+0x114>)
 8004756:	79fb      	ldrb	r3, [r7, #7]
 8004758:	7013      	strb	r3, [r2, #0]
	pDHCPMSG = (RIP_MSG*)buf;
 800475a:	4a25      	ldr	r2, [pc, #148]	@ (80047f0 <DHCP_init+0x118>)
 800475c:	683b      	ldr	r3, [r7, #0]
 800475e:	6013      	str	r3, [r2, #0]
	DHCP_XID = 0x12345678;
 8004760:	4b24      	ldr	r3, [pc, #144]	@ (80047f4 <DHCP_init+0x11c>)
 8004762:	4a25      	ldr	r2, [pc, #148]	@ (80047f8 <DHCP_init+0x120>)
 8004764:	601a      	str	r2, [r3, #0]
	{
		DHCP_XID += DHCP_CHADDR[3];
 8004766:	4b20      	ldr	r3, [pc, #128]	@ (80047e8 <DHCP_init+0x110>)
 8004768:	78db      	ldrb	r3, [r3, #3]
 800476a:	461a      	mov	r2, r3
 800476c:	4b21      	ldr	r3, [pc, #132]	@ (80047f4 <DHCP_init+0x11c>)
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	4413      	add	r3, r2
 8004772:	4a20      	ldr	r2, [pc, #128]	@ (80047f4 <DHCP_init+0x11c>)
 8004774:	6013      	str	r3, [r2, #0]
		DHCP_XID += DHCP_CHADDR[4];
 8004776:	4b1c      	ldr	r3, [pc, #112]	@ (80047e8 <DHCP_init+0x110>)
 8004778:	791b      	ldrb	r3, [r3, #4]
 800477a:	461a      	mov	r2, r3
 800477c:	4b1d      	ldr	r3, [pc, #116]	@ (80047f4 <DHCP_init+0x11c>)
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	4413      	add	r3, r2
 8004782:	4a1c      	ldr	r2, [pc, #112]	@ (80047f4 <DHCP_init+0x11c>)
 8004784:	6013      	str	r3, [r2, #0]
		DHCP_XID += DHCP_CHADDR[5];
 8004786:	4b18      	ldr	r3, [pc, #96]	@ (80047e8 <DHCP_init+0x110>)
 8004788:	795b      	ldrb	r3, [r3, #5]
 800478a:	461a      	mov	r2, r3
 800478c:	4b19      	ldr	r3, [pc, #100]	@ (80047f4 <DHCP_init+0x11c>)
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	4413      	add	r3, r2
 8004792:	4a18      	ldr	r2, [pc, #96]	@ (80047f4 <DHCP_init+0x11c>)
 8004794:	6013      	str	r3, [r2, #0]
		DHCP_XID += (DHCP_CHADDR[3] ^ DHCP_CHADDR[4] ^ DHCP_CHADDR[5]);
 8004796:	4b14      	ldr	r3, [pc, #80]	@ (80047e8 <DHCP_init+0x110>)
 8004798:	78da      	ldrb	r2, [r3, #3]
 800479a:	4b13      	ldr	r3, [pc, #76]	@ (80047e8 <DHCP_init+0x110>)
 800479c:	791b      	ldrb	r3, [r3, #4]
 800479e:	4053      	eors	r3, r2
 80047a0:	b2da      	uxtb	r2, r3
 80047a2:	4b11      	ldr	r3, [pc, #68]	@ (80047e8 <DHCP_init+0x110>)
 80047a4:	795b      	ldrb	r3, [r3, #5]
 80047a6:	4053      	eors	r3, r2
 80047a8:	b2db      	uxtb	r3, r3
 80047aa:	461a      	mov	r2, r3
 80047ac:	4b11      	ldr	r3, [pc, #68]	@ (80047f4 <DHCP_init+0x11c>)
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	4413      	add	r3, r2
 80047b2:	4a10      	ldr	r2, [pc, #64]	@ (80047f4 <DHCP_init+0x11c>)
 80047b4:	6013      	str	r3, [r2, #0]
	}
	// WIZchip Netinfo Clear
	setSIPR(zeroip);
 80047b6:	f107 030c 	add.w	r3, r7, #12
 80047ba:	2204      	movs	r2, #4
 80047bc:	4619      	mov	r1, r3
 80047be:	f44f 6070 	mov.w	r0, #3840	@ 0xf00
 80047c2:	f002 fb65 	bl	8006e90 <WIZCHIP_WRITE_BUF>
	setGAR(zeroip);
 80047c6:	f107 030c 	add.w	r3, r7, #12
 80047ca:	2204      	movs	r2, #4
 80047cc:	4619      	mov	r1, r3
 80047ce:	f44f 7080 	mov.w	r0, #256	@ 0x100
 80047d2:	f002 fb5d 	bl	8006e90 <WIZCHIP_WRITE_BUF>

	reset_DHCP_timeout();
 80047d6:	f000 f813 	bl	8004800 <reset_DHCP_timeout>
	dhcp_state = STATE_DHCP_INIT;
 80047da:	4b08      	ldr	r3, [pc, #32]	@ (80047fc <DHCP_init+0x124>)
 80047dc:	2200      	movs	r2, #0
 80047de:	701a      	strb	r2, [r3, #0]
}
 80047e0:	bf00      	nop
 80047e2:	3710      	adds	r7, #16
 80047e4:	46bd      	mov	sp, r7
 80047e6:	bd80      	pop	{r7, pc}
 80047e8:	20000f78 	.word	0x20000f78
 80047ec:	20000f49 	.word	0x20000f49
 80047f0:	20000f74 	.word	0x20000f74
 80047f4:	20000f70 	.word	0x20000f70
 80047f8:	12345678 	.word	0x12345678
 80047fc:	20000f68 	.word	0x20000f68

08004800 <reset_DHCP_timeout>:


/* Reset the DHCP timeout count and retry count. */
void reset_DHCP_timeout(void)
{
 8004800:	b480      	push	{r7}
 8004802:	af00      	add	r7, sp, #0
	dhcp_tick_1s = 0;
 8004804:	4b06      	ldr	r3, [pc, #24]	@ (8004820 <reset_DHCP_timeout+0x20>)
 8004806:	2200      	movs	r2, #0
 8004808:	601a      	str	r2, [r3, #0]
	dhcp_tick_next = DHCP_WAIT_TIME;
 800480a:	4b06      	ldr	r3, [pc, #24]	@ (8004824 <reset_DHCP_timeout+0x24>)
 800480c:	220a      	movs	r2, #10
 800480e:	601a      	str	r2, [r3, #0]
	dhcp_retry_count = 0;
 8004810:	4b05      	ldr	r3, [pc, #20]	@ (8004828 <reset_DHCP_timeout+0x28>)
 8004812:	2200      	movs	r2, #0
 8004814:	701a      	strb	r2, [r3, #0]
}
 8004816:	bf00      	nop
 8004818:	46bd      	mov	sp, r7
 800481a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800481e:	4770      	bx	lr
 8004820:	20000f6c 	.word	0x20000f6c
 8004824:	20000098 	.word	0x20000098
 8004828:	20000f69 	.word	0x20000f69

0800482c <DHCP_time_handler>:

void DHCP_time_handler(void)
{
 800482c:	b480      	push	{r7}
 800482e:	af00      	add	r7, sp, #0
	dhcp_tick_1s++;
 8004830:	4b04      	ldr	r3, [pc, #16]	@ (8004844 <DHCP_time_handler+0x18>)
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	3301      	adds	r3, #1
 8004836:	4a03      	ldr	r2, [pc, #12]	@ (8004844 <DHCP_time_handler+0x18>)
 8004838:	6013      	str	r3, [r2, #0]
}
 800483a:	bf00      	nop
 800483c:	46bd      	mov	sp, r7
 800483e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004842:	4770      	bx	lr
 8004844:	20000f6c 	.word	0x20000f6c

08004848 <getIPfromDHCP>:

void getIPfromDHCP(uint8_t* ip)
{
 8004848:	b480      	push	{r7}
 800484a:	b083      	sub	sp, #12
 800484c:	af00      	add	r7, sp, #0
 800484e:	6078      	str	r0, [r7, #4]
	ip[0] = DHCP_allocated_ip[0];
 8004850:	4b0c      	ldr	r3, [pc, #48]	@ (8004884 <getIPfromDHCP+0x3c>)
 8004852:	781a      	ldrb	r2, [r3, #0]
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	701a      	strb	r2, [r3, #0]
	ip[1] = DHCP_allocated_ip[1];
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	3301      	adds	r3, #1
 800485c:	4a09      	ldr	r2, [pc, #36]	@ (8004884 <getIPfromDHCP+0x3c>)
 800485e:	7852      	ldrb	r2, [r2, #1]
 8004860:	701a      	strb	r2, [r3, #0]
	ip[2] = DHCP_allocated_ip[2];	
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	3302      	adds	r3, #2
 8004866:	4a07      	ldr	r2, [pc, #28]	@ (8004884 <getIPfromDHCP+0x3c>)
 8004868:	7892      	ldrb	r2, [r2, #2]
 800486a:	701a      	strb	r2, [r3, #0]
	ip[3] = DHCP_allocated_ip[3];
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	3303      	adds	r3, #3
 8004870:	4a04      	ldr	r2, [pc, #16]	@ (8004884 <getIPfromDHCP+0x3c>)
 8004872:	78d2      	ldrb	r2, [r2, #3]
 8004874:	701a      	strb	r2, [r3, #0]
}
 8004876:	bf00      	nop
 8004878:	370c      	adds	r7, #12
 800487a:	46bd      	mov	sp, r7
 800487c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004880:	4770      	bx	lr
 8004882:	bf00      	nop
 8004884:	20000f58 	.word	0x20000f58

08004888 <getGWfromDHCP>:

void getGWfromDHCP(uint8_t* ip)
{
 8004888:	b480      	push	{r7}
 800488a:	b083      	sub	sp, #12
 800488c:	af00      	add	r7, sp, #0
 800488e:	6078      	str	r0, [r7, #4]
	ip[0] =DHCP_allocated_gw[0];
 8004890:	4b0c      	ldr	r3, [pc, #48]	@ (80048c4 <getGWfromDHCP+0x3c>)
 8004892:	781a      	ldrb	r2, [r3, #0]
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	701a      	strb	r2, [r3, #0]
	ip[1] =DHCP_allocated_gw[1];
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	3301      	adds	r3, #1
 800489c:	4a09      	ldr	r2, [pc, #36]	@ (80048c4 <getGWfromDHCP+0x3c>)
 800489e:	7852      	ldrb	r2, [r2, #1]
 80048a0:	701a      	strb	r2, [r3, #0]
	ip[2] =DHCP_allocated_gw[2];
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	3302      	adds	r3, #2
 80048a6:	4a07      	ldr	r2, [pc, #28]	@ (80048c4 <getGWfromDHCP+0x3c>)
 80048a8:	7892      	ldrb	r2, [r2, #2]
 80048aa:	701a      	strb	r2, [r3, #0]
	ip[3] =DHCP_allocated_gw[3];			
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	3303      	adds	r3, #3
 80048b0:	4a04      	ldr	r2, [pc, #16]	@ (80048c4 <getGWfromDHCP+0x3c>)
 80048b2:	78d2      	ldrb	r2, [r2, #3]
 80048b4:	701a      	strb	r2, [r3, #0]
}
 80048b6:	bf00      	nop
 80048b8:	370c      	adds	r7, #12
 80048ba:	46bd      	mov	sp, r7
 80048bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c0:	4770      	bx	lr
 80048c2:	bf00      	nop
 80048c4:	20000f5c 	.word	0x20000f5c

080048c8 <getSNfromDHCP>:

void getSNfromDHCP(uint8_t* ip)
{
 80048c8:	b480      	push	{r7}
 80048ca:	b083      	sub	sp, #12
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	6078      	str	r0, [r7, #4]
   ip[0] = DHCP_allocated_sn[0];
 80048d0:	4b0c      	ldr	r3, [pc, #48]	@ (8004904 <getSNfromDHCP+0x3c>)
 80048d2:	781a      	ldrb	r2, [r3, #0]
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	701a      	strb	r2, [r3, #0]
   ip[1] = DHCP_allocated_sn[1];
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	3301      	adds	r3, #1
 80048dc:	4a09      	ldr	r2, [pc, #36]	@ (8004904 <getSNfromDHCP+0x3c>)
 80048de:	7852      	ldrb	r2, [r2, #1]
 80048e0:	701a      	strb	r2, [r3, #0]
   ip[2] = DHCP_allocated_sn[2];
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	3302      	adds	r3, #2
 80048e6:	4a07      	ldr	r2, [pc, #28]	@ (8004904 <getSNfromDHCP+0x3c>)
 80048e8:	7892      	ldrb	r2, [r2, #2]
 80048ea:	701a      	strb	r2, [r3, #0]
   ip[3] = DHCP_allocated_sn[3];         
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	3303      	adds	r3, #3
 80048f0:	4a04      	ldr	r2, [pc, #16]	@ (8004904 <getSNfromDHCP+0x3c>)
 80048f2:	78d2      	ldrb	r2, [r2, #3]
 80048f4:	701a      	strb	r2, [r3, #0]
}
 80048f6:	bf00      	nop
 80048f8:	370c      	adds	r7, #12
 80048fa:	46bd      	mov	sp, r7
 80048fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004900:	4770      	bx	lr
 8004902:	bf00      	nop
 8004904:	20000f60 	.word	0x20000f60

08004908 <getDNSfromDHCP>:

void getDNSfromDHCP(uint8_t* ip)
{
 8004908:	b480      	push	{r7}
 800490a:	b083      	sub	sp, #12
 800490c:	af00      	add	r7, sp, #0
 800490e:	6078      	str	r0, [r7, #4]
   ip[0] = DHCP_allocated_dns[0];
 8004910:	4b0c      	ldr	r3, [pc, #48]	@ (8004944 <getDNSfromDHCP+0x3c>)
 8004912:	781a      	ldrb	r2, [r3, #0]
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	701a      	strb	r2, [r3, #0]
   ip[1] = DHCP_allocated_dns[1];
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	3301      	adds	r3, #1
 800491c:	4a09      	ldr	r2, [pc, #36]	@ (8004944 <getDNSfromDHCP+0x3c>)
 800491e:	7852      	ldrb	r2, [r2, #1]
 8004920:	701a      	strb	r2, [r3, #0]
   ip[2] = DHCP_allocated_dns[2];
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	3302      	adds	r3, #2
 8004926:	4a07      	ldr	r2, [pc, #28]	@ (8004944 <getDNSfromDHCP+0x3c>)
 8004928:	7892      	ldrb	r2, [r2, #2]
 800492a:	701a      	strb	r2, [r3, #0]
   ip[3] = DHCP_allocated_dns[3];         
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	3303      	adds	r3, #3
 8004930:	4a04      	ldr	r2, [pc, #16]	@ (8004944 <getDNSfromDHCP+0x3c>)
 8004932:	78d2      	ldrb	r2, [r2, #3]
 8004934:	701a      	strb	r2, [r3, #0]
}
 8004936:	bf00      	nop
 8004938:	370c      	adds	r7, #12
 800493a:	46bd      	mov	sp, r7
 800493c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004940:	4770      	bx	lr
 8004942:	bf00      	nop
 8004944:	20000f64 	.word	0x20000f64

08004948 <NibbleToHex>:
{
	return dhcp_lease_time;
}

char NibbleToHex(uint8_t nibble)
{
 8004948:	b480      	push	{r7}
 800494a:	b083      	sub	sp, #12
 800494c:	af00      	add	r7, sp, #0
 800494e:	4603      	mov	r3, r0
 8004950:	71fb      	strb	r3, [r7, #7]
  nibble &= 0x0F;
 8004952:	79fb      	ldrb	r3, [r7, #7]
 8004954:	f003 030f 	and.w	r3, r3, #15
 8004958:	71fb      	strb	r3, [r7, #7]
  if (nibble <= 9)
 800495a:	79fb      	ldrb	r3, [r7, #7]
 800495c:	2b09      	cmp	r3, #9
 800495e:	d803      	bhi.n	8004968 <NibbleToHex+0x20>
    return nibble + '0';
 8004960:	79fb      	ldrb	r3, [r7, #7]
 8004962:	3330      	adds	r3, #48	@ 0x30
 8004964:	b2db      	uxtb	r3, r3
 8004966:	e002      	b.n	800496e <NibbleToHex+0x26>
  else 
    return nibble + ('A'-0x0A);
 8004968:	79fb      	ldrb	r3, [r7, #7]
 800496a:	3337      	adds	r3, #55	@ 0x37
 800496c:	b2db      	uxtb	r3, r3
}
 800496e:	4618      	mov	r0, r3
 8004970:	370c      	adds	r7, #12
 8004972:	46bd      	mov	sp, r7
 8004974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004978:	4770      	bx	lr

0800497a <get16>:
uint32_t dns_1s_tick;   // for timout of DNS processing
static uint8_t retry_count;

/* converts uint16_t from network buffer to a host byte order integer. */
uint16_t get16(uint8_t * s)
{
 800497a:	b480      	push	{r7}
 800497c:	b085      	sub	sp, #20
 800497e:	af00      	add	r7, sp, #0
 8004980:	6078      	str	r0, [r7, #4]
	uint16_t i;
	i = *s++ << 8;
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	1c5a      	adds	r2, r3, #1
 8004986:	607a      	str	r2, [r7, #4]
 8004988:	781b      	ldrb	r3, [r3, #0]
 800498a:	021b      	lsls	r3, r3, #8
 800498c:	81fb      	strh	r3, [r7, #14]
	i = i + *s;
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	781b      	ldrb	r3, [r3, #0]
 8004992:	461a      	mov	r2, r3
 8004994:	89fb      	ldrh	r3, [r7, #14]
 8004996:	4413      	add	r3, r2
 8004998:	81fb      	strh	r3, [r7, #14]
	return i;
 800499a:	89fb      	ldrh	r3, [r7, #14]
}
 800499c:	4618      	mov	r0, r3
 800499e:	3714      	adds	r7, #20
 80049a0:	46bd      	mov	sp, r7
 80049a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a6:	4770      	bx	lr

080049a8 <put16>:

/* copies uint16_t to the network buffer with network byte order. */
uint8_t * put16(uint8_t * s, uint16_t i)
{
 80049a8:	b480      	push	{r7}
 80049aa:	b083      	sub	sp, #12
 80049ac:	af00      	add	r7, sp, #0
 80049ae:	6078      	str	r0, [r7, #4]
 80049b0:	460b      	mov	r3, r1
 80049b2:	807b      	strh	r3, [r7, #2]
	*s++ = i >> 8;
 80049b4:	887b      	ldrh	r3, [r7, #2]
 80049b6:	0a1b      	lsrs	r3, r3, #8
 80049b8:	b299      	uxth	r1, r3
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	1c5a      	adds	r2, r3, #1
 80049be:	607a      	str	r2, [r7, #4]
 80049c0:	b2ca      	uxtb	r2, r1
 80049c2:	701a      	strb	r2, [r3, #0]
	*s++ = i;
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	1c5a      	adds	r2, r3, #1
 80049c8:	607a      	str	r2, [r7, #4]
 80049ca:	887a      	ldrh	r2, [r7, #2]
 80049cc:	b2d2      	uxtb	r2, r2
 80049ce:	701a      	strb	r2, [r3, #0]
	return s;
 80049d0:	687b      	ldr	r3, [r7, #4]
}
 80049d2:	4618      	mov	r0, r3
 80049d4:	370c      	adds	r7, #12
 80049d6:	46bd      	mov	sp, r7
 80049d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049dc:	4770      	bx	lr

080049de <parse_name>:
 *               buf        - is a pointer to the buffer for the human-readable form name.
 *               len        - is the MAX. size of buffer.
 * Returns     : the length of compressed message
 */
int parse_name(uint8_t * msg, uint8_t * compressed, char * buf, int16_t len)
{
 80049de:	b480      	push	{r7}
 80049e0:	b08b      	sub	sp, #44	@ 0x2c
 80049e2:	af00      	add	r7, sp, #0
 80049e4:	60f8      	str	r0, [r7, #12]
 80049e6:	60b9      	str	r1, [r7, #8]
 80049e8:	607a      	str	r2, [r7, #4]
 80049ea:	807b      	strh	r3, [r7, #2]
	uint16_t slen;		/* Length of current segment */
	uint8_t * cp;
	int clen = 0;		/* Total length of compressed name */
 80049ec:	2300      	movs	r3, #0
 80049ee:	61fb      	str	r3, [r7, #28]
	int indirect = 0;	/* Set if indirection encountered */
 80049f0:	2300      	movs	r3, #0
 80049f2:	61bb      	str	r3, [r7, #24]
	int nseg = 0;		/* Total number of segments in name */
 80049f4:	2300      	movs	r3, #0
 80049f6:	617b      	str	r3, [r7, #20]

	cp = compressed;
 80049f8:	68bb      	ldr	r3, [r7, #8]
 80049fa:	623b      	str	r3, [r7, #32]

	for (;;)
	{
		slen = *cp++;	/* Length of this segment */
 80049fc:	6a3b      	ldr	r3, [r7, #32]
 80049fe:	1c5a      	adds	r2, r3, #1
 8004a00:	623a      	str	r2, [r7, #32]
 8004a02:	781b      	ldrb	r3, [r3, #0]
 8004a04:	84fb      	strh	r3, [r7, #38]	@ 0x26

		if (!indirect) clen++;
 8004a06:	69bb      	ldr	r3, [r7, #24]
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d102      	bne.n	8004a12 <parse_name+0x34>
 8004a0c:	69fb      	ldr	r3, [r7, #28]
 8004a0e:	3301      	adds	r3, #1
 8004a10:	61fb      	str	r3, [r7, #28]

		if ((slen & 0xc0) == 0xc0)
 8004a12:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8004a14:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8004a18:	2bc0      	cmp	r3, #192	@ 0xc0
 8004a1a:	d117      	bne.n	8004a4c <parse_name+0x6e>
		{
			if (!indirect)
 8004a1c:	69bb      	ldr	r3, [r7, #24]
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d102      	bne.n	8004a28 <parse_name+0x4a>
				clen++;
 8004a22:	69fb      	ldr	r3, [r7, #28]
 8004a24:	3301      	adds	r3, #1
 8004a26:	61fb      	str	r3, [r7, #28]
			indirect = 1;
 8004a28:	2301      	movs	r3, #1
 8004a2a:	61bb      	str	r3, [r7, #24]
			/* Follow indirection */
			cp = &msg[((slen & 0x3f)<<8) + *cp];
 8004a2c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8004a2e:	021b      	lsls	r3, r3, #8
 8004a30:	f403 537c 	and.w	r3, r3, #16128	@ 0x3f00
 8004a34:	6a3a      	ldr	r2, [r7, #32]
 8004a36:	7812      	ldrb	r2, [r2, #0]
 8004a38:	4413      	add	r3, r2
 8004a3a:	461a      	mov	r2, r3
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	4413      	add	r3, r2
 8004a40:	623b      	str	r3, [r7, #32]
			slen = *cp++;
 8004a42:	6a3b      	ldr	r3, [r7, #32]
 8004a44:	1c5a      	adds	r2, r3, #1
 8004a46:	623a      	str	r2, [r7, #32]
 8004a48:	781b      	ldrb	r3, [r3, #0]
 8004a4a:	84fb      	strh	r3, [r7, #38]	@ 0x26
		}

		if (slen == 0)	/* zero length == all done */
 8004a4c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d02b      	beq.n	8004aaa <parse_name+0xcc>
			break;

		len -= slen + 1;
 8004a52:	887a      	ldrh	r2, [r7, #2]
 8004a54:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8004a56:	1ad3      	subs	r3, r2, r3
 8004a58:	b29b      	uxth	r3, r3
 8004a5a:	3b01      	subs	r3, #1
 8004a5c:	b29b      	uxth	r3, r3
 8004a5e:	807b      	strh	r3, [r7, #2]

		if (len < 0) return -1;
 8004a60:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	da02      	bge.n	8004a6e <parse_name+0x90>
 8004a68:	f04f 33ff 	mov.w	r3, #4294967295
 8004a6c:	e038      	b.n	8004ae0 <parse_name+0x102>

		if (!indirect) clen += slen;
 8004a6e:	69bb      	ldr	r3, [r7, #24]
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d10c      	bne.n	8004a8e <parse_name+0xb0>
 8004a74:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8004a76:	69fa      	ldr	r2, [r7, #28]
 8004a78:	4413      	add	r3, r2
 8004a7a:	61fb      	str	r3, [r7, #28]

		while (slen-- != 0) *buf++ = (char)*cp++;
 8004a7c:	e007      	b.n	8004a8e <parse_name+0xb0>
 8004a7e:	6a3a      	ldr	r2, [r7, #32]
 8004a80:	1c53      	adds	r3, r2, #1
 8004a82:	623b      	str	r3, [r7, #32]
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	1c59      	adds	r1, r3, #1
 8004a88:	6079      	str	r1, [r7, #4]
 8004a8a:	7812      	ldrb	r2, [r2, #0]
 8004a8c:	701a      	strb	r2, [r3, #0]
 8004a8e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8004a90:	1e5a      	subs	r2, r3, #1
 8004a92:	84fa      	strh	r2, [r7, #38]	@ 0x26
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d1f2      	bne.n	8004a7e <parse_name+0xa0>
		*buf++ = '.';
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	1c5a      	adds	r2, r3, #1
 8004a9c:	607a      	str	r2, [r7, #4]
 8004a9e:	222e      	movs	r2, #46	@ 0x2e
 8004aa0:	701a      	strb	r2, [r3, #0]
		nseg++;
 8004aa2:	697b      	ldr	r3, [r7, #20]
 8004aa4:	3301      	adds	r3, #1
 8004aa6:	617b      	str	r3, [r7, #20]
		slen = *cp++;	/* Length of this segment */
 8004aa8:	e7a8      	b.n	80049fc <parse_name+0x1e>
			break;
 8004aaa:	bf00      	nop
	}

	if (nseg == 0)
 8004aac:	697b      	ldr	r3, [r7, #20]
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d10a      	bne.n	8004ac8 <parse_name+0xea>
	{
		/* Root name; represent as single dot */
		*buf++ = '.';
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	1c5a      	adds	r2, r3, #1
 8004ab6:	607a      	str	r2, [r7, #4]
 8004ab8:	222e      	movs	r2, #46	@ 0x2e
 8004aba:	701a      	strb	r2, [r3, #0]
		len--;
 8004abc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004ac0:	b29b      	uxth	r3, r3
 8004ac2:	3b01      	subs	r3, #1
 8004ac4:	b29b      	uxth	r3, r3
 8004ac6:	807b      	strh	r3, [r7, #2]
	}

	*buf++ = '\0';
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	1c5a      	adds	r2, r3, #1
 8004acc:	607a      	str	r2, [r7, #4]
 8004ace:	2200      	movs	r2, #0
 8004ad0:	701a      	strb	r2, [r3, #0]
	len--;
 8004ad2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004ad6:	b29b      	uxth	r3, r3
 8004ad8:	3b01      	subs	r3, #1
 8004ada:	b29b      	uxth	r3, r3
 8004adc:	807b      	strh	r3, [r7, #2]

	return clen;	/* Length of compressed message */
 8004ade:	69fb      	ldr	r3, [r7, #28]
}
 8004ae0:	4618      	mov	r0, r3
 8004ae2:	372c      	adds	r7, #44	@ 0x2c
 8004ae4:	46bd      	mov	sp, r7
 8004ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aea:	4770      	bx	lr

08004aec <dns_question>:
 * Arguments   : msg - is a pointer to the reply message
 *               cp  - is a pointer to the qeustion record.
 * Returns     : a pointer the to next record.
 */
uint8_t * dns_question(uint8_t * msg, uint8_t * cp)
{
 8004aec:	b580      	push	{r7, lr}
 8004aee:	b0b4      	sub	sp, #208	@ 0xd0
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	6078      	str	r0, [r7, #4]
 8004af4:	6039      	str	r1, [r7, #0]
	int len;
	char name[MAXCNAME];

	len = parse_name(msg, cp, name, MAXCNAME);
 8004af6:	f107 020c 	add.w	r2, r7, #12
 8004afa:	23c0      	movs	r3, #192	@ 0xc0
 8004afc:	6839      	ldr	r1, [r7, #0]
 8004afe:	6878      	ldr	r0, [r7, #4]
 8004b00:	f7ff ff6d 	bl	80049de <parse_name>
 8004b04:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc


	if (len == -1) return 0;
 8004b08:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004b0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b10:	d101      	bne.n	8004b16 <dns_question+0x2a>
 8004b12:	2300      	movs	r3, #0
 8004b14:	e00b      	b.n	8004b2e <dns_question+0x42>

	cp += len;
 8004b16:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004b1a:	683a      	ldr	r2, [r7, #0]
 8004b1c:	4413      	add	r3, r2
 8004b1e:	603b      	str	r3, [r7, #0]
	cp += 2;		/* type */
 8004b20:	683b      	ldr	r3, [r7, #0]
 8004b22:	3302      	adds	r3, #2
 8004b24:	603b      	str	r3, [r7, #0]
	cp += 2;		/* class */
 8004b26:	683b      	ldr	r3, [r7, #0]
 8004b28:	3302      	adds	r3, #2
 8004b2a:	603b      	str	r3, [r7, #0]

	return cp;
 8004b2c:	683b      	ldr	r3, [r7, #0]
}
 8004b2e:	4618      	mov	r0, r3
 8004b30:	37d0      	adds	r7, #208	@ 0xd0
 8004b32:	46bd      	mov	sp, r7
 8004b34:	bd80      	pop	{r7, pc}

08004b36 <dns_answer>:
 * Arguments   : msg - is a pointer to the reply message
 *               cp  - is a pointer to the answer record.
 * Returns     : a pointer the to next record.
 */
uint8_t * dns_answer(uint8_t * msg, uint8_t * cp, uint8_t * ip_from_dns)
{
 8004b36:	b580      	push	{r7, lr}
 8004b38:	b0b6      	sub	sp, #216	@ 0xd8
 8004b3a:	af00      	add	r7, sp, #0
 8004b3c:	60f8      	str	r0, [r7, #12]
 8004b3e:	60b9      	str	r1, [r7, #8]
 8004b40:	607a      	str	r2, [r7, #4]
	int len, type;
	char name[MAXCNAME];

	len = parse_name(msg, cp, name, MAXCNAME);
 8004b42:	f107 0210 	add.w	r2, r7, #16
 8004b46:	23c0      	movs	r3, #192	@ 0xc0
 8004b48:	68b9      	ldr	r1, [r7, #8]
 8004b4a:	68f8      	ldr	r0, [r7, #12]
 8004b4c:	f7ff ff47 	bl	80049de <parse_name>
 8004b50:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4

	if (len == -1) return 0;
 8004b54:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004b58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b5c:	d101      	bne.n	8004b62 <dns_answer+0x2c>
 8004b5e:	2300      	movs	r3, #0
 8004b60:	e0f9      	b.n	8004d56 <dns_answer+0x220>

	cp += len;
 8004b62:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004b66:	68ba      	ldr	r2, [r7, #8]
 8004b68:	4413      	add	r3, r2
 8004b6a:	60bb      	str	r3, [r7, #8]
	type = get16(cp);
 8004b6c:	68b8      	ldr	r0, [r7, #8]
 8004b6e:	f7ff ff04 	bl	800497a <get16>
 8004b72:	4603      	mov	r3, r0
 8004b74:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
	cp += 2;		/* type */
 8004b78:	68bb      	ldr	r3, [r7, #8]
 8004b7a:	3302      	adds	r3, #2
 8004b7c:	60bb      	str	r3, [r7, #8]
	cp += 2;		/* class */
 8004b7e:	68bb      	ldr	r3, [r7, #8]
 8004b80:	3302      	adds	r3, #2
 8004b82:	60bb      	str	r3, [r7, #8]
	cp += 4;		/* ttl */
 8004b84:	68bb      	ldr	r3, [r7, #8]
 8004b86:	3304      	adds	r3, #4
 8004b88:	60bb      	str	r3, [r7, #8]
	cp += 2;		/* len */
 8004b8a:	68bb      	ldr	r3, [r7, #8]
 8004b8c:	3302      	adds	r3, #2
 8004b8e:	60bb      	str	r3, [r7, #8]


	switch (type)
 8004b90:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8004b94:	2b10      	cmp	r3, #16
 8004b96:	f000 80da 	beq.w	8004d4e <dns_answer+0x218>
 8004b9a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8004b9e:	2b10      	cmp	r3, #16
 8004ba0:	f300 80d7 	bgt.w	8004d52 <dns_answer+0x21c>
 8004ba4:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8004ba8:	2b0f      	cmp	r3, #15
 8004baa:	d07d      	beq.n	8004ca8 <dns_answer+0x172>
 8004bac:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8004bb0:	2b0f      	cmp	r3, #15
 8004bb2:	f300 80ce 	bgt.w	8004d52 <dns_answer+0x21c>
 8004bb6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8004bba:	2b0c      	cmp	r3, #12
 8004bbc:	dc26      	bgt.n	8004c0c <dns_answer+0xd6>
 8004bbe:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	f340 80c5 	ble.w	8004d52 <dns_answer+0x21c>
 8004bc8:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8004bcc:	2201      	movs	r2, #1
 8004bce:	fa02 f303 	lsl.w	r3, r2, r3
 8004bd2:	f241 32a4 	movw	r2, #5028	@ 0x13a4
 8004bd6:	401a      	ands	r2, r3
 8004bd8:	2a00      	cmp	r2, #0
 8004bda:	bf14      	ite	ne
 8004bdc:	2201      	movne	r2, #1
 8004bde:	2200      	moveq	r2, #0
 8004be0:	b2d2      	uxtb	r2, r2
 8004be2:	2a00      	cmp	r2, #0
 8004be4:	d133      	bne.n	8004c4e <dns_answer+0x118>
 8004be6:	f003 0240 	and.w	r2, r3, #64	@ 0x40
 8004bea:	2a00      	cmp	r2, #0
 8004bec:	bf14      	ite	ne
 8004bee:	2201      	movne	r2, #1
 8004bf0:	2200      	moveq	r2, #0
 8004bf2:	b2d2      	uxtb	r2, r2
 8004bf4:	2a00      	cmp	r2, #0
 8004bf6:	d170      	bne.n	8004cda <dns_answer+0x1a4>
 8004bf8:	f003 0302 	and.w	r3, r3, #2
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	bf14      	ite	ne
 8004c00:	2301      	movne	r3, #1
 8004c02:	2300      	moveq	r3, #0
 8004c04:	b2db      	uxtb	r3, r3
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d105      	bne.n	8004c16 <dns_answer+0xe0>
	case TYPE_TXT:
		/* Just stash */
		break;
	default:
		/* Ignore */
		break;
 8004c0a:	e0a2      	b.n	8004d52 <dns_answer+0x21c>
	switch (type)
 8004c0c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8004c10:	2b0d      	cmp	r3, #13
 8004c12:	d032      	beq.n	8004c7a <dns_answer+0x144>
		break;
 8004c14:	e09d      	b.n	8004d52 <dns_answer+0x21c>
		ip_from_dns[0] = *cp++;
 8004c16:	68bb      	ldr	r3, [r7, #8]
 8004c18:	1c5a      	adds	r2, r3, #1
 8004c1a:	60ba      	str	r2, [r7, #8]
 8004c1c:	781a      	ldrb	r2, [r3, #0]
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	701a      	strb	r2, [r3, #0]
		ip_from_dns[1] = *cp++;
 8004c22:	68bb      	ldr	r3, [r7, #8]
 8004c24:	1c5a      	adds	r2, r3, #1
 8004c26:	60ba      	str	r2, [r7, #8]
 8004c28:	687a      	ldr	r2, [r7, #4]
 8004c2a:	3201      	adds	r2, #1
 8004c2c:	781b      	ldrb	r3, [r3, #0]
 8004c2e:	7013      	strb	r3, [r2, #0]
		ip_from_dns[2] = *cp++;
 8004c30:	68bb      	ldr	r3, [r7, #8]
 8004c32:	1c5a      	adds	r2, r3, #1
 8004c34:	60ba      	str	r2, [r7, #8]
 8004c36:	687a      	ldr	r2, [r7, #4]
 8004c38:	3202      	adds	r2, #2
 8004c3a:	781b      	ldrb	r3, [r3, #0]
 8004c3c:	7013      	strb	r3, [r2, #0]
		ip_from_dns[3] = *cp++;
 8004c3e:	68bb      	ldr	r3, [r7, #8]
 8004c40:	1c5a      	adds	r2, r3, #1
 8004c42:	60ba      	str	r2, [r7, #8]
 8004c44:	687a      	ldr	r2, [r7, #4]
 8004c46:	3203      	adds	r2, #3
 8004c48:	781b      	ldrb	r3, [r3, #0]
 8004c4a:	7013      	strb	r3, [r2, #0]
		break;
 8004c4c:	e082      	b.n	8004d54 <dns_answer+0x21e>
		len = parse_name(msg, cp, name, MAXCNAME);
 8004c4e:	f107 0210 	add.w	r2, r7, #16
 8004c52:	23c0      	movs	r3, #192	@ 0xc0
 8004c54:	68b9      	ldr	r1, [r7, #8]
 8004c56:	68f8      	ldr	r0, [r7, #12]
 8004c58:	f7ff fec1 	bl	80049de <parse_name>
 8004c5c:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4
		if (len == -1) return 0;
 8004c60:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004c64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c68:	d101      	bne.n	8004c6e <dns_answer+0x138>
 8004c6a:	2300      	movs	r3, #0
 8004c6c:	e073      	b.n	8004d56 <dns_answer+0x220>
		cp += len;
 8004c6e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004c72:	68ba      	ldr	r2, [r7, #8]
 8004c74:	4413      	add	r3, r2
 8004c76:	60bb      	str	r3, [r7, #8]
		break;
 8004c78:	e06c      	b.n	8004d54 <dns_answer+0x21e>
		len = *cp++;
 8004c7a:	68bb      	ldr	r3, [r7, #8]
 8004c7c:	1c5a      	adds	r2, r3, #1
 8004c7e:	60ba      	str	r2, [r7, #8]
 8004c80:	781b      	ldrb	r3, [r3, #0]
 8004c82:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
		cp += len;
 8004c86:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004c8a:	68ba      	ldr	r2, [r7, #8]
 8004c8c:	4413      	add	r3, r2
 8004c8e:	60bb      	str	r3, [r7, #8]
		len = *cp++;
 8004c90:	68bb      	ldr	r3, [r7, #8]
 8004c92:	1c5a      	adds	r2, r3, #1
 8004c94:	60ba      	str	r2, [r7, #8]
 8004c96:	781b      	ldrb	r3, [r3, #0]
 8004c98:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
		cp += len;
 8004c9c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004ca0:	68ba      	ldr	r2, [r7, #8]
 8004ca2:	4413      	add	r3, r2
 8004ca4:	60bb      	str	r3, [r7, #8]
		break;
 8004ca6:	e055      	b.n	8004d54 <dns_answer+0x21e>
		cp += 2;
 8004ca8:	68bb      	ldr	r3, [r7, #8]
 8004caa:	3302      	adds	r3, #2
 8004cac:	60bb      	str	r3, [r7, #8]
		len = parse_name(msg, cp, name, MAXCNAME);
 8004cae:	f107 0210 	add.w	r2, r7, #16
 8004cb2:	23c0      	movs	r3, #192	@ 0xc0
 8004cb4:	68b9      	ldr	r1, [r7, #8]
 8004cb6:	68f8      	ldr	r0, [r7, #12]
 8004cb8:	f7ff fe91 	bl	80049de <parse_name>
 8004cbc:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4
		if (len == -1) return 0;
 8004cc0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004cc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cc8:	d101      	bne.n	8004cce <dns_answer+0x198>
 8004cca:	2300      	movs	r3, #0
 8004ccc:	e043      	b.n	8004d56 <dns_answer+0x220>
		cp += len;
 8004cce:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004cd2:	68ba      	ldr	r2, [r7, #8]
 8004cd4:	4413      	add	r3, r2
 8004cd6:	60bb      	str	r3, [r7, #8]
		break;
 8004cd8:	e03c      	b.n	8004d54 <dns_answer+0x21e>
		len = parse_name(msg, cp, name, MAXCNAME);
 8004cda:	f107 0210 	add.w	r2, r7, #16
 8004cde:	23c0      	movs	r3, #192	@ 0xc0
 8004ce0:	68b9      	ldr	r1, [r7, #8]
 8004ce2:	68f8      	ldr	r0, [r7, #12]
 8004ce4:	f7ff fe7b 	bl	80049de <parse_name>
 8004ce8:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4
		if (len == -1) return 0;
 8004cec:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004cf0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cf4:	d101      	bne.n	8004cfa <dns_answer+0x1c4>
 8004cf6:	2300      	movs	r3, #0
 8004cf8:	e02d      	b.n	8004d56 <dns_answer+0x220>
		cp += len;
 8004cfa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004cfe:	68ba      	ldr	r2, [r7, #8]
 8004d00:	4413      	add	r3, r2
 8004d02:	60bb      	str	r3, [r7, #8]
		len = parse_name(msg, cp, name, MAXCNAME);
 8004d04:	f107 0210 	add.w	r2, r7, #16
 8004d08:	23c0      	movs	r3, #192	@ 0xc0
 8004d0a:	68b9      	ldr	r1, [r7, #8]
 8004d0c:	68f8      	ldr	r0, [r7, #12]
 8004d0e:	f7ff fe66 	bl	80049de <parse_name>
 8004d12:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4
		if (len == -1) return 0;
 8004d16:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004d1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d1e:	d101      	bne.n	8004d24 <dns_answer+0x1ee>
 8004d20:	2300      	movs	r3, #0
 8004d22:	e018      	b.n	8004d56 <dns_answer+0x220>
		cp += len;
 8004d24:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004d28:	68ba      	ldr	r2, [r7, #8]
 8004d2a:	4413      	add	r3, r2
 8004d2c:	60bb      	str	r3, [r7, #8]
		cp += 4;
 8004d2e:	68bb      	ldr	r3, [r7, #8]
 8004d30:	3304      	adds	r3, #4
 8004d32:	60bb      	str	r3, [r7, #8]
		cp += 4;
 8004d34:	68bb      	ldr	r3, [r7, #8]
 8004d36:	3304      	adds	r3, #4
 8004d38:	60bb      	str	r3, [r7, #8]
		cp += 4;
 8004d3a:	68bb      	ldr	r3, [r7, #8]
 8004d3c:	3304      	adds	r3, #4
 8004d3e:	60bb      	str	r3, [r7, #8]
		cp += 4;
 8004d40:	68bb      	ldr	r3, [r7, #8]
 8004d42:	3304      	adds	r3, #4
 8004d44:	60bb      	str	r3, [r7, #8]
		cp += 4;
 8004d46:	68bb      	ldr	r3, [r7, #8]
 8004d48:	3304      	adds	r3, #4
 8004d4a:	60bb      	str	r3, [r7, #8]
		break;
 8004d4c:	e002      	b.n	8004d54 <dns_answer+0x21e>
		break;
 8004d4e:	bf00      	nop
 8004d50:	e000      	b.n	8004d54 <dns_answer+0x21e>
		break;
 8004d52:	bf00      	nop
	}

	return cp;
 8004d54:	68bb      	ldr	r3, [r7, #8]
}
 8004d56:	4618      	mov	r0, r3
 8004d58:	37d8      	adds	r7, #216	@ 0xd8
 8004d5a:	46bd      	mov	sp, r7
 8004d5c:	bd80      	pop	{r7, pc}

08004d5e <parseDNSMSG>:
 * Returns     : -1 - Domain name lenght is too big
 *                0 - Fail (Timout or parse error)
 *                1 - Success,
 */
int8_t parseDNSMSG(struct dhdr * pdhdr, uint8_t * pbuf, uint8_t * ip_from_dns)
{
 8004d5e:	b580      	push	{r7, lr}
 8004d60:	b088      	sub	sp, #32
 8004d62:	af00      	add	r7, sp, #0
 8004d64:	60f8      	str	r0, [r7, #12]
 8004d66:	60b9      	str	r1, [r7, #8]
 8004d68:	607a      	str	r2, [r7, #4]
	uint16_t tmp;
	uint16_t i;
	uint8_t * msg;
	uint8_t * cp;

	msg = pbuf;
 8004d6a:	68bb      	ldr	r3, [r7, #8]
 8004d6c:	617b      	str	r3, [r7, #20]
	memset(pdhdr, 0, sizeof(*pdhdr));
 8004d6e:	2212      	movs	r2, #18
 8004d70:	2100      	movs	r1, #0
 8004d72:	68f8      	ldr	r0, [r7, #12]
 8004d74:	f009 ffb6 	bl	800ece4 <memset>

	pdhdr->id = get16(&msg[0]);
 8004d78:	6978      	ldr	r0, [r7, #20]
 8004d7a:	f7ff fdfe 	bl	800497a <get16>
 8004d7e:	4603      	mov	r3, r0
 8004d80:	461a      	mov	r2, r3
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	801a      	strh	r2, [r3, #0]
	tmp = get16(&msg[2]);
 8004d86:	697b      	ldr	r3, [r7, #20]
 8004d88:	3302      	adds	r3, #2
 8004d8a:	4618      	mov	r0, r3
 8004d8c:	f7ff fdf5 	bl	800497a <get16>
 8004d90:	4603      	mov	r3, r0
 8004d92:	827b      	strh	r3, [r7, #18]
	if (tmp & 0x8000) pdhdr->qr = 1;
 8004d94:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	da02      	bge.n	8004da2 <parseDNSMSG+0x44>
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	2201      	movs	r2, #1
 8004da0:	709a      	strb	r2, [r3, #2]

	pdhdr->opcode = (tmp >> 11) & 0xf;
 8004da2:	8a7b      	ldrh	r3, [r7, #18]
 8004da4:	0adb      	lsrs	r3, r3, #11
 8004da6:	b29b      	uxth	r3, r3
 8004da8:	b2db      	uxtb	r3, r3
 8004daa:	f003 030f 	and.w	r3, r3, #15
 8004dae:	b2da      	uxtb	r2, r3
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	70da      	strb	r2, [r3, #3]

	if (tmp & 0x0400) pdhdr->aa = 1;
 8004db4:	8a7b      	ldrh	r3, [r7, #18]
 8004db6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d002      	beq.n	8004dc4 <parseDNSMSG+0x66>
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	2201      	movs	r2, #1
 8004dc2:	711a      	strb	r2, [r3, #4]
	if (tmp & 0x0200) pdhdr->tc = 1;
 8004dc4:	8a7b      	ldrh	r3, [r7, #18]
 8004dc6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d002      	beq.n	8004dd4 <parseDNSMSG+0x76>
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	2201      	movs	r2, #1
 8004dd2:	715a      	strb	r2, [r3, #5]
	if (tmp & 0x0100) pdhdr->rd = 1;
 8004dd4:	8a7b      	ldrh	r3, [r7, #18]
 8004dd6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d002      	beq.n	8004de4 <parseDNSMSG+0x86>
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	2201      	movs	r2, #1
 8004de2:	719a      	strb	r2, [r3, #6]
	if (tmp & 0x0080) pdhdr->ra = 1;
 8004de4:	8a7b      	ldrh	r3, [r7, #18]
 8004de6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d002      	beq.n	8004df4 <parseDNSMSG+0x96>
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	2201      	movs	r2, #1
 8004df2:	71da      	strb	r2, [r3, #7]

	pdhdr->rcode = tmp & 0xf;
 8004df4:	8a7b      	ldrh	r3, [r7, #18]
 8004df6:	b2db      	uxtb	r3, r3
 8004df8:	f003 030f 	and.w	r3, r3, #15
 8004dfc:	b2da      	uxtb	r2, r3
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	721a      	strb	r2, [r3, #8]
	pdhdr->qdcount = get16(&msg[4]);
 8004e02:	697b      	ldr	r3, [r7, #20]
 8004e04:	3304      	adds	r3, #4
 8004e06:	4618      	mov	r0, r3
 8004e08:	f7ff fdb7 	bl	800497a <get16>
 8004e0c:	4603      	mov	r3, r0
 8004e0e:	461a      	mov	r2, r3
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	815a      	strh	r2, [r3, #10]
	pdhdr->ancount = get16(&msg[6]);
 8004e14:	697b      	ldr	r3, [r7, #20]
 8004e16:	3306      	adds	r3, #6
 8004e18:	4618      	mov	r0, r3
 8004e1a:	f7ff fdae 	bl	800497a <get16>
 8004e1e:	4603      	mov	r3, r0
 8004e20:	461a      	mov	r2, r3
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	819a      	strh	r2, [r3, #12]
	pdhdr->nscount = get16(&msg[8]);
 8004e26:	697b      	ldr	r3, [r7, #20]
 8004e28:	3308      	adds	r3, #8
 8004e2a:	4618      	mov	r0, r3
 8004e2c:	f7ff fda5 	bl	800497a <get16>
 8004e30:	4603      	mov	r3, r0
 8004e32:	461a      	mov	r2, r3
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	81da      	strh	r2, [r3, #14]
	pdhdr->arcount = get16(&msg[10]);
 8004e38:	697b      	ldr	r3, [r7, #20]
 8004e3a:	330a      	adds	r3, #10
 8004e3c:	4618      	mov	r0, r3
 8004e3e:	f7ff fd9c 	bl	800497a <get16>
 8004e42:	4603      	mov	r3, r0
 8004e44:	461a      	mov	r2, r3
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	821a      	strh	r2, [r3, #16]


	/* Now parse the variable length sections */
	cp = &msg[12];
 8004e4a:	697b      	ldr	r3, [r7, #20]
 8004e4c:	330c      	adds	r3, #12
 8004e4e:	61bb      	str	r3, [r7, #24]

	/* Question section */
	for (i = 0; i < pdhdr->qdcount; i++)
 8004e50:	2300      	movs	r3, #0
 8004e52:	83fb      	strh	r3, [r7, #30]
 8004e54:	e00d      	b.n	8004e72 <parseDNSMSG+0x114>
	{
		cp = dns_question(msg, cp);
 8004e56:	69b9      	ldr	r1, [r7, #24]
 8004e58:	6978      	ldr	r0, [r7, #20]
 8004e5a:	f7ff fe47 	bl	8004aec <dns_question>
 8004e5e:	61b8      	str	r0, [r7, #24]
#ifdef _DNS_DEUBG_
      printf("MAX_DOMAIN_NAME is too small, it should be redfine in dns.h");
   #endif
		if(!cp) return -1;
 8004e60:	69bb      	ldr	r3, [r7, #24]
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d102      	bne.n	8004e6c <parseDNSMSG+0x10e>
 8004e66:	f04f 33ff 	mov.w	r3, #4294967295
 8004e6a:	e03b      	b.n	8004ee4 <parseDNSMSG+0x186>
	for (i = 0; i < pdhdr->qdcount; i++)
 8004e6c:	8bfb      	ldrh	r3, [r7, #30]
 8004e6e:	3301      	adds	r3, #1
 8004e70:	83fb      	strh	r3, [r7, #30]
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	895b      	ldrh	r3, [r3, #10]
 8004e76:	8bfa      	ldrh	r2, [r7, #30]
 8004e78:	429a      	cmp	r2, r3
 8004e7a:	d3ec      	bcc.n	8004e56 <parseDNSMSG+0xf8>
	}

	/* Answer section */
	for (i = 0; i < pdhdr->ancount; i++)
 8004e7c:	2300      	movs	r3, #0
 8004e7e:	83fb      	strh	r3, [r7, #30]
 8004e80:	e00e      	b.n	8004ea0 <parseDNSMSG+0x142>
	{
		cp = dns_answer(msg, cp, ip_from_dns);
 8004e82:	687a      	ldr	r2, [r7, #4]
 8004e84:	69b9      	ldr	r1, [r7, #24]
 8004e86:	6978      	ldr	r0, [r7, #20]
 8004e88:	f7ff fe55 	bl	8004b36 <dns_answer>
 8004e8c:	61b8      	str	r0, [r7, #24]
   #ifdef _DNS_DEUBG_
      printf("MAX_DOMAIN_NAME is too small, it should be redfine in dns.h");
   #endif
		if(!cp) return -1;
 8004e8e:	69bb      	ldr	r3, [r7, #24]
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d102      	bne.n	8004e9a <parseDNSMSG+0x13c>
 8004e94:	f04f 33ff 	mov.w	r3, #4294967295
 8004e98:	e024      	b.n	8004ee4 <parseDNSMSG+0x186>
	for (i = 0; i < pdhdr->ancount; i++)
 8004e9a:	8bfb      	ldrh	r3, [r7, #30]
 8004e9c:	3301      	adds	r3, #1
 8004e9e:	83fb      	strh	r3, [r7, #30]
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	899b      	ldrh	r3, [r3, #12]
 8004ea4:	8bfa      	ldrh	r2, [r7, #30]
 8004ea6:	429a      	cmp	r2, r3
 8004ea8:	d3eb      	bcc.n	8004e82 <parseDNSMSG+0x124>
	}

	/* Name server (authority) section */
	for (i = 0; i < pdhdr->nscount; i++)
 8004eaa:	2300      	movs	r3, #0
 8004eac:	83fb      	strh	r3, [r7, #30]
 8004eae:	e002      	b.n	8004eb6 <parseDNSMSG+0x158>
 8004eb0:	8bfb      	ldrh	r3, [r7, #30]
 8004eb2:	3301      	adds	r3, #1
 8004eb4:	83fb      	strh	r3, [r7, #30]
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	89db      	ldrh	r3, [r3, #14]
 8004eba:	8bfa      	ldrh	r2, [r7, #30]
 8004ebc:	429a      	cmp	r2, r3
 8004ebe:	d3f7      	bcc.n	8004eb0 <parseDNSMSG+0x152>
	{
		;
	}

	/* Additional section */
	for (i = 0; i < pdhdr->arcount; i++)
 8004ec0:	2300      	movs	r3, #0
 8004ec2:	83fb      	strh	r3, [r7, #30]
 8004ec4:	e002      	b.n	8004ecc <parseDNSMSG+0x16e>
 8004ec6:	8bfb      	ldrh	r3, [r7, #30]
 8004ec8:	3301      	adds	r3, #1
 8004eca:	83fb      	strh	r3, [r7, #30]
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	8a1b      	ldrh	r3, [r3, #16]
 8004ed0:	8bfa      	ldrh	r2, [r7, #30]
 8004ed2:	429a      	cmp	r2, r3
 8004ed4:	d3f7      	bcc.n	8004ec6 <parseDNSMSG+0x168>
	{
		;
	}

	if(pdhdr->rcode == 0) return 1;		// No error
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	7a1b      	ldrb	r3, [r3, #8]
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d101      	bne.n	8004ee2 <parseDNSMSG+0x184>
 8004ede:	2301      	movs	r3, #1
 8004ee0:	e000      	b.n	8004ee4 <parseDNSMSG+0x186>
	else return 0;
 8004ee2:	2300      	movs	r3, #0
}
 8004ee4:	4618      	mov	r0, r3
 8004ee6:	3720      	adds	r7, #32
 8004ee8:	46bd      	mov	sp, r7
 8004eea:	bd80      	pop	{r7, pc}

08004eec <dns_makequery>:
 *               buf  - is a pointer to the buffer for DNS message.
 *               len  - is the MAX. size of buffer.
 * Returns     : the pointer to the DNS message.
 */
int16_t dns_makequery(uint16_t op, char * name, uint8_t * buf, uint16_t len)
{
 8004eec:	b580      	push	{r7, lr}
 8004eee:	b0b8      	sub	sp, #224	@ 0xe0
 8004ef0:	af00      	add	r7, sp, #0
 8004ef2:	60b9      	str	r1, [r7, #8]
 8004ef4:	607a      	str	r2, [r7, #4]
 8004ef6:	461a      	mov	r2, r3
 8004ef8:	4603      	mov	r3, r0
 8004efa:	81fb      	strh	r3, [r7, #14]
 8004efc:	4613      	mov	r3, r2
 8004efe:	81bb      	strh	r3, [r7, #12]
	char sname[MAXCNAME];
	char *dname;
	uint16_t p;
	uint16_t dlen;

	cp = buf;
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

	DNS_MSGID++;
 8004f06:	4b57      	ldr	r3, [pc, #348]	@ (8005064 <dns_makequery+0x178>)
 8004f08:	881b      	ldrh	r3, [r3, #0]
 8004f0a:	3301      	adds	r3, #1
 8004f0c:	b29a      	uxth	r2, r3
 8004f0e:	4b55      	ldr	r3, [pc, #340]	@ (8005064 <dns_makequery+0x178>)
 8004f10:	801a      	strh	r2, [r3, #0]
	cp = put16(cp, DNS_MSGID);
 8004f12:	4b54      	ldr	r3, [pc, #336]	@ (8005064 <dns_makequery+0x178>)
 8004f14:	881b      	ldrh	r3, [r3, #0]
 8004f16:	4619      	mov	r1, r3
 8004f18:	f8d7 00dc 	ldr.w	r0, [r7, #220]	@ 0xdc
 8004f1c:	f7ff fd44 	bl	80049a8 <put16>
 8004f20:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc
	p = (op << 11) | 0x0100;			/* Recursion desired */
 8004f24:	89fb      	ldrh	r3, [r7, #14]
 8004f26:	02db      	lsls	r3, r3, #11
 8004f28:	b21b      	sxth	r3, r3
 8004f2a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004f2e:	b21b      	sxth	r3, r3
 8004f30:	f8a7 30d4 	strh.w	r3, [r7, #212]	@ 0xd4
	cp = put16(cp, p);
 8004f34:	f8b7 30d4 	ldrh.w	r3, [r7, #212]	@ 0xd4
 8004f38:	4619      	mov	r1, r3
 8004f3a:	f8d7 00dc 	ldr.w	r0, [r7, #220]	@ 0xdc
 8004f3e:	f7ff fd33 	bl	80049a8 <put16>
 8004f42:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc
	cp = put16(cp, 1);
 8004f46:	2101      	movs	r1, #1
 8004f48:	f8d7 00dc 	ldr.w	r0, [r7, #220]	@ 0xdc
 8004f4c:	f7ff fd2c 	bl	80049a8 <put16>
 8004f50:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc
	cp = put16(cp, 0);
 8004f54:	2100      	movs	r1, #0
 8004f56:	f8d7 00dc 	ldr.w	r0, [r7, #220]	@ 0xdc
 8004f5a:	f7ff fd25 	bl	80049a8 <put16>
 8004f5e:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc
	cp = put16(cp, 0);
 8004f62:	2100      	movs	r1, #0
 8004f64:	f8d7 00dc 	ldr.w	r0, [r7, #220]	@ 0xdc
 8004f68:	f7ff fd1e 	bl	80049a8 <put16>
 8004f6c:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc
	cp = put16(cp, 0);
 8004f70:	2100      	movs	r1, #0
 8004f72:	f8d7 00dc 	ldr.w	r0, [r7, #220]	@ 0xdc
 8004f76:	f7ff fd17 	bl	80049a8 <put16>
 8004f7a:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc

	strcpy(sname, name);
 8004f7e:	f107 0310 	add.w	r3, r7, #16
 8004f82:	68b9      	ldr	r1, [r7, #8]
 8004f84:	4618      	mov	r0, r3
 8004f86:	f009 ffc0 	bl	800ef0a <strcpy>
	dname = sname;
 8004f8a:	f107 0310 	add.w	r3, r7, #16
 8004f8e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
	dlen = strlen(dname);
 8004f92:	f8d7 00d8 	ldr.w	r0, [r7, #216]	@ 0xd8
 8004f96:	f7fb f92d 	bl	80001f4 <strlen>
 8004f9a:	4603      	mov	r3, r0
 8004f9c:	f8a7 30d6 	strh.w	r3, [r7, #214]	@ 0xd6
	for (;;)
	{
		/* Look for next dot */
		cp1 = strchr(dname, '.');
 8004fa0:	212e      	movs	r1, #46	@ 0x2e
 8004fa2:	f8d7 00d8 	ldr.w	r0, [r7, #216]	@ 0xd8
 8004fa6:	f009 fea5 	bl	800ecf4 <strchr>
 8004faa:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0

		if (cp1 != NULL) len = cp1 - dname;	/* More to come */
 8004fae:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d006      	beq.n	8004fc4 <dns_makequery+0xd8>
 8004fb6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8004fba:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004fbe:	1ad3      	subs	r3, r2, r3
 8004fc0:	81bb      	strh	r3, [r7, #12]
 8004fc2:	e002      	b.n	8004fca <dns_makequery+0xde>
		else len = dlen;			/* Last component */
 8004fc4:	f8b7 30d6 	ldrh.w	r3, [r7, #214]	@ 0xd6
 8004fc8:	81bb      	strh	r3, [r7, #12]

		*cp++ = len;				/* Write length of component */
 8004fca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004fce:	1c5a      	adds	r2, r3, #1
 8004fd0:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8004fd4:	89ba      	ldrh	r2, [r7, #12]
 8004fd6:	b2d2      	uxtb	r2, r2
 8004fd8:	701a      	strb	r2, [r3, #0]
		if (len == 0) break;
 8004fda:	89bb      	ldrh	r3, [r7, #12]
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d029      	beq.n	8005034 <dns_makequery+0x148>

		/* Copy component up to (but not including) dot */
		strncpy((char *)cp, dname, len);
 8004fe0:	89bb      	ldrh	r3, [r7, #12]
 8004fe2:	461a      	mov	r2, r3
 8004fe4:	f8d7 10d8 	ldr.w	r1, [r7, #216]	@ 0xd8
 8004fe8:	f8d7 00dc 	ldr.w	r0, [r7, #220]	@ 0xdc
 8004fec:	f009 fea1 	bl	800ed32 <strncpy>
		cp += len;
 8004ff0:	89bb      	ldrh	r3, [r7, #12]
 8004ff2:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8004ff6:	4413      	add	r3, r2
 8004ff8:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
		if (cp1 == NULL)
 8004ffc:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8005000:	2b00      	cmp	r3, #0
 8005002:	d107      	bne.n	8005014 <dns_makequery+0x128>
		{
			*cp++ = 0;			/* Last one; write null and finish */
 8005004:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005008:	1c5a      	adds	r2, r3, #1
 800500a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800500e:	2200      	movs	r2, #0
 8005010:	701a      	strb	r2, [r3, #0]
			break;
 8005012:	e010      	b.n	8005036 <dns_makequery+0x14a>
		}
		dname += len+1;
 8005014:	89bb      	ldrh	r3, [r7, #12]
 8005016:	3301      	adds	r3, #1
 8005018:	f8d7 20d8 	ldr.w	r2, [r7, #216]	@ 0xd8
 800501c:	4413      	add	r3, r2
 800501e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
		dlen -= len+1;
 8005022:	f8b7 20d6 	ldrh.w	r2, [r7, #214]	@ 0xd6
 8005026:	89bb      	ldrh	r3, [r7, #12]
 8005028:	1ad3      	subs	r3, r2, r3
 800502a:	b29b      	uxth	r3, r3
 800502c:	3b01      	subs	r3, #1
 800502e:	f8a7 30d6 	strh.w	r3, [r7, #214]	@ 0xd6
		cp1 = strchr(dname, '.');
 8005032:	e7b5      	b.n	8004fa0 <dns_makequery+0xb4>
		if (len == 0) break;
 8005034:	bf00      	nop
	}

	cp = put16(cp, 0x0001);				/* type */
 8005036:	2101      	movs	r1, #1
 8005038:	f8d7 00dc 	ldr.w	r0, [r7, #220]	@ 0xdc
 800503c:	f7ff fcb4 	bl	80049a8 <put16>
 8005040:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc
	cp = put16(cp, 0x0001);				/* class */
 8005044:	2101      	movs	r1, #1
 8005046:	f8d7 00dc 	ldr.w	r0, [r7, #220]	@ 0xdc
 800504a:	f7ff fcad 	bl	80049a8 <put16>
 800504e:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc

	return ((int16_t)((uint32_t)(cp) - (uint32_t)(buf)));
 8005052:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	1ad3      	subs	r3, r2, r3
 800505a:	b21b      	sxth	r3, r3
}
 800505c:	4618      	mov	r0, r3
 800505e:	37e0      	adds	r7, #224	@ 0xe0
 8005060:	46bd      	mov	sp, r7
 8005062:	bd80      	pop	{r7, pc}
 8005064:	20000f86 	.word	0x20000f86

08005068 <check_DNS_timeout>:
 * Returns     : -1 - timeout occurred, 0 - timer over, but no timeout, 1 - no timer over, no timeout occur
 * Note        : timeout : retry count and timer both over.
 */

int8_t check_DNS_timeout(void)
{
 8005068:	b480      	push	{r7}
 800506a:	af00      	add	r7, sp, #0

	if(dns_1s_tick >= DNS_WAIT_TIME)
 800506c:	4b0f      	ldr	r3, [pc, #60]	@ (80050ac <check_DNS_timeout+0x44>)
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	2b02      	cmp	r3, #2
 8005072:	d914      	bls.n	800509e <check_DNS_timeout+0x36>
	{
		dns_1s_tick = 0;
 8005074:	4b0d      	ldr	r3, [pc, #52]	@ (80050ac <check_DNS_timeout+0x44>)
 8005076:	2200      	movs	r2, #0
 8005078:	601a      	str	r2, [r3, #0]
		if(retry_count >= MAX_DNS_RETRY) {
 800507a:	4b0d      	ldr	r3, [pc, #52]	@ (80050b0 <check_DNS_timeout+0x48>)
 800507c:	781b      	ldrb	r3, [r3, #0]
 800507e:	2b01      	cmp	r3, #1
 8005080:	d905      	bls.n	800508e <check_DNS_timeout+0x26>
			retry_count = 0;
 8005082:	4b0b      	ldr	r3, [pc, #44]	@ (80050b0 <check_DNS_timeout+0x48>)
 8005084:	2200      	movs	r2, #0
 8005086:	701a      	strb	r2, [r3, #0]
			return -1; // timeout occurred
 8005088:	f04f 33ff 	mov.w	r3, #4294967295
 800508c:	e008      	b.n	80050a0 <check_DNS_timeout+0x38>
		}
		retry_count++;
 800508e:	4b08      	ldr	r3, [pc, #32]	@ (80050b0 <check_DNS_timeout+0x48>)
 8005090:	781b      	ldrb	r3, [r3, #0]
 8005092:	3301      	adds	r3, #1
 8005094:	b2da      	uxtb	r2, r3
 8005096:	4b06      	ldr	r3, [pc, #24]	@ (80050b0 <check_DNS_timeout+0x48>)
 8005098:	701a      	strb	r2, [r3, #0]
		return 0; // timer over, but no timeout
 800509a:	2300      	movs	r3, #0
 800509c:	e000      	b.n	80050a0 <check_DNS_timeout+0x38>
	}

	return 1; // no timer over, no timeout occur
 800509e:	2301      	movs	r3, #1
}
 80050a0:	4618      	mov	r0, r3
 80050a2:	46bd      	mov	sp, r7
 80050a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a8:	4770      	bx	lr
 80050aa:	bf00      	nop
 80050ac:	20000f88 	.word	0x20000f88
 80050b0:	20000f8c 	.word	0x20000f8c

080050b4 <DNS_init>:



/* DNS CLIENT INIT */
void DNS_init(uint8_t s, uint8_t * buf)
{
 80050b4:	b480      	push	{r7}
 80050b6:	b083      	sub	sp, #12
 80050b8:	af00      	add	r7, sp, #0
 80050ba:	4603      	mov	r3, r0
 80050bc:	6039      	str	r1, [r7, #0]
 80050be:	71fb      	strb	r3, [r7, #7]
	DNS_SOCKET = s; // SOCK_DNS
 80050c0:	4a07      	ldr	r2, [pc, #28]	@ (80050e0 <DNS_init+0x2c>)
 80050c2:	79fb      	ldrb	r3, [r7, #7]
 80050c4:	7013      	strb	r3, [r2, #0]
	pDNSMSG = buf; // User's shared buffer
 80050c6:	4a07      	ldr	r2, [pc, #28]	@ (80050e4 <DNS_init+0x30>)
 80050c8:	683b      	ldr	r3, [r7, #0]
 80050ca:	6013      	str	r3, [r2, #0]
	DNS_MSGID = DNS_MSG_ID;
 80050cc:	4b06      	ldr	r3, [pc, #24]	@ (80050e8 <DNS_init+0x34>)
 80050ce:	f241 1222 	movw	r2, #4386	@ 0x1122
 80050d2:	801a      	strh	r2, [r3, #0]
}
 80050d4:	bf00      	nop
 80050d6:	370c      	adds	r7, #12
 80050d8:	46bd      	mov	sp, r7
 80050da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050de:	4770      	bx	lr
 80050e0:	20000f84 	.word	0x20000f84
 80050e4:	20000f80 	.word	0x20000f80
 80050e8:	20000f86 	.word	0x20000f86

080050ec <DNS_run>:

/* DNS CLIENT RUN */
int8_t DNS_run(uint8_t * dns_ip, uint8_t * name, uint8_t * ip_from_dns)
{
 80050ec:	b5b0      	push	{r4, r5, r7, lr}
 80050ee:	b090      	sub	sp, #64	@ 0x40
 80050f0:	af04      	add	r7, sp, #16
 80050f2:	60f8      	str	r0, [r7, #12]
 80050f4:	60b9      	str	r1, [r7, #8]
 80050f6:	607a      	str	r2, [r7, #4]
	struct dhdr dhp;
	uint8_t ip[4];
	uint16_t len, port;
	int8_t ret_check_timeout;

	retry_count = 0;
 80050f8:	4b5a      	ldr	r3, [pc, #360]	@ (8005264 <DNS_run+0x178>)
 80050fa:	2200      	movs	r2, #0
 80050fc:	701a      	strb	r2, [r3, #0]
	dns_1s_tick = 0;
 80050fe:	4b5a      	ldr	r3, [pc, #360]	@ (8005268 <DNS_run+0x17c>)
 8005100:	2200      	movs	r2, #0
 8005102:	601a      	str	r2, [r3, #0]

   // Socket open
   socket(DNS_SOCKET, Sn_MR_UDP, 0, 0);
 8005104:	4b59      	ldr	r3, [pc, #356]	@ (800526c <DNS_run+0x180>)
 8005106:	7818      	ldrb	r0, [r3, #0]
 8005108:	2300      	movs	r3, #0
 800510a:	2200      	movs	r2, #0
 800510c:	2102      	movs	r1, #2
 800510e:	f002 f8ab 	bl	8007268 <socket>

#ifdef _DNS_DEBUG_
	printf("> DNS Query to DNS Server : %d.%d.%d.%d\r\n", dns_ip[0], dns_ip[1], dns_ip[2], dns_ip[3]);
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	781b      	ldrb	r3, [r3, #0]
 8005116:	4619      	mov	r1, r3
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	3301      	adds	r3, #1
 800511c:	781b      	ldrb	r3, [r3, #0]
 800511e:	461a      	mov	r2, r3
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	3302      	adds	r3, #2
 8005124:	781b      	ldrb	r3, [r3, #0]
 8005126:	4618      	mov	r0, r3
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	3303      	adds	r3, #3
 800512c:	781b      	ldrb	r3, [r3, #0]
 800512e:	9300      	str	r3, [sp, #0]
 8005130:	4603      	mov	r3, r0
 8005132:	484f      	ldr	r0, [pc, #316]	@ (8005270 <DNS_run+0x184>)
 8005134:	f009 fc8e 	bl	800ea54 <iprintf>
#endif

	len = dns_makequery(0, (char *)name, pDNSMSG, MAX_DNS_BUF_SIZE);
 8005138:	4b4e      	ldr	r3, [pc, #312]	@ (8005274 <DNS_run+0x188>)
 800513a:	681a      	ldr	r2, [r3, #0]
 800513c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005140:	68b9      	ldr	r1, [r7, #8]
 8005142:	2000      	movs	r0, #0
 8005144:	f7ff fed2 	bl	8004eec <dns_makequery>
 8005148:	4603      	mov	r3, r0
 800514a:	85fb      	strh	r3, [r7, #46]	@ 0x2e
	sendto(DNS_SOCKET, pDNSMSG, len, dns_ip, IPPORT_DOMAIN);
 800514c:	4b47      	ldr	r3, [pc, #284]	@ (800526c <DNS_run+0x180>)
 800514e:	7818      	ldrb	r0, [r3, #0]
 8005150:	4b48      	ldr	r3, [pc, #288]	@ (8005274 <DNS_run+0x188>)
 8005152:	6819      	ldr	r1, [r3, #0]
 8005154:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8005156:	2335      	movs	r3, #53	@ 0x35
 8005158:	9300      	str	r3, [sp, #0]
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	f002 fd04 	bl	8007b68 <sendto>

	while (1)
	{
		if ((len = getSn_RX_RSR(DNS_SOCKET)) > 0)
 8005160:	4b42      	ldr	r3, [pc, #264]	@ (800526c <DNS_run+0x180>)
 8005162:	781b      	ldrb	r3, [r3, #0]
 8005164:	4618      	mov	r0, r3
 8005166:	f001 ff3c 	bl	8006fe2 <getSn_RX_RSR>
 800516a:	4603      	mov	r3, r0
 800516c:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 800516e:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8005170:	2b00      	cmp	r3, #0
 8005172:	d03d      	beq.n	80051f0 <DNS_run+0x104>
		{
			if (len > MAX_DNS_BUF_SIZE) len = MAX_DNS_BUF_SIZE;
 8005174:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8005176:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800517a:	d902      	bls.n	8005182 <DNS_run+0x96>
 800517c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005180:	85fb      	strh	r3, [r7, #46]	@ 0x2e
			len = recvfrom(DNS_SOCKET, pDNSMSG, len, ip, &port);
 8005182:	4b3a      	ldr	r3, [pc, #232]	@ (800526c <DNS_run+0x180>)
 8005184:	7818      	ldrb	r0, [r3, #0]
 8005186:	4b3b      	ldr	r3, [pc, #236]	@ (8005274 <DNS_run+0x188>)
 8005188:	6819      	ldr	r1, [r3, #0]
 800518a:	f107 0414 	add.w	r4, r7, #20
 800518e:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8005190:	f107 0312 	add.w	r3, r7, #18
 8005194:	9300      	str	r3, [sp, #0]
 8005196:	4623      	mov	r3, r4
 8005198:	f002 fe1a 	bl	8007dd0 <recvfrom>
 800519c:	4603      	mov	r3, r0
 800519e:	85fb      	strh	r3, [r7, #46]	@ 0x2e
      #ifdef _DNS_DEBUG_
	      printf("> Receive DNS message from %d.%d.%d.%d(%d). len = %d\r\n", ip[0], ip[1], ip[2], ip[3],port,len);
 80051a0:	7d3b      	ldrb	r3, [r7, #20]
 80051a2:	4618      	mov	r0, r3
 80051a4:	7d7b      	ldrb	r3, [r7, #21]
 80051a6:	461c      	mov	r4, r3
 80051a8:	7dbb      	ldrb	r3, [r7, #22]
 80051aa:	461d      	mov	r5, r3
 80051ac:	7dfb      	ldrb	r3, [r7, #23]
 80051ae:	461a      	mov	r2, r3
 80051b0:	8a7b      	ldrh	r3, [r7, #18]
 80051b2:	4619      	mov	r1, r3
 80051b4:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80051b6:	9302      	str	r3, [sp, #8]
 80051b8:	9101      	str	r1, [sp, #4]
 80051ba:	9200      	str	r2, [sp, #0]
 80051bc:	462b      	mov	r3, r5
 80051be:	4622      	mov	r2, r4
 80051c0:	4601      	mov	r1, r0
 80051c2:	482d      	ldr	r0, [pc, #180]	@ (8005278 <DNS_run+0x18c>)
 80051c4:	f009 fc46 	bl	800ea54 <iprintf>
      #endif
         ret = parseDNSMSG(&dhp, pDNSMSG, ip_from_dns);
 80051c8:	4b2a      	ldr	r3, [pc, #168]	@ (8005274 <DNS_run+0x188>)
 80051ca:	6819      	ldr	r1, [r3, #0]
 80051cc:	f107 0318 	add.w	r3, r7, #24
 80051d0:	687a      	ldr	r2, [r7, #4]
 80051d2:	4618      	mov	r0, r3
 80051d4:	f7ff fdc3 	bl	8004d5e <parseDNSMSG>
 80051d8:	4603      	mov	r3, r0
 80051da:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
			break;
 80051de:	bf00      	nop
			printf("> DNS Timeout\r\n");
#endif
			sendto(DNS_SOCKET, pDNSMSG, len, dns_ip, IPPORT_DOMAIN);
		}
	}
	close(DNS_SOCKET);
 80051e0:	4b22      	ldr	r3, [pc, #136]	@ (800526c <DNS_run+0x180>)
 80051e2:	781b      	ldrb	r3, [r3, #0]
 80051e4:	4618      	mov	r0, r3
 80051e6:	f002 f953 	bl	8007490 <close>
	// Return value
	// 0 > :  failed / 1 - success
	return ret;
 80051ea:	f997 302c 	ldrsb.w	r3, [r7, #44]	@ 0x2c
 80051ee:	e034      	b.n	800525a <DNS_run+0x16e>
		ret_check_timeout = check_DNS_timeout();
 80051f0:	f7ff ff3a 	bl	8005068 <check_DNS_timeout>
 80051f4:	4603      	mov	r3, r0
 80051f6:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
		if (ret_check_timeout < 0) {
 80051fa:	f997 302d 	ldrsb.w	r3, [r7, #45]	@ 0x2d
 80051fe:	2b00      	cmp	r3, #0
 8005200:	da19      	bge.n	8005236 <DNS_run+0x14a>
			printf("> DNS Server is not responding : %d.%d.%d.%d\r\n", dns_ip[0], dns_ip[1], dns_ip[2], dns_ip[3]);
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	781b      	ldrb	r3, [r3, #0]
 8005206:	4619      	mov	r1, r3
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	3301      	adds	r3, #1
 800520c:	781b      	ldrb	r3, [r3, #0]
 800520e:	461a      	mov	r2, r3
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	3302      	adds	r3, #2
 8005214:	781b      	ldrb	r3, [r3, #0]
 8005216:	4618      	mov	r0, r3
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	3303      	adds	r3, #3
 800521c:	781b      	ldrb	r3, [r3, #0]
 800521e:	9300      	str	r3, [sp, #0]
 8005220:	4603      	mov	r3, r0
 8005222:	4816      	ldr	r0, [pc, #88]	@ (800527c <DNS_run+0x190>)
 8005224:	f009 fc16 	bl	800ea54 <iprintf>
			close(DNS_SOCKET);
 8005228:	4b10      	ldr	r3, [pc, #64]	@ (800526c <DNS_run+0x180>)
 800522a:	781b      	ldrb	r3, [r3, #0]
 800522c:	4618      	mov	r0, r3
 800522e:	f002 f92f 	bl	8007490 <close>
			return 0; // timeout occurred
 8005232:	2300      	movs	r3, #0
 8005234:	e011      	b.n	800525a <DNS_run+0x16e>
		else if (ret_check_timeout == 0) {
 8005236:	f997 302d 	ldrsb.w	r3, [r7, #45]	@ 0x2d
 800523a:	2b00      	cmp	r3, #0
 800523c:	d190      	bne.n	8005160 <DNS_run+0x74>
			printf("> DNS Timeout\r\n");
 800523e:	4810      	ldr	r0, [pc, #64]	@ (8005280 <DNS_run+0x194>)
 8005240:	f009 fc70 	bl	800eb24 <puts>
			sendto(DNS_SOCKET, pDNSMSG, len, dns_ip, IPPORT_DOMAIN);
 8005244:	4b09      	ldr	r3, [pc, #36]	@ (800526c <DNS_run+0x180>)
 8005246:	7818      	ldrb	r0, [r3, #0]
 8005248:	4b0a      	ldr	r3, [pc, #40]	@ (8005274 <DNS_run+0x188>)
 800524a:	6819      	ldr	r1, [r3, #0]
 800524c:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800524e:	2335      	movs	r3, #53	@ 0x35
 8005250:	9300      	str	r3, [sp, #0]
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	f002 fc88 	bl	8007b68 <sendto>
		if ((len = getSn_RX_RSR(DNS_SOCKET)) > 0)
 8005258:	e782      	b.n	8005160 <DNS_run+0x74>
}
 800525a:	4618      	mov	r0, r3
 800525c:	3730      	adds	r7, #48	@ 0x30
 800525e:	46bd      	mov	sp, r7
 8005260:	bdb0      	pop	{r4, r5, r7, pc}
 8005262:	bf00      	nop
 8005264:	20000f8c 	.word	0x20000f8c
 8005268:	20000f88 	.word	0x20000f88
 800526c:	20000f84 	.word	0x20000f84
 8005270:	08010fb0 	.word	0x08010fb0
 8005274:	20000f80 	.word	0x20000f80
 8005278:	08010fdc 	.word	0x08010fdc
 800527c:	08011014 	.word	0x08011014
 8005280:	08011044 	.word	0x08011044

08005284 <DNS_time_handler>:


/* DNS TIMER HANDLER */
void DNS_time_handler(void)
{
 8005284:	b480      	push	{r7}
 8005286:	af00      	add	r7, sp, #0
	dns_1s_tick++;
 8005288:	4b04      	ldr	r3, [pc, #16]	@ (800529c <DNS_time_handler+0x18>)
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	3301      	adds	r3, #1
 800528e:	4a03      	ldr	r2, [pc, #12]	@ (800529c <DNS_time_handler+0x18>)
 8005290:	6013      	str	r3, [r2, #0]
}
 8005292:	bf00      	nop
 8005294:	46bd      	mov	sp, r7
 8005296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800529a:	4770      	bx	lr
 800529c:	20000f88 	.word	0x20000f88

080052a0 <NewMessageData>:
#include "MQTTClient.h"

#include <stdio.h>
#include <string.h>

static void NewMessageData(MessageData* md, MQTTString* aTopicName, MQTTMessage* aMessage) {
 80052a0:	b480      	push	{r7}
 80052a2:	b085      	sub	sp, #20
 80052a4:	af00      	add	r7, sp, #0
 80052a6:	60f8      	str	r0, [r7, #12]
 80052a8:	60b9      	str	r1, [r7, #8]
 80052aa:	607a      	str	r2, [r7, #4]
    md->topicName = aTopicName;
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	68ba      	ldr	r2, [r7, #8]
 80052b0:	605a      	str	r2, [r3, #4]
    md->message = aMessage;
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	687a      	ldr	r2, [r7, #4]
 80052b6:	601a      	str	r2, [r3, #0]
}
 80052b8:	bf00      	nop
 80052ba:	3714      	adds	r7, #20
 80052bc:	46bd      	mov	sp, r7
 80052be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c2:	4770      	bx	lr

080052c4 <getNextPacketId>:


static int getNextPacketId(MQTTClient *c) {
 80052c4:	b480      	push	{r7}
 80052c6:	b083      	sub	sp, #12
 80052c8:	af00      	add	r7, sp, #0
 80052ca:	6078      	str	r0, [r7, #4]
    return c->next_packetid = (c->next_packetid == MAX_PACKET_ID) ? 1 : c->next_packetid + 1;
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80052d4:	4293      	cmp	r3, r2
 80052d6:	d003      	beq.n	80052e0 <getNextPacketId+0x1c>
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	3301      	adds	r3, #1
 80052de:	e000      	b.n	80052e2 <getNextPacketId+0x1e>
 80052e0:	2301      	movs	r3, #1
 80052e2:	687a      	ldr	r2, [r7, #4]
 80052e4:	6013      	str	r3, [r2, #0]
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
}
 80052ea:	4618      	mov	r0, r3
 80052ec:	370c      	adds	r7, #12
 80052ee:	46bd      	mov	sp, r7
 80052f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f4:	4770      	bx	lr

080052f6 <sendPacket>:


static int sendPacket(MQTTClient* c, int length, Timer* timer)
{
 80052f6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80052f8:	b087      	sub	sp, #28
 80052fa:	af00      	add	r7, sp, #0
 80052fc:	60f8      	str	r0, [r7, #12]
 80052fe:	60b9      	str	r1, [r7, #8]
 8005300:	607a      	str	r2, [r7, #4]
    int rc = FAILURE,
 8005302:	f04f 33ff 	mov.w	r3, #4294967295
 8005306:	617b      	str	r3, [r7, #20]
        sent = 0;
 8005308:	2300      	movs	r3, #0
 800530a:	613b      	str	r3, [r7, #16]

    while (sent < length && !TimerIsExpired(timer))
 800530c:	e018      	b.n	8005340 <sendPacket+0x4a>
    {
        rc = c->ipstack->mqttwrite(c->ipstack, &c->buf[sent], length, TimerLeftMS(timer));
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005312:	689c      	ldr	r4, [r3, #8]
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	6d5d      	ldr	r5, [r3, #84]	@ 0x54
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	691a      	ldr	r2, [r3, #16]
 800531c:	693b      	ldr	r3, [r7, #16]
 800531e:	18d6      	adds	r6, r2, r3
 8005320:	6878      	ldr	r0, [r7, #4]
 8005322:	f000 fdf1 	bl	8005f08 <TimerLeftMS>
 8005326:	4603      	mov	r3, r0
 8005328:	68ba      	ldr	r2, [r7, #8]
 800532a:	4631      	mov	r1, r6
 800532c:	4628      	mov	r0, r5
 800532e:	47a0      	blx	r4
 8005330:	6178      	str	r0, [r7, #20]
        if (rc < 0)  // there was an error writing the data
 8005332:	697b      	ldr	r3, [r7, #20]
 8005334:	2b00      	cmp	r3, #0
 8005336:	db0e      	blt.n	8005356 <sendPacket+0x60>
            break;
        sent += rc;
 8005338:	693a      	ldr	r2, [r7, #16]
 800533a:	697b      	ldr	r3, [r7, #20]
 800533c:	4413      	add	r3, r2
 800533e:	613b      	str	r3, [r7, #16]
    while (sent < length && !TimerIsExpired(timer))
 8005340:	693a      	ldr	r2, [r7, #16]
 8005342:	68bb      	ldr	r3, [r7, #8]
 8005344:	429a      	cmp	r2, r3
 8005346:	da07      	bge.n	8005358 <sendPacket+0x62>
 8005348:	6878      	ldr	r0, [r7, #4]
 800534a:	f000 fd9b 	bl	8005e84 <TimerIsExpired>
 800534e:	4603      	mov	r3, r0
 8005350:	2b00      	cmp	r3, #0
 8005352:	d0dc      	beq.n	800530e <sendPacket+0x18>
 8005354:	e000      	b.n	8005358 <sendPacket+0x62>
            break;
 8005356:	bf00      	nop
    }
    if (sent == length)
 8005358:	693a      	ldr	r2, [r7, #16]
 800535a:	68bb      	ldr	r3, [r7, #8]
 800535c:	429a      	cmp	r2, r3
 800535e:	d10b      	bne.n	8005378 <sendPacket+0x82>
    {
        TimerCountdown(&c->last_sent, c->keepAliveInterval); // record the fact that we have successfully sent the packet
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	f103 0258 	add.w	r2, r3, #88	@ 0x58
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	699b      	ldr	r3, [r3, #24]
 800536a:	4619      	mov	r1, r3
 800536c:	4610      	mov	r0, r2
 800536e:	f000 fdb3 	bl	8005ed8 <TimerCountdown>
        rc = MQTT_SUCCESS;
 8005372:	2300      	movs	r3, #0
 8005374:	617b      	str	r3, [r7, #20]
 8005376:	e002      	b.n	800537e <sendPacket+0x88>
    }
    else
        rc = FAILURE;
 8005378:	f04f 33ff 	mov.w	r3, #4294967295
 800537c:	617b      	str	r3, [r7, #20]
    return rc;
 800537e:	697b      	ldr	r3, [r7, #20]
}
 8005380:	4618      	mov	r0, r3
 8005382:	371c      	adds	r7, #28
 8005384:	46bd      	mov	sp, r7
 8005386:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005388 <MQTTClientInit>:


void MQTTClientInit(MQTTClient* c, Network* network, unsigned int command_timeout_ms,
		unsigned char* sendbuf, size_t sendbuf_size, unsigned char* readbuf, size_t readbuf_size)
{
 8005388:	b580      	push	{r7, lr}
 800538a:	b086      	sub	sp, #24
 800538c:	af00      	add	r7, sp, #0
 800538e:	60f8      	str	r0, [r7, #12]
 8005390:	60b9      	str	r1, [r7, #8]
 8005392:	607a      	str	r2, [r7, #4]
 8005394:	603b      	str	r3, [r7, #0]
    int i;
    c->ipstack = network;
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	68ba      	ldr	r2, [r7, #8]
 800539a:	655a      	str	r2, [r3, #84]	@ 0x54

    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
 800539c:	2300      	movs	r3, #0
 800539e:	617b      	str	r3, [r7, #20]
 80053a0:	e008      	b.n	80053b4 <MQTTClientInit+0x2c>
        c->messageHandlers[i].topicFilter = 0;
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	697a      	ldr	r2, [r7, #20]
 80053a6:	3205      	adds	r2, #5
 80053a8:	2100      	movs	r1, #0
 80053aa:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
 80053ae:	697b      	ldr	r3, [r7, #20]
 80053b0:	3301      	adds	r3, #1
 80053b2:	617b      	str	r3, [r7, #20]
 80053b4:	697b      	ldr	r3, [r7, #20]
 80053b6:	2b04      	cmp	r3, #4
 80053b8:	ddf3      	ble.n	80053a2 <MQTTClientInit+0x1a>
    c->command_timeout_ms = command_timeout_ms;
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	687a      	ldr	r2, [r7, #4]
 80053be:	605a      	str	r2, [r3, #4]
    c->buf = sendbuf;
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	683a      	ldr	r2, [r7, #0]
 80053c4:	611a      	str	r2, [r3, #16]
    c->buf_size = sendbuf_size;
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	6a3a      	ldr	r2, [r7, #32]
 80053ca:	609a      	str	r2, [r3, #8]
    c->readbuf = readbuf;
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80053d0:	615a      	str	r2, [r3, #20]
    c->readbuf_size = readbuf_size;
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80053d6:	60da      	str	r2, [r3, #12]
    c->isconnected = 0;
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	2200      	movs	r2, #0
 80053dc:	621a      	str	r2, [r3, #32]
    c->cleansession = 0;
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	2200      	movs	r2, #0
 80053e2:	625a      	str	r2, [r3, #36]	@ 0x24
    c->ping_outstanding = 0;
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	2200      	movs	r2, #0
 80053e8:	771a      	strb	r2, [r3, #28]
    c->defaultMessageHandler = NULL;
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	2200      	movs	r2, #0
 80053ee:	651a      	str	r2, [r3, #80]	@ 0x50
	  c->next_packetid = 1;
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	2201      	movs	r2, #1
 80053f4:	601a      	str	r2, [r3, #0]
    TimerInit(&c->last_sent);
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	3358      	adds	r3, #88	@ 0x58
 80053fa:	4618      	mov	r0, r3
 80053fc:	f000 fd34 	bl	8005e68 <TimerInit>
    TimerInit(&c->last_received);
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	3360      	adds	r3, #96	@ 0x60
 8005404:	4618      	mov	r0, r3
 8005406:	f000 fd2f 	bl	8005e68 <TimerInit>
#if defined(MQTT_TASK)
	  MutexInit(&c->mutex);
#endif
}
 800540a:	bf00      	nop
 800540c:	3718      	adds	r7, #24
 800540e:	46bd      	mov	sp, r7
 8005410:	bd80      	pop	{r7, pc}

08005412 <decodePacket>:


static int decodePacket(MQTTClient* c, int* value, int timeout)
{
 8005412:	b590      	push	{r4, r7, lr}
 8005414:	b08b      	sub	sp, #44	@ 0x2c
 8005416:	af00      	add	r7, sp, #0
 8005418:	60f8      	str	r0, [r7, #12]
 800541a:	60b9      	str	r1, [r7, #8]
 800541c:	607a      	str	r2, [r7, #4]
    unsigned char i;
    int multiplier = 1;
 800541e:	2301      	movs	r3, #1
 8005420:	627b      	str	r3, [r7, #36]	@ 0x24
    int len = 0;
 8005422:	2300      	movs	r3, #0
 8005424:	623b      	str	r3, [r7, #32]
    const int MAX_NO_OF_REMAINING_LENGTH_BYTES = 4;
 8005426:	2304      	movs	r3, #4
 8005428:	61fb      	str	r3, [r7, #28]

    *value = 0;
 800542a:	68bb      	ldr	r3, [r7, #8]
 800542c:	2200      	movs	r2, #0
 800542e:	601a      	str	r2, [r3, #0]
    do
    {
        int rc = MQTTPACKET_READ_ERROR;
 8005430:	f04f 33ff 	mov.w	r3, #4294967295
 8005434:	61bb      	str	r3, [r7, #24]

        if (++len > MAX_NO_OF_REMAINING_LENGTH_BYTES)
 8005436:	6a3b      	ldr	r3, [r7, #32]
 8005438:	3301      	adds	r3, #1
 800543a:	623b      	str	r3, [r7, #32]
 800543c:	6a3a      	ldr	r2, [r7, #32]
 800543e:	69fb      	ldr	r3, [r7, #28]
 8005440:	429a      	cmp	r2, r3
 8005442:	dd03      	ble.n	800544c <decodePacket+0x3a>
        {
            rc = MQTTPACKET_READ_ERROR; /* bad data */
 8005444:	f04f 33ff 	mov.w	r3, #4294967295
 8005448:	61bb      	str	r3, [r7, #24]
            goto exit;
 800544a:	e021      	b.n	8005490 <decodePacket+0x7e>
        }
        rc = c->ipstack->mqttread(c->ipstack, &i, 1, timeout);
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005450:	685c      	ldr	r4, [r3, #4]
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 8005456:	f107 0117 	add.w	r1, r7, #23
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	2201      	movs	r2, #1
 800545e:	47a0      	blx	r4
 8005460:	61b8      	str	r0, [r7, #24]
        if (rc != 1)
 8005462:	69bb      	ldr	r3, [r7, #24]
 8005464:	2b01      	cmp	r3, #1
 8005466:	d112      	bne.n	800548e <decodePacket+0x7c>
            goto exit;
        *value += (i & 127) * multiplier;
 8005468:	68bb      	ldr	r3, [r7, #8]
 800546a:	681a      	ldr	r2, [r3, #0]
 800546c:	7dfb      	ldrb	r3, [r7, #23]
 800546e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005472:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005474:	fb01 f303 	mul.w	r3, r1, r3
 8005478:	441a      	add	r2, r3
 800547a:	68bb      	ldr	r3, [r7, #8]
 800547c:	601a      	str	r2, [r3, #0]
        multiplier *= 128;
 800547e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005480:	01db      	lsls	r3, r3, #7
 8005482:	627b      	str	r3, [r7, #36]	@ 0x24
    } while ((i & 128) != 0);
 8005484:	7dfb      	ldrb	r3, [r7, #23]
 8005486:	b25b      	sxtb	r3, r3
 8005488:	2b00      	cmp	r3, #0
 800548a:	dbd1      	blt.n	8005430 <decodePacket+0x1e>
exit:
 800548c:	e000      	b.n	8005490 <decodePacket+0x7e>
            goto exit;
 800548e:	bf00      	nop
    return len;
 8005490:	6a3b      	ldr	r3, [r7, #32]
}
 8005492:	4618      	mov	r0, r3
 8005494:	372c      	adds	r7, #44	@ 0x2c
 8005496:	46bd      	mov	sp, r7
 8005498:	bd90      	pop	{r4, r7, pc}

0800549a <readPacket>:


static int readPacket(MQTTClient* c, Timer* timer)
{
 800549a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800549c:	b089      	sub	sp, #36	@ 0x24
 800549e:	af00      	add	r7, sp, #0
 80054a0:	60f8      	str	r0, [r7, #12]
 80054a2:	60b9      	str	r1, [r7, #8]
    MQTTHeader header = {0};
 80054a4:	2300      	movs	r3, #0
 80054a6:	617b      	str	r3, [r7, #20]
    int len = 0;
 80054a8:	2300      	movs	r3, #0
 80054aa:	61bb      	str	r3, [r7, #24]
    int rem_len = 0;
 80054ac:	2300      	movs	r3, #0
 80054ae:	613b      	str	r3, [r7, #16]

    /* 1. read the header byte.  This has the packet type in it */
    int rc = c->ipstack->mqttread(c->ipstack, c->readbuf, 1, TimerLeftMS(timer));
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80054b4:	685c      	ldr	r4, [r3, #4]
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	6d5d      	ldr	r5, [r3, #84]	@ 0x54
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	695e      	ldr	r6, [r3, #20]
 80054be:	68b8      	ldr	r0, [r7, #8]
 80054c0:	f000 fd22 	bl	8005f08 <TimerLeftMS>
 80054c4:	4603      	mov	r3, r0
 80054c6:	2201      	movs	r2, #1
 80054c8:	4631      	mov	r1, r6
 80054ca:	4628      	mov	r0, r5
 80054cc:	47a0      	blx	r4
 80054ce:	61f8      	str	r0, [r7, #28]
    if (rc != 1)
 80054d0:	69fb      	ldr	r3, [r7, #28]
 80054d2:	2b01      	cmp	r3, #1
 80054d4:	d15d      	bne.n	8005592 <readPacket+0xf8>
        goto exit;

    len = 1;
 80054d6:	2301      	movs	r3, #1
 80054d8:	61bb      	str	r3, [r7, #24]
    /* 2. read the remaining length.  This is variable in itself */
    decodePacket(c, &rem_len, TimerLeftMS(timer));
 80054da:	68b8      	ldr	r0, [r7, #8]
 80054dc:	f000 fd14 	bl	8005f08 <TimerLeftMS>
 80054e0:	4602      	mov	r2, r0
 80054e2:	f107 0310 	add.w	r3, r7, #16
 80054e6:	4619      	mov	r1, r3
 80054e8:	68f8      	ldr	r0, [r7, #12]
 80054ea:	f7ff ff92 	bl	8005412 <decodePacket>
    len += MQTTPacket_encode(c->readbuf + 1, rem_len); /* put the original remaining length back into the buffer */
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	695b      	ldr	r3, [r3, #20]
 80054f2:	3301      	adds	r3, #1
 80054f4:	693a      	ldr	r2, [r7, #16]
 80054f6:	4611      	mov	r1, r2
 80054f8:	4618      	mov	r0, r3
 80054fa:	f001 f86a 	bl	80065d2 <MQTTPacket_encode>
 80054fe:	4602      	mov	r2, r0
 8005500:	69bb      	ldr	r3, [r7, #24]
 8005502:	4413      	add	r3, r2
 8005504:	61bb      	str	r3, [r7, #24]

    if (rem_len > (c->readbuf_size - len))
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	68da      	ldr	r2, [r3, #12]
 800550a:	69bb      	ldr	r3, [r7, #24]
 800550c:	1ad3      	subs	r3, r2, r3
 800550e:	693a      	ldr	r2, [r7, #16]
 8005510:	4293      	cmp	r3, r2
 8005512:	d203      	bcs.n	800551c <readPacket+0x82>
    {
        rc = BUFFER_OVERFLOW;
 8005514:	f06f 0301 	mvn.w	r3, #1
 8005518:	61fb      	str	r3, [r7, #28]
        goto exit;
 800551a:	e03d      	b.n	8005598 <readPacket+0xfe>
    }

    /* 3. read the rest of the buffer using a callback to supply the rest of the data */
    if (rem_len > 0 && (rc = c->ipstack->mqttread(c->ipstack, c->readbuf + len, rem_len, TimerLeftMS(timer)) != rem_len)) {
 800551c:	693b      	ldr	r3, [r7, #16]
 800551e:	2b00      	cmp	r3, #0
 8005520:	dd20      	ble.n	8005564 <readPacket+0xca>
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005526:	685c      	ldr	r4, [r3, #4]
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	6d5d      	ldr	r5, [r3, #84]	@ 0x54
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	695a      	ldr	r2, [r3, #20]
 8005530:	69bb      	ldr	r3, [r7, #24]
 8005532:	18d6      	adds	r6, r2, r3
 8005534:	693b      	ldr	r3, [r7, #16]
 8005536:	607b      	str	r3, [r7, #4]
 8005538:	68b8      	ldr	r0, [r7, #8]
 800553a:	f000 fce5 	bl	8005f08 <TimerLeftMS>
 800553e:	4603      	mov	r3, r0
 8005540:	687a      	ldr	r2, [r7, #4]
 8005542:	4631      	mov	r1, r6
 8005544:	4628      	mov	r0, r5
 8005546:	47a0      	blx	r4
 8005548:	4602      	mov	r2, r0
 800554a:	693b      	ldr	r3, [r7, #16]
 800554c:	429a      	cmp	r2, r3
 800554e:	bf14      	ite	ne
 8005550:	2301      	movne	r3, #1
 8005552:	2300      	moveq	r3, #0
 8005554:	b2db      	uxtb	r3, r3
 8005556:	61fb      	str	r3, [r7, #28]
 8005558:	69fb      	ldr	r3, [r7, #28]
 800555a:	2b00      	cmp	r3, #0
 800555c:	d002      	beq.n	8005564 <readPacket+0xca>
        rc = 0;
 800555e:	2300      	movs	r3, #0
 8005560:	61fb      	str	r3, [r7, #28]
        goto exit;
 8005562:	e019      	b.n	8005598 <readPacket+0xfe>
    }

    header.byte = c->readbuf[0];
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	695b      	ldr	r3, [r3, #20]
 8005568:	781b      	ldrb	r3, [r3, #0]
 800556a:	753b      	strb	r3, [r7, #20]
    rc = header.bits.type;
 800556c:	7d3b      	ldrb	r3, [r7, #20]
 800556e:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8005572:	b2db      	uxtb	r3, r3
 8005574:	61fb      	str	r3, [r7, #28]
    if (c->keepAliveInterval > 0)
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	699b      	ldr	r3, [r3, #24]
 800557a:	2b00      	cmp	r3, #0
 800557c:	d00b      	beq.n	8005596 <readPacket+0xfc>
        TimerCountdown(&c->last_received, c->keepAliveInterval); // record the fact that we have successfully received a packet
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	f103 0260 	add.w	r2, r3, #96	@ 0x60
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	699b      	ldr	r3, [r3, #24]
 8005588:	4619      	mov	r1, r3
 800558a:	4610      	mov	r0, r2
 800558c:	f000 fca4 	bl	8005ed8 <TimerCountdown>
 8005590:	e002      	b.n	8005598 <readPacket+0xfe>
        goto exit;
 8005592:	bf00      	nop
 8005594:	e000      	b.n	8005598 <readPacket+0xfe>
exit:
 8005596:	bf00      	nop
    return rc;
 8005598:	69fb      	ldr	r3, [r7, #28]
}
 800559a:	4618      	mov	r0, r3
 800559c:	3724      	adds	r7, #36	@ 0x24
 800559e:	46bd      	mov	sp, r7
 80055a0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080055a2 <isTopicMatched>:

// assume topic filter and name is in correct format
// # can only be at end
// + and # can only be next to separator
static char isTopicMatched(char* topicFilter, MQTTString* topicName)
{
 80055a2:	b480      	push	{r7}
 80055a4:	b087      	sub	sp, #28
 80055a6:	af00      	add	r7, sp, #0
 80055a8:	6078      	str	r0, [r7, #4]
 80055aa:	6039      	str	r1, [r7, #0]
    char* curf = topicFilter;
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	617b      	str	r3, [r7, #20]
    char* curn = topicName->lenstring.data;
 80055b0:	683b      	ldr	r3, [r7, #0]
 80055b2:	689b      	ldr	r3, [r3, #8]
 80055b4:	613b      	str	r3, [r7, #16]
    char* curn_end = curn + topicName->lenstring.len;
 80055b6:	683b      	ldr	r3, [r7, #0]
 80055b8:	685b      	ldr	r3, [r3, #4]
 80055ba:	461a      	mov	r2, r3
 80055bc:	693b      	ldr	r3, [r7, #16]
 80055be:	4413      	add	r3, r2
 80055c0:	60bb      	str	r3, [r7, #8]

    while (*curf && curn < curn_end)
 80055c2:	e039      	b.n	8005638 <isTopicMatched+0x96>
    {
        if (*curn == '/' && *curf != '/')
 80055c4:	693b      	ldr	r3, [r7, #16]
 80055c6:	781b      	ldrb	r3, [r3, #0]
 80055c8:	2b2f      	cmp	r3, #47	@ 0x2f
 80055ca:	d103      	bne.n	80055d4 <isTopicMatched+0x32>
 80055cc:	697b      	ldr	r3, [r7, #20]
 80055ce:	781b      	ldrb	r3, [r3, #0]
 80055d0:	2b2f      	cmp	r3, #47	@ 0x2f
 80055d2:	d13a      	bne.n	800564a <isTopicMatched+0xa8>
            break;
        if (*curf != '+' && *curf != '#' && *curf != *curn)
 80055d4:	697b      	ldr	r3, [r7, #20]
 80055d6:	781b      	ldrb	r3, [r3, #0]
 80055d8:	2b2b      	cmp	r3, #43	@ 0x2b
 80055da:	d009      	beq.n	80055f0 <isTopicMatched+0x4e>
 80055dc:	697b      	ldr	r3, [r7, #20]
 80055de:	781b      	ldrb	r3, [r3, #0]
 80055e0:	2b23      	cmp	r3, #35	@ 0x23
 80055e2:	d005      	beq.n	80055f0 <isTopicMatched+0x4e>
 80055e4:	697b      	ldr	r3, [r7, #20]
 80055e6:	781a      	ldrb	r2, [r3, #0]
 80055e8:	693b      	ldr	r3, [r7, #16]
 80055ea:	781b      	ldrb	r3, [r3, #0]
 80055ec:	429a      	cmp	r2, r3
 80055ee:	d12e      	bne.n	800564e <isTopicMatched+0xac>
            break;
        if (*curf == '+')
 80055f0:	697b      	ldr	r3, [r7, #20]
 80055f2:	781b      	ldrb	r3, [r3, #0]
 80055f4:	2b2b      	cmp	r3, #43	@ 0x2b
 80055f6:	d112      	bne.n	800561e <isTopicMatched+0x7c>
        {   // skip until we meet the next separator, or end of string
            char* nextpos = curn + 1;
 80055f8:	693b      	ldr	r3, [r7, #16]
 80055fa:	3301      	adds	r3, #1
 80055fc:	60fb      	str	r3, [r7, #12]
            while (nextpos < curn_end && *nextpos != '/')
 80055fe:	e005      	b.n	800560c <isTopicMatched+0x6a>
                nextpos = ++curn + 1;
 8005600:	693b      	ldr	r3, [r7, #16]
 8005602:	3301      	adds	r3, #1
 8005604:	613b      	str	r3, [r7, #16]
 8005606:	693b      	ldr	r3, [r7, #16]
 8005608:	3301      	adds	r3, #1
 800560a:	60fb      	str	r3, [r7, #12]
            while (nextpos < curn_end && *nextpos != '/')
 800560c:	68fa      	ldr	r2, [r7, #12]
 800560e:	68bb      	ldr	r3, [r7, #8]
 8005610:	429a      	cmp	r2, r3
 8005612:	d20b      	bcs.n	800562c <isTopicMatched+0x8a>
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	781b      	ldrb	r3, [r3, #0]
 8005618:	2b2f      	cmp	r3, #47	@ 0x2f
 800561a:	d1f1      	bne.n	8005600 <isTopicMatched+0x5e>
 800561c:	e006      	b.n	800562c <isTopicMatched+0x8a>
        }
        else if (*curf == '#')
 800561e:	697b      	ldr	r3, [r7, #20]
 8005620:	781b      	ldrb	r3, [r3, #0]
 8005622:	2b23      	cmp	r3, #35	@ 0x23
 8005624:	d102      	bne.n	800562c <isTopicMatched+0x8a>
            curn = curn_end - 1;    // skip until end of string
 8005626:	68bb      	ldr	r3, [r7, #8]
 8005628:	3b01      	subs	r3, #1
 800562a:	613b      	str	r3, [r7, #16]
        curf++;
 800562c:	697b      	ldr	r3, [r7, #20]
 800562e:	3301      	adds	r3, #1
 8005630:	617b      	str	r3, [r7, #20]
        curn++;
 8005632:	693b      	ldr	r3, [r7, #16]
 8005634:	3301      	adds	r3, #1
 8005636:	613b      	str	r3, [r7, #16]
    while (*curf && curn < curn_end)
 8005638:	697b      	ldr	r3, [r7, #20]
 800563a:	781b      	ldrb	r3, [r3, #0]
 800563c:	2b00      	cmp	r3, #0
 800563e:	d007      	beq.n	8005650 <isTopicMatched+0xae>
 8005640:	693a      	ldr	r2, [r7, #16]
 8005642:	68bb      	ldr	r3, [r7, #8]
 8005644:	429a      	cmp	r2, r3
 8005646:	d3bd      	bcc.n	80055c4 <isTopicMatched+0x22>
 8005648:	e002      	b.n	8005650 <isTopicMatched+0xae>
            break;
 800564a:	bf00      	nop
 800564c:	e000      	b.n	8005650 <isTopicMatched+0xae>
            break;
 800564e:	bf00      	nop
    };

    return (curn == curn_end) && (*curf == '\0');
 8005650:	693a      	ldr	r2, [r7, #16]
 8005652:	68bb      	ldr	r3, [r7, #8]
 8005654:	429a      	cmp	r2, r3
 8005656:	d105      	bne.n	8005664 <isTopicMatched+0xc2>
 8005658:	697b      	ldr	r3, [r7, #20]
 800565a:	781b      	ldrb	r3, [r3, #0]
 800565c:	2b00      	cmp	r3, #0
 800565e:	d101      	bne.n	8005664 <isTopicMatched+0xc2>
 8005660:	2301      	movs	r3, #1
 8005662:	e000      	b.n	8005666 <isTopicMatched+0xc4>
 8005664:	2300      	movs	r3, #0
 8005666:	b2db      	uxtb	r3, r3
}
 8005668:	4618      	mov	r0, r3
 800566a:	371c      	adds	r7, #28
 800566c:	46bd      	mov	sp, r7
 800566e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005672:	4770      	bx	lr

08005674 <deliverMessage>:


int deliverMessage(MQTTClient* c, MQTTString* topicName, MQTTMessage* message)
{
 8005674:	b580      	push	{r7, lr}
 8005676:	b08a      	sub	sp, #40	@ 0x28
 8005678:	af00      	add	r7, sp, #0
 800567a:	60f8      	str	r0, [r7, #12]
 800567c:	60b9      	str	r1, [r7, #8]
 800567e:	607a      	str	r2, [r7, #4]
    int i;
    int rc = FAILURE;
 8005680:	f04f 33ff 	mov.w	r3, #4294967295
 8005684:	623b      	str	r3, [r7, #32]

    // we have to find the right message handler - indexed by topic
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
 8005686:	2300      	movs	r3, #0
 8005688:	627b      	str	r3, [r7, #36]	@ 0x24
 800568a:	e03c      	b.n	8005706 <deliverMessage+0x92>
    {
        if (c->messageHandlers[i].topicFilter != 0 && (MQTTPacket_equals(topicName, (char*)c->messageHandlers[i].topicFilter) ||
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005690:	3205      	adds	r2, #5
 8005692:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 8005696:	2b00      	cmp	r3, #0
 8005698:	d032      	beq.n	8005700 <deliverMessage+0x8c>
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800569e:	3205      	adds	r2, #5
 80056a0:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 80056a4:	4619      	mov	r1, r3
 80056a6:	68b8      	ldr	r0, [r7, #8]
 80056a8:	f001 f962 	bl	8006970 <MQTTPacket_equals>
 80056ac:	4603      	mov	r3, r0
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d10b      	bne.n	80056ca <deliverMessage+0x56>
                isTopicMatched((char*)c->messageHandlers[i].topicFilter, topicName)))
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80056b6:	3205      	adds	r2, #5
 80056b8:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 80056bc:	68b9      	ldr	r1, [r7, #8]
 80056be:	4618      	mov	r0, r3
 80056c0:	f7ff ff6f 	bl	80055a2 <isTopicMatched>
 80056c4:	4603      	mov	r3, r0
        if (c->messageHandlers[i].topicFilter != 0 && (MQTTPacket_equals(topicName, (char*)c->messageHandlers[i].topicFilter) ||
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d01a      	beq.n	8005700 <deliverMessage+0x8c>
        {
            if (c->messageHandlers[i].fp != NULL)
 80056ca:	68fa      	ldr	r2, [r7, #12]
 80056cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056ce:	3305      	adds	r3, #5
 80056d0:	00db      	lsls	r3, r3, #3
 80056d2:	4413      	add	r3, r2
 80056d4:	685b      	ldr	r3, [r3, #4]
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d012      	beq.n	8005700 <deliverMessage+0x8c>
            {
                MessageData md;
                NewMessageData(&md, topicName, message);
 80056da:	f107 0318 	add.w	r3, r7, #24
 80056de:	687a      	ldr	r2, [r7, #4]
 80056e0:	68b9      	ldr	r1, [r7, #8]
 80056e2:	4618      	mov	r0, r3
 80056e4:	f7ff fddc 	bl	80052a0 <NewMessageData>
                c->messageHandlers[i].fp(&md);
 80056e8:	68fa      	ldr	r2, [r7, #12]
 80056ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056ec:	3305      	adds	r3, #5
 80056ee:	00db      	lsls	r3, r3, #3
 80056f0:	4413      	add	r3, r2
 80056f2:	685b      	ldr	r3, [r3, #4]
 80056f4:	f107 0218 	add.w	r2, r7, #24
 80056f8:	4610      	mov	r0, r2
 80056fa:	4798      	blx	r3
                rc = MQTT_SUCCESS;
 80056fc:	2300      	movs	r3, #0
 80056fe:	623b      	str	r3, [r7, #32]
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
 8005700:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005702:	3301      	adds	r3, #1
 8005704:	627b      	str	r3, [r7, #36]	@ 0x24
 8005706:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005708:	2b04      	cmp	r3, #4
 800570a:	ddbf      	ble.n	800568c <deliverMessage+0x18>
            }
        }
    }

    if (rc == FAILURE && c->defaultMessageHandler != NULL)
 800570c:	6a3b      	ldr	r3, [r7, #32]
 800570e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005712:	d112      	bne.n	800573a <deliverMessage+0xc6>
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005718:	2b00      	cmp	r3, #0
 800571a:	d00e      	beq.n	800573a <deliverMessage+0xc6>
    {
        MessageData md;
        NewMessageData(&md, topicName, message);
 800571c:	f107 0310 	add.w	r3, r7, #16
 8005720:	687a      	ldr	r2, [r7, #4]
 8005722:	68b9      	ldr	r1, [r7, #8]
 8005724:	4618      	mov	r0, r3
 8005726:	f7ff fdbb 	bl	80052a0 <NewMessageData>
        c->defaultMessageHandler(&md);
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800572e:	f107 0210 	add.w	r2, r7, #16
 8005732:	4610      	mov	r0, r2
 8005734:	4798      	blx	r3
        rc = MQTT_SUCCESS;
 8005736:	2300      	movs	r3, #0
 8005738:	623b      	str	r3, [r7, #32]
    }

    return rc;
 800573a:	6a3b      	ldr	r3, [r7, #32]
}
 800573c:	4618      	mov	r0, r3
 800573e:	3728      	adds	r7, #40	@ 0x28
 8005740:	46bd      	mov	sp, r7
 8005742:	bd80      	pop	{r7, pc}

08005744 <keepalive>:


int keepalive(MQTTClient* c)
{
 8005744:	b580      	push	{r7, lr}
 8005746:	b086      	sub	sp, #24
 8005748:	af00      	add	r7, sp, #0
 800574a:	6078      	str	r0, [r7, #4]
    int rc = MQTT_SUCCESS;
 800574c:	2300      	movs	r3, #0
 800574e:	617b      	str	r3, [r7, #20]

    if (c->keepAliveInterval == 0)
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	699b      	ldr	r3, [r3, #24]
 8005754:	2b00      	cmp	r3, #0
 8005756:	d03e      	beq.n	80057d6 <keepalive+0x92>
        goto exit;

    if (TimerIsExpired(&c->last_sent) || TimerIsExpired(&c->last_received))
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	3358      	adds	r3, #88	@ 0x58
 800575c:	4618      	mov	r0, r3
 800575e:	f000 fb91 	bl	8005e84 <TimerIsExpired>
 8005762:	4603      	mov	r3, r0
 8005764:	2b00      	cmp	r3, #0
 8005766:	d107      	bne.n	8005778 <keepalive+0x34>
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	3360      	adds	r3, #96	@ 0x60
 800576c:	4618      	mov	r0, r3
 800576e:	f000 fb89 	bl	8005e84 <TimerIsExpired>
 8005772:	4603      	mov	r3, r0
 8005774:	2b00      	cmp	r3, #0
 8005776:	d030      	beq.n	80057da <keepalive+0x96>
    {
        if (c->ping_outstanding)
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	7f1b      	ldrb	r3, [r3, #28]
 800577c:	2b00      	cmp	r3, #0
 800577e:	d003      	beq.n	8005788 <keepalive+0x44>
            rc = FAILURE; /* PINGRESP not received in keepalive interval */
 8005780:	f04f 33ff 	mov.w	r3, #4294967295
 8005784:	617b      	str	r3, [r7, #20]
 8005786:	e029      	b.n	80057dc <keepalive+0x98>
        else
        {
            Timer timer;
            TimerInit(&timer);
 8005788:	f107 0308 	add.w	r3, r7, #8
 800578c:	4618      	mov	r0, r3
 800578e:	f000 fb6b 	bl	8005e68 <TimerInit>
            TimerCountdownMS(&timer, 1000);
 8005792:	f107 0308 	add.w	r3, r7, #8
 8005796:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800579a:	4618      	mov	r0, r3
 800579c:	f000 fb88 	bl	8005eb0 <TimerCountdownMS>
            int len = MQTTSerialize_pingreq(c->buf, c->buf_size);
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	691a      	ldr	r2, [r3, #16]
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	689b      	ldr	r3, [r3, #8]
 80057a8:	4619      	mov	r1, r3
 80057aa:	4610      	mov	r0, r2
 80057ac:	f000 fe45 	bl	800643a <MQTTSerialize_pingreq>
 80057b0:	6138      	str	r0, [r7, #16]
            if (len > 0 && (rc = sendPacket(c, len, &timer)) == MQTT_SUCCESS) // send the ping packet
 80057b2:	693b      	ldr	r3, [r7, #16]
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	dd11      	ble.n	80057dc <keepalive+0x98>
 80057b8:	f107 0308 	add.w	r3, r7, #8
 80057bc:	461a      	mov	r2, r3
 80057be:	6939      	ldr	r1, [r7, #16]
 80057c0:	6878      	ldr	r0, [r7, #4]
 80057c2:	f7ff fd98 	bl	80052f6 <sendPacket>
 80057c6:	6178      	str	r0, [r7, #20]
 80057c8:	697b      	ldr	r3, [r7, #20]
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d106      	bne.n	80057dc <keepalive+0x98>
                c->ping_outstanding = 1;
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	2201      	movs	r2, #1
 80057d2:	771a      	strb	r2, [r3, #28]
 80057d4:	e002      	b.n	80057dc <keepalive+0x98>
        goto exit;
 80057d6:	bf00      	nop
 80057d8:	e000      	b.n	80057dc <keepalive+0x98>
        }
    }

exit:
 80057da:	bf00      	nop
    return rc;
 80057dc:	697b      	ldr	r3, [r7, #20]
}
 80057de:	4618      	mov	r0, r3
 80057e0:	3718      	adds	r7, #24
 80057e2:	46bd      	mov	sp, r7
 80057e4:	bd80      	pop	{r7, pc}

080057e6 <MQTTCleanSession>:


void MQTTCleanSession(MQTTClient* c)
{
 80057e6:	b480      	push	{r7}
 80057e8:	b085      	sub	sp, #20
 80057ea:	af00      	add	r7, sp, #0
 80057ec:	6078      	str	r0, [r7, #4]
    int i = 0;
 80057ee:	2300      	movs	r3, #0
 80057f0:	60fb      	str	r3, [r7, #12]

    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
 80057f2:	2300      	movs	r3, #0
 80057f4:	60fb      	str	r3, [r7, #12]
 80057f6:	e008      	b.n	800580a <MQTTCleanSession+0x24>
        c->messageHandlers[i].topicFilter = NULL;
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	68fa      	ldr	r2, [r7, #12]
 80057fc:	3205      	adds	r2, #5
 80057fe:	2100      	movs	r1, #0
 8005800:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	3301      	adds	r3, #1
 8005808:	60fb      	str	r3, [r7, #12]
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	2b04      	cmp	r3, #4
 800580e:	ddf3      	ble.n	80057f8 <MQTTCleanSession+0x12>
}
 8005810:	bf00      	nop
 8005812:	bf00      	nop
 8005814:	3714      	adds	r7, #20
 8005816:	46bd      	mov	sp, r7
 8005818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800581c:	4770      	bx	lr

0800581e <MQTTCloseSession>:


void MQTTCloseSession(MQTTClient* c)
{
 800581e:	b580      	push	{r7, lr}
 8005820:	b082      	sub	sp, #8
 8005822:	af00      	add	r7, sp, #0
 8005824:	6078      	str	r0, [r7, #4]
    c->ping_outstanding = 0;
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	2200      	movs	r2, #0
 800582a:	771a      	strb	r2, [r3, #28]
    c->isconnected = 0;
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	2200      	movs	r2, #0
 8005830:	621a      	str	r2, [r3, #32]
    if (c->cleansession)
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005836:	2b00      	cmp	r3, #0
 8005838:	d002      	beq.n	8005840 <MQTTCloseSession+0x22>
        MQTTCleanSession(c);
 800583a:	6878      	ldr	r0, [r7, #4]
 800583c:	f7ff ffd3 	bl	80057e6 <MQTTCleanSession>
}
 8005840:	bf00      	nop
 8005842:	3708      	adds	r7, #8
 8005844:	46bd      	mov	sp, r7
 8005846:	bd80      	pop	{r7, pc}

08005848 <cycle>:


int cycle(MQTTClient* c, Timer* timer)
{
 8005848:	b5f0      	push	{r4, r5, r6, r7, lr}
 800584a:	b095      	sub	sp, #84	@ 0x54
 800584c:	af06      	add	r7, sp, #24
 800584e:	6078      	str	r0, [r7, #4]
 8005850:	6039      	str	r1, [r7, #0]
    int len = 0,
 8005852:	2300      	movs	r3, #0
 8005854:	637b      	str	r3, [r7, #52]	@ 0x34
        rc = MQTT_SUCCESS;
 8005856:	2300      	movs	r3, #0
 8005858:	633b      	str	r3, [r7, #48]	@ 0x30

    int packet_type = readPacket(c, timer);     /* read the socket, see what work is due */
 800585a:	6839      	ldr	r1, [r7, #0]
 800585c:	6878      	ldr	r0, [r7, #4]
 800585e:	f7ff fe1c 	bl	800549a <readPacket>
 8005862:	62f8      	str	r0, [r7, #44]	@ 0x2c

    switch (packet_type)
 8005864:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005866:	2b0d      	cmp	r3, #13
 8005868:	d81e      	bhi.n	80058a8 <cycle+0x60>
 800586a:	a201      	add	r2, pc, #4	@ (adr r2, 8005870 <cycle+0x28>)
 800586c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005870:	080059ff 	.word	0x080059ff
 8005874:	080058a9 	.word	0x080058a9
 8005878:	080059ff 	.word	0x080059ff
 800587c:	080058af 	.word	0x080058af
 8005880:	080059ff 	.word	0x080059ff
 8005884:	0800597b 	.word	0x0800597b
 8005888:	0800597b 	.word	0x0800597b
 800588c:	080059ff 	.word	0x080059ff
 8005890:	080058a9 	.word	0x080058a9
 8005894:	080059ff 	.word	0x080059ff
 8005898:	080058a9 	.word	0x080058a9
 800589c:	080059ff 	.word	0x080059ff
 80058a0:	080058a9 	.word	0x080058a9
 80058a4:	080059f7 	.word	0x080059f7
    {
        default:
            /* no more data to read, unrecoverable. Or read packet fails due to unexpected network error */
            rc = packet_type;
 80058a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80058aa:	633b      	str	r3, [r7, #48]	@ 0x30
            goto exit;
 80058ac:	e0b9      	b.n	8005a22 <cycle+0x1da>
        case PUBLISH:
        {
            MQTTString topicName;
            MQTTMessage msg;
            int intQoS;
            msg.payloadlen = 0; /* this is a size_t, but deserialize publish sets this as int */
 80058ae:	2300      	movs	r3, #0
 80058b0:	61fb      	str	r3, [r7, #28]
            if (MQTTDeserialize_publish(&msg.dup, &intQoS, &msg.retained, &msg.id, &topicName,
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	695b      	ldr	r3, [r3, #20]
               (unsigned char**)&msg.payload, (int*)&msg.payloadlen, c->readbuf, c->readbuf_size) != 1)
 80058b6:	687a      	ldr	r2, [r7, #4]
 80058b8:	68d2      	ldr	r2, [r2, #12]
            if (MQTTDeserialize_publish(&msg.dup, &intQoS, &msg.retained, &msg.id, &topicName,
 80058ba:	4616      	mov	r6, r2
 80058bc:	f107 0210 	add.w	r2, r7, #16
 80058c0:	1d15      	adds	r5, r2, #4
 80058c2:	f107 0210 	add.w	r2, r7, #16
 80058c6:	1c54      	adds	r4, r2, #1
 80058c8:	f107 010c 	add.w	r1, r7, #12
 80058cc:	f107 0210 	add.w	r2, r7, #16
 80058d0:	1c90      	adds	r0, r2, #2
 80058d2:	9604      	str	r6, [sp, #16]
 80058d4:	9303      	str	r3, [sp, #12]
 80058d6:	f107 0310 	add.w	r3, r7, #16
 80058da:	330c      	adds	r3, #12
 80058dc:	9302      	str	r3, [sp, #8]
 80058de:	f107 0310 	add.w	r3, r7, #16
 80058e2:	3308      	adds	r3, #8
 80058e4:	9301      	str	r3, [sp, #4]
 80058e6:	f107 0320 	add.w	r3, r7, #32
 80058ea:	9300      	str	r3, [sp, #0]
 80058ec:	462b      	mov	r3, r5
 80058ee:	4622      	mov	r2, r4
 80058f0:	f000 fdb2 	bl	8006458 <MQTTDeserialize_publish>
 80058f4:	4603      	mov	r3, r0
 80058f6:	2b01      	cmp	r3, #1
 80058f8:	f040 8090 	bne.w	8005a1c <cycle+0x1d4>
                goto exit;
            msg.qos = (enum QoS)intQoS;
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	b2db      	uxtb	r3, r3
 8005900:	743b      	strb	r3, [r7, #16]
            deliverMessage(c, &topicName, &msg);
 8005902:	f107 0210 	add.w	r2, r7, #16
 8005906:	f107 0320 	add.w	r3, r7, #32
 800590a:	4619      	mov	r1, r3
 800590c:	6878      	ldr	r0, [r7, #4]
 800590e:	f7ff feb1 	bl	8005674 <deliverMessage>
            if (msg.qos != QOS0)
 8005912:	7c3b      	ldrb	r3, [r7, #16]
 8005914:	2b00      	cmp	r3, #0
 8005916:	d074      	beq.n	8005a02 <cycle+0x1ba>
            {
                if (msg.qos == QOS1)
 8005918:	7c3b      	ldrb	r3, [r7, #16]
 800591a:	2b01      	cmp	r3, #1
 800591c:	d10c      	bne.n	8005938 <cycle+0xf0>
                    len = MQTTSerialize_ack(c->buf, c->buf_size, PUBACK, 0, msg.id);
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	6918      	ldr	r0, [r3, #16]
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	689b      	ldr	r3, [r3, #8]
 8005926:	4619      	mov	r1, r3
 8005928:	8abb      	ldrh	r3, [r7, #20]
 800592a:	9300      	str	r3, [sp, #0]
 800592c:	2300      	movs	r3, #0
 800592e:	2204      	movs	r2, #4
 8005930:	f001 f855 	bl	80069de <MQTTSerialize_ack>
 8005934:	6378      	str	r0, [r7, #52]	@ 0x34
 8005936:	e00e      	b.n	8005956 <cycle+0x10e>
                else if (msg.qos == QOS2)
 8005938:	7c3b      	ldrb	r3, [r7, #16]
 800593a:	2b02      	cmp	r3, #2
 800593c:	d10b      	bne.n	8005956 <cycle+0x10e>
                    len = MQTTSerialize_ack(c->buf, c->buf_size, PUBREC, 0, msg.id);
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	6918      	ldr	r0, [r3, #16]
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	689b      	ldr	r3, [r3, #8]
 8005946:	4619      	mov	r1, r3
 8005948:	8abb      	ldrh	r3, [r7, #20]
 800594a:	9300      	str	r3, [sp, #0]
 800594c:	2300      	movs	r3, #0
 800594e:	2205      	movs	r2, #5
 8005950:	f001 f845 	bl	80069de <MQTTSerialize_ack>
 8005954:	6378      	str	r0, [r7, #52]	@ 0x34
                if (len <= 0)
 8005956:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005958:	2b00      	cmp	r3, #0
 800595a:	dc03      	bgt.n	8005964 <cycle+0x11c>
                    rc = FAILURE;
 800595c:	f04f 33ff 	mov.w	r3, #4294967295
 8005960:	633b      	str	r3, [r7, #48]	@ 0x30
 8005962:	e005      	b.n	8005970 <cycle+0x128>
                else
                    rc = sendPacket(c, len, timer);
 8005964:	683a      	ldr	r2, [r7, #0]
 8005966:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8005968:	6878      	ldr	r0, [r7, #4]
 800596a:	f7ff fcc4 	bl	80052f6 <sendPacket>
 800596e:	6338      	str	r0, [r7, #48]	@ 0x30
                if (rc == FAILURE)
 8005970:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005972:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005976:	d144      	bne.n	8005a02 <cycle+0x1ba>
                    goto exit; // there was a problem
 8005978:	e053      	b.n	8005a22 <cycle+0x1da>
        case PUBREC:
        case PUBREL:
        {
            unsigned short mypacketid;
            unsigned char dup, type;
            if (MQTTDeserialize_ack(&type, &dup, &mypacketid, c->readbuf, c->readbuf_size) != 1)
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	695c      	ldr	r4, [r3, #20]
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	68db      	ldr	r3, [r3, #12]
 8005982:	f107 020a 	add.w	r2, r7, #10
 8005986:	f107 0109 	add.w	r1, r7, #9
 800598a:	f107 0008 	add.w	r0, r7, #8
 800598e:	9300      	str	r3, [sp, #0]
 8005990:	4623      	mov	r3, r4
 8005992:	f000 fdd3 	bl	800653c <MQTTDeserialize_ack>
 8005996:	4603      	mov	r3, r0
 8005998:	2b01      	cmp	r3, #1
 800599a:	d003      	beq.n	80059a4 <cycle+0x15c>
                rc = FAILURE;
 800599c:	f04f 33ff 	mov.w	r3, #4294967295
 80059a0:	633b      	str	r3, [r7, #48]	@ 0x30
 80059a2:	e023      	b.n	80059ec <cycle+0x1a4>
            else if ((len = MQTTSerialize_ack(c->buf, c->buf_size,
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	6918      	ldr	r0, [r3, #16]
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	689b      	ldr	r3, [r3, #8]
 80059ac:	4619      	mov	r1, r3
 80059ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80059b0:	2b05      	cmp	r3, #5
 80059b2:	d101      	bne.n	80059b8 <cycle+0x170>
 80059b4:	2206      	movs	r2, #6
 80059b6:	e000      	b.n	80059ba <cycle+0x172>
 80059b8:	2207      	movs	r2, #7
 80059ba:	897b      	ldrh	r3, [r7, #10]
 80059bc:	9300      	str	r3, [sp, #0]
 80059be:	2300      	movs	r3, #0
 80059c0:	f001 f80d 	bl	80069de <MQTTSerialize_ack>
 80059c4:	6378      	str	r0, [r7, #52]	@ 0x34
 80059c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	dc03      	bgt.n	80059d4 <cycle+0x18c>
                (packet_type == PUBREC) ? PUBREL : PUBCOMP, 0, mypacketid)) <= 0)
                rc = FAILURE;
 80059cc:	f04f 33ff 	mov.w	r3, #4294967295
 80059d0:	633b      	str	r3, [r7, #48]	@ 0x30
 80059d2:	e00b      	b.n	80059ec <cycle+0x1a4>
            else if ((rc = sendPacket(c, len, timer)) != MQTT_SUCCESS) // send the PUBREL packet
 80059d4:	683a      	ldr	r2, [r7, #0]
 80059d6:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80059d8:	6878      	ldr	r0, [r7, #4]
 80059da:	f7ff fc8c 	bl	80052f6 <sendPacket>
 80059de:	6338      	str	r0, [r7, #48]	@ 0x30
 80059e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d002      	beq.n	80059ec <cycle+0x1a4>
                rc = FAILURE; // there was a problem
 80059e6:	f04f 33ff 	mov.w	r3, #4294967295
 80059ea:	633b      	str	r3, [r7, #48]	@ 0x30
            if (rc == FAILURE)
 80059ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059f2:	d108      	bne.n	8005a06 <cycle+0x1be>
                goto exit; // there was a problem
 80059f4:	e015      	b.n	8005a22 <cycle+0x1da>
        }

        case PUBCOMP:
            break;
        case PINGRESP:
            c->ping_outstanding = 0;
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	2200      	movs	r2, #0
 80059fa:	771a      	strb	r2, [r3, #28]
            break;
 80059fc:	e004      	b.n	8005a08 <cycle+0x1c0>
            break;
 80059fe:	bf00      	nop
 8005a00:	e002      	b.n	8005a08 <cycle+0x1c0>
            break;
 8005a02:	bf00      	nop
 8005a04:	e000      	b.n	8005a08 <cycle+0x1c0>
            break;
 8005a06:	bf00      	nop
    }

    if (keepalive(c) != MQTT_SUCCESS) {
 8005a08:	6878      	ldr	r0, [r7, #4]
 8005a0a:	f7ff fe9b 	bl	8005744 <keepalive>
 8005a0e:	4603      	mov	r3, r0
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d005      	beq.n	8005a20 <cycle+0x1d8>
        //check only keepalive FAILURE status so that previous FAILURE status can be considered as FAULT
        rc = FAILURE;
 8005a14:	f04f 33ff 	mov.w	r3, #4294967295
 8005a18:	633b      	str	r3, [r7, #48]	@ 0x30
 8005a1a:	e002      	b.n	8005a22 <cycle+0x1da>
                goto exit;
 8005a1c:	bf00      	nop
 8005a1e:	e000      	b.n	8005a22 <cycle+0x1da>
    }

exit:
 8005a20:	bf00      	nop
    if (rc == MQTT_SUCCESS)
 8005a22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d102      	bne.n	8005a2e <cycle+0x1e6>
        rc = packet_type;
 8005a28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a2a:	633b      	str	r3, [r7, #48]	@ 0x30
 8005a2c:	e006      	b.n	8005a3c <cycle+0x1f4>
    else if (c->isconnected)
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	6a1b      	ldr	r3, [r3, #32]
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d002      	beq.n	8005a3c <cycle+0x1f4>
        MQTTCloseSession(c);
 8005a36:	6878      	ldr	r0, [r7, #4]
 8005a38:	f7ff fef1 	bl	800581e <MQTTCloseSession>
    return rc;
 8005a3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
}
 8005a3e:	4618      	mov	r0, r3
 8005a40:	373c      	adds	r7, #60	@ 0x3c
 8005a42:	46bd      	mov	sp, r7
 8005a44:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005a46:	bf00      	nop

08005a48 <MQTTYield>:


int MQTTYield(MQTTClient* c, int timeout_ms)
{
 8005a48:	b580      	push	{r7, lr}
 8005a4a:	b086      	sub	sp, #24
 8005a4c:	af00      	add	r7, sp, #0
 8005a4e:	6078      	str	r0, [r7, #4]
 8005a50:	6039      	str	r1, [r7, #0]
    int rc = MQTT_SUCCESS;
 8005a52:	2300      	movs	r3, #0
 8005a54:	617b      	str	r3, [r7, #20]
    Timer timer;

    TimerInit(&timer);
 8005a56:	f107 030c 	add.w	r3, r7, #12
 8005a5a:	4618      	mov	r0, r3
 8005a5c:	f000 fa04 	bl	8005e68 <TimerInit>
    TimerCountdownMS(&timer, timeout_ms);
 8005a60:	683a      	ldr	r2, [r7, #0]
 8005a62:	f107 030c 	add.w	r3, r7, #12
 8005a66:	4611      	mov	r1, r2
 8005a68:	4618      	mov	r0, r3
 8005a6a:	f000 fa21 	bl	8005eb0 <TimerCountdownMS>

	do
    {
        if (cycle(c, &timer) < 0)
 8005a6e:	f107 030c 	add.w	r3, r7, #12
 8005a72:	4619      	mov	r1, r3
 8005a74:	6878      	ldr	r0, [r7, #4]
 8005a76:	f7ff fee7 	bl	8005848 <cycle>
 8005a7a:	4603      	mov	r3, r0
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	da03      	bge.n	8005a88 <MQTTYield+0x40>
        {
            rc = FAILURE;
 8005a80:	f04f 33ff 	mov.w	r3, #4294967295
 8005a84:	617b      	str	r3, [r7, #20]
            break;
 8005a86:	e007      	b.n	8005a98 <MQTTYield+0x50>
        }
  	} while (!TimerIsExpired(&timer));
 8005a88:	f107 030c 	add.w	r3, r7, #12
 8005a8c:	4618      	mov	r0, r3
 8005a8e:	f000 f9f9 	bl	8005e84 <TimerIsExpired>
 8005a92:	4603      	mov	r3, r0
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d0ea      	beq.n	8005a6e <MQTTYield+0x26>

    return rc;
 8005a98:	697b      	ldr	r3, [r7, #20]
}
 8005a9a:	4618      	mov	r0, r3
 8005a9c:	3718      	adds	r7, #24
 8005a9e:	46bd      	mov	sp, r7
 8005aa0:	bd80      	pop	{r7, pc}

08005aa2 <waitfor>:
}
#endif


int waitfor(MQTTClient* c, int packet_type, Timer* timer)
{
 8005aa2:	b580      	push	{r7, lr}
 8005aa4:	b086      	sub	sp, #24
 8005aa6:	af00      	add	r7, sp, #0
 8005aa8:	60f8      	str	r0, [r7, #12]
 8005aaa:	60b9      	str	r1, [r7, #8]
 8005aac:	607a      	str	r2, [r7, #4]
    int rc = FAILURE;
 8005aae:	f04f 33ff 	mov.w	r3, #4294967295
 8005ab2:	617b      	str	r3, [r7, #20]

    do
    {
        if (TimerIsExpired(timer))
 8005ab4:	6878      	ldr	r0, [r7, #4]
 8005ab6:	f000 f9e5 	bl	8005e84 <TimerIsExpired>
 8005aba:	4603      	mov	r3, r0
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d10c      	bne.n	8005ada <waitfor+0x38>
            break; // we timed out
        rc = cycle(c, timer);
 8005ac0:	6879      	ldr	r1, [r7, #4]
 8005ac2:	68f8      	ldr	r0, [r7, #12]
 8005ac4:	f7ff fec0 	bl	8005848 <cycle>
 8005ac8:	6178      	str	r0, [r7, #20]
    }
    while (rc != packet_type && rc >= 0);
 8005aca:	697a      	ldr	r2, [r7, #20]
 8005acc:	68bb      	ldr	r3, [r7, #8]
 8005ace:	429a      	cmp	r2, r3
 8005ad0:	d004      	beq.n	8005adc <waitfor+0x3a>
 8005ad2:	697b      	ldr	r3, [r7, #20]
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	daed      	bge.n	8005ab4 <waitfor+0x12>
 8005ad8:	e000      	b.n	8005adc <waitfor+0x3a>
            break; // we timed out
 8005ada:	bf00      	nop

    return rc;
 8005adc:	697b      	ldr	r3, [r7, #20]
}
 8005ade:	4618      	mov	r0, r3
 8005ae0:	3718      	adds	r7, #24
 8005ae2:	46bd      	mov	sp, r7
 8005ae4:	bd80      	pop	{r7, pc}
	...

08005ae8 <MQTTConnectWithResults>:




int MQTTConnectWithResults(MQTTClient* c, MQTTPacket_connectData* options, MQTTConnackData* data)
{
 8005ae8:	b580      	push	{r7, lr}
 8005aea:	b09e      	sub	sp, #120	@ 0x78
 8005aec:	af00      	add	r7, sp, #0
 8005aee:	60f8      	str	r0, [r7, #12]
 8005af0:	60b9      	str	r1, [r7, #8]
 8005af2:	607a      	str	r2, [r7, #4]
    Timer connect_timer;
    int rc = FAILURE;
 8005af4:	f04f 33ff 	mov.w	r3, #4294967295
 8005af8:	677b      	str	r3, [r7, #116]	@ 0x74
    MQTTPacket_connectData default_options = MQTTPacket_connectData_initializer;
 8005afa:	4a43      	ldr	r2, [pc, #268]	@ (8005c08 <MQTTConnectWithResults+0x120>)
 8005afc:	f107 0310 	add.w	r3, r7, #16
 8005b00:	4611      	mov	r1, r2
 8005b02:	2258      	movs	r2, #88	@ 0x58
 8005b04:	4618      	mov	r0, r3
 8005b06:	f009 fa08 	bl	800ef1a <memcpy>
    int len = 0;
 8005b0a:	2300      	movs	r3, #0
 8005b0c:	673b      	str	r3, [r7, #112]	@ 0x70

#if defined(MQTT_TASK)
	  MutexLock(&c->mutex);
#endif
	  if (c->isconnected) /* don't send connect packet again if we are already connected */
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	6a1b      	ldr	r3, [r3, #32]
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d164      	bne.n	8005be0 <MQTTConnectWithResults+0xf8>
		  goto exit;

    TimerInit(&connect_timer);
 8005b16:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8005b1a:	4618      	mov	r0, r3
 8005b1c:	f000 f9a4 	bl	8005e68 <TimerInit>
    TimerCountdownMS(&connect_timer, c->command_timeout_ms);
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	685a      	ldr	r2, [r3, #4]
 8005b24:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8005b28:	4611      	mov	r1, r2
 8005b2a:	4618      	mov	r0, r3
 8005b2c:	f000 f9c0 	bl	8005eb0 <TimerCountdownMS>

    if (options == 0)
 8005b30:	68bb      	ldr	r3, [r7, #8]
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d102      	bne.n	8005b3c <MQTTConnectWithResults+0x54>
        options = &default_options; /* set default options if none were supplied */
 8005b36:	f107 0310 	add.w	r3, r7, #16
 8005b3a:	60bb      	str	r3, [r7, #8]

    c->keepAliveInterval = options->keepAliveInterval;
 8005b3c:	68bb      	ldr	r3, [r7, #8]
 8005b3e:	8b1b      	ldrh	r3, [r3, #24]
 8005b40:	461a      	mov	r2, r3
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	619a      	str	r2, [r3, #24]
    c->cleansession = options->cleansession;
 8005b46:	68bb      	ldr	r3, [r7, #8]
 8005b48:	7e9b      	ldrb	r3, [r3, #26]
 8005b4a:	461a      	mov	r2, r3
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	625a      	str	r2, [r3, #36]	@ 0x24
    TimerCountdown(&c->last_received, c->keepAliveInterval);
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	f103 0260 	add.w	r2, r3, #96	@ 0x60
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	699b      	ldr	r3, [r3, #24]
 8005b5a:	4619      	mov	r1, r3
 8005b5c:	4610      	mov	r0, r2
 8005b5e:	f000 f9bb 	bl	8005ed8 <TimerCountdown>
    if ((len = MQTTSerialize_connect(c->buf, c->buf_size, options)) <= 0)
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	6918      	ldr	r0, [r3, #16]
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	689b      	ldr	r3, [r3, #8]
 8005b6a:	68ba      	ldr	r2, [r7, #8]
 8005b6c:	4619      	mov	r1, r3
 8005b6e:	f000 faeb 	bl	8006148 <MQTTSerialize_connect>
 8005b72:	6738      	str	r0, [r7, #112]	@ 0x70
 8005b74:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	dd34      	ble.n	8005be4 <MQTTConnectWithResults+0xfc>
        goto exit;
    if ((rc = sendPacket(c, len, &connect_timer)) != MQTT_SUCCESS)  // send the connect packet
 8005b7a:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8005b7e:	461a      	mov	r2, r3
 8005b80:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 8005b82:	68f8      	ldr	r0, [r7, #12]
 8005b84:	f7ff fbb7 	bl	80052f6 <sendPacket>
 8005b88:	6778      	str	r0, [r7, #116]	@ 0x74
 8005b8a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d12b      	bne.n	8005be8 <MQTTConnectWithResults+0x100>
        goto exit; // there was a problem

    // this will be a blocking call, wait for the connack
    if (waitfor(c, CONNACK, &connect_timer) == CONNACK)
 8005b90:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8005b94:	461a      	mov	r2, r3
 8005b96:	2102      	movs	r1, #2
 8005b98:	68f8      	ldr	r0, [r7, #12]
 8005b9a:	f7ff ff82 	bl	8005aa2 <waitfor>
 8005b9e:	4603      	mov	r3, r0
 8005ba0:	2b02      	cmp	r3, #2
 8005ba2:	d119      	bne.n	8005bd8 <MQTTConnectWithResults+0xf0>
    {
        data->rc = 0;
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	2200      	movs	r2, #0
 8005ba8:	701a      	strb	r2, [r3, #0]
        data->sessionPresent = 0;
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	2200      	movs	r2, #0
 8005bae:	705a      	strb	r2, [r3, #1]
        if (MQTTDeserialize_connack(&data->sessionPresent, &data->rc, c->readbuf, c->readbuf_size) == 1)
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	1c58      	adds	r0, r3, #1
 8005bb4:	6879      	ldr	r1, [r7, #4]
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	695a      	ldr	r2, [r3, #20]
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	68db      	ldr	r3, [r3, #12]
 8005bbe:	f000 fbaf 	bl	8006320 <MQTTDeserialize_connack>
 8005bc2:	4603      	mov	r3, r0
 8005bc4:	2b01      	cmp	r3, #1
 8005bc6:	d103      	bne.n	8005bd0 <MQTTConnectWithResults+0xe8>
            rc = data->rc;
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	781b      	ldrb	r3, [r3, #0]
 8005bcc:	677b      	str	r3, [r7, #116]	@ 0x74
 8005bce:	e00c      	b.n	8005bea <MQTTConnectWithResults+0x102>
        else
            rc = FAILURE;
 8005bd0:	f04f 33ff 	mov.w	r3, #4294967295
 8005bd4:	677b      	str	r3, [r7, #116]	@ 0x74
 8005bd6:	e008      	b.n	8005bea <MQTTConnectWithResults+0x102>
    }
    else
        rc = FAILURE;
 8005bd8:	f04f 33ff 	mov.w	r3, #4294967295
 8005bdc:	677b      	str	r3, [r7, #116]	@ 0x74
 8005bde:	e004      	b.n	8005bea <MQTTConnectWithResults+0x102>
		  goto exit;
 8005be0:	bf00      	nop
 8005be2:	e002      	b.n	8005bea <MQTTConnectWithResults+0x102>
        goto exit;
 8005be4:	bf00      	nop
 8005be6:	e000      	b.n	8005bea <MQTTConnectWithResults+0x102>
        goto exit; // there was a problem
 8005be8:	bf00      	nop

exit:
    if (rc == MQTT_SUCCESS)
 8005bea:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d105      	bne.n	8005bfc <MQTTConnectWithResults+0x114>
    {
        c->isconnected = 1;
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	2201      	movs	r2, #1
 8005bf4:	621a      	str	r2, [r3, #32]
        c->ping_outstanding = 0;
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	2200      	movs	r2, #0
 8005bfa:	771a      	strb	r2, [r3, #28]

#if defined(MQTT_TASK)
	  MutexUnlock(&c->mutex);
#endif

    return rc;
 8005bfc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
}
 8005bfe:	4618      	mov	r0, r3
 8005c00:	3778      	adds	r7, #120	@ 0x78
 8005c02:	46bd      	mov	sp, r7
 8005c04:	bd80      	pop	{r7, pc}
 8005c06:	bf00      	nop
 8005c08:	08011054 	.word	0x08011054

08005c0c <MQTTConnect>:


int MQTTConnect(MQTTClient* c, MQTTPacket_connectData* options)
{
 8005c0c:	b580      	push	{r7, lr}
 8005c0e:	b084      	sub	sp, #16
 8005c10:	af00      	add	r7, sp, #0
 8005c12:	6078      	str	r0, [r7, #4]
 8005c14:	6039      	str	r1, [r7, #0]
    MQTTConnackData data;
    return MQTTConnectWithResults(c, options, &data);
 8005c16:	f107 030c 	add.w	r3, r7, #12
 8005c1a:	461a      	mov	r2, r3
 8005c1c:	6839      	ldr	r1, [r7, #0]
 8005c1e:	6878      	ldr	r0, [r7, #4]
 8005c20:	f7ff ff62 	bl	8005ae8 <MQTTConnectWithResults>
 8005c24:	4603      	mov	r3, r0
}
 8005c26:	4618      	mov	r0, r3
 8005c28:	3710      	adds	r7, #16
 8005c2a:	46bd      	mov	sp, r7
 8005c2c:	bd80      	pop	{r7, pc}

08005c2e <MQTTSetMessageHandler>:


int MQTTSetMessageHandler(MQTTClient* c, const char* topicFilter, messageHandler messageHandler)
{
 8005c2e:	b580      	push	{r7, lr}
 8005c30:	b086      	sub	sp, #24
 8005c32:	af00      	add	r7, sp, #0
 8005c34:	60f8      	str	r0, [r7, #12]
 8005c36:	60b9      	str	r1, [r7, #8]
 8005c38:	607a      	str	r2, [r7, #4]
    int rc = FAILURE;
 8005c3a:	f04f 33ff 	mov.w	r3, #4294967295
 8005c3e:	617b      	str	r3, [r7, #20]
    int i = -1;
 8005c40:	f04f 33ff 	mov.w	r3, #4294967295
 8005c44:	613b      	str	r3, [r7, #16]

    /* first check for an existing matching slot */
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
 8005c46:	2300      	movs	r3, #0
 8005c48:	613b      	str	r3, [r7, #16]
 8005c4a:	e028      	b.n	8005c9e <MQTTSetMessageHandler+0x70>
    {
        if (c->messageHandlers[i].topicFilter != NULL && strcmp(c->messageHandlers[i].topicFilter, topicFilter) == 0)
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	693a      	ldr	r2, [r7, #16]
 8005c50:	3205      	adds	r2, #5
 8005c52:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d01e      	beq.n	8005c98 <MQTTSetMessageHandler+0x6a>
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	693a      	ldr	r2, [r7, #16]
 8005c5e:	3205      	adds	r2, #5
 8005c60:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 8005c64:	68b9      	ldr	r1, [r7, #8]
 8005c66:	4618      	mov	r0, r3
 8005c68:	f7fa faba 	bl	80001e0 <strcmp>
 8005c6c:	4603      	mov	r3, r0
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d112      	bne.n	8005c98 <MQTTSetMessageHandler+0x6a>
        {
            if (messageHandler == NULL) /* remove existing */
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d10c      	bne.n	8005c92 <MQTTSetMessageHandler+0x64>
            {
                c->messageHandlers[i].topicFilter = NULL;
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	693a      	ldr	r2, [r7, #16]
 8005c7c:	3205      	adds	r2, #5
 8005c7e:	2100      	movs	r1, #0
 8005c80:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
                c->messageHandlers[i].fp = NULL;
 8005c84:	68fa      	ldr	r2, [r7, #12]
 8005c86:	693b      	ldr	r3, [r7, #16]
 8005c88:	3305      	adds	r3, #5
 8005c8a:	00db      	lsls	r3, r3, #3
 8005c8c:	4413      	add	r3, r2
 8005c8e:	2200      	movs	r2, #0
 8005c90:	605a      	str	r2, [r3, #4]
            }
            rc = MQTT_SUCCESS; /* return i when adding new subscription */
 8005c92:	2300      	movs	r3, #0
 8005c94:	617b      	str	r3, [r7, #20]
            break;
 8005c96:	e005      	b.n	8005ca4 <MQTTSetMessageHandler+0x76>
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
 8005c98:	693b      	ldr	r3, [r7, #16]
 8005c9a:	3301      	adds	r3, #1
 8005c9c:	613b      	str	r3, [r7, #16]
 8005c9e:	693b      	ldr	r3, [r7, #16]
 8005ca0:	2b04      	cmp	r3, #4
 8005ca2:	ddd3      	ble.n	8005c4c <MQTTSetMessageHandler+0x1e>
        }
    }
    /* if no existing, look for empty slot (unless we are removing) */
    if (messageHandler != NULL) {
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d026      	beq.n	8005cf8 <MQTTSetMessageHandler+0xca>
        if (rc == FAILURE)
 8005caa:	697b      	ldr	r3, [r7, #20]
 8005cac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cb0:	d112      	bne.n	8005cd8 <MQTTSetMessageHandler+0xaa>
        {
            for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
 8005cb2:	2300      	movs	r3, #0
 8005cb4:	613b      	str	r3, [r7, #16]
 8005cb6:	e00c      	b.n	8005cd2 <MQTTSetMessageHandler+0xa4>
            {
                if (c->messageHandlers[i].topicFilter == NULL)
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	693a      	ldr	r2, [r7, #16]
 8005cbc:	3205      	adds	r2, #5
 8005cbe:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d102      	bne.n	8005ccc <MQTTSetMessageHandler+0x9e>
                {
                    rc = MQTT_SUCCESS;
 8005cc6:	2300      	movs	r3, #0
 8005cc8:	617b      	str	r3, [r7, #20]
                    break;
 8005cca:	e005      	b.n	8005cd8 <MQTTSetMessageHandler+0xaa>
            for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
 8005ccc:	693b      	ldr	r3, [r7, #16]
 8005cce:	3301      	adds	r3, #1
 8005cd0:	613b      	str	r3, [r7, #16]
 8005cd2:	693b      	ldr	r3, [r7, #16]
 8005cd4:	2b04      	cmp	r3, #4
 8005cd6:	ddef      	ble.n	8005cb8 <MQTTSetMessageHandler+0x8a>
                }
            }
        }
        if (i < MAX_MESSAGE_HANDLERS)
 8005cd8:	693b      	ldr	r3, [r7, #16]
 8005cda:	2b04      	cmp	r3, #4
 8005cdc:	dc0c      	bgt.n	8005cf8 <MQTTSetMessageHandler+0xca>
        {
            c->messageHandlers[i].topicFilter = topicFilter;
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	693a      	ldr	r2, [r7, #16]
 8005ce2:	3205      	adds	r2, #5
 8005ce4:	68b9      	ldr	r1, [r7, #8]
 8005ce6:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
            c->messageHandlers[i].fp = messageHandler;
 8005cea:	68fa      	ldr	r2, [r7, #12]
 8005cec:	693b      	ldr	r3, [r7, #16]
 8005cee:	3305      	adds	r3, #5
 8005cf0:	00db      	lsls	r3, r3, #3
 8005cf2:	4413      	add	r3, r2
 8005cf4:	687a      	ldr	r2, [r7, #4]
 8005cf6:	605a      	str	r2, [r3, #4]
        }
    }
    return rc;
 8005cf8:	697b      	ldr	r3, [r7, #20]
}
 8005cfa:	4618      	mov	r0, r3
 8005cfc:	3718      	adds	r7, #24
 8005cfe:	46bd      	mov	sp, r7
 8005d00:	bd80      	pop	{r7, pc}

08005d02 <MQTTSubscribeWithResults>:


int MQTTSubscribeWithResults(MQTTClient* c, const char* topicFilter, enum QoS qos,
       messageHandler messageHandler, MQTTSubackData* data)
{
 8005d02:	b5b0      	push	{r4, r5, r7, lr}
 8005d04:	b092      	sub	sp, #72	@ 0x48
 8005d06:	af04      	add	r7, sp, #16
 8005d08:	60f8      	str	r0, [r7, #12]
 8005d0a:	60b9      	str	r1, [r7, #8]
 8005d0c:	603b      	str	r3, [r7, #0]
 8005d0e:	4613      	mov	r3, r2
 8005d10:	71fb      	strb	r3, [r7, #7]
    int rc = FAILURE;
 8005d12:	f04f 33ff 	mov.w	r3, #4294967295
 8005d16:	637b      	str	r3, [r7, #52]	@ 0x34
    Timer timer;
    int len = 0;
 8005d18:	2300      	movs	r3, #0
 8005d1a:	633b      	str	r3, [r7, #48]	@ 0x30
    MQTTString topic = MQTTString_initializer;
 8005d1c:	2300      	movs	r3, #0
 8005d1e:	61fb      	str	r3, [r7, #28]
 8005d20:	2300      	movs	r3, #0
 8005d22:	623b      	str	r3, [r7, #32]
 8005d24:	2300      	movs	r3, #0
 8005d26:	627b      	str	r3, [r7, #36]	@ 0x24
    topic.cstring = (char *)topicFilter;
 8005d28:	68bb      	ldr	r3, [r7, #8]
 8005d2a:	61fb      	str	r3, [r7, #28]

#if defined(MQTT_TASK)
	  MutexLock(&c->mutex);
#endif
	  if (!c->isconnected)
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	6a1b      	ldr	r3, [r3, #32]
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d063      	beq.n	8005dfc <MQTTSubscribeWithResults+0xfa>
		    goto exit;

    TimerInit(&timer);
 8005d34:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8005d38:	4618      	mov	r0, r3
 8005d3a:	f000 f895 	bl	8005e68 <TimerInit>
    TimerCountdownMS(&timer, c->command_timeout_ms);
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	685a      	ldr	r2, [r3, #4]
 8005d42:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8005d46:	4611      	mov	r1, r2
 8005d48:	4618      	mov	r0, r3
 8005d4a:	f000 f8b1 	bl	8005eb0 <TimerCountdownMS>

    len = MQTTSerialize_subscribe(c->buf, c->buf_size, 0, getNextPacketId(c), 1, &topic, (int*)&qos);
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	691c      	ldr	r4, [r3, #16]
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	689b      	ldr	r3, [r3, #8]
 8005d56:	461d      	mov	r5, r3
 8005d58:	68f8      	ldr	r0, [r7, #12]
 8005d5a:	f7ff fab3 	bl	80052c4 <getNextPacketId>
 8005d5e:	4603      	mov	r3, r0
 8005d60:	b29a      	uxth	r2, r3
 8005d62:	1dfb      	adds	r3, r7, #7
 8005d64:	9302      	str	r3, [sp, #8]
 8005d66:	f107 031c 	add.w	r3, r7, #28
 8005d6a:	9301      	str	r3, [sp, #4]
 8005d6c:	2301      	movs	r3, #1
 8005d6e:	9300      	str	r3, [sp, #0]
 8005d70:	4613      	mov	r3, r2
 8005d72:	2200      	movs	r2, #0
 8005d74:	4629      	mov	r1, r5
 8005d76:	4620      	mov	r0, r4
 8005d78:	f000 fead 	bl	8006ad6 <MQTTSerialize_subscribe>
 8005d7c:	6338      	str	r0, [r7, #48]	@ 0x30
    if (len <= 0)
 8005d7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	dd3d      	ble.n	8005e00 <MQTTSubscribeWithResults+0xfe>
        goto exit;
    if ((rc = sendPacket(c, len, &timer)) != MQTT_SUCCESS) // send the subscribe packet
 8005d84:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8005d88:	461a      	mov	r2, r3
 8005d8a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005d8c:	68f8      	ldr	r0, [r7, #12]
 8005d8e:	f7ff fab2 	bl	80052f6 <sendPacket>
 8005d92:	6378      	str	r0, [r7, #52]	@ 0x34
 8005d94:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d134      	bne.n	8005e04 <MQTTSubscribeWithResults+0x102>
        goto exit;             // there was a problem

    if (waitfor(c, SUBACK, &timer) == SUBACK)      // wait for suback
 8005d9a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8005d9e:	461a      	mov	r2, r3
 8005da0:	2109      	movs	r1, #9
 8005da2:	68f8      	ldr	r0, [r7, #12]
 8005da4:	f7ff fe7d 	bl	8005aa2 <waitfor>
 8005da8:	4603      	mov	r3, r0
 8005daa:	2b09      	cmp	r3, #9
 8005dac:	d122      	bne.n	8005df4 <MQTTSubscribeWithResults+0xf2>
    {
        int count = 0;
 8005dae:	2300      	movs	r3, #0
 8005db0:	61bb      	str	r3, [r7, #24]
        unsigned short mypacketid;
        data->grantedQoS = QOS0;
 8005db2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005db4:	2200      	movs	r2, #0
 8005db6:	701a      	strb	r2, [r3, #0]
        if (MQTTDeserialize_suback(&mypacketid, 1, &count, (int*)&data->grantedQoS, c->readbuf, c->readbuf_size) == 1)
 8005db8:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	695b      	ldr	r3, [r3, #20]
 8005dbe:	68fa      	ldr	r2, [r7, #12]
 8005dc0:	68d2      	ldr	r2, [r2, #12]
 8005dc2:	4614      	mov	r4, r2
 8005dc4:	f107 0218 	add.w	r2, r7, #24
 8005dc8:	f107 0016 	add.w	r0, r7, #22
 8005dcc:	9401      	str	r4, [sp, #4]
 8005dce:	9300      	str	r3, [sp, #0]
 8005dd0:	460b      	mov	r3, r1
 8005dd2:	2101      	movs	r1, #1
 8005dd4:	f000 fefb 	bl	8006bce <MQTTDeserialize_suback>
 8005dd8:	4603      	mov	r3, r0
 8005dda:	2b01      	cmp	r3, #1
 8005ddc:	d113      	bne.n	8005e06 <MQTTSubscribeWithResults+0x104>
        {
            if (data->grantedQoS != 0x80)
 8005dde:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005de0:	781b      	ldrb	r3, [r3, #0]
 8005de2:	2b80      	cmp	r3, #128	@ 0x80
 8005de4:	d00f      	beq.n	8005e06 <MQTTSubscribeWithResults+0x104>
                rc = MQTTSetMessageHandler(c, topicFilter, messageHandler);
 8005de6:	683a      	ldr	r2, [r7, #0]
 8005de8:	68b9      	ldr	r1, [r7, #8]
 8005dea:	68f8      	ldr	r0, [r7, #12]
 8005dec:	f7ff ff1f 	bl	8005c2e <MQTTSetMessageHandler>
 8005df0:	6378      	str	r0, [r7, #52]	@ 0x34
 8005df2:	e008      	b.n	8005e06 <MQTTSubscribeWithResults+0x104>
        }
    }
    else
        rc = FAILURE;
 8005df4:	f04f 33ff 	mov.w	r3, #4294967295
 8005df8:	637b      	str	r3, [r7, #52]	@ 0x34
 8005dfa:	e004      	b.n	8005e06 <MQTTSubscribeWithResults+0x104>
		    goto exit;
 8005dfc:	bf00      	nop
 8005dfe:	e002      	b.n	8005e06 <MQTTSubscribeWithResults+0x104>
        goto exit;
 8005e00:	bf00      	nop
 8005e02:	e000      	b.n	8005e06 <MQTTSubscribeWithResults+0x104>
        goto exit;             // there was a problem
 8005e04:	bf00      	nop

exit:
    if (rc == FAILURE)
 8005e06:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005e08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e0c:	d102      	bne.n	8005e14 <MQTTSubscribeWithResults+0x112>
        MQTTCloseSession(c);
 8005e0e:	68f8      	ldr	r0, [r7, #12]
 8005e10:	f7ff fd05 	bl	800581e <MQTTCloseSession>
#if defined(MQTT_TASK)
	  MutexUnlock(&c->mutex);
#endif
    return rc;
 8005e14:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8005e16:	4618      	mov	r0, r3
 8005e18:	3738      	adds	r7, #56	@ 0x38
 8005e1a:	46bd      	mov	sp, r7
 8005e1c:	bdb0      	pop	{r4, r5, r7, pc}

08005e1e <MQTTSubscribe>:


int MQTTSubscribe(MQTTClient* c, const char* topicFilter, enum QoS qos,
       messageHandler messageHandler)
{
 8005e1e:	b580      	push	{r7, lr}
 8005e20:	b088      	sub	sp, #32
 8005e22:	af02      	add	r7, sp, #8
 8005e24:	60f8      	str	r0, [r7, #12]
 8005e26:	60b9      	str	r1, [r7, #8]
 8005e28:	603b      	str	r3, [r7, #0]
 8005e2a:	4613      	mov	r3, r2
 8005e2c:	71fb      	strb	r3, [r7, #7]
    MQTTSubackData data;
    return MQTTSubscribeWithResults(c, topicFilter, qos, messageHandler, &data);
 8005e2e:	79fa      	ldrb	r2, [r7, #7]
 8005e30:	f107 0314 	add.w	r3, r7, #20
 8005e34:	9300      	str	r3, [sp, #0]
 8005e36:	683b      	ldr	r3, [r7, #0]
 8005e38:	68b9      	ldr	r1, [r7, #8]
 8005e3a:	68f8      	ldr	r0, [r7, #12]
 8005e3c:	f7ff ff61 	bl	8005d02 <MQTTSubscribeWithResults>
 8005e40:	4603      	mov	r3, r0
}
 8005e42:	4618      	mov	r0, r3
 8005e44:	3718      	adds	r7, #24
 8005e46:	46bd      	mov	sp, r7
 8005e48:	bd80      	pop	{r7, pc}
	...

08005e4c <MilliTimer_Handler>:

/*
 * @brief MQTT MilliTimer handler
 * @note MUST BE register to your system 1m Tick timer handler.
 */
void MilliTimer_Handler(void) {
 8005e4c:	b480      	push	{r7}
 8005e4e:	af00      	add	r7, sp, #0
	MilliTimer++;
 8005e50:	4b04      	ldr	r3, [pc, #16]	@ (8005e64 <MilliTimer_Handler+0x18>)
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	3301      	adds	r3, #1
 8005e56:	4a03      	ldr	r2, [pc, #12]	@ (8005e64 <MilliTimer_Handler+0x18>)
 8005e58:	6013      	str	r3, [r2, #0]
}
 8005e5a:	bf00      	nop
 8005e5c:	46bd      	mov	sp, r7
 8005e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e62:	4770      	bx	lr
 8005e64:	20000f90 	.word	0x20000f90

08005e68 <TimerInit>:
/*
 * @brief Timer Initialize
 * @param  timer : pointer to a Timer structure
 *         that contains the configuration information for the Timer.
 */
void TimerInit(Timer* timer) {
 8005e68:	b480      	push	{r7}
 8005e6a:	b083      	sub	sp, #12
 8005e6c:	af00      	add	r7, sp, #0
 8005e6e:	6078      	str	r0, [r7, #4]
	timer->end_time = 0;
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	2200      	movs	r2, #0
 8005e74:	605a      	str	r2, [r3, #4]
}
 8005e76:	bf00      	nop
 8005e78:	370c      	adds	r7, #12
 8005e7a:	46bd      	mov	sp, r7
 8005e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e80:	4770      	bx	lr
	...

08005e84 <TimerIsExpired>:
/*
 * @brief expired Timer
 * @param  timer : pointer to a Timer structure
 *         that contains the configuration information for the Timer.
 */
char TimerIsExpired(Timer* timer) {
 8005e84:	b480      	push	{r7}
 8005e86:	b085      	sub	sp, #20
 8005e88:	af00      	add	r7, sp, #0
 8005e8a:	6078      	str	r0, [r7, #4]
	long left = timer->end_time - MilliTimer;
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	685a      	ldr	r2, [r3, #4]
 8005e90:	4b06      	ldr	r3, [pc, #24]	@ (8005eac <TimerIsExpired+0x28>)
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	1ad3      	subs	r3, r2, r3
 8005e96:	60fb      	str	r3, [r7, #12]
	return (left < 0);
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	0fdb      	lsrs	r3, r3, #31
 8005e9c:	b2db      	uxtb	r3, r3
}
 8005e9e:	4618      	mov	r0, r3
 8005ea0:	3714      	adds	r7, #20
 8005ea2:	46bd      	mov	sp, r7
 8005ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea8:	4770      	bx	lr
 8005eaa:	bf00      	nop
 8005eac:	20000f90 	.word	0x20000f90

08005eb0 <TimerCountdownMS>:
 * @brief Countdown millisecond Timer
 * @param  timer : pointer to a Timer structure
 *         that contains the configuration information for the Timer.
 *         timeout : setting timeout millisecond.
 */
void TimerCountdownMS(Timer* timer, unsigned int timeout) {
 8005eb0:	b480      	push	{r7}
 8005eb2:	b083      	sub	sp, #12
 8005eb4:	af00      	add	r7, sp, #0
 8005eb6:	6078      	str	r0, [r7, #4]
 8005eb8:	6039      	str	r1, [r7, #0]
	timer->end_time = MilliTimer + timeout;
 8005eba:	4b06      	ldr	r3, [pc, #24]	@ (8005ed4 <TimerCountdownMS+0x24>)
 8005ebc:	681a      	ldr	r2, [r3, #0]
 8005ebe:	683b      	ldr	r3, [r7, #0]
 8005ec0:	441a      	add	r2, r3
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	605a      	str	r2, [r3, #4]
}
 8005ec6:	bf00      	nop
 8005ec8:	370c      	adds	r7, #12
 8005eca:	46bd      	mov	sp, r7
 8005ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed0:	4770      	bx	lr
 8005ed2:	bf00      	nop
 8005ed4:	20000f90 	.word	0x20000f90

08005ed8 <TimerCountdown>:
 * @brief Countdown second Timer
 * @param  timer : pointer to a Timer structure
 *         that contains the configuration information for the Timer.
 *         timeout : setting timeout millisecond.
 */
void TimerCountdown(Timer* timer, unsigned int timeout) {
 8005ed8:	b480      	push	{r7}
 8005eda:	b083      	sub	sp, #12
 8005edc:	af00      	add	r7, sp, #0
 8005ede:	6078      	str	r0, [r7, #4]
 8005ee0:	6039      	str	r1, [r7, #0]
	timer->end_time = MilliTimer + (timeout * 1000);
 8005ee2:	683b      	ldr	r3, [r7, #0]
 8005ee4:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8005ee8:	fb03 f202 	mul.w	r2, r3, r2
 8005eec:	4b05      	ldr	r3, [pc, #20]	@ (8005f04 <TimerCountdown+0x2c>)
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	441a      	add	r2, r3
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	605a      	str	r2, [r3, #4]
}
 8005ef6:	bf00      	nop
 8005ef8:	370c      	adds	r7, #12
 8005efa:	46bd      	mov	sp, r7
 8005efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f00:	4770      	bx	lr
 8005f02:	bf00      	nop
 8005f04:	20000f90 	.word	0x20000f90

08005f08 <TimerLeftMS>:
/*
 * @brief left millisecond Timer
 * @param  timer : pointer to a Timer structure
 *         that contains the configuration information for the Timer.
 */
int TimerLeftMS(Timer* timer) {
 8005f08:	b480      	push	{r7}
 8005f0a:	b085      	sub	sp, #20
 8005f0c:	af00      	add	r7, sp, #0
 8005f0e:	6078      	str	r0, [r7, #4]
	long left = timer->end_time - MilliTimer;
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	685a      	ldr	r2, [r3, #4]
 8005f14:	4b06      	ldr	r3, [pc, #24]	@ (8005f30 <TimerLeftMS+0x28>)
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	1ad3      	subs	r3, r2, r3
 8005f1a:	60fb      	str	r3, [r7, #12]
	return (left < 0) ? 0 : left;
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
}
 8005f22:	4618      	mov	r0, r3
 8005f24:	3714      	adds	r7, #20
 8005f26:	46bd      	mov	sp, r7
 8005f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f2c:	4770      	bx	lr
 8005f2e:	bf00      	nop
 8005f30:	20000f90 	.word	0x20000f90

08005f34 <NewNetwork>:
 * @param  n : pointer to a Network structure
 *         that contains the configuration information for the Network.
 *         sn : socket number where x can be (0..7).
 * @retval None
 */
void NewNetwork(Network* n, int sn) {
 8005f34:	b480      	push	{r7}
 8005f36:	b083      	sub	sp, #12
 8005f38:	af00      	add	r7, sp, #0
 8005f3a:	6078      	str	r0, [r7, #4]
 8005f3c:	6039      	str	r1, [r7, #0]
	n->my_socket = sn;
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	683a      	ldr	r2, [r7, #0]
 8005f42:	601a      	str	r2, [r3, #0]
	n->mqttread = w5x00_read;
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	4a07      	ldr	r2, [pc, #28]	@ (8005f64 <NewNetwork+0x30>)
 8005f48:	605a      	str	r2, [r3, #4]
	n->mqttwrite = w5x00_write;
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	4a06      	ldr	r2, [pc, #24]	@ (8005f68 <NewNetwork+0x34>)
 8005f4e:	609a      	str	r2, [r3, #8]
	n->disconnect = w5x00_disconnect;
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	4a06      	ldr	r2, [pc, #24]	@ (8005f6c <NewNetwork+0x38>)
 8005f54:	60da      	str	r2, [r3, #12]
}
 8005f56:	bf00      	nop
 8005f58:	370c      	adds	r7, #12
 8005f5a:	46bd      	mov	sp, r7
 8005f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f60:	4770      	bx	lr
 8005f62:	bf00      	nop
 8005f64:	08005f71 	.word	0x08005f71
 8005f68:	08005fcb 	.word	0x08005fcb
 8005f6c:	08006013 	.word	0x08006013

08005f70 <w5x00_read>:
 *         buffer : pointer to a read buffer.
 *         len : buffer length.
 * @retval received data length or SOCKERR code
 */
int w5x00_read(Network* n, unsigned char* buffer, int len, long time)
{
 8005f70:	b580      	push	{r7, lr}
 8005f72:	b084      	sub	sp, #16
 8005f74:	af00      	add	r7, sp, #0
 8005f76:	60f8      	str	r0, [r7, #12]
 8005f78:	60b9      	str	r1, [r7, #8]
 8005f7a:	607a      	str	r2, [r7, #4]
 8005f7c:	603b      	str	r3, [r7, #0]

	if((getSn_SR(n->my_socket) == SOCK_ESTABLISHED) && (getSn_RX_RSR(n->my_socket)>0))
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	009b      	lsls	r3, r3, #2
 8005f84:	3301      	adds	r3, #1
 8005f86:	00db      	lsls	r3, r3, #3
 8005f88:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8005f8c:	4618      	mov	r0, r3
 8005f8e:	f000 fe85 	bl	8006c9c <WIZCHIP_READ>
 8005f92:	4603      	mov	r3, r0
 8005f94:	2b17      	cmp	r3, #23
 8005f96:	d113      	bne.n	8005fc0 <w5x00_read+0x50>
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	b2db      	uxtb	r3, r3
 8005f9e:	4618      	mov	r0, r3
 8005fa0:	f001 f81f 	bl	8006fe2 <getSn_RX_RSR>
 8005fa4:	4603      	mov	r3, r0
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d00a      	beq.n	8005fc0 <w5x00_read+0x50>
		return recv(n->my_socket, buffer, len);
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	b2db      	uxtb	r3, r3
 8005fb0:	687a      	ldr	r2, [r7, #4]
 8005fb2:	b292      	uxth	r2, r2
 8005fb4:	68b9      	ldr	r1, [r7, #8]
 8005fb6:	4618      	mov	r0, r3
 8005fb8:	f001 fd22 	bl	8007a00 <recv>
 8005fbc:	4603      	mov	r3, r0
 8005fbe:	e000      	b.n	8005fc2 <w5x00_read+0x52>

	return SOCK_ERROR;
 8005fc0:	2300      	movs	r3, #0
}
 8005fc2:	4618      	mov	r0, r3
 8005fc4:	3710      	adds	r7, #16
 8005fc6:	46bd      	mov	sp, r7
 8005fc8:	bd80      	pop	{r7, pc}

08005fca <w5x00_write>:
 *         buffer : pointer to a read buffer.
 *         len : buffer length.
 * @retval length of data sent or SOCKERR code
 */
int w5x00_write(Network* n, unsigned char* buffer, int len, long time)
{
 8005fca:	b580      	push	{r7, lr}
 8005fcc:	b084      	sub	sp, #16
 8005fce:	af00      	add	r7, sp, #0
 8005fd0:	60f8      	str	r0, [r7, #12]
 8005fd2:	60b9      	str	r1, [r7, #8]
 8005fd4:	607a      	str	r2, [r7, #4]
 8005fd6:	603b      	str	r3, [r7, #0]
	if(getSn_SR(n->my_socket) == SOCK_ESTABLISHED)
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	009b      	lsls	r3, r3, #2
 8005fde:	3301      	adds	r3, #1
 8005fe0:	00db      	lsls	r3, r3, #3
 8005fe2:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8005fe6:	4618      	mov	r0, r3
 8005fe8:	f000 fe58 	bl	8006c9c <WIZCHIP_READ>
 8005fec:	4603      	mov	r3, r0
 8005fee:	2b17      	cmp	r3, #23
 8005ff0:	d10a      	bne.n	8006008 <w5x00_write+0x3e>
		return send(n->my_socket, buffer, len);
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	b2db      	uxtb	r3, r3
 8005ff8:	687a      	ldr	r2, [r7, #4]
 8005ffa:	b292      	uxth	r2, r2
 8005ffc:	68b9      	ldr	r1, [r7, #8]
 8005ffe:	4618      	mov	r0, r3
 8006000:	f001 fc06 	bl	8007810 <send>
 8006004:	4603      	mov	r3, r0
 8006006:	e000      	b.n	800600a <w5x00_write+0x40>

	return SOCK_ERROR;
 8006008:	2300      	movs	r3, #0
}
 800600a:	4618      	mov	r0, r3
 800600c:	3710      	adds	r7, #16
 800600e:	46bd      	mov	sp, r7
 8006010:	bd80      	pop	{r7, pc}

08006012 <w5x00_disconnect>:
 * @brief disconnect function
 * @param  n : pointer to a Network structure
 *         that contains the configuration information for the Network.
 */
void w5x00_disconnect(Network* n)
{
 8006012:	b580      	push	{r7, lr}
 8006014:	b082      	sub	sp, #8
 8006016:	af00      	add	r7, sp, #0
 8006018:	6078      	str	r0, [r7, #4]
	disconnect(n->my_socket);
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	b2db      	uxtb	r3, r3
 8006020:	4618      	mov	r0, r3
 8006022:	f001 fb7f 	bl	8007724 <disconnect>
}
 8006026:	bf00      	nop
 8006028:	3708      	adds	r7, #8
 800602a:	46bd      	mov	sp, r7
 800602c:	bd80      	pop	{r7, pc}

0800602e <ConnectNetwork>:
 *         ip : server iP.
 *         port : server port.
 * @retval SOCKOK code or SOCKERR code
 */
int ConnectNetwork(Network* n, uint8_t* ip, uint16_t port)
{
 800602e:	b580      	push	{r7, lr}
 8006030:	b086      	sub	sp, #24
 8006032:	af00      	add	r7, sp, #0
 8006034:	60f8      	str	r0, [r7, #12]
 8006036:	60b9      	str	r1, [r7, #8]
 8006038:	4613      	mov	r3, r2
 800603a:	80fb      	strh	r3, [r7, #6]
	uint16_t myport = 12345;
 800603c:	f243 0339 	movw	r3, #12345	@ 0x3039
 8006040:	82fb      	strh	r3, [r7, #22]

	if(socket(n->my_socket, Sn_MR_TCP, myport, 0) != n->my_socket)
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	b2d8      	uxtb	r0, r3
 8006048:	8afa      	ldrh	r2, [r7, #22]
 800604a:	2300      	movs	r3, #0
 800604c:	2101      	movs	r1, #1
 800604e:	f001 f90b 	bl	8007268 <socket>
 8006052:	4603      	mov	r3, r0
 8006054:	461a      	mov	r2, r3
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	429a      	cmp	r2, r3
 800605c:	d001      	beq.n	8006062 <ConnectNetwork+0x34>
		return SOCK_ERROR;
 800605e:	2300      	movs	r3, #0
 8006060:	e00d      	b.n	800607e <ConnectNetwork+0x50>

	if(connect(n->my_socket, ip, port) != SOCK_OK)
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	b2db      	uxtb	r3, r3
 8006068:	88fa      	ldrh	r2, [r7, #6]
 800606a:	68b9      	ldr	r1, [r7, #8]
 800606c:	4618      	mov	r0, r3
 800606e:	f001 fa7d 	bl	800756c <connect>
 8006072:	4603      	mov	r3, r0
 8006074:	2b01      	cmp	r3, #1
 8006076:	d001      	beq.n	800607c <ConnectNetwork+0x4e>
		return SOCK_ERROR;
 8006078:	2300      	movs	r3, #0
 800607a:	e000      	b.n	800607e <ConnectNetwork+0x50>

	return SOCK_OK;
 800607c:	2301      	movs	r3, #1
}
 800607e:	4618      	mov	r0, r3
 8006080:	3718      	adds	r7, #24
 8006082:	46bd      	mov	sp, r7
 8006084:	bd80      	pop	{r7, pc}

08006086 <MQTTSerialize_connectLength>:
  * Determines the length of the MQTT connect packet that would be produced using the supplied connect options.
  * @param options the options to be used to build the connect packet
  * @return the length of buffer needed to contain the serialized version of the packet
  */
int MQTTSerialize_connectLength(MQTTPacket_connectData* options)
{
 8006086:	b590      	push	{r4, r7, lr}
 8006088:	b085      	sub	sp, #20
 800608a:	af00      	add	r7, sp, #0
 800608c:	6078      	str	r0, [r7, #4]
	int len = 0;
 800608e:	2300      	movs	r3, #0
 8006090:	60fb      	str	r3, [r7, #12]

	FUNC_ENTRY;

	if (options->MQTTVersion == 3)
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	7a1b      	ldrb	r3, [r3, #8]
 8006096:	2b03      	cmp	r3, #3
 8006098:	d102      	bne.n	80060a0 <MQTTSerialize_connectLength+0x1a>
		len = 12; /* variable depending on MQTT or MQIsdp */
 800609a:	230c      	movs	r3, #12
 800609c:	60fb      	str	r3, [r7, #12]
 800609e:	e005      	b.n	80060ac <MQTTSerialize_connectLength+0x26>
	else if (options->MQTTVersion == 4)
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	7a1b      	ldrb	r3, [r3, #8]
 80060a4:	2b04      	cmp	r3, #4
 80060a6:	d101      	bne.n	80060ac <MQTTSerialize_connectLength+0x26>
		len = 10;
 80060a8:	230a      	movs	r3, #10
 80060aa:	60fb      	str	r3, [r7, #12]

	len += MQTTstrlen(options->clientID)+2;
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	330c      	adds	r3, #12
 80060b0:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80060b4:	f000 fc43 	bl	800693e <MQTTstrlen>
 80060b8:	4603      	mov	r3, r0
 80060ba:	3302      	adds	r3, #2
 80060bc:	68fa      	ldr	r2, [r7, #12]
 80060be:	4413      	add	r3, r2
 80060c0:	60fb      	str	r3, [r7, #12]
	if (options->willFlag)
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	7edb      	ldrb	r3, [r3, #27]
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d013      	beq.n	80060f2 <MQTTSerialize_connectLength+0x6c>
		len += MQTTstrlen(options->will.topicName)+2 + MQTTstrlen(options->will.message)+2;
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	3324      	adds	r3, #36	@ 0x24
 80060ce:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80060d2:	f000 fc34 	bl	800693e <MQTTstrlen>
 80060d6:	4603      	mov	r3, r0
 80060d8:	1c9c      	adds	r4, r3, #2
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	3330      	adds	r3, #48	@ 0x30
 80060de:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80060e2:	f000 fc2c 	bl	800693e <MQTTstrlen>
 80060e6:	4603      	mov	r3, r0
 80060e8:	4423      	add	r3, r4
 80060ea:	3302      	adds	r3, #2
 80060ec:	68fa      	ldr	r2, [r7, #12]
 80060ee:	4413      	add	r3, r2
 80060f0:	60fb      	str	r3, [r7, #12]
	if (options->username.cstring || options->username.lenstring.data)
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d103      	bne.n	8006102 <MQTTSerialize_connectLength+0x7c>
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d00a      	beq.n	8006118 <MQTTSerialize_connectLength+0x92>
		len += MQTTstrlen(options->username)+2;
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	3340      	adds	r3, #64	@ 0x40
 8006106:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800610a:	f000 fc18 	bl	800693e <MQTTstrlen>
 800610e:	4603      	mov	r3, r0
 8006110:	3302      	adds	r3, #2
 8006112:	68fa      	ldr	r2, [r7, #12]
 8006114:	4413      	add	r3, r2
 8006116:	60fb      	str	r3, [r7, #12]
	if (options->password.cstring || options->password.lenstring.data)
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800611c:	2b00      	cmp	r3, #0
 800611e:	d103      	bne.n	8006128 <MQTTSerialize_connectLength+0xa2>
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006124:	2b00      	cmp	r3, #0
 8006126:	d00a      	beq.n	800613e <MQTTSerialize_connectLength+0xb8>
		len += MQTTstrlen(options->password)+2;
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	334c      	adds	r3, #76	@ 0x4c
 800612c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8006130:	f000 fc05 	bl	800693e <MQTTstrlen>
 8006134:	4603      	mov	r3, r0
 8006136:	3302      	adds	r3, #2
 8006138:	68fa      	ldr	r2, [r7, #12]
 800613a:	4413      	add	r3, r2
 800613c:	60fb      	str	r3, [r7, #12]

	FUNC_EXIT_RC(len);
	return len;
 800613e:	68fb      	ldr	r3, [r7, #12]
}
 8006140:	4618      	mov	r0, r3
 8006142:	3714      	adds	r7, #20
 8006144:	46bd      	mov	sp, r7
 8006146:	bd90      	pop	{r4, r7, pc}

08006148 <MQTTSerialize_connect>:
  * @param len the length in bytes of the supplied buffer
  * @param options the options to be used to build the connect packet
  * @return serialized length, or error if 0
  */
int MQTTSerialize_connect(unsigned char* buf, int buflen, MQTTPacket_connectData* options)
{
 8006148:	b580      	push	{r7, lr}
 800614a:	b08a      	sub	sp, #40	@ 0x28
 800614c:	af00      	add	r7, sp, #0
 800614e:	60f8      	str	r0, [r7, #12]
 8006150:	60b9      	str	r1, [r7, #8]
 8006152:	607a      	str	r2, [r7, #4]
	unsigned char *ptr = buf;
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	61fb      	str	r3, [r7, #28]
	MQTTHeader header = {0};
 8006158:	2300      	movs	r3, #0
 800615a:	61bb      	str	r3, [r7, #24]
	MQTTConnectFlags flags = {0};
 800615c:	2300      	movs	r3, #0
 800615e:	617b      	str	r3, [r7, #20]
	int len = 0;
 8006160:	2300      	movs	r3, #0
 8006162:	623b      	str	r3, [r7, #32]
	int rc = -1;
 8006164:	f04f 33ff 	mov.w	r3, #4294967295
 8006168:	627b      	str	r3, [r7, #36]	@ 0x24

	FUNC_ENTRY;
	if (MQTTPacket_len(len = MQTTSerialize_connectLength(options)) > buflen)
 800616a:	6878      	ldr	r0, [r7, #4]
 800616c:	f7ff ff8b 	bl	8006086 <MQTTSerialize_connectLength>
 8006170:	6238      	str	r0, [r7, #32]
 8006172:	6a38      	ldr	r0, [r7, #32]
 8006174:	f000 fa98 	bl	80066a8 <MQTTPacket_len>
 8006178:	4602      	mov	r2, r0
 800617a:	68bb      	ldr	r3, [r7, #8]
 800617c:	4293      	cmp	r3, r2
 800617e:	da03      	bge.n	8006188 <MQTTSerialize_connect+0x40>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
 8006180:	f06f 0301 	mvn.w	r3, #1
 8006184:	627b      	str	r3, [r7, #36]	@ 0x24
		goto exit;
 8006186:	e0c2      	b.n	800630e <MQTTSerialize_connect+0x1c6>
	}

	header.byte = 0;
 8006188:	2300      	movs	r3, #0
 800618a:	763b      	strb	r3, [r7, #24]
	header.bits.type = CONNECT;
 800618c:	7e3b      	ldrb	r3, [r7, #24]
 800618e:	2201      	movs	r2, #1
 8006190:	f362 1307 	bfi	r3, r2, #4, #4
 8006194:	763b      	strb	r3, [r7, #24]
	writeChar(&ptr, header.byte); /* write header */
 8006196:	7e3a      	ldrb	r2, [r7, #24]
 8006198:	f107 031c 	add.w	r3, r7, #28
 800619c:	4611      	mov	r1, r2
 800619e:	4618      	mov	r0, r3
 80061a0:	f000 fb11 	bl	80067c6 <writeChar>

	ptr += MQTTPacket_encode(ptr, len); /* write remaining length */
 80061a4:	69fb      	ldr	r3, [r7, #28]
 80061a6:	6a39      	ldr	r1, [r7, #32]
 80061a8:	4618      	mov	r0, r3
 80061aa:	f000 fa12 	bl	80065d2 <MQTTPacket_encode>
 80061ae:	4602      	mov	r2, r0
 80061b0:	69fb      	ldr	r3, [r7, #28]
 80061b2:	4413      	add	r3, r2
 80061b4:	61fb      	str	r3, [r7, #28]

	if (options->MQTTVersion == 4)
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	7a1b      	ldrb	r3, [r3, #8]
 80061ba:	2b04      	cmp	r3, #4
 80061bc:	d10c      	bne.n	80061d8 <MQTTSerialize_connect+0x90>
	{
		writeCString(&ptr, "MQTT");
 80061be:	f107 031c 	add.w	r3, r7, #28
 80061c2:	4955      	ldr	r1, [pc, #340]	@ (8006318 <MQTTSerialize_connect+0x1d0>)
 80061c4:	4618      	mov	r0, r3
 80061c6:	f000 fb3c 	bl	8006842 <writeCString>
		writeChar(&ptr, (char) 4);
 80061ca:	f107 031c 	add.w	r3, r7, #28
 80061ce:	2104      	movs	r1, #4
 80061d0:	4618      	mov	r0, r3
 80061d2:	f000 faf8 	bl	80067c6 <writeChar>
 80061d6:	e00b      	b.n	80061f0 <MQTTSerialize_connect+0xa8>
	}
	else
	{
		writeCString(&ptr, "MQIsdp");
 80061d8:	f107 031c 	add.w	r3, r7, #28
 80061dc:	494f      	ldr	r1, [pc, #316]	@ (800631c <MQTTSerialize_connect+0x1d4>)
 80061de:	4618      	mov	r0, r3
 80061e0:	f000 fb2f 	bl	8006842 <writeCString>
		writeChar(&ptr, (char) 3);
 80061e4:	f107 031c 	add.w	r3, r7, #28
 80061e8:	2103      	movs	r1, #3
 80061ea:	4618      	mov	r0, r3
 80061ec:	f000 faeb 	bl	80067c6 <writeChar>
	}

	flags.all = 0;
 80061f0:	2300      	movs	r3, #0
 80061f2:	753b      	strb	r3, [r7, #20]
	flags.bits.cleansession = options->cleansession;
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	7e9b      	ldrb	r3, [r3, #26]
 80061f8:	f003 0301 	and.w	r3, r3, #1
 80061fc:	b2da      	uxtb	r2, r3
 80061fe:	7d3b      	ldrb	r3, [r7, #20]
 8006200:	f362 0341 	bfi	r3, r2, #1, #1
 8006204:	753b      	strb	r3, [r7, #20]
	flags.bits.will = (options->willFlag) ? 1 : 0;
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	7edb      	ldrb	r3, [r3, #27]
 800620a:	2b00      	cmp	r3, #0
 800620c:	bf14      	ite	ne
 800620e:	2301      	movne	r3, #1
 8006210:	2300      	moveq	r3, #0
 8006212:	b2da      	uxtb	r2, r3
 8006214:	7d3b      	ldrb	r3, [r7, #20]
 8006216:	f362 0382 	bfi	r3, r2, #2, #1
 800621a:	753b      	strb	r3, [r7, #20]
	if (flags.bits.will)
 800621c:	7d3b      	ldrb	r3, [r7, #20]
 800621e:	f003 0304 	and.w	r3, r3, #4
 8006222:	b2db      	uxtb	r3, r3
 8006224:	2b00      	cmp	r3, #0
 8006226:	d013      	beq.n	8006250 <MQTTSerialize_connect+0x108>
	{
		flags.bits.willQoS = options->will.qos;
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800622e:	f003 0303 	and.w	r3, r3, #3
 8006232:	b2da      	uxtb	r2, r3
 8006234:	7d3b      	ldrb	r3, [r7, #20]
 8006236:	f362 03c4 	bfi	r3, r2, #3, #2
 800623a:	753b      	strb	r3, [r7, #20]
		flags.bits.willRetain = options->will.retained;
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006242:	f003 0301 	and.w	r3, r3, #1
 8006246:	b2da      	uxtb	r2, r3
 8006248:	7d3b      	ldrb	r3, [r7, #20]
 800624a:	f362 1345 	bfi	r3, r2, #5, #1
 800624e:	753b      	strb	r3, [r7, #20]
	}

	if (options->username.cstring || options->username.lenstring.data)
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006254:	2b00      	cmp	r3, #0
 8006256:	d103      	bne.n	8006260 <MQTTSerialize_connect+0x118>
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800625c:	2b00      	cmp	r3, #0
 800625e:	d003      	beq.n	8006268 <MQTTSerialize_connect+0x120>
		flags.bits.username = 1;
 8006260:	7d3b      	ldrb	r3, [r7, #20]
 8006262:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006266:	753b      	strb	r3, [r7, #20]
	if (options->password.cstring || options->password.lenstring.data)
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800626c:	2b00      	cmp	r3, #0
 800626e:	d103      	bne.n	8006278 <MQTTSerialize_connect+0x130>
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006274:	2b00      	cmp	r3, #0
 8006276:	d003      	beq.n	8006280 <MQTTSerialize_connect+0x138>
		flags.bits.password = 1;
 8006278:	7d3b      	ldrb	r3, [r7, #20]
 800627a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800627e:	753b      	strb	r3, [r7, #20]

	writeChar(&ptr, flags.all);
 8006280:	7d3a      	ldrb	r2, [r7, #20]
 8006282:	f107 031c 	add.w	r3, r7, #28
 8006286:	4611      	mov	r1, r2
 8006288:	4618      	mov	r0, r3
 800628a:	f000 fa9c 	bl	80067c6 <writeChar>
	writeInt(&ptr, options->keepAliveInterval);
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	8b1b      	ldrh	r3, [r3, #24]
 8006292:	461a      	mov	r2, r3
 8006294:	f107 031c 	add.w	r3, r7, #28
 8006298:	4611      	mov	r1, r2
 800629a:	4618      	mov	r0, r3
 800629c:	f000 faa8 	bl	80067f0 <writeInt>
	writeMQTTString(&ptr, options->clientID);
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	f107 001c 	add.w	r0, r7, #28
 80062a6:	330c      	adds	r3, #12
 80062a8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80062aa:	f000 fae9 	bl	8006880 <writeMQTTString>
	if (options->willFlag)
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	7edb      	ldrb	r3, [r3, #27]
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d00d      	beq.n	80062d2 <MQTTSerialize_connect+0x18a>
	{
		writeMQTTString(&ptr, options->will.topicName);
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	f107 001c 	add.w	r0, r7, #28
 80062bc:	3324      	adds	r3, #36	@ 0x24
 80062be:	cb0e      	ldmia	r3, {r1, r2, r3}
 80062c0:	f000 fade 	bl	8006880 <writeMQTTString>
		writeMQTTString(&ptr, options->will.message);
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	f107 001c 	add.w	r0, r7, #28
 80062ca:	3330      	adds	r3, #48	@ 0x30
 80062cc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80062ce:	f000 fad7 	bl	8006880 <writeMQTTString>
	}
	if (flags.bits.username)
 80062d2:	7d3b      	ldrb	r3, [r7, #20]
 80062d4:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80062d8:	b2db      	uxtb	r3, r3
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d006      	beq.n	80062ec <MQTTSerialize_connect+0x1a4>
		writeMQTTString(&ptr, options->username);
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	f107 001c 	add.w	r0, r7, #28
 80062e4:	3340      	adds	r3, #64	@ 0x40
 80062e6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80062e8:	f000 faca 	bl	8006880 <writeMQTTString>
	if (flags.bits.password)
 80062ec:	7d3b      	ldrb	r3, [r7, #20]
 80062ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80062f2:	b2db      	uxtb	r3, r3
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d006      	beq.n	8006306 <MQTTSerialize_connect+0x1be>
		writeMQTTString(&ptr, options->password);
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	f107 001c 	add.w	r0, r7, #28
 80062fe:	334c      	adds	r3, #76	@ 0x4c
 8006300:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006302:	f000 fabd 	bl	8006880 <writeMQTTString>

	rc = ptr - buf;
 8006306:	69fa      	ldr	r2, [r7, #28]
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	1ad3      	subs	r3, r2, r3
 800630c:	627b      	str	r3, [r7, #36]	@ 0x24

	exit: FUNC_EXIT_RC(rc);
	return rc;
 800630e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8006310:	4618      	mov	r0, r3
 8006312:	3728      	adds	r7, #40	@ 0x28
 8006314:	46bd      	mov	sp, r7
 8006316:	bd80      	pop	{r7, pc}
 8006318:	080110ac 	.word	0x080110ac
 800631c:	080110b4 	.word	0x080110b4

08006320 <MQTTDeserialize_connack>:
  * @param buf the raw buffer data, of the correct length determined by the remaining length field
  * @param len the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success, 0 is failure
  */
int MQTTDeserialize_connack(unsigned char* sessionPresent, unsigned char* connack_rc, unsigned char* buf, int buflen)
{
 8006320:	b580      	push	{r7, lr}
 8006322:	b08a      	sub	sp, #40	@ 0x28
 8006324:	af00      	add	r7, sp, #0
 8006326:	60f8      	str	r0, [r7, #12]
 8006328:	60b9      	str	r1, [r7, #8]
 800632a:	607a      	str	r2, [r7, #4]
 800632c:	603b      	str	r3, [r7, #0]
	MQTTHeader header = {0};
 800632e:	2300      	movs	r3, #0
 8006330:	61fb      	str	r3, [r7, #28]
	unsigned char* curdata = buf;
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	61bb      	str	r3, [r7, #24]
	unsigned char* enddata = NULL;
 8006336:	2300      	movs	r3, #0
 8006338:	623b      	str	r3, [r7, #32]
	int rc = 0;
 800633a:	2300      	movs	r3, #0
 800633c:	627b      	str	r3, [r7, #36]	@ 0x24
	int mylen;
	MQTTConnackFlags flags = {0};
 800633e:	2300      	movs	r3, #0
 8006340:	613b      	str	r3, [r7, #16]

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
 8006342:	f107 0318 	add.w	r3, r7, #24
 8006346:	4618      	mov	r0, r3
 8006348:	f000 fa29 	bl	800679e <readChar>
 800634c:	4603      	mov	r3, r0
 800634e:	773b      	strb	r3, [r7, #28]
	if (header.bits.type != CONNACK)
 8006350:	7f3b      	ldrb	r3, [r7, #28]
 8006352:	f023 030f 	bic.w	r3, r3, #15
 8006356:	b2db      	uxtb	r3, r3
 8006358:	2b20      	cmp	r3, #32
 800635a:	d12e      	bne.n	80063ba <MQTTDeserialize_connack+0x9a>
		goto exit;

	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
 800635c:	69bb      	ldr	r3, [r7, #24]
 800635e:	f107 0214 	add.w	r2, r7, #20
 8006362:	4611      	mov	r1, r2
 8006364:	4618      	mov	r0, r3
 8006366:	f000 f9e9 	bl	800673c <MQTTPacket_decodeBuf>
 800636a:	6278      	str	r0, [r7, #36]	@ 0x24
 800636c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800636e:	69bb      	ldr	r3, [r7, #24]
 8006370:	4413      	add	r3, r2
 8006372:	61bb      	str	r3, [r7, #24]
	enddata = curdata + mylen;
 8006374:	69bb      	ldr	r3, [r7, #24]
 8006376:	697a      	ldr	r2, [r7, #20]
 8006378:	4413      	add	r3, r2
 800637a:	623b      	str	r3, [r7, #32]
	if (enddata - curdata < 2)
 800637c:	69bb      	ldr	r3, [r7, #24]
 800637e:	6a3a      	ldr	r2, [r7, #32]
 8006380:	1ad3      	subs	r3, r2, r3
 8006382:	2b01      	cmp	r3, #1
 8006384:	dd1b      	ble.n	80063be <MQTTDeserialize_connack+0x9e>
		goto exit;

	flags.all = readChar(&curdata);
 8006386:	f107 0318 	add.w	r3, r7, #24
 800638a:	4618      	mov	r0, r3
 800638c:	f000 fa07 	bl	800679e <readChar>
 8006390:	4603      	mov	r3, r0
 8006392:	743b      	strb	r3, [r7, #16]
	*sessionPresent = flags.bits.sessionpresent;
 8006394:	7c3b      	ldrb	r3, [r7, #16]
 8006396:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800639a:	b2db      	uxtb	r3, r3
 800639c:	461a      	mov	r2, r3
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	701a      	strb	r2, [r3, #0]
	*connack_rc = readChar(&curdata);
 80063a2:	f107 0318 	add.w	r3, r7, #24
 80063a6:	4618      	mov	r0, r3
 80063a8:	f000 f9f9 	bl	800679e <readChar>
 80063ac:	4603      	mov	r3, r0
 80063ae:	461a      	mov	r2, r3
 80063b0:	68bb      	ldr	r3, [r7, #8]
 80063b2:	701a      	strb	r2, [r3, #0]

	rc = 1;
 80063b4:	2301      	movs	r3, #1
 80063b6:	627b      	str	r3, [r7, #36]	@ 0x24
 80063b8:	e002      	b.n	80063c0 <MQTTDeserialize_connack+0xa0>
		goto exit;
 80063ba:	bf00      	nop
 80063bc:	e000      	b.n	80063c0 <MQTTDeserialize_connack+0xa0>
		goto exit;
 80063be:	bf00      	nop
exit:
	FUNC_EXIT_RC(rc);
	return rc;
 80063c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80063c2:	4618      	mov	r0, r3
 80063c4:	3728      	adds	r7, #40	@ 0x28
 80063c6:	46bd      	mov	sp, r7
 80063c8:	bd80      	pop	{r7, pc}

080063ca <MQTTSerialize_zero>:
  * @param buflen the length in bytes of the supplied buffer, to avoid overruns
  * @param packettype the message type
  * @return serialized length, or error if 0
  */
int MQTTSerialize_zero(unsigned char* buf, int buflen, unsigned char packettype)
{
 80063ca:	b580      	push	{r7, lr}
 80063cc:	b088      	sub	sp, #32
 80063ce:	af00      	add	r7, sp, #0
 80063d0:	60f8      	str	r0, [r7, #12]
 80063d2:	60b9      	str	r1, [r7, #8]
 80063d4:	4613      	mov	r3, r2
 80063d6:	71fb      	strb	r3, [r7, #7]
	MQTTHeader header = {0};
 80063d8:	2300      	movs	r3, #0
 80063da:	61bb      	str	r3, [r7, #24]
	int rc = -1;
 80063dc:	f04f 33ff 	mov.w	r3, #4294967295
 80063e0:	61fb      	str	r3, [r7, #28]
	unsigned char *ptr = buf;
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	617b      	str	r3, [r7, #20]

	FUNC_ENTRY;
	if (buflen < 2)
 80063e6:	68bb      	ldr	r3, [r7, #8]
 80063e8:	2b01      	cmp	r3, #1
 80063ea:	dc03      	bgt.n	80063f4 <MQTTSerialize_zero+0x2a>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
 80063ec:	f06f 0301 	mvn.w	r3, #1
 80063f0:	61fb      	str	r3, [r7, #28]
		goto exit;
 80063f2:	e01d      	b.n	8006430 <MQTTSerialize_zero+0x66>
	}
	header.byte = 0;
 80063f4:	2300      	movs	r3, #0
 80063f6:	763b      	strb	r3, [r7, #24]
	header.bits.type = packettype;
 80063f8:	79fb      	ldrb	r3, [r7, #7]
 80063fa:	f003 030f 	and.w	r3, r3, #15
 80063fe:	b2da      	uxtb	r2, r3
 8006400:	7e3b      	ldrb	r3, [r7, #24]
 8006402:	f362 1307 	bfi	r3, r2, #4, #4
 8006406:	763b      	strb	r3, [r7, #24]
	writeChar(&ptr, header.byte); /* write header */
 8006408:	7e3a      	ldrb	r2, [r7, #24]
 800640a:	f107 0314 	add.w	r3, r7, #20
 800640e:	4611      	mov	r1, r2
 8006410:	4618      	mov	r0, r3
 8006412:	f000 f9d8 	bl	80067c6 <writeChar>

	ptr += MQTTPacket_encode(ptr, 0); /* write remaining length */
 8006416:	697b      	ldr	r3, [r7, #20]
 8006418:	2100      	movs	r1, #0
 800641a:	4618      	mov	r0, r3
 800641c:	f000 f8d9 	bl	80065d2 <MQTTPacket_encode>
 8006420:	4602      	mov	r2, r0
 8006422:	697b      	ldr	r3, [r7, #20]
 8006424:	4413      	add	r3, r2
 8006426:	617b      	str	r3, [r7, #20]
	rc = ptr - buf;
 8006428:	697a      	ldr	r2, [r7, #20]
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	1ad3      	subs	r3, r2, r3
 800642e:	61fb      	str	r3, [r7, #28]
exit:
	FUNC_EXIT_RC(rc);
	return rc;
 8006430:	69fb      	ldr	r3, [r7, #28]
}
 8006432:	4618      	mov	r0, r3
 8006434:	3720      	adds	r7, #32
 8006436:	46bd      	mov	sp, r7
 8006438:	bd80      	pop	{r7, pc}

0800643a <MQTTSerialize_pingreq>:
  * @param buf the buffer into which the packet will be serialized
  * @param buflen the length in bytes of the supplied buffer, to avoid overruns
  * @return serialized length, or error if 0
  */
int MQTTSerialize_pingreq(unsigned char* buf, int buflen)
{
 800643a:	b580      	push	{r7, lr}
 800643c:	b082      	sub	sp, #8
 800643e:	af00      	add	r7, sp, #0
 8006440:	6078      	str	r0, [r7, #4]
 8006442:	6039      	str	r1, [r7, #0]
	return MQTTSerialize_zero(buf, buflen, PINGREQ);
 8006444:	220c      	movs	r2, #12
 8006446:	6839      	ldr	r1, [r7, #0]
 8006448:	6878      	ldr	r0, [r7, #4]
 800644a:	f7ff ffbe 	bl	80063ca <MQTTSerialize_zero>
 800644e:	4603      	mov	r3, r0
}
 8006450:	4618      	mov	r0, r3
 8006452:	3708      	adds	r7, #8
 8006454:	46bd      	mov	sp, r7
 8006456:	bd80      	pop	{r7, pc}

08006458 <MQTTDeserialize_publish>:
  * @param buflen the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success
  */
int MQTTDeserialize_publish(unsigned char* dup, int* qos, unsigned char* retained, unsigned short* packetid, MQTTString* topicName,
		unsigned char** payload, int* payloadlen, unsigned char* buf, int buflen)
{
 8006458:	b580      	push	{r7, lr}
 800645a:	b08a      	sub	sp, #40	@ 0x28
 800645c:	af00      	add	r7, sp, #0
 800645e:	60f8      	str	r0, [r7, #12]
 8006460:	60b9      	str	r1, [r7, #8]
 8006462:	607a      	str	r2, [r7, #4]
 8006464:	603b      	str	r3, [r7, #0]
	MQTTHeader header = {0};
 8006466:	2300      	movs	r3, #0
 8006468:	61fb      	str	r3, [r7, #28]
	unsigned char* curdata = buf;
 800646a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800646c:	61bb      	str	r3, [r7, #24]
	unsigned char* enddata = NULL;
 800646e:	2300      	movs	r3, #0
 8006470:	623b      	str	r3, [r7, #32]
	int rc = 0;
 8006472:	2300      	movs	r3, #0
 8006474:	627b      	str	r3, [r7, #36]	@ 0x24
	int mylen = 0;
 8006476:	2300      	movs	r3, #0
 8006478:	617b      	str	r3, [r7, #20]

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
 800647a:	f107 0318 	add.w	r3, r7, #24
 800647e:	4618      	mov	r0, r3
 8006480:	f000 f98d 	bl	800679e <readChar>
 8006484:	4603      	mov	r3, r0
 8006486:	773b      	strb	r3, [r7, #28]
	if (header.bits.type != PUBLISH)
 8006488:	7f3b      	ldrb	r3, [r7, #28]
 800648a:	f023 030f 	bic.w	r3, r3, #15
 800648e:	b2db      	uxtb	r3, r3
 8006490:	2b30      	cmp	r3, #48	@ 0x30
 8006492:	d14b      	bne.n	800652c <MQTTDeserialize_publish+0xd4>
		goto exit;
	*dup = header.bits.dup;
 8006494:	7f3b      	ldrb	r3, [r7, #28]
 8006496:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800649a:	b2db      	uxtb	r3, r3
 800649c:	461a      	mov	r2, r3
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	701a      	strb	r2, [r3, #0]
	*qos = header.bits.qos;
 80064a2:	7f3b      	ldrb	r3, [r7, #28]
 80064a4:	f3c3 0341 	ubfx	r3, r3, #1, #2
 80064a8:	b2db      	uxtb	r3, r3
 80064aa:	461a      	mov	r2, r3
 80064ac:	68bb      	ldr	r3, [r7, #8]
 80064ae:	601a      	str	r2, [r3, #0]
	*retained = header.bits.retain;
 80064b0:	7f3b      	ldrb	r3, [r7, #28]
 80064b2:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80064b6:	b2db      	uxtb	r3, r3
 80064b8:	461a      	mov	r2, r3
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	701a      	strb	r2, [r3, #0]

	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
 80064be:	69bb      	ldr	r3, [r7, #24]
 80064c0:	f107 0214 	add.w	r2, r7, #20
 80064c4:	4611      	mov	r1, r2
 80064c6:	4618      	mov	r0, r3
 80064c8:	f000 f938 	bl	800673c <MQTTPacket_decodeBuf>
 80064cc:	6278      	str	r0, [r7, #36]	@ 0x24
 80064ce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80064d0:	69bb      	ldr	r3, [r7, #24]
 80064d2:	4413      	add	r3, r2
 80064d4:	61bb      	str	r3, [r7, #24]
	enddata = curdata + mylen;
 80064d6:	69bb      	ldr	r3, [r7, #24]
 80064d8:	697a      	ldr	r2, [r7, #20]
 80064da:	4413      	add	r3, r2
 80064dc:	623b      	str	r3, [r7, #32]

	if (!readMQTTLenString(topicName, &curdata, enddata) ||
 80064de:	f107 0318 	add.w	r3, r7, #24
 80064e2:	6a3a      	ldr	r2, [r7, #32]
 80064e4:	4619      	mov	r1, r3
 80064e6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80064e8:	f000 f9f8 	bl	80068dc <readMQTTLenString>
 80064ec:	4603      	mov	r3, r0
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d01e      	beq.n	8006530 <MQTTDeserialize_publish+0xd8>
		enddata - curdata < 0) /* do we have enough data to read the protocol version byte? */
 80064f2:	69bb      	ldr	r3, [r7, #24]
 80064f4:	6a3a      	ldr	r2, [r7, #32]
 80064f6:	1ad3      	subs	r3, r2, r3
	if (!readMQTTLenString(topicName, &curdata, enddata) ||
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	db19      	blt.n	8006530 <MQTTDeserialize_publish+0xd8>
		goto exit;

	if (*qos > 0)
 80064fc:	68bb      	ldr	r3, [r7, #8]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	2b00      	cmp	r3, #0
 8006502:	dd08      	ble.n	8006516 <MQTTDeserialize_publish+0xbe>
		*packetid = readInt(&curdata);
 8006504:	f107 0318 	add.w	r3, r7, #24
 8006508:	4618      	mov	r0, r3
 800650a:	f000 f92d 	bl	8006768 <readInt>
 800650e:	4603      	mov	r3, r0
 8006510:	b29a      	uxth	r2, r3
 8006512:	683b      	ldr	r3, [r7, #0]
 8006514:	801a      	strh	r2, [r3, #0]

	*payloadlen = enddata - curdata;
 8006516:	69bb      	ldr	r3, [r7, #24]
 8006518:	6a3a      	ldr	r2, [r7, #32]
 800651a:	1ad2      	subs	r2, r2, r3
 800651c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800651e:	601a      	str	r2, [r3, #0]
	*payload = curdata;
 8006520:	69ba      	ldr	r2, [r7, #24]
 8006522:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006524:	601a      	str	r2, [r3, #0]
	rc = 1;
 8006526:	2301      	movs	r3, #1
 8006528:	627b      	str	r3, [r7, #36]	@ 0x24
 800652a:	e002      	b.n	8006532 <MQTTDeserialize_publish+0xda>
		goto exit;
 800652c:	bf00      	nop
 800652e:	e000      	b.n	8006532 <MQTTDeserialize_publish+0xda>
		goto exit;
 8006530:	bf00      	nop
exit:
	FUNC_EXIT_RC(rc);
	return rc;
 8006532:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8006534:	4618      	mov	r0, r3
 8006536:	3728      	adds	r7, #40	@ 0x28
 8006538:	46bd      	mov	sp, r7
 800653a:	bd80      	pop	{r7, pc}

0800653c <MQTTDeserialize_ack>:
  * @param buf the raw buffer data, of the correct length determined by the remaining length field
  * @param buflen the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success, 0 is failure
  */
int MQTTDeserialize_ack(unsigned char* packettype, unsigned char* dup, unsigned short* packetid, unsigned char* buf, int buflen)
{
 800653c:	b580      	push	{r7, lr}
 800653e:	b08a      	sub	sp, #40	@ 0x28
 8006540:	af00      	add	r7, sp, #0
 8006542:	60f8      	str	r0, [r7, #12]
 8006544:	60b9      	str	r1, [r7, #8]
 8006546:	607a      	str	r2, [r7, #4]
 8006548:	603b      	str	r3, [r7, #0]
	MQTTHeader header = {0};
 800654a:	2300      	movs	r3, #0
 800654c:	61fb      	str	r3, [r7, #28]
	unsigned char* curdata = buf;
 800654e:	683b      	ldr	r3, [r7, #0]
 8006550:	61bb      	str	r3, [r7, #24]
	unsigned char* enddata = NULL;
 8006552:	2300      	movs	r3, #0
 8006554:	623b      	str	r3, [r7, #32]
	int rc = 0;
 8006556:	2300      	movs	r3, #0
 8006558:	627b      	str	r3, [r7, #36]	@ 0x24
	int mylen;

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
 800655a:	f107 0318 	add.w	r3, r7, #24
 800655e:	4618      	mov	r0, r3
 8006560:	f000 f91d 	bl	800679e <readChar>
 8006564:	4603      	mov	r3, r0
 8006566:	773b      	strb	r3, [r7, #28]
	*dup = header.bits.dup;
 8006568:	7f3b      	ldrb	r3, [r7, #28]
 800656a:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800656e:	b2db      	uxtb	r3, r3
 8006570:	461a      	mov	r2, r3
 8006572:	68bb      	ldr	r3, [r7, #8]
 8006574:	701a      	strb	r2, [r3, #0]
	*packettype = header.bits.type;
 8006576:	7f3b      	ldrb	r3, [r7, #28]
 8006578:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800657c:	b2db      	uxtb	r3, r3
 800657e:	461a      	mov	r2, r3
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	701a      	strb	r2, [r3, #0]

	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
 8006584:	69bb      	ldr	r3, [r7, #24]
 8006586:	f107 0214 	add.w	r2, r7, #20
 800658a:	4611      	mov	r1, r2
 800658c:	4618      	mov	r0, r3
 800658e:	f000 f8d5 	bl	800673c <MQTTPacket_decodeBuf>
 8006592:	6278      	str	r0, [r7, #36]	@ 0x24
 8006594:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006596:	69bb      	ldr	r3, [r7, #24]
 8006598:	4413      	add	r3, r2
 800659a:	61bb      	str	r3, [r7, #24]
	enddata = curdata + mylen;
 800659c:	69bb      	ldr	r3, [r7, #24]
 800659e:	697a      	ldr	r2, [r7, #20]
 80065a0:	4413      	add	r3, r2
 80065a2:	623b      	str	r3, [r7, #32]

	if (enddata - curdata < 2)
 80065a4:	69bb      	ldr	r3, [r7, #24]
 80065a6:	6a3a      	ldr	r2, [r7, #32]
 80065a8:	1ad3      	subs	r3, r2, r3
 80065aa:	2b01      	cmp	r3, #1
 80065ac:	dd0b      	ble.n	80065c6 <MQTTDeserialize_ack+0x8a>
		goto exit;
	*packetid = readInt(&curdata);
 80065ae:	f107 0318 	add.w	r3, r7, #24
 80065b2:	4618      	mov	r0, r3
 80065b4:	f000 f8d8 	bl	8006768 <readInt>
 80065b8:	4603      	mov	r3, r0
 80065ba:	b29a      	uxth	r2, r3
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	801a      	strh	r2, [r3, #0]

	rc = 1;
 80065c0:	2301      	movs	r3, #1
 80065c2:	627b      	str	r3, [r7, #36]	@ 0x24
 80065c4:	e000      	b.n	80065c8 <MQTTDeserialize_ack+0x8c>
		goto exit;
 80065c6:	bf00      	nop
exit:
	FUNC_EXIT_RC(rc);
	return rc;
 80065c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80065ca:	4618      	mov	r0, r3
 80065cc:	3728      	adds	r7, #40	@ 0x28
 80065ce:	46bd      	mov	sp, r7
 80065d0:	bd80      	pop	{r7, pc}

080065d2 <MQTTPacket_encode>:
 * @param buf the buffer into which the encoded data is written
 * @param length the length to be encoded
 * @return the number of bytes written to buffer
 */
int MQTTPacket_encode(unsigned char* buf, int length)
{
 80065d2:	b480      	push	{r7}
 80065d4:	b085      	sub	sp, #20
 80065d6:	af00      	add	r7, sp, #0
 80065d8:	6078      	str	r0, [r7, #4]
 80065da:	6039      	str	r1, [r7, #0]
	int rc = 0;
 80065dc:	2300      	movs	r3, #0
 80065de:	60fb      	str	r3, [r7, #12]

	FUNC_ENTRY;
	do
	{
		char d = length % 128;
 80065e0:	683b      	ldr	r3, [r7, #0]
 80065e2:	425a      	negs	r2, r3
 80065e4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80065e8:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80065ec:	bf58      	it	pl
 80065ee:	4253      	negpl	r3, r2
 80065f0:	72fb      	strb	r3, [r7, #11]
		length /= 128;
 80065f2:	683b      	ldr	r3, [r7, #0]
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	da00      	bge.n	80065fa <MQTTPacket_encode+0x28>
 80065f8:	337f      	adds	r3, #127	@ 0x7f
 80065fa:	11db      	asrs	r3, r3, #7
 80065fc:	603b      	str	r3, [r7, #0]
		/* if there are more digits to encode, set the top bit of this digit */
		if (length > 0)
 80065fe:	683b      	ldr	r3, [r7, #0]
 8006600:	2b00      	cmp	r3, #0
 8006602:	dd03      	ble.n	800660c <MQTTPacket_encode+0x3a>
			d |= 0x80;
 8006604:	7afb      	ldrb	r3, [r7, #11]
 8006606:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800660a:	72fb      	strb	r3, [r7, #11]
		buf[rc++] = d;
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	1c5a      	adds	r2, r3, #1
 8006610:	60fa      	str	r2, [r7, #12]
 8006612:	461a      	mov	r2, r3
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	4413      	add	r3, r2
 8006618:	7afa      	ldrb	r2, [r7, #11]
 800661a:	701a      	strb	r2, [r3, #0]
	} while (length > 0);
 800661c:	683b      	ldr	r3, [r7, #0]
 800661e:	2b00      	cmp	r3, #0
 8006620:	dcde      	bgt.n	80065e0 <MQTTPacket_encode+0xe>
	FUNC_EXIT_RC(rc);
	return rc;
 8006622:	68fb      	ldr	r3, [r7, #12]
}
 8006624:	4618      	mov	r0, r3
 8006626:	3714      	adds	r7, #20
 8006628:	46bd      	mov	sp, r7
 800662a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800662e:	4770      	bx	lr

08006630 <MQTTPacket_decode>:
 * @param getcharfn pointer to function to read the next character from the data source
 * @param value the decoded length returned
 * @return the number of bytes read from the socket
 */
int MQTTPacket_decode(int (*getcharfn)(unsigned char*, int), int* value)
{
 8006630:	b580      	push	{r7, lr}
 8006632:	b086      	sub	sp, #24
 8006634:	af00      	add	r7, sp, #0
 8006636:	6078      	str	r0, [r7, #4]
 8006638:	6039      	str	r1, [r7, #0]
	unsigned char c;
	int multiplier = 1;
 800663a:	2301      	movs	r3, #1
 800663c:	617b      	str	r3, [r7, #20]
	int len = 0;
 800663e:	2300      	movs	r3, #0
 8006640:	613b      	str	r3, [r7, #16]
#define MAX_NO_OF_REMAINING_LENGTH_BYTES 4

	FUNC_ENTRY;
	*value = 0;
 8006642:	683b      	ldr	r3, [r7, #0]
 8006644:	2200      	movs	r2, #0
 8006646:	601a      	str	r2, [r3, #0]
	do
	{
		int rc = MQTTPACKET_READ_ERROR;
 8006648:	f04f 33ff 	mov.w	r3, #4294967295
 800664c:	60fb      	str	r3, [r7, #12]

		if (++len > MAX_NO_OF_REMAINING_LENGTH_BYTES)
 800664e:	693b      	ldr	r3, [r7, #16]
 8006650:	3301      	adds	r3, #1
 8006652:	613b      	str	r3, [r7, #16]
 8006654:	693b      	ldr	r3, [r7, #16]
 8006656:	2b04      	cmp	r3, #4
 8006658:	dd03      	ble.n	8006662 <MQTTPacket_decode+0x32>
		{
			rc = MQTTPACKET_READ_ERROR;	/* bad data */
 800665a:	f04f 33ff 	mov.w	r3, #4294967295
 800665e:	60fb      	str	r3, [r7, #12]
			goto exit;
 8006660:	e01d      	b.n	800669e <MQTTPacket_decode+0x6e>
		}
		rc = (*getcharfn)(&c, 1);
 8006662:	f107 020b 	add.w	r2, r7, #11
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	2101      	movs	r1, #1
 800666a:	4610      	mov	r0, r2
 800666c:	4798      	blx	r3
 800666e:	60f8      	str	r0, [r7, #12]
		if (rc != 1)
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	2b01      	cmp	r3, #1
 8006674:	d112      	bne.n	800669c <MQTTPacket_decode+0x6c>
			goto exit;
		*value += (c & 127) * multiplier;
 8006676:	683b      	ldr	r3, [r7, #0]
 8006678:	681a      	ldr	r2, [r3, #0]
 800667a:	7afb      	ldrb	r3, [r7, #11]
 800667c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006680:	6979      	ldr	r1, [r7, #20]
 8006682:	fb01 f303 	mul.w	r3, r1, r3
 8006686:	441a      	add	r2, r3
 8006688:	683b      	ldr	r3, [r7, #0]
 800668a:	601a      	str	r2, [r3, #0]
		multiplier *= 128;
 800668c:	697b      	ldr	r3, [r7, #20]
 800668e:	01db      	lsls	r3, r3, #7
 8006690:	617b      	str	r3, [r7, #20]
	} while ((c & 128) != 0);
 8006692:	7afb      	ldrb	r3, [r7, #11]
 8006694:	b25b      	sxtb	r3, r3
 8006696:	2b00      	cmp	r3, #0
 8006698:	dbd6      	blt.n	8006648 <MQTTPacket_decode+0x18>
exit:
 800669a:	e000      	b.n	800669e <MQTTPacket_decode+0x6e>
			goto exit;
 800669c:	bf00      	nop
	FUNC_EXIT_RC(len);
	return len;
 800669e:	693b      	ldr	r3, [r7, #16]
}
 80066a0:	4618      	mov	r0, r3
 80066a2:	3718      	adds	r7, #24
 80066a4:	46bd      	mov	sp, r7
 80066a6:	bd80      	pop	{r7, pc}

080066a8 <MQTTPacket_len>:


int MQTTPacket_len(int rem_len)
{
 80066a8:	b480      	push	{r7}
 80066aa:	b083      	sub	sp, #12
 80066ac:	af00      	add	r7, sp, #0
 80066ae:	6078      	str	r0, [r7, #4]
	rem_len += 1; /* header byte */
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	3301      	adds	r3, #1
 80066b4:	607b      	str	r3, [r7, #4]

	/* now remaining_length field */
	if (rem_len < 128)
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	2b7f      	cmp	r3, #127	@ 0x7f
 80066ba:	dc03      	bgt.n	80066c4 <MQTTPacket_len+0x1c>
		rem_len += 1;
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	3301      	adds	r3, #1
 80066c0:	607b      	str	r3, [r7, #4]
 80066c2:	e012      	b.n	80066ea <MQTTPacket_len+0x42>
	else if (rem_len < 16384)
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80066ca:	da03      	bge.n	80066d4 <MQTTPacket_len+0x2c>
		rem_len += 2;
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	3302      	adds	r3, #2
 80066d0:	607b      	str	r3, [r7, #4]
 80066d2:	e00a      	b.n	80066ea <MQTTPacket_len+0x42>
	else if (rem_len < 2097151)
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	4a08      	ldr	r2, [pc, #32]	@ (80066f8 <MQTTPacket_len+0x50>)
 80066d8:	4293      	cmp	r3, r2
 80066da:	dc03      	bgt.n	80066e4 <MQTTPacket_len+0x3c>
		rem_len += 3;
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	3303      	adds	r3, #3
 80066e0:	607b      	str	r3, [r7, #4]
 80066e2:	e002      	b.n	80066ea <MQTTPacket_len+0x42>
	else
		rem_len += 4;
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	3304      	adds	r3, #4
 80066e8:	607b      	str	r3, [r7, #4]
	return rem_len;
 80066ea:	687b      	ldr	r3, [r7, #4]
}
 80066ec:	4618      	mov	r0, r3
 80066ee:	370c      	adds	r7, #12
 80066f0:	46bd      	mov	sp, r7
 80066f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f6:	4770      	bx	lr
 80066f8:	001ffffe 	.word	0x001ffffe

080066fc <bufchar>:


static unsigned char* bufptr;

int bufchar(unsigned char* c, int count)
{
 80066fc:	b480      	push	{r7}
 80066fe:	b085      	sub	sp, #20
 8006700:	af00      	add	r7, sp, #0
 8006702:	6078      	str	r0, [r7, #4]
 8006704:	6039      	str	r1, [r7, #0]
	int i;

	for (i = 0; i < count; ++i)
 8006706:	2300      	movs	r3, #0
 8006708:	60fb      	str	r3, [r7, #12]
 800670a:	e00a      	b.n	8006722 <bufchar+0x26>
		*c = *bufptr++;
 800670c:	4b0a      	ldr	r3, [pc, #40]	@ (8006738 <bufchar+0x3c>)
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	1c5a      	adds	r2, r3, #1
 8006712:	4909      	ldr	r1, [pc, #36]	@ (8006738 <bufchar+0x3c>)
 8006714:	600a      	str	r2, [r1, #0]
 8006716:	781a      	ldrb	r2, [r3, #0]
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < count; ++i)
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	3301      	adds	r3, #1
 8006720:	60fb      	str	r3, [r7, #12]
 8006722:	68fa      	ldr	r2, [r7, #12]
 8006724:	683b      	ldr	r3, [r7, #0]
 8006726:	429a      	cmp	r2, r3
 8006728:	dbf0      	blt.n	800670c <bufchar+0x10>
	return count;
 800672a:	683b      	ldr	r3, [r7, #0]
}
 800672c:	4618      	mov	r0, r3
 800672e:	3714      	adds	r7, #20
 8006730:	46bd      	mov	sp, r7
 8006732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006736:	4770      	bx	lr
 8006738:	20000f94 	.word	0x20000f94

0800673c <MQTTPacket_decodeBuf>:


int MQTTPacket_decodeBuf(unsigned char* buf, int* value)
{
 800673c:	b580      	push	{r7, lr}
 800673e:	b082      	sub	sp, #8
 8006740:	af00      	add	r7, sp, #0
 8006742:	6078      	str	r0, [r7, #4]
 8006744:	6039      	str	r1, [r7, #0]
	bufptr = buf;
 8006746:	4a06      	ldr	r2, [pc, #24]	@ (8006760 <MQTTPacket_decodeBuf+0x24>)
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	6013      	str	r3, [r2, #0]
	return MQTTPacket_decode(bufchar, value);
 800674c:	6839      	ldr	r1, [r7, #0]
 800674e:	4805      	ldr	r0, [pc, #20]	@ (8006764 <MQTTPacket_decodeBuf+0x28>)
 8006750:	f7ff ff6e 	bl	8006630 <MQTTPacket_decode>
 8006754:	4603      	mov	r3, r0
}
 8006756:	4618      	mov	r0, r3
 8006758:	3708      	adds	r7, #8
 800675a:	46bd      	mov	sp, r7
 800675c:	bd80      	pop	{r7, pc}
 800675e:	bf00      	nop
 8006760:	20000f94 	.word	0x20000f94
 8006764:	080066fd 	.word	0x080066fd

08006768 <readInt>:
 * Calculates an integer from two bytes read from the input buffer
 * @param pptr pointer to the input buffer - incremented by the number of bytes used & returned
 * @return the integer value calculated
 */
int readInt(unsigned char** pptr)
{
 8006768:	b480      	push	{r7}
 800676a:	b085      	sub	sp, #20
 800676c:	af00      	add	r7, sp, #0
 800676e:	6078      	str	r0, [r7, #4]
	unsigned char* ptr = *pptr;
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	60fb      	str	r3, [r7, #12]
	int len = 256*(*ptr) + (*(ptr+1));
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	781b      	ldrb	r3, [r3, #0]
 800677a:	021b      	lsls	r3, r3, #8
 800677c:	68fa      	ldr	r2, [r7, #12]
 800677e:	3201      	adds	r2, #1
 8006780:	7812      	ldrb	r2, [r2, #0]
 8006782:	4413      	add	r3, r2
 8006784:	60bb      	str	r3, [r7, #8]
	*pptr += 2;
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	1c9a      	adds	r2, r3, #2
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	601a      	str	r2, [r3, #0]
	return len;
 8006790:	68bb      	ldr	r3, [r7, #8]
}
 8006792:	4618      	mov	r0, r3
 8006794:	3714      	adds	r7, #20
 8006796:	46bd      	mov	sp, r7
 8006798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800679c:	4770      	bx	lr

0800679e <readChar>:
 * Reads one character from the input buffer.
 * @param pptr pointer to the input buffer - incremented by the number of bytes used & returned
 * @return the character read
 */
char readChar(unsigned char** pptr)
{
 800679e:	b480      	push	{r7}
 80067a0:	b085      	sub	sp, #20
 80067a2:	af00      	add	r7, sp, #0
 80067a4:	6078      	str	r0, [r7, #4]
	char c = **pptr;
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	781b      	ldrb	r3, [r3, #0]
 80067ac:	73fb      	strb	r3, [r7, #15]
	(*pptr)++;
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	1c5a      	adds	r2, r3, #1
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	601a      	str	r2, [r3, #0]
	return c;
 80067b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80067ba:	4618      	mov	r0, r3
 80067bc:	3714      	adds	r7, #20
 80067be:	46bd      	mov	sp, r7
 80067c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c4:	4770      	bx	lr

080067c6 <writeChar>:
 * Writes one character to an output buffer.
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param c the character to write
 */
void writeChar(unsigned char** pptr, char c)
{
 80067c6:	b480      	push	{r7}
 80067c8:	b083      	sub	sp, #12
 80067ca:	af00      	add	r7, sp, #0
 80067cc:	6078      	str	r0, [r7, #4]
 80067ce:	460b      	mov	r3, r1
 80067d0:	70fb      	strb	r3, [r7, #3]
	**pptr = c;
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	78fa      	ldrb	r2, [r7, #3]
 80067d8:	701a      	strb	r2, [r3, #0]
	(*pptr)++;
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	1c5a      	adds	r2, r3, #1
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	601a      	str	r2, [r3, #0]
}
 80067e4:	bf00      	nop
 80067e6:	370c      	adds	r7, #12
 80067e8:	46bd      	mov	sp, r7
 80067ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ee:	4770      	bx	lr

080067f0 <writeInt>:
 * Writes an integer as 2 bytes to an output buffer.
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param anInt the integer to write
 */
void writeInt(unsigned char** pptr, int anInt)
{
 80067f0:	b480      	push	{r7}
 80067f2:	b083      	sub	sp, #12
 80067f4:	af00      	add	r7, sp, #0
 80067f6:	6078      	str	r0, [r7, #4]
 80067f8:	6039      	str	r1, [r7, #0]
	**pptr = (unsigned char)(anInt / 256);
 80067fa:	683b      	ldr	r3, [r7, #0]
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	da00      	bge.n	8006802 <writeInt+0x12>
 8006800:	33ff      	adds	r3, #255	@ 0xff
 8006802:	121b      	asrs	r3, r3, #8
 8006804:	461a      	mov	r2, r3
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	b2d2      	uxtb	r2, r2
 800680c:	701a      	strb	r2, [r3, #0]
	(*pptr)++;
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	1c5a      	adds	r2, r3, #1
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	601a      	str	r2, [r3, #0]
	**pptr = (unsigned char)(anInt % 256);
 8006818:	683b      	ldr	r3, [r7, #0]
 800681a:	425a      	negs	r2, r3
 800681c:	b2db      	uxtb	r3, r3
 800681e:	b2d2      	uxtb	r2, r2
 8006820:	bf58      	it	pl
 8006822:	4253      	negpl	r3, r2
 8006824:	687a      	ldr	r2, [r7, #4]
 8006826:	6812      	ldr	r2, [r2, #0]
 8006828:	b2db      	uxtb	r3, r3
 800682a:	7013      	strb	r3, [r2, #0]
	(*pptr)++;
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	1c5a      	adds	r2, r3, #1
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	601a      	str	r2, [r3, #0]
}
 8006836:	bf00      	nop
 8006838:	370c      	adds	r7, #12
 800683a:	46bd      	mov	sp, r7
 800683c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006840:	4770      	bx	lr

08006842 <writeCString>:
 * Writes a "UTF" string to an output buffer.  Converts C string to length-delimited.
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param string the C string to write
 */
void writeCString(unsigned char** pptr, const char* string)
{
 8006842:	b580      	push	{r7, lr}
 8006844:	b084      	sub	sp, #16
 8006846:	af00      	add	r7, sp, #0
 8006848:	6078      	str	r0, [r7, #4]
 800684a:	6039      	str	r1, [r7, #0]
	int len = strlen(string);
 800684c:	6838      	ldr	r0, [r7, #0]
 800684e:	f7f9 fcd1 	bl	80001f4 <strlen>
 8006852:	4603      	mov	r3, r0
 8006854:	60fb      	str	r3, [r7, #12]
	writeInt(pptr, len);
 8006856:	68f9      	ldr	r1, [r7, #12]
 8006858:	6878      	ldr	r0, [r7, #4]
 800685a:	f7ff ffc9 	bl	80067f0 <writeInt>
	memcpy(*pptr, string, len);
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	68fa      	ldr	r2, [r7, #12]
 8006864:	6839      	ldr	r1, [r7, #0]
 8006866:	4618      	mov	r0, r3
 8006868:	f008 fb57 	bl	800ef1a <memcpy>
	*pptr += len;
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681a      	ldr	r2, [r3, #0]
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	441a      	add	r2, r3
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	601a      	str	r2, [r3, #0]
}
 8006878:	bf00      	nop
 800687a:	3710      	adds	r7, #16
 800687c:	46bd      	mov	sp, r7
 800687e:	bd80      	pop	{r7, pc}

08006880 <writeMQTTString>:
	return len;
}


void writeMQTTString(unsigned char** pptr, MQTTString mqttstring)
{
 8006880:	b580      	push	{r7, lr}
 8006882:	b084      	sub	sp, #16
 8006884:	af00      	add	r7, sp, #0
 8006886:	60f8      	str	r0, [r7, #12]
 8006888:	4638      	mov	r0, r7
 800688a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	if (mqttstring.lenstring.len > 0)
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	2b00      	cmp	r3, #0
 8006892:	dd12      	ble.n	80068ba <writeMQTTString+0x3a>
	{
		writeInt(pptr, mqttstring.lenstring.len);
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	4619      	mov	r1, r3
 8006898:	68f8      	ldr	r0, [r7, #12]
 800689a:	f7ff ffa9 	bl	80067f0 <writeInt>
		memcpy(*pptr, mqttstring.lenstring.data, mqttstring.lenstring.len);
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	68b9      	ldr	r1, [r7, #8]
 80068a4:	687a      	ldr	r2, [r7, #4]
 80068a6:	4618      	mov	r0, r3
 80068a8:	f008 fb37 	bl	800ef1a <memcpy>
		*pptr += mqttstring.lenstring.len;
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	687a      	ldr	r2, [r7, #4]
 80068b2:	441a      	add	r2, r3
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	601a      	str	r2, [r3, #0]
	}
	else if (mqttstring.cstring)
		writeCString(pptr, mqttstring.cstring);
	else
		writeInt(pptr, 0);
}
 80068b8:	e00c      	b.n	80068d4 <writeMQTTString+0x54>
	else if (mqttstring.cstring)
 80068ba:	683b      	ldr	r3, [r7, #0]
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d005      	beq.n	80068cc <writeMQTTString+0x4c>
		writeCString(pptr, mqttstring.cstring);
 80068c0:	683b      	ldr	r3, [r7, #0]
 80068c2:	4619      	mov	r1, r3
 80068c4:	68f8      	ldr	r0, [r7, #12]
 80068c6:	f7ff ffbc 	bl	8006842 <writeCString>
}
 80068ca:	e003      	b.n	80068d4 <writeMQTTString+0x54>
		writeInt(pptr, 0);
 80068cc:	2100      	movs	r1, #0
 80068ce:	68f8      	ldr	r0, [r7, #12]
 80068d0:	f7ff ff8e 	bl	80067f0 <writeInt>
}
 80068d4:	bf00      	nop
 80068d6:	3710      	adds	r7, #16
 80068d8:	46bd      	mov	sp, r7
 80068da:	bd80      	pop	{r7, pc}

080068dc <readMQTTLenString>:
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param enddata pointer to the end of the data: do not read beyond
 * @return 1 if successful, 0 if not
 */
int readMQTTLenString(MQTTString* mqttstring, unsigned char** pptr, unsigned char* enddata)
{
 80068dc:	b580      	push	{r7, lr}
 80068de:	b086      	sub	sp, #24
 80068e0:	af00      	add	r7, sp, #0
 80068e2:	60f8      	str	r0, [r7, #12]
 80068e4:	60b9      	str	r1, [r7, #8]
 80068e6:	607a      	str	r2, [r7, #4]
	int rc = 0;
 80068e8:	2300      	movs	r3, #0
 80068ea:	617b      	str	r3, [r7, #20]

	FUNC_ENTRY;
	/* the first two bytes are the length of the string */
	if (enddata - (*pptr) > 1) /* enough length to read the integer? */
 80068ec:	68bb      	ldr	r3, [r7, #8]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	687a      	ldr	r2, [r7, #4]
 80068f2:	1ad3      	subs	r3, r2, r3
 80068f4:	2b01      	cmp	r3, #1
 80068f6:	dd1a      	ble.n	800692e <readMQTTLenString+0x52>
	{
		mqttstring->lenstring.len = readInt(pptr); /* increments pptr to point past length */
 80068f8:	68b8      	ldr	r0, [r7, #8]
 80068fa:	f7ff ff35 	bl	8006768 <readInt>
 80068fe:	4602      	mov	r2, r0
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	605a      	str	r2, [r3, #4]
		if (&(*pptr)[mqttstring->lenstring.len] <= enddata)
 8006904:	68bb      	ldr	r3, [r7, #8]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	68fa      	ldr	r2, [r7, #12]
 800690a:	6852      	ldr	r2, [r2, #4]
 800690c:	4413      	add	r3, r2
 800690e:	687a      	ldr	r2, [r7, #4]
 8006910:	429a      	cmp	r2, r3
 8006912:	d30c      	bcc.n	800692e <readMQTTLenString+0x52>
		{
			mqttstring->lenstring.data = (char*)*pptr;
 8006914:	68bb      	ldr	r3, [r7, #8]
 8006916:	681a      	ldr	r2, [r3, #0]
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	609a      	str	r2, [r3, #8]
			*pptr += mqttstring->lenstring.len;
 800691c:	68bb      	ldr	r3, [r7, #8]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	68fa      	ldr	r2, [r7, #12]
 8006922:	6852      	ldr	r2, [r2, #4]
 8006924:	441a      	add	r2, r3
 8006926:	68bb      	ldr	r3, [r7, #8]
 8006928:	601a      	str	r2, [r3, #0]
			rc = 1;
 800692a:	2301      	movs	r3, #1
 800692c:	617b      	str	r3, [r7, #20]
		}
	}
	mqttstring->cstring = NULL;
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	2200      	movs	r2, #0
 8006932:	601a      	str	r2, [r3, #0]
	FUNC_EXIT_RC(rc);
	return rc;
 8006934:	697b      	ldr	r3, [r7, #20]
}
 8006936:	4618      	mov	r0, r3
 8006938:	3718      	adds	r7, #24
 800693a:	46bd      	mov	sp, r7
 800693c:	bd80      	pop	{r7, pc}

0800693e <MQTTstrlen>:
 * Return the length of the MQTTstring - C string if there is one, otherwise the length delimited string
 * @param mqttstring the string to return the length of
 * @return the length of the string
 */
int MQTTstrlen(MQTTString mqttstring)
{
 800693e:	b580      	push	{r7, lr}
 8006940:	b086      	sub	sp, #24
 8006942:	af00      	add	r7, sp, #0
 8006944:	1d3b      	adds	r3, r7, #4
 8006946:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	int rc = 0;
 800694a:	2300      	movs	r3, #0
 800694c:	617b      	str	r3, [r7, #20]

	if (mqttstring.cstring)
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	2b00      	cmp	r3, #0
 8006952:	d006      	beq.n	8006962 <MQTTstrlen+0x24>
		rc = strlen(mqttstring.cstring);
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	4618      	mov	r0, r3
 8006958:	f7f9 fc4c 	bl	80001f4 <strlen>
 800695c:	4603      	mov	r3, r0
 800695e:	617b      	str	r3, [r7, #20]
 8006960:	e001      	b.n	8006966 <MQTTstrlen+0x28>
	else
		rc = mqttstring.lenstring.len;
 8006962:	68bb      	ldr	r3, [r7, #8]
 8006964:	617b      	str	r3, [r7, #20]
	return rc;
 8006966:	697b      	ldr	r3, [r7, #20]
}
 8006968:	4618      	mov	r0, r3
 800696a:	3718      	adds	r7, #24
 800696c:	46bd      	mov	sp, r7
 800696e:	bd80      	pop	{r7, pc}

08006970 <MQTTPacket_equals>:
 * @param a the MQTTString to compare
 * @param bptr the C string to compare
 * @return boolean - equal or not
 */
int MQTTPacket_equals(MQTTString* a, char* bptr)
{
 8006970:	b580      	push	{r7, lr}
 8006972:	b086      	sub	sp, #24
 8006974:	af00      	add	r7, sp, #0
 8006976:	6078      	str	r0, [r7, #4]
 8006978:	6039      	str	r1, [r7, #0]
	int alen = 0,
 800697a:	2300      	movs	r3, #0
 800697c:	617b      	str	r3, [r7, #20]
		blen = 0;
 800697e:	2300      	movs	r3, #0
 8006980:	60fb      	str	r3, [r7, #12]
	char *aptr;
	
	if (a->cstring)
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	2b00      	cmp	r3, #0
 8006988:	d00a      	beq.n	80069a0 <MQTTPacket_equals+0x30>
	{
		aptr = a->cstring;
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	613b      	str	r3, [r7, #16]
		alen = strlen(a->cstring);
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	4618      	mov	r0, r3
 8006996:	f7f9 fc2d 	bl	80001f4 <strlen>
 800699a:	4603      	mov	r3, r0
 800699c:	617b      	str	r3, [r7, #20]
 800699e:	e005      	b.n	80069ac <MQTTPacket_equals+0x3c>
	}
	else
	{
		aptr = a->lenstring.data;
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	689b      	ldr	r3, [r3, #8]
 80069a4:	613b      	str	r3, [r7, #16]
		alen = a->lenstring.len;
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	685b      	ldr	r3, [r3, #4]
 80069aa:	617b      	str	r3, [r7, #20]
	}
	blen = strlen(bptr);
 80069ac:	6838      	ldr	r0, [r7, #0]
 80069ae:	f7f9 fc21 	bl	80001f4 <strlen>
 80069b2:	4603      	mov	r3, r0
 80069b4:	60fb      	str	r3, [r7, #12]
	
	return (alen == blen) && (strncmp(aptr, bptr, alen) == 0);
 80069b6:	697a      	ldr	r2, [r7, #20]
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	429a      	cmp	r2, r3
 80069bc:	d10a      	bne.n	80069d4 <MQTTPacket_equals+0x64>
 80069be:	697b      	ldr	r3, [r7, #20]
 80069c0:	461a      	mov	r2, r3
 80069c2:	6839      	ldr	r1, [r7, #0]
 80069c4:	6938      	ldr	r0, [r7, #16]
 80069c6:	f008 f9a2 	bl	800ed0e <strncmp>
 80069ca:	4603      	mov	r3, r0
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d101      	bne.n	80069d4 <MQTTPacket_equals+0x64>
 80069d0:	2301      	movs	r3, #1
 80069d2:	e000      	b.n	80069d6 <MQTTPacket_equals+0x66>
 80069d4:	2300      	movs	r3, #0
}
 80069d6:	4618      	mov	r0, r3
 80069d8:	3718      	adds	r7, #24
 80069da:	46bd      	mov	sp, r7
 80069dc:	bd80      	pop	{r7, pc}

080069de <MQTTSerialize_ack>:
  * @param dup the MQTT dup flag
  * @param packetid the MQTT packet identifier
  * @return serialized length, or error if 0
  */
int MQTTSerialize_ack(unsigned char* buf, int buflen, unsigned char packettype, unsigned char dup, unsigned short packetid)
{
 80069de:	b580      	push	{r7, lr}
 80069e0:	b088      	sub	sp, #32
 80069e2:	af00      	add	r7, sp, #0
 80069e4:	60f8      	str	r0, [r7, #12]
 80069e6:	60b9      	str	r1, [r7, #8]
 80069e8:	4611      	mov	r1, r2
 80069ea:	461a      	mov	r2, r3
 80069ec:	460b      	mov	r3, r1
 80069ee:	71fb      	strb	r3, [r7, #7]
 80069f0:	4613      	mov	r3, r2
 80069f2:	71bb      	strb	r3, [r7, #6]
	MQTTHeader header = {0};
 80069f4:	2300      	movs	r3, #0
 80069f6:	61bb      	str	r3, [r7, #24]
	int rc = 0;
 80069f8:	2300      	movs	r3, #0
 80069fa:	61fb      	str	r3, [r7, #28]
	unsigned char *ptr = buf;
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	617b      	str	r3, [r7, #20]

	FUNC_ENTRY;
	if (buflen < 4)
 8006a00:	68bb      	ldr	r3, [r7, #8]
 8006a02:	2b03      	cmp	r3, #3
 8006a04:	dc03      	bgt.n	8006a0e <MQTTSerialize_ack+0x30>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
 8006a06:	f06f 0301 	mvn.w	r3, #1
 8006a0a:	61fb      	str	r3, [r7, #28]
		goto exit;
 8006a0c:	e037      	b.n	8006a7e <MQTTSerialize_ack+0xa0>
	}
	header.bits.type = packettype;
 8006a0e:	79fb      	ldrb	r3, [r7, #7]
 8006a10:	f003 030f 	and.w	r3, r3, #15
 8006a14:	b2da      	uxtb	r2, r3
 8006a16:	7e3b      	ldrb	r3, [r7, #24]
 8006a18:	f362 1307 	bfi	r3, r2, #4, #4
 8006a1c:	763b      	strb	r3, [r7, #24]
	header.bits.dup = dup;
 8006a1e:	79bb      	ldrb	r3, [r7, #6]
 8006a20:	f003 0301 	and.w	r3, r3, #1
 8006a24:	b2da      	uxtb	r2, r3
 8006a26:	7e3b      	ldrb	r3, [r7, #24]
 8006a28:	f362 03c3 	bfi	r3, r2, #3, #1
 8006a2c:	763b      	strb	r3, [r7, #24]
	header.bits.qos = (packettype == PUBREL) ? 1 : 0;
 8006a2e:	79fb      	ldrb	r3, [r7, #7]
 8006a30:	2b06      	cmp	r3, #6
 8006a32:	bf0c      	ite	eq
 8006a34:	2301      	moveq	r3, #1
 8006a36:	2300      	movne	r3, #0
 8006a38:	b2db      	uxtb	r3, r3
 8006a3a:	f003 0303 	and.w	r3, r3, #3
 8006a3e:	b2da      	uxtb	r2, r3
 8006a40:	7e3b      	ldrb	r3, [r7, #24]
 8006a42:	f362 0342 	bfi	r3, r2, #1, #2
 8006a46:	763b      	strb	r3, [r7, #24]
	writeChar(&ptr, header.byte); /* write header */
 8006a48:	7e3a      	ldrb	r2, [r7, #24]
 8006a4a:	f107 0314 	add.w	r3, r7, #20
 8006a4e:	4611      	mov	r1, r2
 8006a50:	4618      	mov	r0, r3
 8006a52:	f7ff feb8 	bl	80067c6 <writeChar>

	ptr += MQTTPacket_encode(ptr, 2); /* write remaining length */
 8006a56:	697b      	ldr	r3, [r7, #20]
 8006a58:	2102      	movs	r1, #2
 8006a5a:	4618      	mov	r0, r3
 8006a5c:	f7ff fdb9 	bl	80065d2 <MQTTPacket_encode>
 8006a60:	4602      	mov	r2, r0
 8006a62:	697b      	ldr	r3, [r7, #20]
 8006a64:	4413      	add	r3, r2
 8006a66:	617b      	str	r3, [r7, #20]
	writeInt(&ptr, packetid);
 8006a68:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8006a6a:	f107 0314 	add.w	r3, r7, #20
 8006a6e:	4611      	mov	r1, r2
 8006a70:	4618      	mov	r0, r3
 8006a72:	f7ff febd 	bl	80067f0 <writeInt>
	rc = ptr - buf;
 8006a76:	697a      	ldr	r2, [r7, #20]
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	1ad3      	subs	r3, r2, r3
 8006a7c:	61fb      	str	r3, [r7, #28]
exit:
	FUNC_EXIT_RC(rc);
	return rc;
 8006a7e:	69fb      	ldr	r3, [r7, #28]
}
 8006a80:	4618      	mov	r0, r3
 8006a82:	3720      	adds	r7, #32
 8006a84:	46bd      	mov	sp, r7
 8006a86:	bd80      	pop	{r7, pc}

08006a88 <MQTTSerialize_subscribeLength>:
  * @param count the number of topic filter strings in topicFilters
  * @param topicFilters the array of topic filter strings to be used in the publish
  * @return the length of buffer needed to contain the serialized version of the packet
  */
int MQTTSerialize_subscribeLength(int count, MQTTString topicFilters[])
{
 8006a88:	b580      	push	{r7, lr}
 8006a8a:	b084      	sub	sp, #16
 8006a8c:	af00      	add	r7, sp, #0
 8006a8e:	6078      	str	r0, [r7, #4]
 8006a90:	6039      	str	r1, [r7, #0]
	int i;
	int len = 2; /* packetid */
 8006a92:	2302      	movs	r3, #2
 8006a94:	60bb      	str	r3, [r7, #8]

	for (i = 0; i < count; ++i)
 8006a96:	2300      	movs	r3, #0
 8006a98:	60fb      	str	r3, [r7, #12]
 8006a9a:	e013      	b.n	8006ac4 <MQTTSerialize_subscribeLength+0x3c>
		len += 2 + MQTTstrlen(topicFilters[i]) + 1; /* length + topic + req_qos */
 8006a9c:	68fa      	ldr	r2, [r7, #12]
 8006a9e:	4613      	mov	r3, r2
 8006aa0:	005b      	lsls	r3, r3, #1
 8006aa2:	4413      	add	r3, r2
 8006aa4:	009b      	lsls	r3, r3, #2
 8006aa6:	461a      	mov	r2, r3
 8006aa8:	683b      	ldr	r3, [r7, #0]
 8006aaa:	4413      	add	r3, r2
 8006aac:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8006ab0:	f7ff ff45 	bl	800693e <MQTTstrlen>
 8006ab4:	4603      	mov	r3, r0
 8006ab6:	3303      	adds	r3, #3
 8006ab8:	68ba      	ldr	r2, [r7, #8]
 8006aba:	4413      	add	r3, r2
 8006abc:	60bb      	str	r3, [r7, #8]
	for (i = 0; i < count; ++i)
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	3301      	adds	r3, #1
 8006ac2:	60fb      	str	r3, [r7, #12]
 8006ac4:	68fa      	ldr	r2, [r7, #12]
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	429a      	cmp	r2, r3
 8006aca:	dbe7      	blt.n	8006a9c <MQTTSerialize_subscribeLength+0x14>
	return len;
 8006acc:	68bb      	ldr	r3, [r7, #8]
}
 8006ace:	4618      	mov	r0, r3
 8006ad0:	3710      	adds	r7, #16
 8006ad2:	46bd      	mov	sp, r7
 8006ad4:	bd80      	pop	{r7, pc}

08006ad6 <MQTTSerialize_subscribe>:
  * @param requestedQoSs - array of requested QoS
  * @return the length of the serialized data.  <= 0 indicates error
  */
int MQTTSerialize_subscribe(unsigned char* buf, int buflen, unsigned char dup, unsigned short packetid, int count,
		MQTTString topicFilters[], int requestedQoSs[])
{
 8006ad6:	b580      	push	{r7, lr}
 8006ad8:	b08a      	sub	sp, #40	@ 0x28
 8006ada:	af00      	add	r7, sp, #0
 8006adc:	60f8      	str	r0, [r7, #12]
 8006ade:	60b9      	str	r1, [r7, #8]
 8006ae0:	4611      	mov	r1, r2
 8006ae2:	461a      	mov	r2, r3
 8006ae4:	460b      	mov	r3, r1
 8006ae6:	71fb      	strb	r3, [r7, #7]
 8006ae8:	4613      	mov	r3, r2
 8006aea:	80bb      	strh	r3, [r7, #4]
	unsigned char *ptr = buf;
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	61bb      	str	r3, [r7, #24]
	MQTTHeader header = {0};
 8006af0:	2300      	movs	r3, #0
 8006af2:	617b      	str	r3, [r7, #20]
	int rem_len = 0;
 8006af4:	2300      	movs	r3, #0
 8006af6:	61fb      	str	r3, [r7, #28]
	int rc = 0;
 8006af8:	2300      	movs	r3, #0
 8006afa:	627b      	str	r3, [r7, #36]	@ 0x24
	int i = 0;
 8006afc:	2300      	movs	r3, #0
 8006afe:	623b      	str	r3, [r7, #32]

	FUNC_ENTRY;
	if (MQTTPacket_len(rem_len = MQTTSerialize_subscribeLength(count, topicFilters)) > buflen)
 8006b00:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8006b02:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006b04:	f7ff ffc0 	bl	8006a88 <MQTTSerialize_subscribeLength>
 8006b08:	61f8      	str	r0, [r7, #28]
 8006b0a:	69f8      	ldr	r0, [r7, #28]
 8006b0c:	f7ff fdcc 	bl	80066a8 <MQTTPacket_len>
 8006b10:	4602      	mov	r2, r0
 8006b12:	68bb      	ldr	r3, [r7, #8]
 8006b14:	4293      	cmp	r3, r2
 8006b16:	da03      	bge.n	8006b20 <MQTTSerialize_subscribe+0x4a>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
 8006b18:	f06f 0301 	mvn.w	r3, #1
 8006b1c:	627b      	str	r3, [r7, #36]	@ 0x24
		goto exit;
 8006b1e:	e051      	b.n	8006bc4 <MQTTSerialize_subscribe+0xee>
	}

	header.byte = 0;
 8006b20:	2300      	movs	r3, #0
 8006b22:	753b      	strb	r3, [r7, #20]
	header.bits.type = SUBSCRIBE;
 8006b24:	7d3b      	ldrb	r3, [r7, #20]
 8006b26:	2208      	movs	r2, #8
 8006b28:	f362 1307 	bfi	r3, r2, #4, #4
 8006b2c:	753b      	strb	r3, [r7, #20]
	header.bits.dup = dup;
 8006b2e:	79fb      	ldrb	r3, [r7, #7]
 8006b30:	f003 0301 	and.w	r3, r3, #1
 8006b34:	b2da      	uxtb	r2, r3
 8006b36:	7d3b      	ldrb	r3, [r7, #20]
 8006b38:	f362 03c3 	bfi	r3, r2, #3, #1
 8006b3c:	753b      	strb	r3, [r7, #20]
	header.bits.qos = 1;
 8006b3e:	7d3b      	ldrb	r3, [r7, #20]
 8006b40:	2201      	movs	r2, #1
 8006b42:	f362 0342 	bfi	r3, r2, #1, #2
 8006b46:	753b      	strb	r3, [r7, #20]
	writeChar(&ptr, header.byte); /* write header */
 8006b48:	7d3a      	ldrb	r2, [r7, #20]
 8006b4a:	f107 0318 	add.w	r3, r7, #24
 8006b4e:	4611      	mov	r1, r2
 8006b50:	4618      	mov	r0, r3
 8006b52:	f7ff fe38 	bl	80067c6 <writeChar>

	ptr += MQTTPacket_encode(ptr, rem_len); /* write remaining length */;
 8006b56:	69bb      	ldr	r3, [r7, #24]
 8006b58:	69f9      	ldr	r1, [r7, #28]
 8006b5a:	4618      	mov	r0, r3
 8006b5c:	f7ff fd39 	bl	80065d2 <MQTTPacket_encode>
 8006b60:	4602      	mov	r2, r0
 8006b62:	69bb      	ldr	r3, [r7, #24]
 8006b64:	4413      	add	r3, r2
 8006b66:	61bb      	str	r3, [r7, #24]

	writeInt(&ptr, packetid);
 8006b68:	88ba      	ldrh	r2, [r7, #4]
 8006b6a:	f107 0318 	add.w	r3, r7, #24
 8006b6e:	4611      	mov	r1, r2
 8006b70:	4618      	mov	r0, r3
 8006b72:	f7ff fe3d 	bl	80067f0 <writeInt>

	for (i = 0; i < count; ++i)
 8006b76:	2300      	movs	r3, #0
 8006b78:	623b      	str	r3, [r7, #32]
 8006b7a:	e01b      	b.n	8006bb4 <MQTTSerialize_subscribe+0xde>
	{
		writeMQTTString(&ptr, topicFilters[i]);
 8006b7c:	6a3a      	ldr	r2, [r7, #32]
 8006b7e:	4613      	mov	r3, r2
 8006b80:	005b      	lsls	r3, r3, #1
 8006b82:	4413      	add	r3, r2
 8006b84:	009b      	lsls	r3, r3, #2
 8006b86:	461a      	mov	r2, r3
 8006b88:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006b8a:	4413      	add	r3, r2
 8006b8c:	f107 0018 	add.w	r0, r7, #24
 8006b90:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006b92:	f7ff fe75 	bl	8006880 <writeMQTTString>
		writeChar(&ptr, requestedQoSs[i]);
 8006b96:	6a3b      	ldr	r3, [r7, #32]
 8006b98:	009b      	lsls	r3, r3, #2
 8006b9a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006b9c:	4413      	add	r3, r2
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	b2da      	uxtb	r2, r3
 8006ba2:	f107 0318 	add.w	r3, r7, #24
 8006ba6:	4611      	mov	r1, r2
 8006ba8:	4618      	mov	r0, r3
 8006baa:	f7ff fe0c 	bl	80067c6 <writeChar>
	for (i = 0; i < count; ++i)
 8006bae:	6a3b      	ldr	r3, [r7, #32]
 8006bb0:	3301      	adds	r3, #1
 8006bb2:	623b      	str	r3, [r7, #32]
 8006bb4:	6a3a      	ldr	r2, [r7, #32]
 8006bb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bb8:	429a      	cmp	r2, r3
 8006bba:	dbdf      	blt.n	8006b7c <MQTTSerialize_subscribe+0xa6>
	}

	rc = ptr - buf;
 8006bbc:	69ba      	ldr	r2, [r7, #24]
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	1ad3      	subs	r3, r2, r3
 8006bc2:	627b      	str	r3, [r7, #36]	@ 0x24
exit:
	FUNC_EXIT_RC(rc);
	return rc;
 8006bc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8006bc6:	4618      	mov	r0, r3
 8006bc8:	3728      	adds	r7, #40	@ 0x28
 8006bca:	46bd      	mov	sp, r7
 8006bcc:	bd80      	pop	{r7, pc}

08006bce <MQTTDeserialize_suback>:
  * @param buf the raw buffer data, of the correct length determined by the remaining length field
  * @param buflen the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success, 0 is failure
  */
int MQTTDeserialize_suback(unsigned short* packetid, int maxcount, int* count, int grantedQoSs[], unsigned char* buf, int buflen)
{
 8006bce:	b580      	push	{r7, lr}
 8006bd0:	b08a      	sub	sp, #40	@ 0x28
 8006bd2:	af00      	add	r7, sp, #0
 8006bd4:	60f8      	str	r0, [r7, #12]
 8006bd6:	60b9      	str	r1, [r7, #8]
 8006bd8:	607a      	str	r2, [r7, #4]
 8006bda:	603b      	str	r3, [r7, #0]
	MQTTHeader header = {0};
 8006bdc:	2300      	movs	r3, #0
 8006bde:	61fb      	str	r3, [r7, #28]
	unsigned char* curdata = buf;
 8006be0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006be2:	61bb      	str	r3, [r7, #24]
	unsigned char* enddata = NULL;
 8006be4:	2300      	movs	r3, #0
 8006be6:	623b      	str	r3, [r7, #32]
	int rc = 0;
 8006be8:	2300      	movs	r3, #0
 8006bea:	627b      	str	r3, [r7, #36]	@ 0x24
	int mylen;

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
 8006bec:	f107 0318 	add.w	r3, r7, #24
 8006bf0:	4618      	mov	r0, r3
 8006bf2:	f7ff fdd4 	bl	800679e <readChar>
 8006bf6:	4603      	mov	r3, r0
 8006bf8:	773b      	strb	r3, [r7, #28]
	if (header.bits.type != SUBACK)
 8006bfa:	7f3b      	ldrb	r3, [r7, #28]
 8006bfc:	f023 030f 	bic.w	r3, r3, #15
 8006c00:	b2db      	uxtb	r3, r3
 8006c02:	2b90      	cmp	r3, #144	@ 0x90
 8006c04:	d142      	bne.n	8006c8c <MQTTDeserialize_suback+0xbe>
		goto exit;

	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
 8006c06:	69bb      	ldr	r3, [r7, #24]
 8006c08:	f107 0214 	add.w	r2, r7, #20
 8006c0c:	4611      	mov	r1, r2
 8006c0e:	4618      	mov	r0, r3
 8006c10:	f7ff fd94 	bl	800673c <MQTTPacket_decodeBuf>
 8006c14:	6278      	str	r0, [r7, #36]	@ 0x24
 8006c16:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006c18:	69bb      	ldr	r3, [r7, #24]
 8006c1a:	4413      	add	r3, r2
 8006c1c:	61bb      	str	r3, [r7, #24]
	enddata = curdata + mylen;
 8006c1e:	69bb      	ldr	r3, [r7, #24]
 8006c20:	697a      	ldr	r2, [r7, #20]
 8006c22:	4413      	add	r3, r2
 8006c24:	623b      	str	r3, [r7, #32]
	if (enddata - curdata < 2)
 8006c26:	69bb      	ldr	r3, [r7, #24]
 8006c28:	6a3a      	ldr	r2, [r7, #32]
 8006c2a:	1ad3      	subs	r3, r2, r3
 8006c2c:	2b01      	cmp	r3, #1
 8006c2e:	dd2f      	ble.n	8006c90 <MQTTDeserialize_suback+0xc2>
		goto exit;

	*packetid = readInt(&curdata);
 8006c30:	f107 0318 	add.w	r3, r7, #24
 8006c34:	4618      	mov	r0, r3
 8006c36:	f7ff fd97 	bl	8006768 <readInt>
 8006c3a:	4603      	mov	r3, r0
 8006c3c:	b29a      	uxth	r2, r3
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	801a      	strh	r2, [r3, #0]

	*count = 0;
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	2200      	movs	r2, #0
 8006c46:	601a      	str	r2, [r3, #0]
	while (curdata < enddata)
 8006c48:	e019      	b.n	8006c7e <MQTTDeserialize_suback+0xb0>
	{
		if (*count > maxcount)
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	68ba      	ldr	r2, [r7, #8]
 8006c50:	429a      	cmp	r2, r3
 8006c52:	da03      	bge.n	8006c5c <MQTTDeserialize_suback+0x8e>
		{
			rc = -1;
 8006c54:	f04f 33ff 	mov.w	r3, #4294967295
 8006c58:	627b      	str	r3, [r7, #36]	@ 0x24
			goto exit;
 8006c5a:	e01a      	b.n	8006c92 <MQTTDeserialize_suback+0xc4>
		}
		grantedQoSs[(*count)++] = readChar(&curdata);
 8006c5c:	f107 0318 	add.w	r3, r7, #24
 8006c60:	4618      	mov	r0, r3
 8006c62:	f7ff fd9c 	bl	800679e <readChar>
 8006c66:	4603      	mov	r3, r0
 8006c68:	4618      	mov	r0, r3
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	1c59      	adds	r1, r3, #1
 8006c70:	687a      	ldr	r2, [r7, #4]
 8006c72:	6011      	str	r1, [r2, #0]
 8006c74:	009b      	lsls	r3, r3, #2
 8006c76:	683a      	ldr	r2, [r7, #0]
 8006c78:	4413      	add	r3, r2
 8006c7a:	4602      	mov	r2, r0
 8006c7c:	601a      	str	r2, [r3, #0]
	while (curdata < enddata)
 8006c7e:	69bb      	ldr	r3, [r7, #24]
 8006c80:	6a3a      	ldr	r2, [r7, #32]
 8006c82:	429a      	cmp	r2, r3
 8006c84:	d8e1      	bhi.n	8006c4a <MQTTDeserialize_suback+0x7c>
	}

	rc = 1;
 8006c86:	2301      	movs	r3, #1
 8006c88:	627b      	str	r3, [r7, #36]	@ 0x24
 8006c8a:	e002      	b.n	8006c92 <MQTTDeserialize_suback+0xc4>
		goto exit;
 8006c8c:	bf00      	nop
 8006c8e:	e000      	b.n	8006c92 <MQTTDeserialize_suback+0xc4>
		goto exit;
 8006c90:	bf00      	nop
exit:
	FUNC_EXIT_RC(rc);
	return rc;
 8006c92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8006c94:	4618      	mov	r0, r3
 8006c96:	3728      	adds	r7, #40	@ 0x28
 8006c98:	46bd      	mov	sp, r7
 8006c9a:	bd80      	pop	{r7, pc}

08006c9c <WIZCHIP_READ>:

#if   (_WIZCHIP_ == 5500)
////////////////////////////////////////////////////

uint8_t  WIZCHIP_READ(uint32_t AddrSel)
{
 8006c9c:	b580      	push	{r7, lr}
 8006c9e:	b084      	sub	sp, #16
 8006ca0:	af00      	add	r7, sp, #0
 8006ca2:	6078      	str	r0, [r7, #4]
   uint8_t ret;
   uint8_t spi_data[3];

   WIZCHIP_CRITICAL_ENTER();
 8006ca4:	4b22      	ldr	r3, [pc, #136]	@ (8006d30 <WIZCHIP_READ+0x94>)
 8006ca6:	68db      	ldr	r3, [r3, #12]
 8006ca8:	4798      	blx	r3
   WIZCHIP.CS._select();
 8006caa:	4b21      	ldr	r3, [pc, #132]	@ (8006d30 <WIZCHIP_READ+0x94>)
 8006cac:	695b      	ldr	r3, [r3, #20]
 8006cae:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8006cb0:	4b1f      	ldr	r3, [pc, #124]	@ (8006d30 <WIZCHIP_READ+0x94>)
 8006cb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d003      	beq.n	8006cc0 <WIZCHIP_READ+0x24>
 8006cb8:	4b1d      	ldr	r3, [pc, #116]	@ (8006d30 <WIZCHIP_READ+0x94>)
 8006cba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d114      	bne.n	8006cea <WIZCHIP_READ+0x4e>
   {
	   WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8006cc0:	4b1b      	ldr	r3, [pc, #108]	@ (8006d30 <WIZCHIP_READ+0x94>)
 8006cc2:	6a1b      	ldr	r3, [r3, #32]
 8006cc4:	687a      	ldr	r2, [r7, #4]
 8006cc6:	0c12      	lsrs	r2, r2, #16
 8006cc8:	b2d2      	uxtb	r2, r2
 8006cca:	4610      	mov	r0, r2
 8006ccc:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8006cce:	4b18      	ldr	r3, [pc, #96]	@ (8006d30 <WIZCHIP_READ+0x94>)
 8006cd0:	6a1b      	ldr	r3, [r3, #32]
 8006cd2:	687a      	ldr	r2, [r7, #4]
 8006cd4:	0a12      	lsrs	r2, r2, #8
 8006cd6:	b2d2      	uxtb	r2, r2
 8006cd8:	4610      	mov	r0, r2
 8006cda:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8006cdc:	4b14      	ldr	r3, [pc, #80]	@ (8006d30 <WIZCHIP_READ+0x94>)
 8006cde:	6a1b      	ldr	r3, [r3, #32]
 8006ce0:	687a      	ldr	r2, [r7, #4]
 8006ce2:	b2d2      	uxtb	r2, r2
 8006ce4:	4610      	mov	r0, r2
 8006ce6:	4798      	blx	r3
 8006ce8:	e011      	b.n	8006d0e <WIZCHIP_READ+0x72>
   }
   else																// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	0c1b      	lsrs	r3, r3, #16
 8006cee:	b2db      	uxtb	r3, r3
 8006cf0:	733b      	strb	r3, [r7, #12]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	0a1b      	lsrs	r3, r3, #8
 8006cf6:	b2db      	uxtb	r3, r3
 8006cf8:	737b      	strb	r3, [r7, #13]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	b2db      	uxtb	r3, r3
 8006cfe:	73bb      	strb	r3, [r7, #14]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 8006d00:	4b0b      	ldr	r3, [pc, #44]	@ (8006d30 <WIZCHIP_READ+0x94>)
 8006d02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d04:	f107 020c 	add.w	r2, r7, #12
 8006d08:	2103      	movs	r1, #3
 8006d0a:	4610      	mov	r0, r2
 8006d0c:	4798      	blx	r3
   }
   ret = WIZCHIP.IF.SPI._read_byte();
 8006d0e:	4b08      	ldr	r3, [pc, #32]	@ (8006d30 <WIZCHIP_READ+0x94>)
 8006d10:	69db      	ldr	r3, [r3, #28]
 8006d12:	4798      	blx	r3
 8006d14:	4603      	mov	r3, r0
 8006d16:	73fb      	strb	r3, [r7, #15]

   WIZCHIP.CS._deselect();
 8006d18:	4b05      	ldr	r3, [pc, #20]	@ (8006d30 <WIZCHIP_READ+0x94>)
 8006d1a:	699b      	ldr	r3, [r3, #24]
 8006d1c:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8006d1e:	4b04      	ldr	r3, [pc, #16]	@ (8006d30 <WIZCHIP_READ+0x94>)
 8006d20:	691b      	ldr	r3, [r3, #16]
 8006d22:	4798      	blx	r3
   return ret;
 8006d24:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d26:	4618      	mov	r0, r3
 8006d28:	3710      	adds	r7, #16
 8006d2a:	46bd      	mov	sp, r7
 8006d2c:	bd80      	pop	{r7, pc}
 8006d2e:	bf00      	nop
 8006d30:	200000b4 	.word	0x200000b4

08006d34 <WIZCHIP_WRITE>:

void     WIZCHIP_WRITE(uint32_t AddrSel, uint8_t wb )
{
 8006d34:	b580      	push	{r7, lr}
 8006d36:	b084      	sub	sp, #16
 8006d38:	af00      	add	r7, sp, #0
 8006d3a:	6078      	str	r0, [r7, #4]
 8006d3c:	460b      	mov	r3, r1
 8006d3e:	70fb      	strb	r3, [r7, #3]
   uint8_t spi_data[4];

   WIZCHIP_CRITICAL_ENTER();
 8006d40:	4b22      	ldr	r3, [pc, #136]	@ (8006dcc <WIZCHIP_WRITE+0x98>)
 8006d42:	68db      	ldr	r3, [r3, #12]
 8006d44:	4798      	blx	r3
   WIZCHIP.CS._select();
 8006d46:	4b21      	ldr	r3, [pc, #132]	@ (8006dcc <WIZCHIP_WRITE+0x98>)
 8006d48:	695b      	ldr	r3, [r3, #20]
 8006d4a:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	f043 0304 	orr.w	r3, r3, #4
 8006d52:	607b      	str	r3, [r7, #4]

   //if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8006d54:	4b1d      	ldr	r3, [pc, #116]	@ (8006dcc <WIZCHIP_WRITE+0x98>)
 8006d56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d119      	bne.n	8006d90 <WIZCHIP_WRITE+0x5c>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8006d5c:	4b1b      	ldr	r3, [pc, #108]	@ (8006dcc <WIZCHIP_WRITE+0x98>)
 8006d5e:	6a1b      	ldr	r3, [r3, #32]
 8006d60:	687a      	ldr	r2, [r7, #4]
 8006d62:	0c12      	lsrs	r2, r2, #16
 8006d64:	b2d2      	uxtb	r2, r2
 8006d66:	4610      	mov	r0, r2
 8006d68:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8006d6a:	4b18      	ldr	r3, [pc, #96]	@ (8006dcc <WIZCHIP_WRITE+0x98>)
 8006d6c:	6a1b      	ldr	r3, [r3, #32]
 8006d6e:	687a      	ldr	r2, [r7, #4]
 8006d70:	0a12      	lsrs	r2, r2, #8
 8006d72:	b2d2      	uxtb	r2, r2
 8006d74:	4610      	mov	r0, r2
 8006d76:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8006d78:	4b14      	ldr	r3, [pc, #80]	@ (8006dcc <WIZCHIP_WRITE+0x98>)
 8006d7a:	6a1b      	ldr	r3, [r3, #32]
 8006d7c:	687a      	ldr	r2, [r7, #4]
 8006d7e:	b2d2      	uxtb	r2, r2
 8006d80:	4610      	mov	r0, r2
 8006d82:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte(wb);
 8006d84:	4b11      	ldr	r3, [pc, #68]	@ (8006dcc <WIZCHIP_WRITE+0x98>)
 8006d86:	6a1b      	ldr	r3, [r3, #32]
 8006d88:	78fa      	ldrb	r2, [r7, #3]
 8006d8a:	4610      	mov	r0, r2
 8006d8c:	4798      	blx	r3
 8006d8e:	e013      	b.n	8006db8 <WIZCHIP_WRITE+0x84>
   }
   else									// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	0c1b      	lsrs	r3, r3, #16
 8006d94:	b2db      	uxtb	r3, r3
 8006d96:	733b      	strb	r3, [r7, #12]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	0a1b      	lsrs	r3, r3, #8
 8006d9c:	b2db      	uxtb	r3, r3
 8006d9e:	737b      	strb	r3, [r7, #13]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	b2db      	uxtb	r3, r3
 8006da4:	73bb      	strb	r3, [r7, #14]
		spi_data[3] = wb;
 8006da6:	78fb      	ldrb	r3, [r7, #3]
 8006da8:	73fb      	strb	r3, [r7, #15]
		WIZCHIP.IF.SPI._write_burst(spi_data, 4);
 8006daa:	4b08      	ldr	r3, [pc, #32]	@ (8006dcc <WIZCHIP_WRITE+0x98>)
 8006dac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006dae:	f107 020c 	add.w	r2, r7, #12
 8006db2:	2104      	movs	r1, #4
 8006db4:	4610      	mov	r0, r2
 8006db6:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 8006db8:	4b04      	ldr	r3, [pc, #16]	@ (8006dcc <WIZCHIP_WRITE+0x98>)
 8006dba:	699b      	ldr	r3, [r3, #24]
 8006dbc:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8006dbe:	4b03      	ldr	r3, [pc, #12]	@ (8006dcc <WIZCHIP_WRITE+0x98>)
 8006dc0:	691b      	ldr	r3, [r3, #16]
 8006dc2:	4798      	blx	r3
}
 8006dc4:	bf00      	nop
 8006dc6:	3710      	adds	r7, #16
 8006dc8:	46bd      	mov	sp, r7
 8006dca:	bd80      	pop	{r7, pc}
 8006dcc:	200000b4 	.word	0x200000b4

08006dd0 <WIZCHIP_READ_BUF>:
         
void     WIZCHIP_READ_BUF (uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 8006dd0:	b590      	push	{r4, r7, lr}
 8006dd2:	b087      	sub	sp, #28
 8006dd4:	af00      	add	r7, sp, #0
 8006dd6:	60f8      	str	r0, [r7, #12]
 8006dd8:	60b9      	str	r1, [r7, #8]
 8006dda:	4613      	mov	r3, r2
 8006ddc:	80fb      	strh	r3, [r7, #6]
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
 8006dde:	4b2b      	ldr	r3, [pc, #172]	@ (8006e8c <WIZCHIP_READ_BUF+0xbc>)
 8006de0:	68db      	ldr	r3, [r3, #12]
 8006de2:	4798      	blx	r3
   WIZCHIP.CS._select();
 8006de4:	4b29      	ldr	r3, [pc, #164]	@ (8006e8c <WIZCHIP_READ_BUF+0xbc>)
 8006de6:	695b      	ldr	r3, [r3, #20]
 8006de8:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8006dea:	4b28      	ldr	r3, [pc, #160]	@ (8006e8c <WIZCHIP_READ_BUF+0xbc>)
 8006dec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d003      	beq.n	8006dfa <WIZCHIP_READ_BUF+0x2a>
 8006df2:	4b26      	ldr	r3, [pc, #152]	@ (8006e8c <WIZCHIP_READ_BUF+0xbc>)
 8006df4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d126      	bne.n	8006e48 <WIZCHIP_READ_BUF+0x78>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8006dfa:	4b24      	ldr	r3, [pc, #144]	@ (8006e8c <WIZCHIP_READ_BUF+0xbc>)
 8006dfc:	6a1b      	ldr	r3, [r3, #32]
 8006dfe:	68fa      	ldr	r2, [r7, #12]
 8006e00:	0c12      	lsrs	r2, r2, #16
 8006e02:	b2d2      	uxtb	r2, r2
 8006e04:	4610      	mov	r0, r2
 8006e06:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8006e08:	4b20      	ldr	r3, [pc, #128]	@ (8006e8c <WIZCHIP_READ_BUF+0xbc>)
 8006e0a:	6a1b      	ldr	r3, [r3, #32]
 8006e0c:	68fa      	ldr	r2, [r7, #12]
 8006e0e:	0a12      	lsrs	r2, r2, #8
 8006e10:	b2d2      	uxtb	r2, r2
 8006e12:	4610      	mov	r0, r2
 8006e14:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8006e16:	4b1d      	ldr	r3, [pc, #116]	@ (8006e8c <WIZCHIP_READ_BUF+0xbc>)
 8006e18:	6a1b      	ldr	r3, [r3, #32]
 8006e1a:	68fa      	ldr	r2, [r7, #12]
 8006e1c:	b2d2      	uxtb	r2, r2
 8006e1e:	4610      	mov	r0, r2
 8006e20:	4798      	blx	r3
		for(i = 0; i < len; i++)
 8006e22:	2300      	movs	r3, #0
 8006e24:	82fb      	strh	r3, [r7, #22]
 8006e26:	e00a      	b.n	8006e3e <WIZCHIP_READ_BUF+0x6e>
		   pBuf[i] = WIZCHIP.IF.SPI._read_byte();
 8006e28:	4b18      	ldr	r3, [pc, #96]	@ (8006e8c <WIZCHIP_READ_BUF+0xbc>)
 8006e2a:	69db      	ldr	r3, [r3, #28]
 8006e2c:	8afa      	ldrh	r2, [r7, #22]
 8006e2e:	68b9      	ldr	r1, [r7, #8]
 8006e30:	188c      	adds	r4, r1, r2
 8006e32:	4798      	blx	r3
 8006e34:	4603      	mov	r3, r0
 8006e36:	7023      	strb	r3, [r4, #0]
		for(i = 0; i < len; i++)
 8006e38:	8afb      	ldrh	r3, [r7, #22]
 8006e3a:	3301      	adds	r3, #1
 8006e3c:	82fb      	strh	r3, [r7, #22]
 8006e3e:	8afa      	ldrh	r2, [r7, #22]
 8006e40:	88fb      	ldrh	r3, [r7, #6]
 8006e42:	429a      	cmp	r2, r3
 8006e44:	d3f0      	bcc.n	8006e28 <WIZCHIP_READ_BUF+0x58>
   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8006e46:	e017      	b.n	8006e78 <WIZCHIP_READ_BUF+0xa8>
   }
   else																// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	0c1b      	lsrs	r3, r3, #16
 8006e4c:	b2db      	uxtb	r3, r3
 8006e4e:	743b      	strb	r3, [r7, #16]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	0a1b      	lsrs	r3, r3, #8
 8006e54:	b2db      	uxtb	r3, r3
 8006e56:	747b      	strb	r3, [r7, #17]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	b2db      	uxtb	r3, r3
 8006e5c:	74bb      	strb	r3, [r7, #18]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 8006e5e:	4b0b      	ldr	r3, [pc, #44]	@ (8006e8c <WIZCHIP_READ_BUF+0xbc>)
 8006e60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e62:	f107 0210 	add.w	r2, r7, #16
 8006e66:	2103      	movs	r1, #3
 8006e68:	4610      	mov	r0, r2
 8006e6a:	4798      	blx	r3
		WIZCHIP.IF.SPI._read_burst(pBuf, len);
 8006e6c:	4b07      	ldr	r3, [pc, #28]	@ (8006e8c <WIZCHIP_READ_BUF+0xbc>)
 8006e6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e70:	88fa      	ldrh	r2, [r7, #6]
 8006e72:	4611      	mov	r1, r2
 8006e74:	68b8      	ldr	r0, [r7, #8]
 8006e76:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 8006e78:	4b04      	ldr	r3, [pc, #16]	@ (8006e8c <WIZCHIP_READ_BUF+0xbc>)
 8006e7a:	699b      	ldr	r3, [r3, #24]
 8006e7c:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8006e7e:	4b03      	ldr	r3, [pc, #12]	@ (8006e8c <WIZCHIP_READ_BUF+0xbc>)
 8006e80:	691b      	ldr	r3, [r3, #16]
 8006e82:	4798      	blx	r3
}
 8006e84:	bf00      	nop
 8006e86:	371c      	adds	r7, #28
 8006e88:	46bd      	mov	sp, r7
 8006e8a:	bd90      	pop	{r4, r7, pc}
 8006e8c:	200000b4 	.word	0x200000b4

08006e90 <WIZCHIP_WRITE_BUF>:

void     WIZCHIP_WRITE_BUF(uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 8006e90:	b580      	push	{r7, lr}
 8006e92:	b086      	sub	sp, #24
 8006e94:	af00      	add	r7, sp, #0
 8006e96:	60f8      	str	r0, [r7, #12]
 8006e98:	60b9      	str	r1, [r7, #8]
 8006e9a:	4613      	mov	r3, r2
 8006e9c:	80fb      	strh	r3, [r7, #6]
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
 8006e9e:	4b2b      	ldr	r3, [pc, #172]	@ (8006f4c <WIZCHIP_WRITE_BUF+0xbc>)
 8006ea0:	68db      	ldr	r3, [r3, #12]
 8006ea2:	4798      	blx	r3
   WIZCHIP.CS._select();
 8006ea4:	4b29      	ldr	r3, [pc, #164]	@ (8006f4c <WIZCHIP_WRITE_BUF+0xbc>)
 8006ea6:	695b      	ldr	r3, [r3, #20]
 8006ea8:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	f043 0304 	orr.w	r3, r3, #4
 8006eb0:	60fb      	str	r3, [r7, #12]

   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8006eb2:	4b26      	ldr	r3, [pc, #152]	@ (8006f4c <WIZCHIP_WRITE_BUF+0xbc>)
 8006eb4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d126      	bne.n	8006f08 <WIZCHIP_WRITE_BUF+0x78>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8006eba:	4b24      	ldr	r3, [pc, #144]	@ (8006f4c <WIZCHIP_WRITE_BUF+0xbc>)
 8006ebc:	6a1b      	ldr	r3, [r3, #32]
 8006ebe:	68fa      	ldr	r2, [r7, #12]
 8006ec0:	0c12      	lsrs	r2, r2, #16
 8006ec2:	b2d2      	uxtb	r2, r2
 8006ec4:	4610      	mov	r0, r2
 8006ec6:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8006ec8:	4b20      	ldr	r3, [pc, #128]	@ (8006f4c <WIZCHIP_WRITE_BUF+0xbc>)
 8006eca:	6a1b      	ldr	r3, [r3, #32]
 8006ecc:	68fa      	ldr	r2, [r7, #12]
 8006ece:	0a12      	lsrs	r2, r2, #8
 8006ed0:	b2d2      	uxtb	r2, r2
 8006ed2:	4610      	mov	r0, r2
 8006ed4:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8006ed6:	4b1d      	ldr	r3, [pc, #116]	@ (8006f4c <WIZCHIP_WRITE_BUF+0xbc>)
 8006ed8:	6a1b      	ldr	r3, [r3, #32]
 8006eda:	68fa      	ldr	r2, [r7, #12]
 8006edc:	b2d2      	uxtb	r2, r2
 8006ede:	4610      	mov	r0, r2
 8006ee0:	4798      	blx	r3
		for(i = 0; i < len; i++)
 8006ee2:	2300      	movs	r3, #0
 8006ee4:	82fb      	strh	r3, [r7, #22]
 8006ee6:	e00a      	b.n	8006efe <WIZCHIP_WRITE_BUF+0x6e>
			WIZCHIP.IF.SPI._write_byte(pBuf[i]);
 8006ee8:	4b18      	ldr	r3, [pc, #96]	@ (8006f4c <WIZCHIP_WRITE_BUF+0xbc>)
 8006eea:	6a1b      	ldr	r3, [r3, #32]
 8006eec:	8afa      	ldrh	r2, [r7, #22]
 8006eee:	68b9      	ldr	r1, [r7, #8]
 8006ef0:	440a      	add	r2, r1
 8006ef2:	7812      	ldrb	r2, [r2, #0]
 8006ef4:	4610      	mov	r0, r2
 8006ef6:	4798      	blx	r3
		for(i = 0; i < len; i++)
 8006ef8:	8afb      	ldrh	r3, [r7, #22]
 8006efa:	3301      	adds	r3, #1
 8006efc:	82fb      	strh	r3, [r7, #22]
 8006efe:	8afa      	ldrh	r2, [r7, #22]
 8006f00:	88fb      	ldrh	r3, [r7, #6]
 8006f02:	429a      	cmp	r2, r3
 8006f04:	d3f0      	bcc.n	8006ee8 <WIZCHIP_WRITE_BUF+0x58>
 8006f06:	e017      	b.n	8006f38 <WIZCHIP_WRITE_BUF+0xa8>
   }
   else									// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	0c1b      	lsrs	r3, r3, #16
 8006f0c:	b2db      	uxtb	r3, r3
 8006f0e:	743b      	strb	r3, [r7, #16]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	0a1b      	lsrs	r3, r3, #8
 8006f14:	b2db      	uxtb	r3, r3
 8006f16:	747b      	strb	r3, [r7, #17]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	b2db      	uxtb	r3, r3
 8006f1c:	74bb      	strb	r3, [r7, #18]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 8006f1e:	4b0b      	ldr	r3, [pc, #44]	@ (8006f4c <WIZCHIP_WRITE_BUF+0xbc>)
 8006f20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f22:	f107 0210 	add.w	r2, r7, #16
 8006f26:	2103      	movs	r1, #3
 8006f28:	4610      	mov	r0, r2
 8006f2a:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_burst(pBuf, len);
 8006f2c:	4b07      	ldr	r3, [pc, #28]	@ (8006f4c <WIZCHIP_WRITE_BUF+0xbc>)
 8006f2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f30:	88fa      	ldrh	r2, [r7, #6]
 8006f32:	4611      	mov	r1, r2
 8006f34:	68b8      	ldr	r0, [r7, #8]
 8006f36:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 8006f38:	4b04      	ldr	r3, [pc, #16]	@ (8006f4c <WIZCHIP_WRITE_BUF+0xbc>)
 8006f3a:	699b      	ldr	r3, [r3, #24]
 8006f3c:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8006f3e:	4b03      	ldr	r3, [pc, #12]	@ (8006f4c <WIZCHIP_WRITE_BUF+0xbc>)
 8006f40:	691b      	ldr	r3, [r3, #16]
 8006f42:	4798      	blx	r3
}
 8006f44:	bf00      	nop
 8006f46:	3718      	adds	r7, #24
 8006f48:	46bd      	mov	sp, r7
 8006f4a:	bd80      	pop	{r7, pc}
 8006f4c:	200000b4 	.word	0x200000b4

08006f50 <getSn_TX_FSR>:


uint16_t getSn_TX_FSR(uint8_t sn)
{
 8006f50:	b590      	push	{r4, r7, lr}
 8006f52:	b085      	sub	sp, #20
 8006f54:	af00      	add	r7, sp, #0
 8006f56:	4603      	mov	r3, r0
 8006f58:	71fb      	strb	r3, [r7, #7]
   uint16_t val=0,val1=0;
 8006f5a:	2300      	movs	r3, #0
 8006f5c:	81fb      	strh	r3, [r7, #14]
 8006f5e:	2300      	movs	r3, #0
 8006f60:	81bb      	strh	r3, [r7, #12]

   do
   {
      val1 = WIZCHIP_READ(Sn_TX_FSR(sn));
 8006f62:	79fb      	ldrb	r3, [r7, #7]
 8006f64:	009b      	lsls	r3, r3, #2
 8006f66:	3301      	adds	r3, #1
 8006f68:	00db      	lsls	r3, r3, #3
 8006f6a:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8006f6e:	4618      	mov	r0, r3
 8006f70:	f7ff fe94 	bl	8006c9c <WIZCHIP_READ>
 8006f74:	4603      	mov	r3, r0
 8006f76:	81bb      	strh	r3, [r7, #12]
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 8006f78:	89bb      	ldrh	r3, [r7, #12]
 8006f7a:	021b      	lsls	r3, r3, #8
 8006f7c:	b29c      	uxth	r4, r3
 8006f7e:	79fb      	ldrb	r3, [r7, #7]
 8006f80:	009b      	lsls	r3, r3, #2
 8006f82:	3301      	adds	r3, #1
 8006f84:	00db      	lsls	r3, r3, #3
 8006f86:	f503 5304 	add.w	r3, r3, #8448	@ 0x2100
 8006f8a:	4618      	mov	r0, r3
 8006f8c:	f7ff fe86 	bl	8006c9c <WIZCHIP_READ>
 8006f90:	4603      	mov	r3, r0
 8006f92:	4423      	add	r3, r4
 8006f94:	81bb      	strh	r3, [r7, #12]
      if (val1 != 0)
 8006f96:	89bb      	ldrh	r3, [r7, #12]
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d019      	beq.n	8006fd0 <getSn_TX_FSR+0x80>
      {
        val = WIZCHIP_READ(Sn_TX_FSR(sn));
 8006f9c:	79fb      	ldrb	r3, [r7, #7]
 8006f9e:	009b      	lsls	r3, r3, #2
 8006fa0:	3301      	adds	r3, #1
 8006fa2:	00db      	lsls	r3, r3, #3
 8006fa4:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8006fa8:	4618      	mov	r0, r3
 8006faa:	f7ff fe77 	bl	8006c9c <WIZCHIP_READ>
 8006fae:	4603      	mov	r3, r0
 8006fb0:	81fb      	strh	r3, [r7, #14]
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 8006fb2:	89fb      	ldrh	r3, [r7, #14]
 8006fb4:	021b      	lsls	r3, r3, #8
 8006fb6:	b29c      	uxth	r4, r3
 8006fb8:	79fb      	ldrb	r3, [r7, #7]
 8006fba:	009b      	lsls	r3, r3, #2
 8006fbc:	3301      	adds	r3, #1
 8006fbe:	00db      	lsls	r3, r3, #3
 8006fc0:	f503 5304 	add.w	r3, r3, #8448	@ 0x2100
 8006fc4:	4618      	mov	r0, r3
 8006fc6:	f7ff fe69 	bl	8006c9c <WIZCHIP_READ>
 8006fca:	4603      	mov	r3, r0
 8006fcc:	4423      	add	r3, r4
 8006fce:	81fb      	strh	r3, [r7, #14]
      }
   }while (val != val1);
 8006fd0:	89fa      	ldrh	r2, [r7, #14]
 8006fd2:	89bb      	ldrh	r3, [r7, #12]
 8006fd4:	429a      	cmp	r2, r3
 8006fd6:	d1c4      	bne.n	8006f62 <getSn_TX_FSR+0x12>
   return val;
 8006fd8:	89fb      	ldrh	r3, [r7, #14]
}
 8006fda:	4618      	mov	r0, r3
 8006fdc:	3714      	adds	r7, #20
 8006fde:	46bd      	mov	sp, r7
 8006fe0:	bd90      	pop	{r4, r7, pc}

08006fe2 <getSn_RX_RSR>:


uint16_t getSn_RX_RSR(uint8_t sn)
{
 8006fe2:	b590      	push	{r4, r7, lr}
 8006fe4:	b085      	sub	sp, #20
 8006fe6:	af00      	add	r7, sp, #0
 8006fe8:	4603      	mov	r3, r0
 8006fea:	71fb      	strb	r3, [r7, #7]
   uint16_t val=0,val1=0;
 8006fec:	2300      	movs	r3, #0
 8006fee:	81fb      	strh	r3, [r7, #14]
 8006ff0:	2300      	movs	r3, #0
 8006ff2:	81bb      	strh	r3, [r7, #12]

   do
   {
      val1 = WIZCHIP_READ(Sn_RX_RSR(sn));
 8006ff4:	79fb      	ldrb	r3, [r7, #7]
 8006ff6:	009b      	lsls	r3, r3, #2
 8006ff8:	3301      	adds	r3, #1
 8006ffa:	00db      	lsls	r3, r3, #3
 8006ffc:	f503 5318 	add.w	r3, r3, #9728	@ 0x2600
 8007000:	4618      	mov	r0, r3
 8007002:	f7ff fe4b 	bl	8006c9c <WIZCHIP_READ>
 8007006:	4603      	mov	r3, r0
 8007008:	81bb      	strh	r3, [r7, #12]
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
 800700a:	89bb      	ldrh	r3, [r7, #12]
 800700c:	021b      	lsls	r3, r3, #8
 800700e:	b29c      	uxth	r4, r3
 8007010:	79fb      	ldrb	r3, [r7, #7]
 8007012:	009b      	lsls	r3, r3, #2
 8007014:	3301      	adds	r3, #1
 8007016:	00db      	lsls	r3, r3, #3
 8007018:	f503 531c 	add.w	r3, r3, #9984	@ 0x2700
 800701c:	4618      	mov	r0, r3
 800701e:	f7ff fe3d 	bl	8006c9c <WIZCHIP_READ>
 8007022:	4603      	mov	r3, r0
 8007024:	4423      	add	r3, r4
 8007026:	81bb      	strh	r3, [r7, #12]
      if (val1 != 0)
 8007028:	89bb      	ldrh	r3, [r7, #12]
 800702a:	2b00      	cmp	r3, #0
 800702c:	d019      	beq.n	8007062 <getSn_RX_RSR+0x80>
      {
        val = WIZCHIP_READ(Sn_RX_RSR(sn));
 800702e:	79fb      	ldrb	r3, [r7, #7]
 8007030:	009b      	lsls	r3, r3, #2
 8007032:	3301      	adds	r3, #1
 8007034:	00db      	lsls	r3, r3, #3
 8007036:	f503 5318 	add.w	r3, r3, #9728	@ 0x2600
 800703a:	4618      	mov	r0, r3
 800703c:	f7ff fe2e 	bl	8006c9c <WIZCHIP_READ>
 8007040:	4603      	mov	r3, r0
 8007042:	81fb      	strh	r3, [r7, #14]
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
 8007044:	89fb      	ldrh	r3, [r7, #14]
 8007046:	021b      	lsls	r3, r3, #8
 8007048:	b29c      	uxth	r4, r3
 800704a:	79fb      	ldrb	r3, [r7, #7]
 800704c:	009b      	lsls	r3, r3, #2
 800704e:	3301      	adds	r3, #1
 8007050:	00db      	lsls	r3, r3, #3
 8007052:	f503 531c 	add.w	r3, r3, #9984	@ 0x2700
 8007056:	4618      	mov	r0, r3
 8007058:	f7ff fe20 	bl	8006c9c <WIZCHIP_READ>
 800705c:	4603      	mov	r3, r0
 800705e:	4423      	add	r3, r4
 8007060:	81fb      	strh	r3, [r7, #14]
      }
   }while (val != val1);
 8007062:	89fa      	ldrh	r2, [r7, #14]
 8007064:	89bb      	ldrh	r3, [r7, #12]
 8007066:	429a      	cmp	r2, r3
 8007068:	d1c4      	bne.n	8006ff4 <getSn_RX_RSR+0x12>
   return val;
 800706a:	89fb      	ldrh	r3, [r7, #14]
}
 800706c:	4618      	mov	r0, r3
 800706e:	3714      	adds	r7, #20
 8007070:	46bd      	mov	sp, r7
 8007072:	bd90      	pop	{r4, r7, pc}

08007074 <wiz_send_data>:

void wiz_send_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
 8007074:	b590      	push	{r4, r7, lr}
 8007076:	b085      	sub	sp, #20
 8007078:	af00      	add	r7, sp, #0
 800707a:	4603      	mov	r3, r0
 800707c:	6039      	str	r1, [r7, #0]
 800707e:	71fb      	strb	r3, [r7, #7]
 8007080:	4613      	mov	r3, r2
 8007082:	80bb      	strh	r3, [r7, #4]
   uint16_t ptr = 0;
 8007084:	2300      	movs	r3, #0
 8007086:	81fb      	strh	r3, [r7, #14]
   uint32_t addrsel = 0;
 8007088:	2300      	movs	r3, #0
 800708a:	60bb      	str	r3, [r7, #8]

   if(len == 0)  return;
 800708c:	88bb      	ldrh	r3, [r7, #4]
 800708e:	2b00      	cmp	r3, #0
 8007090:	d046      	beq.n	8007120 <wiz_send_data+0xac>
   ptr = getSn_TX_WR(sn);
 8007092:	79fb      	ldrb	r3, [r7, #7]
 8007094:	009b      	lsls	r3, r3, #2
 8007096:	3301      	adds	r3, #1
 8007098:	00db      	lsls	r3, r3, #3
 800709a:	f503 5310 	add.w	r3, r3, #9216	@ 0x2400
 800709e:	4618      	mov	r0, r3
 80070a0:	f7ff fdfc 	bl	8006c9c <WIZCHIP_READ>
 80070a4:	4603      	mov	r3, r0
 80070a6:	021b      	lsls	r3, r3, #8
 80070a8:	b29c      	uxth	r4, r3
 80070aa:	79fb      	ldrb	r3, [r7, #7]
 80070ac:	009b      	lsls	r3, r3, #2
 80070ae:	3301      	adds	r3, #1
 80070b0:	00db      	lsls	r3, r3, #3
 80070b2:	f503 5314 	add.w	r3, r3, #9472	@ 0x2500
 80070b6:	4618      	mov	r0, r3
 80070b8:	f7ff fdf0 	bl	8006c9c <WIZCHIP_READ>
 80070bc:	4603      	mov	r3, r0
 80070be:	4423      	add	r3, r4
 80070c0:	81fb      	strh	r3, [r7, #14]
   //M20140501 : implict type casting -> explict type casting
   //addrsel = (ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
   addrsel = ((uint32_t)ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
 80070c2:	89fb      	ldrh	r3, [r7, #14]
 80070c4:	021b      	lsls	r3, r3, #8
 80070c6:	79fa      	ldrb	r2, [r7, #7]
 80070c8:	0092      	lsls	r2, r2, #2
 80070ca:	3202      	adds	r2, #2
 80070cc:	00d2      	lsls	r2, r2, #3
 80070ce:	4413      	add	r3, r2
 80070d0:	60bb      	str	r3, [r7, #8]
   //
   WIZCHIP_WRITE_BUF(addrsel,wizdata, len);
 80070d2:	88bb      	ldrh	r3, [r7, #4]
 80070d4:	461a      	mov	r2, r3
 80070d6:	6839      	ldr	r1, [r7, #0]
 80070d8:	68b8      	ldr	r0, [r7, #8]
 80070da:	f7ff fed9 	bl	8006e90 <WIZCHIP_WRITE_BUF>
   
   ptr += len;
 80070de:	89fa      	ldrh	r2, [r7, #14]
 80070e0:	88bb      	ldrh	r3, [r7, #4]
 80070e2:	4413      	add	r3, r2
 80070e4:	81fb      	strh	r3, [r7, #14]
   setSn_TX_WR(sn,ptr);
 80070e6:	79fb      	ldrb	r3, [r7, #7]
 80070e8:	009b      	lsls	r3, r3, #2
 80070ea:	3301      	adds	r3, #1
 80070ec:	00db      	lsls	r3, r3, #3
 80070ee:	f503 5310 	add.w	r3, r3, #9216	@ 0x2400
 80070f2:	461a      	mov	r2, r3
 80070f4:	89fb      	ldrh	r3, [r7, #14]
 80070f6:	0a1b      	lsrs	r3, r3, #8
 80070f8:	b29b      	uxth	r3, r3
 80070fa:	b2db      	uxtb	r3, r3
 80070fc:	4619      	mov	r1, r3
 80070fe:	4610      	mov	r0, r2
 8007100:	f7ff fe18 	bl	8006d34 <WIZCHIP_WRITE>
 8007104:	79fb      	ldrb	r3, [r7, #7]
 8007106:	009b      	lsls	r3, r3, #2
 8007108:	3301      	adds	r3, #1
 800710a:	00db      	lsls	r3, r3, #3
 800710c:	f503 5314 	add.w	r3, r3, #9472	@ 0x2500
 8007110:	461a      	mov	r2, r3
 8007112:	89fb      	ldrh	r3, [r7, #14]
 8007114:	b2db      	uxtb	r3, r3
 8007116:	4619      	mov	r1, r3
 8007118:	4610      	mov	r0, r2
 800711a:	f7ff fe0b 	bl	8006d34 <WIZCHIP_WRITE>
 800711e:	e000      	b.n	8007122 <wiz_send_data+0xae>
   if(len == 0)  return;
 8007120:	bf00      	nop
}
 8007122:	3714      	adds	r7, #20
 8007124:	46bd      	mov	sp, r7
 8007126:	bd90      	pop	{r4, r7, pc}

08007128 <wiz_recv_data>:

void wiz_recv_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
 8007128:	b590      	push	{r4, r7, lr}
 800712a:	b085      	sub	sp, #20
 800712c:	af00      	add	r7, sp, #0
 800712e:	4603      	mov	r3, r0
 8007130:	6039      	str	r1, [r7, #0]
 8007132:	71fb      	strb	r3, [r7, #7]
 8007134:	4613      	mov	r3, r2
 8007136:	80bb      	strh	r3, [r7, #4]
   uint16_t ptr = 0;
 8007138:	2300      	movs	r3, #0
 800713a:	81fb      	strh	r3, [r7, #14]
   uint32_t addrsel = 0;
 800713c:	2300      	movs	r3, #0
 800713e:	60bb      	str	r3, [r7, #8]
   
   if(len == 0) return;
 8007140:	88bb      	ldrh	r3, [r7, #4]
 8007142:	2b00      	cmp	r3, #0
 8007144:	d046      	beq.n	80071d4 <wiz_recv_data+0xac>
   ptr = getSn_RX_RD(sn);
 8007146:	79fb      	ldrb	r3, [r7, #7]
 8007148:	009b      	lsls	r3, r3, #2
 800714a:	3301      	adds	r3, #1
 800714c:	00db      	lsls	r3, r3, #3
 800714e:	f503 5320 	add.w	r3, r3, #10240	@ 0x2800
 8007152:	4618      	mov	r0, r3
 8007154:	f7ff fda2 	bl	8006c9c <WIZCHIP_READ>
 8007158:	4603      	mov	r3, r0
 800715a:	021b      	lsls	r3, r3, #8
 800715c:	b29c      	uxth	r4, r3
 800715e:	79fb      	ldrb	r3, [r7, #7]
 8007160:	009b      	lsls	r3, r3, #2
 8007162:	3301      	adds	r3, #1
 8007164:	00db      	lsls	r3, r3, #3
 8007166:	f503 5324 	add.w	r3, r3, #10496	@ 0x2900
 800716a:	4618      	mov	r0, r3
 800716c:	f7ff fd96 	bl	8006c9c <WIZCHIP_READ>
 8007170:	4603      	mov	r3, r0
 8007172:	4423      	add	r3, r4
 8007174:	81fb      	strh	r3, [r7, #14]
   //M20140501 : implict type casting -> explict type casting
   //addrsel = ((ptr << 8) + (WIZCHIP_RXBUF_BLOCK(sn) << 3);
   addrsel = ((uint32_t)ptr << 8) + (WIZCHIP_RXBUF_BLOCK(sn) << 3);
 8007176:	89fb      	ldrh	r3, [r7, #14]
 8007178:	021b      	lsls	r3, r3, #8
 800717a:	79fa      	ldrb	r2, [r7, #7]
 800717c:	0092      	lsls	r2, r2, #2
 800717e:	3203      	adds	r2, #3
 8007180:	00d2      	lsls	r2, r2, #3
 8007182:	4413      	add	r3, r2
 8007184:	60bb      	str	r3, [r7, #8]
   //
   WIZCHIP_READ_BUF(addrsel, wizdata, len);
 8007186:	88bb      	ldrh	r3, [r7, #4]
 8007188:	461a      	mov	r2, r3
 800718a:	6839      	ldr	r1, [r7, #0]
 800718c:	68b8      	ldr	r0, [r7, #8]
 800718e:	f7ff fe1f 	bl	8006dd0 <WIZCHIP_READ_BUF>
   ptr += len;
 8007192:	89fa      	ldrh	r2, [r7, #14]
 8007194:	88bb      	ldrh	r3, [r7, #4]
 8007196:	4413      	add	r3, r2
 8007198:	81fb      	strh	r3, [r7, #14]
   
   setSn_RX_RD(sn,ptr);
 800719a:	79fb      	ldrb	r3, [r7, #7]
 800719c:	009b      	lsls	r3, r3, #2
 800719e:	3301      	adds	r3, #1
 80071a0:	00db      	lsls	r3, r3, #3
 80071a2:	f503 5320 	add.w	r3, r3, #10240	@ 0x2800
 80071a6:	461a      	mov	r2, r3
 80071a8:	89fb      	ldrh	r3, [r7, #14]
 80071aa:	0a1b      	lsrs	r3, r3, #8
 80071ac:	b29b      	uxth	r3, r3
 80071ae:	b2db      	uxtb	r3, r3
 80071b0:	4619      	mov	r1, r3
 80071b2:	4610      	mov	r0, r2
 80071b4:	f7ff fdbe 	bl	8006d34 <WIZCHIP_WRITE>
 80071b8:	79fb      	ldrb	r3, [r7, #7]
 80071ba:	009b      	lsls	r3, r3, #2
 80071bc:	3301      	adds	r3, #1
 80071be:	00db      	lsls	r3, r3, #3
 80071c0:	f503 5324 	add.w	r3, r3, #10496	@ 0x2900
 80071c4:	461a      	mov	r2, r3
 80071c6:	89fb      	ldrh	r3, [r7, #14]
 80071c8:	b2db      	uxtb	r3, r3
 80071ca:	4619      	mov	r1, r3
 80071cc:	4610      	mov	r0, r2
 80071ce:	f7ff fdb1 	bl	8006d34 <WIZCHIP_WRITE>
 80071d2:	e000      	b.n	80071d6 <wiz_recv_data+0xae>
   if(len == 0) return;
 80071d4:	bf00      	nop
}
 80071d6:	3714      	adds	r7, #20
 80071d8:	46bd      	mov	sp, r7
 80071da:	bd90      	pop	{r4, r7, pc}

080071dc <wiz_recv_ignore>:


void wiz_recv_ignore(uint8_t sn, uint16_t len)
{
 80071dc:	b590      	push	{r4, r7, lr}
 80071de:	b085      	sub	sp, #20
 80071e0:	af00      	add	r7, sp, #0
 80071e2:	4603      	mov	r3, r0
 80071e4:	460a      	mov	r2, r1
 80071e6:	71fb      	strb	r3, [r7, #7]
 80071e8:	4613      	mov	r3, r2
 80071ea:	80bb      	strh	r3, [r7, #4]
   uint16_t ptr = 0;
 80071ec:	2300      	movs	r3, #0
 80071ee:	81fb      	strh	r3, [r7, #14]

   ptr = getSn_RX_RD(sn);
 80071f0:	79fb      	ldrb	r3, [r7, #7]
 80071f2:	009b      	lsls	r3, r3, #2
 80071f4:	3301      	adds	r3, #1
 80071f6:	00db      	lsls	r3, r3, #3
 80071f8:	f503 5320 	add.w	r3, r3, #10240	@ 0x2800
 80071fc:	4618      	mov	r0, r3
 80071fe:	f7ff fd4d 	bl	8006c9c <WIZCHIP_READ>
 8007202:	4603      	mov	r3, r0
 8007204:	021b      	lsls	r3, r3, #8
 8007206:	b29c      	uxth	r4, r3
 8007208:	79fb      	ldrb	r3, [r7, #7]
 800720a:	009b      	lsls	r3, r3, #2
 800720c:	3301      	adds	r3, #1
 800720e:	00db      	lsls	r3, r3, #3
 8007210:	f503 5324 	add.w	r3, r3, #10496	@ 0x2900
 8007214:	4618      	mov	r0, r3
 8007216:	f7ff fd41 	bl	8006c9c <WIZCHIP_READ>
 800721a:	4603      	mov	r3, r0
 800721c:	4423      	add	r3, r4
 800721e:	81fb      	strh	r3, [r7, #14]
   ptr += len;
 8007220:	89fa      	ldrh	r2, [r7, #14]
 8007222:	88bb      	ldrh	r3, [r7, #4]
 8007224:	4413      	add	r3, r2
 8007226:	81fb      	strh	r3, [r7, #14]
   setSn_RX_RD(sn,ptr);
 8007228:	79fb      	ldrb	r3, [r7, #7]
 800722a:	009b      	lsls	r3, r3, #2
 800722c:	3301      	adds	r3, #1
 800722e:	00db      	lsls	r3, r3, #3
 8007230:	f503 5320 	add.w	r3, r3, #10240	@ 0x2800
 8007234:	461a      	mov	r2, r3
 8007236:	89fb      	ldrh	r3, [r7, #14]
 8007238:	0a1b      	lsrs	r3, r3, #8
 800723a:	b29b      	uxth	r3, r3
 800723c:	b2db      	uxtb	r3, r3
 800723e:	4619      	mov	r1, r3
 8007240:	4610      	mov	r0, r2
 8007242:	f7ff fd77 	bl	8006d34 <WIZCHIP_WRITE>
 8007246:	79fb      	ldrb	r3, [r7, #7]
 8007248:	009b      	lsls	r3, r3, #2
 800724a:	3301      	adds	r3, #1
 800724c:	00db      	lsls	r3, r3, #3
 800724e:	f503 5324 	add.w	r3, r3, #10496	@ 0x2900
 8007252:	461a      	mov	r2, r3
 8007254:	89fb      	ldrh	r3, [r7, #14]
 8007256:	b2db      	uxtb	r3, r3
 8007258:	4619      	mov	r1, r3
 800725a:	4610      	mov	r0, r2
 800725c:	f7ff fd6a 	bl	8006d34 <WIZCHIP_WRITE>
}
 8007260:	bf00      	nop
 8007262:	3714      	adds	r7, #20
 8007264:	46bd      	mov	sp, r7
 8007266:	bd90      	pop	{r4, r7, pc}

08007268 <socket>:
   }while(0);              \



int8_t socket(uint8_t sn, uint8_t protocol, uint16_t port, uint8_t flag)
{
 8007268:	b590      	push	{r4, r7, lr}
 800726a:	b085      	sub	sp, #20
 800726c:	af00      	add	r7, sp, #0
 800726e:	4604      	mov	r4, r0
 8007270:	4608      	mov	r0, r1
 8007272:	4611      	mov	r1, r2
 8007274:	461a      	mov	r2, r3
 8007276:	4623      	mov	r3, r4
 8007278:	71fb      	strb	r3, [r7, #7]
 800727a:	4603      	mov	r3, r0
 800727c:	71bb      	strb	r3, [r7, #6]
 800727e:	460b      	mov	r3, r1
 8007280:	80bb      	strh	r3, [r7, #4]
 8007282:	4613      	mov	r3, r2
 8007284:	70fb      	strb	r3, [r7, #3]
	CHECK_SOCKNUM();
 8007286:	79fb      	ldrb	r3, [r7, #7]
 8007288:	2b08      	cmp	r3, #8
 800728a:	d902      	bls.n	8007292 <socket+0x2a>
 800728c:	f04f 33ff 	mov.w	r3, #4294967295
 8007290:	e0f0      	b.n	8007474 <socket+0x20c>
	switch(protocol)
 8007292:	79bb      	ldrb	r3, [r7, #6]
 8007294:	2b01      	cmp	r3, #1
 8007296:	d005      	beq.n	80072a4 <socket+0x3c>
 8007298:	2b00      	cmp	r3, #0
 800729a:	dd11      	ble.n	80072c0 <socket+0x58>
 800729c:	3b02      	subs	r3, #2
 800729e:	2b02      	cmp	r3, #2
 80072a0:	d80e      	bhi.n	80072c0 <socket+0x58>
	    break;
         }
      case Sn_MR_UDP :
      case Sn_MR_MACRAW :
	  case Sn_MR_IPRAW :
         break;
 80072a2:	e011      	b.n	80072c8 <socket+0x60>
            getSIPR((uint8_t*)&taddr);
 80072a4:	f107 030c 	add.w	r3, r7, #12
 80072a8:	2204      	movs	r2, #4
 80072aa:	4619      	mov	r1, r3
 80072ac:	f44f 6070 	mov.w	r0, #3840	@ 0xf00
 80072b0:	f7ff fd8e 	bl	8006dd0 <WIZCHIP_READ_BUF>
            if(taddr == 0) return SOCKERR_SOCKINIT;
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d105      	bne.n	80072c6 <socket+0x5e>
 80072ba:	f06f 0302 	mvn.w	r3, #2
 80072be:	e0d9      	b.n	8007474 <socket+0x20c>
   #if ( _WIZCHIP_ < 5200 )
      case Sn_MR_PPPoE :
         break;
   #endif
      default :
         return SOCKERR_SOCKMODE;
 80072c0:	f06f 0304 	mvn.w	r3, #4
 80072c4:	e0d6      	b.n	8007474 <socket+0x20c>
	    break;
 80072c6:	bf00      	nop
	}
	//M20150601 : For SF_TCP_ALIGN & W5300
	//if((flag & 0x06) != 0) return SOCKERR_SOCKFLAG;
	if((flag & 0x04) != 0) return SOCKERR_SOCKFLAG;
 80072c8:	78fb      	ldrb	r3, [r7, #3]
 80072ca:	f003 0304 	and.w	r3, r3, #4
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d002      	beq.n	80072d8 <socket+0x70>
 80072d2:	f06f 0305 	mvn.w	r3, #5
 80072d6:	e0cd      	b.n	8007474 <socket+0x20c>
#if _WIZCHIP_ == 5200
   if(flag & 0x10) return SOCKERR_SOCKFLAG;
#endif
	   
	if(flag != 0)
 80072d8:	78fb      	ldrb	r3, [r7, #3]
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d028      	beq.n	8007330 <socket+0xc8>
	{
   	switch(protocol)
 80072de:	79bb      	ldrb	r3, [r7, #6]
 80072e0:	2b01      	cmp	r3, #1
 80072e2:	d002      	beq.n	80072ea <socket+0x82>
 80072e4:	2b02      	cmp	r3, #2
 80072e6:	d008      	beq.n	80072fa <socket+0x92>
      	         if((flag & SF_MULTI_ENABLE) == 0) return SOCKERR_SOCKFLAG;
      	      }
   	      #endif
   	      break;
   	   default:
   	      break;
 80072e8:	e022      	b.n	8007330 <socket+0xc8>
   		     if((flag & (SF_TCP_NODELAY|SF_IO_NONBLOCK))==0) return SOCKERR_SOCKFLAG;
 80072ea:	78fb      	ldrb	r3, [r7, #3]
 80072ec:	f003 0321 	and.w	r3, r3, #33	@ 0x21
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d11a      	bne.n	800732a <socket+0xc2>
 80072f4:	f06f 0305 	mvn.w	r3, #5
 80072f8:	e0bc      	b.n	8007474 <socket+0x20c>
   	      if(flag & SF_IGMP_VER2)
 80072fa:	78fb      	ldrb	r3, [r7, #3]
 80072fc:	f003 0320 	and.w	r3, r3, #32
 8007300:	2b00      	cmp	r3, #0
 8007302:	d006      	beq.n	8007312 <socket+0xaa>
   	         if((flag & SF_MULTI_ENABLE)==0) return SOCKERR_SOCKFLAG;
 8007304:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007308:	2b00      	cmp	r3, #0
 800730a:	db02      	blt.n	8007312 <socket+0xaa>
 800730c:	f06f 0305 	mvn.w	r3, #5
 8007310:	e0b0      	b.n	8007474 <socket+0x20c>
      	      if(flag & SF_UNI_BLOCK)
 8007312:	78fb      	ldrb	r3, [r7, #3]
 8007314:	f003 0310 	and.w	r3, r3, #16
 8007318:	2b00      	cmp	r3, #0
 800731a:	d008      	beq.n	800732e <socket+0xc6>
      	         if((flag & SF_MULTI_ENABLE) == 0) return SOCKERR_SOCKFLAG;
 800731c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007320:	2b00      	cmp	r3, #0
 8007322:	db04      	blt.n	800732e <socket+0xc6>
 8007324:	f06f 0305 	mvn.w	r3, #5
 8007328:	e0a4      	b.n	8007474 <socket+0x20c>
   	      break;
 800732a:	bf00      	nop
 800732c:	e000      	b.n	8007330 <socket+0xc8>
   	      break;
 800732e:	bf00      	nop
   	}
   }
	close(sn);
 8007330:	79fb      	ldrb	r3, [r7, #7]
 8007332:	4618      	mov	r0, r3
 8007334:	f000 f8ac 	bl	8007490 <close>
	//M20150601
	#if _WIZCHIP_ == 5300
	   setSn_MR(sn, ((uint16_t)(protocol | (flag & 0xF0))) | (((uint16_t)(flag & 0x02)) << 7) );
    #else
	   setSn_MR(sn, (protocol | (flag & 0xF0)));
 8007338:	79fb      	ldrb	r3, [r7, #7]
 800733a:	009b      	lsls	r3, r3, #2
 800733c:	3301      	adds	r3, #1
 800733e:	00db      	lsls	r3, r3, #3
 8007340:	4618      	mov	r0, r3
 8007342:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007346:	f023 030f 	bic.w	r3, r3, #15
 800734a:	b25a      	sxtb	r2, r3
 800734c:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8007350:	4313      	orrs	r3, r2
 8007352:	b25b      	sxtb	r3, r3
 8007354:	b2db      	uxtb	r3, r3
 8007356:	4619      	mov	r1, r3
 8007358:	f7ff fcec 	bl	8006d34 <WIZCHIP_WRITE>
    #endif
	if(!port)
 800735c:	88bb      	ldrh	r3, [r7, #4]
 800735e:	2b00      	cmp	r3, #0
 8007360:	d110      	bne.n	8007384 <socket+0x11c>
	{
	   port = sock_any_port++;
 8007362:	4b46      	ldr	r3, [pc, #280]	@ (800747c <socket+0x214>)
 8007364:	881b      	ldrh	r3, [r3, #0]
 8007366:	1c5a      	adds	r2, r3, #1
 8007368:	b291      	uxth	r1, r2
 800736a:	4a44      	ldr	r2, [pc, #272]	@ (800747c <socket+0x214>)
 800736c:	8011      	strh	r1, [r2, #0]
 800736e:	80bb      	strh	r3, [r7, #4]
	   if(sock_any_port == 0xFFF0) sock_any_port = SOCK_ANY_PORT_NUM;
 8007370:	4b42      	ldr	r3, [pc, #264]	@ (800747c <socket+0x214>)
 8007372:	881b      	ldrh	r3, [r3, #0]
 8007374:	f64f 72f0 	movw	r2, #65520	@ 0xfff0
 8007378:	4293      	cmp	r3, r2
 800737a:	d103      	bne.n	8007384 <socket+0x11c>
 800737c:	4b3f      	ldr	r3, [pc, #252]	@ (800747c <socket+0x214>)
 800737e:	f44f 4240 	mov.w	r2, #49152	@ 0xc000
 8007382:	801a      	strh	r2, [r3, #0]
	}
   setSn_PORT(sn,port);	
 8007384:	79fb      	ldrb	r3, [r7, #7]
 8007386:	009b      	lsls	r3, r3, #2
 8007388:	3301      	adds	r3, #1
 800738a:	00db      	lsls	r3, r3, #3
 800738c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007390:	461a      	mov	r2, r3
 8007392:	88bb      	ldrh	r3, [r7, #4]
 8007394:	0a1b      	lsrs	r3, r3, #8
 8007396:	b29b      	uxth	r3, r3
 8007398:	b2db      	uxtb	r3, r3
 800739a:	4619      	mov	r1, r3
 800739c:	4610      	mov	r0, r2
 800739e:	f7ff fcc9 	bl	8006d34 <WIZCHIP_WRITE>
 80073a2:	79fb      	ldrb	r3, [r7, #7]
 80073a4:	009b      	lsls	r3, r3, #2
 80073a6:	3301      	adds	r3, #1
 80073a8:	00db      	lsls	r3, r3, #3
 80073aa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80073ae:	461a      	mov	r2, r3
 80073b0:	88bb      	ldrh	r3, [r7, #4]
 80073b2:	b2db      	uxtb	r3, r3
 80073b4:	4619      	mov	r1, r3
 80073b6:	4610      	mov	r0, r2
 80073b8:	f7ff fcbc 	bl	8006d34 <WIZCHIP_WRITE>
   setSn_CR(sn,Sn_CR_OPEN);
 80073bc:	79fb      	ldrb	r3, [r7, #7]
 80073be:	009b      	lsls	r3, r3, #2
 80073c0:	3301      	adds	r3, #1
 80073c2:	00db      	lsls	r3, r3, #3
 80073c4:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80073c8:	2101      	movs	r1, #1
 80073ca:	4618      	mov	r0, r3
 80073cc:	f7ff fcb2 	bl	8006d34 <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 80073d0:	bf00      	nop
 80073d2:	79fb      	ldrb	r3, [r7, #7]
 80073d4:	009b      	lsls	r3, r3, #2
 80073d6:	3301      	adds	r3, #1
 80073d8:	00db      	lsls	r3, r3, #3
 80073da:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80073de:	4618      	mov	r0, r3
 80073e0:	f7ff fc5c 	bl	8006c9c <WIZCHIP_READ>
 80073e4:	4603      	mov	r3, r0
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d1f3      	bne.n	80073d2 <socket+0x16a>
   //A20150401 : For release the previous sock_io_mode
   sock_io_mode &= ~(1 <<sn);
 80073ea:	79fb      	ldrb	r3, [r7, #7]
 80073ec:	2201      	movs	r2, #1
 80073ee:	fa02 f303 	lsl.w	r3, r2, r3
 80073f2:	b21b      	sxth	r3, r3
 80073f4:	43db      	mvns	r3, r3
 80073f6:	b21a      	sxth	r2, r3
 80073f8:	4b21      	ldr	r3, [pc, #132]	@ (8007480 <socket+0x218>)
 80073fa:	881b      	ldrh	r3, [r3, #0]
 80073fc:	b21b      	sxth	r3, r3
 80073fe:	4013      	ands	r3, r2
 8007400:	b21b      	sxth	r3, r3
 8007402:	b29a      	uxth	r2, r3
 8007404:	4b1e      	ldr	r3, [pc, #120]	@ (8007480 <socket+0x218>)
 8007406:	801a      	strh	r2, [r3, #0]
   //
	sock_io_mode |= ((flag & SF_IO_NONBLOCK) << sn);   
 8007408:	78fb      	ldrb	r3, [r7, #3]
 800740a:	f003 0201 	and.w	r2, r3, #1
 800740e:	79fb      	ldrb	r3, [r7, #7]
 8007410:	fa02 f303 	lsl.w	r3, r2, r3
 8007414:	b21a      	sxth	r2, r3
 8007416:	4b1a      	ldr	r3, [pc, #104]	@ (8007480 <socket+0x218>)
 8007418:	881b      	ldrh	r3, [r3, #0]
 800741a:	b21b      	sxth	r3, r3
 800741c:	4313      	orrs	r3, r2
 800741e:	b21b      	sxth	r3, r3
 8007420:	b29a      	uxth	r2, r3
 8007422:	4b17      	ldr	r3, [pc, #92]	@ (8007480 <socket+0x218>)
 8007424:	801a      	strh	r2, [r3, #0]
   sock_is_sending &= ~(1<<sn);
 8007426:	79fb      	ldrb	r3, [r7, #7]
 8007428:	2201      	movs	r2, #1
 800742a:	fa02 f303 	lsl.w	r3, r2, r3
 800742e:	b21b      	sxth	r3, r3
 8007430:	43db      	mvns	r3, r3
 8007432:	b21a      	sxth	r2, r3
 8007434:	4b13      	ldr	r3, [pc, #76]	@ (8007484 <socket+0x21c>)
 8007436:	881b      	ldrh	r3, [r3, #0]
 8007438:	b21b      	sxth	r3, r3
 800743a:	4013      	ands	r3, r2
 800743c:	b21b      	sxth	r3, r3
 800743e:	b29a      	uxth	r2, r3
 8007440:	4b10      	ldr	r3, [pc, #64]	@ (8007484 <socket+0x21c>)
 8007442:	801a      	strh	r2, [r3, #0]
   sock_remained_size[sn] = 0;
 8007444:	79fb      	ldrb	r3, [r7, #7]
 8007446:	4a10      	ldr	r2, [pc, #64]	@ (8007488 <socket+0x220>)
 8007448:	2100      	movs	r1, #0
 800744a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   //M20150601 : repalce 0 with PACK_COMPLETED
   //sock_pack_info[sn] = 0;
   sock_pack_info[sn] = PACK_COMPLETED;
 800744e:	79fb      	ldrb	r3, [r7, #7]
 8007450:	4a0e      	ldr	r2, [pc, #56]	@ (800748c <socket+0x224>)
 8007452:	2100      	movs	r1, #0
 8007454:	54d1      	strb	r1, [r2, r3]
   //
   while(getSn_SR(sn) == SOCK_CLOSED);
 8007456:	bf00      	nop
 8007458:	79fb      	ldrb	r3, [r7, #7]
 800745a:	009b      	lsls	r3, r3, #2
 800745c:	3301      	adds	r3, #1
 800745e:	00db      	lsls	r3, r3, #3
 8007460:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8007464:	4618      	mov	r0, r3
 8007466:	f7ff fc19 	bl	8006c9c <WIZCHIP_READ>
 800746a:	4603      	mov	r3, r0
 800746c:	2b00      	cmp	r3, #0
 800746e:	d0f3      	beq.n	8007458 <socket+0x1f0>
   return (int8_t)sn;
 8007470:	f997 3007 	ldrsb.w	r3, [r7, #7]
}	   
 8007474:	4618      	mov	r0, r3
 8007476:	3714      	adds	r7, #20
 8007478:	46bd      	mov	sp, r7
 800747a:	bd90      	pop	{r4, r7, pc}
 800747c:	200000b0 	.word	0x200000b0
 8007480:	20000f98 	.word	0x20000f98
 8007484:	20000f9a 	.word	0x20000f9a
 8007488:	20000f9c 	.word	0x20000f9c
 800748c:	20000fac 	.word	0x20000fac

08007490 <close>:

int8_t close(uint8_t sn)
{
 8007490:	b580      	push	{r7, lr}
 8007492:	b082      	sub	sp, #8
 8007494:	af00      	add	r7, sp, #0
 8007496:	4603      	mov	r3, r0
 8007498:	71fb      	strb	r3, [r7, #7]
	CHECK_SOCKNUM();
 800749a:	79fb      	ldrb	r3, [r7, #7]
 800749c:	2b08      	cmp	r3, #8
 800749e:	d902      	bls.n	80074a6 <close+0x16>
 80074a0:	f04f 33ff 	mov.w	r3, #4294967295
 80074a4:	e055      	b.n	8007552 <close+0xc2>
      while(getSn_CR(sn) != 0);
      while(getSn_SR(sn) != SOCK_UDP);
      sendto(sn,destip,1,destip,0x3000); // send the dummy data to an unknown destination(0.0.0.1).
   };   
#endif 
	setSn_CR(sn,Sn_CR_CLOSE);
 80074a6:	79fb      	ldrb	r3, [r7, #7]
 80074a8:	009b      	lsls	r3, r3, #2
 80074aa:	3301      	adds	r3, #1
 80074ac:	00db      	lsls	r3, r3, #3
 80074ae:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80074b2:	2110      	movs	r1, #16
 80074b4:	4618      	mov	r0, r3
 80074b6:	f7ff fc3d 	bl	8006d34 <WIZCHIP_WRITE>
   /* wait to process the command... */
	while( getSn_CR(sn) );
 80074ba:	bf00      	nop
 80074bc:	79fb      	ldrb	r3, [r7, #7]
 80074be:	009b      	lsls	r3, r3, #2
 80074c0:	3301      	adds	r3, #1
 80074c2:	00db      	lsls	r3, r3, #3
 80074c4:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80074c8:	4618      	mov	r0, r3
 80074ca:	f7ff fbe7 	bl	8006c9c <WIZCHIP_READ>
 80074ce:	4603      	mov	r3, r0
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d1f3      	bne.n	80074bc <close+0x2c>
	/* clear all interrupt of the socket. */
	setSn_IR(sn, 0xFF);
 80074d4:	79fb      	ldrb	r3, [r7, #7]
 80074d6:	009b      	lsls	r3, r3, #2
 80074d8:	3301      	adds	r3, #1
 80074da:	00db      	lsls	r3, r3, #3
 80074dc:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 80074e0:	211f      	movs	r1, #31
 80074e2:	4618      	mov	r0, r3
 80074e4:	f7ff fc26 	bl	8006d34 <WIZCHIP_WRITE>
	//A20150401 : Release the sock_io_mode of socket n.
	sock_io_mode &= ~(1<<sn);
 80074e8:	79fb      	ldrb	r3, [r7, #7]
 80074ea:	2201      	movs	r2, #1
 80074ec:	fa02 f303 	lsl.w	r3, r2, r3
 80074f0:	b21b      	sxth	r3, r3
 80074f2:	43db      	mvns	r3, r3
 80074f4:	b21a      	sxth	r2, r3
 80074f6:	4b19      	ldr	r3, [pc, #100]	@ (800755c <close+0xcc>)
 80074f8:	881b      	ldrh	r3, [r3, #0]
 80074fa:	b21b      	sxth	r3, r3
 80074fc:	4013      	ands	r3, r2
 80074fe:	b21b      	sxth	r3, r3
 8007500:	b29a      	uxth	r2, r3
 8007502:	4b16      	ldr	r3, [pc, #88]	@ (800755c <close+0xcc>)
 8007504:	801a      	strh	r2, [r3, #0]
	//
	sock_is_sending &= ~(1<<sn);
 8007506:	79fb      	ldrb	r3, [r7, #7]
 8007508:	2201      	movs	r2, #1
 800750a:	fa02 f303 	lsl.w	r3, r2, r3
 800750e:	b21b      	sxth	r3, r3
 8007510:	43db      	mvns	r3, r3
 8007512:	b21a      	sxth	r2, r3
 8007514:	4b12      	ldr	r3, [pc, #72]	@ (8007560 <close+0xd0>)
 8007516:	881b      	ldrh	r3, [r3, #0]
 8007518:	b21b      	sxth	r3, r3
 800751a:	4013      	ands	r3, r2
 800751c:	b21b      	sxth	r3, r3
 800751e:	b29a      	uxth	r2, r3
 8007520:	4b0f      	ldr	r3, [pc, #60]	@ (8007560 <close+0xd0>)
 8007522:	801a      	strh	r2, [r3, #0]
	sock_remained_size[sn] = 0;
 8007524:	79fb      	ldrb	r3, [r7, #7]
 8007526:	4a0f      	ldr	r2, [pc, #60]	@ (8007564 <close+0xd4>)
 8007528:	2100      	movs	r1, #0
 800752a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	sock_pack_info[sn] = 0;
 800752e:	79fb      	ldrb	r3, [r7, #7]
 8007530:	4a0d      	ldr	r2, [pc, #52]	@ (8007568 <close+0xd8>)
 8007532:	2100      	movs	r1, #0
 8007534:	54d1      	strb	r1, [r2, r3]
	while(getSn_SR(sn) != SOCK_CLOSED);
 8007536:	bf00      	nop
 8007538:	79fb      	ldrb	r3, [r7, #7]
 800753a:	009b      	lsls	r3, r3, #2
 800753c:	3301      	adds	r3, #1
 800753e:	00db      	lsls	r3, r3, #3
 8007540:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8007544:	4618      	mov	r0, r3
 8007546:	f7ff fba9 	bl	8006c9c <WIZCHIP_READ>
 800754a:	4603      	mov	r3, r0
 800754c:	2b00      	cmp	r3, #0
 800754e:	d1f3      	bne.n	8007538 <close+0xa8>
	return SOCK_OK;
 8007550:	2301      	movs	r3, #1
}
 8007552:	4618      	mov	r0, r3
 8007554:	3708      	adds	r7, #8
 8007556:	46bd      	mov	sp, r7
 8007558:	bd80      	pop	{r7, pc}
 800755a:	bf00      	nop
 800755c:	20000f98 	.word	0x20000f98
 8007560:	20000f9a 	.word	0x20000f9a
 8007564:	20000f9c 	.word	0x20000f9c
 8007568:	20000fac 	.word	0x20000fac

0800756c <connect>:
   return SOCK_OK;
}


int8_t connect(uint8_t sn, uint8_t * addr, uint16_t port)
{
 800756c:	b580      	push	{r7, lr}
 800756e:	b084      	sub	sp, #16
 8007570:	af00      	add	r7, sp, #0
 8007572:	4603      	mov	r3, r0
 8007574:	6039      	str	r1, [r7, #0]
 8007576:	71fb      	strb	r3, [r7, #7]
 8007578:	4613      	mov	r3, r2
 800757a:	80bb      	strh	r3, [r7, #4]
   CHECK_SOCKNUM();
 800757c:	79fb      	ldrb	r3, [r7, #7]
 800757e:	2b08      	cmp	r3, #8
 8007580:	d902      	bls.n	8007588 <connect+0x1c>
 8007582:	f04f 33ff 	mov.w	r3, #4294967295
 8007586:	e0c6      	b.n	8007716 <connect+0x1aa>
   CHECK_SOCKMODE(Sn_MR_TCP);
 8007588:	79fb      	ldrb	r3, [r7, #7]
 800758a:	009b      	lsls	r3, r3, #2
 800758c:	3301      	adds	r3, #1
 800758e:	00db      	lsls	r3, r3, #3
 8007590:	4618      	mov	r0, r3
 8007592:	f7ff fb83 	bl	8006c9c <WIZCHIP_READ>
 8007596:	4603      	mov	r3, r0
 8007598:	f003 030f 	and.w	r3, r3, #15
 800759c:	2b01      	cmp	r3, #1
 800759e:	d002      	beq.n	80075a6 <connect+0x3a>
 80075a0:	f06f 0304 	mvn.w	r3, #4
 80075a4:	e0b7      	b.n	8007716 <connect+0x1aa>
   CHECK_SOCKINIT();
 80075a6:	79fb      	ldrb	r3, [r7, #7]
 80075a8:	009b      	lsls	r3, r3, #2
 80075aa:	3301      	adds	r3, #1
 80075ac:	00db      	lsls	r3, r3, #3
 80075ae:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 80075b2:	4618      	mov	r0, r3
 80075b4:	f7ff fb72 	bl	8006c9c <WIZCHIP_READ>
 80075b8:	4603      	mov	r3, r0
 80075ba:	2b13      	cmp	r3, #19
 80075bc:	d002      	beq.n	80075c4 <connect+0x58>
 80075be:	f06f 0302 	mvn.w	r3, #2
 80075c2:	e0a8      	b.n	8007716 <connect+0x1aa>
   //M20140501 : For avoiding fatal error on memory align mismatched
   //if( *((uint32_t*)addr) == 0xFFFFFFFF || *((uint32_t*)addr) == 0) return SOCKERR_IPINVALID;
   {
      uint32_t taddr;
      taddr = ((uint32_t)addr[0] & 0x000000FF);
 80075c4:	683b      	ldr	r3, [r7, #0]
 80075c6:	781b      	ldrb	r3, [r3, #0]
 80075c8:	60fb      	str	r3, [r7, #12]
      taddr = (taddr << 8) + ((uint32_t)addr[1] & 0x000000FF);
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	021b      	lsls	r3, r3, #8
 80075ce:	683a      	ldr	r2, [r7, #0]
 80075d0:	3201      	adds	r2, #1
 80075d2:	7812      	ldrb	r2, [r2, #0]
 80075d4:	4413      	add	r3, r2
 80075d6:	60fb      	str	r3, [r7, #12]
      taddr = (taddr << 8) + ((uint32_t)addr[2] & 0x000000FF);
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	021b      	lsls	r3, r3, #8
 80075dc:	683a      	ldr	r2, [r7, #0]
 80075de:	3202      	adds	r2, #2
 80075e0:	7812      	ldrb	r2, [r2, #0]
 80075e2:	4413      	add	r3, r2
 80075e4:	60fb      	str	r3, [r7, #12]
      taddr = (taddr << 8) + ((uint32_t)addr[3] & 0x000000FF);
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	021b      	lsls	r3, r3, #8
 80075ea:	683a      	ldr	r2, [r7, #0]
 80075ec:	3203      	adds	r2, #3
 80075ee:	7812      	ldrb	r2, [r2, #0]
 80075f0:	4413      	add	r3, r2
 80075f2:	60fb      	str	r3, [r7, #12]
      if( taddr == 0xFFFFFFFF || taddr == 0) return SOCKERR_IPINVALID;
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80075fa:	d002      	beq.n	8007602 <connect+0x96>
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d102      	bne.n	8007608 <connect+0x9c>
 8007602:	f06f 030b 	mvn.w	r3, #11
 8007606:	e086      	b.n	8007716 <connect+0x1aa>
   }
   //
	
	if(port == 0) return SOCKERR_PORTZERO;
 8007608:	88bb      	ldrh	r3, [r7, #4]
 800760a:	2b00      	cmp	r3, #0
 800760c:	d102      	bne.n	8007614 <connect+0xa8>
 800760e:	f06f 030a 	mvn.w	r3, #10
 8007612:	e080      	b.n	8007716 <connect+0x1aa>
	setSn_DIPR(sn,addr);
 8007614:	79fb      	ldrb	r3, [r7, #7]
 8007616:	009b      	lsls	r3, r3, #2
 8007618:	3301      	adds	r3, #1
 800761a:	00db      	lsls	r3, r3, #3
 800761c:	f503 6340 	add.w	r3, r3, #3072	@ 0xc00
 8007620:	2204      	movs	r2, #4
 8007622:	6839      	ldr	r1, [r7, #0]
 8007624:	4618      	mov	r0, r3
 8007626:	f7ff fc33 	bl	8006e90 <WIZCHIP_WRITE_BUF>
	setSn_DPORT(sn,port);
 800762a:	79fb      	ldrb	r3, [r7, #7]
 800762c:	009b      	lsls	r3, r3, #2
 800762e:	3301      	adds	r3, #1
 8007630:	00db      	lsls	r3, r3, #3
 8007632:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007636:	461a      	mov	r2, r3
 8007638:	88bb      	ldrh	r3, [r7, #4]
 800763a:	0a1b      	lsrs	r3, r3, #8
 800763c:	b29b      	uxth	r3, r3
 800763e:	b2db      	uxtb	r3, r3
 8007640:	4619      	mov	r1, r3
 8007642:	4610      	mov	r0, r2
 8007644:	f7ff fb76 	bl	8006d34 <WIZCHIP_WRITE>
 8007648:	79fb      	ldrb	r3, [r7, #7]
 800764a:	009b      	lsls	r3, r3, #2
 800764c:	3301      	adds	r3, #1
 800764e:	00db      	lsls	r3, r3, #3
 8007650:	f503 5388 	add.w	r3, r3, #4352	@ 0x1100
 8007654:	461a      	mov	r2, r3
 8007656:	88bb      	ldrh	r3, [r7, #4]
 8007658:	b2db      	uxtb	r3, r3
 800765a:	4619      	mov	r1, r3
 800765c:	4610      	mov	r0, r2
 800765e:	f7ff fb69 	bl	8006d34 <WIZCHIP_WRITE>
	setSn_CR(sn,Sn_CR_CONNECT);
 8007662:	79fb      	ldrb	r3, [r7, #7]
 8007664:	009b      	lsls	r3, r3, #2
 8007666:	3301      	adds	r3, #1
 8007668:	00db      	lsls	r3, r3, #3
 800766a:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 800766e:	2104      	movs	r1, #4
 8007670:	4618      	mov	r0, r3
 8007672:	f7ff fb5f 	bl	8006d34 <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 8007676:	bf00      	nop
 8007678:	79fb      	ldrb	r3, [r7, #7]
 800767a:	009b      	lsls	r3, r3, #2
 800767c:	3301      	adds	r3, #1
 800767e:	00db      	lsls	r3, r3, #3
 8007680:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8007684:	4618      	mov	r0, r3
 8007686:	f7ff fb09 	bl	8006c9c <WIZCHIP_READ>
 800768a:	4603      	mov	r3, r0
 800768c:	2b00      	cmp	r3, #0
 800768e:	d1f3      	bne.n	8007678 <connect+0x10c>
   if(sock_io_mode & (1<<sn)) return SOCK_BUSY;
 8007690:	4b23      	ldr	r3, [pc, #140]	@ (8007720 <connect+0x1b4>)
 8007692:	881b      	ldrh	r3, [r3, #0]
 8007694:	461a      	mov	r2, r3
 8007696:	79fb      	ldrb	r3, [r7, #7]
 8007698:	fa42 f303 	asr.w	r3, r2, r3
 800769c:	f003 0301 	and.w	r3, r3, #1
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d02b      	beq.n	80076fc <connect+0x190>
 80076a4:	2300      	movs	r3, #0
 80076a6:	e036      	b.n	8007716 <connect+0x1aa>
   while(getSn_SR(sn) != SOCK_ESTABLISHED)
   {
		if (getSn_IR(sn) & Sn_IR_TIMEOUT)
 80076a8:	79fb      	ldrb	r3, [r7, #7]
 80076aa:	009b      	lsls	r3, r3, #2
 80076ac:	3301      	adds	r3, #1
 80076ae:	00db      	lsls	r3, r3, #3
 80076b0:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 80076b4:	4618      	mov	r0, r3
 80076b6:	f7ff faf1 	bl	8006c9c <WIZCHIP_READ>
 80076ba:	4603      	mov	r3, r0
 80076bc:	f003 0308 	and.w	r3, r3, #8
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d00c      	beq.n	80076de <connect+0x172>
		{
			setSn_IR(sn, Sn_IR_TIMEOUT);
 80076c4:	79fb      	ldrb	r3, [r7, #7]
 80076c6:	009b      	lsls	r3, r3, #2
 80076c8:	3301      	adds	r3, #1
 80076ca:	00db      	lsls	r3, r3, #3
 80076cc:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 80076d0:	2108      	movs	r1, #8
 80076d2:	4618      	mov	r0, r3
 80076d4:	f7ff fb2e 	bl	8006d34 <WIZCHIP_WRITE>
            return SOCKERR_TIMEOUT;
 80076d8:	f06f 030c 	mvn.w	r3, #12
 80076dc:	e01b      	b.n	8007716 <connect+0x1aa>
		}

		if (getSn_SR(sn) == SOCK_CLOSED)
 80076de:	79fb      	ldrb	r3, [r7, #7]
 80076e0:	009b      	lsls	r3, r3, #2
 80076e2:	3301      	adds	r3, #1
 80076e4:	00db      	lsls	r3, r3, #3
 80076e6:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 80076ea:	4618      	mov	r0, r3
 80076ec:	f7ff fad6 	bl	8006c9c <WIZCHIP_READ>
 80076f0:	4603      	mov	r3, r0
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d102      	bne.n	80076fc <connect+0x190>
		{
			return SOCKERR_SOCKCLOSED;
 80076f6:	f06f 0303 	mvn.w	r3, #3
 80076fa:	e00c      	b.n	8007716 <connect+0x1aa>
   while(getSn_SR(sn) != SOCK_ESTABLISHED)
 80076fc:	79fb      	ldrb	r3, [r7, #7]
 80076fe:	009b      	lsls	r3, r3, #2
 8007700:	3301      	adds	r3, #1
 8007702:	00db      	lsls	r3, r3, #3
 8007704:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8007708:	4618      	mov	r0, r3
 800770a:	f7ff fac7 	bl	8006c9c <WIZCHIP_READ>
 800770e:	4603      	mov	r3, r0
 8007710:	2b17      	cmp	r3, #23
 8007712:	d1c9      	bne.n	80076a8 <connect+0x13c>
		}
	}
   
   return SOCK_OK;
 8007714:	2301      	movs	r3, #1
}
 8007716:	4618      	mov	r0, r3
 8007718:	3710      	adds	r7, #16
 800771a:	46bd      	mov	sp, r7
 800771c:	bd80      	pop	{r7, pc}
 800771e:	bf00      	nop
 8007720:	20000f98 	.word	0x20000f98

08007724 <disconnect>:

int8_t disconnect(uint8_t sn)
{
 8007724:	b580      	push	{r7, lr}
 8007726:	b082      	sub	sp, #8
 8007728:	af00      	add	r7, sp, #0
 800772a:	4603      	mov	r3, r0
 800772c:	71fb      	strb	r3, [r7, #7]
   CHECK_SOCKNUM();
 800772e:	79fb      	ldrb	r3, [r7, #7]
 8007730:	2b08      	cmp	r3, #8
 8007732:	d902      	bls.n	800773a <disconnect+0x16>
 8007734:	f04f 33ff 	mov.w	r3, #4294967295
 8007738:	e062      	b.n	8007800 <disconnect+0xdc>
   CHECK_SOCKMODE(Sn_MR_TCP);
 800773a:	79fb      	ldrb	r3, [r7, #7]
 800773c:	009b      	lsls	r3, r3, #2
 800773e:	3301      	adds	r3, #1
 8007740:	00db      	lsls	r3, r3, #3
 8007742:	4618      	mov	r0, r3
 8007744:	f7ff faaa 	bl	8006c9c <WIZCHIP_READ>
 8007748:	4603      	mov	r3, r0
 800774a:	f003 030f 	and.w	r3, r3, #15
 800774e:	2b01      	cmp	r3, #1
 8007750:	d002      	beq.n	8007758 <disconnect+0x34>
 8007752:	f06f 0304 	mvn.w	r3, #4
 8007756:	e053      	b.n	8007800 <disconnect+0xdc>
	setSn_CR(sn,Sn_CR_DISCON);
 8007758:	79fb      	ldrb	r3, [r7, #7]
 800775a:	009b      	lsls	r3, r3, #2
 800775c:	3301      	adds	r3, #1
 800775e:	00db      	lsls	r3, r3, #3
 8007760:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8007764:	2108      	movs	r1, #8
 8007766:	4618      	mov	r0, r3
 8007768:	f7ff fae4 	bl	8006d34 <WIZCHIP_WRITE>
	/* wait to process the command... */
	while(getSn_CR(sn));
 800776c:	bf00      	nop
 800776e:	79fb      	ldrb	r3, [r7, #7]
 8007770:	009b      	lsls	r3, r3, #2
 8007772:	3301      	adds	r3, #1
 8007774:	00db      	lsls	r3, r3, #3
 8007776:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 800777a:	4618      	mov	r0, r3
 800777c:	f7ff fa8e 	bl	8006c9c <WIZCHIP_READ>
 8007780:	4603      	mov	r3, r0
 8007782:	2b00      	cmp	r3, #0
 8007784:	d1f3      	bne.n	800776e <disconnect+0x4a>
	sock_is_sending &= ~(1<<sn);
 8007786:	79fb      	ldrb	r3, [r7, #7]
 8007788:	2201      	movs	r2, #1
 800778a:	fa02 f303 	lsl.w	r3, r2, r3
 800778e:	b21b      	sxth	r3, r3
 8007790:	43db      	mvns	r3, r3
 8007792:	b21a      	sxth	r2, r3
 8007794:	4b1c      	ldr	r3, [pc, #112]	@ (8007808 <disconnect+0xe4>)
 8007796:	881b      	ldrh	r3, [r3, #0]
 8007798:	b21b      	sxth	r3, r3
 800779a:	4013      	ands	r3, r2
 800779c:	b21b      	sxth	r3, r3
 800779e:	b29a      	uxth	r2, r3
 80077a0:	4b19      	ldr	r3, [pc, #100]	@ (8007808 <disconnect+0xe4>)
 80077a2:	801a      	strh	r2, [r3, #0]
   if(sock_io_mode & (1<<sn)) return SOCK_BUSY;
 80077a4:	4b19      	ldr	r3, [pc, #100]	@ (800780c <disconnect+0xe8>)
 80077a6:	881b      	ldrh	r3, [r3, #0]
 80077a8:	461a      	mov	r2, r3
 80077aa:	79fb      	ldrb	r3, [r7, #7]
 80077ac:	fa42 f303 	asr.w	r3, r2, r3
 80077b0:	f003 0301 	and.w	r3, r3, #1
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d016      	beq.n	80077e6 <disconnect+0xc2>
 80077b8:	2300      	movs	r3, #0
 80077ba:	e021      	b.n	8007800 <disconnect+0xdc>
	while(getSn_SR(sn) != SOCK_CLOSED)
	{
	   if(getSn_IR(sn) & Sn_IR_TIMEOUT)
 80077bc:	79fb      	ldrb	r3, [r7, #7]
 80077be:	009b      	lsls	r3, r3, #2
 80077c0:	3301      	adds	r3, #1
 80077c2:	00db      	lsls	r3, r3, #3
 80077c4:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 80077c8:	4618      	mov	r0, r3
 80077ca:	f7ff fa67 	bl	8006c9c <WIZCHIP_READ>
 80077ce:	4603      	mov	r3, r0
 80077d0:	f003 0308 	and.w	r3, r3, #8
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d006      	beq.n	80077e6 <disconnect+0xc2>
	   {
	      close(sn);
 80077d8:	79fb      	ldrb	r3, [r7, #7]
 80077da:	4618      	mov	r0, r3
 80077dc:	f7ff fe58 	bl	8007490 <close>
	      return SOCKERR_TIMEOUT;
 80077e0:	f06f 030c 	mvn.w	r3, #12
 80077e4:	e00c      	b.n	8007800 <disconnect+0xdc>
	while(getSn_SR(sn) != SOCK_CLOSED)
 80077e6:	79fb      	ldrb	r3, [r7, #7]
 80077e8:	009b      	lsls	r3, r3, #2
 80077ea:	3301      	adds	r3, #1
 80077ec:	00db      	lsls	r3, r3, #3
 80077ee:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 80077f2:	4618      	mov	r0, r3
 80077f4:	f7ff fa52 	bl	8006c9c <WIZCHIP_READ>
 80077f8:	4603      	mov	r3, r0
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d1de      	bne.n	80077bc <disconnect+0x98>
	   }
	}
	return SOCK_OK;
 80077fe:	2301      	movs	r3, #1
}
 8007800:	4618      	mov	r0, r3
 8007802:	3708      	adds	r7, #8
 8007804:	46bd      	mov	sp, r7
 8007806:	bd80      	pop	{r7, pc}
 8007808:	20000f9a 	.word	0x20000f9a
 800780c:	20000f98 	.word	0x20000f98

08007810 <send>:

int32_t send(uint8_t sn, uint8_t * buf, uint16_t len)
{
 8007810:	b580      	push	{r7, lr}
 8007812:	b084      	sub	sp, #16
 8007814:	af00      	add	r7, sp, #0
 8007816:	4603      	mov	r3, r0
 8007818:	6039      	str	r1, [r7, #0]
 800781a:	71fb      	strb	r3, [r7, #7]
 800781c:	4613      	mov	r3, r2
 800781e:	80bb      	strh	r3, [r7, #4]
   uint8_t tmp=0;
 8007820:	2300      	movs	r3, #0
 8007822:	73fb      	strb	r3, [r7, #15]
   uint16_t freesize=0;
 8007824:	2300      	movs	r3, #0
 8007826:	81bb      	strh	r3, [r7, #12]
   
   CHECK_SOCKNUM();
 8007828:	79fb      	ldrb	r3, [r7, #7]
 800782a:	2b08      	cmp	r3, #8
 800782c:	d902      	bls.n	8007834 <send+0x24>
 800782e:	f04f 33ff 	mov.w	r3, #4294967295
 8007832:	e0dd      	b.n	80079f0 <send+0x1e0>
   CHECK_SOCKMODE(Sn_MR_TCP);
 8007834:	79fb      	ldrb	r3, [r7, #7]
 8007836:	009b      	lsls	r3, r3, #2
 8007838:	3301      	adds	r3, #1
 800783a:	00db      	lsls	r3, r3, #3
 800783c:	4618      	mov	r0, r3
 800783e:	f7ff fa2d 	bl	8006c9c <WIZCHIP_READ>
 8007842:	4603      	mov	r3, r0
 8007844:	f003 030f 	and.w	r3, r3, #15
 8007848:	2b01      	cmp	r3, #1
 800784a:	d002      	beq.n	8007852 <send+0x42>
 800784c:	f06f 0304 	mvn.w	r3, #4
 8007850:	e0ce      	b.n	80079f0 <send+0x1e0>
   CHECK_SOCKDATA();
 8007852:	88bb      	ldrh	r3, [r7, #4]
 8007854:	2b00      	cmp	r3, #0
 8007856:	d102      	bne.n	800785e <send+0x4e>
 8007858:	f06f 030d 	mvn.w	r3, #13
 800785c:	e0c8      	b.n	80079f0 <send+0x1e0>
   tmp = getSn_SR(sn);
 800785e:	79fb      	ldrb	r3, [r7, #7]
 8007860:	009b      	lsls	r3, r3, #2
 8007862:	3301      	adds	r3, #1
 8007864:	00db      	lsls	r3, r3, #3
 8007866:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 800786a:	4618      	mov	r0, r3
 800786c:	f7ff fa16 	bl	8006c9c <WIZCHIP_READ>
 8007870:	4603      	mov	r3, r0
 8007872:	73fb      	strb	r3, [r7, #15]
   if(tmp != SOCK_ESTABLISHED && tmp != SOCK_CLOSE_WAIT) return SOCKERR_SOCKSTATUS;
 8007874:	7bfb      	ldrb	r3, [r7, #15]
 8007876:	2b17      	cmp	r3, #23
 8007878:	d005      	beq.n	8007886 <send+0x76>
 800787a:	7bfb      	ldrb	r3, [r7, #15]
 800787c:	2b1c      	cmp	r3, #28
 800787e:	d002      	beq.n	8007886 <send+0x76>
 8007880:	f06f 0306 	mvn.w	r3, #6
 8007884:	e0b4      	b.n	80079f0 <send+0x1e0>
   if( sock_is_sending & (1<<sn) )
 8007886:	4b5c      	ldr	r3, [pc, #368]	@ (80079f8 <send+0x1e8>)
 8007888:	881b      	ldrh	r3, [r3, #0]
 800788a:	461a      	mov	r2, r3
 800788c:	79fb      	ldrb	r3, [r7, #7]
 800788e:	fa42 f303 	asr.w	r3, r2, r3
 8007892:	f003 0301 	and.w	r3, r3, #1
 8007896:	2b00      	cmp	r3, #0
 8007898:	d039      	beq.n	800790e <send+0xfe>
   {
      tmp = getSn_IR(sn);
 800789a:	79fb      	ldrb	r3, [r7, #7]
 800789c:	009b      	lsls	r3, r3, #2
 800789e:	3301      	adds	r3, #1
 80078a0:	00db      	lsls	r3, r3, #3
 80078a2:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 80078a6:	4618      	mov	r0, r3
 80078a8:	f7ff f9f8 	bl	8006c9c <WIZCHIP_READ>
 80078ac:	4603      	mov	r3, r0
 80078ae:	f003 031f 	and.w	r3, r3, #31
 80078b2:	73fb      	strb	r3, [r7, #15]
      if(tmp & Sn_IR_SENDOK)
 80078b4:	7bfb      	ldrb	r3, [r7, #15]
 80078b6:	f003 0310 	and.w	r3, r3, #16
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d019      	beq.n	80078f2 <send+0xe2>
      {
         setSn_IR(sn, Sn_IR_SENDOK);
 80078be:	79fb      	ldrb	r3, [r7, #7]
 80078c0:	009b      	lsls	r3, r3, #2
 80078c2:	3301      	adds	r3, #1
 80078c4:	00db      	lsls	r3, r3, #3
 80078c6:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 80078ca:	2110      	movs	r1, #16
 80078cc:	4618      	mov	r0, r3
 80078ce:	f7ff fa31 	bl	8006d34 <WIZCHIP_WRITE>
               setSn_CR(sn,Sn_CR_SEND);
               while(getSn_CR(sn));
               return SOCK_BUSY;
            }
         #endif
         sock_is_sending &= ~(1<<sn);         
 80078d2:	79fb      	ldrb	r3, [r7, #7]
 80078d4:	2201      	movs	r2, #1
 80078d6:	fa02 f303 	lsl.w	r3, r2, r3
 80078da:	b21b      	sxth	r3, r3
 80078dc:	43db      	mvns	r3, r3
 80078de:	b21a      	sxth	r2, r3
 80078e0:	4b45      	ldr	r3, [pc, #276]	@ (80079f8 <send+0x1e8>)
 80078e2:	881b      	ldrh	r3, [r3, #0]
 80078e4:	b21b      	sxth	r3, r3
 80078e6:	4013      	ands	r3, r2
 80078e8:	b21b      	sxth	r3, r3
 80078ea:	b29a      	uxth	r2, r3
 80078ec:	4b42      	ldr	r3, [pc, #264]	@ (80079f8 <send+0x1e8>)
 80078ee:	801a      	strh	r2, [r3, #0]
 80078f0:	e00d      	b.n	800790e <send+0xfe>
      }
      else if(tmp & Sn_IR_TIMEOUT)
 80078f2:	7bfb      	ldrb	r3, [r7, #15]
 80078f4:	f003 0308 	and.w	r3, r3, #8
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d006      	beq.n	800790a <send+0xfa>
      {
         close(sn);
 80078fc:	79fb      	ldrb	r3, [r7, #7]
 80078fe:	4618      	mov	r0, r3
 8007900:	f7ff fdc6 	bl	8007490 <close>
         return SOCKERR_TIMEOUT;
 8007904:	f06f 030c 	mvn.w	r3, #12
 8007908:	e072      	b.n	80079f0 <send+0x1e0>
      }
      else return SOCK_BUSY;
 800790a:	2300      	movs	r3, #0
 800790c:	e070      	b.n	80079f0 <send+0x1e0>
   }
   freesize = getSn_TxMAX(sn);
 800790e:	79fb      	ldrb	r3, [r7, #7]
 8007910:	009b      	lsls	r3, r3, #2
 8007912:	3301      	adds	r3, #1
 8007914:	00db      	lsls	r3, r3, #3
 8007916:	f503 53f8 	add.w	r3, r3, #7936	@ 0x1f00
 800791a:	4618      	mov	r0, r3
 800791c:	f7ff f9be 	bl	8006c9c <WIZCHIP_READ>
 8007920:	4603      	mov	r3, r0
 8007922:	029b      	lsls	r3, r3, #10
 8007924:	81bb      	strh	r3, [r7, #12]
   if (len > freesize) len = freesize; // check size not to exceed MAX size.
 8007926:	88ba      	ldrh	r2, [r7, #4]
 8007928:	89bb      	ldrh	r3, [r7, #12]
 800792a:	429a      	cmp	r2, r3
 800792c:	d901      	bls.n	8007932 <send+0x122>
 800792e:	89bb      	ldrh	r3, [r7, #12]
 8007930:	80bb      	strh	r3, [r7, #4]
   while(1)
   {
      freesize = getSn_TX_FSR(sn);
 8007932:	79fb      	ldrb	r3, [r7, #7]
 8007934:	4618      	mov	r0, r3
 8007936:	f7ff fb0b 	bl	8006f50 <getSn_TX_FSR>
 800793a:	4603      	mov	r3, r0
 800793c:	81bb      	strh	r3, [r7, #12]
      tmp = getSn_SR(sn);
 800793e:	79fb      	ldrb	r3, [r7, #7]
 8007940:	009b      	lsls	r3, r3, #2
 8007942:	3301      	adds	r3, #1
 8007944:	00db      	lsls	r3, r3, #3
 8007946:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 800794a:	4618      	mov	r0, r3
 800794c:	f7ff f9a6 	bl	8006c9c <WIZCHIP_READ>
 8007950:	4603      	mov	r3, r0
 8007952:	73fb      	strb	r3, [r7, #15]
      if ((tmp != SOCK_ESTABLISHED) && (tmp != SOCK_CLOSE_WAIT))
 8007954:	7bfb      	ldrb	r3, [r7, #15]
 8007956:	2b17      	cmp	r3, #23
 8007958:	d009      	beq.n	800796e <send+0x15e>
 800795a:	7bfb      	ldrb	r3, [r7, #15]
 800795c:	2b1c      	cmp	r3, #28
 800795e:	d006      	beq.n	800796e <send+0x15e>
      {
         close(sn);
 8007960:	79fb      	ldrb	r3, [r7, #7]
 8007962:	4618      	mov	r0, r3
 8007964:	f7ff fd94 	bl	8007490 <close>
         return SOCKERR_SOCKSTATUS;
 8007968:	f06f 0306 	mvn.w	r3, #6
 800796c:	e040      	b.n	80079f0 <send+0x1e0>
      }
      if( (sock_io_mode & (1<<sn)) && (len > freesize) ) return SOCK_BUSY;
 800796e:	4b23      	ldr	r3, [pc, #140]	@ (80079fc <send+0x1ec>)
 8007970:	881b      	ldrh	r3, [r3, #0]
 8007972:	461a      	mov	r2, r3
 8007974:	79fb      	ldrb	r3, [r7, #7]
 8007976:	fa42 f303 	asr.w	r3, r2, r3
 800797a:	f003 0301 	and.w	r3, r3, #1
 800797e:	2b00      	cmp	r3, #0
 8007980:	d005      	beq.n	800798e <send+0x17e>
 8007982:	88ba      	ldrh	r2, [r7, #4]
 8007984:	89bb      	ldrh	r3, [r7, #12]
 8007986:	429a      	cmp	r2, r3
 8007988:	d901      	bls.n	800798e <send+0x17e>
 800798a:	2300      	movs	r3, #0
 800798c:	e030      	b.n	80079f0 <send+0x1e0>
      if(len <= freesize) break;
 800798e:	88ba      	ldrh	r2, [r7, #4]
 8007990:	89bb      	ldrh	r3, [r7, #12]
 8007992:	429a      	cmp	r2, r3
 8007994:	d900      	bls.n	8007998 <send+0x188>
      freesize = getSn_TX_FSR(sn);
 8007996:	e7cc      	b.n	8007932 <send+0x122>
      if(len <= freesize) break;
 8007998:	bf00      	nop
   }
   wiz_send_data(sn, buf, len);
 800799a:	88ba      	ldrh	r2, [r7, #4]
 800799c:	79fb      	ldrb	r3, [r7, #7]
 800799e:	6839      	ldr	r1, [r7, #0]
 80079a0:	4618      	mov	r0, r3
 80079a2:	f7ff fb67 	bl	8007074 <wiz_send_data>

   #if _WIZCHIP_ == 5300
      setSn_TX_WRSR(sn,len);
   #endif
   
   setSn_CR(sn,Sn_CR_SEND);
 80079a6:	79fb      	ldrb	r3, [r7, #7]
 80079a8:	009b      	lsls	r3, r3, #2
 80079aa:	3301      	adds	r3, #1
 80079ac:	00db      	lsls	r3, r3, #3
 80079ae:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80079b2:	2120      	movs	r1, #32
 80079b4:	4618      	mov	r0, r3
 80079b6:	f7ff f9bd 	bl	8006d34 <WIZCHIP_WRITE>
   /* wait to process the command... */
   while(getSn_CR(sn));
 80079ba:	bf00      	nop
 80079bc:	79fb      	ldrb	r3, [r7, #7]
 80079be:	009b      	lsls	r3, r3, #2
 80079c0:	3301      	adds	r3, #1
 80079c2:	00db      	lsls	r3, r3, #3
 80079c4:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80079c8:	4618      	mov	r0, r3
 80079ca:	f7ff f967 	bl	8006c9c <WIZCHIP_READ>
 80079ce:	4603      	mov	r3, r0
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d1f3      	bne.n	80079bc <send+0x1ac>
   sock_is_sending |= (1 << sn);
 80079d4:	79fb      	ldrb	r3, [r7, #7]
 80079d6:	2201      	movs	r2, #1
 80079d8:	fa02 f303 	lsl.w	r3, r2, r3
 80079dc:	b21a      	sxth	r2, r3
 80079de:	4b06      	ldr	r3, [pc, #24]	@ (80079f8 <send+0x1e8>)
 80079e0:	881b      	ldrh	r3, [r3, #0]
 80079e2:	b21b      	sxth	r3, r3
 80079e4:	4313      	orrs	r3, r2
 80079e6:	b21b      	sxth	r3, r3
 80079e8:	b29a      	uxth	r2, r3
 80079ea:	4b03      	ldr	r3, [pc, #12]	@ (80079f8 <send+0x1e8>)
 80079ec:	801a      	strh	r2, [r3, #0]
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
 80079ee:	88bb      	ldrh	r3, [r7, #4]
}
 80079f0:	4618      	mov	r0, r3
 80079f2:	3710      	adds	r7, #16
 80079f4:	46bd      	mov	sp, r7
 80079f6:	bd80      	pop	{r7, pc}
 80079f8:	20000f9a 	.word	0x20000f9a
 80079fc:	20000f98 	.word	0x20000f98

08007a00 <recv>:


int32_t recv(uint8_t sn, uint8_t * buf, uint16_t len)
{
 8007a00:	b590      	push	{r4, r7, lr}
 8007a02:	b085      	sub	sp, #20
 8007a04:	af00      	add	r7, sp, #0
 8007a06:	4603      	mov	r3, r0
 8007a08:	6039      	str	r1, [r7, #0]
 8007a0a:	71fb      	strb	r3, [r7, #7]
 8007a0c:	4613      	mov	r3, r2
 8007a0e:	80bb      	strh	r3, [r7, #4]
   uint8_t  tmp = 0;
 8007a10:	2300      	movs	r3, #0
 8007a12:	73fb      	strb	r3, [r7, #15]
   uint16_t recvsize = 0;
 8007a14:	2300      	movs	r3, #0
 8007a16:	81bb      	strh	r3, [r7, #12]
#if   _WIZCHIP_ == 5300
   uint8_t head[2];
   uint16_t mr;
#endif
//
   CHECK_SOCKNUM();
 8007a18:	79fb      	ldrb	r3, [r7, #7]
 8007a1a:	2b08      	cmp	r3, #8
 8007a1c:	d902      	bls.n	8007a24 <recv+0x24>
 8007a1e:	f04f 33ff 	mov.w	r3, #4294967295
 8007a22:	e09b      	b.n	8007b5c <recv+0x15c>
   CHECK_SOCKMODE(Sn_MR_TCP);
 8007a24:	79fb      	ldrb	r3, [r7, #7]
 8007a26:	009b      	lsls	r3, r3, #2
 8007a28:	3301      	adds	r3, #1
 8007a2a:	00db      	lsls	r3, r3, #3
 8007a2c:	4618      	mov	r0, r3
 8007a2e:	f7ff f935 	bl	8006c9c <WIZCHIP_READ>
 8007a32:	4603      	mov	r3, r0
 8007a34:	f003 030f 	and.w	r3, r3, #15
 8007a38:	2b01      	cmp	r3, #1
 8007a3a:	d002      	beq.n	8007a42 <recv+0x42>
 8007a3c:	f06f 0304 	mvn.w	r3, #4
 8007a40:	e08c      	b.n	8007b5c <recv+0x15c>
   CHECK_SOCKDATA();
 8007a42:	88bb      	ldrh	r3, [r7, #4]
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d102      	bne.n	8007a4e <recv+0x4e>
 8007a48:	f06f 030d 	mvn.w	r3, #13
 8007a4c:	e086      	b.n	8007b5c <recv+0x15c>
   
   recvsize = getSn_RxMAX(sn);
 8007a4e:	79fb      	ldrb	r3, [r7, #7]
 8007a50:	009b      	lsls	r3, r3, #2
 8007a52:	3301      	adds	r3, #1
 8007a54:	00db      	lsls	r3, r3, #3
 8007a56:	f503 53f0 	add.w	r3, r3, #7680	@ 0x1e00
 8007a5a:	4618      	mov	r0, r3
 8007a5c:	f7ff f91e 	bl	8006c9c <WIZCHIP_READ>
 8007a60:	4603      	mov	r3, r0
 8007a62:	029b      	lsls	r3, r3, #10
 8007a64:	81bb      	strh	r3, [r7, #12]
   if(recvsize < len) len = recvsize;
 8007a66:	89ba      	ldrh	r2, [r7, #12]
 8007a68:	88bb      	ldrh	r3, [r7, #4]
 8007a6a:	429a      	cmp	r2, r3
 8007a6c:	d201      	bcs.n	8007a72 <recv+0x72>
 8007a6e:	89bb      	ldrh	r3, [r7, #12]
 8007a70:	80bb      	strh	r3, [r7, #4]
   {
#endif
//
      while(1)
      {
         recvsize = getSn_RX_RSR(sn);
 8007a72:	79fb      	ldrb	r3, [r7, #7]
 8007a74:	4618      	mov	r0, r3
 8007a76:	f7ff fab4 	bl	8006fe2 <getSn_RX_RSR>
 8007a7a:	4603      	mov	r3, r0
 8007a7c:	81bb      	strh	r3, [r7, #12]
         tmp = getSn_SR(sn);
 8007a7e:	79fb      	ldrb	r3, [r7, #7]
 8007a80:	009b      	lsls	r3, r3, #2
 8007a82:	3301      	adds	r3, #1
 8007a84:	00db      	lsls	r3, r3, #3
 8007a86:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8007a8a:	4618      	mov	r0, r3
 8007a8c:	f7ff f906 	bl	8006c9c <WIZCHIP_READ>
 8007a90:	4603      	mov	r3, r0
 8007a92:	73fb      	strb	r3, [r7, #15]
         if (tmp != SOCK_ESTABLISHED)
 8007a94:	7bfb      	ldrb	r3, [r7, #15]
 8007a96:	2b17      	cmp	r3, #23
 8007a98:	d026      	beq.n	8007ae8 <recv+0xe8>
         {
            if(tmp == SOCK_CLOSE_WAIT)
 8007a9a:	7bfb      	ldrb	r3, [r7, #15]
 8007a9c:	2b1c      	cmp	r3, #28
 8007a9e:	d11c      	bne.n	8007ada <recv+0xda>
            {
               if(recvsize != 0) break;
 8007aa0:	89bb      	ldrh	r3, [r7, #12]
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d133      	bne.n	8007b0e <recv+0x10e>
               else if(getSn_TX_FSR(sn) == getSn_TxMAX(sn))
 8007aa6:	79fb      	ldrb	r3, [r7, #7]
 8007aa8:	4618      	mov	r0, r3
 8007aaa:	f7ff fa51 	bl	8006f50 <getSn_TX_FSR>
 8007aae:	4603      	mov	r3, r0
 8007ab0:	461c      	mov	r4, r3
 8007ab2:	79fb      	ldrb	r3, [r7, #7]
 8007ab4:	009b      	lsls	r3, r3, #2
 8007ab6:	3301      	adds	r3, #1
 8007ab8:	00db      	lsls	r3, r3, #3
 8007aba:	f503 53f8 	add.w	r3, r3, #7936	@ 0x1f00
 8007abe:	4618      	mov	r0, r3
 8007ac0:	f7ff f8ec 	bl	8006c9c <WIZCHIP_READ>
 8007ac4:	4603      	mov	r3, r0
 8007ac6:	029b      	lsls	r3, r3, #10
 8007ac8:	429c      	cmp	r4, r3
 8007aca:	d10d      	bne.n	8007ae8 <recv+0xe8>
               {
                  close(sn);
 8007acc:	79fb      	ldrb	r3, [r7, #7]
 8007ace:	4618      	mov	r0, r3
 8007ad0:	f7ff fcde 	bl	8007490 <close>
                  return SOCKERR_SOCKSTATUS;
 8007ad4:	f06f 0306 	mvn.w	r3, #6
 8007ad8:	e040      	b.n	8007b5c <recv+0x15c>
               }
            }
            else
            {
               close(sn);
 8007ada:	79fb      	ldrb	r3, [r7, #7]
 8007adc:	4618      	mov	r0, r3
 8007ade:	f7ff fcd7 	bl	8007490 <close>
               return SOCKERR_SOCKSTATUS;
 8007ae2:	f06f 0306 	mvn.w	r3, #6
 8007ae6:	e039      	b.n	8007b5c <recv+0x15c>
            }
         }
         if((sock_io_mode & (1<<sn)) && (recvsize == 0)) return SOCK_BUSY;
 8007ae8:	4b1e      	ldr	r3, [pc, #120]	@ (8007b64 <recv+0x164>)
 8007aea:	881b      	ldrh	r3, [r3, #0]
 8007aec:	461a      	mov	r2, r3
 8007aee:	79fb      	ldrb	r3, [r7, #7]
 8007af0:	fa42 f303 	asr.w	r3, r2, r3
 8007af4:	f003 0301 	and.w	r3, r3, #1
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d004      	beq.n	8007b06 <recv+0x106>
 8007afc:	89bb      	ldrh	r3, [r7, #12]
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d101      	bne.n	8007b06 <recv+0x106>
 8007b02:	2300      	movs	r3, #0
 8007b04:	e02a      	b.n	8007b5c <recv+0x15c>
         if(recvsize != 0) break;
 8007b06:	89bb      	ldrh	r3, [r7, #12]
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d102      	bne.n	8007b12 <recv+0x112>
         recvsize = getSn_RX_RSR(sn);
 8007b0c:	e7b1      	b.n	8007a72 <recv+0x72>
               if(recvsize != 0) break;
 8007b0e:	bf00      	nop
 8007b10:	e000      	b.n	8007b14 <recv+0x114>
         if(recvsize != 0) break;
 8007b12:	bf00      	nop
   }
   else sock_pack_info[sn] = PACK_COMPLETED;
   if(getSn_MR(sn) & Sn_MR_ALIGN) sock_remained_size[sn] = 0;
   //len = recvsize;
#else   
   if(recvsize < len) len = recvsize;   
 8007b14:	89ba      	ldrh	r2, [r7, #12]
 8007b16:	88bb      	ldrh	r3, [r7, #4]
 8007b18:	429a      	cmp	r2, r3
 8007b1a:	d201      	bcs.n	8007b20 <recv+0x120>
 8007b1c:	89bb      	ldrh	r3, [r7, #12]
 8007b1e:	80bb      	strh	r3, [r7, #4]
   wiz_recv_data(sn, buf, len);
 8007b20:	88ba      	ldrh	r2, [r7, #4]
 8007b22:	79fb      	ldrb	r3, [r7, #7]
 8007b24:	6839      	ldr	r1, [r7, #0]
 8007b26:	4618      	mov	r0, r3
 8007b28:	f7ff fafe 	bl	8007128 <wiz_recv_data>
   setSn_CR(sn,Sn_CR_RECV);
 8007b2c:	79fb      	ldrb	r3, [r7, #7]
 8007b2e:	009b      	lsls	r3, r3, #2
 8007b30:	3301      	adds	r3, #1
 8007b32:	00db      	lsls	r3, r3, #3
 8007b34:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8007b38:	2140      	movs	r1, #64	@ 0x40
 8007b3a:	4618      	mov	r0, r3
 8007b3c:	f7ff f8fa 	bl	8006d34 <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 8007b40:	bf00      	nop
 8007b42:	79fb      	ldrb	r3, [r7, #7]
 8007b44:	009b      	lsls	r3, r3, #2
 8007b46:	3301      	adds	r3, #1
 8007b48:	00db      	lsls	r3, r3, #3
 8007b4a:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8007b4e:	4618      	mov	r0, r3
 8007b50:	f7ff f8a4 	bl	8006c9c <WIZCHIP_READ>
 8007b54:	4603      	mov	r3, r0
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d1f3      	bne.n	8007b42 <recv+0x142>
#endif
     
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
 8007b5a:	88bb      	ldrh	r3, [r7, #4]
}
 8007b5c:	4618      	mov	r0, r3
 8007b5e:	3714      	adds	r7, #20
 8007b60:	46bd      	mov	sp, r7
 8007b62:	bd90      	pop	{r4, r7, pc}
 8007b64:	20000f98 	.word	0x20000f98

08007b68 <sendto>:

int32_t sendto(uint8_t sn, uint8_t * buf, uint16_t len, uint8_t * addr, uint16_t port)
{
 8007b68:	b580      	push	{r7, lr}
 8007b6a:	b086      	sub	sp, #24
 8007b6c:	af00      	add	r7, sp, #0
 8007b6e:	60b9      	str	r1, [r7, #8]
 8007b70:	607b      	str	r3, [r7, #4]
 8007b72:	4603      	mov	r3, r0
 8007b74:	73fb      	strb	r3, [r7, #15]
 8007b76:	4613      	mov	r3, r2
 8007b78:	81bb      	strh	r3, [r7, #12]
   uint8_t tmp = 0;
 8007b7a:	2300      	movs	r3, #0
 8007b7c:	75fb      	strb	r3, [r7, #23]
   uint16_t freesize = 0;
 8007b7e:	2300      	movs	r3, #0
 8007b80:	82bb      	strh	r3, [r7, #20]
   uint32_t taddr;

   CHECK_SOCKNUM();
 8007b82:	7bfb      	ldrb	r3, [r7, #15]
 8007b84:	2b08      	cmp	r3, #8
 8007b86:	d902      	bls.n	8007b8e <sendto+0x26>
 8007b88:	f04f 33ff 	mov.w	r3, #4294967295
 8007b8c:	e11a      	b.n	8007dc4 <sendto+0x25c>
   switch(getSn_MR(sn) & 0x0F)
 8007b8e:	7bfb      	ldrb	r3, [r7, #15]
 8007b90:	009b      	lsls	r3, r3, #2
 8007b92:	3301      	adds	r3, #1
 8007b94:	00db      	lsls	r3, r3, #3
 8007b96:	4618      	mov	r0, r3
 8007b98:	f7ff f880 	bl	8006c9c <WIZCHIP_READ>
 8007b9c:	4603      	mov	r3, r0
 8007b9e:	f003 030f 	and.w	r3, r3, #15
 8007ba2:	3b02      	subs	r3, #2
 8007ba4:	2b02      	cmp	r3, #2
 8007ba6:	d902      	bls.n	8007bae <sendto+0x46>
//   #if ( _WIZCHIP_ < 5200 )
      case Sn_MR_IPRAW:
         break;
//   #endif
      default:
         return SOCKERR_SOCKMODE;
 8007ba8:	f06f 0304 	mvn.w	r3, #4
 8007bac:	e10a      	b.n	8007dc4 <sendto+0x25c>
         break;
 8007bae:	bf00      	nop
   }
   CHECK_SOCKDATA();
 8007bb0:	89bb      	ldrh	r3, [r7, #12]
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d102      	bne.n	8007bbc <sendto+0x54>
 8007bb6:	f06f 030d 	mvn.w	r3, #13
 8007bba:	e103      	b.n	8007dc4 <sendto+0x25c>
   //M20140501 : For avoiding fatal error on memory align mismatched
   //if(*((uint32_t*)addr) == 0) return SOCKERR_IPINVALID;
   //{
      //uint32_t taddr;
      taddr = ((uint32_t)addr[0]) & 0x000000FF;
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	781b      	ldrb	r3, [r3, #0]
 8007bc0:	613b      	str	r3, [r7, #16]
      taddr = (taddr << 8) + ((uint32_t)addr[1] & 0x000000FF);
 8007bc2:	693b      	ldr	r3, [r7, #16]
 8007bc4:	021b      	lsls	r3, r3, #8
 8007bc6:	687a      	ldr	r2, [r7, #4]
 8007bc8:	3201      	adds	r2, #1
 8007bca:	7812      	ldrb	r2, [r2, #0]
 8007bcc:	4413      	add	r3, r2
 8007bce:	613b      	str	r3, [r7, #16]
      taddr = (taddr << 8) + ((uint32_t)addr[2] & 0x000000FF);
 8007bd0:	693b      	ldr	r3, [r7, #16]
 8007bd2:	021b      	lsls	r3, r3, #8
 8007bd4:	687a      	ldr	r2, [r7, #4]
 8007bd6:	3202      	adds	r2, #2
 8007bd8:	7812      	ldrb	r2, [r2, #0]
 8007bda:	4413      	add	r3, r2
 8007bdc:	613b      	str	r3, [r7, #16]
      taddr = (taddr << 8) + ((uint32_t)addr[3] & 0x000000FF);
 8007bde:	693b      	ldr	r3, [r7, #16]
 8007be0:	021b      	lsls	r3, r3, #8
 8007be2:	687a      	ldr	r2, [r7, #4]
 8007be4:	3203      	adds	r2, #3
 8007be6:	7812      	ldrb	r2, [r2, #0]
 8007be8:	4413      	add	r3, r2
 8007bea:	613b      	str	r3, [r7, #16]
   //}
   //
   //if(*((uint32_t*)addr) == 0) return SOCKERR_IPINVALID;
   if((taddr == 0) && ((getSn_MR(sn)&Sn_MR_MACRAW) != Sn_MR_MACRAW)) return SOCKERR_IPINVALID;
 8007bec:	693b      	ldr	r3, [r7, #16]
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d10e      	bne.n	8007c10 <sendto+0xa8>
 8007bf2:	7bfb      	ldrb	r3, [r7, #15]
 8007bf4:	009b      	lsls	r3, r3, #2
 8007bf6:	3301      	adds	r3, #1
 8007bf8:	00db      	lsls	r3, r3, #3
 8007bfa:	4618      	mov	r0, r3
 8007bfc:	f7ff f84e 	bl	8006c9c <WIZCHIP_READ>
 8007c00:	4603      	mov	r3, r0
 8007c02:	f003 0304 	and.w	r3, r3, #4
 8007c06:	2b04      	cmp	r3, #4
 8007c08:	d002      	beq.n	8007c10 <sendto+0xa8>
 8007c0a:	f06f 030b 	mvn.w	r3, #11
 8007c0e:	e0d9      	b.n	8007dc4 <sendto+0x25c>
   if((port  == 0) && ((getSn_MR(sn)&Sn_MR_MACRAW) != Sn_MR_MACRAW)) return SOCKERR_PORTZERO;
 8007c10:	8c3b      	ldrh	r3, [r7, #32]
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d10e      	bne.n	8007c34 <sendto+0xcc>
 8007c16:	7bfb      	ldrb	r3, [r7, #15]
 8007c18:	009b      	lsls	r3, r3, #2
 8007c1a:	3301      	adds	r3, #1
 8007c1c:	00db      	lsls	r3, r3, #3
 8007c1e:	4618      	mov	r0, r3
 8007c20:	f7ff f83c 	bl	8006c9c <WIZCHIP_READ>
 8007c24:	4603      	mov	r3, r0
 8007c26:	f003 0304 	and.w	r3, r3, #4
 8007c2a:	2b04      	cmp	r3, #4
 8007c2c:	d002      	beq.n	8007c34 <sendto+0xcc>
 8007c2e:	f06f 030a 	mvn.w	r3, #10
 8007c32:	e0c7      	b.n	8007dc4 <sendto+0x25c>
   tmp = getSn_SR(sn);
 8007c34:	7bfb      	ldrb	r3, [r7, #15]
 8007c36:	009b      	lsls	r3, r3, #2
 8007c38:	3301      	adds	r3, #1
 8007c3a:	00db      	lsls	r3, r3, #3
 8007c3c:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8007c40:	4618      	mov	r0, r3
 8007c42:	f7ff f82b 	bl	8006c9c <WIZCHIP_READ>
 8007c46:	4603      	mov	r3, r0
 8007c48:	75fb      	strb	r3, [r7, #23]
//#if ( _WIZCHIP_ < 5200 )
   if((tmp != SOCK_MACRAW) && (tmp != SOCK_UDP) && (tmp != SOCK_IPRAW)) return SOCKERR_SOCKSTATUS;
 8007c4a:	7dfb      	ldrb	r3, [r7, #23]
 8007c4c:	2b42      	cmp	r3, #66	@ 0x42
 8007c4e:	d008      	beq.n	8007c62 <sendto+0xfa>
 8007c50:	7dfb      	ldrb	r3, [r7, #23]
 8007c52:	2b22      	cmp	r3, #34	@ 0x22
 8007c54:	d005      	beq.n	8007c62 <sendto+0xfa>
 8007c56:	7dfb      	ldrb	r3, [r7, #23]
 8007c58:	2b32      	cmp	r3, #50	@ 0x32
 8007c5a:	d002      	beq.n	8007c62 <sendto+0xfa>
 8007c5c:	f06f 0306 	mvn.w	r3, #6
 8007c60:	e0b0      	b.n	8007dc4 <sendto+0x25c>
//#else
//   if(tmp != SOCK_MACRAW && tmp != SOCK_UDP) return SOCKERR_SOCKSTATUS;
//#endif
      
   setSn_DIPR(sn,addr);
 8007c62:	7bfb      	ldrb	r3, [r7, #15]
 8007c64:	009b      	lsls	r3, r3, #2
 8007c66:	3301      	adds	r3, #1
 8007c68:	00db      	lsls	r3, r3, #3
 8007c6a:	f503 6340 	add.w	r3, r3, #3072	@ 0xc00
 8007c6e:	2204      	movs	r2, #4
 8007c70:	6879      	ldr	r1, [r7, #4]
 8007c72:	4618      	mov	r0, r3
 8007c74:	f7ff f90c 	bl	8006e90 <WIZCHIP_WRITE_BUF>
   setSn_DPORT(sn,port);      
 8007c78:	7bfb      	ldrb	r3, [r7, #15]
 8007c7a:	009b      	lsls	r3, r3, #2
 8007c7c:	3301      	adds	r3, #1
 8007c7e:	00db      	lsls	r3, r3, #3
 8007c80:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007c84:	461a      	mov	r2, r3
 8007c86:	8c3b      	ldrh	r3, [r7, #32]
 8007c88:	0a1b      	lsrs	r3, r3, #8
 8007c8a:	b29b      	uxth	r3, r3
 8007c8c:	b2db      	uxtb	r3, r3
 8007c8e:	4619      	mov	r1, r3
 8007c90:	4610      	mov	r0, r2
 8007c92:	f7ff f84f 	bl	8006d34 <WIZCHIP_WRITE>
 8007c96:	7bfb      	ldrb	r3, [r7, #15]
 8007c98:	009b      	lsls	r3, r3, #2
 8007c9a:	3301      	adds	r3, #1
 8007c9c:	00db      	lsls	r3, r3, #3
 8007c9e:	f503 5388 	add.w	r3, r3, #4352	@ 0x1100
 8007ca2:	461a      	mov	r2, r3
 8007ca4:	8c3b      	ldrh	r3, [r7, #32]
 8007ca6:	b2db      	uxtb	r3, r3
 8007ca8:	4619      	mov	r1, r3
 8007caa:	4610      	mov	r0, r2
 8007cac:	f7ff f842 	bl	8006d34 <WIZCHIP_WRITE>
   freesize = getSn_TxMAX(sn);
 8007cb0:	7bfb      	ldrb	r3, [r7, #15]
 8007cb2:	009b      	lsls	r3, r3, #2
 8007cb4:	3301      	adds	r3, #1
 8007cb6:	00db      	lsls	r3, r3, #3
 8007cb8:	f503 53f8 	add.w	r3, r3, #7936	@ 0x1f00
 8007cbc:	4618      	mov	r0, r3
 8007cbe:	f7fe ffed 	bl	8006c9c <WIZCHIP_READ>
 8007cc2:	4603      	mov	r3, r0
 8007cc4:	029b      	lsls	r3, r3, #10
 8007cc6:	82bb      	strh	r3, [r7, #20]
   if (len > freesize) len = freesize; // check size not to exceed MAX size.
 8007cc8:	89ba      	ldrh	r2, [r7, #12]
 8007cca:	8abb      	ldrh	r3, [r7, #20]
 8007ccc:	429a      	cmp	r2, r3
 8007cce:	d901      	bls.n	8007cd4 <sendto+0x16c>
 8007cd0:	8abb      	ldrh	r3, [r7, #20]
 8007cd2:	81bb      	strh	r3, [r7, #12]
   while(1)
   {
      freesize = getSn_TX_FSR(sn);
 8007cd4:	7bfb      	ldrb	r3, [r7, #15]
 8007cd6:	4618      	mov	r0, r3
 8007cd8:	f7ff f93a 	bl	8006f50 <getSn_TX_FSR>
 8007cdc:	4603      	mov	r3, r0
 8007cde:	82bb      	strh	r3, [r7, #20]
      if(getSn_SR(sn) == SOCK_CLOSED) return SOCKERR_SOCKCLOSED;
 8007ce0:	7bfb      	ldrb	r3, [r7, #15]
 8007ce2:	009b      	lsls	r3, r3, #2
 8007ce4:	3301      	adds	r3, #1
 8007ce6:	00db      	lsls	r3, r3, #3
 8007ce8:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8007cec:	4618      	mov	r0, r3
 8007cee:	f7fe ffd5 	bl	8006c9c <WIZCHIP_READ>
 8007cf2:	4603      	mov	r3, r0
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d102      	bne.n	8007cfe <sendto+0x196>
 8007cf8:	f06f 0303 	mvn.w	r3, #3
 8007cfc:	e062      	b.n	8007dc4 <sendto+0x25c>
      if( (sock_io_mode & (1<<sn)) && (len > freesize) ) return SOCK_BUSY;
 8007cfe:	4b33      	ldr	r3, [pc, #204]	@ (8007dcc <sendto+0x264>)
 8007d00:	881b      	ldrh	r3, [r3, #0]
 8007d02:	461a      	mov	r2, r3
 8007d04:	7bfb      	ldrb	r3, [r7, #15]
 8007d06:	fa42 f303 	asr.w	r3, r2, r3
 8007d0a:	f003 0301 	and.w	r3, r3, #1
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d005      	beq.n	8007d1e <sendto+0x1b6>
 8007d12:	89ba      	ldrh	r2, [r7, #12]
 8007d14:	8abb      	ldrh	r3, [r7, #20]
 8007d16:	429a      	cmp	r2, r3
 8007d18:	d901      	bls.n	8007d1e <sendto+0x1b6>
 8007d1a:	2300      	movs	r3, #0
 8007d1c:	e052      	b.n	8007dc4 <sendto+0x25c>
      if(len <= freesize) break;
 8007d1e:	89ba      	ldrh	r2, [r7, #12]
 8007d20:	8abb      	ldrh	r3, [r7, #20]
 8007d22:	429a      	cmp	r2, r3
 8007d24:	d900      	bls.n	8007d28 <sendto+0x1c0>
      freesize = getSn_TX_FSR(sn);
 8007d26:	e7d5      	b.n	8007cd4 <sendto+0x16c>
      if(len <= freesize) break;
 8007d28:	bf00      	nop
   };
	wiz_send_data(sn, buf, len);
 8007d2a:	89ba      	ldrh	r2, [r7, #12]
 8007d2c:	7bfb      	ldrb	r3, [r7, #15]
 8007d2e:	68b9      	ldr	r1, [r7, #8]
 8007d30:	4618      	mov	r0, r3
 8007d32:	f7ff f99f 	bl	8007074 <wiz_send_data>
//A20150601 : For W5300
#if _WIZCHIP_ == 5300
   setSn_TX_WRSR(sn, len);
#endif
//   
	setSn_CR(sn,Sn_CR_SEND);
 8007d36:	7bfb      	ldrb	r3, [r7, #15]
 8007d38:	009b      	lsls	r3, r3, #2
 8007d3a:	3301      	adds	r3, #1
 8007d3c:	00db      	lsls	r3, r3, #3
 8007d3e:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8007d42:	2120      	movs	r1, #32
 8007d44:	4618      	mov	r0, r3
 8007d46:	f7fe fff5 	bl	8006d34 <WIZCHIP_WRITE>
	/* wait to process the command... */
	while(getSn_CR(sn));
 8007d4a:	bf00      	nop
 8007d4c:	7bfb      	ldrb	r3, [r7, #15]
 8007d4e:	009b      	lsls	r3, r3, #2
 8007d50:	3301      	adds	r3, #1
 8007d52:	00db      	lsls	r3, r3, #3
 8007d54:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8007d58:	4618      	mov	r0, r3
 8007d5a:	f7fe ff9f 	bl	8006c9c <WIZCHIP_READ>
 8007d5e:	4603      	mov	r3, r0
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d1f3      	bne.n	8007d4c <sendto+0x1e4>
   while(1)
   {
      tmp = getSn_IR(sn);
 8007d64:	7bfb      	ldrb	r3, [r7, #15]
 8007d66:	009b      	lsls	r3, r3, #2
 8007d68:	3301      	adds	r3, #1
 8007d6a:	00db      	lsls	r3, r3, #3
 8007d6c:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8007d70:	4618      	mov	r0, r3
 8007d72:	f7fe ff93 	bl	8006c9c <WIZCHIP_READ>
 8007d76:	4603      	mov	r3, r0
 8007d78:	f003 031f 	and.w	r3, r3, #31
 8007d7c:	75fb      	strb	r3, [r7, #23]
      if(tmp & Sn_IR_SENDOK)
 8007d7e:	7dfb      	ldrb	r3, [r7, #23]
 8007d80:	f003 0310 	and.w	r3, r3, #16
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	d00c      	beq.n	8007da2 <sendto+0x23a>
      {
         setSn_IR(sn, Sn_IR_SENDOK);
 8007d88:	7bfb      	ldrb	r3, [r7, #15]
 8007d8a:	009b      	lsls	r3, r3, #2
 8007d8c:	3301      	adds	r3, #1
 8007d8e:	00db      	lsls	r3, r3, #3
 8007d90:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8007d94:	2110      	movs	r1, #16
 8007d96:	4618      	mov	r0, r3
 8007d98:	f7fe ffcc 	bl	8006d34 <WIZCHIP_WRITE>
         break;
 8007d9c:	bf00      	nop
   #if _WIZCHIP_ < 5500   //M20150401 : for WIZCHIP Errata #4, #5 (ARP errata)
      if(taddr) setSUBR((uint8_t*)&taddr);
   #endif
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
 8007d9e:	89bb      	ldrh	r3, [r7, #12]
 8007da0:	e010      	b.n	8007dc4 <sendto+0x25c>
      else if(tmp & Sn_IR_TIMEOUT)
 8007da2:	7dfb      	ldrb	r3, [r7, #23]
 8007da4:	f003 0308 	and.w	r3, r3, #8
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d0db      	beq.n	8007d64 <sendto+0x1fc>
         setSn_IR(sn, Sn_IR_TIMEOUT);
 8007dac:	7bfb      	ldrb	r3, [r7, #15]
 8007dae:	009b      	lsls	r3, r3, #2
 8007db0:	3301      	adds	r3, #1
 8007db2:	00db      	lsls	r3, r3, #3
 8007db4:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8007db8:	2108      	movs	r1, #8
 8007dba:	4618      	mov	r0, r3
 8007dbc:	f7fe ffba 	bl	8006d34 <WIZCHIP_WRITE>
         return SOCKERR_TIMEOUT;
 8007dc0:	f06f 030c 	mvn.w	r3, #12
}
 8007dc4:	4618      	mov	r0, r3
 8007dc6:	3718      	adds	r7, #24
 8007dc8:	46bd      	mov	sp, r7
 8007dca:	bd80      	pop	{r7, pc}
 8007dcc:	20000f98 	.word	0x20000f98

08007dd0 <recvfrom>:



int32_t recvfrom(uint8_t sn, uint8_t * buf, uint16_t len, uint8_t * addr, uint16_t *port)
{
 8007dd0:	b580      	push	{r7, lr}
 8007dd2:	b088      	sub	sp, #32
 8007dd4:	af00      	add	r7, sp, #0
 8007dd6:	60b9      	str	r1, [r7, #8]
 8007dd8:	607b      	str	r3, [r7, #4]
 8007dda:	4603      	mov	r3, r0
 8007ddc:	73fb      	strb	r3, [r7, #15]
 8007dde:	4613      	mov	r3, r2
 8007de0:	81bb      	strh	r3, [r7, #12]
#else   
   uint8_t  mr;
#endif
//   
   uint8_t  head[8];
	uint16_t pack_len=0;
 8007de2:	2300      	movs	r3, #0
 8007de4:	83fb      	strh	r3, [r7, #30]

   CHECK_SOCKNUM();
 8007de6:	7bfb      	ldrb	r3, [r7, #15]
 8007de8:	2b08      	cmp	r3, #8
 8007dea:	d902      	bls.n	8007df2 <recvfrom+0x22>
 8007dec:	f04f 33ff 	mov.w	r3, #4294967295
 8007df0:	e1d2      	b.n	8008198 <recvfrom+0x3c8>
//A20150601
#if _WIZCHIP_ == 5300
   mr1 = getMR();
#endif   

   switch((mr=getSn_MR(sn)) & 0x0F)
 8007df2:	7bfb      	ldrb	r3, [r7, #15]
 8007df4:	009b      	lsls	r3, r3, #2
 8007df6:	3301      	adds	r3, #1
 8007df8:	00db      	lsls	r3, r3, #3
 8007dfa:	4618      	mov	r0, r3
 8007dfc:	f7fe ff4e 	bl	8006c9c <WIZCHIP_READ>
 8007e00:	4603      	mov	r3, r0
 8007e02:	777b      	strb	r3, [r7, #29]
 8007e04:	7f7b      	ldrb	r3, [r7, #29]
 8007e06:	f003 030f 	and.w	r3, r3, #15
 8007e0a:	3b02      	subs	r3, #2
 8007e0c:	2b02      	cmp	r3, #2
 8007e0e:	d902      	bls.n	8007e16 <recvfrom+0x46>
   #if ( _WIZCHIP_ < 5200 )         
      case Sn_MR_PPPoE:
         break;
   #endif
      default:
         return SOCKERR_SOCKMODE;
 8007e10:	f06f 0304 	mvn.w	r3, #4
 8007e14:	e1c0      	b.n	8008198 <recvfrom+0x3c8>
         break;
 8007e16:	bf00      	nop
   }
   CHECK_SOCKDATA();
 8007e18:	89bb      	ldrh	r3, [r7, #12]
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d102      	bne.n	8007e24 <recvfrom+0x54>
 8007e1e:	f06f 030d 	mvn.w	r3, #13
 8007e22:	e1b9      	b.n	8008198 <recvfrom+0x3c8>
   if(sock_remained_size[sn] == 0)
 8007e24:	7bfb      	ldrb	r3, [r7, #15]
 8007e26:	4a87      	ldr	r2, [pc, #540]	@ (8008044 <recvfrom+0x274>)
 8007e28:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d128      	bne.n	8007e82 <recvfrom+0xb2>
   {
      while(1)
      {
         pack_len = getSn_RX_RSR(sn);
 8007e30:	7bfb      	ldrb	r3, [r7, #15]
 8007e32:	4618      	mov	r0, r3
 8007e34:	f7ff f8d5 	bl	8006fe2 <getSn_RX_RSR>
 8007e38:	4603      	mov	r3, r0
 8007e3a:	83fb      	strh	r3, [r7, #30]
         if(getSn_SR(sn) == SOCK_CLOSED) return SOCKERR_SOCKCLOSED;
 8007e3c:	7bfb      	ldrb	r3, [r7, #15]
 8007e3e:	009b      	lsls	r3, r3, #2
 8007e40:	3301      	adds	r3, #1
 8007e42:	00db      	lsls	r3, r3, #3
 8007e44:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8007e48:	4618      	mov	r0, r3
 8007e4a:	f7fe ff27 	bl	8006c9c <WIZCHIP_READ>
 8007e4e:	4603      	mov	r3, r0
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d102      	bne.n	8007e5a <recvfrom+0x8a>
 8007e54:	f06f 0303 	mvn.w	r3, #3
 8007e58:	e19e      	b.n	8008198 <recvfrom+0x3c8>
         if( (sock_io_mode & (1<<sn)) && (pack_len == 0) ) return SOCK_BUSY;
 8007e5a:	4b7b      	ldr	r3, [pc, #492]	@ (8008048 <recvfrom+0x278>)
 8007e5c:	881b      	ldrh	r3, [r3, #0]
 8007e5e:	461a      	mov	r2, r3
 8007e60:	7bfb      	ldrb	r3, [r7, #15]
 8007e62:	fa42 f303 	asr.w	r3, r2, r3
 8007e66:	f003 0301 	and.w	r3, r3, #1
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d004      	beq.n	8007e78 <recvfrom+0xa8>
 8007e6e:	8bfb      	ldrh	r3, [r7, #30]
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	d101      	bne.n	8007e78 <recvfrom+0xa8>
 8007e74:	2300      	movs	r3, #0
 8007e76:	e18f      	b.n	8008198 <recvfrom+0x3c8>
         if(pack_len != 0) break;
 8007e78:	8bfb      	ldrh	r3, [r7, #30]
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d100      	bne.n	8007e80 <recvfrom+0xb0>
         pack_len = getSn_RX_RSR(sn);
 8007e7e:	e7d7      	b.n	8007e30 <recvfrom+0x60>
         if(pack_len != 0) break;
 8007e80:	bf00      	nop
      };
   }
//D20150601 : Move it to bottom
// sock_pack_info[sn] = PACK_COMPLETED;
	switch (mr & 0x07)
 8007e82:	7f7b      	ldrb	r3, [r7, #29]
 8007e84:	f003 0307 	and.w	r3, r3, #7
 8007e88:	2b04      	cmp	r3, #4
 8007e8a:	d078      	beq.n	8007f7e <recvfrom+0x1ae>
 8007e8c:	2b04      	cmp	r3, #4
 8007e8e:	f300 8140 	bgt.w	8008112 <recvfrom+0x342>
 8007e92:	2b02      	cmp	r3, #2
 8007e94:	d003      	beq.n	8007e9e <recvfrom+0xce>
 8007e96:	2b03      	cmp	r3, #3
 8007e98:	f000 80da 	beq.w	8008050 <recvfrom+0x280>
 8007e9c:	e139      	b.n	8008112 <recvfrom+0x342>
	{
	   case Sn_MR_UDP :
	      if(sock_remained_size[sn] == 0)
 8007e9e:	7bfb      	ldrb	r3, [r7, #15]
 8007ea0:	4a68      	ldr	r2, [pc, #416]	@ (8008044 <recvfrom+0x274>)
 8007ea2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d151      	bne.n	8007f4e <recvfrom+0x17e>
	      {
   			wiz_recv_data(sn, head, 8);
 8007eaa:	f107 0114 	add.w	r1, r7, #20
 8007eae:	7bfb      	ldrb	r3, [r7, #15]
 8007eb0:	2208      	movs	r2, #8
 8007eb2:	4618      	mov	r0, r3
 8007eb4:	f7ff f938 	bl	8007128 <wiz_recv_data>
   			setSn_CR(sn,Sn_CR_RECV);
 8007eb8:	7bfb      	ldrb	r3, [r7, #15]
 8007eba:	009b      	lsls	r3, r3, #2
 8007ebc:	3301      	adds	r3, #1
 8007ebe:	00db      	lsls	r3, r3, #3
 8007ec0:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8007ec4:	2140      	movs	r1, #64	@ 0x40
 8007ec6:	4618      	mov	r0, r3
 8007ec8:	f7fe ff34 	bl	8006d34 <WIZCHIP_WRITE>
   			while(getSn_CR(sn));
 8007ecc:	bf00      	nop
 8007ece:	7bfb      	ldrb	r3, [r7, #15]
 8007ed0:	009b      	lsls	r3, r3, #2
 8007ed2:	3301      	adds	r3, #1
 8007ed4:	00db      	lsls	r3, r3, #3
 8007ed6:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8007eda:	4618      	mov	r0, r3
 8007edc:	f7fe fede 	bl	8006c9c <WIZCHIP_READ>
 8007ee0:	4603      	mov	r3, r0
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d1f3      	bne.n	8007ece <recvfrom+0xfe>
      			sock_remained_size[sn] = (sock_remained_size[sn] << 8) + head[6];
   		   }
            else
            {
         #endif
               addr[0] = head[0];
 8007ee6:	7d3a      	ldrb	r2, [r7, #20]
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	701a      	strb	r2, [r3, #0]
      			addr[1] = head[1];
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	3301      	adds	r3, #1
 8007ef0:	7d7a      	ldrb	r2, [r7, #21]
 8007ef2:	701a      	strb	r2, [r3, #0]
      			addr[2] = head[2];
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	3302      	adds	r3, #2
 8007ef8:	7dba      	ldrb	r2, [r7, #22]
 8007efa:	701a      	strb	r2, [r3, #0]
      			addr[3] = head[3];
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	3303      	adds	r3, #3
 8007f00:	7dfa      	ldrb	r2, [r7, #23]
 8007f02:	701a      	strb	r2, [r3, #0]
      			*port = head[4];
 8007f04:	7e3b      	ldrb	r3, [r7, #24]
 8007f06:	461a      	mov	r2, r3
 8007f08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f0a:	801a      	strh	r2, [r3, #0]
      			*port = (*port << 8) + head[5];
 8007f0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f0e:	881b      	ldrh	r3, [r3, #0]
 8007f10:	021b      	lsls	r3, r3, #8
 8007f12:	b29b      	uxth	r3, r3
 8007f14:	7e7a      	ldrb	r2, [r7, #25]
 8007f16:	4413      	add	r3, r2
 8007f18:	b29a      	uxth	r2, r3
 8007f1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f1c:	801a      	strh	r2, [r3, #0]
      			sock_remained_size[sn] = head[6];
 8007f1e:	7eba      	ldrb	r2, [r7, #26]
 8007f20:	7bfb      	ldrb	r3, [r7, #15]
 8007f22:	4611      	mov	r1, r2
 8007f24:	4a47      	ldr	r2, [pc, #284]	@ (8008044 <recvfrom+0x274>)
 8007f26:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
      			sock_remained_size[sn] = (sock_remained_size[sn] << 8) + head[7];
 8007f2a:	7bfb      	ldrb	r3, [r7, #15]
 8007f2c:	4a45      	ldr	r2, [pc, #276]	@ (8008044 <recvfrom+0x274>)
 8007f2e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007f32:	021b      	lsls	r3, r3, #8
 8007f34:	b29a      	uxth	r2, r3
 8007f36:	7efb      	ldrb	r3, [r7, #27]
 8007f38:	4619      	mov	r1, r3
 8007f3a:	7bfb      	ldrb	r3, [r7, #15]
 8007f3c:	440a      	add	r2, r1
 8007f3e:	b291      	uxth	r1, r2
 8007f40:	4a40      	ldr	r2, [pc, #256]	@ (8008044 <recvfrom+0x274>)
 8007f42:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
         #if _WIZCHIP_ == 5300
            }
         #endif
   			sock_pack_info[sn] = PACK_FIRST;
 8007f46:	7bfb      	ldrb	r3, [r7, #15]
 8007f48:	4a40      	ldr	r2, [pc, #256]	@ (800804c <recvfrom+0x27c>)
 8007f4a:	2180      	movs	r1, #128	@ 0x80
 8007f4c:	54d1      	strb	r1, [r2, r3]
   	   }
			if(len < sock_remained_size[sn]) pack_len = len;
 8007f4e:	7bfb      	ldrb	r3, [r7, #15]
 8007f50:	4a3c      	ldr	r2, [pc, #240]	@ (8008044 <recvfrom+0x274>)
 8007f52:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007f56:	89ba      	ldrh	r2, [r7, #12]
 8007f58:	429a      	cmp	r2, r3
 8007f5a:	d202      	bcs.n	8007f62 <recvfrom+0x192>
 8007f5c:	89bb      	ldrh	r3, [r7, #12]
 8007f5e:	83fb      	strh	r3, [r7, #30]
 8007f60:	e004      	b.n	8007f6c <recvfrom+0x19c>
			else pack_len = sock_remained_size[sn];
 8007f62:	7bfb      	ldrb	r3, [r7, #15]
 8007f64:	4a37      	ldr	r2, [pc, #220]	@ (8008044 <recvfrom+0x274>)
 8007f66:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007f6a:	83fb      	strh	r3, [r7, #30]
			//A20150601 : For W5300
			len = pack_len;
 8007f6c:	8bfb      	ldrh	r3, [r7, #30]
 8007f6e:	81bb      	strh	r3, [r7, #12]
			   }
			#endif
			//
			// Need to packet length check (default 1472)
			//
   		wiz_recv_data(sn, buf, pack_len); // data copy.
 8007f70:	8bfa      	ldrh	r2, [r7, #30]
 8007f72:	7bfb      	ldrb	r3, [r7, #15]
 8007f74:	68b9      	ldr	r1, [r7, #8]
 8007f76:	4618      	mov	r0, r3
 8007f78:	f7ff f8d6 	bl	8007128 <wiz_recv_data>
			break;
 8007f7c:	e0d5      	b.n	800812a <recvfrom+0x35a>
	   case Sn_MR_MACRAW :
	      if(sock_remained_size[sn] == 0)
 8007f7e:	7bfb      	ldrb	r3, [r7, #15]
 8007f80:	4a30      	ldr	r2, [pc, #192]	@ (8008044 <recvfrom+0x274>)
 8007f82:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d145      	bne.n	8008016 <recvfrom+0x246>
	      {
   			wiz_recv_data(sn, head, 2);
 8007f8a:	f107 0114 	add.w	r1, r7, #20
 8007f8e:	7bfb      	ldrb	r3, [r7, #15]
 8007f90:	2202      	movs	r2, #2
 8007f92:	4618      	mov	r0, r3
 8007f94:	f7ff f8c8 	bl	8007128 <wiz_recv_data>
   			setSn_CR(sn,Sn_CR_RECV);
 8007f98:	7bfb      	ldrb	r3, [r7, #15]
 8007f9a:	009b      	lsls	r3, r3, #2
 8007f9c:	3301      	adds	r3, #1
 8007f9e:	00db      	lsls	r3, r3, #3
 8007fa0:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8007fa4:	2140      	movs	r1, #64	@ 0x40
 8007fa6:	4618      	mov	r0, r3
 8007fa8:	f7fe fec4 	bl	8006d34 <WIZCHIP_WRITE>
   			while(getSn_CR(sn));
 8007fac:	bf00      	nop
 8007fae:	7bfb      	ldrb	r3, [r7, #15]
 8007fb0:	009b      	lsls	r3, r3, #2
 8007fb2:	3301      	adds	r3, #1
 8007fb4:	00db      	lsls	r3, r3, #3
 8007fb6:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8007fba:	4618      	mov	r0, r3
 8007fbc:	f7fe fe6e 	bl	8006c9c <WIZCHIP_READ>
 8007fc0:	4603      	mov	r3, r0
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d1f3      	bne.n	8007fae <recvfrom+0x1de>
   			// read peer's IP address, port number & packet length
    			sock_remained_size[sn] = head[0];
 8007fc6:	7d3a      	ldrb	r2, [r7, #20]
 8007fc8:	7bfb      	ldrb	r3, [r7, #15]
 8007fca:	4611      	mov	r1, r2
 8007fcc:	4a1d      	ldr	r2, [pc, #116]	@ (8008044 <recvfrom+0x274>)
 8007fce:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   			sock_remained_size[sn] = (sock_remained_size[sn] <<8) + head[1] -2;
 8007fd2:	7bfb      	ldrb	r3, [r7, #15]
 8007fd4:	4a1b      	ldr	r2, [pc, #108]	@ (8008044 <recvfrom+0x274>)
 8007fd6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007fda:	021b      	lsls	r3, r3, #8
 8007fdc:	b29b      	uxth	r3, r3
 8007fde:	7d7a      	ldrb	r2, [r7, #21]
 8007fe0:	4413      	add	r3, r2
 8007fe2:	b29a      	uxth	r2, r3
 8007fe4:	7bfb      	ldrb	r3, [r7, #15]
 8007fe6:	3a02      	subs	r2, #2
 8007fe8:	b291      	uxth	r1, r2
 8007fea:	4a16      	ldr	r2, [pc, #88]	@ (8008044 <recvfrom+0x274>)
 8007fec:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   			if(sock_remained_size[sn] & 0x01)
   				sock_remained_size[sn] = sock_remained_size[sn] + 1 - 4;
   			else
   				sock_remained_size[sn] -= 4;
			#endif
   			if(sock_remained_size[sn] > 1514) 
 8007ff0:	7bfb      	ldrb	r3, [r7, #15]
 8007ff2:	4a14      	ldr	r2, [pc, #80]	@ (8008044 <recvfrom+0x274>)
 8007ff4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007ff8:	f240 52ea 	movw	r2, #1514	@ 0x5ea
 8007ffc:	4293      	cmp	r3, r2
 8007ffe:	d906      	bls.n	800800e <recvfrom+0x23e>
   			{
   			   close(sn);
 8008000:	7bfb      	ldrb	r3, [r7, #15]
 8008002:	4618      	mov	r0, r3
 8008004:	f7ff fa44 	bl	8007490 <close>
   			   return SOCKFATAL_PACKLEN;
 8008008:	f46f 737a 	mvn.w	r3, #1000	@ 0x3e8
 800800c:	e0c4      	b.n	8008198 <recvfrom+0x3c8>
   			}
   			sock_pack_info[sn] = PACK_FIRST;
 800800e:	7bfb      	ldrb	r3, [r7, #15]
 8008010:	4a0e      	ldr	r2, [pc, #56]	@ (800804c <recvfrom+0x27c>)
 8008012:	2180      	movs	r1, #128	@ 0x80
 8008014:	54d1      	strb	r1, [r2, r3]
   	   }
			if(len < sock_remained_size[sn]) pack_len = len;
 8008016:	7bfb      	ldrb	r3, [r7, #15]
 8008018:	4a0a      	ldr	r2, [pc, #40]	@ (8008044 <recvfrom+0x274>)
 800801a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800801e:	89ba      	ldrh	r2, [r7, #12]
 8008020:	429a      	cmp	r2, r3
 8008022:	d202      	bcs.n	800802a <recvfrom+0x25a>
 8008024:	89bb      	ldrh	r3, [r7, #12]
 8008026:	83fb      	strh	r3, [r7, #30]
 8008028:	e004      	b.n	8008034 <recvfrom+0x264>
			else pack_len = sock_remained_size[sn];
 800802a:	7bfb      	ldrb	r3, [r7, #15]
 800802c:	4a05      	ldr	r2, [pc, #20]	@ (8008044 <recvfrom+0x274>)
 800802e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008032:	83fb      	strh	r3, [r7, #30]
			wiz_recv_data(sn,buf,pack_len);
 8008034:	8bfa      	ldrh	r2, [r7, #30]
 8008036:	7bfb      	ldrb	r3, [r7, #15]
 8008038:	68b9      	ldr	r1, [r7, #8]
 800803a:	4618      	mov	r0, r3
 800803c:	f7ff f874 	bl	8007128 <wiz_recv_data>
		   break;
 8008040:	e073      	b.n	800812a <recvfrom+0x35a>
 8008042:	bf00      	nop
 8008044:	20000f9c 	.word	0x20000f9c
 8008048:	20000f98 	.word	0x20000f98
 800804c:	20000fac 	.word	0x20000fac
   //#if ( _WIZCHIP_ < 5200 )
		case Sn_MR_IPRAW:
		   if(sock_remained_size[sn] == 0)
 8008050:	7bfb      	ldrb	r3, [r7, #15]
 8008052:	4a53      	ldr	r2, [pc, #332]	@ (80081a0 <recvfrom+0x3d0>)
 8008054:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008058:	2b00      	cmp	r3, #0
 800805a:	d144      	bne.n	80080e6 <recvfrom+0x316>
		   {
   			wiz_recv_data(sn, head, 6);
 800805c:	f107 0114 	add.w	r1, r7, #20
 8008060:	7bfb      	ldrb	r3, [r7, #15]
 8008062:	2206      	movs	r2, #6
 8008064:	4618      	mov	r0, r3
 8008066:	f7ff f85f 	bl	8007128 <wiz_recv_data>
   			setSn_CR(sn,Sn_CR_RECV);
 800806a:	7bfb      	ldrb	r3, [r7, #15]
 800806c:	009b      	lsls	r3, r3, #2
 800806e:	3301      	adds	r3, #1
 8008070:	00db      	lsls	r3, r3, #3
 8008072:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8008076:	2140      	movs	r1, #64	@ 0x40
 8008078:	4618      	mov	r0, r3
 800807a:	f7fe fe5b 	bl	8006d34 <WIZCHIP_WRITE>
   			while(getSn_CR(sn));
 800807e:	bf00      	nop
 8008080:	7bfb      	ldrb	r3, [r7, #15]
 8008082:	009b      	lsls	r3, r3, #2
 8008084:	3301      	adds	r3, #1
 8008086:	00db      	lsls	r3, r3, #3
 8008088:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 800808c:	4618      	mov	r0, r3
 800808e:	f7fe fe05 	bl	8006c9c <WIZCHIP_READ>
 8008092:	4603      	mov	r3, r0
 8008094:	2b00      	cmp	r3, #0
 8008096:	d1f3      	bne.n	8008080 <recvfrom+0x2b0>
   			addr[0] = head[0];
 8008098:	7d3a      	ldrb	r2, [r7, #20]
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	701a      	strb	r2, [r3, #0]
   			addr[1] = head[1];
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	3301      	adds	r3, #1
 80080a2:	7d7a      	ldrb	r2, [r7, #21]
 80080a4:	701a      	strb	r2, [r3, #0]
   			addr[2] = head[2];
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	3302      	adds	r3, #2
 80080aa:	7dba      	ldrb	r2, [r7, #22]
 80080ac:	701a      	strb	r2, [r3, #0]
   			addr[3] = head[3];
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	3303      	adds	r3, #3
 80080b2:	7dfa      	ldrb	r2, [r7, #23]
 80080b4:	701a      	strb	r2, [r3, #0]
   			sock_remained_size[sn] = head[4];
 80080b6:	7e3a      	ldrb	r2, [r7, #24]
 80080b8:	7bfb      	ldrb	r3, [r7, #15]
 80080ba:	4611      	mov	r1, r2
 80080bc:	4a38      	ldr	r2, [pc, #224]	@ (80081a0 <recvfrom+0x3d0>)
 80080be:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   			//M20150401 : For Typing Error
   			//sock_remaiend_size[sn] = (sock_remained_size[sn] << 8) + head[5];
   			sock_remained_size[sn] = (sock_remained_size[sn] << 8) + head[5];
 80080c2:	7bfb      	ldrb	r3, [r7, #15]
 80080c4:	4a36      	ldr	r2, [pc, #216]	@ (80081a0 <recvfrom+0x3d0>)
 80080c6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80080ca:	021b      	lsls	r3, r3, #8
 80080cc:	b29a      	uxth	r2, r3
 80080ce:	7e7b      	ldrb	r3, [r7, #25]
 80080d0:	4619      	mov	r1, r3
 80080d2:	7bfb      	ldrb	r3, [r7, #15]
 80080d4:	440a      	add	r2, r1
 80080d6:	b291      	uxth	r1, r2
 80080d8:	4a31      	ldr	r2, [pc, #196]	@ (80081a0 <recvfrom+0x3d0>)
 80080da:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   			sock_pack_info[sn] = PACK_FIRST;
 80080de:	7bfb      	ldrb	r3, [r7, #15]
 80080e0:	4a30      	ldr	r2, [pc, #192]	@ (80081a4 <recvfrom+0x3d4>)
 80080e2:	2180      	movs	r1, #128	@ 0x80
 80080e4:	54d1      	strb	r1, [r2, r3]
         }
			//
			// Need to packet length check
			//
			if(len < sock_remained_size[sn]) pack_len = len;
 80080e6:	7bfb      	ldrb	r3, [r7, #15]
 80080e8:	4a2d      	ldr	r2, [pc, #180]	@ (80081a0 <recvfrom+0x3d0>)
 80080ea:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80080ee:	89ba      	ldrh	r2, [r7, #12]
 80080f0:	429a      	cmp	r2, r3
 80080f2:	d202      	bcs.n	80080fa <recvfrom+0x32a>
 80080f4:	89bb      	ldrh	r3, [r7, #12]
 80080f6:	83fb      	strh	r3, [r7, #30]
 80080f8:	e004      	b.n	8008104 <recvfrom+0x334>
			else pack_len = sock_remained_size[sn];
 80080fa:	7bfb      	ldrb	r3, [r7, #15]
 80080fc:	4a28      	ldr	r2, [pc, #160]	@ (80081a0 <recvfrom+0x3d0>)
 80080fe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008102:	83fb      	strh	r3, [r7, #30]
   		wiz_recv_data(sn, buf, pack_len); // data copy.
 8008104:	8bfa      	ldrh	r2, [r7, #30]
 8008106:	7bfb      	ldrb	r3, [r7, #15]
 8008108:	68b9      	ldr	r1, [r7, #8]
 800810a:	4618      	mov	r0, r3
 800810c:	f7ff f80c 	bl	8007128 <wiz_recv_data>
			break;
 8008110:	e00b      	b.n	800812a <recvfrom+0x35a>
   //#endif
      default:
         wiz_recv_ignore(sn, pack_len); // data copy.
 8008112:	8bfa      	ldrh	r2, [r7, #30]
 8008114:	7bfb      	ldrb	r3, [r7, #15]
 8008116:	4611      	mov	r1, r2
 8008118:	4618      	mov	r0, r3
 800811a:	f7ff f85f 	bl	80071dc <wiz_recv_ignore>
         sock_remained_size[sn] = pack_len;
 800811e:	7bfb      	ldrb	r3, [r7, #15]
 8008120:	491f      	ldr	r1, [pc, #124]	@ (80081a0 <recvfrom+0x3d0>)
 8008122:	8bfa      	ldrh	r2, [r7, #30]
 8008124:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
         break;
 8008128:	bf00      	nop
   }
	setSn_CR(sn,Sn_CR_RECV);
 800812a:	7bfb      	ldrb	r3, [r7, #15]
 800812c:	009b      	lsls	r3, r3, #2
 800812e:	3301      	adds	r3, #1
 8008130:	00db      	lsls	r3, r3, #3
 8008132:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8008136:	2140      	movs	r1, #64	@ 0x40
 8008138:	4618      	mov	r0, r3
 800813a:	f7fe fdfb 	bl	8006d34 <WIZCHIP_WRITE>
	/* wait to process the command... */
	while(getSn_CR(sn)) ;
 800813e:	bf00      	nop
 8008140:	7bfb      	ldrb	r3, [r7, #15]
 8008142:	009b      	lsls	r3, r3, #2
 8008144:	3301      	adds	r3, #1
 8008146:	00db      	lsls	r3, r3, #3
 8008148:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 800814c:	4618      	mov	r0, r3
 800814e:	f7fe fda5 	bl	8006c9c <WIZCHIP_READ>
 8008152:	4603      	mov	r3, r0
 8008154:	2b00      	cmp	r3, #0
 8008156:	d1f3      	bne.n	8008140 <recvfrom+0x370>
	sock_remained_size[sn] -= pack_len;
 8008158:	7bfb      	ldrb	r3, [r7, #15]
 800815a:	4a11      	ldr	r2, [pc, #68]	@ (80081a0 <recvfrom+0x3d0>)
 800815c:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8008160:	7bfb      	ldrb	r3, [r7, #15]
 8008162:	8bfa      	ldrh	r2, [r7, #30]
 8008164:	1a8a      	subs	r2, r1, r2
 8008166:	b291      	uxth	r1, r2
 8008168:	4a0d      	ldr	r2, [pc, #52]	@ (80081a0 <recvfrom+0x3d0>)
 800816a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	//M20150601 : 
	//if(sock_remained_size[sn] != 0) sock_pack_info[sn] |= 0x01;
	if(sock_remained_size[sn] != 0)
 800816e:	7bfb      	ldrb	r3, [r7, #15]
 8008170:	4a0b      	ldr	r2, [pc, #44]	@ (80081a0 <recvfrom+0x3d0>)
 8008172:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008176:	2b00      	cmp	r3, #0
 8008178:	d009      	beq.n	800818e <recvfrom+0x3be>
	{
	   sock_pack_info[sn] |= PACK_REMAINED;
 800817a:	7bfb      	ldrb	r3, [r7, #15]
 800817c:	4a09      	ldr	r2, [pc, #36]	@ (80081a4 <recvfrom+0x3d4>)
 800817e:	5cd2      	ldrb	r2, [r2, r3]
 8008180:	7bfb      	ldrb	r3, [r7, #15]
 8008182:	f042 0201 	orr.w	r2, r2, #1
 8008186:	b2d1      	uxtb	r1, r2
 8008188:	4a06      	ldr	r2, [pc, #24]	@ (80081a4 <recvfrom+0x3d4>)
 800818a:	54d1      	strb	r1, [r2, r3]
 800818c:	e003      	b.n	8008196 <recvfrom+0x3c6>
   #if _WIZCHIP_ == 5300	   
	   if(pack_len & 0x01) sock_pack_info[sn] |= PACK_FIFOBYTE;
   #endif	      
	}
	else sock_pack_info[sn] = PACK_COMPLETED;
 800818e:	7bfb      	ldrb	r3, [r7, #15]
 8008190:	4a04      	ldr	r2, [pc, #16]	@ (80081a4 <recvfrom+0x3d4>)
 8008192:	2100      	movs	r1, #0
 8008194:	54d1      	strb	r1, [r2, r3]
   pack_len = len;
#endif
   //
   //M20150409 : Explicit Type Casting
   //return pack_len;
   return (int32_t)pack_len;
 8008196:	8bfb      	ldrh	r3, [r7, #30]
}
 8008198:	4618      	mov	r0, r3
 800819a:	3720      	adds	r7, #32
 800819c:	46bd      	mov	sp, r7
 800819e:	bd80      	pop	{r7, pc}
 80081a0:	20000f9c 	.word	0x20000f9c
 80081a4:	20000fac 	.word	0x20000fac

080081a8 <SPIReadWrite>:
#include "main.h"

extern SPI_HandleTypeDef hspi1;

uint8_t SPIReadWrite(uint8_t data)
{
 80081a8:	b480      	push	{r7}
 80081aa:	b083      	sub	sp, #12
 80081ac:	af00      	add	r7, sp, #0
 80081ae:	4603      	mov	r3, r0
 80081b0:	71fb      	strb	r3, [r7, #7]
	//wait till FIFO has a free slot
	while((hspi1.Instance->SR & SPI_FLAG_TXE) != SPI_FLAG_TXE);
 80081b2:	bf00      	nop
 80081b4:	4b0f      	ldr	r3, [pc, #60]	@ (80081f4 <SPIReadWrite+0x4c>)
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	689b      	ldr	r3, [r3, #8]
 80081ba:	f003 0302 	and.w	r3, r3, #2
 80081be:	2b02      	cmp	r3, #2
 80081c0:	d1f8      	bne.n	80081b4 <SPIReadWrite+0xc>

	*(__IO uint8_t*)&hspi1.Instance->DR = data;
 80081c2:	4b0c      	ldr	r3, [pc, #48]	@ (80081f4 <SPIReadWrite+0x4c>)
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	330c      	adds	r3, #12
 80081c8:	79fa      	ldrb	r2, [r7, #7]
 80081ca:	701a      	strb	r2, [r3, #0]
	//Now wait till data arrives
	while((hspi1.Instance->SR & SPI_FLAG_RXNE)!=SPI_FLAG_RXNE);
 80081cc:	bf00      	nop
 80081ce:	4b09      	ldr	r3, [pc, #36]	@ (80081f4 <SPIReadWrite+0x4c>)
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	689b      	ldr	r3, [r3, #8]
 80081d4:	f003 0301 	and.w	r3, r3, #1
 80081d8:	2b01      	cmp	r3, #1
 80081da:	d1f8      	bne.n	80081ce <SPIReadWrite+0x26>

	return (*(__IO uint8_t*)&hspi1.Instance->DR);
 80081dc:	4b05      	ldr	r3, [pc, #20]	@ (80081f4 <SPIReadWrite+0x4c>)
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	330c      	adds	r3, #12
 80081e2:	781b      	ldrb	r3, [r3, #0]
 80081e4:	b2db      	uxtb	r3, r3

}
 80081e6:	4618      	mov	r0, r3
 80081e8:	370c      	adds	r7, #12
 80081ea:	46bd      	mov	sp, r7
 80081ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081f0:	4770      	bx	lr
 80081f2:	bf00      	nop
 80081f4:	200002d8 	.word	0x200002d8

080081f8 <wizchip_select>:

void wizchip_select(void)
{
 80081f8:	b580      	push	{r7, lr}
 80081fa:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 80081fc:	2200      	movs	r2, #0
 80081fe:	2102      	movs	r1, #2
 8008200:	4802      	ldr	r0, [pc, #8]	@ (800820c <wizchip_select+0x14>)
 8008202:	f001 f9d7 	bl	80095b4 <HAL_GPIO_WritePin>
}
 8008206:	bf00      	nop
 8008208:	bd80      	pop	{r7, pc}
 800820a:	bf00      	nop
 800820c:	40020000 	.word	0x40020000

08008210 <wizchip_deselect>:

void wizchip_deselect(void)
{
 8008210:	b580      	push	{r7, lr}
 8008212:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 8008214:	2201      	movs	r2, #1
 8008216:	2102      	movs	r1, #2
 8008218:	4802      	ldr	r0, [pc, #8]	@ (8008224 <wizchip_deselect+0x14>)
 800821a:	f001 f9cb 	bl	80095b4 <HAL_GPIO_WritePin>
}
 800821e:	bf00      	nop
 8008220:	bd80      	pop	{r7, pc}
 8008222:	bf00      	nop
 8008224:	40020000 	.word	0x40020000

08008228 <wizchip_reset_high>:

void wizchip_reset_high(void)
{
 8008228:	b580      	push	{r7, lr}
 800822a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SPI1_RST_GPIO_Port, SPI1_RST_Pin, GPIO_PIN_SET);
 800822c:	2201      	movs	r2, #1
 800822e:	2101      	movs	r1, #1
 8008230:	4802      	ldr	r0, [pc, #8]	@ (800823c <wizchip_reset_high+0x14>)
 8008232:	f001 f9bf 	bl	80095b4 <HAL_GPIO_WritePin>
}
 8008236:	bf00      	nop
 8008238:	bd80      	pop	{r7, pc}
 800823a:	bf00      	nop
 800823c:	40020000 	.word	0x40020000

08008240 <wizchip_reset_low>:

void wizchip_reset_low(void)
{
 8008240:	b580      	push	{r7, lr}
 8008242:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SPI1_RST_GPIO_Port, SPI1_RST_Pin, GPIO_PIN_RESET);
 8008244:	2200      	movs	r2, #0
 8008246:	2101      	movs	r1, #1
 8008248:	4802      	ldr	r0, [pc, #8]	@ (8008254 <wizchip_reset_low+0x14>)
 800824a:	f001 f9b3 	bl	80095b4 <HAL_GPIO_WritePin>
}
 800824e:	bf00      	nop
 8008250:	bd80      	pop	{r7, pc}
 8008252:	bf00      	nop
 8008254:	40020000 	.word	0x40020000

08008258 <wizchip_read>:

uint8_t wizchip_read()
{
 8008258:	b580      	push	{r7, lr}
 800825a:	b082      	sub	sp, #8
 800825c:	af00      	add	r7, sp, #0
	uint8_t rb;
	rb=SPIReadWrite(0x00);
 800825e:	2000      	movs	r0, #0
 8008260:	f7ff ffa2 	bl	80081a8 <SPIReadWrite>
 8008264:	4603      	mov	r3, r0
 8008266:	71fb      	strb	r3, [r7, #7]
	return rb;
 8008268:	79fb      	ldrb	r3, [r7, #7]
}
 800826a:	4618      	mov	r0, r3
 800826c:	3708      	adds	r7, #8
 800826e:	46bd      	mov	sp, r7
 8008270:	bd80      	pop	{r7, pc}

08008272 <wizchip_write>:

void  wizchip_write(uint8_t wb)
{
 8008272:	b580      	push	{r7, lr}
 8008274:	b082      	sub	sp, #8
 8008276:	af00      	add	r7, sp, #0
 8008278:	4603      	mov	r3, r0
 800827a:	71fb      	strb	r3, [r7, #7]
	SPIReadWrite(wb);
 800827c:	79fb      	ldrb	r3, [r7, #7]
 800827e:	4618      	mov	r0, r3
 8008280:	f7ff ff92 	bl	80081a8 <SPIReadWrite>
}
 8008284:	bf00      	nop
 8008286:	3708      	adds	r7, #8
 8008288:	46bd      	mov	sp, r7
 800828a:	bd80      	pop	{r7, pc}

0800828c <wizchip_readburst>:

void wizchip_readburst(uint8_t* pBuf, uint16_t len)
{
 800828c:	b580      	push	{r7, lr}
 800828e:	b084      	sub	sp, #16
 8008290:	af00      	add	r7, sp, #0
 8008292:	6078      	str	r0, [r7, #4]
 8008294:	460b      	mov	r3, r1
 8008296:	807b      	strh	r3, [r7, #2]
	for(uint16_t i=0;i<len;i++)
 8008298:	2300      	movs	r3, #0
 800829a:	81fb      	strh	r3, [r7, #14]
 800829c:	e00c      	b.n	80082b8 <wizchip_readburst+0x2c>
	{
		*pBuf=SPIReadWrite(0x00);
 800829e:	2000      	movs	r0, #0
 80082a0:	f7ff ff82 	bl	80081a8 <SPIReadWrite>
 80082a4:	4603      	mov	r3, r0
 80082a6:	461a      	mov	r2, r3
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	701a      	strb	r2, [r3, #0]
		pBuf++;
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	3301      	adds	r3, #1
 80082b0:	607b      	str	r3, [r7, #4]
	for(uint16_t i=0;i<len;i++)
 80082b2:	89fb      	ldrh	r3, [r7, #14]
 80082b4:	3301      	adds	r3, #1
 80082b6:	81fb      	strh	r3, [r7, #14]
 80082b8:	89fa      	ldrh	r2, [r7, #14]
 80082ba:	887b      	ldrh	r3, [r7, #2]
 80082bc:	429a      	cmp	r2, r3
 80082be:	d3ee      	bcc.n	800829e <wizchip_readburst+0x12>
	}
}
 80082c0:	bf00      	nop
 80082c2:	bf00      	nop
 80082c4:	3710      	adds	r7, #16
 80082c6:	46bd      	mov	sp, r7
 80082c8:	bd80      	pop	{r7, pc}

080082ca <wizchip_writeburst>:

void  wizchip_writeburst(uint8_t* pBuf, uint16_t len)
{
 80082ca:	b580      	push	{r7, lr}
 80082cc:	b084      	sub	sp, #16
 80082ce:	af00      	add	r7, sp, #0
 80082d0:	6078      	str	r0, [r7, #4]
 80082d2:	460b      	mov	r3, r1
 80082d4:	807b      	strh	r3, [r7, #2]
	for(uint16_t i=0;i<len;i++)
 80082d6:	2300      	movs	r3, #0
 80082d8:	81fb      	strh	r3, [r7, #14]
 80082da:	e00a      	b.n	80082f2 <wizchip_writeburst+0x28>
	{
		SPIReadWrite(*pBuf);
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	781b      	ldrb	r3, [r3, #0]
 80082e0:	4618      	mov	r0, r3
 80082e2:	f7ff ff61 	bl	80081a8 <SPIReadWrite>
		pBuf++;
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	3301      	adds	r3, #1
 80082ea:	607b      	str	r3, [r7, #4]
	for(uint16_t i=0;i<len;i++)
 80082ec:	89fb      	ldrh	r3, [r7, #14]
 80082ee:	3301      	adds	r3, #1
 80082f0:	81fb      	strh	r3, [r7, #14]
 80082f2:	89fa      	ldrh	r2, [r7, #14]
 80082f4:	887b      	ldrh	r3, [r7, #2]
 80082f6:	429a      	cmp	r2, r3
 80082f8:	d3f0      	bcc.n	80082dc <wizchip_writeburst+0x12>
	}
}
 80082fa:	bf00      	nop
 80082fc:	bf00      	nop
 80082fe:	3710      	adds	r7, #16
 8008300:	46bd      	mov	sp, r7
 8008302:	bd80      	pop	{r7, pc}

08008304 <W5500IOInit>:

void W5500IOInit()
{
 8008304:	b480      	push	{r7}
 8008306:	af00      	add	r7, sp, #0
	//printf("Wiznet_io_Initiallized @ main.c\r\n");
}
 8008308:	bf00      	nop
 800830a:	46bd      	mov	sp, r7
 800830c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008310:	4770      	bx	lr

08008312 <w5500_enter_critical>:

void w5500_enter_critical(void)
{
 8008312:	b480      	push	{r7}
 8008314:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8008316:	b672      	cpsid	i
}
 8008318:	bf00      	nop
	__disable_irq();
}
 800831a:	bf00      	nop
 800831c:	46bd      	mov	sp, r7
 800831e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008322:	4770      	bx	lr

08008324 <w5500_exit_critical>:

void w5500_exit_critical(void)
{
 8008324:	b480      	push	{r7}
 8008326:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsie i" : : : "memory");
 8008328:	b662      	cpsie	i
}
 800832a:	bf00      	nop
	__enable_irq();
}
 800832c:	bf00      	nop
 800832e:	46bd      	mov	sp, r7
 8008330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008334:	4770      	bx	lr
	...

08008338 <W5500Init>:

void W5500Init()
{
 8008338:	b590      	push	{r4, r7, lr}
 800833a:	b087      	sub	sp, #28
 800833c:	af00      	add	r7, sp, #0
	uint8_t tmp;
	uint8_t memsize[2][8] = { { 2, 2, 2, 2, 2, 2, 2, 2 }, { 2, 2, 2, 2, 2, 2, 2, 2 } };
 800833e:	4b2b      	ldr	r3, [pc, #172]	@ (80083ec <W5500Init+0xb4>)
 8008340:	1d3c      	adds	r4, r7, #4
 8008342:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8008344:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	W5500IOInit();
 8008348:	f7ff ffdc 	bl	8008304 <W5500IOInit>

	wizchip_deselect();//CS high by default
 800834c:	f7ff ff60 	bl	8008210 <wizchip_deselect>

	//Send a pulse on reset pin
	wizchip_reset_low();
 8008350:	f7ff ff76 	bl	8008240 <wizchip_reset_low>

	tmp = 0xFF;
 8008354:	23ff      	movs	r3, #255	@ 0xff
 8008356:	75fb      	strb	r3, [r7, #23]
	while(tmp--);
 8008358:	bf00      	nop
 800835a:	7dfb      	ldrb	r3, [r7, #23]
 800835c:	1e5a      	subs	r2, r3, #1
 800835e:	75fa      	strb	r2, [r7, #23]
 8008360:	2b00      	cmp	r3, #0
 8008362:	d1fa      	bne.n	800835a <W5500Init+0x22>
	wizchip_reset_high();
 8008364:	f7ff ff60 	bl	8008228 <wizchip_reset_high>

	reg_wizchip_cs_cbfunc(wizchip_select, wizchip_deselect);
 8008368:	4921      	ldr	r1, [pc, #132]	@ (80083f0 <W5500Init+0xb8>)
 800836a:	4822      	ldr	r0, [pc, #136]	@ (80083f4 <W5500Init+0xbc>)
 800836c:	f000 f8e8 	bl	8008540 <reg_wizchip_cs_cbfunc>
	reg_wizchip_spi_cbfunc(wizchip_read, wizchip_write);
 8008370:	4921      	ldr	r1, [pc, #132]	@ (80083f8 <W5500Init+0xc0>)
 8008372:	4822      	ldr	r0, [pc, #136]	@ (80083fc <W5500Init+0xc4>)
 8008374:	f000 f90a 	bl	800858c <reg_wizchip_spi_cbfunc>
	reg_wizchip_spiburst_cbfunc(wizchip_readburst, wizchip_writeburst);
 8008378:	4921      	ldr	r1, [pc, #132]	@ (8008400 <W5500Init+0xc8>)
 800837a:	4822      	ldr	r0, [pc, #136]	@ (8008404 <W5500Init+0xcc>)
 800837c:	f000 f932 	bl	80085e4 <reg_wizchip_spiburst_cbfunc>
	reg_wizchip_cris_cbfunc(w5500_enter_critical, w5500_exit_critical);
 8008380:	4921      	ldr	r1, [pc, #132]	@ (8008408 <W5500Init+0xd0>)
 8008382:	4822      	ldr	r0, [pc, #136]	@ (800840c <W5500Init+0xd4>)
 8008384:	f000 f8b6 	bl	80084f4 <reg_wizchip_cris_cbfunc>

	/* WIZChip Initialize*/
	if (ctlwizchip(CW_INIT_WIZCHIP, (void*) memsize) == -1) {
 8008388:	1d3b      	adds	r3, r7, #4
 800838a:	4619      	mov	r1, r3
 800838c:	2001      	movs	r0, #1
 800838e:	f000 f955 	bl	800863c <ctlwizchip>
 8008392:	4603      	mov	r3, r0
 8008394:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008398:	d104      	bne.n	80083a4 <W5500Init+0x6c>
		printf("WIZCHIP Initialized Failed.\r\n");
 800839a:	481d      	ldr	r0, [pc, #116]	@ (8008410 <W5500Init+0xd8>)
 800839c:	f006 fbc2 	bl	800eb24 <puts>
		while (1);
 80083a0:	bf00      	nop
 80083a2:	e7fd      	b.n	80083a0 <W5500Init+0x68>
	}
	printf("WIZCHIP Initialization Success.\r\n");
 80083a4:	481b      	ldr	r0, [pc, #108]	@ (8008414 <W5500Init+0xdc>)
 80083a6:	f006 fbbd 	bl	800eb24 <puts>

	//Check if SPI is working
	printf("Auto-detecting Ethernet Chip on SPI Port...");
 80083aa:	481b      	ldr	r0, [pc, #108]	@ (8008418 <W5500Init+0xe0>)
 80083ac:	f006 fb52 	bl	800ea54 <iprintf>
      uint8_t Data = WIZCHIP_READ(VERSIONR);
 80083b0:	f44f 5064 	mov.w	r0, #14592	@ 0x3900
 80083b4:	f7fe fc72 	bl	8006c9c <WIZCHIP_READ>
 80083b8:	4603      	mov	r3, r0
 80083ba:	75bb      	strb	r3, [r7, #22]
      printf("rtData:%d\n",Data);
 80083bc:	7dbb      	ldrb	r3, [r7, #22]
 80083be:	4619      	mov	r1, r3
 80083c0:	4816      	ldr	r0, [pc, #88]	@ (800841c <W5500Init+0xe4>)
 80083c2:	f006 fb47 	bl	800ea54 <iprintf>
	if( Data == 0x04)
 80083c6:	7dbb      	ldrb	r3, [r7, #22]
 80083c8:	2b04      	cmp	r3, #4
 80083ca:	d103      	bne.n	80083d4 <W5500Init+0x9c>
	{
		printf("W5500 Found on SPI\r\n");
 80083cc:	4814      	ldr	r0, [pc, #80]	@ (8008420 <W5500Init+0xe8>)
 80083ce:	f006 fba9 	bl	800eb24 <puts>
	{
		printf("W5500 NOT Found on SPI\r\n");
		printf("Double Check SPI Cables\r\n");
		while(1);
	}
}
 80083d2:	e007      	b.n	80083e4 <W5500Init+0xac>
		printf("W5500 NOT Found on SPI\r\n");
 80083d4:	4813      	ldr	r0, [pc, #76]	@ (8008424 <W5500Init+0xec>)
 80083d6:	f006 fba5 	bl	800eb24 <puts>
		printf("Double Check SPI Cables\r\n");
 80083da:	4813      	ldr	r0, [pc, #76]	@ (8008428 <W5500Init+0xf0>)
 80083dc:	f006 fba2 	bl	800eb24 <puts>
		while(1);
 80083e0:	bf00      	nop
 80083e2:	e7fd      	b.n	80083e0 <W5500Init+0xa8>
}
 80083e4:	371c      	adds	r7, #28
 80083e6:	46bd      	mov	sp, r7
 80083e8:	bd90      	pop	{r4, r7, pc}
 80083ea:	bf00      	nop
 80083ec:	08011180 	.word	0x08011180
 80083f0:	08008211 	.word	0x08008211
 80083f4:	080081f9 	.word	0x080081f9
 80083f8:	08008273 	.word	0x08008273
 80083fc:	08008259 	.word	0x08008259
 8008400:	080082cb 	.word	0x080082cb
 8008404:	0800828d 	.word	0x0800828d
 8008408:	08008325 	.word	0x08008325
 800840c:	08008313 	.word	0x08008313
 8008410:	080110bc 	.word	0x080110bc
 8008414:	080110dc 	.word	0x080110dc
 8008418:	08011100 	.word	0x08011100
 800841c:	0801112c 	.word	0x0801112c
 8008420:	08011138 	.word	0x08011138
 8008424:	0801114c 	.word	0x0801114c
 8008428:	08011164 	.word	0x08011164

0800842c <wizchip_cris_enter>:
 * @brief Default function to enable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_enter(void)           {};
void 	  wizchip_cris_enter(void)           {}
 800842c:	b480      	push	{r7}
 800842e:	af00      	add	r7, sp, #0
 8008430:	bf00      	nop
 8008432:	46bd      	mov	sp, r7
 8008434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008438:	4770      	bx	lr

0800843a <wizchip_cris_exit>:
 * @brief Default function to disable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_exit(void)          {};
void 	  wizchip_cris_exit(void)          {}
 800843a:	b480      	push	{r7}
 800843c:	af00      	add	r7, sp, #0
 800843e:	bf00      	nop
 8008440:	46bd      	mov	sp, r7
 8008442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008446:	4770      	bx	lr

08008448 <wizchip_cs_select>:
 * @brief Default function to select chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_cs_select(void)            {};
void 	wizchip_cs_select(void)            {}
 8008448:	b480      	push	{r7}
 800844a:	af00      	add	r7, sp, #0
 800844c:	bf00      	nop
 800844e:	46bd      	mov	sp, r7
 8008450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008454:	4770      	bx	lr

08008456 <wizchip_cs_deselect>:
 * @brief Default function to deselect chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_cs_deselect(void)          {};
void 	wizchip_cs_deselect(void)          {}
 8008456:	b480      	push	{r7}
 8008458:	af00      	add	r7, sp, #0
 800845a:	bf00      	nop
 800845c:	46bd      	mov	sp, r7
 800845e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008462:	4770      	bx	lr

08008464 <wizchip_bus_readdata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
 //M20150601 : Rename the function for integrating with W5300
//uint8_t wizchip_bus_readbyte(uint32_t AddrSel) { return * ((volatile uint8_t *)((ptrdiff_t) AddrSel)); }
iodata_t wizchip_bus_readdata(uint32_t AddrSel) { return * ((volatile iodata_t *)((ptrdiff_t) AddrSel)); }
 8008464:	b480      	push	{r7}
 8008466:	b083      	sub	sp, #12
 8008468:	af00      	add	r7, sp, #0
 800846a:	6078      	str	r0, [r7, #4]
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	781b      	ldrb	r3, [r3, #0]
 8008470:	b2db      	uxtb	r3, r3
 8008472:	4618      	mov	r0, r3
 8008474:	370c      	adds	r7, #12
 8008476:	46bd      	mov	sp, r7
 8008478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800847c:	4770      	bx	lr

0800847e <wizchip_bus_writedata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//M20150601 : Rename the function for integrating with W5300
//void 	wizchip_bus_writebyte(uint32_t AddrSel, uint8_t wb)  { *((volatile uint8_t*)((ptrdiff_t)AddrSel)) = wb; }
void 	wizchip_bus_writedata(uint32_t AddrSel, iodata_t wb)  { *((volatile iodata_t*)((ptrdiff_t)AddrSel)) = wb; }
 800847e:	b480      	push	{r7}
 8008480:	b083      	sub	sp, #12
 8008482:	af00      	add	r7, sp, #0
 8008484:	6078      	str	r0, [r7, #4]
 8008486:	460b      	mov	r3, r1
 8008488:	70fb      	strb	r3, [r7, #3]
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	78fa      	ldrb	r2, [r7, #3]
 800848e:	701a      	strb	r2, [r3, #0]
 8008490:	bf00      	nop
 8008492:	370c      	adds	r7, #12
 8008494:	46bd      	mov	sp, r7
 8008496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800849a:	4770      	bx	lr

0800849c <wizchip_spi_readbyte>:
 * @brief Default function to read in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//uint8_t wizchip_spi_readbyte(void)        {return 0;};
uint8_t wizchip_spi_readbyte(void)        {return 0;}
 800849c:	b480      	push	{r7}
 800849e:	af00      	add	r7, sp, #0
 80084a0:	2300      	movs	r3, #0
 80084a2:	4618      	mov	r0, r3
 80084a4:	46bd      	mov	sp, r7
 80084a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084aa:	4770      	bx	lr

080084ac <wizchip_spi_writebyte>:
 * @brief Default function to write in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_spi_writebyte(uint8_t wb) {};
void 	wizchip_spi_writebyte(uint8_t wb) {}
 80084ac:	b480      	push	{r7}
 80084ae:	b083      	sub	sp, #12
 80084b0:	af00      	add	r7, sp, #0
 80084b2:	4603      	mov	r3, r0
 80084b4:	71fb      	strb	r3, [r7, #7]
 80084b6:	bf00      	nop
 80084b8:	370c      	adds	r7, #12
 80084ba:	46bd      	mov	sp, r7
 80084bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084c0:	4770      	bx	lr

080084c2 <wizchip_spi_readburst>:
 * @brief Default function to burst read in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_spi_readburst(uint8_t* pBuf, uint16_t len) 	{}; 
void 	wizchip_spi_readburst(uint8_t* pBuf, uint16_t len) 	{}
 80084c2:	b480      	push	{r7}
 80084c4:	b083      	sub	sp, #12
 80084c6:	af00      	add	r7, sp, #0
 80084c8:	6078      	str	r0, [r7, #4]
 80084ca:	460b      	mov	r3, r1
 80084cc:	807b      	strh	r3, [r7, #2]
 80084ce:	bf00      	nop
 80084d0:	370c      	adds	r7, #12
 80084d2:	46bd      	mov	sp, r7
 80084d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084d8:	4770      	bx	lr

080084da <wizchip_spi_writeburst>:
 * @brief Default function to burst write in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_spi_writeburst(uint8_t* pBuf, uint16_t len) {};
void 	wizchip_spi_writeburst(uint8_t* pBuf, uint16_t len) {}
 80084da:	b480      	push	{r7}
 80084dc:	b083      	sub	sp, #12
 80084de:	af00      	add	r7, sp, #0
 80084e0:	6078      	str	r0, [r7, #4]
 80084e2:	460b      	mov	r3, r1
 80084e4:	807b      	strh	r3, [r7, #2]
 80084e6:	bf00      	nop
 80084e8:	370c      	adds	r7, #12
 80084ea:	46bd      	mov	sp, r7
 80084ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084f0:	4770      	bx	lr
	...

080084f4 <reg_wizchip_cris_cbfunc>:

static uint8_t    _DNS_[4];      // DNS server ip address
static dhcp_mode  _DHCP_;        // DHCP mode

void reg_wizchip_cris_cbfunc(void(*cris_en)(void), void(*cris_ex)(void))
{
 80084f4:	b480      	push	{r7}
 80084f6:	b083      	sub	sp, #12
 80084f8:	af00      	add	r7, sp, #0
 80084fa:	6078      	str	r0, [r7, #4]
 80084fc:	6039      	str	r1, [r7, #0]
   if(!cris_en || !cris_ex)
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	2b00      	cmp	r3, #0
 8008502:	d002      	beq.n	800850a <reg_wizchip_cris_cbfunc+0x16>
 8008504:	683b      	ldr	r3, [r7, #0]
 8008506:	2b00      	cmp	r3, #0
 8008508:	d106      	bne.n	8008518 <reg_wizchip_cris_cbfunc+0x24>
   {
      WIZCHIP.CRIS._enter = wizchip_cris_enter;
 800850a:	4b0a      	ldr	r3, [pc, #40]	@ (8008534 <reg_wizchip_cris_cbfunc+0x40>)
 800850c:	4a0a      	ldr	r2, [pc, #40]	@ (8008538 <reg_wizchip_cris_cbfunc+0x44>)
 800850e:	60da      	str	r2, [r3, #12]
      WIZCHIP.CRIS._exit  = wizchip_cris_exit;
 8008510:	4b08      	ldr	r3, [pc, #32]	@ (8008534 <reg_wizchip_cris_cbfunc+0x40>)
 8008512:	4a0a      	ldr	r2, [pc, #40]	@ (800853c <reg_wizchip_cris_cbfunc+0x48>)
 8008514:	611a      	str	r2, [r3, #16]
 8008516:	e006      	b.n	8008526 <reg_wizchip_cris_cbfunc+0x32>
   }
   else
   {
      WIZCHIP.CRIS._enter = cris_en;
 8008518:	4a06      	ldr	r2, [pc, #24]	@ (8008534 <reg_wizchip_cris_cbfunc+0x40>)
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	60d3      	str	r3, [r2, #12]
      WIZCHIP.CRIS._exit  = cris_ex;
 800851e:	4a05      	ldr	r2, [pc, #20]	@ (8008534 <reg_wizchip_cris_cbfunc+0x40>)
 8008520:	683b      	ldr	r3, [r7, #0]
 8008522:	6113      	str	r3, [r2, #16]
   }
}
 8008524:	bf00      	nop
 8008526:	bf00      	nop
 8008528:	370c      	adds	r7, #12
 800852a:	46bd      	mov	sp, r7
 800852c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008530:	4770      	bx	lr
 8008532:	bf00      	nop
 8008534:	200000b4 	.word	0x200000b4
 8008538:	0800842d 	.word	0x0800842d
 800853c:	0800843b 	.word	0x0800843b

08008540 <reg_wizchip_cs_cbfunc>:

void reg_wizchip_cs_cbfunc(void(*cs_sel)(void), void(*cs_desel)(void))
{
 8008540:	b480      	push	{r7}
 8008542:	b083      	sub	sp, #12
 8008544:	af00      	add	r7, sp, #0
 8008546:	6078      	str	r0, [r7, #4]
 8008548:	6039      	str	r1, [r7, #0]
   if(!cs_sel || !cs_desel)
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	2b00      	cmp	r3, #0
 800854e:	d002      	beq.n	8008556 <reg_wizchip_cs_cbfunc+0x16>
 8008550:	683b      	ldr	r3, [r7, #0]
 8008552:	2b00      	cmp	r3, #0
 8008554:	d106      	bne.n	8008564 <reg_wizchip_cs_cbfunc+0x24>
   {
      WIZCHIP.CS._select   = wizchip_cs_select;
 8008556:	4b0a      	ldr	r3, [pc, #40]	@ (8008580 <reg_wizchip_cs_cbfunc+0x40>)
 8008558:	4a0a      	ldr	r2, [pc, #40]	@ (8008584 <reg_wizchip_cs_cbfunc+0x44>)
 800855a:	615a      	str	r2, [r3, #20]
      WIZCHIP.CS._deselect = wizchip_cs_deselect;
 800855c:	4b08      	ldr	r3, [pc, #32]	@ (8008580 <reg_wizchip_cs_cbfunc+0x40>)
 800855e:	4a0a      	ldr	r2, [pc, #40]	@ (8008588 <reg_wizchip_cs_cbfunc+0x48>)
 8008560:	619a      	str	r2, [r3, #24]
 8008562:	e006      	b.n	8008572 <reg_wizchip_cs_cbfunc+0x32>
   }
   else
   {
      WIZCHIP.CS._select   = cs_sel;
 8008564:	4a06      	ldr	r2, [pc, #24]	@ (8008580 <reg_wizchip_cs_cbfunc+0x40>)
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	6153      	str	r3, [r2, #20]
      WIZCHIP.CS._deselect = cs_desel;
 800856a:	4a05      	ldr	r2, [pc, #20]	@ (8008580 <reg_wizchip_cs_cbfunc+0x40>)
 800856c:	683b      	ldr	r3, [r7, #0]
 800856e:	6193      	str	r3, [r2, #24]
   }
}
 8008570:	bf00      	nop
 8008572:	bf00      	nop
 8008574:	370c      	adds	r7, #12
 8008576:	46bd      	mov	sp, r7
 8008578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800857c:	4770      	bx	lr
 800857e:	bf00      	nop
 8008580:	200000b4 	.word	0x200000b4
 8008584:	08008449 	.word	0x08008449
 8008588:	08008457 	.word	0x08008457

0800858c <reg_wizchip_spi_cbfunc>:
      WIZCHIP.IF.BUS._write_data  = bus_wb;
   }
}

void reg_wizchip_spi_cbfunc(uint8_t (*spi_rb)(void), void (*spi_wb)(uint8_t wb))
{
 800858c:	b480      	push	{r7}
 800858e:	b083      	sub	sp, #12
 8008590:	af00      	add	r7, sp, #0
 8008592:	6078      	str	r0, [r7, #4]
 8008594:	6039      	str	r1, [r7, #0]
   while(!(WIZCHIP.if_mode & _WIZCHIP_IO_MODE_SPI_));
 8008596:	bf00      	nop
 8008598:	4b0f      	ldr	r3, [pc, #60]	@ (80085d8 <reg_wizchip_spi_cbfunc+0x4c>)
 800859a:	881b      	ldrh	r3, [r3, #0]
 800859c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	d0f9      	beq.n	8008598 <reg_wizchip_spi_cbfunc+0xc>
   
   if(!spi_rb || !spi_wb)
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d002      	beq.n	80085b0 <reg_wizchip_spi_cbfunc+0x24>
 80085aa:	683b      	ldr	r3, [r7, #0]
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	d106      	bne.n	80085be <reg_wizchip_spi_cbfunc+0x32>
   {
      WIZCHIP.IF.SPI._read_byte   = wizchip_spi_readbyte;
 80085b0:	4b09      	ldr	r3, [pc, #36]	@ (80085d8 <reg_wizchip_spi_cbfunc+0x4c>)
 80085b2:	4a0a      	ldr	r2, [pc, #40]	@ (80085dc <reg_wizchip_spi_cbfunc+0x50>)
 80085b4:	61da      	str	r2, [r3, #28]
      WIZCHIP.IF.SPI._write_byte  = wizchip_spi_writebyte;
 80085b6:	4b08      	ldr	r3, [pc, #32]	@ (80085d8 <reg_wizchip_spi_cbfunc+0x4c>)
 80085b8:	4a09      	ldr	r2, [pc, #36]	@ (80085e0 <reg_wizchip_spi_cbfunc+0x54>)
 80085ba:	621a      	str	r2, [r3, #32]
 80085bc:	e006      	b.n	80085cc <reg_wizchip_spi_cbfunc+0x40>
   }
   else
   {
      WIZCHIP.IF.SPI._read_byte   = spi_rb;
 80085be:	4a06      	ldr	r2, [pc, #24]	@ (80085d8 <reg_wizchip_spi_cbfunc+0x4c>)
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	61d3      	str	r3, [r2, #28]
      WIZCHIP.IF.SPI._write_byte  = spi_wb;
 80085c4:	4a04      	ldr	r2, [pc, #16]	@ (80085d8 <reg_wizchip_spi_cbfunc+0x4c>)
 80085c6:	683b      	ldr	r3, [r7, #0]
 80085c8:	6213      	str	r3, [r2, #32]
   }
}
 80085ca:	bf00      	nop
 80085cc:	bf00      	nop
 80085ce:	370c      	adds	r7, #12
 80085d0:	46bd      	mov	sp, r7
 80085d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085d6:	4770      	bx	lr
 80085d8:	200000b4 	.word	0x200000b4
 80085dc:	0800849d 	.word	0x0800849d
 80085e0:	080084ad 	.word	0x080084ad

080085e4 <reg_wizchip_spiburst_cbfunc>:

// 20140626 Eric Added for SPI burst operations
void reg_wizchip_spiburst_cbfunc(void (*spi_rb)(uint8_t* pBuf, uint16_t len), void (*spi_wb)(uint8_t* pBuf, uint16_t len))
{
 80085e4:	b480      	push	{r7}
 80085e6:	b083      	sub	sp, #12
 80085e8:	af00      	add	r7, sp, #0
 80085ea:	6078      	str	r0, [r7, #4]
 80085ec:	6039      	str	r1, [r7, #0]
   while(!(WIZCHIP.if_mode & _WIZCHIP_IO_MODE_SPI_));
 80085ee:	bf00      	nop
 80085f0:	4b0f      	ldr	r3, [pc, #60]	@ (8008630 <reg_wizchip_spiburst_cbfunc+0x4c>)
 80085f2:	881b      	ldrh	r3, [r3, #0]
 80085f4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	d0f9      	beq.n	80085f0 <reg_wizchip_spiburst_cbfunc+0xc>

   if(!spi_rb || !spi_wb)
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	2b00      	cmp	r3, #0
 8008600:	d002      	beq.n	8008608 <reg_wizchip_spiburst_cbfunc+0x24>
 8008602:	683b      	ldr	r3, [r7, #0]
 8008604:	2b00      	cmp	r3, #0
 8008606:	d106      	bne.n	8008616 <reg_wizchip_spiburst_cbfunc+0x32>
   {
      WIZCHIP.IF.SPI._read_burst   = wizchip_spi_readburst;
 8008608:	4b09      	ldr	r3, [pc, #36]	@ (8008630 <reg_wizchip_spiburst_cbfunc+0x4c>)
 800860a:	4a0a      	ldr	r2, [pc, #40]	@ (8008634 <reg_wizchip_spiburst_cbfunc+0x50>)
 800860c:	625a      	str	r2, [r3, #36]	@ 0x24
      WIZCHIP.IF.SPI._write_burst  = wizchip_spi_writeburst;
 800860e:	4b08      	ldr	r3, [pc, #32]	@ (8008630 <reg_wizchip_spiburst_cbfunc+0x4c>)
 8008610:	4a09      	ldr	r2, [pc, #36]	@ (8008638 <reg_wizchip_spiburst_cbfunc+0x54>)
 8008612:	629a      	str	r2, [r3, #40]	@ 0x28
 8008614:	e006      	b.n	8008624 <reg_wizchip_spiburst_cbfunc+0x40>
   }
   else
   {
      WIZCHIP.IF.SPI._read_burst   = spi_rb;
 8008616:	4a06      	ldr	r2, [pc, #24]	@ (8008630 <reg_wizchip_spiburst_cbfunc+0x4c>)
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	6253      	str	r3, [r2, #36]	@ 0x24
      WIZCHIP.IF.SPI._write_burst  = spi_wb;
 800861c:	4a04      	ldr	r2, [pc, #16]	@ (8008630 <reg_wizchip_spiburst_cbfunc+0x4c>)
 800861e:	683b      	ldr	r3, [r7, #0]
 8008620:	6293      	str	r3, [r2, #40]	@ 0x28
   }
}
 8008622:	bf00      	nop
 8008624:	bf00      	nop
 8008626:	370c      	adds	r7, #12
 8008628:	46bd      	mov	sp, r7
 800862a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800862e:	4770      	bx	lr
 8008630:	200000b4 	.word	0x200000b4
 8008634:	080084c3 	.word	0x080084c3
 8008638:	080084db 	.word	0x080084db

0800863c <ctlwizchip>:

int8_t ctlwizchip(ctlwizchip_type cwtype, void* arg)
{
 800863c:	b590      	push	{r4, r7, lr}
 800863e:	b087      	sub	sp, #28
 8008640:	af00      	add	r7, sp, #0
 8008642:	4603      	mov	r3, r0
 8008644:	6039      	str	r1, [r7, #0]
 8008646:	71fb      	strb	r3, [r7, #7]
#if	_WIZCHIP_ == W5100S || _WIZCHIP_ == W5200 || _WIZCHIP_ == W5500
   uint8_t tmp = 0;
 8008648:	2300      	movs	r3, #0
 800864a:	75fb      	strb	r3, [r7, #23]
#endif
   uint8_t* ptmp[2] = {0,0};
 800864c:	2300      	movs	r3, #0
 800864e:	60fb      	str	r3, [r7, #12]
 8008650:	2300      	movs	r3, #0
 8008652:	613b      	str	r3, [r7, #16]
   switch(cwtype)
 8008654:	79fb      	ldrb	r3, [r7, #7]
 8008656:	2b0f      	cmp	r3, #15
 8008658:	f200 80c5 	bhi.w	80087e6 <ctlwizchip+0x1aa>
 800865c:	a201      	add	r2, pc, #4	@ (adr r2, 8008664 <ctlwizchip+0x28>)
 800865e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008662:	bf00      	nop
 8008664:	080086a5 	.word	0x080086a5
 8008668:	080086ab 	.word	0x080086ab
 800866c:	080086d7 	.word	0x080086d7
 8008670:	080086cb 	.word	0x080086cb
 8008674:	080086e5 	.word	0x080086e5
 8008678:	080086f1 	.word	0x080086f1
 800867c:	080086ff 	.word	0x080086ff
 8008680:	08008725 	.word	0x08008725
 8008684:	08008747 	.word	0x08008747
 8008688:	0800878b 	.word	0x0800878b
 800868c:	08008791 	.word	0x08008791
 8008690:	08008799 	.word	0x08008799
 8008694:	080087ed 	.word	0x080087ed
 8008698:	080087a1 	.word	0x080087a1
 800869c:	080087af 	.word	0x080087af
 80086a0:	080087cb 	.word	0x080087cb
   {
      case CW_RESET_WIZCHIP:
         wizchip_sw_reset();
 80086a4:	f000 f8e8 	bl	8008878 <wizchip_sw_reset>
         break;
 80086a8:	e0a1      	b.n	80087ee <ctlwizchip+0x1b2>
      case CW_INIT_WIZCHIP:
         if(arg != 0) 
 80086aa:	683b      	ldr	r3, [r7, #0]
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	d004      	beq.n	80086ba <ctlwizchip+0x7e>
         {
            ptmp[0] = (uint8_t*)arg;
 80086b0:	683b      	ldr	r3, [r7, #0]
 80086b2:	60fb      	str	r3, [r7, #12]
            ptmp[1] = ptmp[0] + _WIZCHIP_SOCK_NUM_;
 80086b4:	68fb      	ldr	r3, [r7, #12]
 80086b6:	3308      	adds	r3, #8
 80086b8:	613b      	str	r3, [r7, #16]
         }
         return wizchip_init(ptmp[0], ptmp[1]);
 80086ba:	68fb      	ldr	r3, [r7, #12]
 80086bc:	693a      	ldr	r2, [r7, #16]
 80086be:	4611      	mov	r1, r2
 80086c0:	4618      	mov	r0, r3
 80086c2:	f000 f925 	bl	8008910 <wizchip_init>
 80086c6:	4603      	mov	r3, r0
 80086c8:	e092      	b.n	80087f0 <ctlwizchip+0x1b4>
      case CW_CLR_INTERRUPT:
         wizchip_clrinterrupt(*((intr_kind*)arg));
 80086ca:	683b      	ldr	r3, [r7, #0]
 80086cc:	881b      	ldrh	r3, [r3, #0]
 80086ce:	4618      	mov	r0, r3
 80086d0:	f000 f9aa 	bl	8008a28 <wizchip_clrinterrupt>
         break;
 80086d4:	e08b      	b.n	80087ee <ctlwizchip+0x1b2>
      case CW_GET_INTERRUPT:
        *((intr_kind*)arg) = wizchip_getinterrupt();
 80086d6:	f000 f9db 	bl	8008a90 <wizchip_getinterrupt>
 80086da:	4603      	mov	r3, r0
 80086dc:	461a      	mov	r2, r3
 80086de:	683b      	ldr	r3, [r7, #0]
 80086e0:	801a      	strh	r2, [r3, #0]
         break;
 80086e2:	e084      	b.n	80087ee <ctlwizchip+0x1b2>
      case CW_SET_INTRMASK:
         wizchip_setinterruptmask(*((intr_kind*)arg));
 80086e4:	683b      	ldr	r3, [r7, #0]
 80086e6:	881b      	ldrh	r3, [r3, #0]
 80086e8:	4618      	mov	r0, r3
 80086ea:	f000 f9f6 	bl	8008ada <wizchip_setinterruptmask>
         break;         
 80086ee:	e07e      	b.n	80087ee <ctlwizchip+0x1b2>
      case CW_GET_INTRMASK:
         *((intr_kind*)arg) = wizchip_getinterruptmask();
 80086f0:	f000 fa0e 	bl	8008b10 <wizchip_getinterruptmask>
 80086f4:	4603      	mov	r3, r0
 80086f6:	461a      	mov	r2, r3
 80086f8:	683b      	ldr	r3, [r7, #0]
 80086fa:	801a      	strh	r2, [r3, #0]
         break;
 80086fc:	e077      	b.n	80087ee <ctlwizchip+0x1b2>
   //M20150601 : This can be supported by W5200, W5500
   //#if _WIZCHIP_ > W5100
   #if (_WIZCHIP_ == W5200 || _WIZCHIP_ == W5500)
      case CW_SET_INTRTIME:
         setINTLEVEL(*(uint16_t*)arg);
 80086fe:	683b      	ldr	r3, [r7, #0]
 8008700:	881b      	ldrh	r3, [r3, #0]
 8008702:	0a1b      	lsrs	r3, r3, #8
 8008704:	b29b      	uxth	r3, r3
 8008706:	b2db      	uxtb	r3, r3
 8008708:	4619      	mov	r1, r3
 800870a:	f44f 5098 	mov.w	r0, #4864	@ 0x1300
 800870e:	f7fe fb11 	bl	8006d34 <WIZCHIP_WRITE>
 8008712:	683b      	ldr	r3, [r7, #0]
 8008714:	881b      	ldrh	r3, [r3, #0]
 8008716:	b2db      	uxtb	r3, r3
 8008718:	4619      	mov	r1, r3
 800871a:	f44f 50a0 	mov.w	r0, #5120	@ 0x1400
 800871e:	f7fe fb09 	bl	8006d34 <WIZCHIP_WRITE>
         break;
 8008722:	e064      	b.n	80087ee <ctlwizchip+0x1b2>
      case CW_GET_INTRTIME:
         *(uint16_t*)arg = getINTLEVEL();
 8008724:	f44f 5098 	mov.w	r0, #4864	@ 0x1300
 8008728:	f7fe fab8 	bl	8006c9c <WIZCHIP_READ>
 800872c:	4603      	mov	r3, r0
 800872e:	021b      	lsls	r3, r3, #8
 8008730:	b29c      	uxth	r4, r3
 8008732:	f44f 50a0 	mov.w	r0, #5120	@ 0x1400
 8008736:	f7fe fab1 	bl	8006c9c <WIZCHIP_READ>
 800873a:	4603      	mov	r3, r0
 800873c:	4423      	add	r3, r4
 800873e:	b29a      	uxth	r2, r3
 8008740:	683b      	ldr	r3, [r7, #0]
 8008742:	801a      	strh	r2, [r3, #0]
         break;
 8008744:	e053      	b.n	80087ee <ctlwizchip+0x1b2>
   #endif
      case CW_GET_ID:
         ((uint8_t*)arg)[0] = WIZCHIP.id[0];
 8008746:	4b2c      	ldr	r3, [pc, #176]	@ (80087f8 <ctlwizchip+0x1bc>)
 8008748:	789a      	ldrb	r2, [r3, #2]
 800874a:	683b      	ldr	r3, [r7, #0]
 800874c:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[1] = WIZCHIP.id[1];
 800874e:	683b      	ldr	r3, [r7, #0]
 8008750:	3301      	adds	r3, #1
 8008752:	4a29      	ldr	r2, [pc, #164]	@ (80087f8 <ctlwizchip+0x1bc>)
 8008754:	78d2      	ldrb	r2, [r2, #3]
 8008756:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[2] = WIZCHIP.id[2];
 8008758:	683b      	ldr	r3, [r7, #0]
 800875a:	3302      	adds	r3, #2
 800875c:	4a26      	ldr	r2, [pc, #152]	@ (80087f8 <ctlwizchip+0x1bc>)
 800875e:	7912      	ldrb	r2, [r2, #4]
 8008760:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[3] = WIZCHIP.id[3];
 8008762:	683b      	ldr	r3, [r7, #0]
 8008764:	3303      	adds	r3, #3
 8008766:	4a24      	ldr	r2, [pc, #144]	@ (80087f8 <ctlwizchip+0x1bc>)
 8008768:	7952      	ldrb	r2, [r2, #5]
 800876a:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[4] = WIZCHIP.id[4];
 800876c:	683b      	ldr	r3, [r7, #0]
 800876e:	3304      	adds	r3, #4
 8008770:	4a21      	ldr	r2, [pc, #132]	@ (80087f8 <ctlwizchip+0x1bc>)
 8008772:	7992      	ldrb	r2, [r2, #6]
 8008774:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[5] = WIZCHIP.id[5];
 8008776:	683b      	ldr	r3, [r7, #0]
 8008778:	3305      	adds	r3, #5
 800877a:	4a1f      	ldr	r2, [pc, #124]	@ (80087f8 <ctlwizchip+0x1bc>)
 800877c:	79d2      	ldrb	r2, [r2, #7]
 800877e:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[6] = 0;
 8008780:	683b      	ldr	r3, [r7, #0]
 8008782:	3306      	adds	r3, #6
 8008784:	2200      	movs	r2, #0
 8008786:	701a      	strb	r2, [r3, #0]
         break;
 8008788:	e031      	b.n	80087ee <ctlwizchip+0x1b2>

   #if _WIZCHIP_ == W5100S || _WIZCHIP_ == W5500
      case CW_RESET_PHY:
         wizphy_reset();
 800878a:	f000 fa13 	bl	8008bb4 <wizphy_reset>
         break;
 800878e:	e02e      	b.n	80087ee <ctlwizchip+0x1b2>
      case CW_SET_PHYCONF:
         wizphy_setphyconf((wiz_PhyConf*)arg);
 8008790:	6838      	ldr	r0, [r7, #0]
 8008792:	f000 fa36 	bl	8008c02 <wizphy_setphyconf>
         break;
 8008796:	e02a      	b.n	80087ee <ctlwizchip+0x1b2>
      case CW_GET_PHYCONF:
         wizphy_getphyconf((wiz_PhyConf*)arg);
 8008798:	6838      	ldr	r0, [r7, #0]
 800879a:	f000 fa75 	bl	8008c88 <wizphy_getphyconf>
         break;
 800879e:	e026      	b.n	80087ee <ctlwizchip+0x1b2>
      case CW_GET_PHYSTATUS:
         break;
      case CW_SET_PHYPOWMODE:
         return wizphy_setphypmode(*(uint8_t*)arg);
 80087a0:	683b      	ldr	r3, [r7, #0]
 80087a2:	781b      	ldrb	r3, [r3, #0]
 80087a4:	4618      	mov	r0, r3
 80087a6:	f000 fad9 	bl	8008d5c <wizphy_setphypmode>
 80087aa:	4603      	mov	r3, r0
 80087ac:	e020      	b.n	80087f0 <ctlwizchip+0x1b4>
   #endif
   #if _WIZCHIP_ == W5100S || _WIZCHIP_ == W5200 || _WIZCHIP_ == W5500
      case CW_GET_PHYPOWMODE:
         tmp = wizphy_getphypmode();
 80087ae:	f000 f9e8 	bl	8008b82 <wizphy_getphypmode>
 80087b2:	4603      	mov	r3, r0
 80087b4:	75fb      	strb	r3, [r7, #23]
         if((int8_t)tmp == -1) return -1;
 80087b6:	7dfb      	ldrb	r3, [r7, #23]
 80087b8:	2bff      	cmp	r3, #255	@ 0xff
 80087ba:	d102      	bne.n	80087c2 <ctlwizchip+0x186>
 80087bc:	f04f 33ff 	mov.w	r3, #4294967295
 80087c0:	e016      	b.n	80087f0 <ctlwizchip+0x1b4>
         *(uint8_t*)arg = tmp;
 80087c2:	683b      	ldr	r3, [r7, #0]
 80087c4:	7dfa      	ldrb	r2, [r7, #23]
 80087c6:	701a      	strb	r2, [r3, #0]
         break;
 80087c8:	e011      	b.n	80087ee <ctlwizchip+0x1b2>
      case CW_GET_PHYLINK:
         tmp = wizphy_getphylink();
 80087ca:	f000 f9c4 	bl	8008b56 <wizphy_getphylink>
 80087ce:	4603      	mov	r3, r0
 80087d0:	75fb      	strb	r3, [r7, #23]
         if((int8_t)tmp == -1) return -1;
 80087d2:	7dfb      	ldrb	r3, [r7, #23]
 80087d4:	2bff      	cmp	r3, #255	@ 0xff
 80087d6:	d102      	bne.n	80087de <ctlwizchip+0x1a2>
 80087d8:	f04f 33ff 	mov.w	r3, #4294967295
 80087dc:	e008      	b.n	80087f0 <ctlwizchip+0x1b4>
         *(uint8_t*)arg = tmp;
 80087de:	683b      	ldr	r3, [r7, #0]
 80087e0:	7dfa      	ldrb	r2, [r7, #23]
 80087e2:	701a      	strb	r2, [r3, #0]
         break;
 80087e4:	e003      	b.n	80087ee <ctlwizchip+0x1b2>
   #endif      
      default:
         return -1;
 80087e6:	f04f 33ff 	mov.w	r3, #4294967295
 80087ea:	e001      	b.n	80087f0 <ctlwizchip+0x1b4>
         break;
 80087ec:	bf00      	nop
   }
   return 0;
 80087ee:	2300      	movs	r3, #0
}
 80087f0:	4618      	mov	r0, r3
 80087f2:	371c      	adds	r7, #28
 80087f4:	46bd      	mov	sp, r7
 80087f6:	bd90      	pop	{r4, r7, pc}
 80087f8:	200000b4 	.word	0x200000b4

080087fc <ctlnetwork>:


int8_t ctlnetwork(ctlnetwork_type cntype, void* arg)
{
 80087fc:	b580      	push	{r7, lr}
 80087fe:	b082      	sub	sp, #8
 8008800:	af00      	add	r7, sp, #0
 8008802:	4603      	mov	r3, r0
 8008804:	6039      	str	r1, [r7, #0]
 8008806:	71fb      	strb	r3, [r7, #7]
   
   switch(cntype)
 8008808:	79fb      	ldrb	r3, [r7, #7]
 800880a:	2b05      	cmp	r3, #5
 800880c:	d82c      	bhi.n	8008868 <ctlnetwork+0x6c>
 800880e:	a201      	add	r2, pc, #4	@ (adr r2, 8008814 <ctlnetwork+0x18>)
 8008810:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008814:	0800882d 	.word	0x0800882d
 8008818:	08008835 	.word	0x08008835
 800881c:	0800883d 	.word	0x0800883d
 8008820:	0800884b 	.word	0x0800884b
 8008824:	08008859 	.word	0x08008859
 8008828:	08008861 	.word	0x08008861
   {
      case CN_SET_NETINFO:
         wizchip_setnetinfo((wiz_NetInfo*)arg);
 800882c:	6838      	ldr	r0, [r7, #0]
 800882e:	f000 fadf 	bl	8008df0 <wizchip_setnetinfo>
         break;
 8008832:	e01c      	b.n	800886e <ctlnetwork+0x72>
      case CN_GET_NETINFO:
         wizchip_getnetinfo((wiz_NetInfo*)arg);
 8008834:	6838      	ldr	r0, [r7, #0]
 8008836:	f000 fb1b 	bl	8008e70 <wizchip_getnetinfo>
         break;
 800883a:	e018      	b.n	800886e <ctlnetwork+0x72>
      case CN_SET_NETMODE:
         return wizchip_setnetmode(*(netmode_type*)arg);
 800883c:	683b      	ldr	r3, [r7, #0]
 800883e:	781b      	ldrb	r3, [r3, #0]
 8008840:	4618      	mov	r0, r3
 8008842:	f000 fb55 	bl	8008ef0 <wizchip_setnetmode>
 8008846:	4603      	mov	r3, r0
 8008848:	e012      	b.n	8008870 <ctlnetwork+0x74>
      case CN_GET_NETMODE:
         *(netmode_type*)arg = wizchip_getnetmode();
 800884a:	f000 fb73 	bl	8008f34 <wizchip_getnetmode>
 800884e:	4603      	mov	r3, r0
 8008850:	461a      	mov	r2, r3
 8008852:	683b      	ldr	r3, [r7, #0]
 8008854:	701a      	strb	r2, [r3, #0]
         break;
 8008856:	e00a      	b.n	800886e <ctlnetwork+0x72>
      case CN_SET_TIMEOUT:
         wizchip_settimeout((wiz_NetTimeout*)arg);
 8008858:	6838      	ldr	r0, [r7, #0]
 800885a:	f000 fb73 	bl	8008f44 <wizchip_settimeout>
         break;
 800885e:	e006      	b.n	800886e <ctlnetwork+0x72>
      case CN_GET_TIMEOUT:
         wizchip_gettimeout((wiz_NetTimeout*)arg);
 8008860:	6838      	ldr	r0, [r7, #0]
 8008862:	f000 fb90 	bl	8008f86 <wizchip_gettimeout>
         break;
 8008866:	e002      	b.n	800886e <ctlnetwork+0x72>
      default:
         return -1;
 8008868:	f04f 33ff 	mov.w	r3, #4294967295
 800886c:	e000      	b.n	8008870 <ctlnetwork+0x74>
   }
   return 0;
 800886e:	2300      	movs	r3, #0
}
 8008870:	4618      	mov	r0, r3
 8008872:	3708      	adds	r7, #8
 8008874:	46bd      	mov	sp, r7
 8008876:	bd80      	pop	{r7, pc}

08008878 <wizchip_sw_reset>:

void wizchip_sw_reset(void)
{
 8008878:	b580      	push	{r7, lr}
 800887a:	b086      	sub	sp, #24
 800887c:	af00      	add	r7, sp, #0
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   uint16_t mr = (uint16_t)getMR();
   setMR(mr | MR_IND);
#endif
//
   getSHAR(mac);
 800887e:	1d3b      	adds	r3, r7, #4
 8008880:	2206      	movs	r2, #6
 8008882:	4619      	mov	r1, r3
 8008884:	f44f 6010 	mov.w	r0, #2304	@ 0x900
 8008888:	f7fe faa2 	bl	8006dd0 <WIZCHIP_READ_BUF>
   getGAR(gw);  getSUBR(sn);  getSIPR(sip);
 800888c:	f107 0314 	add.w	r3, r7, #20
 8008890:	2204      	movs	r2, #4
 8008892:	4619      	mov	r1, r3
 8008894:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8008898:	f7fe fa9a 	bl	8006dd0 <WIZCHIP_READ_BUF>
 800889c:	f107 0310 	add.w	r3, r7, #16
 80088a0:	2204      	movs	r2, #4
 80088a2:	4619      	mov	r1, r3
 80088a4:	f44f 60a0 	mov.w	r0, #1280	@ 0x500
 80088a8:	f7fe fa92 	bl	8006dd0 <WIZCHIP_READ_BUF>
 80088ac:	f107 030c 	add.w	r3, r7, #12
 80088b0:	2204      	movs	r2, #4
 80088b2:	4619      	mov	r1, r3
 80088b4:	f44f 6070 	mov.w	r0, #3840	@ 0xf00
 80088b8:	f7fe fa8a 	bl	8006dd0 <WIZCHIP_READ_BUF>
   setMR(MR_RST);
 80088bc:	2180      	movs	r1, #128	@ 0x80
 80088be:	2000      	movs	r0, #0
 80088c0:	f7fe fa38 	bl	8006d34 <WIZCHIP_WRITE>
   getMR(); // for delay
 80088c4:	2000      	movs	r0, #0
 80088c6:	f7fe f9e9 	bl	8006c9c <WIZCHIP_READ>
//A2015051 : For indirect bus mode 
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   setMR(mr | MR_IND);
#endif
//
   setSHAR(mac);
 80088ca:	1d3b      	adds	r3, r7, #4
 80088cc:	2206      	movs	r2, #6
 80088ce:	4619      	mov	r1, r3
 80088d0:	f44f 6010 	mov.w	r0, #2304	@ 0x900
 80088d4:	f7fe fadc 	bl	8006e90 <WIZCHIP_WRITE_BUF>
   setGAR(gw);
 80088d8:	f107 0314 	add.w	r3, r7, #20
 80088dc:	2204      	movs	r2, #4
 80088de:	4619      	mov	r1, r3
 80088e0:	f44f 7080 	mov.w	r0, #256	@ 0x100
 80088e4:	f7fe fad4 	bl	8006e90 <WIZCHIP_WRITE_BUF>
   setSUBR(sn);
 80088e8:	f107 0310 	add.w	r3, r7, #16
 80088ec:	2204      	movs	r2, #4
 80088ee:	4619      	mov	r1, r3
 80088f0:	f44f 60a0 	mov.w	r0, #1280	@ 0x500
 80088f4:	f7fe facc 	bl	8006e90 <WIZCHIP_WRITE_BUF>
   setSIPR(sip);
 80088f8:	f107 030c 	add.w	r3, r7, #12
 80088fc:	2204      	movs	r2, #4
 80088fe:	4619      	mov	r1, r3
 8008900:	f44f 6070 	mov.w	r0, #3840	@ 0xf00
 8008904:	f7fe fac4 	bl	8006e90 <WIZCHIP_WRITE_BUF>
}
 8008908:	bf00      	nop
 800890a:	3718      	adds	r7, #24
 800890c:	46bd      	mov	sp, r7
 800890e:	bd80      	pop	{r7, pc}

08008910 <wizchip_init>:

int8_t wizchip_init(uint8_t* txsize, uint8_t* rxsize)
{
 8008910:	b580      	push	{r7, lr}
 8008912:	b084      	sub	sp, #16
 8008914:	af00      	add	r7, sp, #0
 8008916:	6078      	str	r0, [r7, #4]
 8008918:	6039      	str	r1, [r7, #0]
   int8_t i;
#if _WIZCHIP_ < W5200
   int8_t j;
#endif
   int8_t tmp = 0;
 800891a:	2300      	movs	r3, #0
 800891c:	73bb      	strb	r3, [r7, #14]
   wizchip_sw_reset();
 800891e:	f7ff ffab 	bl	8008878 <wizchip_sw_reset>
   if(txsize)
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	2b00      	cmp	r3, #0
 8008926:	d03b      	beq.n	80089a0 <wizchip_init+0x90>
   {
      tmp = 0;
 8008928:	2300      	movs	r3, #0
 800892a:	73bb      	strb	r3, [r7, #14]
			tmp += txsize[i];
			if(tmp > 128) return -1;
		}
		if(tmp % 8) return -1;
#else
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 800892c:	2300      	movs	r3, #0
 800892e:	73fb      	strb	r3, [r7, #15]
 8008930:	e015      	b.n	800895e <wizchip_init+0x4e>
		{
			tmp += txsize[i];
 8008932:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008936:	687a      	ldr	r2, [r7, #4]
 8008938:	4413      	add	r3, r2
 800893a:	781a      	ldrb	r2, [r3, #0]
 800893c:	7bbb      	ldrb	r3, [r7, #14]
 800893e:	4413      	add	r3, r2
 8008940:	b2db      	uxtb	r3, r3
 8008942:	73bb      	strb	r3, [r7, #14]

#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100 and w5100s
			if(tmp > 8) return -1;
#else
			if(tmp > 16) return -1;
 8008944:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008948:	2b10      	cmp	r3, #16
 800894a:	dd02      	ble.n	8008952 <wizchip_init+0x42>
 800894c:	f04f 33ff 	mov.w	r3, #4294967295
 8008950:	e066      	b.n	8008a20 <wizchip_init+0x110>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8008952:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008956:	b2db      	uxtb	r3, r3
 8008958:	3301      	adds	r3, #1
 800895a:	b2db      	uxtb	r3, r3
 800895c:	73fb      	strb	r3, [r7, #15]
 800895e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008962:	2b07      	cmp	r3, #7
 8008964:	dde5      	ble.n	8008932 <wizchip_init+0x22>
#endif
		}
#endif
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8008966:	2300      	movs	r3, #0
 8008968:	73fb      	strb	r3, [r7, #15]
 800896a:	e015      	b.n	8008998 <wizchip_init+0x88>
#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100
			j = 0;
			while((txsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
			setSn_TXBUF_SIZE(i, j);
#else
			setSn_TXBUF_SIZE(i, txsize[i]);
 800896c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008970:	009b      	lsls	r3, r3, #2
 8008972:	3301      	adds	r3, #1
 8008974:	00db      	lsls	r3, r3, #3
 8008976:	f503 53f8 	add.w	r3, r3, #7936	@ 0x1f00
 800897a:	4618      	mov	r0, r3
 800897c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008980:	687a      	ldr	r2, [r7, #4]
 8008982:	4413      	add	r3, r2
 8008984:	781b      	ldrb	r3, [r3, #0]
 8008986:	4619      	mov	r1, r3
 8008988:	f7fe f9d4 	bl	8006d34 <WIZCHIP_WRITE>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 800898c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008990:	b2db      	uxtb	r3, r3
 8008992:	3301      	adds	r3, #1
 8008994:	b2db      	uxtb	r3, r3
 8008996:	73fb      	strb	r3, [r7, #15]
 8008998:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800899c:	2b07      	cmp	r3, #7
 800899e:	dde5      	ble.n	800896c <wizchip_init+0x5c>
#endif
		}	
   }

   if(rxsize)
 80089a0:	683b      	ldr	r3, [r7, #0]
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	d03b      	beq.n	8008a1e <wizchip_init+0x10e>
   {
      tmp = 0;
 80089a6:	2300      	movs	r3, #0
 80089a8:	73bb      	strb	r3, [r7, #14]
			tmp += rxsize[i];
			if(tmp > 128) return -1;
		}
		if(tmp % 8) return -1;
#else
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 80089aa:	2300      	movs	r3, #0
 80089ac:	73fb      	strb	r3, [r7, #15]
 80089ae:	e015      	b.n	80089dc <wizchip_init+0xcc>
		{
			tmp += rxsize[i];
 80089b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80089b4:	683a      	ldr	r2, [r7, #0]
 80089b6:	4413      	add	r3, r2
 80089b8:	781a      	ldrb	r2, [r3, #0]
 80089ba:	7bbb      	ldrb	r3, [r7, #14]
 80089bc:	4413      	add	r3, r2
 80089be:	b2db      	uxtb	r3, r3
 80089c0:	73bb      	strb	r3, [r7, #14]
#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100 and w5100s
			if(tmp > 8) return -1;
#else
			if(tmp > 16) return -1;
 80089c2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80089c6:	2b10      	cmp	r3, #16
 80089c8:	dd02      	ble.n	80089d0 <wizchip_init+0xc0>
 80089ca:	f04f 33ff 	mov.w	r3, #4294967295
 80089ce:	e027      	b.n	8008a20 <wizchip_init+0x110>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 80089d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80089d4:	b2db      	uxtb	r3, r3
 80089d6:	3301      	adds	r3, #1
 80089d8:	b2db      	uxtb	r3, r3
 80089da:	73fb      	strb	r3, [r7, #15]
 80089dc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80089e0:	2b07      	cmp	r3, #7
 80089e2:	dde5      	ble.n	80089b0 <wizchip_init+0xa0>
#endif
		}
#endif
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 80089e4:	2300      	movs	r3, #0
 80089e6:	73fb      	strb	r3, [r7, #15]
 80089e8:	e015      	b.n	8008a16 <wizchip_init+0x106>
#if _WIZCHIP_ < W5200	// add condition for w5100
			j = 0;
			while((rxsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
			setSn_RXBUF_SIZE(i, j);
#else
			setSn_RXBUF_SIZE(i, rxsize[i]);
 80089ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80089ee:	009b      	lsls	r3, r3, #2
 80089f0:	3301      	adds	r3, #1
 80089f2:	00db      	lsls	r3, r3, #3
 80089f4:	f503 53f0 	add.w	r3, r3, #7680	@ 0x1e00
 80089f8:	4618      	mov	r0, r3
 80089fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80089fe:	683a      	ldr	r2, [r7, #0]
 8008a00:	4413      	add	r3, r2
 8008a02:	781b      	ldrb	r3, [r3, #0]
 8008a04:	4619      	mov	r1, r3
 8008a06:	f7fe f995 	bl	8006d34 <WIZCHIP_WRITE>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8008a0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008a0e:	b2db      	uxtb	r3, r3
 8008a10:	3301      	adds	r3, #1
 8008a12:	b2db      	uxtb	r3, r3
 8008a14:	73fb      	strb	r3, [r7, #15]
 8008a16:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008a1a:	2b07      	cmp	r3, #7
 8008a1c:	dde5      	ble.n	80089ea <wizchip_init+0xda>
#endif
		}
   }
   return 0;
 8008a1e:	2300      	movs	r3, #0
}
 8008a20:	4618      	mov	r0, r3
 8008a22:	3710      	adds	r7, #16
 8008a24:	46bd      	mov	sp, r7
 8008a26:	bd80      	pop	{r7, pc}

08008a28 <wizchip_clrinterrupt>:

void wizchip_clrinterrupt(intr_kind intr)
{
 8008a28:	b580      	push	{r7, lr}
 8008a2a:	b084      	sub	sp, #16
 8008a2c:	af00      	add	r7, sp, #0
 8008a2e:	4603      	mov	r3, r0
 8008a30:	80fb      	strh	r3, [r7, #6]
   uint8_t ir  = (uint8_t)intr;
 8008a32:	88fb      	ldrh	r3, [r7, #6]
 8008a34:	73fb      	strb	r3, [r7, #15]
   uint8_t sir = (uint8_t)((uint16_t)intr >> 8);
 8008a36:	88fb      	ldrh	r3, [r7, #6]
 8008a38:	0a1b      	lsrs	r3, r3, #8
 8008a3a:	b29b      	uxth	r3, r3
 8008a3c:	73bb      	strb	r3, [r7, #14]
   setIR(ir);
//A20150601 : For integrating with W5300
#elif _WIZCHIP_ == W5300
   setIR( ((((uint16_t)ir) << 8) | (((uint16_t)sir) & 0x00FF)) );
#else
   setIR(ir);
 8008a3e:	7bfb      	ldrb	r3, [r7, #15]
 8008a40:	f023 030f 	bic.w	r3, r3, #15
 8008a44:	b2db      	uxtb	r3, r3
 8008a46:	4619      	mov	r1, r3
 8008a48:	f44f 50a8 	mov.w	r0, #5376	@ 0x1500
 8008a4c:	f7fe f972 	bl	8006d34 <WIZCHIP_WRITE>
//M20200227 : For clear
   //setSIR(sir);
   for(ir=0; ir<8; ir++){
 8008a50:	2300      	movs	r3, #0
 8008a52:	73fb      	strb	r3, [r7, #15]
 8008a54:	e014      	b.n	8008a80 <wizchip_clrinterrupt+0x58>
       if(sir & (0x01 <<ir) ) setSn_IR(ir, 0xff);
 8008a56:	7bba      	ldrb	r2, [r7, #14]
 8008a58:	7bfb      	ldrb	r3, [r7, #15]
 8008a5a:	fa42 f303 	asr.w	r3, r2, r3
 8008a5e:	f003 0301 	and.w	r3, r3, #1
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	d009      	beq.n	8008a7a <wizchip_clrinterrupt+0x52>
 8008a66:	7bfb      	ldrb	r3, [r7, #15]
 8008a68:	009b      	lsls	r3, r3, #2
 8008a6a:	3301      	adds	r3, #1
 8008a6c:	00db      	lsls	r3, r3, #3
 8008a6e:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8008a72:	211f      	movs	r1, #31
 8008a74:	4618      	mov	r0, r3
 8008a76:	f7fe f95d 	bl	8006d34 <WIZCHIP_WRITE>
   for(ir=0; ir<8; ir++){
 8008a7a:	7bfb      	ldrb	r3, [r7, #15]
 8008a7c:	3301      	adds	r3, #1
 8008a7e:	73fb      	strb	r3, [r7, #15]
 8008a80:	7bfb      	ldrb	r3, [r7, #15]
 8008a82:	2b07      	cmp	r3, #7
 8008a84:	d9e7      	bls.n	8008a56 <wizchip_clrinterrupt+0x2e>
   }

#endif   
}
 8008a86:	bf00      	nop
 8008a88:	bf00      	nop
 8008a8a:	3710      	adds	r7, #16
 8008a8c:	46bd      	mov	sp, r7
 8008a8e:	bd80      	pop	{r7, pc}

08008a90 <wizchip_getinterrupt>:

intr_kind wizchip_getinterrupt(void)
{
 8008a90:	b580      	push	{r7, lr}
 8008a92:	b082      	sub	sp, #8
 8008a94:	af00      	add	r7, sp, #0
   uint8_t ir  = 0;
 8008a96:	2300      	movs	r3, #0
 8008a98:	71fb      	strb	r3, [r7, #7]
   uint8_t sir = 0;
 8008a9a:	2300      	movs	r3, #0
 8008a9c:	71bb      	strb	r3, [r7, #6]
   uint16_t ret = 0;
 8008a9e:	2300      	movs	r3, #0
 8008aa0:	80bb      	strh	r3, [r7, #4]
#elif _WIZCHIP_  == W5300
   ret = getIR();
   ir = (uint8_t)(ret >> 8);
   sir = (uint8_t)ret;
#else
   ir  = getIR();
 8008aa2:	f44f 50a8 	mov.w	r0, #5376	@ 0x1500
 8008aa6:	f7fe f8f9 	bl	8006c9c <WIZCHIP_READ>
 8008aaa:	4603      	mov	r3, r0
 8008aac:	f023 030f 	bic.w	r3, r3, #15
 8008ab0:	71fb      	strb	r3, [r7, #7]
   sir = getSIR();
 8008ab2:	f44f 50b8 	mov.w	r0, #5888	@ 0x1700
 8008ab6:	f7fe f8f1 	bl	8006c9c <WIZCHIP_READ>
 8008aba:	4603      	mov	r3, r0
 8008abc:	71bb      	strb	r3, [r7, #6]
   ir &= ~(1<<4); // IK_WOL
#endif
#if _WIZCHIP_ == W5200
   ir &= ~(1 << 6);
#endif
  ret = sir;
 8008abe:	79bb      	ldrb	r3, [r7, #6]
 8008ac0:	80bb      	strh	r3, [r7, #4]
  ret = (ret << 8) + ir;
 8008ac2:	88bb      	ldrh	r3, [r7, #4]
 8008ac4:	021b      	lsls	r3, r3, #8
 8008ac6:	b29a      	uxth	r2, r3
 8008ac8:	79fb      	ldrb	r3, [r7, #7]
 8008aca:	b29b      	uxth	r3, r3
 8008acc:	4413      	add	r3, r2
 8008ace:	80bb      	strh	r3, [r7, #4]
  return (intr_kind)ret;
 8008ad0:	88bb      	ldrh	r3, [r7, #4]
}
 8008ad2:	4618      	mov	r0, r3
 8008ad4:	3708      	adds	r7, #8
 8008ad6:	46bd      	mov	sp, r7
 8008ad8:	bd80      	pop	{r7, pc}

08008ada <wizchip_setinterruptmask>:

void wizchip_setinterruptmask(intr_kind intr)
{
 8008ada:	b580      	push	{r7, lr}
 8008adc:	b084      	sub	sp, #16
 8008ade:	af00      	add	r7, sp, #0
 8008ae0:	4603      	mov	r3, r0
 8008ae2:	80fb      	strh	r3, [r7, #6]
   uint8_t imr  = (uint8_t)intr;
 8008ae4:	88fb      	ldrh	r3, [r7, #6]
 8008ae6:	73fb      	strb	r3, [r7, #15]
   uint8_t simr = (uint8_t)((uint16_t)intr >> 8);
 8008ae8:	88fb      	ldrh	r3, [r7, #6]
 8008aea:	0a1b      	lsrs	r3, r3, #8
 8008aec:	b29b      	uxth	r3, r3
 8008aee:	73bb      	strb	r3, [r7, #14]
   setIMR(imr);
//A20150601 : For integrating with W5300
#elif _WIZCHIP_ == W5300
   setIMR( ((((uint16_t)imr) << 8) | (((uint16_t)simr) & 0x00FF)) );
#else
   setIMR(imr);
 8008af0:	7bfb      	ldrb	r3, [r7, #15]
 8008af2:	4619      	mov	r1, r3
 8008af4:	f44f 50b0 	mov.w	r0, #5632	@ 0x1600
 8008af8:	f7fe f91c 	bl	8006d34 <WIZCHIP_WRITE>
   setSIMR(simr);
 8008afc:	7bbb      	ldrb	r3, [r7, #14]
 8008afe:	4619      	mov	r1, r3
 8008b00:	f44f 50c0 	mov.w	r0, #6144	@ 0x1800
 8008b04:	f7fe f916 	bl	8006d34 <WIZCHIP_WRITE>
#endif   
}
 8008b08:	bf00      	nop
 8008b0a:	3710      	adds	r7, #16
 8008b0c:	46bd      	mov	sp, r7
 8008b0e:	bd80      	pop	{r7, pc}

08008b10 <wizchip_getinterruptmask>:

intr_kind wizchip_getinterruptmask(void)
{
 8008b10:	b580      	push	{r7, lr}
 8008b12:	b082      	sub	sp, #8
 8008b14:	af00      	add	r7, sp, #0
   uint8_t imr  = 0;
 8008b16:	2300      	movs	r3, #0
 8008b18:	71fb      	strb	r3, [r7, #7]
   uint8_t simr = 0;
 8008b1a:	2300      	movs	r3, #0
 8008b1c:	71bb      	strb	r3, [r7, #6]
   uint16_t ret = 0;
 8008b1e:	2300      	movs	r3, #0
 8008b20:	80bb      	strh	r3, [r7, #4]
#elif _WIZCHIP_ == W5300
   ret = getIMR();
   imr = (uint8_t)(ret >> 8);
   simr = (uint8_t)ret;
#else
   imr  = getIMR();
 8008b22:	f44f 50b0 	mov.w	r0, #5632	@ 0x1600
 8008b26:	f7fe f8b9 	bl	8006c9c <WIZCHIP_READ>
 8008b2a:	4603      	mov	r3, r0
 8008b2c:	71fb      	strb	r3, [r7, #7]
   simr = getSIMR();
 8008b2e:	f44f 50c0 	mov.w	r0, #6144	@ 0x1800
 8008b32:	f7fe f8b3 	bl	8006c9c <WIZCHIP_READ>
 8008b36:	4603      	mov	r3, r0
 8008b38:	71bb      	strb	r3, [r7, #6]
   imr &= ~(1<<4); // IK_WOL
#endif
#if _WIZCHIP_ == W5200
   imr &= ~(1 << 6);  // IK_DEST_UNREACH
#endif
  ret = simr;
 8008b3a:	79bb      	ldrb	r3, [r7, #6]
 8008b3c:	80bb      	strh	r3, [r7, #4]
  ret = (ret << 8) + imr;
 8008b3e:	88bb      	ldrh	r3, [r7, #4]
 8008b40:	021b      	lsls	r3, r3, #8
 8008b42:	b29a      	uxth	r2, r3
 8008b44:	79fb      	ldrb	r3, [r7, #7]
 8008b46:	b29b      	uxth	r3, r3
 8008b48:	4413      	add	r3, r2
 8008b4a:	80bb      	strh	r3, [r7, #4]
  return (intr_kind)ret;
 8008b4c:	88bb      	ldrh	r3, [r7, #4]
}
 8008b4e:	4618      	mov	r0, r3
 8008b50:	3708      	adds	r7, #8
 8008b52:	46bd      	mov	sp, r7
 8008b54:	bd80      	pop	{r7, pc}

08008b56 <wizphy_getphylink>:

int8_t wizphy_getphylink(void)
{
 8008b56:	b580      	push	{r7, lr}
 8008b58:	b082      	sub	sp, #8
 8008b5a:	af00      	add	r7, sp, #0
   int8_t tmp = PHY_LINK_OFF;
 8008b5c:	2300      	movs	r3, #0
 8008b5e:	71fb      	strb	r3, [r7, #7]
	   tmp = PHY_LINK_ON;
#elif   _WIZCHIP_ == W5200
   if(getPHYSTATUS() & PHYSTATUS_LINK)
      tmp = PHY_LINK_ON;
#elif _WIZCHIP_ == W5500
   if(getPHYCFGR() & PHYCFGR_LNK_ON)
 8008b60:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 8008b64:	f7fe f89a 	bl	8006c9c <WIZCHIP_READ>
 8008b68:	4603      	mov	r3, r0
 8008b6a:	f003 0301 	and.w	r3, r3, #1
 8008b6e:	2b00      	cmp	r3, #0
 8008b70:	d001      	beq.n	8008b76 <wizphy_getphylink+0x20>
      tmp = PHY_LINK_ON;
 8008b72:	2301      	movs	r3, #1
 8008b74:	71fb      	strb	r3, [r7, #7]

#else
   tmp = -1;
#endif
   return tmp;
 8008b76:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 8008b7a:	4618      	mov	r0, r3
 8008b7c:	3708      	adds	r7, #8
 8008b7e:	46bd      	mov	sp, r7
 8008b80:	bd80      	pop	{r7, pc}

08008b82 <wizphy_getphypmode>:

#if _WIZCHIP_ > W5100

int8_t wizphy_getphypmode(void)
{
 8008b82:	b580      	push	{r7, lr}
 8008b84:	b082      	sub	sp, #8
 8008b86:	af00      	add	r7, sp, #0
   int8_t tmp = 0;
 8008b88:	2300      	movs	r3, #0
 8008b8a:	71fb      	strb	r3, [r7, #7]
      if(getPHYSTATUS() & PHYSTATUS_POWERDOWN)
         tmp = PHY_POWER_DOWN;
      else          
         tmp = PHY_POWER_NORM;
   #elif _WIZCHIP_ == 5500
      if((getPHYCFGR() & PHYCFGR_OPMDC_ALLA) == PHYCFGR_OPMDC_PDOWN)
 8008b8c:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 8008b90:	f7fe f884 	bl	8006c9c <WIZCHIP_READ>
 8008b94:	4603      	mov	r3, r0
 8008b96:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008b9a:	2b30      	cmp	r3, #48	@ 0x30
 8008b9c:	d102      	bne.n	8008ba4 <wizphy_getphypmode+0x22>
         tmp = PHY_POWER_DOWN;
 8008b9e:	2301      	movs	r3, #1
 8008ba0:	71fb      	strb	r3, [r7, #7]
 8008ba2:	e001      	b.n	8008ba8 <wizphy_getphypmode+0x26>
      else 
         tmp = PHY_POWER_NORM;
 8008ba4:	2300      	movs	r3, #0
 8008ba6:	71fb      	strb	r3, [r7, #7]
   #else
      tmp = -1;
   #endif
   return tmp;
 8008ba8:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 8008bac:	4618      	mov	r0, r3
 8008bae:	3708      	adds	r7, #8
 8008bb0:	46bd      	mov	sp, r7
 8008bb2:	bd80      	pop	{r7, pc}

08008bb4 <wizphy_reset>:
}

#endif
#if _WIZCHIP_ == W5500
void wizphy_reset(void)
{
 8008bb4:	b580      	push	{r7, lr}
 8008bb6:	b082      	sub	sp, #8
 8008bb8:	af00      	add	r7, sp, #0
   uint8_t tmp = getPHYCFGR();
 8008bba:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 8008bbe:	f7fe f86d 	bl	8006c9c <WIZCHIP_READ>
 8008bc2:	4603      	mov	r3, r0
 8008bc4:	71fb      	strb	r3, [r7, #7]
   tmp &= PHYCFGR_RST;
 8008bc6:	79fb      	ldrb	r3, [r7, #7]
 8008bc8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008bcc:	71fb      	strb	r3, [r7, #7]
   setPHYCFGR(tmp);
 8008bce:	79fb      	ldrb	r3, [r7, #7]
 8008bd0:	4619      	mov	r1, r3
 8008bd2:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 8008bd6:	f7fe f8ad 	bl	8006d34 <WIZCHIP_WRITE>
   tmp = getPHYCFGR();
 8008bda:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 8008bde:	f7fe f85d 	bl	8006c9c <WIZCHIP_READ>
 8008be2:	4603      	mov	r3, r0
 8008be4:	71fb      	strb	r3, [r7, #7]
   tmp |= ~PHYCFGR_RST;
 8008be6:	79fb      	ldrb	r3, [r7, #7]
 8008be8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8008bec:	71fb      	strb	r3, [r7, #7]
   setPHYCFGR(tmp);
 8008bee:	79fb      	ldrb	r3, [r7, #7]
 8008bf0:	4619      	mov	r1, r3
 8008bf2:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 8008bf6:	f7fe f89d 	bl	8006d34 <WIZCHIP_WRITE>
}
 8008bfa:	bf00      	nop
 8008bfc:	3708      	adds	r7, #8
 8008bfe:	46bd      	mov	sp, r7
 8008c00:	bd80      	pop	{r7, pc}

08008c02 <wizphy_setphyconf>:

void wizphy_setphyconf(wiz_PhyConf* phyconf)
{
 8008c02:	b580      	push	{r7, lr}
 8008c04:	b084      	sub	sp, #16
 8008c06:	af00      	add	r7, sp, #0
 8008c08:	6078      	str	r0, [r7, #4]
   uint8_t tmp = 0;
 8008c0a:	2300      	movs	r3, #0
 8008c0c:	73fb      	strb	r3, [r7, #15]
   if(phyconf->by == PHY_CONFBY_SW)
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	781b      	ldrb	r3, [r3, #0]
 8008c12:	2b01      	cmp	r3, #1
 8008c14:	d104      	bne.n	8008c20 <wizphy_setphyconf+0x1e>
      tmp |= PHYCFGR_OPMD;
 8008c16:	7bfb      	ldrb	r3, [r7, #15]
 8008c18:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008c1c:	73fb      	strb	r3, [r7, #15]
 8008c1e:	e003      	b.n	8008c28 <wizphy_setphyconf+0x26>
   else
      tmp &= ~PHYCFGR_OPMD;
 8008c20:	7bfb      	ldrb	r3, [r7, #15]
 8008c22:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008c26:	73fb      	strb	r3, [r7, #15]
   if(phyconf->mode == PHY_MODE_AUTONEGO)
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	785b      	ldrb	r3, [r3, #1]
 8008c2c:	2b01      	cmp	r3, #1
 8008c2e:	d104      	bne.n	8008c3a <wizphy_setphyconf+0x38>
      tmp |= PHYCFGR_OPMDC_ALLA;
 8008c30:	7bfb      	ldrb	r3, [r7, #15]
 8008c32:	f043 0338 	orr.w	r3, r3, #56	@ 0x38
 8008c36:	73fb      	strb	r3, [r7, #15]
 8008c38:	e019      	b.n	8008c6e <wizphy_setphyconf+0x6c>
   else
   {
      if(phyconf->duplex == PHY_DUPLEX_FULL)
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	78db      	ldrb	r3, [r3, #3]
 8008c3e:	2b01      	cmp	r3, #1
 8008c40:	d10d      	bne.n	8008c5e <wizphy_setphyconf+0x5c>
      {
         if(phyconf->speed == PHY_SPEED_100)
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	789b      	ldrb	r3, [r3, #2]
 8008c46:	2b01      	cmp	r3, #1
 8008c48:	d104      	bne.n	8008c54 <wizphy_setphyconf+0x52>
            tmp |= PHYCFGR_OPMDC_100F;
 8008c4a:	7bfb      	ldrb	r3, [r7, #15]
 8008c4c:	f043 0318 	orr.w	r3, r3, #24
 8008c50:	73fb      	strb	r3, [r7, #15]
 8008c52:	e00c      	b.n	8008c6e <wizphy_setphyconf+0x6c>
         else
            tmp |= PHYCFGR_OPMDC_10F;
 8008c54:	7bfb      	ldrb	r3, [r7, #15]
 8008c56:	f043 0308 	orr.w	r3, r3, #8
 8008c5a:	73fb      	strb	r3, [r7, #15]
 8008c5c:	e007      	b.n	8008c6e <wizphy_setphyconf+0x6c>
      }   
      else
      {
         if(phyconf->speed == PHY_SPEED_100)
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	789b      	ldrb	r3, [r3, #2]
 8008c62:	2b01      	cmp	r3, #1
 8008c64:	d103      	bne.n	8008c6e <wizphy_setphyconf+0x6c>
            tmp |= PHYCFGR_OPMDC_100H;
 8008c66:	7bfb      	ldrb	r3, [r7, #15]
 8008c68:	f043 0310 	orr.w	r3, r3, #16
 8008c6c:	73fb      	strb	r3, [r7, #15]
         else
            tmp |= PHYCFGR_OPMDC_10H;
      }
   }
   setPHYCFGR(tmp);
 8008c6e:	7bfb      	ldrb	r3, [r7, #15]
 8008c70:	4619      	mov	r1, r3
 8008c72:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 8008c76:	f7fe f85d 	bl	8006d34 <WIZCHIP_WRITE>
   wizphy_reset();
 8008c7a:	f7ff ff9b 	bl	8008bb4 <wizphy_reset>
}
 8008c7e:	bf00      	nop
 8008c80:	3710      	adds	r7, #16
 8008c82:	46bd      	mov	sp, r7
 8008c84:	bd80      	pop	{r7, pc}
	...

08008c88 <wizphy_getphyconf>:

void wizphy_getphyconf(wiz_PhyConf* phyconf)
{
 8008c88:	b580      	push	{r7, lr}
 8008c8a:	b084      	sub	sp, #16
 8008c8c:	af00      	add	r7, sp, #0
 8008c8e:	6078      	str	r0, [r7, #4]
   uint8_t tmp = 0;
 8008c90:	2300      	movs	r3, #0
 8008c92:	73fb      	strb	r3, [r7, #15]
   tmp = getPHYCFGR();
 8008c94:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 8008c98:	f7fe f800 	bl	8006c9c <WIZCHIP_READ>
 8008c9c:	4603      	mov	r3, r0
 8008c9e:	73fb      	strb	r3, [r7, #15]
   phyconf->by   = (tmp & PHYCFGR_OPMD) ? PHY_CONFBY_SW : PHY_CONFBY_HW;
 8008ca0:	7bfb      	ldrb	r3, [r7, #15]
 8008ca2:	119b      	asrs	r3, r3, #6
 8008ca4:	b2db      	uxtb	r3, r3
 8008ca6:	f003 0301 	and.w	r3, r3, #1
 8008caa:	b2da      	uxtb	r2, r3
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	701a      	strb	r2, [r3, #0]
   switch(tmp & PHYCFGR_OPMDC_ALLA)
 8008cb0:	7bfb      	ldrb	r3, [r7, #15]
 8008cb2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008cb6:	2b20      	cmp	r3, #32
 8008cb8:	d001      	beq.n	8008cbe <wizphy_getphyconf+0x36>
 8008cba:	2b38      	cmp	r3, #56	@ 0x38
 8008cbc:	d103      	bne.n	8008cc6 <wizphy_getphyconf+0x3e>
   {
      case PHYCFGR_OPMDC_ALLA:
      case PHYCFGR_OPMDC_100FA: 
         phyconf->mode = PHY_MODE_AUTONEGO;
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	2201      	movs	r2, #1
 8008cc2:	705a      	strb	r2, [r3, #1]
         break;
 8008cc4:	e003      	b.n	8008cce <wizphy_getphyconf+0x46>
      default:
         phyconf->mode = PHY_MODE_MANUAL;
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	2200      	movs	r2, #0
 8008cca:	705a      	strb	r2, [r3, #1]
         break;
 8008ccc:	bf00      	nop
   }
   switch(tmp & PHYCFGR_OPMDC_ALLA)
 8008cce:	7bfb      	ldrb	r3, [r7, #15]
 8008cd0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008cd4:	3b10      	subs	r3, #16
 8008cd6:	2b10      	cmp	r3, #16
 8008cd8:	bf8c      	ite	hi
 8008cda:	2201      	movhi	r2, #1
 8008cdc:	2200      	movls	r2, #0
 8008cde:	b2d2      	uxtb	r2, r2
 8008ce0:	2a00      	cmp	r2, #0
 8008ce2:	d10f      	bne.n	8008d04 <wizphy_getphyconf+0x7c>
 8008ce4:	4a1b      	ldr	r2, [pc, #108]	@ (8008d54 <wizphy_getphyconf+0xcc>)
 8008ce6:	fa22 f303 	lsr.w	r3, r2, r3
 8008cea:	f003 0301 	and.w	r3, r3, #1
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	bf14      	ite	ne
 8008cf2:	2301      	movne	r3, #1
 8008cf4:	2300      	moveq	r3, #0
 8008cf6:	b2db      	uxtb	r3, r3
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	d003      	beq.n	8008d04 <wizphy_getphyconf+0x7c>
   {
      case PHYCFGR_OPMDC_100FA:
      case PHYCFGR_OPMDC_100F:
      case PHYCFGR_OPMDC_100H:
         phyconf->speed = PHY_SPEED_100;
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	2201      	movs	r2, #1
 8008d00:	709a      	strb	r2, [r3, #2]
         break;
 8008d02:	e003      	b.n	8008d0c <wizphy_getphyconf+0x84>
      default:
         phyconf->speed = PHY_SPEED_10;
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	2200      	movs	r2, #0
 8008d08:	709a      	strb	r2, [r3, #2]
         break;
 8008d0a:	bf00      	nop
   }
   switch(tmp & PHYCFGR_OPMDC_ALLA)
 8008d0c:	7bfb      	ldrb	r3, [r7, #15]
 8008d0e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008d12:	3b08      	subs	r3, #8
 8008d14:	2b18      	cmp	r3, #24
 8008d16:	bf8c      	ite	hi
 8008d18:	2201      	movhi	r2, #1
 8008d1a:	2200      	movls	r2, #0
 8008d1c:	b2d2      	uxtb	r2, r2
 8008d1e:	2a00      	cmp	r2, #0
 8008d20:	d10f      	bne.n	8008d42 <wizphy_getphyconf+0xba>
 8008d22:	4a0d      	ldr	r2, [pc, #52]	@ (8008d58 <wizphy_getphyconf+0xd0>)
 8008d24:	fa22 f303 	lsr.w	r3, r2, r3
 8008d28:	f003 0301 	and.w	r3, r3, #1
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	bf14      	ite	ne
 8008d30:	2301      	movne	r3, #1
 8008d32:	2300      	moveq	r3, #0
 8008d34:	b2db      	uxtb	r3, r3
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	d003      	beq.n	8008d42 <wizphy_getphyconf+0xba>
   {
      case PHYCFGR_OPMDC_100FA:
      case PHYCFGR_OPMDC_100F:
      case PHYCFGR_OPMDC_10F:
         phyconf->duplex = PHY_DUPLEX_FULL;
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	2201      	movs	r2, #1
 8008d3e:	70da      	strb	r2, [r3, #3]
         break;
 8008d40:	e003      	b.n	8008d4a <wizphy_getphyconf+0xc2>
      default:
         phyconf->duplex = PHY_DUPLEX_HALF;
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	2200      	movs	r2, #0
 8008d46:	70da      	strb	r2, [r3, #3]
         break;
 8008d48:	bf00      	nop
   }
}
 8008d4a:	bf00      	nop
 8008d4c:	3710      	adds	r7, #16
 8008d4e:	46bd      	mov	sp, r7
 8008d50:	bd80      	pop	{r7, pc}
 8008d52:	bf00      	nop
 8008d54:	00010101 	.word	0x00010101
 8008d58:	01010001 	.word	0x01010001

08008d5c <wizphy_setphypmode>:
   phyconf->duplex = (tmp & PHYCFGR_DPX_FULL) ? PHY_DUPLEX_FULL : PHY_DUPLEX_HALF;
   phyconf->speed  = (tmp & PHYCFGR_SPD_100) ? PHY_SPEED_100 : PHY_SPEED_10;
}

int8_t wizphy_setphypmode(uint8_t pmode)
{
 8008d5c:	b580      	push	{r7, lr}
 8008d5e:	b084      	sub	sp, #16
 8008d60:	af00      	add	r7, sp, #0
 8008d62:	4603      	mov	r3, r0
 8008d64:	71fb      	strb	r3, [r7, #7]
   uint8_t tmp = 0;
 8008d66:	2300      	movs	r3, #0
 8008d68:	73fb      	strb	r3, [r7, #15]
   tmp = getPHYCFGR();
 8008d6a:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 8008d6e:	f7fd ff95 	bl	8006c9c <WIZCHIP_READ>
 8008d72:	4603      	mov	r3, r0
 8008d74:	73fb      	strb	r3, [r7, #15]
   if((tmp & PHYCFGR_OPMD)== 0) return -1;
 8008d76:	7bfb      	ldrb	r3, [r7, #15]
 8008d78:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	d102      	bne.n	8008d86 <wizphy_setphypmode+0x2a>
 8008d80:	f04f 33ff 	mov.w	r3, #4294967295
 8008d84:	e030      	b.n	8008de8 <wizphy_setphypmode+0x8c>
   tmp &= ~PHYCFGR_OPMDC_ALLA;         
 8008d86:	7bfb      	ldrb	r3, [r7, #15]
 8008d88:	f023 0338 	bic.w	r3, r3, #56	@ 0x38
 8008d8c:	73fb      	strb	r3, [r7, #15]
   if( pmode == PHY_POWER_DOWN)
 8008d8e:	79fb      	ldrb	r3, [r7, #7]
 8008d90:	2b01      	cmp	r3, #1
 8008d92:	d104      	bne.n	8008d9e <wizphy_setphypmode+0x42>
      tmp |= PHYCFGR_OPMDC_PDOWN;
 8008d94:	7bfb      	ldrb	r3, [r7, #15]
 8008d96:	f043 0330 	orr.w	r3, r3, #48	@ 0x30
 8008d9a:	73fb      	strb	r3, [r7, #15]
 8008d9c:	e003      	b.n	8008da6 <wizphy_setphypmode+0x4a>
   else
      tmp |= PHYCFGR_OPMDC_ALLA;
 8008d9e:	7bfb      	ldrb	r3, [r7, #15]
 8008da0:	f043 0338 	orr.w	r3, r3, #56	@ 0x38
 8008da4:	73fb      	strb	r3, [r7, #15]
   setPHYCFGR(tmp);
 8008da6:	7bfb      	ldrb	r3, [r7, #15]
 8008da8:	4619      	mov	r1, r3
 8008daa:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 8008dae:	f7fd ffc1 	bl	8006d34 <WIZCHIP_WRITE>
   wizphy_reset();
 8008db2:	f7ff feff 	bl	8008bb4 <wizphy_reset>
   tmp = getPHYCFGR();
 8008db6:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 8008dba:	f7fd ff6f 	bl	8006c9c <WIZCHIP_READ>
 8008dbe:	4603      	mov	r3, r0
 8008dc0:	73fb      	strb	r3, [r7, #15]
   if( pmode == PHY_POWER_DOWN)
 8008dc2:	79fb      	ldrb	r3, [r7, #7]
 8008dc4:	2b01      	cmp	r3, #1
 8008dc6:	d106      	bne.n	8008dd6 <wizphy_setphypmode+0x7a>
   {
      if(tmp & PHYCFGR_OPMDC_PDOWN) return 0;
 8008dc8:	7bfb      	ldrb	r3, [r7, #15]
 8008dca:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	d008      	beq.n	8008de4 <wizphy_setphypmode+0x88>
 8008dd2:	2300      	movs	r3, #0
 8008dd4:	e008      	b.n	8008de8 <wizphy_setphypmode+0x8c>
   }
   else
   {
      if(tmp & PHYCFGR_OPMDC_ALLA) return 0;
 8008dd6:	7bfb      	ldrb	r3, [r7, #15]
 8008dd8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008ddc:	2b00      	cmp	r3, #0
 8008dde:	d001      	beq.n	8008de4 <wizphy_setphypmode+0x88>
 8008de0:	2300      	movs	r3, #0
 8008de2:	e001      	b.n	8008de8 <wizphy_setphypmode+0x8c>
   }
   return -1;
 8008de4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8008de8:	4618      	mov	r0, r3
 8008dea:	3710      	adds	r7, #16
 8008dec:	46bd      	mov	sp, r7
 8008dee:	bd80      	pop	{r7, pc}

08008df0 <wizchip_setnetinfo>:
#endif


void wizchip_setnetinfo(wiz_NetInfo* pnetinfo)
{
 8008df0:	b580      	push	{r7, lr}
 8008df2:	b082      	sub	sp, #8
 8008df4:	af00      	add	r7, sp, #0
 8008df6:	6078      	str	r0, [r7, #4]
   setSHAR(pnetinfo->mac);
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	2206      	movs	r2, #6
 8008dfc:	4619      	mov	r1, r3
 8008dfe:	f44f 6010 	mov.w	r0, #2304	@ 0x900
 8008e02:	f7fe f845 	bl	8006e90 <WIZCHIP_WRITE_BUF>
   setGAR(pnetinfo->gw);
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	330e      	adds	r3, #14
 8008e0a:	2204      	movs	r2, #4
 8008e0c:	4619      	mov	r1, r3
 8008e0e:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8008e12:	f7fe f83d 	bl	8006e90 <WIZCHIP_WRITE_BUF>
   setSUBR(pnetinfo->sn);
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	330a      	adds	r3, #10
 8008e1a:	2204      	movs	r2, #4
 8008e1c:	4619      	mov	r1, r3
 8008e1e:	f44f 60a0 	mov.w	r0, #1280	@ 0x500
 8008e22:	f7fe f835 	bl	8006e90 <WIZCHIP_WRITE_BUF>
   setSIPR(pnetinfo->ip);
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	3306      	adds	r3, #6
 8008e2a:	2204      	movs	r2, #4
 8008e2c:	4619      	mov	r1, r3
 8008e2e:	f44f 6070 	mov.w	r0, #3840	@ 0xf00
 8008e32:	f7fe f82d 	bl	8006e90 <WIZCHIP_WRITE_BUF>
   _DNS_[0] = pnetinfo->dns[0];
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	7c9a      	ldrb	r2, [r3, #18]
 8008e3a:	4b0b      	ldr	r3, [pc, #44]	@ (8008e68 <wizchip_setnetinfo+0x78>)
 8008e3c:	701a      	strb	r2, [r3, #0]
   _DNS_[1] = pnetinfo->dns[1];
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	7cda      	ldrb	r2, [r3, #19]
 8008e42:	4b09      	ldr	r3, [pc, #36]	@ (8008e68 <wizchip_setnetinfo+0x78>)
 8008e44:	705a      	strb	r2, [r3, #1]
   _DNS_[2] = pnetinfo->dns[2];
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	7d1a      	ldrb	r2, [r3, #20]
 8008e4a:	4b07      	ldr	r3, [pc, #28]	@ (8008e68 <wizchip_setnetinfo+0x78>)
 8008e4c:	709a      	strb	r2, [r3, #2]
   _DNS_[3] = pnetinfo->dns[3];
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	7d5a      	ldrb	r2, [r3, #21]
 8008e52:	4b05      	ldr	r3, [pc, #20]	@ (8008e68 <wizchip_setnetinfo+0x78>)
 8008e54:	70da      	strb	r2, [r3, #3]
   _DHCP_   = pnetinfo->dhcp;
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	7d9a      	ldrb	r2, [r3, #22]
 8008e5a:	4b04      	ldr	r3, [pc, #16]	@ (8008e6c <wizchip_setnetinfo+0x7c>)
 8008e5c:	701a      	strb	r2, [r3, #0]
}
 8008e5e:	bf00      	nop
 8008e60:	3708      	adds	r7, #8
 8008e62:	46bd      	mov	sp, r7
 8008e64:	bd80      	pop	{r7, pc}
 8008e66:	bf00      	nop
 8008e68:	20000fb4 	.word	0x20000fb4
 8008e6c:	20000fb8 	.word	0x20000fb8

08008e70 <wizchip_getnetinfo>:

void wizchip_getnetinfo(wiz_NetInfo* pnetinfo)
{
 8008e70:	b580      	push	{r7, lr}
 8008e72:	b082      	sub	sp, #8
 8008e74:	af00      	add	r7, sp, #0
 8008e76:	6078      	str	r0, [r7, #4]
   getSHAR(pnetinfo->mac);
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	2206      	movs	r2, #6
 8008e7c:	4619      	mov	r1, r3
 8008e7e:	f44f 6010 	mov.w	r0, #2304	@ 0x900
 8008e82:	f7fd ffa5 	bl	8006dd0 <WIZCHIP_READ_BUF>
   getGAR(pnetinfo->gw);
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	330e      	adds	r3, #14
 8008e8a:	2204      	movs	r2, #4
 8008e8c:	4619      	mov	r1, r3
 8008e8e:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8008e92:	f7fd ff9d 	bl	8006dd0 <WIZCHIP_READ_BUF>
   getSUBR(pnetinfo->sn);
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	330a      	adds	r3, #10
 8008e9a:	2204      	movs	r2, #4
 8008e9c:	4619      	mov	r1, r3
 8008e9e:	f44f 60a0 	mov.w	r0, #1280	@ 0x500
 8008ea2:	f7fd ff95 	bl	8006dd0 <WIZCHIP_READ_BUF>
   getSIPR(pnetinfo->ip);
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	3306      	adds	r3, #6
 8008eaa:	2204      	movs	r2, #4
 8008eac:	4619      	mov	r1, r3
 8008eae:	f44f 6070 	mov.w	r0, #3840	@ 0xf00
 8008eb2:	f7fd ff8d 	bl	8006dd0 <WIZCHIP_READ_BUF>
   pnetinfo->dns[0]= _DNS_[0];
 8008eb6:	4b0c      	ldr	r3, [pc, #48]	@ (8008ee8 <wizchip_getnetinfo+0x78>)
 8008eb8:	781a      	ldrb	r2, [r3, #0]
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	749a      	strb	r2, [r3, #18]
   pnetinfo->dns[1]= _DNS_[1];
 8008ebe:	4b0a      	ldr	r3, [pc, #40]	@ (8008ee8 <wizchip_getnetinfo+0x78>)
 8008ec0:	785a      	ldrb	r2, [r3, #1]
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	74da      	strb	r2, [r3, #19]
   pnetinfo->dns[2]= _DNS_[2];
 8008ec6:	4b08      	ldr	r3, [pc, #32]	@ (8008ee8 <wizchip_getnetinfo+0x78>)
 8008ec8:	789a      	ldrb	r2, [r3, #2]
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	751a      	strb	r2, [r3, #20]
   pnetinfo->dns[3]= _DNS_[3];
 8008ece:	4b06      	ldr	r3, [pc, #24]	@ (8008ee8 <wizchip_getnetinfo+0x78>)
 8008ed0:	78da      	ldrb	r2, [r3, #3]
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	755a      	strb	r2, [r3, #21]
   pnetinfo->dhcp  = _DHCP_;
 8008ed6:	4b05      	ldr	r3, [pc, #20]	@ (8008eec <wizchip_getnetinfo+0x7c>)
 8008ed8:	781a      	ldrb	r2, [r3, #0]
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	759a      	strb	r2, [r3, #22]
}
 8008ede:	bf00      	nop
 8008ee0:	3708      	adds	r7, #8
 8008ee2:	46bd      	mov	sp, r7
 8008ee4:	bd80      	pop	{r7, pc}
 8008ee6:	bf00      	nop
 8008ee8:	20000fb4 	.word	0x20000fb4
 8008eec:	20000fb8 	.word	0x20000fb8

08008ef0 <wizchip_setnetmode>:

int8_t wizchip_setnetmode(netmode_type netmode)
{
 8008ef0:	b580      	push	{r7, lr}
 8008ef2:	b084      	sub	sp, #16
 8008ef4:	af00      	add	r7, sp, #0
 8008ef6:	4603      	mov	r3, r0
 8008ef8:	71fb      	strb	r3, [r7, #7]
   uint8_t tmp = 0;
 8008efa:	2300      	movs	r3, #0
 8008efc:	73fb      	strb	r3, [r7, #15]
#if _WIZCHIP_ != W5500
   if(netmode & ~(NM_WAKEONLAN | NM_PPPOE | NM_PINGBLOCK)) return -1;
#else
   if(netmode & ~(NM_WAKEONLAN | NM_PPPOE | NM_PINGBLOCK | NM_FORCEARP)) return -1;
 8008efe:	79fb      	ldrb	r3, [r7, #7]
 8008f00:	f023 033a 	bic.w	r3, r3, #58	@ 0x3a
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	d002      	beq.n	8008f0e <wizchip_setnetmode+0x1e>
 8008f08:	f04f 33ff 	mov.w	r3, #4294967295
 8008f0c:	e00e      	b.n	8008f2c <wizchip_setnetmode+0x3c>
#endif      
   tmp = getMR();
 8008f0e:	2000      	movs	r0, #0
 8008f10:	f7fd fec4 	bl	8006c9c <WIZCHIP_READ>
 8008f14:	4603      	mov	r3, r0
 8008f16:	73fb      	strb	r3, [r7, #15]
   tmp |= (uint8_t)netmode;
 8008f18:	7bfa      	ldrb	r2, [r7, #15]
 8008f1a:	79fb      	ldrb	r3, [r7, #7]
 8008f1c:	4313      	orrs	r3, r2
 8008f1e:	73fb      	strb	r3, [r7, #15]
   setMR(tmp);
 8008f20:	7bfb      	ldrb	r3, [r7, #15]
 8008f22:	4619      	mov	r1, r3
 8008f24:	2000      	movs	r0, #0
 8008f26:	f7fd ff05 	bl	8006d34 <WIZCHIP_WRITE>
   return 0;
 8008f2a:	2300      	movs	r3, #0
}
 8008f2c:	4618      	mov	r0, r3
 8008f2e:	3710      	adds	r7, #16
 8008f30:	46bd      	mov	sp, r7
 8008f32:	bd80      	pop	{r7, pc}

08008f34 <wizchip_getnetmode>:

netmode_type wizchip_getnetmode(void)
{
 8008f34:	b580      	push	{r7, lr}
 8008f36:	af00      	add	r7, sp, #0
   return (netmode_type) getMR();
 8008f38:	2000      	movs	r0, #0
 8008f3a:	f7fd feaf 	bl	8006c9c <WIZCHIP_READ>
 8008f3e:	4603      	mov	r3, r0
}
 8008f40:	4618      	mov	r0, r3
 8008f42:	bd80      	pop	{r7, pc}

08008f44 <wizchip_settimeout>:

void wizchip_settimeout(wiz_NetTimeout* nettime)
{
 8008f44:	b580      	push	{r7, lr}
 8008f46:	b082      	sub	sp, #8
 8008f48:	af00      	add	r7, sp, #0
 8008f4a:	6078      	str	r0, [r7, #4]
   setRCR(nettime->retry_cnt);
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	781b      	ldrb	r3, [r3, #0]
 8008f50:	4619      	mov	r1, r3
 8008f52:	f44f 50d8 	mov.w	r0, #6912	@ 0x1b00
 8008f56:	f7fd feed 	bl	8006d34 <WIZCHIP_WRITE>
   setRTR(nettime->time_100us);
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	885b      	ldrh	r3, [r3, #2]
 8008f5e:	0a1b      	lsrs	r3, r3, #8
 8008f60:	b29b      	uxth	r3, r3
 8008f62:	b2db      	uxtb	r3, r3
 8008f64:	4619      	mov	r1, r3
 8008f66:	f44f 50c8 	mov.w	r0, #6400	@ 0x1900
 8008f6a:	f7fd fee3 	bl	8006d34 <WIZCHIP_WRITE>
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	885b      	ldrh	r3, [r3, #2]
 8008f72:	b2db      	uxtb	r3, r3
 8008f74:	4619      	mov	r1, r3
 8008f76:	f44f 50d0 	mov.w	r0, #6656	@ 0x1a00
 8008f7a:	f7fd fedb 	bl	8006d34 <WIZCHIP_WRITE>
}
 8008f7e:	bf00      	nop
 8008f80:	3708      	adds	r7, #8
 8008f82:	46bd      	mov	sp, r7
 8008f84:	bd80      	pop	{r7, pc}

08008f86 <wizchip_gettimeout>:

void wizchip_gettimeout(wiz_NetTimeout* nettime)
{
 8008f86:	b590      	push	{r4, r7, lr}
 8008f88:	b083      	sub	sp, #12
 8008f8a:	af00      	add	r7, sp, #0
 8008f8c:	6078      	str	r0, [r7, #4]
   nettime->retry_cnt = getRCR();
 8008f8e:	f44f 50d8 	mov.w	r0, #6912	@ 0x1b00
 8008f92:	f7fd fe83 	bl	8006c9c <WIZCHIP_READ>
 8008f96:	4603      	mov	r3, r0
 8008f98:	461a      	mov	r2, r3
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	701a      	strb	r2, [r3, #0]
   nettime->time_100us = getRTR();
 8008f9e:	f44f 50c8 	mov.w	r0, #6400	@ 0x1900
 8008fa2:	f7fd fe7b 	bl	8006c9c <WIZCHIP_READ>
 8008fa6:	4603      	mov	r3, r0
 8008fa8:	021b      	lsls	r3, r3, #8
 8008faa:	b29c      	uxth	r4, r3
 8008fac:	f44f 50d0 	mov.w	r0, #6656	@ 0x1a00
 8008fb0:	f7fd fe74 	bl	8006c9c <WIZCHIP_READ>
 8008fb4:	4603      	mov	r3, r0
 8008fb6:	4423      	add	r3, r4
 8008fb8:	b29a      	uxth	r2, r3
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	805a      	strh	r2, [r3, #2]
}
 8008fbe:	bf00      	nop
 8008fc0:	370c      	adds	r7, #12
 8008fc2:	46bd      	mov	sp, r7
 8008fc4:	bd90      	pop	{r4, r7, pc}
	...

08008fc8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8008fc8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8009000 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 8008fcc:	f7fa f820 	bl	8003010 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8008fd0:	480c      	ldr	r0, [pc, #48]	@ (8009004 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8008fd2:	490d      	ldr	r1, [pc, #52]	@ (8009008 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8008fd4:	4a0d      	ldr	r2, [pc, #52]	@ (800900c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8008fd6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8008fd8:	e002      	b.n	8008fe0 <LoopCopyDataInit>

08008fda <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8008fda:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8008fdc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8008fde:	3304      	adds	r3, #4

08008fe0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8008fe0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8008fe2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8008fe4:	d3f9      	bcc.n	8008fda <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8008fe6:	4a0a      	ldr	r2, [pc, #40]	@ (8009010 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8008fe8:	4c0a      	ldr	r4, [pc, #40]	@ (8009014 <LoopFillZerobss+0x22>)
  movs r3, #0
 8008fea:	2300      	movs	r3, #0
  b LoopFillZerobss
 8008fec:	e001      	b.n	8008ff2 <LoopFillZerobss>

08008fee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8008fee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8008ff0:	3204      	adds	r2, #4

08008ff2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8008ff2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8008ff4:	d3fb      	bcc.n	8008fee <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8008ff6:	f005 ff61 	bl	800eebc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8008ffa:	f7f9 f841 	bl	8002080 <main>
  bx  lr    
 8008ffe:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8009000:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8009004:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8009008:	200002b4 	.word	0x200002b4
  ldr r2, =_sidata
 800900c:	080115b0 	.word	0x080115b0
  ldr r2, =_sbss
 8009010:	200002b4 	.word	0x200002b4
  ldr r4, =_ebss
 8009014:	20005af4 	.word	0x20005af4

08009018 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8009018:	e7fe      	b.n	8009018 <ADC_IRQHandler>
	...

0800901c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800901c:	b580      	push	{r7, lr}
 800901e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8009020:	4b0e      	ldr	r3, [pc, #56]	@ (800905c <HAL_Init+0x40>)
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	4a0d      	ldr	r2, [pc, #52]	@ (800905c <HAL_Init+0x40>)
 8009026:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800902a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800902c:	4b0b      	ldr	r3, [pc, #44]	@ (800905c <HAL_Init+0x40>)
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	4a0a      	ldr	r2, [pc, #40]	@ (800905c <HAL_Init+0x40>)
 8009032:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8009036:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8009038:	4b08      	ldr	r3, [pc, #32]	@ (800905c <HAL_Init+0x40>)
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	4a07      	ldr	r2, [pc, #28]	@ (800905c <HAL_Init+0x40>)
 800903e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009042:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8009044:	2003      	movs	r0, #3
 8009046:	f000 f8fc 	bl	8009242 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800904a:	200f      	movs	r0, #15
 800904c:	f7f9 fe82 	bl	8002d54 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8009050:	f7f9 fdc4 	bl	8002bdc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8009054:	2300      	movs	r3, #0
}
 8009056:	4618      	mov	r0, r3
 8009058:	bd80      	pop	{r7, pc}
 800905a:	bf00      	nop
 800905c:	40023c00 	.word	0x40023c00

08009060 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8009060:	b480      	push	{r7}
 8009062:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8009064:	4b06      	ldr	r3, [pc, #24]	@ (8009080 <HAL_IncTick+0x20>)
 8009066:	781b      	ldrb	r3, [r3, #0]
 8009068:	461a      	mov	r2, r3
 800906a:	4b06      	ldr	r3, [pc, #24]	@ (8009084 <HAL_IncTick+0x24>)
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	4413      	add	r3, r2
 8009070:	4a04      	ldr	r2, [pc, #16]	@ (8009084 <HAL_IncTick+0x24>)
 8009072:	6013      	str	r3, [r2, #0]
}
 8009074:	bf00      	nop
 8009076:	46bd      	mov	sp, r7
 8009078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800907c:	4770      	bx	lr
 800907e:	bf00      	nop
 8009080:	200000e4 	.word	0x200000e4
 8009084:	20000fbc 	.word	0x20000fbc

08009088 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8009088:	b480      	push	{r7}
 800908a:	af00      	add	r7, sp, #0
  return uwTick;
 800908c:	4b03      	ldr	r3, [pc, #12]	@ (800909c <HAL_GetTick+0x14>)
 800908e:	681b      	ldr	r3, [r3, #0]
}
 8009090:	4618      	mov	r0, r3
 8009092:	46bd      	mov	sp, r7
 8009094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009098:	4770      	bx	lr
 800909a:	bf00      	nop
 800909c:	20000fbc 	.word	0x20000fbc

080090a0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80090a0:	b580      	push	{r7, lr}
 80090a2:	b084      	sub	sp, #16
 80090a4:	af00      	add	r7, sp, #0
 80090a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80090a8:	f7ff ffee 	bl	8009088 <HAL_GetTick>
 80090ac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80090b2:	68fb      	ldr	r3, [r7, #12]
 80090b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80090b8:	d005      	beq.n	80090c6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80090ba:	4b0a      	ldr	r3, [pc, #40]	@ (80090e4 <HAL_Delay+0x44>)
 80090bc:	781b      	ldrb	r3, [r3, #0]
 80090be:	461a      	mov	r2, r3
 80090c0:	68fb      	ldr	r3, [r7, #12]
 80090c2:	4413      	add	r3, r2
 80090c4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80090c6:	bf00      	nop
 80090c8:	f7ff ffde 	bl	8009088 <HAL_GetTick>
 80090cc:	4602      	mov	r2, r0
 80090ce:	68bb      	ldr	r3, [r7, #8]
 80090d0:	1ad3      	subs	r3, r2, r3
 80090d2:	68fa      	ldr	r2, [r7, #12]
 80090d4:	429a      	cmp	r2, r3
 80090d6:	d8f7      	bhi.n	80090c8 <HAL_Delay+0x28>
  {
  }
}
 80090d8:	bf00      	nop
 80090da:	bf00      	nop
 80090dc:	3710      	adds	r7, #16
 80090de:	46bd      	mov	sp, r7
 80090e0:	bd80      	pop	{r7, pc}
 80090e2:	bf00      	nop
 80090e4:	200000e4 	.word	0x200000e4

080090e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80090e8:	b480      	push	{r7}
 80090ea:	b085      	sub	sp, #20
 80090ec:	af00      	add	r7, sp, #0
 80090ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	f003 0307 	and.w	r3, r3, #7
 80090f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80090f8:	4b0c      	ldr	r3, [pc, #48]	@ (800912c <__NVIC_SetPriorityGrouping+0x44>)
 80090fa:	68db      	ldr	r3, [r3, #12]
 80090fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80090fe:	68ba      	ldr	r2, [r7, #8]
 8009100:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8009104:	4013      	ands	r3, r2
 8009106:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8009108:	68fb      	ldr	r3, [r7, #12]
 800910a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800910c:	68bb      	ldr	r3, [r7, #8]
 800910e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8009110:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8009114:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009118:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800911a:	4a04      	ldr	r2, [pc, #16]	@ (800912c <__NVIC_SetPriorityGrouping+0x44>)
 800911c:	68bb      	ldr	r3, [r7, #8]
 800911e:	60d3      	str	r3, [r2, #12]
}
 8009120:	bf00      	nop
 8009122:	3714      	adds	r7, #20
 8009124:	46bd      	mov	sp, r7
 8009126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800912a:	4770      	bx	lr
 800912c:	e000ed00 	.word	0xe000ed00

08009130 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8009130:	b480      	push	{r7}
 8009132:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8009134:	4b04      	ldr	r3, [pc, #16]	@ (8009148 <__NVIC_GetPriorityGrouping+0x18>)
 8009136:	68db      	ldr	r3, [r3, #12]
 8009138:	0a1b      	lsrs	r3, r3, #8
 800913a:	f003 0307 	and.w	r3, r3, #7
}
 800913e:	4618      	mov	r0, r3
 8009140:	46bd      	mov	sp, r7
 8009142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009146:	4770      	bx	lr
 8009148:	e000ed00 	.word	0xe000ed00

0800914c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800914c:	b480      	push	{r7}
 800914e:	b083      	sub	sp, #12
 8009150:	af00      	add	r7, sp, #0
 8009152:	4603      	mov	r3, r0
 8009154:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009156:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800915a:	2b00      	cmp	r3, #0
 800915c:	db0b      	blt.n	8009176 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800915e:	79fb      	ldrb	r3, [r7, #7]
 8009160:	f003 021f 	and.w	r2, r3, #31
 8009164:	4907      	ldr	r1, [pc, #28]	@ (8009184 <__NVIC_EnableIRQ+0x38>)
 8009166:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800916a:	095b      	lsrs	r3, r3, #5
 800916c:	2001      	movs	r0, #1
 800916e:	fa00 f202 	lsl.w	r2, r0, r2
 8009172:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8009176:	bf00      	nop
 8009178:	370c      	adds	r7, #12
 800917a:	46bd      	mov	sp, r7
 800917c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009180:	4770      	bx	lr
 8009182:	bf00      	nop
 8009184:	e000e100 	.word	0xe000e100

08009188 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8009188:	b480      	push	{r7}
 800918a:	b083      	sub	sp, #12
 800918c:	af00      	add	r7, sp, #0
 800918e:	4603      	mov	r3, r0
 8009190:	6039      	str	r1, [r7, #0]
 8009192:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009194:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009198:	2b00      	cmp	r3, #0
 800919a:	db0a      	blt.n	80091b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800919c:	683b      	ldr	r3, [r7, #0]
 800919e:	b2da      	uxtb	r2, r3
 80091a0:	490c      	ldr	r1, [pc, #48]	@ (80091d4 <__NVIC_SetPriority+0x4c>)
 80091a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80091a6:	0112      	lsls	r2, r2, #4
 80091a8:	b2d2      	uxtb	r2, r2
 80091aa:	440b      	add	r3, r1
 80091ac:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80091b0:	e00a      	b.n	80091c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80091b2:	683b      	ldr	r3, [r7, #0]
 80091b4:	b2da      	uxtb	r2, r3
 80091b6:	4908      	ldr	r1, [pc, #32]	@ (80091d8 <__NVIC_SetPriority+0x50>)
 80091b8:	79fb      	ldrb	r3, [r7, #7]
 80091ba:	f003 030f 	and.w	r3, r3, #15
 80091be:	3b04      	subs	r3, #4
 80091c0:	0112      	lsls	r2, r2, #4
 80091c2:	b2d2      	uxtb	r2, r2
 80091c4:	440b      	add	r3, r1
 80091c6:	761a      	strb	r2, [r3, #24]
}
 80091c8:	bf00      	nop
 80091ca:	370c      	adds	r7, #12
 80091cc:	46bd      	mov	sp, r7
 80091ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091d2:	4770      	bx	lr
 80091d4:	e000e100 	.word	0xe000e100
 80091d8:	e000ed00 	.word	0xe000ed00

080091dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80091dc:	b480      	push	{r7}
 80091de:	b089      	sub	sp, #36	@ 0x24
 80091e0:	af00      	add	r7, sp, #0
 80091e2:	60f8      	str	r0, [r7, #12]
 80091e4:	60b9      	str	r1, [r7, #8]
 80091e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80091e8:	68fb      	ldr	r3, [r7, #12]
 80091ea:	f003 0307 	and.w	r3, r3, #7
 80091ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80091f0:	69fb      	ldr	r3, [r7, #28]
 80091f2:	f1c3 0307 	rsb	r3, r3, #7
 80091f6:	2b04      	cmp	r3, #4
 80091f8:	bf28      	it	cs
 80091fa:	2304      	movcs	r3, #4
 80091fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80091fe:	69fb      	ldr	r3, [r7, #28]
 8009200:	3304      	adds	r3, #4
 8009202:	2b06      	cmp	r3, #6
 8009204:	d902      	bls.n	800920c <NVIC_EncodePriority+0x30>
 8009206:	69fb      	ldr	r3, [r7, #28]
 8009208:	3b03      	subs	r3, #3
 800920a:	e000      	b.n	800920e <NVIC_EncodePriority+0x32>
 800920c:	2300      	movs	r3, #0
 800920e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009210:	f04f 32ff 	mov.w	r2, #4294967295
 8009214:	69bb      	ldr	r3, [r7, #24]
 8009216:	fa02 f303 	lsl.w	r3, r2, r3
 800921a:	43da      	mvns	r2, r3
 800921c:	68bb      	ldr	r3, [r7, #8]
 800921e:	401a      	ands	r2, r3
 8009220:	697b      	ldr	r3, [r7, #20]
 8009222:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8009224:	f04f 31ff 	mov.w	r1, #4294967295
 8009228:	697b      	ldr	r3, [r7, #20]
 800922a:	fa01 f303 	lsl.w	r3, r1, r3
 800922e:	43d9      	mvns	r1, r3
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009234:	4313      	orrs	r3, r2
         );
}
 8009236:	4618      	mov	r0, r3
 8009238:	3724      	adds	r7, #36	@ 0x24
 800923a:	46bd      	mov	sp, r7
 800923c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009240:	4770      	bx	lr

08009242 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8009242:	b580      	push	{r7, lr}
 8009244:	b082      	sub	sp, #8
 8009246:	af00      	add	r7, sp, #0
 8009248:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800924a:	6878      	ldr	r0, [r7, #4]
 800924c:	f7ff ff4c 	bl	80090e8 <__NVIC_SetPriorityGrouping>
}
 8009250:	bf00      	nop
 8009252:	3708      	adds	r7, #8
 8009254:	46bd      	mov	sp, r7
 8009256:	bd80      	pop	{r7, pc}

08009258 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8009258:	b580      	push	{r7, lr}
 800925a:	b086      	sub	sp, #24
 800925c:	af00      	add	r7, sp, #0
 800925e:	4603      	mov	r3, r0
 8009260:	60b9      	str	r1, [r7, #8]
 8009262:	607a      	str	r2, [r7, #4]
 8009264:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8009266:	2300      	movs	r3, #0
 8009268:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800926a:	f7ff ff61 	bl	8009130 <__NVIC_GetPriorityGrouping>
 800926e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8009270:	687a      	ldr	r2, [r7, #4]
 8009272:	68b9      	ldr	r1, [r7, #8]
 8009274:	6978      	ldr	r0, [r7, #20]
 8009276:	f7ff ffb1 	bl	80091dc <NVIC_EncodePriority>
 800927a:	4602      	mov	r2, r0
 800927c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009280:	4611      	mov	r1, r2
 8009282:	4618      	mov	r0, r3
 8009284:	f7ff ff80 	bl	8009188 <__NVIC_SetPriority>
}
 8009288:	bf00      	nop
 800928a:	3718      	adds	r7, #24
 800928c:	46bd      	mov	sp, r7
 800928e:	bd80      	pop	{r7, pc}

08009290 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8009290:	b580      	push	{r7, lr}
 8009292:	b082      	sub	sp, #8
 8009294:	af00      	add	r7, sp, #0
 8009296:	4603      	mov	r3, r0
 8009298:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800929a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800929e:	4618      	mov	r0, r3
 80092a0:	f7ff ff54 	bl	800914c <__NVIC_EnableIRQ>
}
 80092a4:	bf00      	nop
 80092a6:	3708      	adds	r7, #8
 80092a8:	46bd      	mov	sp, r7
 80092aa:	bd80      	pop	{r7, pc}

080092ac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80092ac:	b480      	push	{r7}
 80092ae:	b089      	sub	sp, #36	@ 0x24
 80092b0:	af00      	add	r7, sp, #0
 80092b2:	6078      	str	r0, [r7, #4]
 80092b4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80092b6:	2300      	movs	r3, #0
 80092b8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80092ba:	2300      	movs	r3, #0
 80092bc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80092be:	2300      	movs	r3, #0
 80092c0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80092c2:	2300      	movs	r3, #0
 80092c4:	61fb      	str	r3, [r7, #28]
 80092c6:	e159      	b.n	800957c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80092c8:	2201      	movs	r2, #1
 80092ca:	69fb      	ldr	r3, [r7, #28]
 80092cc:	fa02 f303 	lsl.w	r3, r2, r3
 80092d0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80092d2:	683b      	ldr	r3, [r7, #0]
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	697a      	ldr	r2, [r7, #20]
 80092d8:	4013      	ands	r3, r2
 80092da:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80092dc:	693a      	ldr	r2, [r7, #16]
 80092de:	697b      	ldr	r3, [r7, #20]
 80092e0:	429a      	cmp	r2, r3
 80092e2:	f040 8148 	bne.w	8009576 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80092e6:	683b      	ldr	r3, [r7, #0]
 80092e8:	685b      	ldr	r3, [r3, #4]
 80092ea:	f003 0303 	and.w	r3, r3, #3
 80092ee:	2b01      	cmp	r3, #1
 80092f0:	d005      	beq.n	80092fe <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80092f2:	683b      	ldr	r3, [r7, #0]
 80092f4:	685b      	ldr	r3, [r3, #4]
 80092f6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80092fa:	2b02      	cmp	r3, #2
 80092fc:	d130      	bne.n	8009360 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	689b      	ldr	r3, [r3, #8]
 8009302:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8009304:	69fb      	ldr	r3, [r7, #28]
 8009306:	005b      	lsls	r3, r3, #1
 8009308:	2203      	movs	r2, #3
 800930a:	fa02 f303 	lsl.w	r3, r2, r3
 800930e:	43db      	mvns	r3, r3
 8009310:	69ba      	ldr	r2, [r7, #24]
 8009312:	4013      	ands	r3, r2
 8009314:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8009316:	683b      	ldr	r3, [r7, #0]
 8009318:	68da      	ldr	r2, [r3, #12]
 800931a:	69fb      	ldr	r3, [r7, #28]
 800931c:	005b      	lsls	r3, r3, #1
 800931e:	fa02 f303 	lsl.w	r3, r2, r3
 8009322:	69ba      	ldr	r2, [r7, #24]
 8009324:	4313      	orrs	r3, r2
 8009326:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	69ba      	ldr	r2, [r7, #24]
 800932c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	685b      	ldr	r3, [r3, #4]
 8009332:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8009334:	2201      	movs	r2, #1
 8009336:	69fb      	ldr	r3, [r7, #28]
 8009338:	fa02 f303 	lsl.w	r3, r2, r3
 800933c:	43db      	mvns	r3, r3
 800933e:	69ba      	ldr	r2, [r7, #24]
 8009340:	4013      	ands	r3, r2
 8009342:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8009344:	683b      	ldr	r3, [r7, #0]
 8009346:	685b      	ldr	r3, [r3, #4]
 8009348:	091b      	lsrs	r3, r3, #4
 800934a:	f003 0201 	and.w	r2, r3, #1
 800934e:	69fb      	ldr	r3, [r7, #28]
 8009350:	fa02 f303 	lsl.w	r3, r2, r3
 8009354:	69ba      	ldr	r2, [r7, #24]
 8009356:	4313      	orrs	r3, r2
 8009358:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	69ba      	ldr	r2, [r7, #24]
 800935e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8009360:	683b      	ldr	r3, [r7, #0]
 8009362:	685b      	ldr	r3, [r3, #4]
 8009364:	f003 0303 	and.w	r3, r3, #3
 8009368:	2b03      	cmp	r3, #3
 800936a:	d017      	beq.n	800939c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	68db      	ldr	r3, [r3, #12]
 8009370:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8009372:	69fb      	ldr	r3, [r7, #28]
 8009374:	005b      	lsls	r3, r3, #1
 8009376:	2203      	movs	r2, #3
 8009378:	fa02 f303 	lsl.w	r3, r2, r3
 800937c:	43db      	mvns	r3, r3
 800937e:	69ba      	ldr	r2, [r7, #24]
 8009380:	4013      	ands	r3, r2
 8009382:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8009384:	683b      	ldr	r3, [r7, #0]
 8009386:	689a      	ldr	r2, [r3, #8]
 8009388:	69fb      	ldr	r3, [r7, #28]
 800938a:	005b      	lsls	r3, r3, #1
 800938c:	fa02 f303 	lsl.w	r3, r2, r3
 8009390:	69ba      	ldr	r2, [r7, #24]
 8009392:	4313      	orrs	r3, r2
 8009394:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	69ba      	ldr	r2, [r7, #24]
 800939a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800939c:	683b      	ldr	r3, [r7, #0]
 800939e:	685b      	ldr	r3, [r3, #4]
 80093a0:	f003 0303 	and.w	r3, r3, #3
 80093a4:	2b02      	cmp	r3, #2
 80093a6:	d123      	bne.n	80093f0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80093a8:	69fb      	ldr	r3, [r7, #28]
 80093aa:	08da      	lsrs	r2, r3, #3
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	3208      	adds	r2, #8
 80093b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80093b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80093b6:	69fb      	ldr	r3, [r7, #28]
 80093b8:	f003 0307 	and.w	r3, r3, #7
 80093bc:	009b      	lsls	r3, r3, #2
 80093be:	220f      	movs	r2, #15
 80093c0:	fa02 f303 	lsl.w	r3, r2, r3
 80093c4:	43db      	mvns	r3, r3
 80093c6:	69ba      	ldr	r2, [r7, #24]
 80093c8:	4013      	ands	r3, r2
 80093ca:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80093cc:	683b      	ldr	r3, [r7, #0]
 80093ce:	691a      	ldr	r2, [r3, #16]
 80093d0:	69fb      	ldr	r3, [r7, #28]
 80093d2:	f003 0307 	and.w	r3, r3, #7
 80093d6:	009b      	lsls	r3, r3, #2
 80093d8:	fa02 f303 	lsl.w	r3, r2, r3
 80093dc:	69ba      	ldr	r2, [r7, #24]
 80093de:	4313      	orrs	r3, r2
 80093e0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80093e2:	69fb      	ldr	r3, [r7, #28]
 80093e4:	08da      	lsrs	r2, r3, #3
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	3208      	adds	r2, #8
 80093ea:	69b9      	ldr	r1, [r7, #24]
 80093ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80093f6:	69fb      	ldr	r3, [r7, #28]
 80093f8:	005b      	lsls	r3, r3, #1
 80093fa:	2203      	movs	r2, #3
 80093fc:	fa02 f303 	lsl.w	r3, r2, r3
 8009400:	43db      	mvns	r3, r3
 8009402:	69ba      	ldr	r2, [r7, #24]
 8009404:	4013      	ands	r3, r2
 8009406:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8009408:	683b      	ldr	r3, [r7, #0]
 800940a:	685b      	ldr	r3, [r3, #4]
 800940c:	f003 0203 	and.w	r2, r3, #3
 8009410:	69fb      	ldr	r3, [r7, #28]
 8009412:	005b      	lsls	r3, r3, #1
 8009414:	fa02 f303 	lsl.w	r3, r2, r3
 8009418:	69ba      	ldr	r2, [r7, #24]
 800941a:	4313      	orrs	r3, r2
 800941c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	69ba      	ldr	r2, [r7, #24]
 8009422:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8009424:	683b      	ldr	r3, [r7, #0]
 8009426:	685b      	ldr	r3, [r3, #4]
 8009428:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800942c:	2b00      	cmp	r3, #0
 800942e:	f000 80a2 	beq.w	8009576 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009432:	2300      	movs	r3, #0
 8009434:	60fb      	str	r3, [r7, #12]
 8009436:	4b57      	ldr	r3, [pc, #348]	@ (8009594 <HAL_GPIO_Init+0x2e8>)
 8009438:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800943a:	4a56      	ldr	r2, [pc, #344]	@ (8009594 <HAL_GPIO_Init+0x2e8>)
 800943c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8009440:	6453      	str	r3, [r2, #68]	@ 0x44
 8009442:	4b54      	ldr	r3, [pc, #336]	@ (8009594 <HAL_GPIO_Init+0x2e8>)
 8009444:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009446:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800944a:	60fb      	str	r3, [r7, #12]
 800944c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800944e:	4a52      	ldr	r2, [pc, #328]	@ (8009598 <HAL_GPIO_Init+0x2ec>)
 8009450:	69fb      	ldr	r3, [r7, #28]
 8009452:	089b      	lsrs	r3, r3, #2
 8009454:	3302      	adds	r3, #2
 8009456:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800945a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800945c:	69fb      	ldr	r3, [r7, #28]
 800945e:	f003 0303 	and.w	r3, r3, #3
 8009462:	009b      	lsls	r3, r3, #2
 8009464:	220f      	movs	r2, #15
 8009466:	fa02 f303 	lsl.w	r3, r2, r3
 800946a:	43db      	mvns	r3, r3
 800946c:	69ba      	ldr	r2, [r7, #24]
 800946e:	4013      	ands	r3, r2
 8009470:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	4a49      	ldr	r2, [pc, #292]	@ (800959c <HAL_GPIO_Init+0x2f0>)
 8009476:	4293      	cmp	r3, r2
 8009478:	d019      	beq.n	80094ae <HAL_GPIO_Init+0x202>
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	4a48      	ldr	r2, [pc, #288]	@ (80095a0 <HAL_GPIO_Init+0x2f4>)
 800947e:	4293      	cmp	r3, r2
 8009480:	d013      	beq.n	80094aa <HAL_GPIO_Init+0x1fe>
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	4a47      	ldr	r2, [pc, #284]	@ (80095a4 <HAL_GPIO_Init+0x2f8>)
 8009486:	4293      	cmp	r3, r2
 8009488:	d00d      	beq.n	80094a6 <HAL_GPIO_Init+0x1fa>
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	4a46      	ldr	r2, [pc, #280]	@ (80095a8 <HAL_GPIO_Init+0x2fc>)
 800948e:	4293      	cmp	r3, r2
 8009490:	d007      	beq.n	80094a2 <HAL_GPIO_Init+0x1f6>
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	4a45      	ldr	r2, [pc, #276]	@ (80095ac <HAL_GPIO_Init+0x300>)
 8009496:	4293      	cmp	r3, r2
 8009498:	d101      	bne.n	800949e <HAL_GPIO_Init+0x1f2>
 800949a:	2304      	movs	r3, #4
 800949c:	e008      	b.n	80094b0 <HAL_GPIO_Init+0x204>
 800949e:	2307      	movs	r3, #7
 80094a0:	e006      	b.n	80094b0 <HAL_GPIO_Init+0x204>
 80094a2:	2303      	movs	r3, #3
 80094a4:	e004      	b.n	80094b0 <HAL_GPIO_Init+0x204>
 80094a6:	2302      	movs	r3, #2
 80094a8:	e002      	b.n	80094b0 <HAL_GPIO_Init+0x204>
 80094aa:	2301      	movs	r3, #1
 80094ac:	e000      	b.n	80094b0 <HAL_GPIO_Init+0x204>
 80094ae:	2300      	movs	r3, #0
 80094b0:	69fa      	ldr	r2, [r7, #28]
 80094b2:	f002 0203 	and.w	r2, r2, #3
 80094b6:	0092      	lsls	r2, r2, #2
 80094b8:	4093      	lsls	r3, r2
 80094ba:	69ba      	ldr	r2, [r7, #24]
 80094bc:	4313      	orrs	r3, r2
 80094be:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80094c0:	4935      	ldr	r1, [pc, #212]	@ (8009598 <HAL_GPIO_Init+0x2ec>)
 80094c2:	69fb      	ldr	r3, [r7, #28]
 80094c4:	089b      	lsrs	r3, r3, #2
 80094c6:	3302      	adds	r3, #2
 80094c8:	69ba      	ldr	r2, [r7, #24]
 80094ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80094ce:	4b38      	ldr	r3, [pc, #224]	@ (80095b0 <HAL_GPIO_Init+0x304>)
 80094d0:	689b      	ldr	r3, [r3, #8]
 80094d2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80094d4:	693b      	ldr	r3, [r7, #16]
 80094d6:	43db      	mvns	r3, r3
 80094d8:	69ba      	ldr	r2, [r7, #24]
 80094da:	4013      	ands	r3, r2
 80094dc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80094de:	683b      	ldr	r3, [r7, #0]
 80094e0:	685b      	ldr	r3, [r3, #4]
 80094e2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80094e6:	2b00      	cmp	r3, #0
 80094e8:	d003      	beq.n	80094f2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80094ea:	69ba      	ldr	r2, [r7, #24]
 80094ec:	693b      	ldr	r3, [r7, #16]
 80094ee:	4313      	orrs	r3, r2
 80094f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80094f2:	4a2f      	ldr	r2, [pc, #188]	@ (80095b0 <HAL_GPIO_Init+0x304>)
 80094f4:	69bb      	ldr	r3, [r7, #24]
 80094f6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80094f8:	4b2d      	ldr	r3, [pc, #180]	@ (80095b0 <HAL_GPIO_Init+0x304>)
 80094fa:	68db      	ldr	r3, [r3, #12]
 80094fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80094fe:	693b      	ldr	r3, [r7, #16]
 8009500:	43db      	mvns	r3, r3
 8009502:	69ba      	ldr	r2, [r7, #24]
 8009504:	4013      	ands	r3, r2
 8009506:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8009508:	683b      	ldr	r3, [r7, #0]
 800950a:	685b      	ldr	r3, [r3, #4]
 800950c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8009510:	2b00      	cmp	r3, #0
 8009512:	d003      	beq.n	800951c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8009514:	69ba      	ldr	r2, [r7, #24]
 8009516:	693b      	ldr	r3, [r7, #16]
 8009518:	4313      	orrs	r3, r2
 800951a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800951c:	4a24      	ldr	r2, [pc, #144]	@ (80095b0 <HAL_GPIO_Init+0x304>)
 800951e:	69bb      	ldr	r3, [r7, #24]
 8009520:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8009522:	4b23      	ldr	r3, [pc, #140]	@ (80095b0 <HAL_GPIO_Init+0x304>)
 8009524:	685b      	ldr	r3, [r3, #4]
 8009526:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8009528:	693b      	ldr	r3, [r7, #16]
 800952a:	43db      	mvns	r3, r3
 800952c:	69ba      	ldr	r2, [r7, #24]
 800952e:	4013      	ands	r3, r2
 8009530:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8009532:	683b      	ldr	r3, [r7, #0]
 8009534:	685b      	ldr	r3, [r3, #4]
 8009536:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800953a:	2b00      	cmp	r3, #0
 800953c:	d003      	beq.n	8009546 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800953e:	69ba      	ldr	r2, [r7, #24]
 8009540:	693b      	ldr	r3, [r7, #16]
 8009542:	4313      	orrs	r3, r2
 8009544:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8009546:	4a1a      	ldr	r2, [pc, #104]	@ (80095b0 <HAL_GPIO_Init+0x304>)
 8009548:	69bb      	ldr	r3, [r7, #24]
 800954a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800954c:	4b18      	ldr	r3, [pc, #96]	@ (80095b0 <HAL_GPIO_Init+0x304>)
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8009552:	693b      	ldr	r3, [r7, #16]
 8009554:	43db      	mvns	r3, r3
 8009556:	69ba      	ldr	r2, [r7, #24]
 8009558:	4013      	ands	r3, r2
 800955a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800955c:	683b      	ldr	r3, [r7, #0]
 800955e:	685b      	ldr	r3, [r3, #4]
 8009560:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8009564:	2b00      	cmp	r3, #0
 8009566:	d003      	beq.n	8009570 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8009568:	69ba      	ldr	r2, [r7, #24]
 800956a:	693b      	ldr	r3, [r7, #16]
 800956c:	4313      	orrs	r3, r2
 800956e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8009570:	4a0f      	ldr	r2, [pc, #60]	@ (80095b0 <HAL_GPIO_Init+0x304>)
 8009572:	69bb      	ldr	r3, [r7, #24]
 8009574:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8009576:	69fb      	ldr	r3, [r7, #28]
 8009578:	3301      	adds	r3, #1
 800957a:	61fb      	str	r3, [r7, #28]
 800957c:	69fb      	ldr	r3, [r7, #28]
 800957e:	2b0f      	cmp	r3, #15
 8009580:	f67f aea2 	bls.w	80092c8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8009584:	bf00      	nop
 8009586:	bf00      	nop
 8009588:	3724      	adds	r7, #36	@ 0x24
 800958a:	46bd      	mov	sp, r7
 800958c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009590:	4770      	bx	lr
 8009592:	bf00      	nop
 8009594:	40023800 	.word	0x40023800
 8009598:	40013800 	.word	0x40013800
 800959c:	40020000 	.word	0x40020000
 80095a0:	40020400 	.word	0x40020400
 80095a4:	40020800 	.word	0x40020800
 80095a8:	40020c00 	.word	0x40020c00
 80095ac:	40021000 	.word	0x40021000
 80095b0:	40013c00 	.word	0x40013c00

080095b4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80095b4:	b480      	push	{r7}
 80095b6:	b083      	sub	sp, #12
 80095b8:	af00      	add	r7, sp, #0
 80095ba:	6078      	str	r0, [r7, #4]
 80095bc:	460b      	mov	r3, r1
 80095be:	807b      	strh	r3, [r7, #2]
 80095c0:	4613      	mov	r3, r2
 80095c2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80095c4:	787b      	ldrb	r3, [r7, #1]
 80095c6:	2b00      	cmp	r3, #0
 80095c8:	d003      	beq.n	80095d2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80095ca:	887a      	ldrh	r2, [r7, #2]
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80095d0:	e003      	b.n	80095da <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80095d2:	887b      	ldrh	r3, [r7, #2]
 80095d4:	041a      	lsls	r2, r3, #16
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	619a      	str	r2, [r3, #24]
}
 80095da:	bf00      	nop
 80095dc:	370c      	adds	r7, #12
 80095de:	46bd      	mov	sp, r7
 80095e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095e4:	4770      	bx	lr
	...

080095e8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80095e8:	b580      	push	{r7, lr}
 80095ea:	b086      	sub	sp, #24
 80095ec:	af00      	add	r7, sp, #0
 80095ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	2b00      	cmp	r3, #0
 80095f4:	d101      	bne.n	80095fa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80095f6:	2301      	movs	r3, #1
 80095f8:	e267      	b.n	8009aca <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	681b      	ldr	r3, [r3, #0]
 80095fe:	f003 0301 	and.w	r3, r3, #1
 8009602:	2b00      	cmp	r3, #0
 8009604:	d075      	beq.n	80096f2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8009606:	4b88      	ldr	r3, [pc, #544]	@ (8009828 <HAL_RCC_OscConfig+0x240>)
 8009608:	689b      	ldr	r3, [r3, #8]
 800960a:	f003 030c 	and.w	r3, r3, #12
 800960e:	2b04      	cmp	r3, #4
 8009610:	d00c      	beq.n	800962c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8009612:	4b85      	ldr	r3, [pc, #532]	@ (8009828 <HAL_RCC_OscConfig+0x240>)
 8009614:	689b      	ldr	r3, [r3, #8]
 8009616:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800961a:	2b08      	cmp	r3, #8
 800961c:	d112      	bne.n	8009644 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800961e:	4b82      	ldr	r3, [pc, #520]	@ (8009828 <HAL_RCC_OscConfig+0x240>)
 8009620:	685b      	ldr	r3, [r3, #4]
 8009622:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009626:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800962a:	d10b      	bne.n	8009644 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800962c:	4b7e      	ldr	r3, [pc, #504]	@ (8009828 <HAL_RCC_OscConfig+0x240>)
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009634:	2b00      	cmp	r3, #0
 8009636:	d05b      	beq.n	80096f0 <HAL_RCC_OscConfig+0x108>
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	685b      	ldr	r3, [r3, #4]
 800963c:	2b00      	cmp	r3, #0
 800963e:	d157      	bne.n	80096f0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8009640:	2301      	movs	r3, #1
 8009642:	e242      	b.n	8009aca <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	685b      	ldr	r3, [r3, #4]
 8009648:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800964c:	d106      	bne.n	800965c <HAL_RCC_OscConfig+0x74>
 800964e:	4b76      	ldr	r3, [pc, #472]	@ (8009828 <HAL_RCC_OscConfig+0x240>)
 8009650:	681b      	ldr	r3, [r3, #0]
 8009652:	4a75      	ldr	r2, [pc, #468]	@ (8009828 <HAL_RCC_OscConfig+0x240>)
 8009654:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009658:	6013      	str	r3, [r2, #0]
 800965a:	e01d      	b.n	8009698 <HAL_RCC_OscConfig+0xb0>
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	685b      	ldr	r3, [r3, #4]
 8009660:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8009664:	d10c      	bne.n	8009680 <HAL_RCC_OscConfig+0x98>
 8009666:	4b70      	ldr	r3, [pc, #448]	@ (8009828 <HAL_RCC_OscConfig+0x240>)
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	4a6f      	ldr	r2, [pc, #444]	@ (8009828 <HAL_RCC_OscConfig+0x240>)
 800966c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8009670:	6013      	str	r3, [r2, #0]
 8009672:	4b6d      	ldr	r3, [pc, #436]	@ (8009828 <HAL_RCC_OscConfig+0x240>)
 8009674:	681b      	ldr	r3, [r3, #0]
 8009676:	4a6c      	ldr	r2, [pc, #432]	@ (8009828 <HAL_RCC_OscConfig+0x240>)
 8009678:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800967c:	6013      	str	r3, [r2, #0]
 800967e:	e00b      	b.n	8009698 <HAL_RCC_OscConfig+0xb0>
 8009680:	4b69      	ldr	r3, [pc, #420]	@ (8009828 <HAL_RCC_OscConfig+0x240>)
 8009682:	681b      	ldr	r3, [r3, #0]
 8009684:	4a68      	ldr	r2, [pc, #416]	@ (8009828 <HAL_RCC_OscConfig+0x240>)
 8009686:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800968a:	6013      	str	r3, [r2, #0]
 800968c:	4b66      	ldr	r3, [pc, #408]	@ (8009828 <HAL_RCC_OscConfig+0x240>)
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	4a65      	ldr	r2, [pc, #404]	@ (8009828 <HAL_RCC_OscConfig+0x240>)
 8009692:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8009696:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	685b      	ldr	r3, [r3, #4]
 800969c:	2b00      	cmp	r3, #0
 800969e:	d013      	beq.n	80096c8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80096a0:	f7ff fcf2 	bl	8009088 <HAL_GetTick>
 80096a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80096a6:	e008      	b.n	80096ba <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80096a8:	f7ff fcee 	bl	8009088 <HAL_GetTick>
 80096ac:	4602      	mov	r2, r0
 80096ae:	693b      	ldr	r3, [r7, #16]
 80096b0:	1ad3      	subs	r3, r2, r3
 80096b2:	2b64      	cmp	r3, #100	@ 0x64
 80096b4:	d901      	bls.n	80096ba <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80096b6:	2303      	movs	r3, #3
 80096b8:	e207      	b.n	8009aca <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80096ba:	4b5b      	ldr	r3, [pc, #364]	@ (8009828 <HAL_RCC_OscConfig+0x240>)
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80096c2:	2b00      	cmp	r3, #0
 80096c4:	d0f0      	beq.n	80096a8 <HAL_RCC_OscConfig+0xc0>
 80096c6:	e014      	b.n	80096f2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80096c8:	f7ff fcde 	bl	8009088 <HAL_GetTick>
 80096cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80096ce:	e008      	b.n	80096e2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80096d0:	f7ff fcda 	bl	8009088 <HAL_GetTick>
 80096d4:	4602      	mov	r2, r0
 80096d6:	693b      	ldr	r3, [r7, #16]
 80096d8:	1ad3      	subs	r3, r2, r3
 80096da:	2b64      	cmp	r3, #100	@ 0x64
 80096dc:	d901      	bls.n	80096e2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80096de:	2303      	movs	r3, #3
 80096e0:	e1f3      	b.n	8009aca <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80096e2:	4b51      	ldr	r3, [pc, #324]	@ (8009828 <HAL_RCC_OscConfig+0x240>)
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80096ea:	2b00      	cmp	r3, #0
 80096ec:	d1f0      	bne.n	80096d0 <HAL_RCC_OscConfig+0xe8>
 80096ee:	e000      	b.n	80096f2 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80096f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	681b      	ldr	r3, [r3, #0]
 80096f6:	f003 0302 	and.w	r3, r3, #2
 80096fa:	2b00      	cmp	r3, #0
 80096fc:	d063      	beq.n	80097c6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80096fe:	4b4a      	ldr	r3, [pc, #296]	@ (8009828 <HAL_RCC_OscConfig+0x240>)
 8009700:	689b      	ldr	r3, [r3, #8]
 8009702:	f003 030c 	and.w	r3, r3, #12
 8009706:	2b00      	cmp	r3, #0
 8009708:	d00b      	beq.n	8009722 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800970a:	4b47      	ldr	r3, [pc, #284]	@ (8009828 <HAL_RCC_OscConfig+0x240>)
 800970c:	689b      	ldr	r3, [r3, #8]
 800970e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8009712:	2b08      	cmp	r3, #8
 8009714:	d11c      	bne.n	8009750 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8009716:	4b44      	ldr	r3, [pc, #272]	@ (8009828 <HAL_RCC_OscConfig+0x240>)
 8009718:	685b      	ldr	r3, [r3, #4]
 800971a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800971e:	2b00      	cmp	r3, #0
 8009720:	d116      	bne.n	8009750 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009722:	4b41      	ldr	r3, [pc, #260]	@ (8009828 <HAL_RCC_OscConfig+0x240>)
 8009724:	681b      	ldr	r3, [r3, #0]
 8009726:	f003 0302 	and.w	r3, r3, #2
 800972a:	2b00      	cmp	r3, #0
 800972c:	d005      	beq.n	800973a <HAL_RCC_OscConfig+0x152>
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	68db      	ldr	r3, [r3, #12]
 8009732:	2b01      	cmp	r3, #1
 8009734:	d001      	beq.n	800973a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8009736:	2301      	movs	r3, #1
 8009738:	e1c7      	b.n	8009aca <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800973a:	4b3b      	ldr	r3, [pc, #236]	@ (8009828 <HAL_RCC_OscConfig+0x240>)
 800973c:	681b      	ldr	r3, [r3, #0]
 800973e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	691b      	ldr	r3, [r3, #16]
 8009746:	00db      	lsls	r3, r3, #3
 8009748:	4937      	ldr	r1, [pc, #220]	@ (8009828 <HAL_RCC_OscConfig+0x240>)
 800974a:	4313      	orrs	r3, r2
 800974c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800974e:	e03a      	b.n	80097c6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	68db      	ldr	r3, [r3, #12]
 8009754:	2b00      	cmp	r3, #0
 8009756:	d020      	beq.n	800979a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8009758:	4b34      	ldr	r3, [pc, #208]	@ (800982c <HAL_RCC_OscConfig+0x244>)
 800975a:	2201      	movs	r2, #1
 800975c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800975e:	f7ff fc93 	bl	8009088 <HAL_GetTick>
 8009762:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009764:	e008      	b.n	8009778 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009766:	f7ff fc8f 	bl	8009088 <HAL_GetTick>
 800976a:	4602      	mov	r2, r0
 800976c:	693b      	ldr	r3, [r7, #16]
 800976e:	1ad3      	subs	r3, r2, r3
 8009770:	2b02      	cmp	r3, #2
 8009772:	d901      	bls.n	8009778 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8009774:	2303      	movs	r3, #3
 8009776:	e1a8      	b.n	8009aca <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009778:	4b2b      	ldr	r3, [pc, #172]	@ (8009828 <HAL_RCC_OscConfig+0x240>)
 800977a:	681b      	ldr	r3, [r3, #0]
 800977c:	f003 0302 	and.w	r3, r3, #2
 8009780:	2b00      	cmp	r3, #0
 8009782:	d0f0      	beq.n	8009766 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009784:	4b28      	ldr	r3, [pc, #160]	@ (8009828 <HAL_RCC_OscConfig+0x240>)
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	691b      	ldr	r3, [r3, #16]
 8009790:	00db      	lsls	r3, r3, #3
 8009792:	4925      	ldr	r1, [pc, #148]	@ (8009828 <HAL_RCC_OscConfig+0x240>)
 8009794:	4313      	orrs	r3, r2
 8009796:	600b      	str	r3, [r1, #0]
 8009798:	e015      	b.n	80097c6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800979a:	4b24      	ldr	r3, [pc, #144]	@ (800982c <HAL_RCC_OscConfig+0x244>)
 800979c:	2200      	movs	r2, #0
 800979e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80097a0:	f7ff fc72 	bl	8009088 <HAL_GetTick>
 80097a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80097a6:	e008      	b.n	80097ba <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80097a8:	f7ff fc6e 	bl	8009088 <HAL_GetTick>
 80097ac:	4602      	mov	r2, r0
 80097ae:	693b      	ldr	r3, [r7, #16]
 80097b0:	1ad3      	subs	r3, r2, r3
 80097b2:	2b02      	cmp	r3, #2
 80097b4:	d901      	bls.n	80097ba <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80097b6:	2303      	movs	r3, #3
 80097b8:	e187      	b.n	8009aca <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80097ba:	4b1b      	ldr	r3, [pc, #108]	@ (8009828 <HAL_RCC_OscConfig+0x240>)
 80097bc:	681b      	ldr	r3, [r3, #0]
 80097be:	f003 0302 	and.w	r3, r3, #2
 80097c2:	2b00      	cmp	r3, #0
 80097c4:	d1f0      	bne.n	80097a8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	681b      	ldr	r3, [r3, #0]
 80097ca:	f003 0308 	and.w	r3, r3, #8
 80097ce:	2b00      	cmp	r3, #0
 80097d0:	d036      	beq.n	8009840 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	695b      	ldr	r3, [r3, #20]
 80097d6:	2b00      	cmp	r3, #0
 80097d8:	d016      	beq.n	8009808 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80097da:	4b15      	ldr	r3, [pc, #84]	@ (8009830 <HAL_RCC_OscConfig+0x248>)
 80097dc:	2201      	movs	r2, #1
 80097de:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80097e0:	f7ff fc52 	bl	8009088 <HAL_GetTick>
 80097e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80097e6:	e008      	b.n	80097fa <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80097e8:	f7ff fc4e 	bl	8009088 <HAL_GetTick>
 80097ec:	4602      	mov	r2, r0
 80097ee:	693b      	ldr	r3, [r7, #16]
 80097f0:	1ad3      	subs	r3, r2, r3
 80097f2:	2b02      	cmp	r3, #2
 80097f4:	d901      	bls.n	80097fa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80097f6:	2303      	movs	r3, #3
 80097f8:	e167      	b.n	8009aca <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80097fa:	4b0b      	ldr	r3, [pc, #44]	@ (8009828 <HAL_RCC_OscConfig+0x240>)
 80097fc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80097fe:	f003 0302 	and.w	r3, r3, #2
 8009802:	2b00      	cmp	r3, #0
 8009804:	d0f0      	beq.n	80097e8 <HAL_RCC_OscConfig+0x200>
 8009806:	e01b      	b.n	8009840 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009808:	4b09      	ldr	r3, [pc, #36]	@ (8009830 <HAL_RCC_OscConfig+0x248>)
 800980a:	2200      	movs	r2, #0
 800980c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800980e:	f7ff fc3b 	bl	8009088 <HAL_GetTick>
 8009812:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009814:	e00e      	b.n	8009834 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009816:	f7ff fc37 	bl	8009088 <HAL_GetTick>
 800981a:	4602      	mov	r2, r0
 800981c:	693b      	ldr	r3, [r7, #16]
 800981e:	1ad3      	subs	r3, r2, r3
 8009820:	2b02      	cmp	r3, #2
 8009822:	d907      	bls.n	8009834 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8009824:	2303      	movs	r3, #3
 8009826:	e150      	b.n	8009aca <HAL_RCC_OscConfig+0x4e2>
 8009828:	40023800 	.word	0x40023800
 800982c:	42470000 	.word	0x42470000
 8009830:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009834:	4b88      	ldr	r3, [pc, #544]	@ (8009a58 <HAL_RCC_OscConfig+0x470>)
 8009836:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009838:	f003 0302 	and.w	r3, r3, #2
 800983c:	2b00      	cmp	r3, #0
 800983e:	d1ea      	bne.n	8009816 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	681b      	ldr	r3, [r3, #0]
 8009844:	f003 0304 	and.w	r3, r3, #4
 8009848:	2b00      	cmp	r3, #0
 800984a:	f000 8097 	beq.w	800997c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800984e:	2300      	movs	r3, #0
 8009850:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009852:	4b81      	ldr	r3, [pc, #516]	@ (8009a58 <HAL_RCC_OscConfig+0x470>)
 8009854:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009856:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800985a:	2b00      	cmp	r3, #0
 800985c:	d10f      	bne.n	800987e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800985e:	2300      	movs	r3, #0
 8009860:	60bb      	str	r3, [r7, #8]
 8009862:	4b7d      	ldr	r3, [pc, #500]	@ (8009a58 <HAL_RCC_OscConfig+0x470>)
 8009864:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009866:	4a7c      	ldr	r2, [pc, #496]	@ (8009a58 <HAL_RCC_OscConfig+0x470>)
 8009868:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800986c:	6413      	str	r3, [r2, #64]	@ 0x40
 800986e:	4b7a      	ldr	r3, [pc, #488]	@ (8009a58 <HAL_RCC_OscConfig+0x470>)
 8009870:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009872:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009876:	60bb      	str	r3, [r7, #8]
 8009878:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800987a:	2301      	movs	r3, #1
 800987c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800987e:	4b77      	ldr	r3, [pc, #476]	@ (8009a5c <HAL_RCC_OscConfig+0x474>)
 8009880:	681b      	ldr	r3, [r3, #0]
 8009882:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009886:	2b00      	cmp	r3, #0
 8009888:	d118      	bne.n	80098bc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800988a:	4b74      	ldr	r3, [pc, #464]	@ (8009a5c <HAL_RCC_OscConfig+0x474>)
 800988c:	681b      	ldr	r3, [r3, #0]
 800988e:	4a73      	ldr	r2, [pc, #460]	@ (8009a5c <HAL_RCC_OscConfig+0x474>)
 8009890:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009894:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8009896:	f7ff fbf7 	bl	8009088 <HAL_GetTick>
 800989a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800989c:	e008      	b.n	80098b0 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800989e:	f7ff fbf3 	bl	8009088 <HAL_GetTick>
 80098a2:	4602      	mov	r2, r0
 80098a4:	693b      	ldr	r3, [r7, #16]
 80098a6:	1ad3      	subs	r3, r2, r3
 80098a8:	2b02      	cmp	r3, #2
 80098aa:	d901      	bls.n	80098b0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80098ac:	2303      	movs	r3, #3
 80098ae:	e10c      	b.n	8009aca <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80098b0:	4b6a      	ldr	r3, [pc, #424]	@ (8009a5c <HAL_RCC_OscConfig+0x474>)
 80098b2:	681b      	ldr	r3, [r3, #0]
 80098b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80098b8:	2b00      	cmp	r3, #0
 80098ba:	d0f0      	beq.n	800989e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	689b      	ldr	r3, [r3, #8]
 80098c0:	2b01      	cmp	r3, #1
 80098c2:	d106      	bne.n	80098d2 <HAL_RCC_OscConfig+0x2ea>
 80098c4:	4b64      	ldr	r3, [pc, #400]	@ (8009a58 <HAL_RCC_OscConfig+0x470>)
 80098c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80098c8:	4a63      	ldr	r2, [pc, #396]	@ (8009a58 <HAL_RCC_OscConfig+0x470>)
 80098ca:	f043 0301 	orr.w	r3, r3, #1
 80098ce:	6713      	str	r3, [r2, #112]	@ 0x70
 80098d0:	e01c      	b.n	800990c <HAL_RCC_OscConfig+0x324>
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	689b      	ldr	r3, [r3, #8]
 80098d6:	2b05      	cmp	r3, #5
 80098d8:	d10c      	bne.n	80098f4 <HAL_RCC_OscConfig+0x30c>
 80098da:	4b5f      	ldr	r3, [pc, #380]	@ (8009a58 <HAL_RCC_OscConfig+0x470>)
 80098dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80098de:	4a5e      	ldr	r2, [pc, #376]	@ (8009a58 <HAL_RCC_OscConfig+0x470>)
 80098e0:	f043 0304 	orr.w	r3, r3, #4
 80098e4:	6713      	str	r3, [r2, #112]	@ 0x70
 80098e6:	4b5c      	ldr	r3, [pc, #368]	@ (8009a58 <HAL_RCC_OscConfig+0x470>)
 80098e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80098ea:	4a5b      	ldr	r2, [pc, #364]	@ (8009a58 <HAL_RCC_OscConfig+0x470>)
 80098ec:	f043 0301 	orr.w	r3, r3, #1
 80098f0:	6713      	str	r3, [r2, #112]	@ 0x70
 80098f2:	e00b      	b.n	800990c <HAL_RCC_OscConfig+0x324>
 80098f4:	4b58      	ldr	r3, [pc, #352]	@ (8009a58 <HAL_RCC_OscConfig+0x470>)
 80098f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80098f8:	4a57      	ldr	r2, [pc, #348]	@ (8009a58 <HAL_RCC_OscConfig+0x470>)
 80098fa:	f023 0301 	bic.w	r3, r3, #1
 80098fe:	6713      	str	r3, [r2, #112]	@ 0x70
 8009900:	4b55      	ldr	r3, [pc, #340]	@ (8009a58 <HAL_RCC_OscConfig+0x470>)
 8009902:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009904:	4a54      	ldr	r2, [pc, #336]	@ (8009a58 <HAL_RCC_OscConfig+0x470>)
 8009906:	f023 0304 	bic.w	r3, r3, #4
 800990a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	689b      	ldr	r3, [r3, #8]
 8009910:	2b00      	cmp	r3, #0
 8009912:	d015      	beq.n	8009940 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009914:	f7ff fbb8 	bl	8009088 <HAL_GetTick>
 8009918:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800991a:	e00a      	b.n	8009932 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800991c:	f7ff fbb4 	bl	8009088 <HAL_GetTick>
 8009920:	4602      	mov	r2, r0
 8009922:	693b      	ldr	r3, [r7, #16]
 8009924:	1ad3      	subs	r3, r2, r3
 8009926:	f241 3288 	movw	r2, #5000	@ 0x1388
 800992a:	4293      	cmp	r3, r2
 800992c:	d901      	bls.n	8009932 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800992e:	2303      	movs	r3, #3
 8009930:	e0cb      	b.n	8009aca <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009932:	4b49      	ldr	r3, [pc, #292]	@ (8009a58 <HAL_RCC_OscConfig+0x470>)
 8009934:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009936:	f003 0302 	and.w	r3, r3, #2
 800993a:	2b00      	cmp	r3, #0
 800993c:	d0ee      	beq.n	800991c <HAL_RCC_OscConfig+0x334>
 800993e:	e014      	b.n	800996a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009940:	f7ff fba2 	bl	8009088 <HAL_GetTick>
 8009944:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009946:	e00a      	b.n	800995e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009948:	f7ff fb9e 	bl	8009088 <HAL_GetTick>
 800994c:	4602      	mov	r2, r0
 800994e:	693b      	ldr	r3, [r7, #16]
 8009950:	1ad3      	subs	r3, r2, r3
 8009952:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009956:	4293      	cmp	r3, r2
 8009958:	d901      	bls.n	800995e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800995a:	2303      	movs	r3, #3
 800995c:	e0b5      	b.n	8009aca <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800995e:	4b3e      	ldr	r3, [pc, #248]	@ (8009a58 <HAL_RCC_OscConfig+0x470>)
 8009960:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009962:	f003 0302 	and.w	r3, r3, #2
 8009966:	2b00      	cmp	r3, #0
 8009968:	d1ee      	bne.n	8009948 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800996a:	7dfb      	ldrb	r3, [r7, #23]
 800996c:	2b01      	cmp	r3, #1
 800996e:	d105      	bne.n	800997c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009970:	4b39      	ldr	r3, [pc, #228]	@ (8009a58 <HAL_RCC_OscConfig+0x470>)
 8009972:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009974:	4a38      	ldr	r2, [pc, #224]	@ (8009a58 <HAL_RCC_OscConfig+0x470>)
 8009976:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800997a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	699b      	ldr	r3, [r3, #24]
 8009980:	2b00      	cmp	r3, #0
 8009982:	f000 80a1 	beq.w	8009ac8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8009986:	4b34      	ldr	r3, [pc, #208]	@ (8009a58 <HAL_RCC_OscConfig+0x470>)
 8009988:	689b      	ldr	r3, [r3, #8]
 800998a:	f003 030c 	and.w	r3, r3, #12
 800998e:	2b08      	cmp	r3, #8
 8009990:	d05c      	beq.n	8009a4c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	699b      	ldr	r3, [r3, #24]
 8009996:	2b02      	cmp	r3, #2
 8009998:	d141      	bne.n	8009a1e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800999a:	4b31      	ldr	r3, [pc, #196]	@ (8009a60 <HAL_RCC_OscConfig+0x478>)
 800999c:	2200      	movs	r2, #0
 800999e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80099a0:	f7ff fb72 	bl	8009088 <HAL_GetTick>
 80099a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80099a6:	e008      	b.n	80099ba <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80099a8:	f7ff fb6e 	bl	8009088 <HAL_GetTick>
 80099ac:	4602      	mov	r2, r0
 80099ae:	693b      	ldr	r3, [r7, #16]
 80099b0:	1ad3      	subs	r3, r2, r3
 80099b2:	2b02      	cmp	r3, #2
 80099b4:	d901      	bls.n	80099ba <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80099b6:	2303      	movs	r3, #3
 80099b8:	e087      	b.n	8009aca <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80099ba:	4b27      	ldr	r3, [pc, #156]	@ (8009a58 <HAL_RCC_OscConfig+0x470>)
 80099bc:	681b      	ldr	r3, [r3, #0]
 80099be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80099c2:	2b00      	cmp	r3, #0
 80099c4:	d1f0      	bne.n	80099a8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	69da      	ldr	r2, [r3, #28]
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	6a1b      	ldr	r3, [r3, #32]
 80099ce:	431a      	orrs	r2, r3
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80099d4:	019b      	lsls	r3, r3, #6
 80099d6:	431a      	orrs	r2, r3
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80099dc:	085b      	lsrs	r3, r3, #1
 80099de:	3b01      	subs	r3, #1
 80099e0:	041b      	lsls	r3, r3, #16
 80099e2:	431a      	orrs	r2, r3
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80099e8:	061b      	lsls	r3, r3, #24
 80099ea:	491b      	ldr	r1, [pc, #108]	@ (8009a58 <HAL_RCC_OscConfig+0x470>)
 80099ec:	4313      	orrs	r3, r2
 80099ee:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80099f0:	4b1b      	ldr	r3, [pc, #108]	@ (8009a60 <HAL_RCC_OscConfig+0x478>)
 80099f2:	2201      	movs	r2, #1
 80099f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80099f6:	f7ff fb47 	bl	8009088 <HAL_GetTick>
 80099fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80099fc:	e008      	b.n	8009a10 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80099fe:	f7ff fb43 	bl	8009088 <HAL_GetTick>
 8009a02:	4602      	mov	r2, r0
 8009a04:	693b      	ldr	r3, [r7, #16]
 8009a06:	1ad3      	subs	r3, r2, r3
 8009a08:	2b02      	cmp	r3, #2
 8009a0a:	d901      	bls.n	8009a10 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8009a0c:	2303      	movs	r3, #3
 8009a0e:	e05c      	b.n	8009aca <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009a10:	4b11      	ldr	r3, [pc, #68]	@ (8009a58 <HAL_RCC_OscConfig+0x470>)
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009a18:	2b00      	cmp	r3, #0
 8009a1a:	d0f0      	beq.n	80099fe <HAL_RCC_OscConfig+0x416>
 8009a1c:	e054      	b.n	8009ac8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009a1e:	4b10      	ldr	r3, [pc, #64]	@ (8009a60 <HAL_RCC_OscConfig+0x478>)
 8009a20:	2200      	movs	r2, #0
 8009a22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009a24:	f7ff fb30 	bl	8009088 <HAL_GetTick>
 8009a28:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009a2a:	e008      	b.n	8009a3e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009a2c:	f7ff fb2c 	bl	8009088 <HAL_GetTick>
 8009a30:	4602      	mov	r2, r0
 8009a32:	693b      	ldr	r3, [r7, #16]
 8009a34:	1ad3      	subs	r3, r2, r3
 8009a36:	2b02      	cmp	r3, #2
 8009a38:	d901      	bls.n	8009a3e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8009a3a:	2303      	movs	r3, #3
 8009a3c:	e045      	b.n	8009aca <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009a3e:	4b06      	ldr	r3, [pc, #24]	@ (8009a58 <HAL_RCC_OscConfig+0x470>)
 8009a40:	681b      	ldr	r3, [r3, #0]
 8009a42:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009a46:	2b00      	cmp	r3, #0
 8009a48:	d1f0      	bne.n	8009a2c <HAL_RCC_OscConfig+0x444>
 8009a4a:	e03d      	b.n	8009ac8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	699b      	ldr	r3, [r3, #24]
 8009a50:	2b01      	cmp	r3, #1
 8009a52:	d107      	bne.n	8009a64 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8009a54:	2301      	movs	r3, #1
 8009a56:	e038      	b.n	8009aca <HAL_RCC_OscConfig+0x4e2>
 8009a58:	40023800 	.word	0x40023800
 8009a5c:	40007000 	.word	0x40007000
 8009a60:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8009a64:	4b1b      	ldr	r3, [pc, #108]	@ (8009ad4 <HAL_RCC_OscConfig+0x4ec>)
 8009a66:	685b      	ldr	r3, [r3, #4]
 8009a68:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	699b      	ldr	r3, [r3, #24]
 8009a6e:	2b01      	cmp	r3, #1
 8009a70:	d028      	beq.n	8009ac4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009a72:	68fb      	ldr	r3, [r7, #12]
 8009a74:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009a7c:	429a      	cmp	r2, r3
 8009a7e:	d121      	bne.n	8009ac4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8009a80:	68fb      	ldr	r3, [r7, #12]
 8009a82:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009a8a:	429a      	cmp	r2, r3
 8009a8c:	d11a      	bne.n	8009ac4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8009a8e:	68fa      	ldr	r2, [r7, #12]
 8009a90:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8009a94:	4013      	ands	r3, r2
 8009a96:	687a      	ldr	r2, [r7, #4]
 8009a98:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8009a9a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8009a9c:	4293      	cmp	r3, r2
 8009a9e:	d111      	bne.n	8009ac4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8009aa0:	68fb      	ldr	r3, [r7, #12]
 8009aa2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009aaa:	085b      	lsrs	r3, r3, #1
 8009aac:	3b01      	subs	r3, #1
 8009aae:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8009ab0:	429a      	cmp	r2, r3
 8009ab2:	d107      	bne.n	8009ac4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8009ab4:	68fb      	ldr	r3, [r7, #12]
 8009ab6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009abe:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8009ac0:	429a      	cmp	r2, r3
 8009ac2:	d001      	beq.n	8009ac8 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8009ac4:	2301      	movs	r3, #1
 8009ac6:	e000      	b.n	8009aca <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8009ac8:	2300      	movs	r3, #0
}
 8009aca:	4618      	mov	r0, r3
 8009acc:	3718      	adds	r7, #24
 8009ace:	46bd      	mov	sp, r7
 8009ad0:	bd80      	pop	{r7, pc}
 8009ad2:	bf00      	nop
 8009ad4:	40023800 	.word	0x40023800

08009ad8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009ad8:	b580      	push	{r7, lr}
 8009ada:	b084      	sub	sp, #16
 8009adc:	af00      	add	r7, sp, #0
 8009ade:	6078      	str	r0, [r7, #4]
 8009ae0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	2b00      	cmp	r3, #0
 8009ae6:	d101      	bne.n	8009aec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009ae8:	2301      	movs	r3, #1
 8009aea:	e0cc      	b.n	8009c86 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8009aec:	4b68      	ldr	r3, [pc, #416]	@ (8009c90 <HAL_RCC_ClockConfig+0x1b8>)
 8009aee:	681b      	ldr	r3, [r3, #0]
 8009af0:	f003 0307 	and.w	r3, r3, #7
 8009af4:	683a      	ldr	r2, [r7, #0]
 8009af6:	429a      	cmp	r2, r3
 8009af8:	d90c      	bls.n	8009b14 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009afa:	4b65      	ldr	r3, [pc, #404]	@ (8009c90 <HAL_RCC_ClockConfig+0x1b8>)
 8009afc:	683a      	ldr	r2, [r7, #0]
 8009afe:	b2d2      	uxtb	r2, r2
 8009b00:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009b02:	4b63      	ldr	r3, [pc, #396]	@ (8009c90 <HAL_RCC_ClockConfig+0x1b8>)
 8009b04:	681b      	ldr	r3, [r3, #0]
 8009b06:	f003 0307 	and.w	r3, r3, #7
 8009b0a:	683a      	ldr	r2, [r7, #0]
 8009b0c:	429a      	cmp	r2, r3
 8009b0e:	d001      	beq.n	8009b14 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8009b10:	2301      	movs	r3, #1
 8009b12:	e0b8      	b.n	8009c86 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	681b      	ldr	r3, [r3, #0]
 8009b18:	f003 0302 	and.w	r3, r3, #2
 8009b1c:	2b00      	cmp	r3, #0
 8009b1e:	d020      	beq.n	8009b62 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	681b      	ldr	r3, [r3, #0]
 8009b24:	f003 0304 	and.w	r3, r3, #4
 8009b28:	2b00      	cmp	r3, #0
 8009b2a:	d005      	beq.n	8009b38 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8009b2c:	4b59      	ldr	r3, [pc, #356]	@ (8009c94 <HAL_RCC_ClockConfig+0x1bc>)
 8009b2e:	689b      	ldr	r3, [r3, #8]
 8009b30:	4a58      	ldr	r2, [pc, #352]	@ (8009c94 <HAL_RCC_ClockConfig+0x1bc>)
 8009b32:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8009b36:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	681b      	ldr	r3, [r3, #0]
 8009b3c:	f003 0308 	and.w	r3, r3, #8
 8009b40:	2b00      	cmp	r3, #0
 8009b42:	d005      	beq.n	8009b50 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8009b44:	4b53      	ldr	r3, [pc, #332]	@ (8009c94 <HAL_RCC_ClockConfig+0x1bc>)
 8009b46:	689b      	ldr	r3, [r3, #8]
 8009b48:	4a52      	ldr	r2, [pc, #328]	@ (8009c94 <HAL_RCC_ClockConfig+0x1bc>)
 8009b4a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8009b4e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009b50:	4b50      	ldr	r3, [pc, #320]	@ (8009c94 <HAL_RCC_ClockConfig+0x1bc>)
 8009b52:	689b      	ldr	r3, [r3, #8]
 8009b54:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	689b      	ldr	r3, [r3, #8]
 8009b5c:	494d      	ldr	r1, [pc, #308]	@ (8009c94 <HAL_RCC_ClockConfig+0x1bc>)
 8009b5e:	4313      	orrs	r3, r2
 8009b60:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	681b      	ldr	r3, [r3, #0]
 8009b66:	f003 0301 	and.w	r3, r3, #1
 8009b6a:	2b00      	cmp	r3, #0
 8009b6c:	d044      	beq.n	8009bf8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	685b      	ldr	r3, [r3, #4]
 8009b72:	2b01      	cmp	r3, #1
 8009b74:	d107      	bne.n	8009b86 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009b76:	4b47      	ldr	r3, [pc, #284]	@ (8009c94 <HAL_RCC_ClockConfig+0x1bc>)
 8009b78:	681b      	ldr	r3, [r3, #0]
 8009b7a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009b7e:	2b00      	cmp	r3, #0
 8009b80:	d119      	bne.n	8009bb6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009b82:	2301      	movs	r3, #1
 8009b84:	e07f      	b.n	8009c86 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	685b      	ldr	r3, [r3, #4]
 8009b8a:	2b02      	cmp	r3, #2
 8009b8c:	d003      	beq.n	8009b96 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8009b92:	2b03      	cmp	r3, #3
 8009b94:	d107      	bne.n	8009ba6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009b96:	4b3f      	ldr	r3, [pc, #252]	@ (8009c94 <HAL_RCC_ClockConfig+0x1bc>)
 8009b98:	681b      	ldr	r3, [r3, #0]
 8009b9a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009b9e:	2b00      	cmp	r3, #0
 8009ba0:	d109      	bne.n	8009bb6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009ba2:	2301      	movs	r3, #1
 8009ba4:	e06f      	b.n	8009c86 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009ba6:	4b3b      	ldr	r3, [pc, #236]	@ (8009c94 <HAL_RCC_ClockConfig+0x1bc>)
 8009ba8:	681b      	ldr	r3, [r3, #0]
 8009baa:	f003 0302 	and.w	r3, r3, #2
 8009bae:	2b00      	cmp	r3, #0
 8009bb0:	d101      	bne.n	8009bb6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009bb2:	2301      	movs	r3, #1
 8009bb4:	e067      	b.n	8009c86 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8009bb6:	4b37      	ldr	r3, [pc, #220]	@ (8009c94 <HAL_RCC_ClockConfig+0x1bc>)
 8009bb8:	689b      	ldr	r3, [r3, #8]
 8009bba:	f023 0203 	bic.w	r2, r3, #3
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	685b      	ldr	r3, [r3, #4]
 8009bc2:	4934      	ldr	r1, [pc, #208]	@ (8009c94 <HAL_RCC_ClockConfig+0x1bc>)
 8009bc4:	4313      	orrs	r3, r2
 8009bc6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8009bc8:	f7ff fa5e 	bl	8009088 <HAL_GetTick>
 8009bcc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009bce:	e00a      	b.n	8009be6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009bd0:	f7ff fa5a 	bl	8009088 <HAL_GetTick>
 8009bd4:	4602      	mov	r2, r0
 8009bd6:	68fb      	ldr	r3, [r7, #12]
 8009bd8:	1ad3      	subs	r3, r2, r3
 8009bda:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009bde:	4293      	cmp	r3, r2
 8009be0:	d901      	bls.n	8009be6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8009be2:	2303      	movs	r3, #3
 8009be4:	e04f      	b.n	8009c86 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009be6:	4b2b      	ldr	r3, [pc, #172]	@ (8009c94 <HAL_RCC_ClockConfig+0x1bc>)
 8009be8:	689b      	ldr	r3, [r3, #8]
 8009bea:	f003 020c 	and.w	r2, r3, #12
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	685b      	ldr	r3, [r3, #4]
 8009bf2:	009b      	lsls	r3, r3, #2
 8009bf4:	429a      	cmp	r2, r3
 8009bf6:	d1eb      	bne.n	8009bd0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8009bf8:	4b25      	ldr	r3, [pc, #148]	@ (8009c90 <HAL_RCC_ClockConfig+0x1b8>)
 8009bfa:	681b      	ldr	r3, [r3, #0]
 8009bfc:	f003 0307 	and.w	r3, r3, #7
 8009c00:	683a      	ldr	r2, [r7, #0]
 8009c02:	429a      	cmp	r2, r3
 8009c04:	d20c      	bcs.n	8009c20 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009c06:	4b22      	ldr	r3, [pc, #136]	@ (8009c90 <HAL_RCC_ClockConfig+0x1b8>)
 8009c08:	683a      	ldr	r2, [r7, #0]
 8009c0a:	b2d2      	uxtb	r2, r2
 8009c0c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009c0e:	4b20      	ldr	r3, [pc, #128]	@ (8009c90 <HAL_RCC_ClockConfig+0x1b8>)
 8009c10:	681b      	ldr	r3, [r3, #0]
 8009c12:	f003 0307 	and.w	r3, r3, #7
 8009c16:	683a      	ldr	r2, [r7, #0]
 8009c18:	429a      	cmp	r2, r3
 8009c1a:	d001      	beq.n	8009c20 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8009c1c:	2301      	movs	r3, #1
 8009c1e:	e032      	b.n	8009c86 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	681b      	ldr	r3, [r3, #0]
 8009c24:	f003 0304 	and.w	r3, r3, #4
 8009c28:	2b00      	cmp	r3, #0
 8009c2a:	d008      	beq.n	8009c3e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8009c2c:	4b19      	ldr	r3, [pc, #100]	@ (8009c94 <HAL_RCC_ClockConfig+0x1bc>)
 8009c2e:	689b      	ldr	r3, [r3, #8]
 8009c30:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	68db      	ldr	r3, [r3, #12]
 8009c38:	4916      	ldr	r1, [pc, #88]	@ (8009c94 <HAL_RCC_ClockConfig+0x1bc>)
 8009c3a:	4313      	orrs	r3, r2
 8009c3c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	681b      	ldr	r3, [r3, #0]
 8009c42:	f003 0308 	and.w	r3, r3, #8
 8009c46:	2b00      	cmp	r3, #0
 8009c48:	d009      	beq.n	8009c5e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8009c4a:	4b12      	ldr	r3, [pc, #72]	@ (8009c94 <HAL_RCC_ClockConfig+0x1bc>)
 8009c4c:	689b      	ldr	r3, [r3, #8]
 8009c4e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	691b      	ldr	r3, [r3, #16]
 8009c56:	00db      	lsls	r3, r3, #3
 8009c58:	490e      	ldr	r1, [pc, #56]	@ (8009c94 <HAL_RCC_ClockConfig+0x1bc>)
 8009c5a:	4313      	orrs	r3, r2
 8009c5c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8009c5e:	f000 f821 	bl	8009ca4 <HAL_RCC_GetSysClockFreq>
 8009c62:	4602      	mov	r2, r0
 8009c64:	4b0b      	ldr	r3, [pc, #44]	@ (8009c94 <HAL_RCC_ClockConfig+0x1bc>)
 8009c66:	689b      	ldr	r3, [r3, #8]
 8009c68:	091b      	lsrs	r3, r3, #4
 8009c6a:	f003 030f 	and.w	r3, r3, #15
 8009c6e:	490a      	ldr	r1, [pc, #40]	@ (8009c98 <HAL_RCC_ClockConfig+0x1c0>)
 8009c70:	5ccb      	ldrb	r3, [r1, r3]
 8009c72:	fa22 f303 	lsr.w	r3, r2, r3
 8009c76:	4a09      	ldr	r2, [pc, #36]	@ (8009c9c <HAL_RCC_ClockConfig+0x1c4>)
 8009c78:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8009c7a:	4b09      	ldr	r3, [pc, #36]	@ (8009ca0 <HAL_RCC_ClockConfig+0x1c8>)
 8009c7c:	681b      	ldr	r3, [r3, #0]
 8009c7e:	4618      	mov	r0, r3
 8009c80:	f7f9 f868 	bl	8002d54 <HAL_InitTick>

  return HAL_OK;
 8009c84:	2300      	movs	r3, #0
}
 8009c86:	4618      	mov	r0, r3
 8009c88:	3710      	adds	r7, #16
 8009c8a:	46bd      	mov	sp, r7
 8009c8c:	bd80      	pop	{r7, pc}
 8009c8e:	bf00      	nop
 8009c90:	40023c00 	.word	0x40023c00
 8009c94:	40023800 	.word	0x40023800
 8009c98:	080111cc 	.word	0x080111cc
 8009c9c:	20000090 	.word	0x20000090
 8009ca0:	200000e0 	.word	0x200000e0

08009ca4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009ca4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009ca8:	b094      	sub	sp, #80	@ 0x50
 8009caa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8009cac:	2300      	movs	r3, #0
 8009cae:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8009cb0:	2300      	movs	r3, #0
 8009cb2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8009cb4:	2300      	movs	r3, #0
 8009cb6:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8009cb8:	2300      	movs	r3, #0
 8009cba:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8009cbc:	4b79      	ldr	r3, [pc, #484]	@ (8009ea4 <HAL_RCC_GetSysClockFreq+0x200>)
 8009cbe:	689b      	ldr	r3, [r3, #8]
 8009cc0:	f003 030c 	and.w	r3, r3, #12
 8009cc4:	2b08      	cmp	r3, #8
 8009cc6:	d00d      	beq.n	8009ce4 <HAL_RCC_GetSysClockFreq+0x40>
 8009cc8:	2b08      	cmp	r3, #8
 8009cca:	f200 80e1 	bhi.w	8009e90 <HAL_RCC_GetSysClockFreq+0x1ec>
 8009cce:	2b00      	cmp	r3, #0
 8009cd0:	d002      	beq.n	8009cd8 <HAL_RCC_GetSysClockFreq+0x34>
 8009cd2:	2b04      	cmp	r3, #4
 8009cd4:	d003      	beq.n	8009cde <HAL_RCC_GetSysClockFreq+0x3a>
 8009cd6:	e0db      	b.n	8009e90 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8009cd8:	4b73      	ldr	r3, [pc, #460]	@ (8009ea8 <HAL_RCC_GetSysClockFreq+0x204>)
 8009cda:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8009cdc:	e0db      	b.n	8009e96 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8009cde:	4b73      	ldr	r3, [pc, #460]	@ (8009eac <HAL_RCC_GetSysClockFreq+0x208>)
 8009ce0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8009ce2:	e0d8      	b.n	8009e96 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8009ce4:	4b6f      	ldr	r3, [pc, #444]	@ (8009ea4 <HAL_RCC_GetSysClockFreq+0x200>)
 8009ce6:	685b      	ldr	r3, [r3, #4]
 8009ce8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009cec:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8009cee:	4b6d      	ldr	r3, [pc, #436]	@ (8009ea4 <HAL_RCC_GetSysClockFreq+0x200>)
 8009cf0:	685b      	ldr	r3, [r3, #4]
 8009cf2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009cf6:	2b00      	cmp	r3, #0
 8009cf8:	d063      	beq.n	8009dc2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009cfa:	4b6a      	ldr	r3, [pc, #424]	@ (8009ea4 <HAL_RCC_GetSysClockFreq+0x200>)
 8009cfc:	685b      	ldr	r3, [r3, #4]
 8009cfe:	099b      	lsrs	r3, r3, #6
 8009d00:	2200      	movs	r2, #0
 8009d02:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009d04:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8009d06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d08:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009d0c:	633b      	str	r3, [r7, #48]	@ 0x30
 8009d0e:	2300      	movs	r3, #0
 8009d10:	637b      	str	r3, [r7, #52]	@ 0x34
 8009d12:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8009d16:	4622      	mov	r2, r4
 8009d18:	462b      	mov	r3, r5
 8009d1a:	f04f 0000 	mov.w	r0, #0
 8009d1e:	f04f 0100 	mov.w	r1, #0
 8009d22:	0159      	lsls	r1, r3, #5
 8009d24:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8009d28:	0150      	lsls	r0, r2, #5
 8009d2a:	4602      	mov	r2, r0
 8009d2c:	460b      	mov	r3, r1
 8009d2e:	4621      	mov	r1, r4
 8009d30:	1a51      	subs	r1, r2, r1
 8009d32:	6139      	str	r1, [r7, #16]
 8009d34:	4629      	mov	r1, r5
 8009d36:	eb63 0301 	sbc.w	r3, r3, r1
 8009d3a:	617b      	str	r3, [r7, #20]
 8009d3c:	f04f 0200 	mov.w	r2, #0
 8009d40:	f04f 0300 	mov.w	r3, #0
 8009d44:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8009d48:	4659      	mov	r1, fp
 8009d4a:	018b      	lsls	r3, r1, #6
 8009d4c:	4651      	mov	r1, sl
 8009d4e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8009d52:	4651      	mov	r1, sl
 8009d54:	018a      	lsls	r2, r1, #6
 8009d56:	4651      	mov	r1, sl
 8009d58:	ebb2 0801 	subs.w	r8, r2, r1
 8009d5c:	4659      	mov	r1, fp
 8009d5e:	eb63 0901 	sbc.w	r9, r3, r1
 8009d62:	f04f 0200 	mov.w	r2, #0
 8009d66:	f04f 0300 	mov.w	r3, #0
 8009d6a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8009d6e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8009d72:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8009d76:	4690      	mov	r8, r2
 8009d78:	4699      	mov	r9, r3
 8009d7a:	4623      	mov	r3, r4
 8009d7c:	eb18 0303 	adds.w	r3, r8, r3
 8009d80:	60bb      	str	r3, [r7, #8]
 8009d82:	462b      	mov	r3, r5
 8009d84:	eb49 0303 	adc.w	r3, r9, r3
 8009d88:	60fb      	str	r3, [r7, #12]
 8009d8a:	f04f 0200 	mov.w	r2, #0
 8009d8e:	f04f 0300 	mov.w	r3, #0
 8009d92:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8009d96:	4629      	mov	r1, r5
 8009d98:	024b      	lsls	r3, r1, #9
 8009d9a:	4621      	mov	r1, r4
 8009d9c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8009da0:	4621      	mov	r1, r4
 8009da2:	024a      	lsls	r2, r1, #9
 8009da4:	4610      	mov	r0, r2
 8009da6:	4619      	mov	r1, r3
 8009da8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009daa:	2200      	movs	r2, #0
 8009dac:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009dae:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009db0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8009db4:	f7f6 ff1a 	bl	8000bec <__aeabi_uldivmod>
 8009db8:	4602      	mov	r2, r0
 8009dba:	460b      	mov	r3, r1
 8009dbc:	4613      	mov	r3, r2
 8009dbe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009dc0:	e058      	b.n	8009e74 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009dc2:	4b38      	ldr	r3, [pc, #224]	@ (8009ea4 <HAL_RCC_GetSysClockFreq+0x200>)
 8009dc4:	685b      	ldr	r3, [r3, #4]
 8009dc6:	099b      	lsrs	r3, r3, #6
 8009dc8:	2200      	movs	r2, #0
 8009dca:	4618      	mov	r0, r3
 8009dcc:	4611      	mov	r1, r2
 8009dce:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8009dd2:	623b      	str	r3, [r7, #32]
 8009dd4:	2300      	movs	r3, #0
 8009dd6:	627b      	str	r3, [r7, #36]	@ 0x24
 8009dd8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8009ddc:	4642      	mov	r2, r8
 8009dde:	464b      	mov	r3, r9
 8009de0:	f04f 0000 	mov.w	r0, #0
 8009de4:	f04f 0100 	mov.w	r1, #0
 8009de8:	0159      	lsls	r1, r3, #5
 8009dea:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8009dee:	0150      	lsls	r0, r2, #5
 8009df0:	4602      	mov	r2, r0
 8009df2:	460b      	mov	r3, r1
 8009df4:	4641      	mov	r1, r8
 8009df6:	ebb2 0a01 	subs.w	sl, r2, r1
 8009dfa:	4649      	mov	r1, r9
 8009dfc:	eb63 0b01 	sbc.w	fp, r3, r1
 8009e00:	f04f 0200 	mov.w	r2, #0
 8009e04:	f04f 0300 	mov.w	r3, #0
 8009e08:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8009e0c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8009e10:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8009e14:	ebb2 040a 	subs.w	r4, r2, sl
 8009e18:	eb63 050b 	sbc.w	r5, r3, fp
 8009e1c:	f04f 0200 	mov.w	r2, #0
 8009e20:	f04f 0300 	mov.w	r3, #0
 8009e24:	00eb      	lsls	r3, r5, #3
 8009e26:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8009e2a:	00e2      	lsls	r2, r4, #3
 8009e2c:	4614      	mov	r4, r2
 8009e2e:	461d      	mov	r5, r3
 8009e30:	4643      	mov	r3, r8
 8009e32:	18e3      	adds	r3, r4, r3
 8009e34:	603b      	str	r3, [r7, #0]
 8009e36:	464b      	mov	r3, r9
 8009e38:	eb45 0303 	adc.w	r3, r5, r3
 8009e3c:	607b      	str	r3, [r7, #4]
 8009e3e:	f04f 0200 	mov.w	r2, #0
 8009e42:	f04f 0300 	mov.w	r3, #0
 8009e46:	e9d7 4500 	ldrd	r4, r5, [r7]
 8009e4a:	4629      	mov	r1, r5
 8009e4c:	028b      	lsls	r3, r1, #10
 8009e4e:	4621      	mov	r1, r4
 8009e50:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8009e54:	4621      	mov	r1, r4
 8009e56:	028a      	lsls	r2, r1, #10
 8009e58:	4610      	mov	r0, r2
 8009e5a:	4619      	mov	r1, r3
 8009e5c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009e5e:	2200      	movs	r2, #0
 8009e60:	61bb      	str	r3, [r7, #24]
 8009e62:	61fa      	str	r2, [r7, #28]
 8009e64:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009e68:	f7f6 fec0 	bl	8000bec <__aeabi_uldivmod>
 8009e6c:	4602      	mov	r2, r0
 8009e6e:	460b      	mov	r3, r1
 8009e70:	4613      	mov	r3, r2
 8009e72:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8009e74:	4b0b      	ldr	r3, [pc, #44]	@ (8009ea4 <HAL_RCC_GetSysClockFreq+0x200>)
 8009e76:	685b      	ldr	r3, [r3, #4]
 8009e78:	0c1b      	lsrs	r3, r3, #16
 8009e7a:	f003 0303 	and.w	r3, r3, #3
 8009e7e:	3301      	adds	r3, #1
 8009e80:	005b      	lsls	r3, r3, #1
 8009e82:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8009e84:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8009e86:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009e88:	fbb2 f3f3 	udiv	r3, r2, r3
 8009e8c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8009e8e:	e002      	b.n	8009e96 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8009e90:	4b05      	ldr	r3, [pc, #20]	@ (8009ea8 <HAL_RCC_GetSysClockFreq+0x204>)
 8009e92:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8009e94:	bf00      	nop
    }
  }
  return sysclockfreq;
 8009e96:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8009e98:	4618      	mov	r0, r3
 8009e9a:	3750      	adds	r7, #80	@ 0x50
 8009e9c:	46bd      	mov	sp, r7
 8009e9e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009ea2:	bf00      	nop
 8009ea4:	40023800 	.word	0x40023800
 8009ea8:	00f42400 	.word	0x00f42400
 8009eac:	007a1200 	.word	0x007a1200

08009eb0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009eb0:	b480      	push	{r7}
 8009eb2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8009eb4:	4b03      	ldr	r3, [pc, #12]	@ (8009ec4 <HAL_RCC_GetHCLKFreq+0x14>)
 8009eb6:	681b      	ldr	r3, [r3, #0]
}
 8009eb8:	4618      	mov	r0, r3
 8009eba:	46bd      	mov	sp, r7
 8009ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ec0:	4770      	bx	lr
 8009ec2:	bf00      	nop
 8009ec4:	20000090 	.word	0x20000090

08009ec8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009ec8:	b580      	push	{r7, lr}
 8009eca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8009ecc:	f7ff fff0 	bl	8009eb0 <HAL_RCC_GetHCLKFreq>
 8009ed0:	4602      	mov	r2, r0
 8009ed2:	4b05      	ldr	r3, [pc, #20]	@ (8009ee8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8009ed4:	689b      	ldr	r3, [r3, #8]
 8009ed6:	0a9b      	lsrs	r3, r3, #10
 8009ed8:	f003 0307 	and.w	r3, r3, #7
 8009edc:	4903      	ldr	r1, [pc, #12]	@ (8009eec <HAL_RCC_GetPCLK1Freq+0x24>)
 8009ede:	5ccb      	ldrb	r3, [r1, r3]
 8009ee0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009ee4:	4618      	mov	r0, r3
 8009ee6:	bd80      	pop	{r7, pc}
 8009ee8:	40023800 	.word	0x40023800
 8009eec:	080111dc 	.word	0x080111dc

08009ef0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009ef0:	b580      	push	{r7, lr}
 8009ef2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8009ef4:	f7ff ffdc 	bl	8009eb0 <HAL_RCC_GetHCLKFreq>
 8009ef8:	4602      	mov	r2, r0
 8009efa:	4b05      	ldr	r3, [pc, #20]	@ (8009f10 <HAL_RCC_GetPCLK2Freq+0x20>)
 8009efc:	689b      	ldr	r3, [r3, #8]
 8009efe:	0b5b      	lsrs	r3, r3, #13
 8009f00:	f003 0307 	and.w	r3, r3, #7
 8009f04:	4903      	ldr	r1, [pc, #12]	@ (8009f14 <HAL_RCC_GetPCLK2Freq+0x24>)
 8009f06:	5ccb      	ldrb	r3, [r1, r3]
 8009f08:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009f0c:	4618      	mov	r0, r3
 8009f0e:	bd80      	pop	{r7, pc}
 8009f10:	40023800 	.word	0x40023800
 8009f14:	080111dc 	.word	0x080111dc

08009f18 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8009f18:	b480      	push	{r7}
 8009f1a:	b083      	sub	sp, #12
 8009f1c:	af00      	add	r7, sp, #0
 8009f1e:	6078      	str	r0, [r7, #4]
 8009f20:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	220f      	movs	r2, #15
 8009f26:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8009f28:	4b12      	ldr	r3, [pc, #72]	@ (8009f74 <HAL_RCC_GetClockConfig+0x5c>)
 8009f2a:	689b      	ldr	r3, [r3, #8]
 8009f2c:	f003 0203 	and.w	r2, r3, #3
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8009f34:	4b0f      	ldr	r3, [pc, #60]	@ (8009f74 <HAL_RCC_GetClockConfig+0x5c>)
 8009f36:	689b      	ldr	r3, [r3, #8]
 8009f38:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8009f40:	4b0c      	ldr	r3, [pc, #48]	@ (8009f74 <HAL_RCC_GetClockConfig+0x5c>)
 8009f42:	689b      	ldr	r3, [r3, #8]
 8009f44:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8009f4c:	4b09      	ldr	r3, [pc, #36]	@ (8009f74 <HAL_RCC_GetClockConfig+0x5c>)
 8009f4e:	689b      	ldr	r3, [r3, #8]
 8009f50:	08db      	lsrs	r3, r3, #3
 8009f52:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8009f5a:	4b07      	ldr	r3, [pc, #28]	@ (8009f78 <HAL_RCC_GetClockConfig+0x60>)
 8009f5c:	681b      	ldr	r3, [r3, #0]
 8009f5e:	f003 0207 	and.w	r2, r3, #7
 8009f62:	683b      	ldr	r3, [r7, #0]
 8009f64:	601a      	str	r2, [r3, #0]
}
 8009f66:	bf00      	nop
 8009f68:	370c      	adds	r7, #12
 8009f6a:	46bd      	mov	sp, r7
 8009f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f70:	4770      	bx	lr
 8009f72:	bf00      	nop
 8009f74:	40023800 	.word	0x40023800
 8009f78:	40023c00 	.word	0x40023c00

08009f7c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8009f7c:	b580      	push	{r7, lr}
 8009f7e:	b082      	sub	sp, #8
 8009f80:	af00      	add	r7, sp, #0
 8009f82:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	2b00      	cmp	r3, #0
 8009f88:	d101      	bne.n	8009f8e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8009f8a:	2301      	movs	r3, #1
 8009f8c:	e07b      	b.n	800a086 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009f92:	2b00      	cmp	r3, #0
 8009f94:	d108      	bne.n	8009fa8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	685b      	ldr	r3, [r3, #4]
 8009f9a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8009f9e:	d009      	beq.n	8009fb4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	2200      	movs	r2, #0
 8009fa4:	61da      	str	r2, [r3, #28]
 8009fa6:	e005      	b.n	8009fb4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	2200      	movs	r2, #0
 8009fac:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	2200      	movs	r2, #0
 8009fb2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	2200      	movs	r2, #0
 8009fb8:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8009fc0:	b2db      	uxtb	r3, r3
 8009fc2:	2b00      	cmp	r3, #0
 8009fc4:	d106      	bne.n	8009fd4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	2200      	movs	r2, #0
 8009fca:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8009fce:	6878      	ldr	r0, [r7, #4]
 8009fd0:	f7f8 fe30 	bl	8002c34 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	2202      	movs	r2, #2
 8009fd8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	681b      	ldr	r3, [r3, #0]
 8009fe0:	681a      	ldr	r2, [r3, #0]
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	681b      	ldr	r3, [r3, #0]
 8009fe6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009fea:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	685b      	ldr	r3, [r3, #4]
 8009ff0:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	689b      	ldr	r3, [r3, #8]
 8009ff8:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8009ffc:	431a      	orrs	r2, r3
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	68db      	ldr	r3, [r3, #12]
 800a002:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a006:	431a      	orrs	r2, r3
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	691b      	ldr	r3, [r3, #16]
 800a00c:	f003 0302 	and.w	r3, r3, #2
 800a010:	431a      	orrs	r2, r3
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	695b      	ldr	r3, [r3, #20]
 800a016:	f003 0301 	and.w	r3, r3, #1
 800a01a:	431a      	orrs	r2, r3
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	699b      	ldr	r3, [r3, #24]
 800a020:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a024:	431a      	orrs	r2, r3
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	69db      	ldr	r3, [r3, #28]
 800a02a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800a02e:	431a      	orrs	r2, r3
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	6a1b      	ldr	r3, [r3, #32]
 800a034:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a038:	ea42 0103 	orr.w	r1, r2, r3
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a040:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	681b      	ldr	r3, [r3, #0]
 800a048:	430a      	orrs	r2, r1
 800a04a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	699b      	ldr	r3, [r3, #24]
 800a050:	0c1b      	lsrs	r3, r3, #16
 800a052:	f003 0104 	and.w	r1, r3, #4
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a05a:	f003 0210 	and.w	r2, r3, #16
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	681b      	ldr	r3, [r3, #0]
 800a062:	430a      	orrs	r2, r1
 800a064:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	681b      	ldr	r3, [r3, #0]
 800a06a:	69da      	ldr	r2, [r3, #28]
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	681b      	ldr	r3, [r3, #0]
 800a070:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800a074:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	2200      	movs	r2, #0
 800a07a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	2201      	movs	r2, #1
 800a080:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 800a084:	2300      	movs	r3, #0
}
 800a086:	4618      	mov	r0, r3
 800a088:	3708      	adds	r7, #8
 800a08a:	46bd      	mov	sp, r7
 800a08c:	bd80      	pop	{r7, pc}

0800a08e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a08e:	b580      	push	{r7, lr}
 800a090:	b082      	sub	sp, #8
 800a092:	af00      	add	r7, sp, #0
 800a094:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	2b00      	cmp	r3, #0
 800a09a:	d101      	bne.n	800a0a0 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a09c:	2301      	movs	r3, #1
 800a09e:	e041      	b.n	800a124 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a0a6:	b2db      	uxtb	r3, r3
 800a0a8:	2b00      	cmp	r3, #0
 800a0aa:	d106      	bne.n	800a0ba <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	2200      	movs	r2, #0
 800a0b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a0b4:	6878      	ldr	r0, [r7, #4]
 800a0b6:	f000 f839 	bl	800a12c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	2202      	movs	r2, #2
 800a0be:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	681a      	ldr	r2, [r3, #0]
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	3304      	adds	r3, #4
 800a0ca:	4619      	mov	r1, r3
 800a0cc:	4610      	mov	r0, r2
 800a0ce:	f000 f9b1 	bl	800a434 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	2201      	movs	r2, #1
 800a0d6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	2201      	movs	r2, #1
 800a0de:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	2201      	movs	r2, #1
 800a0e6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	2201      	movs	r2, #1
 800a0ee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	2201      	movs	r2, #1
 800a0f6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	2201      	movs	r2, #1
 800a0fe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	2201      	movs	r2, #1
 800a106:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	2201      	movs	r2, #1
 800a10e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	2201      	movs	r2, #1
 800a116:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	2201      	movs	r2, #1
 800a11e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800a122:	2300      	movs	r3, #0
}
 800a124:	4618      	mov	r0, r3
 800a126:	3708      	adds	r7, #8
 800a128:	46bd      	mov	sp, r7
 800a12a:	bd80      	pop	{r7, pc}

0800a12c <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800a12c:	b480      	push	{r7}
 800a12e:	b083      	sub	sp, #12
 800a130:	af00      	add	r7, sp, #0
 800a132:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800a134:	bf00      	nop
 800a136:	370c      	adds	r7, #12
 800a138:	46bd      	mov	sp, r7
 800a13a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a13e:	4770      	bx	lr

0800a140 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a140:	b480      	push	{r7}
 800a142:	b085      	sub	sp, #20
 800a144:	af00      	add	r7, sp, #0
 800a146:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a14e:	b2db      	uxtb	r3, r3
 800a150:	2b01      	cmp	r3, #1
 800a152:	d001      	beq.n	800a158 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800a154:	2301      	movs	r3, #1
 800a156:	e044      	b.n	800a1e2 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	2202      	movs	r2, #2
 800a15c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	681b      	ldr	r3, [r3, #0]
 800a164:	68da      	ldr	r2, [r3, #12]
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	681b      	ldr	r3, [r3, #0]
 800a16a:	f042 0201 	orr.w	r2, r2, #1
 800a16e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	681b      	ldr	r3, [r3, #0]
 800a174:	4a1e      	ldr	r2, [pc, #120]	@ (800a1f0 <HAL_TIM_Base_Start_IT+0xb0>)
 800a176:	4293      	cmp	r3, r2
 800a178:	d018      	beq.n	800a1ac <HAL_TIM_Base_Start_IT+0x6c>
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	681b      	ldr	r3, [r3, #0]
 800a17e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a182:	d013      	beq.n	800a1ac <HAL_TIM_Base_Start_IT+0x6c>
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	681b      	ldr	r3, [r3, #0]
 800a188:	4a1a      	ldr	r2, [pc, #104]	@ (800a1f4 <HAL_TIM_Base_Start_IT+0xb4>)
 800a18a:	4293      	cmp	r3, r2
 800a18c:	d00e      	beq.n	800a1ac <HAL_TIM_Base_Start_IT+0x6c>
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	681b      	ldr	r3, [r3, #0]
 800a192:	4a19      	ldr	r2, [pc, #100]	@ (800a1f8 <HAL_TIM_Base_Start_IT+0xb8>)
 800a194:	4293      	cmp	r3, r2
 800a196:	d009      	beq.n	800a1ac <HAL_TIM_Base_Start_IT+0x6c>
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	681b      	ldr	r3, [r3, #0]
 800a19c:	4a17      	ldr	r2, [pc, #92]	@ (800a1fc <HAL_TIM_Base_Start_IT+0xbc>)
 800a19e:	4293      	cmp	r3, r2
 800a1a0:	d004      	beq.n	800a1ac <HAL_TIM_Base_Start_IT+0x6c>
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	681b      	ldr	r3, [r3, #0]
 800a1a6:	4a16      	ldr	r2, [pc, #88]	@ (800a200 <HAL_TIM_Base_Start_IT+0xc0>)
 800a1a8:	4293      	cmp	r3, r2
 800a1aa:	d111      	bne.n	800a1d0 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	681b      	ldr	r3, [r3, #0]
 800a1b0:	689b      	ldr	r3, [r3, #8]
 800a1b2:	f003 0307 	and.w	r3, r3, #7
 800a1b6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a1b8:	68fb      	ldr	r3, [r7, #12]
 800a1ba:	2b06      	cmp	r3, #6
 800a1bc:	d010      	beq.n	800a1e0 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	681b      	ldr	r3, [r3, #0]
 800a1c2:	681a      	ldr	r2, [r3, #0]
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	681b      	ldr	r3, [r3, #0]
 800a1c8:	f042 0201 	orr.w	r2, r2, #1
 800a1cc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a1ce:	e007      	b.n	800a1e0 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	681b      	ldr	r3, [r3, #0]
 800a1d4:	681a      	ldr	r2, [r3, #0]
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	681b      	ldr	r3, [r3, #0]
 800a1da:	f042 0201 	orr.w	r2, r2, #1
 800a1de:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800a1e0:	2300      	movs	r3, #0
}
 800a1e2:	4618      	mov	r0, r3
 800a1e4:	3714      	adds	r7, #20
 800a1e6:	46bd      	mov	sp, r7
 800a1e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1ec:	4770      	bx	lr
 800a1ee:	bf00      	nop
 800a1f0:	40010000 	.word	0x40010000
 800a1f4:	40000400 	.word	0x40000400
 800a1f8:	40000800 	.word	0x40000800
 800a1fc:	40000c00 	.word	0x40000c00
 800a200:	40014000 	.word	0x40014000

0800a204 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a204:	b580      	push	{r7, lr}
 800a206:	b084      	sub	sp, #16
 800a208:	af00      	add	r7, sp, #0
 800a20a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	681b      	ldr	r3, [r3, #0]
 800a210:	68db      	ldr	r3, [r3, #12]
 800a212:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	681b      	ldr	r3, [r3, #0]
 800a218:	691b      	ldr	r3, [r3, #16]
 800a21a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800a21c:	68bb      	ldr	r3, [r7, #8]
 800a21e:	f003 0302 	and.w	r3, r3, #2
 800a222:	2b00      	cmp	r3, #0
 800a224:	d020      	beq.n	800a268 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800a226:	68fb      	ldr	r3, [r7, #12]
 800a228:	f003 0302 	and.w	r3, r3, #2
 800a22c:	2b00      	cmp	r3, #0
 800a22e:	d01b      	beq.n	800a268 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	681b      	ldr	r3, [r3, #0]
 800a234:	f06f 0202 	mvn.w	r2, #2
 800a238:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	2201      	movs	r2, #1
 800a23e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	681b      	ldr	r3, [r3, #0]
 800a244:	699b      	ldr	r3, [r3, #24]
 800a246:	f003 0303 	and.w	r3, r3, #3
 800a24a:	2b00      	cmp	r3, #0
 800a24c:	d003      	beq.n	800a256 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a24e:	6878      	ldr	r0, [r7, #4]
 800a250:	f000 f8d2 	bl	800a3f8 <HAL_TIM_IC_CaptureCallback>
 800a254:	e005      	b.n	800a262 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a256:	6878      	ldr	r0, [r7, #4]
 800a258:	f000 f8c4 	bl	800a3e4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a25c:	6878      	ldr	r0, [r7, #4]
 800a25e:	f000 f8d5 	bl	800a40c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	2200      	movs	r2, #0
 800a266:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800a268:	68bb      	ldr	r3, [r7, #8]
 800a26a:	f003 0304 	and.w	r3, r3, #4
 800a26e:	2b00      	cmp	r3, #0
 800a270:	d020      	beq.n	800a2b4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800a272:	68fb      	ldr	r3, [r7, #12]
 800a274:	f003 0304 	and.w	r3, r3, #4
 800a278:	2b00      	cmp	r3, #0
 800a27a:	d01b      	beq.n	800a2b4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	681b      	ldr	r3, [r3, #0]
 800a280:	f06f 0204 	mvn.w	r2, #4
 800a284:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	2202      	movs	r2, #2
 800a28a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	681b      	ldr	r3, [r3, #0]
 800a290:	699b      	ldr	r3, [r3, #24]
 800a292:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a296:	2b00      	cmp	r3, #0
 800a298:	d003      	beq.n	800a2a2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a29a:	6878      	ldr	r0, [r7, #4]
 800a29c:	f000 f8ac 	bl	800a3f8 <HAL_TIM_IC_CaptureCallback>
 800a2a0:	e005      	b.n	800a2ae <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a2a2:	6878      	ldr	r0, [r7, #4]
 800a2a4:	f000 f89e 	bl	800a3e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a2a8:	6878      	ldr	r0, [r7, #4]
 800a2aa:	f000 f8af 	bl	800a40c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	2200      	movs	r2, #0
 800a2b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800a2b4:	68bb      	ldr	r3, [r7, #8]
 800a2b6:	f003 0308 	and.w	r3, r3, #8
 800a2ba:	2b00      	cmp	r3, #0
 800a2bc:	d020      	beq.n	800a300 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800a2be:	68fb      	ldr	r3, [r7, #12]
 800a2c0:	f003 0308 	and.w	r3, r3, #8
 800a2c4:	2b00      	cmp	r3, #0
 800a2c6:	d01b      	beq.n	800a300 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	681b      	ldr	r3, [r3, #0]
 800a2cc:	f06f 0208 	mvn.w	r2, #8
 800a2d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	2204      	movs	r2, #4
 800a2d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	681b      	ldr	r3, [r3, #0]
 800a2dc:	69db      	ldr	r3, [r3, #28]
 800a2de:	f003 0303 	and.w	r3, r3, #3
 800a2e2:	2b00      	cmp	r3, #0
 800a2e4:	d003      	beq.n	800a2ee <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a2e6:	6878      	ldr	r0, [r7, #4]
 800a2e8:	f000 f886 	bl	800a3f8 <HAL_TIM_IC_CaptureCallback>
 800a2ec:	e005      	b.n	800a2fa <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a2ee:	6878      	ldr	r0, [r7, #4]
 800a2f0:	f000 f878 	bl	800a3e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a2f4:	6878      	ldr	r0, [r7, #4]
 800a2f6:	f000 f889 	bl	800a40c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	2200      	movs	r2, #0
 800a2fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800a300:	68bb      	ldr	r3, [r7, #8]
 800a302:	f003 0310 	and.w	r3, r3, #16
 800a306:	2b00      	cmp	r3, #0
 800a308:	d020      	beq.n	800a34c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800a30a:	68fb      	ldr	r3, [r7, #12]
 800a30c:	f003 0310 	and.w	r3, r3, #16
 800a310:	2b00      	cmp	r3, #0
 800a312:	d01b      	beq.n	800a34c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	681b      	ldr	r3, [r3, #0]
 800a318:	f06f 0210 	mvn.w	r2, #16
 800a31c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	2208      	movs	r2, #8
 800a322:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	681b      	ldr	r3, [r3, #0]
 800a328:	69db      	ldr	r3, [r3, #28]
 800a32a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a32e:	2b00      	cmp	r3, #0
 800a330:	d003      	beq.n	800a33a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a332:	6878      	ldr	r0, [r7, #4]
 800a334:	f000 f860 	bl	800a3f8 <HAL_TIM_IC_CaptureCallback>
 800a338:	e005      	b.n	800a346 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a33a:	6878      	ldr	r0, [r7, #4]
 800a33c:	f000 f852 	bl	800a3e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a340:	6878      	ldr	r0, [r7, #4]
 800a342:	f000 f863 	bl	800a40c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	2200      	movs	r2, #0
 800a34a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800a34c:	68bb      	ldr	r3, [r7, #8]
 800a34e:	f003 0301 	and.w	r3, r3, #1
 800a352:	2b00      	cmp	r3, #0
 800a354:	d00c      	beq.n	800a370 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800a356:	68fb      	ldr	r3, [r7, #12]
 800a358:	f003 0301 	and.w	r3, r3, #1
 800a35c:	2b00      	cmp	r3, #0
 800a35e:	d007      	beq.n	800a370 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	681b      	ldr	r3, [r3, #0]
 800a364:	f06f 0201 	mvn.w	r2, #1
 800a368:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a36a:	6878      	ldr	r0, [r7, #4]
 800a36c:	f7f8 fc08 	bl	8002b80 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800a370:	68bb      	ldr	r3, [r7, #8]
 800a372:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a376:	2b00      	cmp	r3, #0
 800a378:	d00c      	beq.n	800a394 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800a37a:	68fb      	ldr	r3, [r7, #12]
 800a37c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a380:	2b00      	cmp	r3, #0
 800a382:	d007      	beq.n	800a394 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	681b      	ldr	r3, [r3, #0]
 800a388:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800a38c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a38e:	6878      	ldr	r0, [r7, #4]
 800a390:	f000 f8e6 	bl	800a560 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800a394:	68bb      	ldr	r3, [r7, #8]
 800a396:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a39a:	2b00      	cmp	r3, #0
 800a39c:	d00c      	beq.n	800a3b8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800a39e:	68fb      	ldr	r3, [r7, #12]
 800a3a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a3a4:	2b00      	cmp	r3, #0
 800a3a6:	d007      	beq.n	800a3b8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	681b      	ldr	r3, [r3, #0]
 800a3ac:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800a3b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a3b2:	6878      	ldr	r0, [r7, #4]
 800a3b4:	f000 f834 	bl	800a420 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800a3b8:	68bb      	ldr	r3, [r7, #8]
 800a3ba:	f003 0320 	and.w	r3, r3, #32
 800a3be:	2b00      	cmp	r3, #0
 800a3c0:	d00c      	beq.n	800a3dc <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800a3c2:	68fb      	ldr	r3, [r7, #12]
 800a3c4:	f003 0320 	and.w	r3, r3, #32
 800a3c8:	2b00      	cmp	r3, #0
 800a3ca:	d007      	beq.n	800a3dc <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	681b      	ldr	r3, [r3, #0]
 800a3d0:	f06f 0220 	mvn.w	r2, #32
 800a3d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a3d6:	6878      	ldr	r0, [r7, #4]
 800a3d8:	f000 f8b8 	bl	800a54c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a3dc:	bf00      	nop
 800a3de:	3710      	adds	r7, #16
 800a3e0:	46bd      	mov	sp, r7
 800a3e2:	bd80      	pop	{r7, pc}

0800a3e4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a3e4:	b480      	push	{r7}
 800a3e6:	b083      	sub	sp, #12
 800a3e8:	af00      	add	r7, sp, #0
 800a3ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a3ec:	bf00      	nop
 800a3ee:	370c      	adds	r7, #12
 800a3f0:	46bd      	mov	sp, r7
 800a3f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3f6:	4770      	bx	lr

0800a3f8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a3f8:	b480      	push	{r7}
 800a3fa:	b083      	sub	sp, #12
 800a3fc:	af00      	add	r7, sp, #0
 800a3fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a400:	bf00      	nop
 800a402:	370c      	adds	r7, #12
 800a404:	46bd      	mov	sp, r7
 800a406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a40a:	4770      	bx	lr

0800a40c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a40c:	b480      	push	{r7}
 800a40e:	b083      	sub	sp, #12
 800a410:	af00      	add	r7, sp, #0
 800a412:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a414:	bf00      	nop
 800a416:	370c      	adds	r7, #12
 800a418:	46bd      	mov	sp, r7
 800a41a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a41e:	4770      	bx	lr

0800a420 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a420:	b480      	push	{r7}
 800a422:	b083      	sub	sp, #12
 800a424:	af00      	add	r7, sp, #0
 800a426:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a428:	bf00      	nop
 800a42a:	370c      	adds	r7, #12
 800a42c:	46bd      	mov	sp, r7
 800a42e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a432:	4770      	bx	lr

0800a434 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800a434:	b480      	push	{r7}
 800a436:	b085      	sub	sp, #20
 800a438:	af00      	add	r7, sp, #0
 800a43a:	6078      	str	r0, [r7, #4]
 800a43c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	681b      	ldr	r3, [r3, #0]
 800a442:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	4a3a      	ldr	r2, [pc, #232]	@ (800a530 <TIM_Base_SetConfig+0xfc>)
 800a448:	4293      	cmp	r3, r2
 800a44a:	d00f      	beq.n	800a46c <TIM_Base_SetConfig+0x38>
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a452:	d00b      	beq.n	800a46c <TIM_Base_SetConfig+0x38>
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	4a37      	ldr	r2, [pc, #220]	@ (800a534 <TIM_Base_SetConfig+0x100>)
 800a458:	4293      	cmp	r3, r2
 800a45a:	d007      	beq.n	800a46c <TIM_Base_SetConfig+0x38>
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	4a36      	ldr	r2, [pc, #216]	@ (800a538 <TIM_Base_SetConfig+0x104>)
 800a460:	4293      	cmp	r3, r2
 800a462:	d003      	beq.n	800a46c <TIM_Base_SetConfig+0x38>
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	4a35      	ldr	r2, [pc, #212]	@ (800a53c <TIM_Base_SetConfig+0x108>)
 800a468:	4293      	cmp	r3, r2
 800a46a:	d108      	bne.n	800a47e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a46c:	68fb      	ldr	r3, [r7, #12]
 800a46e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a472:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a474:	683b      	ldr	r3, [r7, #0]
 800a476:	685b      	ldr	r3, [r3, #4]
 800a478:	68fa      	ldr	r2, [r7, #12]
 800a47a:	4313      	orrs	r3, r2
 800a47c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	4a2b      	ldr	r2, [pc, #172]	@ (800a530 <TIM_Base_SetConfig+0xfc>)
 800a482:	4293      	cmp	r3, r2
 800a484:	d01b      	beq.n	800a4be <TIM_Base_SetConfig+0x8a>
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a48c:	d017      	beq.n	800a4be <TIM_Base_SetConfig+0x8a>
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	4a28      	ldr	r2, [pc, #160]	@ (800a534 <TIM_Base_SetConfig+0x100>)
 800a492:	4293      	cmp	r3, r2
 800a494:	d013      	beq.n	800a4be <TIM_Base_SetConfig+0x8a>
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	4a27      	ldr	r2, [pc, #156]	@ (800a538 <TIM_Base_SetConfig+0x104>)
 800a49a:	4293      	cmp	r3, r2
 800a49c:	d00f      	beq.n	800a4be <TIM_Base_SetConfig+0x8a>
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	4a26      	ldr	r2, [pc, #152]	@ (800a53c <TIM_Base_SetConfig+0x108>)
 800a4a2:	4293      	cmp	r3, r2
 800a4a4:	d00b      	beq.n	800a4be <TIM_Base_SetConfig+0x8a>
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	4a25      	ldr	r2, [pc, #148]	@ (800a540 <TIM_Base_SetConfig+0x10c>)
 800a4aa:	4293      	cmp	r3, r2
 800a4ac:	d007      	beq.n	800a4be <TIM_Base_SetConfig+0x8a>
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	4a24      	ldr	r2, [pc, #144]	@ (800a544 <TIM_Base_SetConfig+0x110>)
 800a4b2:	4293      	cmp	r3, r2
 800a4b4:	d003      	beq.n	800a4be <TIM_Base_SetConfig+0x8a>
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	4a23      	ldr	r2, [pc, #140]	@ (800a548 <TIM_Base_SetConfig+0x114>)
 800a4ba:	4293      	cmp	r3, r2
 800a4bc:	d108      	bne.n	800a4d0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a4be:	68fb      	ldr	r3, [r7, #12]
 800a4c0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a4c4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a4c6:	683b      	ldr	r3, [r7, #0]
 800a4c8:	68db      	ldr	r3, [r3, #12]
 800a4ca:	68fa      	ldr	r2, [r7, #12]
 800a4cc:	4313      	orrs	r3, r2
 800a4ce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a4d0:	68fb      	ldr	r3, [r7, #12]
 800a4d2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800a4d6:	683b      	ldr	r3, [r7, #0]
 800a4d8:	695b      	ldr	r3, [r3, #20]
 800a4da:	4313      	orrs	r3, r2
 800a4dc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	68fa      	ldr	r2, [r7, #12]
 800a4e2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a4e4:	683b      	ldr	r3, [r7, #0]
 800a4e6:	689a      	ldr	r2, [r3, #8]
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a4ec:	683b      	ldr	r3, [r7, #0]
 800a4ee:	681a      	ldr	r2, [r3, #0]
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	4a0e      	ldr	r2, [pc, #56]	@ (800a530 <TIM_Base_SetConfig+0xfc>)
 800a4f8:	4293      	cmp	r3, r2
 800a4fa:	d103      	bne.n	800a504 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a4fc:	683b      	ldr	r3, [r7, #0]
 800a4fe:	691a      	ldr	r2, [r3, #16]
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	2201      	movs	r2, #1
 800a508:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	691b      	ldr	r3, [r3, #16]
 800a50e:	f003 0301 	and.w	r3, r3, #1
 800a512:	2b01      	cmp	r3, #1
 800a514:	d105      	bne.n	800a522 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	691b      	ldr	r3, [r3, #16]
 800a51a:	f023 0201 	bic.w	r2, r3, #1
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	611a      	str	r2, [r3, #16]
  }
}
 800a522:	bf00      	nop
 800a524:	3714      	adds	r7, #20
 800a526:	46bd      	mov	sp, r7
 800a528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a52c:	4770      	bx	lr
 800a52e:	bf00      	nop
 800a530:	40010000 	.word	0x40010000
 800a534:	40000400 	.word	0x40000400
 800a538:	40000800 	.word	0x40000800
 800a53c:	40000c00 	.word	0x40000c00
 800a540:	40014000 	.word	0x40014000
 800a544:	40014400 	.word	0x40014400
 800a548:	40014800 	.word	0x40014800

0800a54c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a54c:	b480      	push	{r7}
 800a54e:	b083      	sub	sp, #12
 800a550:	af00      	add	r7, sp, #0
 800a552:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a554:	bf00      	nop
 800a556:	370c      	adds	r7, #12
 800a558:	46bd      	mov	sp, r7
 800a55a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a55e:	4770      	bx	lr

0800a560 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a560:	b480      	push	{r7}
 800a562:	b083      	sub	sp, #12
 800a564:	af00      	add	r7, sp, #0
 800a566:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a568:	bf00      	nop
 800a56a:	370c      	adds	r7, #12
 800a56c:	46bd      	mov	sp, r7
 800a56e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a572:	4770      	bx	lr

0800a574 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a574:	b580      	push	{r7, lr}
 800a576:	b082      	sub	sp, #8
 800a578:	af00      	add	r7, sp, #0
 800a57a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	2b00      	cmp	r3, #0
 800a580:	d101      	bne.n	800a586 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a582:	2301      	movs	r3, #1
 800a584:	e042      	b.n	800a60c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a58c:	b2db      	uxtb	r3, r3
 800a58e:	2b00      	cmp	r3, #0
 800a590:	d106      	bne.n	800a5a0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	2200      	movs	r2, #0
 800a596:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a59a:	6878      	ldr	r0, [r7, #4]
 800a59c:	f7f8 fb92 	bl	8002cc4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	2224      	movs	r2, #36	@ 0x24
 800a5a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	681b      	ldr	r3, [r3, #0]
 800a5ac:	68da      	ldr	r2, [r3, #12]
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	681b      	ldr	r3, [r3, #0]
 800a5b2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800a5b6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800a5b8:	6878      	ldr	r0, [r7, #4]
 800a5ba:	f000 f973 	bl	800a8a4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	681b      	ldr	r3, [r3, #0]
 800a5c2:	691a      	ldr	r2, [r3, #16]
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	681b      	ldr	r3, [r3, #0]
 800a5c8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800a5cc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	681b      	ldr	r3, [r3, #0]
 800a5d2:	695a      	ldr	r2, [r3, #20]
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	681b      	ldr	r3, [r3, #0]
 800a5d8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800a5dc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	681b      	ldr	r3, [r3, #0]
 800a5e2:	68da      	ldr	r2, [r3, #12]
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	681b      	ldr	r3, [r3, #0]
 800a5e8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800a5ec:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	2200      	movs	r2, #0
 800a5f2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	2220      	movs	r2, #32
 800a5f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	2220      	movs	r2, #32
 800a600:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	2200      	movs	r2, #0
 800a608:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800a60a:	2300      	movs	r3, #0
}
 800a60c:	4618      	mov	r0, r3
 800a60e:	3708      	adds	r7, #8
 800a610:	46bd      	mov	sp, r7
 800a612:	bd80      	pop	{r7, pc}

0800a614 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a614:	b580      	push	{r7, lr}
 800a616:	b08a      	sub	sp, #40	@ 0x28
 800a618:	af02      	add	r7, sp, #8
 800a61a:	60f8      	str	r0, [r7, #12]
 800a61c:	60b9      	str	r1, [r7, #8]
 800a61e:	603b      	str	r3, [r7, #0]
 800a620:	4613      	mov	r3, r2
 800a622:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800a624:	2300      	movs	r3, #0
 800a626:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a628:	68fb      	ldr	r3, [r7, #12]
 800a62a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a62e:	b2db      	uxtb	r3, r3
 800a630:	2b20      	cmp	r3, #32
 800a632:	d175      	bne.n	800a720 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800a634:	68bb      	ldr	r3, [r7, #8]
 800a636:	2b00      	cmp	r3, #0
 800a638:	d002      	beq.n	800a640 <HAL_UART_Transmit+0x2c>
 800a63a:	88fb      	ldrh	r3, [r7, #6]
 800a63c:	2b00      	cmp	r3, #0
 800a63e:	d101      	bne.n	800a644 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800a640:	2301      	movs	r3, #1
 800a642:	e06e      	b.n	800a722 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a644:	68fb      	ldr	r3, [r7, #12]
 800a646:	2200      	movs	r2, #0
 800a648:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a64a:	68fb      	ldr	r3, [r7, #12]
 800a64c:	2221      	movs	r2, #33	@ 0x21
 800a64e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800a652:	f7fe fd19 	bl	8009088 <HAL_GetTick>
 800a656:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800a658:	68fb      	ldr	r3, [r7, #12]
 800a65a:	88fa      	ldrh	r2, [r7, #6]
 800a65c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800a65e:	68fb      	ldr	r3, [r7, #12]
 800a660:	88fa      	ldrh	r2, [r7, #6]
 800a662:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a664:	68fb      	ldr	r3, [r7, #12]
 800a666:	689b      	ldr	r3, [r3, #8]
 800a668:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a66c:	d108      	bne.n	800a680 <HAL_UART_Transmit+0x6c>
 800a66e:	68fb      	ldr	r3, [r7, #12]
 800a670:	691b      	ldr	r3, [r3, #16]
 800a672:	2b00      	cmp	r3, #0
 800a674:	d104      	bne.n	800a680 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800a676:	2300      	movs	r3, #0
 800a678:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800a67a:	68bb      	ldr	r3, [r7, #8]
 800a67c:	61bb      	str	r3, [r7, #24]
 800a67e:	e003      	b.n	800a688 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800a680:	68bb      	ldr	r3, [r7, #8]
 800a682:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800a684:	2300      	movs	r3, #0
 800a686:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800a688:	e02e      	b.n	800a6e8 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a68a:	683b      	ldr	r3, [r7, #0]
 800a68c:	9300      	str	r3, [sp, #0]
 800a68e:	697b      	ldr	r3, [r7, #20]
 800a690:	2200      	movs	r2, #0
 800a692:	2180      	movs	r1, #128	@ 0x80
 800a694:	68f8      	ldr	r0, [r7, #12]
 800a696:	f000 f848 	bl	800a72a <UART_WaitOnFlagUntilTimeout>
 800a69a:	4603      	mov	r3, r0
 800a69c:	2b00      	cmp	r3, #0
 800a69e:	d005      	beq.n	800a6ac <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800a6a0:	68fb      	ldr	r3, [r7, #12]
 800a6a2:	2220      	movs	r2, #32
 800a6a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800a6a8:	2303      	movs	r3, #3
 800a6aa:	e03a      	b.n	800a722 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800a6ac:	69fb      	ldr	r3, [r7, #28]
 800a6ae:	2b00      	cmp	r3, #0
 800a6b0:	d10b      	bne.n	800a6ca <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800a6b2:	69bb      	ldr	r3, [r7, #24]
 800a6b4:	881b      	ldrh	r3, [r3, #0]
 800a6b6:	461a      	mov	r2, r3
 800a6b8:	68fb      	ldr	r3, [r7, #12]
 800a6ba:	681b      	ldr	r3, [r3, #0]
 800a6bc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a6c0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800a6c2:	69bb      	ldr	r3, [r7, #24]
 800a6c4:	3302      	adds	r3, #2
 800a6c6:	61bb      	str	r3, [r7, #24]
 800a6c8:	e007      	b.n	800a6da <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800a6ca:	69fb      	ldr	r3, [r7, #28]
 800a6cc:	781a      	ldrb	r2, [r3, #0]
 800a6ce:	68fb      	ldr	r3, [r7, #12]
 800a6d0:	681b      	ldr	r3, [r3, #0]
 800a6d2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800a6d4:	69fb      	ldr	r3, [r7, #28]
 800a6d6:	3301      	adds	r3, #1
 800a6d8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800a6da:	68fb      	ldr	r3, [r7, #12]
 800a6dc:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800a6de:	b29b      	uxth	r3, r3
 800a6e0:	3b01      	subs	r3, #1
 800a6e2:	b29a      	uxth	r2, r3
 800a6e4:	68fb      	ldr	r3, [r7, #12]
 800a6e6:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800a6e8:	68fb      	ldr	r3, [r7, #12]
 800a6ea:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800a6ec:	b29b      	uxth	r3, r3
 800a6ee:	2b00      	cmp	r3, #0
 800a6f0:	d1cb      	bne.n	800a68a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800a6f2:	683b      	ldr	r3, [r7, #0]
 800a6f4:	9300      	str	r3, [sp, #0]
 800a6f6:	697b      	ldr	r3, [r7, #20]
 800a6f8:	2200      	movs	r2, #0
 800a6fa:	2140      	movs	r1, #64	@ 0x40
 800a6fc:	68f8      	ldr	r0, [r7, #12]
 800a6fe:	f000 f814 	bl	800a72a <UART_WaitOnFlagUntilTimeout>
 800a702:	4603      	mov	r3, r0
 800a704:	2b00      	cmp	r3, #0
 800a706:	d005      	beq.n	800a714 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800a708:	68fb      	ldr	r3, [r7, #12]
 800a70a:	2220      	movs	r2, #32
 800a70c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800a710:	2303      	movs	r3, #3
 800a712:	e006      	b.n	800a722 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800a714:	68fb      	ldr	r3, [r7, #12]
 800a716:	2220      	movs	r2, #32
 800a718:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800a71c:	2300      	movs	r3, #0
 800a71e:	e000      	b.n	800a722 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800a720:	2302      	movs	r3, #2
  }
}
 800a722:	4618      	mov	r0, r3
 800a724:	3720      	adds	r7, #32
 800a726:	46bd      	mov	sp, r7
 800a728:	bd80      	pop	{r7, pc}

0800a72a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800a72a:	b580      	push	{r7, lr}
 800a72c:	b086      	sub	sp, #24
 800a72e:	af00      	add	r7, sp, #0
 800a730:	60f8      	str	r0, [r7, #12]
 800a732:	60b9      	str	r1, [r7, #8]
 800a734:	603b      	str	r3, [r7, #0]
 800a736:	4613      	mov	r3, r2
 800a738:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a73a:	e03b      	b.n	800a7b4 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a73c:	6a3b      	ldr	r3, [r7, #32]
 800a73e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a742:	d037      	beq.n	800a7b4 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a744:	f7fe fca0 	bl	8009088 <HAL_GetTick>
 800a748:	4602      	mov	r2, r0
 800a74a:	683b      	ldr	r3, [r7, #0]
 800a74c:	1ad3      	subs	r3, r2, r3
 800a74e:	6a3a      	ldr	r2, [r7, #32]
 800a750:	429a      	cmp	r2, r3
 800a752:	d302      	bcc.n	800a75a <UART_WaitOnFlagUntilTimeout+0x30>
 800a754:	6a3b      	ldr	r3, [r7, #32]
 800a756:	2b00      	cmp	r3, #0
 800a758:	d101      	bne.n	800a75e <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800a75a:	2303      	movs	r3, #3
 800a75c:	e03a      	b.n	800a7d4 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800a75e:	68fb      	ldr	r3, [r7, #12]
 800a760:	681b      	ldr	r3, [r3, #0]
 800a762:	68db      	ldr	r3, [r3, #12]
 800a764:	f003 0304 	and.w	r3, r3, #4
 800a768:	2b00      	cmp	r3, #0
 800a76a:	d023      	beq.n	800a7b4 <UART_WaitOnFlagUntilTimeout+0x8a>
 800a76c:	68bb      	ldr	r3, [r7, #8]
 800a76e:	2b80      	cmp	r3, #128	@ 0x80
 800a770:	d020      	beq.n	800a7b4 <UART_WaitOnFlagUntilTimeout+0x8a>
 800a772:	68bb      	ldr	r3, [r7, #8]
 800a774:	2b40      	cmp	r3, #64	@ 0x40
 800a776:	d01d      	beq.n	800a7b4 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800a778:	68fb      	ldr	r3, [r7, #12]
 800a77a:	681b      	ldr	r3, [r3, #0]
 800a77c:	681b      	ldr	r3, [r3, #0]
 800a77e:	f003 0308 	and.w	r3, r3, #8
 800a782:	2b08      	cmp	r3, #8
 800a784:	d116      	bne.n	800a7b4 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800a786:	2300      	movs	r3, #0
 800a788:	617b      	str	r3, [r7, #20]
 800a78a:	68fb      	ldr	r3, [r7, #12]
 800a78c:	681b      	ldr	r3, [r3, #0]
 800a78e:	681b      	ldr	r3, [r3, #0]
 800a790:	617b      	str	r3, [r7, #20]
 800a792:	68fb      	ldr	r3, [r7, #12]
 800a794:	681b      	ldr	r3, [r3, #0]
 800a796:	685b      	ldr	r3, [r3, #4]
 800a798:	617b      	str	r3, [r7, #20]
 800a79a:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a79c:	68f8      	ldr	r0, [r7, #12]
 800a79e:	f000 f81d 	bl	800a7dc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800a7a2:	68fb      	ldr	r3, [r7, #12]
 800a7a4:	2208      	movs	r2, #8
 800a7a6:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a7a8:	68fb      	ldr	r3, [r7, #12]
 800a7aa:	2200      	movs	r2, #0
 800a7ac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800a7b0:	2301      	movs	r3, #1
 800a7b2:	e00f      	b.n	800a7d4 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a7b4:	68fb      	ldr	r3, [r7, #12]
 800a7b6:	681b      	ldr	r3, [r3, #0]
 800a7b8:	681a      	ldr	r2, [r3, #0]
 800a7ba:	68bb      	ldr	r3, [r7, #8]
 800a7bc:	4013      	ands	r3, r2
 800a7be:	68ba      	ldr	r2, [r7, #8]
 800a7c0:	429a      	cmp	r2, r3
 800a7c2:	bf0c      	ite	eq
 800a7c4:	2301      	moveq	r3, #1
 800a7c6:	2300      	movne	r3, #0
 800a7c8:	b2db      	uxtb	r3, r3
 800a7ca:	461a      	mov	r2, r3
 800a7cc:	79fb      	ldrb	r3, [r7, #7]
 800a7ce:	429a      	cmp	r2, r3
 800a7d0:	d0b4      	beq.n	800a73c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a7d2:	2300      	movs	r3, #0
}
 800a7d4:	4618      	mov	r0, r3
 800a7d6:	3718      	adds	r7, #24
 800a7d8:	46bd      	mov	sp, r7
 800a7da:	bd80      	pop	{r7, pc}

0800a7dc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a7dc:	b480      	push	{r7}
 800a7de:	b095      	sub	sp, #84	@ 0x54
 800a7e0:	af00      	add	r7, sp, #0
 800a7e2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	681b      	ldr	r3, [r3, #0]
 800a7e8:	330c      	adds	r3, #12
 800a7ea:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a7ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a7ee:	e853 3f00 	ldrex	r3, [r3]
 800a7f2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800a7f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a7f6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a7fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	681b      	ldr	r3, [r3, #0]
 800a800:	330c      	adds	r3, #12
 800a802:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800a804:	643a      	str	r2, [r7, #64]	@ 0x40
 800a806:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a808:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800a80a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a80c:	e841 2300 	strex	r3, r2, [r1]
 800a810:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a812:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a814:	2b00      	cmp	r3, #0
 800a816:	d1e5      	bne.n	800a7e4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	681b      	ldr	r3, [r3, #0]
 800a81c:	3314      	adds	r3, #20
 800a81e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a820:	6a3b      	ldr	r3, [r7, #32]
 800a822:	e853 3f00 	ldrex	r3, [r3]
 800a826:	61fb      	str	r3, [r7, #28]
   return(result);
 800a828:	69fb      	ldr	r3, [r7, #28]
 800a82a:	f023 0301 	bic.w	r3, r3, #1
 800a82e:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	681b      	ldr	r3, [r3, #0]
 800a834:	3314      	adds	r3, #20
 800a836:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a838:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800a83a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a83c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a83e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a840:	e841 2300 	strex	r3, r2, [r1]
 800a844:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a846:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a848:	2b00      	cmp	r3, #0
 800a84a:	d1e5      	bne.n	800a818 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a850:	2b01      	cmp	r3, #1
 800a852:	d119      	bne.n	800a888 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	681b      	ldr	r3, [r3, #0]
 800a858:	330c      	adds	r3, #12
 800a85a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a85c:	68fb      	ldr	r3, [r7, #12]
 800a85e:	e853 3f00 	ldrex	r3, [r3]
 800a862:	60bb      	str	r3, [r7, #8]
   return(result);
 800a864:	68bb      	ldr	r3, [r7, #8]
 800a866:	f023 0310 	bic.w	r3, r3, #16
 800a86a:	647b      	str	r3, [r7, #68]	@ 0x44
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	681b      	ldr	r3, [r3, #0]
 800a870:	330c      	adds	r3, #12
 800a872:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a874:	61ba      	str	r2, [r7, #24]
 800a876:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a878:	6979      	ldr	r1, [r7, #20]
 800a87a:	69ba      	ldr	r2, [r7, #24]
 800a87c:	e841 2300 	strex	r3, r2, [r1]
 800a880:	613b      	str	r3, [r7, #16]
   return(result);
 800a882:	693b      	ldr	r3, [r7, #16]
 800a884:	2b00      	cmp	r3, #0
 800a886:	d1e5      	bne.n	800a854 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	2220      	movs	r2, #32
 800a88c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	2200      	movs	r2, #0
 800a894:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800a896:	bf00      	nop
 800a898:	3754      	adds	r7, #84	@ 0x54
 800a89a:	46bd      	mov	sp, r7
 800a89c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8a0:	4770      	bx	lr
	...

0800a8a4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a8a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a8a8:	b0c0      	sub	sp, #256	@ 0x100
 800a8aa:	af00      	add	r7, sp, #0
 800a8ac:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a8b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a8b4:	681b      	ldr	r3, [r3, #0]
 800a8b6:	691b      	ldr	r3, [r3, #16]
 800a8b8:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800a8bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a8c0:	68d9      	ldr	r1, [r3, #12]
 800a8c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a8c6:	681a      	ldr	r2, [r3, #0]
 800a8c8:	ea40 0301 	orr.w	r3, r0, r1
 800a8cc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800a8ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a8d2:	689a      	ldr	r2, [r3, #8]
 800a8d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a8d8:	691b      	ldr	r3, [r3, #16]
 800a8da:	431a      	orrs	r2, r3
 800a8dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a8e0:	695b      	ldr	r3, [r3, #20]
 800a8e2:	431a      	orrs	r2, r3
 800a8e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a8e8:	69db      	ldr	r3, [r3, #28]
 800a8ea:	4313      	orrs	r3, r2
 800a8ec:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800a8f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a8f4:	681b      	ldr	r3, [r3, #0]
 800a8f6:	68db      	ldr	r3, [r3, #12]
 800a8f8:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800a8fc:	f021 010c 	bic.w	r1, r1, #12
 800a900:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a904:	681a      	ldr	r2, [r3, #0]
 800a906:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800a90a:	430b      	orrs	r3, r1
 800a90c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800a90e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a912:	681b      	ldr	r3, [r3, #0]
 800a914:	695b      	ldr	r3, [r3, #20]
 800a916:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800a91a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a91e:	6999      	ldr	r1, [r3, #24]
 800a920:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a924:	681a      	ldr	r2, [r3, #0]
 800a926:	ea40 0301 	orr.w	r3, r0, r1
 800a92a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800a92c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a930:	681a      	ldr	r2, [r3, #0]
 800a932:	4b8f      	ldr	r3, [pc, #572]	@ (800ab70 <UART_SetConfig+0x2cc>)
 800a934:	429a      	cmp	r2, r3
 800a936:	d005      	beq.n	800a944 <UART_SetConfig+0xa0>
 800a938:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a93c:	681a      	ldr	r2, [r3, #0]
 800a93e:	4b8d      	ldr	r3, [pc, #564]	@ (800ab74 <UART_SetConfig+0x2d0>)
 800a940:	429a      	cmp	r2, r3
 800a942:	d104      	bne.n	800a94e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800a944:	f7ff fad4 	bl	8009ef0 <HAL_RCC_GetPCLK2Freq>
 800a948:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800a94c:	e003      	b.n	800a956 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800a94e:	f7ff fabb 	bl	8009ec8 <HAL_RCC_GetPCLK1Freq>
 800a952:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a956:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a95a:	69db      	ldr	r3, [r3, #28]
 800a95c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a960:	f040 810c 	bne.w	800ab7c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800a964:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a968:	2200      	movs	r2, #0
 800a96a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800a96e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800a972:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800a976:	4622      	mov	r2, r4
 800a978:	462b      	mov	r3, r5
 800a97a:	1891      	adds	r1, r2, r2
 800a97c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800a97e:	415b      	adcs	r3, r3
 800a980:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a982:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800a986:	4621      	mov	r1, r4
 800a988:	eb12 0801 	adds.w	r8, r2, r1
 800a98c:	4629      	mov	r1, r5
 800a98e:	eb43 0901 	adc.w	r9, r3, r1
 800a992:	f04f 0200 	mov.w	r2, #0
 800a996:	f04f 0300 	mov.w	r3, #0
 800a99a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800a99e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800a9a2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800a9a6:	4690      	mov	r8, r2
 800a9a8:	4699      	mov	r9, r3
 800a9aa:	4623      	mov	r3, r4
 800a9ac:	eb18 0303 	adds.w	r3, r8, r3
 800a9b0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800a9b4:	462b      	mov	r3, r5
 800a9b6:	eb49 0303 	adc.w	r3, r9, r3
 800a9ba:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800a9be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a9c2:	685b      	ldr	r3, [r3, #4]
 800a9c4:	2200      	movs	r2, #0
 800a9c6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800a9ca:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800a9ce:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800a9d2:	460b      	mov	r3, r1
 800a9d4:	18db      	adds	r3, r3, r3
 800a9d6:	653b      	str	r3, [r7, #80]	@ 0x50
 800a9d8:	4613      	mov	r3, r2
 800a9da:	eb42 0303 	adc.w	r3, r2, r3
 800a9de:	657b      	str	r3, [r7, #84]	@ 0x54
 800a9e0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800a9e4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800a9e8:	f7f6 f900 	bl	8000bec <__aeabi_uldivmod>
 800a9ec:	4602      	mov	r2, r0
 800a9ee:	460b      	mov	r3, r1
 800a9f0:	4b61      	ldr	r3, [pc, #388]	@ (800ab78 <UART_SetConfig+0x2d4>)
 800a9f2:	fba3 2302 	umull	r2, r3, r3, r2
 800a9f6:	095b      	lsrs	r3, r3, #5
 800a9f8:	011c      	lsls	r4, r3, #4
 800a9fa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a9fe:	2200      	movs	r2, #0
 800aa00:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800aa04:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800aa08:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800aa0c:	4642      	mov	r2, r8
 800aa0e:	464b      	mov	r3, r9
 800aa10:	1891      	adds	r1, r2, r2
 800aa12:	64b9      	str	r1, [r7, #72]	@ 0x48
 800aa14:	415b      	adcs	r3, r3
 800aa16:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800aa18:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800aa1c:	4641      	mov	r1, r8
 800aa1e:	eb12 0a01 	adds.w	sl, r2, r1
 800aa22:	4649      	mov	r1, r9
 800aa24:	eb43 0b01 	adc.w	fp, r3, r1
 800aa28:	f04f 0200 	mov.w	r2, #0
 800aa2c:	f04f 0300 	mov.w	r3, #0
 800aa30:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800aa34:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800aa38:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800aa3c:	4692      	mov	sl, r2
 800aa3e:	469b      	mov	fp, r3
 800aa40:	4643      	mov	r3, r8
 800aa42:	eb1a 0303 	adds.w	r3, sl, r3
 800aa46:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800aa4a:	464b      	mov	r3, r9
 800aa4c:	eb4b 0303 	adc.w	r3, fp, r3
 800aa50:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800aa54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800aa58:	685b      	ldr	r3, [r3, #4]
 800aa5a:	2200      	movs	r2, #0
 800aa5c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800aa60:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800aa64:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800aa68:	460b      	mov	r3, r1
 800aa6a:	18db      	adds	r3, r3, r3
 800aa6c:	643b      	str	r3, [r7, #64]	@ 0x40
 800aa6e:	4613      	mov	r3, r2
 800aa70:	eb42 0303 	adc.w	r3, r2, r3
 800aa74:	647b      	str	r3, [r7, #68]	@ 0x44
 800aa76:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800aa7a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800aa7e:	f7f6 f8b5 	bl	8000bec <__aeabi_uldivmod>
 800aa82:	4602      	mov	r2, r0
 800aa84:	460b      	mov	r3, r1
 800aa86:	4611      	mov	r1, r2
 800aa88:	4b3b      	ldr	r3, [pc, #236]	@ (800ab78 <UART_SetConfig+0x2d4>)
 800aa8a:	fba3 2301 	umull	r2, r3, r3, r1
 800aa8e:	095b      	lsrs	r3, r3, #5
 800aa90:	2264      	movs	r2, #100	@ 0x64
 800aa92:	fb02 f303 	mul.w	r3, r2, r3
 800aa96:	1acb      	subs	r3, r1, r3
 800aa98:	00db      	lsls	r3, r3, #3
 800aa9a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800aa9e:	4b36      	ldr	r3, [pc, #216]	@ (800ab78 <UART_SetConfig+0x2d4>)
 800aaa0:	fba3 2302 	umull	r2, r3, r3, r2
 800aaa4:	095b      	lsrs	r3, r3, #5
 800aaa6:	005b      	lsls	r3, r3, #1
 800aaa8:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800aaac:	441c      	add	r4, r3
 800aaae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800aab2:	2200      	movs	r2, #0
 800aab4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800aab8:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800aabc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800aac0:	4642      	mov	r2, r8
 800aac2:	464b      	mov	r3, r9
 800aac4:	1891      	adds	r1, r2, r2
 800aac6:	63b9      	str	r1, [r7, #56]	@ 0x38
 800aac8:	415b      	adcs	r3, r3
 800aaca:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800aacc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800aad0:	4641      	mov	r1, r8
 800aad2:	1851      	adds	r1, r2, r1
 800aad4:	6339      	str	r1, [r7, #48]	@ 0x30
 800aad6:	4649      	mov	r1, r9
 800aad8:	414b      	adcs	r3, r1
 800aada:	637b      	str	r3, [r7, #52]	@ 0x34
 800aadc:	f04f 0200 	mov.w	r2, #0
 800aae0:	f04f 0300 	mov.w	r3, #0
 800aae4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800aae8:	4659      	mov	r1, fp
 800aaea:	00cb      	lsls	r3, r1, #3
 800aaec:	4651      	mov	r1, sl
 800aaee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800aaf2:	4651      	mov	r1, sl
 800aaf4:	00ca      	lsls	r2, r1, #3
 800aaf6:	4610      	mov	r0, r2
 800aaf8:	4619      	mov	r1, r3
 800aafa:	4603      	mov	r3, r0
 800aafc:	4642      	mov	r2, r8
 800aafe:	189b      	adds	r3, r3, r2
 800ab00:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800ab04:	464b      	mov	r3, r9
 800ab06:	460a      	mov	r2, r1
 800ab08:	eb42 0303 	adc.w	r3, r2, r3
 800ab0c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800ab10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ab14:	685b      	ldr	r3, [r3, #4]
 800ab16:	2200      	movs	r2, #0
 800ab18:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800ab1c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800ab20:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800ab24:	460b      	mov	r3, r1
 800ab26:	18db      	adds	r3, r3, r3
 800ab28:	62bb      	str	r3, [r7, #40]	@ 0x28
 800ab2a:	4613      	mov	r3, r2
 800ab2c:	eb42 0303 	adc.w	r3, r2, r3
 800ab30:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800ab32:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800ab36:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800ab3a:	f7f6 f857 	bl	8000bec <__aeabi_uldivmod>
 800ab3e:	4602      	mov	r2, r0
 800ab40:	460b      	mov	r3, r1
 800ab42:	4b0d      	ldr	r3, [pc, #52]	@ (800ab78 <UART_SetConfig+0x2d4>)
 800ab44:	fba3 1302 	umull	r1, r3, r3, r2
 800ab48:	095b      	lsrs	r3, r3, #5
 800ab4a:	2164      	movs	r1, #100	@ 0x64
 800ab4c:	fb01 f303 	mul.w	r3, r1, r3
 800ab50:	1ad3      	subs	r3, r2, r3
 800ab52:	00db      	lsls	r3, r3, #3
 800ab54:	3332      	adds	r3, #50	@ 0x32
 800ab56:	4a08      	ldr	r2, [pc, #32]	@ (800ab78 <UART_SetConfig+0x2d4>)
 800ab58:	fba2 2303 	umull	r2, r3, r2, r3
 800ab5c:	095b      	lsrs	r3, r3, #5
 800ab5e:	f003 0207 	and.w	r2, r3, #7
 800ab62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ab66:	681b      	ldr	r3, [r3, #0]
 800ab68:	4422      	add	r2, r4
 800ab6a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800ab6c:	e106      	b.n	800ad7c <UART_SetConfig+0x4d8>
 800ab6e:	bf00      	nop
 800ab70:	40011000 	.word	0x40011000
 800ab74:	40011400 	.word	0x40011400
 800ab78:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800ab7c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800ab80:	2200      	movs	r2, #0
 800ab82:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800ab86:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800ab8a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800ab8e:	4642      	mov	r2, r8
 800ab90:	464b      	mov	r3, r9
 800ab92:	1891      	adds	r1, r2, r2
 800ab94:	6239      	str	r1, [r7, #32]
 800ab96:	415b      	adcs	r3, r3
 800ab98:	627b      	str	r3, [r7, #36]	@ 0x24
 800ab9a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800ab9e:	4641      	mov	r1, r8
 800aba0:	1854      	adds	r4, r2, r1
 800aba2:	4649      	mov	r1, r9
 800aba4:	eb43 0501 	adc.w	r5, r3, r1
 800aba8:	f04f 0200 	mov.w	r2, #0
 800abac:	f04f 0300 	mov.w	r3, #0
 800abb0:	00eb      	lsls	r3, r5, #3
 800abb2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800abb6:	00e2      	lsls	r2, r4, #3
 800abb8:	4614      	mov	r4, r2
 800abba:	461d      	mov	r5, r3
 800abbc:	4643      	mov	r3, r8
 800abbe:	18e3      	adds	r3, r4, r3
 800abc0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800abc4:	464b      	mov	r3, r9
 800abc6:	eb45 0303 	adc.w	r3, r5, r3
 800abca:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800abce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800abd2:	685b      	ldr	r3, [r3, #4]
 800abd4:	2200      	movs	r2, #0
 800abd6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800abda:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800abde:	f04f 0200 	mov.w	r2, #0
 800abe2:	f04f 0300 	mov.w	r3, #0
 800abe6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800abea:	4629      	mov	r1, r5
 800abec:	008b      	lsls	r3, r1, #2
 800abee:	4621      	mov	r1, r4
 800abf0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800abf4:	4621      	mov	r1, r4
 800abf6:	008a      	lsls	r2, r1, #2
 800abf8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800abfc:	f7f5 fff6 	bl	8000bec <__aeabi_uldivmod>
 800ac00:	4602      	mov	r2, r0
 800ac02:	460b      	mov	r3, r1
 800ac04:	4b60      	ldr	r3, [pc, #384]	@ (800ad88 <UART_SetConfig+0x4e4>)
 800ac06:	fba3 2302 	umull	r2, r3, r3, r2
 800ac0a:	095b      	lsrs	r3, r3, #5
 800ac0c:	011c      	lsls	r4, r3, #4
 800ac0e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800ac12:	2200      	movs	r2, #0
 800ac14:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800ac18:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800ac1c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800ac20:	4642      	mov	r2, r8
 800ac22:	464b      	mov	r3, r9
 800ac24:	1891      	adds	r1, r2, r2
 800ac26:	61b9      	str	r1, [r7, #24]
 800ac28:	415b      	adcs	r3, r3
 800ac2a:	61fb      	str	r3, [r7, #28]
 800ac2c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800ac30:	4641      	mov	r1, r8
 800ac32:	1851      	adds	r1, r2, r1
 800ac34:	6139      	str	r1, [r7, #16]
 800ac36:	4649      	mov	r1, r9
 800ac38:	414b      	adcs	r3, r1
 800ac3a:	617b      	str	r3, [r7, #20]
 800ac3c:	f04f 0200 	mov.w	r2, #0
 800ac40:	f04f 0300 	mov.w	r3, #0
 800ac44:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800ac48:	4659      	mov	r1, fp
 800ac4a:	00cb      	lsls	r3, r1, #3
 800ac4c:	4651      	mov	r1, sl
 800ac4e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800ac52:	4651      	mov	r1, sl
 800ac54:	00ca      	lsls	r2, r1, #3
 800ac56:	4610      	mov	r0, r2
 800ac58:	4619      	mov	r1, r3
 800ac5a:	4603      	mov	r3, r0
 800ac5c:	4642      	mov	r2, r8
 800ac5e:	189b      	adds	r3, r3, r2
 800ac60:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800ac64:	464b      	mov	r3, r9
 800ac66:	460a      	mov	r2, r1
 800ac68:	eb42 0303 	adc.w	r3, r2, r3
 800ac6c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800ac70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ac74:	685b      	ldr	r3, [r3, #4]
 800ac76:	2200      	movs	r2, #0
 800ac78:	67bb      	str	r3, [r7, #120]	@ 0x78
 800ac7a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800ac7c:	f04f 0200 	mov.w	r2, #0
 800ac80:	f04f 0300 	mov.w	r3, #0
 800ac84:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800ac88:	4649      	mov	r1, r9
 800ac8a:	008b      	lsls	r3, r1, #2
 800ac8c:	4641      	mov	r1, r8
 800ac8e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800ac92:	4641      	mov	r1, r8
 800ac94:	008a      	lsls	r2, r1, #2
 800ac96:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800ac9a:	f7f5 ffa7 	bl	8000bec <__aeabi_uldivmod>
 800ac9e:	4602      	mov	r2, r0
 800aca0:	460b      	mov	r3, r1
 800aca2:	4611      	mov	r1, r2
 800aca4:	4b38      	ldr	r3, [pc, #224]	@ (800ad88 <UART_SetConfig+0x4e4>)
 800aca6:	fba3 2301 	umull	r2, r3, r3, r1
 800acaa:	095b      	lsrs	r3, r3, #5
 800acac:	2264      	movs	r2, #100	@ 0x64
 800acae:	fb02 f303 	mul.w	r3, r2, r3
 800acb2:	1acb      	subs	r3, r1, r3
 800acb4:	011b      	lsls	r3, r3, #4
 800acb6:	3332      	adds	r3, #50	@ 0x32
 800acb8:	4a33      	ldr	r2, [pc, #204]	@ (800ad88 <UART_SetConfig+0x4e4>)
 800acba:	fba2 2303 	umull	r2, r3, r2, r3
 800acbe:	095b      	lsrs	r3, r3, #5
 800acc0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800acc4:	441c      	add	r4, r3
 800acc6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800acca:	2200      	movs	r2, #0
 800accc:	673b      	str	r3, [r7, #112]	@ 0x70
 800acce:	677a      	str	r2, [r7, #116]	@ 0x74
 800acd0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800acd4:	4642      	mov	r2, r8
 800acd6:	464b      	mov	r3, r9
 800acd8:	1891      	adds	r1, r2, r2
 800acda:	60b9      	str	r1, [r7, #8]
 800acdc:	415b      	adcs	r3, r3
 800acde:	60fb      	str	r3, [r7, #12]
 800ace0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800ace4:	4641      	mov	r1, r8
 800ace6:	1851      	adds	r1, r2, r1
 800ace8:	6039      	str	r1, [r7, #0]
 800acea:	4649      	mov	r1, r9
 800acec:	414b      	adcs	r3, r1
 800acee:	607b      	str	r3, [r7, #4]
 800acf0:	f04f 0200 	mov.w	r2, #0
 800acf4:	f04f 0300 	mov.w	r3, #0
 800acf8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800acfc:	4659      	mov	r1, fp
 800acfe:	00cb      	lsls	r3, r1, #3
 800ad00:	4651      	mov	r1, sl
 800ad02:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800ad06:	4651      	mov	r1, sl
 800ad08:	00ca      	lsls	r2, r1, #3
 800ad0a:	4610      	mov	r0, r2
 800ad0c:	4619      	mov	r1, r3
 800ad0e:	4603      	mov	r3, r0
 800ad10:	4642      	mov	r2, r8
 800ad12:	189b      	adds	r3, r3, r2
 800ad14:	66bb      	str	r3, [r7, #104]	@ 0x68
 800ad16:	464b      	mov	r3, r9
 800ad18:	460a      	mov	r2, r1
 800ad1a:	eb42 0303 	adc.w	r3, r2, r3
 800ad1e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800ad20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ad24:	685b      	ldr	r3, [r3, #4]
 800ad26:	2200      	movs	r2, #0
 800ad28:	663b      	str	r3, [r7, #96]	@ 0x60
 800ad2a:	667a      	str	r2, [r7, #100]	@ 0x64
 800ad2c:	f04f 0200 	mov.w	r2, #0
 800ad30:	f04f 0300 	mov.w	r3, #0
 800ad34:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800ad38:	4649      	mov	r1, r9
 800ad3a:	008b      	lsls	r3, r1, #2
 800ad3c:	4641      	mov	r1, r8
 800ad3e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800ad42:	4641      	mov	r1, r8
 800ad44:	008a      	lsls	r2, r1, #2
 800ad46:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800ad4a:	f7f5 ff4f 	bl	8000bec <__aeabi_uldivmod>
 800ad4e:	4602      	mov	r2, r0
 800ad50:	460b      	mov	r3, r1
 800ad52:	4b0d      	ldr	r3, [pc, #52]	@ (800ad88 <UART_SetConfig+0x4e4>)
 800ad54:	fba3 1302 	umull	r1, r3, r3, r2
 800ad58:	095b      	lsrs	r3, r3, #5
 800ad5a:	2164      	movs	r1, #100	@ 0x64
 800ad5c:	fb01 f303 	mul.w	r3, r1, r3
 800ad60:	1ad3      	subs	r3, r2, r3
 800ad62:	011b      	lsls	r3, r3, #4
 800ad64:	3332      	adds	r3, #50	@ 0x32
 800ad66:	4a08      	ldr	r2, [pc, #32]	@ (800ad88 <UART_SetConfig+0x4e4>)
 800ad68:	fba2 2303 	umull	r2, r3, r2, r3
 800ad6c:	095b      	lsrs	r3, r3, #5
 800ad6e:	f003 020f 	and.w	r2, r3, #15
 800ad72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ad76:	681b      	ldr	r3, [r3, #0]
 800ad78:	4422      	add	r2, r4
 800ad7a:	609a      	str	r2, [r3, #8]
}
 800ad7c:	bf00      	nop
 800ad7e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800ad82:	46bd      	mov	sp, r7
 800ad84:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800ad88:	51eb851f 	.word	0x51eb851f

0800ad8c <__NVIC_SetPriority>:
{
 800ad8c:	b480      	push	{r7}
 800ad8e:	b083      	sub	sp, #12
 800ad90:	af00      	add	r7, sp, #0
 800ad92:	4603      	mov	r3, r0
 800ad94:	6039      	str	r1, [r7, #0]
 800ad96:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800ad98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ad9c:	2b00      	cmp	r3, #0
 800ad9e:	db0a      	blt.n	800adb6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800ada0:	683b      	ldr	r3, [r7, #0]
 800ada2:	b2da      	uxtb	r2, r3
 800ada4:	490c      	ldr	r1, [pc, #48]	@ (800add8 <__NVIC_SetPriority+0x4c>)
 800ada6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800adaa:	0112      	lsls	r2, r2, #4
 800adac:	b2d2      	uxtb	r2, r2
 800adae:	440b      	add	r3, r1
 800adb0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800adb4:	e00a      	b.n	800adcc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800adb6:	683b      	ldr	r3, [r7, #0]
 800adb8:	b2da      	uxtb	r2, r3
 800adba:	4908      	ldr	r1, [pc, #32]	@ (800addc <__NVIC_SetPriority+0x50>)
 800adbc:	79fb      	ldrb	r3, [r7, #7]
 800adbe:	f003 030f 	and.w	r3, r3, #15
 800adc2:	3b04      	subs	r3, #4
 800adc4:	0112      	lsls	r2, r2, #4
 800adc6:	b2d2      	uxtb	r2, r2
 800adc8:	440b      	add	r3, r1
 800adca:	761a      	strb	r2, [r3, #24]
}
 800adcc:	bf00      	nop
 800adce:	370c      	adds	r7, #12
 800add0:	46bd      	mov	sp, r7
 800add2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800add6:	4770      	bx	lr
 800add8:	e000e100 	.word	0xe000e100
 800addc:	e000ed00 	.word	0xe000ed00

0800ade0 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800ade0:	b580      	push	{r7, lr}
 800ade2:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800ade4:	4b05      	ldr	r3, [pc, #20]	@ (800adfc <SysTick_Handler+0x1c>)
 800ade6:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800ade8:	f001 fdf4 	bl	800c9d4 <xTaskGetSchedulerState>
 800adec:	4603      	mov	r3, r0
 800adee:	2b01      	cmp	r3, #1
 800adf0:	d001      	beq.n	800adf6 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800adf2:	f002 fbe9 	bl	800d5c8 <xPortSysTickHandler>
  }
}
 800adf6:	bf00      	nop
 800adf8:	bd80      	pop	{r7, pc}
 800adfa:	bf00      	nop
 800adfc:	e000e010 	.word	0xe000e010

0800ae00 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800ae00:	b580      	push	{r7, lr}
 800ae02:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800ae04:	2100      	movs	r1, #0
 800ae06:	f06f 0004 	mvn.w	r0, #4
 800ae0a:	f7ff ffbf 	bl	800ad8c <__NVIC_SetPriority>
#endif
}
 800ae0e:	bf00      	nop
 800ae10:	bd80      	pop	{r7, pc}
	...

0800ae14 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800ae14:	b480      	push	{r7}
 800ae16:	b083      	sub	sp, #12
 800ae18:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ae1a:	f3ef 8305 	mrs	r3, IPSR
 800ae1e:	603b      	str	r3, [r7, #0]
  return(result);
 800ae20:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800ae22:	2b00      	cmp	r3, #0
 800ae24:	d003      	beq.n	800ae2e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800ae26:	f06f 0305 	mvn.w	r3, #5
 800ae2a:	607b      	str	r3, [r7, #4]
 800ae2c:	e00c      	b.n	800ae48 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800ae2e:	4b0a      	ldr	r3, [pc, #40]	@ (800ae58 <osKernelInitialize+0x44>)
 800ae30:	681b      	ldr	r3, [r3, #0]
 800ae32:	2b00      	cmp	r3, #0
 800ae34:	d105      	bne.n	800ae42 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800ae36:	4b08      	ldr	r3, [pc, #32]	@ (800ae58 <osKernelInitialize+0x44>)
 800ae38:	2201      	movs	r2, #1
 800ae3a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800ae3c:	2300      	movs	r3, #0
 800ae3e:	607b      	str	r3, [r7, #4]
 800ae40:	e002      	b.n	800ae48 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800ae42:	f04f 33ff 	mov.w	r3, #4294967295
 800ae46:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800ae48:	687b      	ldr	r3, [r7, #4]
}
 800ae4a:	4618      	mov	r0, r3
 800ae4c:	370c      	adds	r7, #12
 800ae4e:	46bd      	mov	sp, r7
 800ae50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae54:	4770      	bx	lr
 800ae56:	bf00      	nop
 800ae58:	20000fc0 	.word	0x20000fc0

0800ae5c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800ae5c:	b580      	push	{r7, lr}
 800ae5e:	b082      	sub	sp, #8
 800ae60:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ae62:	f3ef 8305 	mrs	r3, IPSR
 800ae66:	603b      	str	r3, [r7, #0]
  return(result);
 800ae68:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800ae6a:	2b00      	cmp	r3, #0
 800ae6c:	d003      	beq.n	800ae76 <osKernelStart+0x1a>
    stat = osErrorISR;
 800ae6e:	f06f 0305 	mvn.w	r3, #5
 800ae72:	607b      	str	r3, [r7, #4]
 800ae74:	e010      	b.n	800ae98 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800ae76:	4b0b      	ldr	r3, [pc, #44]	@ (800aea4 <osKernelStart+0x48>)
 800ae78:	681b      	ldr	r3, [r3, #0]
 800ae7a:	2b01      	cmp	r3, #1
 800ae7c:	d109      	bne.n	800ae92 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800ae7e:	f7ff ffbf 	bl	800ae00 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800ae82:	4b08      	ldr	r3, [pc, #32]	@ (800aea4 <osKernelStart+0x48>)
 800ae84:	2202      	movs	r2, #2
 800ae86:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800ae88:	f001 f940 	bl	800c10c <vTaskStartScheduler>
      stat = osOK;
 800ae8c:	2300      	movs	r3, #0
 800ae8e:	607b      	str	r3, [r7, #4]
 800ae90:	e002      	b.n	800ae98 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800ae92:	f04f 33ff 	mov.w	r3, #4294967295
 800ae96:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800ae98:	687b      	ldr	r3, [r7, #4]
}
 800ae9a:	4618      	mov	r0, r3
 800ae9c:	3708      	adds	r7, #8
 800ae9e:	46bd      	mov	sp, r7
 800aea0:	bd80      	pop	{r7, pc}
 800aea2:	bf00      	nop
 800aea4:	20000fc0 	.word	0x20000fc0

0800aea8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800aea8:	b580      	push	{r7, lr}
 800aeaa:	b08e      	sub	sp, #56	@ 0x38
 800aeac:	af04      	add	r7, sp, #16
 800aeae:	60f8      	str	r0, [r7, #12]
 800aeb0:	60b9      	str	r1, [r7, #8]
 800aeb2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800aeb4:	2300      	movs	r3, #0
 800aeb6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800aeb8:	f3ef 8305 	mrs	r3, IPSR
 800aebc:	617b      	str	r3, [r7, #20]
  return(result);
 800aebe:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800aec0:	2b00      	cmp	r3, #0
 800aec2:	d17e      	bne.n	800afc2 <osThreadNew+0x11a>
 800aec4:	68fb      	ldr	r3, [r7, #12]
 800aec6:	2b00      	cmp	r3, #0
 800aec8:	d07b      	beq.n	800afc2 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800aeca:	2380      	movs	r3, #128	@ 0x80
 800aecc:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800aece:	2318      	movs	r3, #24
 800aed0:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800aed2:	2300      	movs	r3, #0
 800aed4:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800aed6:	f04f 33ff 	mov.w	r3, #4294967295
 800aeda:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	2b00      	cmp	r3, #0
 800aee0:	d045      	beq.n	800af6e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	681b      	ldr	r3, [r3, #0]
 800aee6:	2b00      	cmp	r3, #0
 800aee8:	d002      	beq.n	800aef0 <osThreadNew+0x48>
        name = attr->name;
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	681b      	ldr	r3, [r3, #0]
 800aeee:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	699b      	ldr	r3, [r3, #24]
 800aef4:	2b00      	cmp	r3, #0
 800aef6:	d002      	beq.n	800aefe <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	699b      	ldr	r3, [r3, #24]
 800aefc:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800aefe:	69fb      	ldr	r3, [r7, #28]
 800af00:	2b00      	cmp	r3, #0
 800af02:	d008      	beq.n	800af16 <osThreadNew+0x6e>
 800af04:	69fb      	ldr	r3, [r7, #28]
 800af06:	2b38      	cmp	r3, #56	@ 0x38
 800af08:	d805      	bhi.n	800af16 <osThreadNew+0x6e>
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	685b      	ldr	r3, [r3, #4]
 800af0e:	f003 0301 	and.w	r3, r3, #1
 800af12:	2b00      	cmp	r3, #0
 800af14:	d001      	beq.n	800af1a <osThreadNew+0x72>
        return (NULL);
 800af16:	2300      	movs	r3, #0
 800af18:	e054      	b.n	800afc4 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	695b      	ldr	r3, [r3, #20]
 800af1e:	2b00      	cmp	r3, #0
 800af20:	d003      	beq.n	800af2a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	695b      	ldr	r3, [r3, #20]
 800af26:	089b      	lsrs	r3, r3, #2
 800af28:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	689b      	ldr	r3, [r3, #8]
 800af2e:	2b00      	cmp	r3, #0
 800af30:	d00e      	beq.n	800af50 <osThreadNew+0xa8>
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	68db      	ldr	r3, [r3, #12]
 800af36:	2ba7      	cmp	r3, #167	@ 0xa7
 800af38:	d90a      	bls.n	800af50 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800af3e:	2b00      	cmp	r3, #0
 800af40:	d006      	beq.n	800af50 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	695b      	ldr	r3, [r3, #20]
 800af46:	2b00      	cmp	r3, #0
 800af48:	d002      	beq.n	800af50 <osThreadNew+0xa8>
        mem = 1;
 800af4a:	2301      	movs	r3, #1
 800af4c:	61bb      	str	r3, [r7, #24]
 800af4e:	e010      	b.n	800af72 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	689b      	ldr	r3, [r3, #8]
 800af54:	2b00      	cmp	r3, #0
 800af56:	d10c      	bne.n	800af72 <osThreadNew+0xca>
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	68db      	ldr	r3, [r3, #12]
 800af5c:	2b00      	cmp	r3, #0
 800af5e:	d108      	bne.n	800af72 <osThreadNew+0xca>
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	691b      	ldr	r3, [r3, #16]
 800af64:	2b00      	cmp	r3, #0
 800af66:	d104      	bne.n	800af72 <osThreadNew+0xca>
          mem = 0;
 800af68:	2300      	movs	r3, #0
 800af6a:	61bb      	str	r3, [r7, #24]
 800af6c:	e001      	b.n	800af72 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800af6e:	2300      	movs	r3, #0
 800af70:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800af72:	69bb      	ldr	r3, [r7, #24]
 800af74:	2b01      	cmp	r3, #1
 800af76:	d110      	bne.n	800af9a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800af7c:	687a      	ldr	r2, [r7, #4]
 800af7e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800af80:	9202      	str	r2, [sp, #8]
 800af82:	9301      	str	r3, [sp, #4]
 800af84:	69fb      	ldr	r3, [r7, #28]
 800af86:	9300      	str	r3, [sp, #0]
 800af88:	68bb      	ldr	r3, [r7, #8]
 800af8a:	6a3a      	ldr	r2, [r7, #32]
 800af8c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800af8e:	68f8      	ldr	r0, [r7, #12]
 800af90:	f000 fec8 	bl	800bd24 <xTaskCreateStatic>
 800af94:	4603      	mov	r3, r0
 800af96:	613b      	str	r3, [r7, #16]
 800af98:	e013      	b.n	800afc2 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800af9a:	69bb      	ldr	r3, [r7, #24]
 800af9c:	2b00      	cmp	r3, #0
 800af9e:	d110      	bne.n	800afc2 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800afa0:	6a3b      	ldr	r3, [r7, #32]
 800afa2:	b29a      	uxth	r2, r3
 800afa4:	f107 0310 	add.w	r3, r7, #16
 800afa8:	9301      	str	r3, [sp, #4]
 800afaa:	69fb      	ldr	r3, [r7, #28]
 800afac:	9300      	str	r3, [sp, #0]
 800afae:	68bb      	ldr	r3, [r7, #8]
 800afb0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800afb2:	68f8      	ldr	r0, [r7, #12]
 800afb4:	f000 ff16 	bl	800bde4 <xTaskCreate>
 800afb8:	4603      	mov	r3, r0
 800afba:	2b01      	cmp	r3, #1
 800afbc:	d001      	beq.n	800afc2 <osThreadNew+0x11a>
            hTask = NULL;
 800afbe:	2300      	movs	r3, #0
 800afc0:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800afc2:	693b      	ldr	r3, [r7, #16]
}
 800afc4:	4618      	mov	r0, r3
 800afc6:	3728      	adds	r7, #40	@ 0x28
 800afc8:	46bd      	mov	sp, r7
 800afca:	bd80      	pop	{r7, pc}

0800afcc <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800afcc:	b580      	push	{r7, lr}
 800afce:	b084      	sub	sp, #16
 800afd0:	af00      	add	r7, sp, #0
 800afd2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800afd4:	f3ef 8305 	mrs	r3, IPSR
 800afd8:	60bb      	str	r3, [r7, #8]
  return(result);
 800afda:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800afdc:	2b00      	cmp	r3, #0
 800afde:	d003      	beq.n	800afe8 <osDelay+0x1c>
    stat = osErrorISR;
 800afe0:	f06f 0305 	mvn.w	r3, #5
 800afe4:	60fb      	str	r3, [r7, #12]
 800afe6:	e007      	b.n	800aff8 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800afe8:	2300      	movs	r3, #0
 800afea:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	2b00      	cmp	r3, #0
 800aff0:	d002      	beq.n	800aff8 <osDelay+0x2c>
      vTaskDelay(ticks);
 800aff2:	6878      	ldr	r0, [r7, #4]
 800aff4:	f001 f854 	bl	800c0a0 <vTaskDelay>
    }
  }

  return (stat);
 800aff8:	68fb      	ldr	r3, [r7, #12]
}
 800affa:	4618      	mov	r0, r3
 800affc:	3710      	adds	r7, #16
 800affe:	46bd      	mov	sp, r7
 800b000:	bd80      	pop	{r7, pc}

0800b002 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800b002:	b580      	push	{r7, lr}
 800b004:	b08a      	sub	sp, #40	@ 0x28
 800b006:	af02      	add	r7, sp, #8
 800b008:	60f8      	str	r0, [r7, #12]
 800b00a:	60b9      	str	r1, [r7, #8]
 800b00c:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800b00e:	2300      	movs	r3, #0
 800b010:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b012:	f3ef 8305 	mrs	r3, IPSR
 800b016:	613b      	str	r3, [r7, #16]
  return(result);
 800b018:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800b01a:	2b00      	cmp	r3, #0
 800b01c:	d15f      	bne.n	800b0de <osMessageQueueNew+0xdc>
 800b01e:	68fb      	ldr	r3, [r7, #12]
 800b020:	2b00      	cmp	r3, #0
 800b022:	d05c      	beq.n	800b0de <osMessageQueueNew+0xdc>
 800b024:	68bb      	ldr	r3, [r7, #8]
 800b026:	2b00      	cmp	r3, #0
 800b028:	d059      	beq.n	800b0de <osMessageQueueNew+0xdc>
    mem = -1;
 800b02a:	f04f 33ff 	mov.w	r3, #4294967295
 800b02e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	2b00      	cmp	r3, #0
 800b034:	d029      	beq.n	800b08a <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	689b      	ldr	r3, [r3, #8]
 800b03a:	2b00      	cmp	r3, #0
 800b03c:	d012      	beq.n	800b064 <osMessageQueueNew+0x62>
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	68db      	ldr	r3, [r3, #12]
 800b042:	2b4f      	cmp	r3, #79	@ 0x4f
 800b044:	d90e      	bls.n	800b064 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800b04a:	2b00      	cmp	r3, #0
 800b04c:	d00a      	beq.n	800b064 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	695a      	ldr	r2, [r3, #20]
 800b052:	68fb      	ldr	r3, [r7, #12]
 800b054:	68b9      	ldr	r1, [r7, #8]
 800b056:	fb01 f303 	mul.w	r3, r1, r3
 800b05a:	429a      	cmp	r2, r3
 800b05c:	d302      	bcc.n	800b064 <osMessageQueueNew+0x62>
        mem = 1;
 800b05e:	2301      	movs	r3, #1
 800b060:	61bb      	str	r3, [r7, #24]
 800b062:	e014      	b.n	800b08e <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	689b      	ldr	r3, [r3, #8]
 800b068:	2b00      	cmp	r3, #0
 800b06a:	d110      	bne.n	800b08e <osMessageQueueNew+0x8c>
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	68db      	ldr	r3, [r3, #12]
 800b070:	2b00      	cmp	r3, #0
 800b072:	d10c      	bne.n	800b08e <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800b078:	2b00      	cmp	r3, #0
 800b07a:	d108      	bne.n	800b08e <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	695b      	ldr	r3, [r3, #20]
 800b080:	2b00      	cmp	r3, #0
 800b082:	d104      	bne.n	800b08e <osMessageQueueNew+0x8c>
          mem = 0;
 800b084:	2300      	movs	r3, #0
 800b086:	61bb      	str	r3, [r7, #24]
 800b088:	e001      	b.n	800b08e <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800b08a:	2300      	movs	r3, #0
 800b08c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800b08e:	69bb      	ldr	r3, [r7, #24]
 800b090:	2b01      	cmp	r3, #1
 800b092:	d10b      	bne.n	800b0ac <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	691a      	ldr	r2, [r3, #16]
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	689b      	ldr	r3, [r3, #8]
 800b09c:	2100      	movs	r1, #0
 800b09e:	9100      	str	r1, [sp, #0]
 800b0a0:	68b9      	ldr	r1, [r7, #8]
 800b0a2:	68f8      	ldr	r0, [r7, #12]
 800b0a4:	f000 f972 	bl	800b38c <xQueueGenericCreateStatic>
 800b0a8:	61f8      	str	r0, [r7, #28]
 800b0aa:	e008      	b.n	800b0be <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800b0ac:	69bb      	ldr	r3, [r7, #24]
 800b0ae:	2b00      	cmp	r3, #0
 800b0b0:	d105      	bne.n	800b0be <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800b0b2:	2200      	movs	r2, #0
 800b0b4:	68b9      	ldr	r1, [r7, #8]
 800b0b6:	68f8      	ldr	r0, [r7, #12]
 800b0b8:	f000 f9e5 	bl	800b486 <xQueueGenericCreate>
 800b0bc:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800b0be:	69fb      	ldr	r3, [r7, #28]
 800b0c0:	2b00      	cmp	r3, #0
 800b0c2:	d00c      	beq.n	800b0de <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	2b00      	cmp	r3, #0
 800b0c8:	d003      	beq.n	800b0d2 <osMessageQueueNew+0xd0>
        name = attr->name;
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	681b      	ldr	r3, [r3, #0]
 800b0ce:	617b      	str	r3, [r7, #20]
 800b0d0:	e001      	b.n	800b0d6 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800b0d2:	2300      	movs	r3, #0
 800b0d4:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800b0d6:	6979      	ldr	r1, [r7, #20]
 800b0d8:	69f8      	ldr	r0, [r7, #28]
 800b0da:	f000 fdc5 	bl	800bc68 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800b0de:	69fb      	ldr	r3, [r7, #28]
}
 800b0e0:	4618      	mov	r0, r3
 800b0e2:	3720      	adds	r7, #32
 800b0e4:	46bd      	mov	sp, r7
 800b0e6:	bd80      	pop	{r7, pc}

0800b0e8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800b0e8:	b480      	push	{r7}
 800b0ea:	b085      	sub	sp, #20
 800b0ec:	af00      	add	r7, sp, #0
 800b0ee:	60f8      	str	r0, [r7, #12]
 800b0f0:	60b9      	str	r1, [r7, #8]
 800b0f2:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800b0f4:	68fb      	ldr	r3, [r7, #12]
 800b0f6:	4a07      	ldr	r2, [pc, #28]	@ (800b114 <vApplicationGetIdleTaskMemory+0x2c>)
 800b0f8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800b0fa:	68bb      	ldr	r3, [r7, #8]
 800b0fc:	4a06      	ldr	r2, [pc, #24]	@ (800b118 <vApplicationGetIdleTaskMemory+0x30>)
 800b0fe:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	2280      	movs	r2, #128	@ 0x80
 800b104:	601a      	str	r2, [r3, #0]
}
 800b106:	bf00      	nop
 800b108:	3714      	adds	r7, #20
 800b10a:	46bd      	mov	sp, r7
 800b10c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b110:	4770      	bx	lr
 800b112:	bf00      	nop
 800b114:	20000fc4 	.word	0x20000fc4
 800b118:	2000106c 	.word	0x2000106c

0800b11c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800b11c:	b480      	push	{r7}
 800b11e:	b085      	sub	sp, #20
 800b120:	af00      	add	r7, sp, #0
 800b122:	60f8      	str	r0, [r7, #12]
 800b124:	60b9      	str	r1, [r7, #8]
 800b126:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800b128:	68fb      	ldr	r3, [r7, #12]
 800b12a:	4a07      	ldr	r2, [pc, #28]	@ (800b148 <vApplicationGetTimerTaskMemory+0x2c>)
 800b12c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800b12e:	68bb      	ldr	r3, [r7, #8]
 800b130:	4a06      	ldr	r2, [pc, #24]	@ (800b14c <vApplicationGetTimerTaskMemory+0x30>)
 800b132:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800b13a:	601a      	str	r2, [r3, #0]
}
 800b13c:	bf00      	nop
 800b13e:	3714      	adds	r7, #20
 800b140:	46bd      	mov	sp, r7
 800b142:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b146:	4770      	bx	lr
 800b148:	2000126c 	.word	0x2000126c
 800b14c:	20001314 	.word	0x20001314

0800b150 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800b150:	b480      	push	{r7}
 800b152:	b083      	sub	sp, #12
 800b154:	af00      	add	r7, sp, #0
 800b156:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	f103 0208 	add.w	r2, r3, #8
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	f04f 32ff 	mov.w	r2, #4294967295
 800b168:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	f103 0208 	add.w	r2, r3, #8
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	f103 0208 	add.w	r2, r3, #8
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	2200      	movs	r2, #0
 800b182:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800b184:	bf00      	nop
 800b186:	370c      	adds	r7, #12
 800b188:	46bd      	mov	sp, r7
 800b18a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b18e:	4770      	bx	lr

0800b190 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800b190:	b480      	push	{r7}
 800b192:	b083      	sub	sp, #12
 800b194:	af00      	add	r7, sp, #0
 800b196:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	2200      	movs	r2, #0
 800b19c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800b19e:	bf00      	nop
 800b1a0:	370c      	adds	r7, #12
 800b1a2:	46bd      	mov	sp, r7
 800b1a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1a8:	4770      	bx	lr

0800b1aa <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b1aa:	b480      	push	{r7}
 800b1ac:	b085      	sub	sp, #20
 800b1ae:	af00      	add	r7, sp, #0
 800b1b0:	6078      	str	r0, [r7, #4]
 800b1b2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	685b      	ldr	r3, [r3, #4]
 800b1b8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800b1ba:	683b      	ldr	r3, [r7, #0]
 800b1bc:	68fa      	ldr	r2, [r7, #12]
 800b1be:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800b1c0:	68fb      	ldr	r3, [r7, #12]
 800b1c2:	689a      	ldr	r2, [r3, #8]
 800b1c4:	683b      	ldr	r3, [r7, #0]
 800b1c6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800b1c8:	68fb      	ldr	r3, [r7, #12]
 800b1ca:	689b      	ldr	r3, [r3, #8]
 800b1cc:	683a      	ldr	r2, [r7, #0]
 800b1ce:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800b1d0:	68fb      	ldr	r3, [r7, #12]
 800b1d2:	683a      	ldr	r2, [r7, #0]
 800b1d4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800b1d6:	683b      	ldr	r3, [r7, #0]
 800b1d8:	687a      	ldr	r2, [r7, #4]
 800b1da:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	681b      	ldr	r3, [r3, #0]
 800b1e0:	1c5a      	adds	r2, r3, #1
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	601a      	str	r2, [r3, #0]
}
 800b1e6:	bf00      	nop
 800b1e8:	3714      	adds	r7, #20
 800b1ea:	46bd      	mov	sp, r7
 800b1ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1f0:	4770      	bx	lr

0800b1f2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b1f2:	b480      	push	{r7}
 800b1f4:	b085      	sub	sp, #20
 800b1f6:	af00      	add	r7, sp, #0
 800b1f8:	6078      	str	r0, [r7, #4]
 800b1fa:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800b1fc:	683b      	ldr	r3, [r7, #0]
 800b1fe:	681b      	ldr	r3, [r3, #0]
 800b200:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800b202:	68bb      	ldr	r3, [r7, #8]
 800b204:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b208:	d103      	bne.n	800b212 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	691b      	ldr	r3, [r3, #16]
 800b20e:	60fb      	str	r3, [r7, #12]
 800b210:	e00c      	b.n	800b22c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	3308      	adds	r3, #8
 800b216:	60fb      	str	r3, [r7, #12]
 800b218:	e002      	b.n	800b220 <vListInsert+0x2e>
 800b21a:	68fb      	ldr	r3, [r7, #12]
 800b21c:	685b      	ldr	r3, [r3, #4]
 800b21e:	60fb      	str	r3, [r7, #12]
 800b220:	68fb      	ldr	r3, [r7, #12]
 800b222:	685b      	ldr	r3, [r3, #4]
 800b224:	681b      	ldr	r3, [r3, #0]
 800b226:	68ba      	ldr	r2, [r7, #8]
 800b228:	429a      	cmp	r2, r3
 800b22a:	d2f6      	bcs.n	800b21a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800b22c:	68fb      	ldr	r3, [r7, #12]
 800b22e:	685a      	ldr	r2, [r3, #4]
 800b230:	683b      	ldr	r3, [r7, #0]
 800b232:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800b234:	683b      	ldr	r3, [r7, #0]
 800b236:	685b      	ldr	r3, [r3, #4]
 800b238:	683a      	ldr	r2, [r7, #0]
 800b23a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800b23c:	683b      	ldr	r3, [r7, #0]
 800b23e:	68fa      	ldr	r2, [r7, #12]
 800b240:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800b242:	68fb      	ldr	r3, [r7, #12]
 800b244:	683a      	ldr	r2, [r7, #0]
 800b246:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800b248:	683b      	ldr	r3, [r7, #0]
 800b24a:	687a      	ldr	r2, [r7, #4]
 800b24c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	681b      	ldr	r3, [r3, #0]
 800b252:	1c5a      	adds	r2, r3, #1
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	601a      	str	r2, [r3, #0]
}
 800b258:	bf00      	nop
 800b25a:	3714      	adds	r7, #20
 800b25c:	46bd      	mov	sp, r7
 800b25e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b262:	4770      	bx	lr

0800b264 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800b264:	b480      	push	{r7}
 800b266:	b085      	sub	sp, #20
 800b268:	af00      	add	r7, sp, #0
 800b26a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	691b      	ldr	r3, [r3, #16]
 800b270:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	685b      	ldr	r3, [r3, #4]
 800b276:	687a      	ldr	r2, [r7, #4]
 800b278:	6892      	ldr	r2, [r2, #8]
 800b27a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	689b      	ldr	r3, [r3, #8]
 800b280:	687a      	ldr	r2, [r7, #4]
 800b282:	6852      	ldr	r2, [r2, #4]
 800b284:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800b286:	68fb      	ldr	r3, [r7, #12]
 800b288:	685b      	ldr	r3, [r3, #4]
 800b28a:	687a      	ldr	r2, [r7, #4]
 800b28c:	429a      	cmp	r2, r3
 800b28e:	d103      	bne.n	800b298 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	689a      	ldr	r2, [r3, #8]
 800b294:	68fb      	ldr	r3, [r7, #12]
 800b296:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	2200      	movs	r2, #0
 800b29c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800b29e:	68fb      	ldr	r3, [r7, #12]
 800b2a0:	681b      	ldr	r3, [r3, #0]
 800b2a2:	1e5a      	subs	r2, r3, #1
 800b2a4:	68fb      	ldr	r3, [r7, #12]
 800b2a6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800b2a8:	68fb      	ldr	r3, [r7, #12]
 800b2aa:	681b      	ldr	r3, [r3, #0]
}
 800b2ac:	4618      	mov	r0, r3
 800b2ae:	3714      	adds	r7, #20
 800b2b0:	46bd      	mov	sp, r7
 800b2b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2b6:	4770      	bx	lr

0800b2b8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800b2b8:	b580      	push	{r7, lr}
 800b2ba:	b084      	sub	sp, #16
 800b2bc:	af00      	add	r7, sp, #0
 800b2be:	6078      	str	r0, [r7, #4]
 800b2c0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800b2c6:	68fb      	ldr	r3, [r7, #12]
 800b2c8:	2b00      	cmp	r3, #0
 800b2ca:	d10b      	bne.n	800b2e4 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800b2cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b2d0:	f383 8811 	msr	BASEPRI, r3
 800b2d4:	f3bf 8f6f 	isb	sy
 800b2d8:	f3bf 8f4f 	dsb	sy
 800b2dc:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800b2de:	bf00      	nop
 800b2e0:	bf00      	nop
 800b2e2:	e7fd      	b.n	800b2e0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800b2e4:	f002 f8e0 	bl	800d4a8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b2e8:	68fb      	ldr	r3, [r7, #12]
 800b2ea:	681a      	ldr	r2, [r3, #0]
 800b2ec:	68fb      	ldr	r3, [r7, #12]
 800b2ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b2f0:	68f9      	ldr	r1, [r7, #12]
 800b2f2:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800b2f4:	fb01 f303 	mul.w	r3, r1, r3
 800b2f8:	441a      	add	r2, r3
 800b2fa:	68fb      	ldr	r3, [r7, #12]
 800b2fc:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800b2fe:	68fb      	ldr	r3, [r7, #12]
 800b300:	2200      	movs	r2, #0
 800b302:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800b304:	68fb      	ldr	r3, [r7, #12]
 800b306:	681a      	ldr	r2, [r3, #0]
 800b308:	68fb      	ldr	r3, [r7, #12]
 800b30a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b30c:	68fb      	ldr	r3, [r7, #12]
 800b30e:	681a      	ldr	r2, [r3, #0]
 800b310:	68fb      	ldr	r3, [r7, #12]
 800b312:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b314:	3b01      	subs	r3, #1
 800b316:	68f9      	ldr	r1, [r7, #12]
 800b318:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800b31a:	fb01 f303 	mul.w	r3, r1, r3
 800b31e:	441a      	add	r2, r3
 800b320:	68fb      	ldr	r3, [r7, #12]
 800b322:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800b324:	68fb      	ldr	r3, [r7, #12]
 800b326:	22ff      	movs	r2, #255	@ 0xff
 800b328:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800b32c:	68fb      	ldr	r3, [r7, #12]
 800b32e:	22ff      	movs	r2, #255	@ 0xff
 800b330:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800b334:	683b      	ldr	r3, [r7, #0]
 800b336:	2b00      	cmp	r3, #0
 800b338:	d114      	bne.n	800b364 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b33a:	68fb      	ldr	r3, [r7, #12]
 800b33c:	691b      	ldr	r3, [r3, #16]
 800b33e:	2b00      	cmp	r3, #0
 800b340:	d01a      	beq.n	800b378 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b342:	68fb      	ldr	r3, [r7, #12]
 800b344:	3310      	adds	r3, #16
 800b346:	4618      	mov	r0, r3
 800b348:	f001 f97e 	bl	800c648 <xTaskRemoveFromEventList>
 800b34c:	4603      	mov	r3, r0
 800b34e:	2b00      	cmp	r3, #0
 800b350:	d012      	beq.n	800b378 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800b352:	4b0d      	ldr	r3, [pc, #52]	@ (800b388 <xQueueGenericReset+0xd0>)
 800b354:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b358:	601a      	str	r2, [r3, #0]
 800b35a:	f3bf 8f4f 	dsb	sy
 800b35e:	f3bf 8f6f 	isb	sy
 800b362:	e009      	b.n	800b378 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800b364:	68fb      	ldr	r3, [r7, #12]
 800b366:	3310      	adds	r3, #16
 800b368:	4618      	mov	r0, r3
 800b36a:	f7ff fef1 	bl	800b150 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800b36e:	68fb      	ldr	r3, [r7, #12]
 800b370:	3324      	adds	r3, #36	@ 0x24
 800b372:	4618      	mov	r0, r3
 800b374:	f7ff feec 	bl	800b150 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800b378:	f002 f8c8 	bl	800d50c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800b37c:	2301      	movs	r3, #1
}
 800b37e:	4618      	mov	r0, r3
 800b380:	3710      	adds	r7, #16
 800b382:	46bd      	mov	sp, r7
 800b384:	bd80      	pop	{r7, pc}
 800b386:	bf00      	nop
 800b388:	e000ed04 	.word	0xe000ed04

0800b38c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800b38c:	b580      	push	{r7, lr}
 800b38e:	b08e      	sub	sp, #56	@ 0x38
 800b390:	af02      	add	r7, sp, #8
 800b392:	60f8      	str	r0, [r7, #12]
 800b394:	60b9      	str	r1, [r7, #8]
 800b396:	607a      	str	r2, [r7, #4]
 800b398:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800b39a:	68fb      	ldr	r3, [r7, #12]
 800b39c:	2b00      	cmp	r3, #0
 800b39e:	d10b      	bne.n	800b3b8 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800b3a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b3a4:	f383 8811 	msr	BASEPRI, r3
 800b3a8:	f3bf 8f6f 	isb	sy
 800b3ac:	f3bf 8f4f 	dsb	sy
 800b3b0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800b3b2:	bf00      	nop
 800b3b4:	bf00      	nop
 800b3b6:	e7fd      	b.n	800b3b4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800b3b8:	683b      	ldr	r3, [r7, #0]
 800b3ba:	2b00      	cmp	r3, #0
 800b3bc:	d10b      	bne.n	800b3d6 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800b3be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b3c2:	f383 8811 	msr	BASEPRI, r3
 800b3c6:	f3bf 8f6f 	isb	sy
 800b3ca:	f3bf 8f4f 	dsb	sy
 800b3ce:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800b3d0:	bf00      	nop
 800b3d2:	bf00      	nop
 800b3d4:	e7fd      	b.n	800b3d2 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	2b00      	cmp	r3, #0
 800b3da:	d002      	beq.n	800b3e2 <xQueueGenericCreateStatic+0x56>
 800b3dc:	68bb      	ldr	r3, [r7, #8]
 800b3de:	2b00      	cmp	r3, #0
 800b3e0:	d001      	beq.n	800b3e6 <xQueueGenericCreateStatic+0x5a>
 800b3e2:	2301      	movs	r3, #1
 800b3e4:	e000      	b.n	800b3e8 <xQueueGenericCreateStatic+0x5c>
 800b3e6:	2300      	movs	r3, #0
 800b3e8:	2b00      	cmp	r3, #0
 800b3ea:	d10b      	bne.n	800b404 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800b3ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b3f0:	f383 8811 	msr	BASEPRI, r3
 800b3f4:	f3bf 8f6f 	isb	sy
 800b3f8:	f3bf 8f4f 	dsb	sy
 800b3fc:	623b      	str	r3, [r7, #32]
}
 800b3fe:	bf00      	nop
 800b400:	bf00      	nop
 800b402:	e7fd      	b.n	800b400 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	2b00      	cmp	r3, #0
 800b408:	d102      	bne.n	800b410 <xQueueGenericCreateStatic+0x84>
 800b40a:	68bb      	ldr	r3, [r7, #8]
 800b40c:	2b00      	cmp	r3, #0
 800b40e:	d101      	bne.n	800b414 <xQueueGenericCreateStatic+0x88>
 800b410:	2301      	movs	r3, #1
 800b412:	e000      	b.n	800b416 <xQueueGenericCreateStatic+0x8a>
 800b414:	2300      	movs	r3, #0
 800b416:	2b00      	cmp	r3, #0
 800b418:	d10b      	bne.n	800b432 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800b41a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b41e:	f383 8811 	msr	BASEPRI, r3
 800b422:	f3bf 8f6f 	isb	sy
 800b426:	f3bf 8f4f 	dsb	sy
 800b42a:	61fb      	str	r3, [r7, #28]
}
 800b42c:	bf00      	nop
 800b42e:	bf00      	nop
 800b430:	e7fd      	b.n	800b42e <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800b432:	2350      	movs	r3, #80	@ 0x50
 800b434:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800b436:	697b      	ldr	r3, [r7, #20]
 800b438:	2b50      	cmp	r3, #80	@ 0x50
 800b43a:	d00b      	beq.n	800b454 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800b43c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b440:	f383 8811 	msr	BASEPRI, r3
 800b444:	f3bf 8f6f 	isb	sy
 800b448:	f3bf 8f4f 	dsb	sy
 800b44c:	61bb      	str	r3, [r7, #24]
}
 800b44e:	bf00      	nop
 800b450:	bf00      	nop
 800b452:	e7fd      	b.n	800b450 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800b454:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b456:	683b      	ldr	r3, [r7, #0]
 800b458:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800b45a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b45c:	2b00      	cmp	r3, #0
 800b45e:	d00d      	beq.n	800b47c <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800b460:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b462:	2201      	movs	r2, #1
 800b464:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800b468:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800b46c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b46e:	9300      	str	r3, [sp, #0]
 800b470:	4613      	mov	r3, r2
 800b472:	687a      	ldr	r2, [r7, #4]
 800b474:	68b9      	ldr	r1, [r7, #8]
 800b476:	68f8      	ldr	r0, [r7, #12]
 800b478:	f000 f840 	bl	800b4fc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800b47c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800b47e:	4618      	mov	r0, r3
 800b480:	3730      	adds	r7, #48	@ 0x30
 800b482:	46bd      	mov	sp, r7
 800b484:	bd80      	pop	{r7, pc}

0800b486 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800b486:	b580      	push	{r7, lr}
 800b488:	b08a      	sub	sp, #40	@ 0x28
 800b48a:	af02      	add	r7, sp, #8
 800b48c:	60f8      	str	r0, [r7, #12]
 800b48e:	60b9      	str	r1, [r7, #8]
 800b490:	4613      	mov	r3, r2
 800b492:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800b494:	68fb      	ldr	r3, [r7, #12]
 800b496:	2b00      	cmp	r3, #0
 800b498:	d10b      	bne.n	800b4b2 <xQueueGenericCreate+0x2c>
	__asm volatile
 800b49a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b49e:	f383 8811 	msr	BASEPRI, r3
 800b4a2:	f3bf 8f6f 	isb	sy
 800b4a6:	f3bf 8f4f 	dsb	sy
 800b4aa:	613b      	str	r3, [r7, #16]
}
 800b4ac:	bf00      	nop
 800b4ae:	bf00      	nop
 800b4b0:	e7fd      	b.n	800b4ae <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b4b2:	68fb      	ldr	r3, [r7, #12]
 800b4b4:	68ba      	ldr	r2, [r7, #8]
 800b4b6:	fb02 f303 	mul.w	r3, r2, r3
 800b4ba:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800b4bc:	69fb      	ldr	r3, [r7, #28]
 800b4be:	3350      	adds	r3, #80	@ 0x50
 800b4c0:	4618      	mov	r0, r3
 800b4c2:	f002 f913 	bl	800d6ec <pvPortMalloc>
 800b4c6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800b4c8:	69bb      	ldr	r3, [r7, #24]
 800b4ca:	2b00      	cmp	r3, #0
 800b4cc:	d011      	beq.n	800b4f2 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800b4ce:	69bb      	ldr	r3, [r7, #24]
 800b4d0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b4d2:	697b      	ldr	r3, [r7, #20]
 800b4d4:	3350      	adds	r3, #80	@ 0x50
 800b4d6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800b4d8:	69bb      	ldr	r3, [r7, #24]
 800b4da:	2200      	movs	r2, #0
 800b4dc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800b4e0:	79fa      	ldrb	r2, [r7, #7]
 800b4e2:	69bb      	ldr	r3, [r7, #24]
 800b4e4:	9300      	str	r3, [sp, #0]
 800b4e6:	4613      	mov	r3, r2
 800b4e8:	697a      	ldr	r2, [r7, #20]
 800b4ea:	68b9      	ldr	r1, [r7, #8]
 800b4ec:	68f8      	ldr	r0, [r7, #12]
 800b4ee:	f000 f805 	bl	800b4fc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800b4f2:	69bb      	ldr	r3, [r7, #24]
	}
 800b4f4:	4618      	mov	r0, r3
 800b4f6:	3720      	adds	r7, #32
 800b4f8:	46bd      	mov	sp, r7
 800b4fa:	bd80      	pop	{r7, pc}

0800b4fc <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800b4fc:	b580      	push	{r7, lr}
 800b4fe:	b084      	sub	sp, #16
 800b500:	af00      	add	r7, sp, #0
 800b502:	60f8      	str	r0, [r7, #12]
 800b504:	60b9      	str	r1, [r7, #8]
 800b506:	607a      	str	r2, [r7, #4]
 800b508:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800b50a:	68bb      	ldr	r3, [r7, #8]
 800b50c:	2b00      	cmp	r3, #0
 800b50e:	d103      	bne.n	800b518 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800b510:	69bb      	ldr	r3, [r7, #24]
 800b512:	69ba      	ldr	r2, [r7, #24]
 800b514:	601a      	str	r2, [r3, #0]
 800b516:	e002      	b.n	800b51e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800b518:	69bb      	ldr	r3, [r7, #24]
 800b51a:	687a      	ldr	r2, [r7, #4]
 800b51c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800b51e:	69bb      	ldr	r3, [r7, #24]
 800b520:	68fa      	ldr	r2, [r7, #12]
 800b522:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800b524:	69bb      	ldr	r3, [r7, #24]
 800b526:	68ba      	ldr	r2, [r7, #8]
 800b528:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800b52a:	2101      	movs	r1, #1
 800b52c:	69b8      	ldr	r0, [r7, #24]
 800b52e:	f7ff fec3 	bl	800b2b8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800b532:	69bb      	ldr	r3, [r7, #24]
 800b534:	78fa      	ldrb	r2, [r7, #3]
 800b536:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800b53a:	bf00      	nop
 800b53c:	3710      	adds	r7, #16
 800b53e:	46bd      	mov	sp, r7
 800b540:	bd80      	pop	{r7, pc}
	...

0800b544 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800b544:	b580      	push	{r7, lr}
 800b546:	b08e      	sub	sp, #56	@ 0x38
 800b548:	af00      	add	r7, sp, #0
 800b54a:	60f8      	str	r0, [r7, #12]
 800b54c:	60b9      	str	r1, [r7, #8]
 800b54e:	607a      	str	r2, [r7, #4]
 800b550:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800b552:	2300      	movs	r3, #0
 800b554:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b556:	68fb      	ldr	r3, [r7, #12]
 800b558:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800b55a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b55c:	2b00      	cmp	r3, #0
 800b55e:	d10b      	bne.n	800b578 <xQueueGenericSend+0x34>
	__asm volatile
 800b560:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b564:	f383 8811 	msr	BASEPRI, r3
 800b568:	f3bf 8f6f 	isb	sy
 800b56c:	f3bf 8f4f 	dsb	sy
 800b570:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800b572:	bf00      	nop
 800b574:	bf00      	nop
 800b576:	e7fd      	b.n	800b574 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b578:	68bb      	ldr	r3, [r7, #8]
 800b57a:	2b00      	cmp	r3, #0
 800b57c:	d103      	bne.n	800b586 <xQueueGenericSend+0x42>
 800b57e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b580:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b582:	2b00      	cmp	r3, #0
 800b584:	d101      	bne.n	800b58a <xQueueGenericSend+0x46>
 800b586:	2301      	movs	r3, #1
 800b588:	e000      	b.n	800b58c <xQueueGenericSend+0x48>
 800b58a:	2300      	movs	r3, #0
 800b58c:	2b00      	cmp	r3, #0
 800b58e:	d10b      	bne.n	800b5a8 <xQueueGenericSend+0x64>
	__asm volatile
 800b590:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b594:	f383 8811 	msr	BASEPRI, r3
 800b598:	f3bf 8f6f 	isb	sy
 800b59c:	f3bf 8f4f 	dsb	sy
 800b5a0:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800b5a2:	bf00      	nop
 800b5a4:	bf00      	nop
 800b5a6:	e7fd      	b.n	800b5a4 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b5a8:	683b      	ldr	r3, [r7, #0]
 800b5aa:	2b02      	cmp	r3, #2
 800b5ac:	d103      	bne.n	800b5b6 <xQueueGenericSend+0x72>
 800b5ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b5b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b5b2:	2b01      	cmp	r3, #1
 800b5b4:	d101      	bne.n	800b5ba <xQueueGenericSend+0x76>
 800b5b6:	2301      	movs	r3, #1
 800b5b8:	e000      	b.n	800b5bc <xQueueGenericSend+0x78>
 800b5ba:	2300      	movs	r3, #0
 800b5bc:	2b00      	cmp	r3, #0
 800b5be:	d10b      	bne.n	800b5d8 <xQueueGenericSend+0x94>
	__asm volatile
 800b5c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b5c4:	f383 8811 	msr	BASEPRI, r3
 800b5c8:	f3bf 8f6f 	isb	sy
 800b5cc:	f3bf 8f4f 	dsb	sy
 800b5d0:	623b      	str	r3, [r7, #32]
}
 800b5d2:	bf00      	nop
 800b5d4:	bf00      	nop
 800b5d6:	e7fd      	b.n	800b5d4 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b5d8:	f001 f9fc 	bl	800c9d4 <xTaskGetSchedulerState>
 800b5dc:	4603      	mov	r3, r0
 800b5de:	2b00      	cmp	r3, #0
 800b5e0:	d102      	bne.n	800b5e8 <xQueueGenericSend+0xa4>
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	2b00      	cmp	r3, #0
 800b5e6:	d101      	bne.n	800b5ec <xQueueGenericSend+0xa8>
 800b5e8:	2301      	movs	r3, #1
 800b5ea:	e000      	b.n	800b5ee <xQueueGenericSend+0xaa>
 800b5ec:	2300      	movs	r3, #0
 800b5ee:	2b00      	cmp	r3, #0
 800b5f0:	d10b      	bne.n	800b60a <xQueueGenericSend+0xc6>
	__asm volatile
 800b5f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b5f6:	f383 8811 	msr	BASEPRI, r3
 800b5fa:	f3bf 8f6f 	isb	sy
 800b5fe:	f3bf 8f4f 	dsb	sy
 800b602:	61fb      	str	r3, [r7, #28]
}
 800b604:	bf00      	nop
 800b606:	bf00      	nop
 800b608:	e7fd      	b.n	800b606 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b60a:	f001 ff4d 	bl	800d4a8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b60e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b610:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b612:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b614:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b616:	429a      	cmp	r2, r3
 800b618:	d302      	bcc.n	800b620 <xQueueGenericSend+0xdc>
 800b61a:	683b      	ldr	r3, [r7, #0]
 800b61c:	2b02      	cmp	r3, #2
 800b61e:	d129      	bne.n	800b674 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b620:	683a      	ldr	r2, [r7, #0]
 800b622:	68b9      	ldr	r1, [r7, #8]
 800b624:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b626:	f000 fa0f 	bl	800ba48 <prvCopyDataToQueue>
 800b62a:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b62c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b62e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b630:	2b00      	cmp	r3, #0
 800b632:	d010      	beq.n	800b656 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b634:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b636:	3324      	adds	r3, #36	@ 0x24
 800b638:	4618      	mov	r0, r3
 800b63a:	f001 f805 	bl	800c648 <xTaskRemoveFromEventList>
 800b63e:	4603      	mov	r3, r0
 800b640:	2b00      	cmp	r3, #0
 800b642:	d013      	beq.n	800b66c <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800b644:	4b3f      	ldr	r3, [pc, #252]	@ (800b744 <xQueueGenericSend+0x200>)
 800b646:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b64a:	601a      	str	r2, [r3, #0]
 800b64c:	f3bf 8f4f 	dsb	sy
 800b650:	f3bf 8f6f 	isb	sy
 800b654:	e00a      	b.n	800b66c <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800b656:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b658:	2b00      	cmp	r3, #0
 800b65a:	d007      	beq.n	800b66c <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800b65c:	4b39      	ldr	r3, [pc, #228]	@ (800b744 <xQueueGenericSend+0x200>)
 800b65e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b662:	601a      	str	r2, [r3, #0]
 800b664:	f3bf 8f4f 	dsb	sy
 800b668:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800b66c:	f001 ff4e 	bl	800d50c <vPortExitCritical>
				return pdPASS;
 800b670:	2301      	movs	r3, #1
 800b672:	e063      	b.n	800b73c <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	2b00      	cmp	r3, #0
 800b678:	d103      	bne.n	800b682 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800b67a:	f001 ff47 	bl	800d50c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800b67e:	2300      	movs	r3, #0
 800b680:	e05c      	b.n	800b73c <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b682:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b684:	2b00      	cmp	r3, #0
 800b686:	d106      	bne.n	800b696 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b688:	f107 0314 	add.w	r3, r7, #20
 800b68c:	4618      	mov	r0, r3
 800b68e:	f001 f83f 	bl	800c710 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b692:	2301      	movs	r3, #1
 800b694:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b696:	f001 ff39 	bl	800d50c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b69a:	f000 fda7 	bl	800c1ec <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b69e:	f001 ff03 	bl	800d4a8 <vPortEnterCritical>
 800b6a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b6a4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800b6a8:	b25b      	sxtb	r3, r3
 800b6aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b6ae:	d103      	bne.n	800b6b8 <xQueueGenericSend+0x174>
 800b6b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b6b2:	2200      	movs	r2, #0
 800b6b4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b6b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b6ba:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b6be:	b25b      	sxtb	r3, r3
 800b6c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b6c4:	d103      	bne.n	800b6ce <xQueueGenericSend+0x18a>
 800b6c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b6c8:	2200      	movs	r2, #0
 800b6ca:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800b6ce:	f001 ff1d 	bl	800d50c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b6d2:	1d3a      	adds	r2, r7, #4
 800b6d4:	f107 0314 	add.w	r3, r7, #20
 800b6d8:	4611      	mov	r1, r2
 800b6da:	4618      	mov	r0, r3
 800b6dc:	f001 f82e 	bl	800c73c <xTaskCheckForTimeOut>
 800b6e0:	4603      	mov	r3, r0
 800b6e2:	2b00      	cmp	r3, #0
 800b6e4:	d124      	bne.n	800b730 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800b6e6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b6e8:	f000 faa6 	bl	800bc38 <prvIsQueueFull>
 800b6ec:	4603      	mov	r3, r0
 800b6ee:	2b00      	cmp	r3, #0
 800b6f0:	d018      	beq.n	800b724 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800b6f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b6f4:	3310      	adds	r3, #16
 800b6f6:	687a      	ldr	r2, [r7, #4]
 800b6f8:	4611      	mov	r1, r2
 800b6fa:	4618      	mov	r0, r3
 800b6fc:	f000 ff52 	bl	800c5a4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800b700:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b702:	f000 fa31 	bl	800bb68 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800b706:	f000 fd7f 	bl	800c208 <xTaskResumeAll>
 800b70a:	4603      	mov	r3, r0
 800b70c:	2b00      	cmp	r3, #0
 800b70e:	f47f af7c 	bne.w	800b60a <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800b712:	4b0c      	ldr	r3, [pc, #48]	@ (800b744 <xQueueGenericSend+0x200>)
 800b714:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b718:	601a      	str	r2, [r3, #0]
 800b71a:	f3bf 8f4f 	dsb	sy
 800b71e:	f3bf 8f6f 	isb	sy
 800b722:	e772      	b.n	800b60a <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800b724:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b726:	f000 fa1f 	bl	800bb68 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b72a:	f000 fd6d 	bl	800c208 <xTaskResumeAll>
 800b72e:	e76c      	b.n	800b60a <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800b730:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b732:	f000 fa19 	bl	800bb68 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b736:	f000 fd67 	bl	800c208 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800b73a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800b73c:	4618      	mov	r0, r3
 800b73e:	3738      	adds	r7, #56	@ 0x38
 800b740:	46bd      	mov	sp, r7
 800b742:	bd80      	pop	{r7, pc}
 800b744:	e000ed04 	.word	0xe000ed04

0800b748 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800b748:	b580      	push	{r7, lr}
 800b74a:	b090      	sub	sp, #64	@ 0x40
 800b74c:	af00      	add	r7, sp, #0
 800b74e:	60f8      	str	r0, [r7, #12]
 800b750:	60b9      	str	r1, [r7, #8]
 800b752:	607a      	str	r2, [r7, #4]
 800b754:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800b756:	68fb      	ldr	r3, [r7, #12]
 800b758:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800b75a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b75c:	2b00      	cmp	r3, #0
 800b75e:	d10b      	bne.n	800b778 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800b760:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b764:	f383 8811 	msr	BASEPRI, r3
 800b768:	f3bf 8f6f 	isb	sy
 800b76c:	f3bf 8f4f 	dsb	sy
 800b770:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800b772:	bf00      	nop
 800b774:	bf00      	nop
 800b776:	e7fd      	b.n	800b774 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b778:	68bb      	ldr	r3, [r7, #8]
 800b77a:	2b00      	cmp	r3, #0
 800b77c:	d103      	bne.n	800b786 <xQueueGenericSendFromISR+0x3e>
 800b77e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b780:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b782:	2b00      	cmp	r3, #0
 800b784:	d101      	bne.n	800b78a <xQueueGenericSendFromISR+0x42>
 800b786:	2301      	movs	r3, #1
 800b788:	e000      	b.n	800b78c <xQueueGenericSendFromISR+0x44>
 800b78a:	2300      	movs	r3, #0
 800b78c:	2b00      	cmp	r3, #0
 800b78e:	d10b      	bne.n	800b7a8 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800b790:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b794:	f383 8811 	msr	BASEPRI, r3
 800b798:	f3bf 8f6f 	isb	sy
 800b79c:	f3bf 8f4f 	dsb	sy
 800b7a0:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800b7a2:	bf00      	nop
 800b7a4:	bf00      	nop
 800b7a6:	e7fd      	b.n	800b7a4 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b7a8:	683b      	ldr	r3, [r7, #0]
 800b7aa:	2b02      	cmp	r3, #2
 800b7ac:	d103      	bne.n	800b7b6 <xQueueGenericSendFromISR+0x6e>
 800b7ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b7b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b7b2:	2b01      	cmp	r3, #1
 800b7b4:	d101      	bne.n	800b7ba <xQueueGenericSendFromISR+0x72>
 800b7b6:	2301      	movs	r3, #1
 800b7b8:	e000      	b.n	800b7bc <xQueueGenericSendFromISR+0x74>
 800b7ba:	2300      	movs	r3, #0
 800b7bc:	2b00      	cmp	r3, #0
 800b7be:	d10b      	bne.n	800b7d8 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800b7c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b7c4:	f383 8811 	msr	BASEPRI, r3
 800b7c8:	f3bf 8f6f 	isb	sy
 800b7cc:	f3bf 8f4f 	dsb	sy
 800b7d0:	623b      	str	r3, [r7, #32]
}
 800b7d2:	bf00      	nop
 800b7d4:	bf00      	nop
 800b7d6:	e7fd      	b.n	800b7d4 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b7d8:	f001 ff46 	bl	800d668 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800b7dc:	f3ef 8211 	mrs	r2, BASEPRI
 800b7e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b7e4:	f383 8811 	msr	BASEPRI, r3
 800b7e8:	f3bf 8f6f 	isb	sy
 800b7ec:	f3bf 8f4f 	dsb	sy
 800b7f0:	61fa      	str	r2, [r7, #28]
 800b7f2:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800b7f4:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b7f6:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b7f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b7fa:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b7fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b7fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b800:	429a      	cmp	r2, r3
 800b802:	d302      	bcc.n	800b80a <xQueueGenericSendFromISR+0xc2>
 800b804:	683b      	ldr	r3, [r7, #0]
 800b806:	2b02      	cmp	r3, #2
 800b808:	d12f      	bne.n	800b86a <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800b80a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b80c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b810:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b814:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b816:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b818:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b81a:	683a      	ldr	r2, [r7, #0]
 800b81c:	68b9      	ldr	r1, [r7, #8]
 800b81e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800b820:	f000 f912 	bl	800ba48 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800b824:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800b828:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b82c:	d112      	bne.n	800b854 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b82e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b830:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b832:	2b00      	cmp	r3, #0
 800b834:	d016      	beq.n	800b864 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b836:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b838:	3324      	adds	r3, #36	@ 0x24
 800b83a:	4618      	mov	r0, r3
 800b83c:	f000 ff04 	bl	800c648 <xTaskRemoveFromEventList>
 800b840:	4603      	mov	r3, r0
 800b842:	2b00      	cmp	r3, #0
 800b844:	d00e      	beq.n	800b864 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	2b00      	cmp	r3, #0
 800b84a:	d00b      	beq.n	800b864 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	2201      	movs	r2, #1
 800b850:	601a      	str	r2, [r3, #0]
 800b852:	e007      	b.n	800b864 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800b854:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800b858:	3301      	adds	r3, #1
 800b85a:	b2db      	uxtb	r3, r3
 800b85c:	b25a      	sxtb	r2, r3
 800b85e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b860:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800b864:	2301      	movs	r3, #1
 800b866:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800b868:	e001      	b.n	800b86e <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800b86a:	2300      	movs	r3, #0
 800b86c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b86e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b870:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800b872:	697b      	ldr	r3, [r7, #20]
 800b874:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800b878:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b87a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800b87c:	4618      	mov	r0, r3
 800b87e:	3740      	adds	r7, #64	@ 0x40
 800b880:	46bd      	mov	sp, r7
 800b882:	bd80      	pop	{r7, pc}

0800b884 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800b884:	b580      	push	{r7, lr}
 800b886:	b08c      	sub	sp, #48	@ 0x30
 800b888:	af00      	add	r7, sp, #0
 800b88a:	60f8      	str	r0, [r7, #12]
 800b88c:	60b9      	str	r1, [r7, #8]
 800b88e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800b890:	2300      	movs	r3, #0
 800b892:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b894:	68fb      	ldr	r3, [r7, #12]
 800b896:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800b898:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b89a:	2b00      	cmp	r3, #0
 800b89c:	d10b      	bne.n	800b8b6 <xQueueReceive+0x32>
	__asm volatile
 800b89e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b8a2:	f383 8811 	msr	BASEPRI, r3
 800b8a6:	f3bf 8f6f 	isb	sy
 800b8aa:	f3bf 8f4f 	dsb	sy
 800b8ae:	623b      	str	r3, [r7, #32]
}
 800b8b0:	bf00      	nop
 800b8b2:	bf00      	nop
 800b8b4:	e7fd      	b.n	800b8b2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b8b6:	68bb      	ldr	r3, [r7, #8]
 800b8b8:	2b00      	cmp	r3, #0
 800b8ba:	d103      	bne.n	800b8c4 <xQueueReceive+0x40>
 800b8bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b8be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b8c0:	2b00      	cmp	r3, #0
 800b8c2:	d101      	bne.n	800b8c8 <xQueueReceive+0x44>
 800b8c4:	2301      	movs	r3, #1
 800b8c6:	e000      	b.n	800b8ca <xQueueReceive+0x46>
 800b8c8:	2300      	movs	r3, #0
 800b8ca:	2b00      	cmp	r3, #0
 800b8cc:	d10b      	bne.n	800b8e6 <xQueueReceive+0x62>
	__asm volatile
 800b8ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b8d2:	f383 8811 	msr	BASEPRI, r3
 800b8d6:	f3bf 8f6f 	isb	sy
 800b8da:	f3bf 8f4f 	dsb	sy
 800b8de:	61fb      	str	r3, [r7, #28]
}
 800b8e0:	bf00      	nop
 800b8e2:	bf00      	nop
 800b8e4:	e7fd      	b.n	800b8e2 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b8e6:	f001 f875 	bl	800c9d4 <xTaskGetSchedulerState>
 800b8ea:	4603      	mov	r3, r0
 800b8ec:	2b00      	cmp	r3, #0
 800b8ee:	d102      	bne.n	800b8f6 <xQueueReceive+0x72>
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	2b00      	cmp	r3, #0
 800b8f4:	d101      	bne.n	800b8fa <xQueueReceive+0x76>
 800b8f6:	2301      	movs	r3, #1
 800b8f8:	e000      	b.n	800b8fc <xQueueReceive+0x78>
 800b8fa:	2300      	movs	r3, #0
 800b8fc:	2b00      	cmp	r3, #0
 800b8fe:	d10b      	bne.n	800b918 <xQueueReceive+0x94>
	__asm volatile
 800b900:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b904:	f383 8811 	msr	BASEPRI, r3
 800b908:	f3bf 8f6f 	isb	sy
 800b90c:	f3bf 8f4f 	dsb	sy
 800b910:	61bb      	str	r3, [r7, #24]
}
 800b912:	bf00      	nop
 800b914:	bf00      	nop
 800b916:	e7fd      	b.n	800b914 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b918:	f001 fdc6 	bl	800d4a8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b91c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b91e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b920:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b922:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b924:	2b00      	cmp	r3, #0
 800b926:	d01f      	beq.n	800b968 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800b928:	68b9      	ldr	r1, [r7, #8]
 800b92a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b92c:	f000 f8f6 	bl	800bb1c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800b930:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b932:	1e5a      	subs	r2, r3, #1
 800b934:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b936:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b938:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b93a:	691b      	ldr	r3, [r3, #16]
 800b93c:	2b00      	cmp	r3, #0
 800b93e:	d00f      	beq.n	800b960 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b940:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b942:	3310      	adds	r3, #16
 800b944:	4618      	mov	r0, r3
 800b946:	f000 fe7f 	bl	800c648 <xTaskRemoveFromEventList>
 800b94a:	4603      	mov	r3, r0
 800b94c:	2b00      	cmp	r3, #0
 800b94e:	d007      	beq.n	800b960 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800b950:	4b3c      	ldr	r3, [pc, #240]	@ (800ba44 <xQueueReceive+0x1c0>)
 800b952:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b956:	601a      	str	r2, [r3, #0]
 800b958:	f3bf 8f4f 	dsb	sy
 800b95c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800b960:	f001 fdd4 	bl	800d50c <vPortExitCritical>
				return pdPASS;
 800b964:	2301      	movs	r3, #1
 800b966:	e069      	b.n	800ba3c <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	2b00      	cmp	r3, #0
 800b96c:	d103      	bne.n	800b976 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800b96e:	f001 fdcd 	bl	800d50c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800b972:	2300      	movs	r3, #0
 800b974:	e062      	b.n	800ba3c <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b976:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b978:	2b00      	cmp	r3, #0
 800b97a:	d106      	bne.n	800b98a <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b97c:	f107 0310 	add.w	r3, r7, #16
 800b980:	4618      	mov	r0, r3
 800b982:	f000 fec5 	bl	800c710 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b986:	2301      	movs	r3, #1
 800b988:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b98a:	f001 fdbf 	bl	800d50c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b98e:	f000 fc2d 	bl	800c1ec <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b992:	f001 fd89 	bl	800d4a8 <vPortEnterCritical>
 800b996:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b998:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800b99c:	b25b      	sxtb	r3, r3
 800b99e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b9a2:	d103      	bne.n	800b9ac <xQueueReceive+0x128>
 800b9a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b9a6:	2200      	movs	r2, #0
 800b9a8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b9ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b9ae:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b9b2:	b25b      	sxtb	r3, r3
 800b9b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b9b8:	d103      	bne.n	800b9c2 <xQueueReceive+0x13e>
 800b9ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b9bc:	2200      	movs	r2, #0
 800b9be:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800b9c2:	f001 fda3 	bl	800d50c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b9c6:	1d3a      	adds	r2, r7, #4
 800b9c8:	f107 0310 	add.w	r3, r7, #16
 800b9cc:	4611      	mov	r1, r2
 800b9ce:	4618      	mov	r0, r3
 800b9d0:	f000 feb4 	bl	800c73c <xTaskCheckForTimeOut>
 800b9d4:	4603      	mov	r3, r0
 800b9d6:	2b00      	cmp	r3, #0
 800b9d8:	d123      	bne.n	800ba22 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b9da:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b9dc:	f000 f916 	bl	800bc0c <prvIsQueueEmpty>
 800b9e0:	4603      	mov	r3, r0
 800b9e2:	2b00      	cmp	r3, #0
 800b9e4:	d017      	beq.n	800ba16 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800b9e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b9e8:	3324      	adds	r3, #36	@ 0x24
 800b9ea:	687a      	ldr	r2, [r7, #4]
 800b9ec:	4611      	mov	r1, r2
 800b9ee:	4618      	mov	r0, r3
 800b9f0:	f000 fdd8 	bl	800c5a4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800b9f4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b9f6:	f000 f8b7 	bl	800bb68 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800b9fa:	f000 fc05 	bl	800c208 <xTaskResumeAll>
 800b9fe:	4603      	mov	r3, r0
 800ba00:	2b00      	cmp	r3, #0
 800ba02:	d189      	bne.n	800b918 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800ba04:	4b0f      	ldr	r3, [pc, #60]	@ (800ba44 <xQueueReceive+0x1c0>)
 800ba06:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ba0a:	601a      	str	r2, [r3, #0]
 800ba0c:	f3bf 8f4f 	dsb	sy
 800ba10:	f3bf 8f6f 	isb	sy
 800ba14:	e780      	b.n	800b918 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800ba16:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ba18:	f000 f8a6 	bl	800bb68 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ba1c:	f000 fbf4 	bl	800c208 <xTaskResumeAll>
 800ba20:	e77a      	b.n	800b918 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800ba22:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ba24:	f000 f8a0 	bl	800bb68 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ba28:	f000 fbee 	bl	800c208 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ba2c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ba2e:	f000 f8ed 	bl	800bc0c <prvIsQueueEmpty>
 800ba32:	4603      	mov	r3, r0
 800ba34:	2b00      	cmp	r3, #0
 800ba36:	f43f af6f 	beq.w	800b918 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800ba3a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800ba3c:	4618      	mov	r0, r3
 800ba3e:	3730      	adds	r7, #48	@ 0x30
 800ba40:	46bd      	mov	sp, r7
 800ba42:	bd80      	pop	{r7, pc}
 800ba44:	e000ed04 	.word	0xe000ed04

0800ba48 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800ba48:	b580      	push	{r7, lr}
 800ba4a:	b086      	sub	sp, #24
 800ba4c:	af00      	add	r7, sp, #0
 800ba4e:	60f8      	str	r0, [r7, #12]
 800ba50:	60b9      	str	r1, [r7, #8]
 800ba52:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800ba54:	2300      	movs	r3, #0
 800ba56:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ba58:	68fb      	ldr	r3, [r7, #12]
 800ba5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ba5c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800ba5e:	68fb      	ldr	r3, [r7, #12]
 800ba60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ba62:	2b00      	cmp	r3, #0
 800ba64:	d10d      	bne.n	800ba82 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ba66:	68fb      	ldr	r3, [r7, #12]
 800ba68:	681b      	ldr	r3, [r3, #0]
 800ba6a:	2b00      	cmp	r3, #0
 800ba6c:	d14d      	bne.n	800bb0a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800ba6e:	68fb      	ldr	r3, [r7, #12]
 800ba70:	689b      	ldr	r3, [r3, #8]
 800ba72:	4618      	mov	r0, r3
 800ba74:	f000 ffcc 	bl	800ca10 <xTaskPriorityDisinherit>
 800ba78:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800ba7a:	68fb      	ldr	r3, [r7, #12]
 800ba7c:	2200      	movs	r2, #0
 800ba7e:	609a      	str	r2, [r3, #8]
 800ba80:	e043      	b.n	800bb0a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800ba82:	687b      	ldr	r3, [r7, #4]
 800ba84:	2b00      	cmp	r3, #0
 800ba86:	d119      	bne.n	800babc <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800ba88:	68fb      	ldr	r3, [r7, #12]
 800ba8a:	6858      	ldr	r0, [r3, #4]
 800ba8c:	68fb      	ldr	r3, [r7, #12]
 800ba8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ba90:	461a      	mov	r2, r3
 800ba92:	68b9      	ldr	r1, [r7, #8]
 800ba94:	f003 fa41 	bl	800ef1a <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800ba98:	68fb      	ldr	r3, [r7, #12]
 800ba9a:	685a      	ldr	r2, [r3, #4]
 800ba9c:	68fb      	ldr	r3, [r7, #12]
 800ba9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800baa0:	441a      	add	r2, r3
 800baa2:	68fb      	ldr	r3, [r7, #12]
 800baa4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800baa6:	68fb      	ldr	r3, [r7, #12]
 800baa8:	685a      	ldr	r2, [r3, #4]
 800baaa:	68fb      	ldr	r3, [r7, #12]
 800baac:	689b      	ldr	r3, [r3, #8]
 800baae:	429a      	cmp	r2, r3
 800bab0:	d32b      	bcc.n	800bb0a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800bab2:	68fb      	ldr	r3, [r7, #12]
 800bab4:	681a      	ldr	r2, [r3, #0]
 800bab6:	68fb      	ldr	r3, [r7, #12]
 800bab8:	605a      	str	r2, [r3, #4]
 800baba:	e026      	b.n	800bb0a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800babc:	68fb      	ldr	r3, [r7, #12]
 800babe:	68d8      	ldr	r0, [r3, #12]
 800bac0:	68fb      	ldr	r3, [r7, #12]
 800bac2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bac4:	461a      	mov	r2, r3
 800bac6:	68b9      	ldr	r1, [r7, #8]
 800bac8:	f003 fa27 	bl	800ef1a <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800bacc:	68fb      	ldr	r3, [r7, #12]
 800bace:	68da      	ldr	r2, [r3, #12]
 800bad0:	68fb      	ldr	r3, [r7, #12]
 800bad2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bad4:	425b      	negs	r3, r3
 800bad6:	441a      	add	r2, r3
 800bad8:	68fb      	ldr	r3, [r7, #12]
 800bada:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800badc:	68fb      	ldr	r3, [r7, #12]
 800bade:	68da      	ldr	r2, [r3, #12]
 800bae0:	68fb      	ldr	r3, [r7, #12]
 800bae2:	681b      	ldr	r3, [r3, #0]
 800bae4:	429a      	cmp	r2, r3
 800bae6:	d207      	bcs.n	800baf8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800bae8:	68fb      	ldr	r3, [r7, #12]
 800baea:	689a      	ldr	r2, [r3, #8]
 800baec:	68fb      	ldr	r3, [r7, #12]
 800baee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800baf0:	425b      	negs	r3, r3
 800baf2:	441a      	add	r2, r3
 800baf4:	68fb      	ldr	r3, [r7, #12]
 800baf6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	2b02      	cmp	r3, #2
 800bafc:	d105      	bne.n	800bb0a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800bafe:	693b      	ldr	r3, [r7, #16]
 800bb00:	2b00      	cmp	r3, #0
 800bb02:	d002      	beq.n	800bb0a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800bb04:	693b      	ldr	r3, [r7, #16]
 800bb06:	3b01      	subs	r3, #1
 800bb08:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800bb0a:	693b      	ldr	r3, [r7, #16]
 800bb0c:	1c5a      	adds	r2, r3, #1
 800bb0e:	68fb      	ldr	r3, [r7, #12]
 800bb10:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800bb12:	697b      	ldr	r3, [r7, #20]
}
 800bb14:	4618      	mov	r0, r3
 800bb16:	3718      	adds	r7, #24
 800bb18:	46bd      	mov	sp, r7
 800bb1a:	bd80      	pop	{r7, pc}

0800bb1c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800bb1c:	b580      	push	{r7, lr}
 800bb1e:	b082      	sub	sp, #8
 800bb20:	af00      	add	r7, sp, #0
 800bb22:	6078      	str	r0, [r7, #4]
 800bb24:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800bb26:	687b      	ldr	r3, [r7, #4]
 800bb28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bb2a:	2b00      	cmp	r3, #0
 800bb2c:	d018      	beq.n	800bb60 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	68da      	ldr	r2, [r3, #12]
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bb36:	441a      	add	r2, r3
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	68da      	ldr	r2, [r3, #12]
 800bb40:	687b      	ldr	r3, [r7, #4]
 800bb42:	689b      	ldr	r3, [r3, #8]
 800bb44:	429a      	cmp	r2, r3
 800bb46:	d303      	bcc.n	800bb50 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800bb48:	687b      	ldr	r3, [r7, #4]
 800bb4a:	681a      	ldr	r2, [r3, #0]
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	68d9      	ldr	r1, [r3, #12]
 800bb54:	687b      	ldr	r3, [r7, #4]
 800bb56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bb58:	461a      	mov	r2, r3
 800bb5a:	6838      	ldr	r0, [r7, #0]
 800bb5c:	f003 f9dd 	bl	800ef1a <memcpy>
	}
}
 800bb60:	bf00      	nop
 800bb62:	3708      	adds	r7, #8
 800bb64:	46bd      	mov	sp, r7
 800bb66:	bd80      	pop	{r7, pc}

0800bb68 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800bb68:	b580      	push	{r7, lr}
 800bb6a:	b084      	sub	sp, #16
 800bb6c:	af00      	add	r7, sp, #0
 800bb6e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800bb70:	f001 fc9a 	bl	800d4a8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800bb7a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800bb7c:	e011      	b.n	800bba2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800bb7e:	687b      	ldr	r3, [r7, #4]
 800bb80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bb82:	2b00      	cmp	r3, #0
 800bb84:	d012      	beq.n	800bbac <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800bb86:	687b      	ldr	r3, [r7, #4]
 800bb88:	3324      	adds	r3, #36	@ 0x24
 800bb8a:	4618      	mov	r0, r3
 800bb8c:	f000 fd5c 	bl	800c648 <xTaskRemoveFromEventList>
 800bb90:	4603      	mov	r3, r0
 800bb92:	2b00      	cmp	r3, #0
 800bb94:	d001      	beq.n	800bb9a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800bb96:	f000 fe35 	bl	800c804 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800bb9a:	7bfb      	ldrb	r3, [r7, #15]
 800bb9c:	3b01      	subs	r3, #1
 800bb9e:	b2db      	uxtb	r3, r3
 800bba0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800bba2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bba6:	2b00      	cmp	r3, #0
 800bba8:	dce9      	bgt.n	800bb7e <prvUnlockQueue+0x16>
 800bbaa:	e000      	b.n	800bbae <prvUnlockQueue+0x46>
					break;
 800bbac:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800bbae:	687b      	ldr	r3, [r7, #4]
 800bbb0:	22ff      	movs	r2, #255	@ 0xff
 800bbb2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800bbb6:	f001 fca9 	bl	800d50c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800bbba:	f001 fc75 	bl	800d4a8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800bbbe:	687b      	ldr	r3, [r7, #4]
 800bbc0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800bbc4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800bbc6:	e011      	b.n	800bbec <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	691b      	ldr	r3, [r3, #16]
 800bbcc:	2b00      	cmp	r3, #0
 800bbce:	d012      	beq.n	800bbf6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800bbd0:	687b      	ldr	r3, [r7, #4]
 800bbd2:	3310      	adds	r3, #16
 800bbd4:	4618      	mov	r0, r3
 800bbd6:	f000 fd37 	bl	800c648 <xTaskRemoveFromEventList>
 800bbda:	4603      	mov	r3, r0
 800bbdc:	2b00      	cmp	r3, #0
 800bbde:	d001      	beq.n	800bbe4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800bbe0:	f000 fe10 	bl	800c804 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800bbe4:	7bbb      	ldrb	r3, [r7, #14]
 800bbe6:	3b01      	subs	r3, #1
 800bbe8:	b2db      	uxtb	r3, r3
 800bbea:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800bbec:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bbf0:	2b00      	cmp	r3, #0
 800bbf2:	dce9      	bgt.n	800bbc8 <prvUnlockQueue+0x60>
 800bbf4:	e000      	b.n	800bbf8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800bbf6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800bbf8:	687b      	ldr	r3, [r7, #4]
 800bbfa:	22ff      	movs	r2, #255	@ 0xff
 800bbfc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800bc00:	f001 fc84 	bl	800d50c <vPortExitCritical>
}
 800bc04:	bf00      	nop
 800bc06:	3710      	adds	r7, #16
 800bc08:	46bd      	mov	sp, r7
 800bc0a:	bd80      	pop	{r7, pc}

0800bc0c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800bc0c:	b580      	push	{r7, lr}
 800bc0e:	b084      	sub	sp, #16
 800bc10:	af00      	add	r7, sp, #0
 800bc12:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800bc14:	f001 fc48 	bl	800d4a8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800bc18:	687b      	ldr	r3, [r7, #4]
 800bc1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bc1c:	2b00      	cmp	r3, #0
 800bc1e:	d102      	bne.n	800bc26 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800bc20:	2301      	movs	r3, #1
 800bc22:	60fb      	str	r3, [r7, #12]
 800bc24:	e001      	b.n	800bc2a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800bc26:	2300      	movs	r3, #0
 800bc28:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800bc2a:	f001 fc6f 	bl	800d50c <vPortExitCritical>

	return xReturn;
 800bc2e:	68fb      	ldr	r3, [r7, #12]
}
 800bc30:	4618      	mov	r0, r3
 800bc32:	3710      	adds	r7, #16
 800bc34:	46bd      	mov	sp, r7
 800bc36:	bd80      	pop	{r7, pc}

0800bc38 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800bc38:	b580      	push	{r7, lr}
 800bc3a:	b084      	sub	sp, #16
 800bc3c:	af00      	add	r7, sp, #0
 800bc3e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800bc40:	f001 fc32 	bl	800d4a8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800bc48:	687b      	ldr	r3, [r7, #4]
 800bc4a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bc4c:	429a      	cmp	r2, r3
 800bc4e:	d102      	bne.n	800bc56 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800bc50:	2301      	movs	r3, #1
 800bc52:	60fb      	str	r3, [r7, #12]
 800bc54:	e001      	b.n	800bc5a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800bc56:	2300      	movs	r3, #0
 800bc58:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800bc5a:	f001 fc57 	bl	800d50c <vPortExitCritical>

	return xReturn;
 800bc5e:	68fb      	ldr	r3, [r7, #12]
}
 800bc60:	4618      	mov	r0, r3
 800bc62:	3710      	adds	r7, #16
 800bc64:	46bd      	mov	sp, r7
 800bc66:	bd80      	pop	{r7, pc}

0800bc68 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800bc68:	b480      	push	{r7}
 800bc6a:	b085      	sub	sp, #20
 800bc6c:	af00      	add	r7, sp, #0
 800bc6e:	6078      	str	r0, [r7, #4]
 800bc70:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800bc72:	2300      	movs	r3, #0
 800bc74:	60fb      	str	r3, [r7, #12]
 800bc76:	e014      	b.n	800bca2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800bc78:	4a0f      	ldr	r2, [pc, #60]	@ (800bcb8 <vQueueAddToRegistry+0x50>)
 800bc7a:	68fb      	ldr	r3, [r7, #12]
 800bc7c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800bc80:	2b00      	cmp	r3, #0
 800bc82:	d10b      	bne.n	800bc9c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800bc84:	490c      	ldr	r1, [pc, #48]	@ (800bcb8 <vQueueAddToRegistry+0x50>)
 800bc86:	68fb      	ldr	r3, [r7, #12]
 800bc88:	683a      	ldr	r2, [r7, #0]
 800bc8a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800bc8e:	4a0a      	ldr	r2, [pc, #40]	@ (800bcb8 <vQueueAddToRegistry+0x50>)
 800bc90:	68fb      	ldr	r3, [r7, #12]
 800bc92:	00db      	lsls	r3, r3, #3
 800bc94:	4413      	add	r3, r2
 800bc96:	687a      	ldr	r2, [r7, #4]
 800bc98:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800bc9a:	e006      	b.n	800bcaa <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800bc9c:	68fb      	ldr	r3, [r7, #12]
 800bc9e:	3301      	adds	r3, #1
 800bca0:	60fb      	str	r3, [r7, #12]
 800bca2:	68fb      	ldr	r3, [r7, #12]
 800bca4:	2b07      	cmp	r3, #7
 800bca6:	d9e7      	bls.n	800bc78 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800bca8:	bf00      	nop
 800bcaa:	bf00      	nop
 800bcac:	3714      	adds	r7, #20
 800bcae:	46bd      	mov	sp, r7
 800bcb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcb4:	4770      	bx	lr
 800bcb6:	bf00      	nop
 800bcb8:	20001714 	.word	0x20001714

0800bcbc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800bcbc:	b580      	push	{r7, lr}
 800bcbe:	b086      	sub	sp, #24
 800bcc0:	af00      	add	r7, sp, #0
 800bcc2:	60f8      	str	r0, [r7, #12]
 800bcc4:	60b9      	str	r1, [r7, #8]
 800bcc6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800bcc8:	68fb      	ldr	r3, [r7, #12]
 800bcca:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800bccc:	f001 fbec 	bl	800d4a8 <vPortEnterCritical>
 800bcd0:	697b      	ldr	r3, [r7, #20]
 800bcd2:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800bcd6:	b25b      	sxtb	r3, r3
 800bcd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bcdc:	d103      	bne.n	800bce6 <vQueueWaitForMessageRestricted+0x2a>
 800bcde:	697b      	ldr	r3, [r7, #20]
 800bce0:	2200      	movs	r2, #0
 800bce2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800bce6:	697b      	ldr	r3, [r7, #20]
 800bce8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800bcec:	b25b      	sxtb	r3, r3
 800bcee:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bcf2:	d103      	bne.n	800bcfc <vQueueWaitForMessageRestricted+0x40>
 800bcf4:	697b      	ldr	r3, [r7, #20]
 800bcf6:	2200      	movs	r2, #0
 800bcf8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800bcfc:	f001 fc06 	bl	800d50c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800bd00:	697b      	ldr	r3, [r7, #20]
 800bd02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bd04:	2b00      	cmp	r3, #0
 800bd06:	d106      	bne.n	800bd16 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800bd08:	697b      	ldr	r3, [r7, #20]
 800bd0a:	3324      	adds	r3, #36	@ 0x24
 800bd0c:	687a      	ldr	r2, [r7, #4]
 800bd0e:	68b9      	ldr	r1, [r7, #8]
 800bd10:	4618      	mov	r0, r3
 800bd12:	f000 fc6d 	bl	800c5f0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800bd16:	6978      	ldr	r0, [r7, #20]
 800bd18:	f7ff ff26 	bl	800bb68 <prvUnlockQueue>
	}
 800bd1c:	bf00      	nop
 800bd1e:	3718      	adds	r7, #24
 800bd20:	46bd      	mov	sp, r7
 800bd22:	bd80      	pop	{r7, pc}

0800bd24 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800bd24:	b580      	push	{r7, lr}
 800bd26:	b08e      	sub	sp, #56	@ 0x38
 800bd28:	af04      	add	r7, sp, #16
 800bd2a:	60f8      	str	r0, [r7, #12]
 800bd2c:	60b9      	str	r1, [r7, #8]
 800bd2e:	607a      	str	r2, [r7, #4]
 800bd30:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800bd32:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bd34:	2b00      	cmp	r3, #0
 800bd36:	d10b      	bne.n	800bd50 <xTaskCreateStatic+0x2c>
	__asm volatile
 800bd38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bd3c:	f383 8811 	msr	BASEPRI, r3
 800bd40:	f3bf 8f6f 	isb	sy
 800bd44:	f3bf 8f4f 	dsb	sy
 800bd48:	623b      	str	r3, [r7, #32]
}
 800bd4a:	bf00      	nop
 800bd4c:	bf00      	nop
 800bd4e:	e7fd      	b.n	800bd4c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800bd50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bd52:	2b00      	cmp	r3, #0
 800bd54:	d10b      	bne.n	800bd6e <xTaskCreateStatic+0x4a>
	__asm volatile
 800bd56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bd5a:	f383 8811 	msr	BASEPRI, r3
 800bd5e:	f3bf 8f6f 	isb	sy
 800bd62:	f3bf 8f4f 	dsb	sy
 800bd66:	61fb      	str	r3, [r7, #28]
}
 800bd68:	bf00      	nop
 800bd6a:	bf00      	nop
 800bd6c:	e7fd      	b.n	800bd6a <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800bd6e:	23a8      	movs	r3, #168	@ 0xa8
 800bd70:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800bd72:	693b      	ldr	r3, [r7, #16]
 800bd74:	2ba8      	cmp	r3, #168	@ 0xa8
 800bd76:	d00b      	beq.n	800bd90 <xTaskCreateStatic+0x6c>
	__asm volatile
 800bd78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bd7c:	f383 8811 	msr	BASEPRI, r3
 800bd80:	f3bf 8f6f 	isb	sy
 800bd84:	f3bf 8f4f 	dsb	sy
 800bd88:	61bb      	str	r3, [r7, #24]
}
 800bd8a:	bf00      	nop
 800bd8c:	bf00      	nop
 800bd8e:	e7fd      	b.n	800bd8c <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800bd90:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800bd92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bd94:	2b00      	cmp	r3, #0
 800bd96:	d01e      	beq.n	800bdd6 <xTaskCreateStatic+0xb2>
 800bd98:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bd9a:	2b00      	cmp	r3, #0
 800bd9c:	d01b      	beq.n	800bdd6 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800bd9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bda0:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800bda2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bda4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800bda6:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800bda8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bdaa:	2202      	movs	r2, #2
 800bdac:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800bdb0:	2300      	movs	r3, #0
 800bdb2:	9303      	str	r3, [sp, #12]
 800bdb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bdb6:	9302      	str	r3, [sp, #8]
 800bdb8:	f107 0314 	add.w	r3, r7, #20
 800bdbc:	9301      	str	r3, [sp, #4]
 800bdbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bdc0:	9300      	str	r3, [sp, #0]
 800bdc2:	683b      	ldr	r3, [r7, #0]
 800bdc4:	687a      	ldr	r2, [r7, #4]
 800bdc6:	68b9      	ldr	r1, [r7, #8]
 800bdc8:	68f8      	ldr	r0, [r7, #12]
 800bdca:	f000 f851 	bl	800be70 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800bdce:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800bdd0:	f000 f8f6 	bl	800bfc0 <prvAddNewTaskToReadyList>
 800bdd4:	e001      	b.n	800bdda <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800bdd6:	2300      	movs	r3, #0
 800bdd8:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800bdda:	697b      	ldr	r3, [r7, #20]
	}
 800bddc:	4618      	mov	r0, r3
 800bdde:	3728      	adds	r7, #40	@ 0x28
 800bde0:	46bd      	mov	sp, r7
 800bde2:	bd80      	pop	{r7, pc}

0800bde4 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800bde4:	b580      	push	{r7, lr}
 800bde6:	b08c      	sub	sp, #48	@ 0x30
 800bde8:	af04      	add	r7, sp, #16
 800bdea:	60f8      	str	r0, [r7, #12]
 800bdec:	60b9      	str	r1, [r7, #8]
 800bdee:	603b      	str	r3, [r7, #0]
 800bdf0:	4613      	mov	r3, r2
 800bdf2:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800bdf4:	88fb      	ldrh	r3, [r7, #6]
 800bdf6:	009b      	lsls	r3, r3, #2
 800bdf8:	4618      	mov	r0, r3
 800bdfa:	f001 fc77 	bl	800d6ec <pvPortMalloc>
 800bdfe:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800be00:	697b      	ldr	r3, [r7, #20]
 800be02:	2b00      	cmp	r3, #0
 800be04:	d00e      	beq.n	800be24 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800be06:	20a8      	movs	r0, #168	@ 0xa8
 800be08:	f001 fc70 	bl	800d6ec <pvPortMalloc>
 800be0c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800be0e:	69fb      	ldr	r3, [r7, #28]
 800be10:	2b00      	cmp	r3, #0
 800be12:	d003      	beq.n	800be1c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800be14:	69fb      	ldr	r3, [r7, #28]
 800be16:	697a      	ldr	r2, [r7, #20]
 800be18:	631a      	str	r2, [r3, #48]	@ 0x30
 800be1a:	e005      	b.n	800be28 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800be1c:	6978      	ldr	r0, [r7, #20]
 800be1e:	f001 fd33 	bl	800d888 <vPortFree>
 800be22:	e001      	b.n	800be28 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800be24:	2300      	movs	r3, #0
 800be26:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800be28:	69fb      	ldr	r3, [r7, #28]
 800be2a:	2b00      	cmp	r3, #0
 800be2c:	d017      	beq.n	800be5e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800be2e:	69fb      	ldr	r3, [r7, #28]
 800be30:	2200      	movs	r2, #0
 800be32:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800be36:	88fa      	ldrh	r2, [r7, #6]
 800be38:	2300      	movs	r3, #0
 800be3a:	9303      	str	r3, [sp, #12]
 800be3c:	69fb      	ldr	r3, [r7, #28]
 800be3e:	9302      	str	r3, [sp, #8]
 800be40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800be42:	9301      	str	r3, [sp, #4]
 800be44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800be46:	9300      	str	r3, [sp, #0]
 800be48:	683b      	ldr	r3, [r7, #0]
 800be4a:	68b9      	ldr	r1, [r7, #8]
 800be4c:	68f8      	ldr	r0, [r7, #12]
 800be4e:	f000 f80f 	bl	800be70 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800be52:	69f8      	ldr	r0, [r7, #28]
 800be54:	f000 f8b4 	bl	800bfc0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800be58:	2301      	movs	r3, #1
 800be5a:	61bb      	str	r3, [r7, #24]
 800be5c:	e002      	b.n	800be64 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800be5e:	f04f 33ff 	mov.w	r3, #4294967295
 800be62:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800be64:	69bb      	ldr	r3, [r7, #24]
	}
 800be66:	4618      	mov	r0, r3
 800be68:	3720      	adds	r7, #32
 800be6a:	46bd      	mov	sp, r7
 800be6c:	bd80      	pop	{r7, pc}
	...

0800be70 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800be70:	b580      	push	{r7, lr}
 800be72:	b088      	sub	sp, #32
 800be74:	af00      	add	r7, sp, #0
 800be76:	60f8      	str	r0, [r7, #12]
 800be78:	60b9      	str	r1, [r7, #8]
 800be7a:	607a      	str	r2, [r7, #4]
 800be7c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800be7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800be80:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800be82:	687b      	ldr	r3, [r7, #4]
 800be84:	009b      	lsls	r3, r3, #2
 800be86:	461a      	mov	r2, r3
 800be88:	21a5      	movs	r1, #165	@ 0xa5
 800be8a:	f002 ff2b 	bl	800ece4 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800be8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800be90:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800be92:	687b      	ldr	r3, [r7, #4]
 800be94:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800be98:	3b01      	subs	r3, #1
 800be9a:	009b      	lsls	r3, r3, #2
 800be9c:	4413      	add	r3, r2
 800be9e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800bea0:	69bb      	ldr	r3, [r7, #24]
 800bea2:	f023 0307 	bic.w	r3, r3, #7
 800bea6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800bea8:	69bb      	ldr	r3, [r7, #24]
 800beaa:	f003 0307 	and.w	r3, r3, #7
 800beae:	2b00      	cmp	r3, #0
 800beb0:	d00b      	beq.n	800beca <prvInitialiseNewTask+0x5a>
	__asm volatile
 800beb2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800beb6:	f383 8811 	msr	BASEPRI, r3
 800beba:	f3bf 8f6f 	isb	sy
 800bebe:	f3bf 8f4f 	dsb	sy
 800bec2:	617b      	str	r3, [r7, #20]
}
 800bec4:	bf00      	nop
 800bec6:	bf00      	nop
 800bec8:	e7fd      	b.n	800bec6 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800beca:	68bb      	ldr	r3, [r7, #8]
 800becc:	2b00      	cmp	r3, #0
 800bece:	d01f      	beq.n	800bf10 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800bed0:	2300      	movs	r3, #0
 800bed2:	61fb      	str	r3, [r7, #28]
 800bed4:	e012      	b.n	800befc <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800bed6:	68ba      	ldr	r2, [r7, #8]
 800bed8:	69fb      	ldr	r3, [r7, #28]
 800beda:	4413      	add	r3, r2
 800bedc:	7819      	ldrb	r1, [r3, #0]
 800bede:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bee0:	69fb      	ldr	r3, [r7, #28]
 800bee2:	4413      	add	r3, r2
 800bee4:	3334      	adds	r3, #52	@ 0x34
 800bee6:	460a      	mov	r2, r1
 800bee8:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800beea:	68ba      	ldr	r2, [r7, #8]
 800beec:	69fb      	ldr	r3, [r7, #28]
 800beee:	4413      	add	r3, r2
 800bef0:	781b      	ldrb	r3, [r3, #0]
 800bef2:	2b00      	cmp	r3, #0
 800bef4:	d006      	beq.n	800bf04 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800bef6:	69fb      	ldr	r3, [r7, #28]
 800bef8:	3301      	adds	r3, #1
 800befa:	61fb      	str	r3, [r7, #28]
 800befc:	69fb      	ldr	r3, [r7, #28]
 800befe:	2b0f      	cmp	r3, #15
 800bf00:	d9e9      	bls.n	800bed6 <prvInitialiseNewTask+0x66>
 800bf02:	e000      	b.n	800bf06 <prvInitialiseNewTask+0x96>
			{
				break;
 800bf04:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800bf06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bf08:	2200      	movs	r2, #0
 800bf0a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800bf0e:	e003      	b.n	800bf18 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800bf10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bf12:	2200      	movs	r2, #0
 800bf14:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800bf18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bf1a:	2b37      	cmp	r3, #55	@ 0x37
 800bf1c:	d901      	bls.n	800bf22 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800bf1e:	2337      	movs	r3, #55	@ 0x37
 800bf20:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800bf22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bf24:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800bf26:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800bf28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bf2a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800bf2c:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800bf2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bf30:	2200      	movs	r2, #0
 800bf32:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800bf34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bf36:	3304      	adds	r3, #4
 800bf38:	4618      	mov	r0, r3
 800bf3a:	f7ff f929 	bl	800b190 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800bf3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bf40:	3318      	adds	r3, #24
 800bf42:	4618      	mov	r0, r3
 800bf44:	f7ff f924 	bl	800b190 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800bf48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bf4a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bf4c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bf4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bf50:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800bf54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bf56:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800bf58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bf5a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bf5c:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800bf5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bf60:	2200      	movs	r2, #0
 800bf62:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800bf66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bf68:	2200      	movs	r2, #0
 800bf6a:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800bf6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bf70:	3354      	adds	r3, #84	@ 0x54
 800bf72:	224c      	movs	r2, #76	@ 0x4c
 800bf74:	2100      	movs	r1, #0
 800bf76:	4618      	mov	r0, r3
 800bf78:	f002 feb4 	bl	800ece4 <memset>
 800bf7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bf7e:	4a0d      	ldr	r2, [pc, #52]	@ (800bfb4 <prvInitialiseNewTask+0x144>)
 800bf80:	659a      	str	r2, [r3, #88]	@ 0x58
 800bf82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bf84:	4a0c      	ldr	r2, [pc, #48]	@ (800bfb8 <prvInitialiseNewTask+0x148>)
 800bf86:	65da      	str	r2, [r3, #92]	@ 0x5c
 800bf88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bf8a:	4a0c      	ldr	r2, [pc, #48]	@ (800bfbc <prvInitialiseNewTask+0x14c>)
 800bf8c:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800bf8e:	683a      	ldr	r2, [r7, #0]
 800bf90:	68f9      	ldr	r1, [r7, #12]
 800bf92:	69b8      	ldr	r0, [r7, #24]
 800bf94:	f001 f95a 	bl	800d24c <pxPortInitialiseStack>
 800bf98:	4602      	mov	r2, r0
 800bf9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bf9c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800bf9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bfa0:	2b00      	cmp	r3, #0
 800bfa2:	d002      	beq.n	800bfaa <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800bfa4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bfa6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bfa8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800bfaa:	bf00      	nop
 800bfac:	3720      	adds	r7, #32
 800bfae:	46bd      	mov	sp, r7
 800bfb0:	bd80      	pop	{r7, pc}
 800bfb2:	bf00      	nop
 800bfb4:	200059b0 	.word	0x200059b0
 800bfb8:	20005a18 	.word	0x20005a18
 800bfbc:	20005a80 	.word	0x20005a80

0800bfc0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800bfc0:	b580      	push	{r7, lr}
 800bfc2:	b082      	sub	sp, #8
 800bfc4:	af00      	add	r7, sp, #0
 800bfc6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800bfc8:	f001 fa6e 	bl	800d4a8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800bfcc:	4b2d      	ldr	r3, [pc, #180]	@ (800c084 <prvAddNewTaskToReadyList+0xc4>)
 800bfce:	681b      	ldr	r3, [r3, #0]
 800bfd0:	3301      	adds	r3, #1
 800bfd2:	4a2c      	ldr	r2, [pc, #176]	@ (800c084 <prvAddNewTaskToReadyList+0xc4>)
 800bfd4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800bfd6:	4b2c      	ldr	r3, [pc, #176]	@ (800c088 <prvAddNewTaskToReadyList+0xc8>)
 800bfd8:	681b      	ldr	r3, [r3, #0]
 800bfda:	2b00      	cmp	r3, #0
 800bfdc:	d109      	bne.n	800bff2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800bfde:	4a2a      	ldr	r2, [pc, #168]	@ (800c088 <prvAddNewTaskToReadyList+0xc8>)
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800bfe4:	4b27      	ldr	r3, [pc, #156]	@ (800c084 <prvAddNewTaskToReadyList+0xc4>)
 800bfe6:	681b      	ldr	r3, [r3, #0]
 800bfe8:	2b01      	cmp	r3, #1
 800bfea:	d110      	bne.n	800c00e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800bfec:	f000 fc2e 	bl	800c84c <prvInitialiseTaskLists>
 800bff0:	e00d      	b.n	800c00e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800bff2:	4b26      	ldr	r3, [pc, #152]	@ (800c08c <prvAddNewTaskToReadyList+0xcc>)
 800bff4:	681b      	ldr	r3, [r3, #0]
 800bff6:	2b00      	cmp	r3, #0
 800bff8:	d109      	bne.n	800c00e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800bffa:	4b23      	ldr	r3, [pc, #140]	@ (800c088 <prvAddNewTaskToReadyList+0xc8>)
 800bffc:	681b      	ldr	r3, [r3, #0]
 800bffe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c000:	687b      	ldr	r3, [r7, #4]
 800c002:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c004:	429a      	cmp	r2, r3
 800c006:	d802      	bhi.n	800c00e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800c008:	4a1f      	ldr	r2, [pc, #124]	@ (800c088 <prvAddNewTaskToReadyList+0xc8>)
 800c00a:	687b      	ldr	r3, [r7, #4]
 800c00c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800c00e:	4b20      	ldr	r3, [pc, #128]	@ (800c090 <prvAddNewTaskToReadyList+0xd0>)
 800c010:	681b      	ldr	r3, [r3, #0]
 800c012:	3301      	adds	r3, #1
 800c014:	4a1e      	ldr	r2, [pc, #120]	@ (800c090 <prvAddNewTaskToReadyList+0xd0>)
 800c016:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800c018:	4b1d      	ldr	r3, [pc, #116]	@ (800c090 <prvAddNewTaskToReadyList+0xd0>)
 800c01a:	681a      	ldr	r2, [r3, #0]
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800c020:	687b      	ldr	r3, [r7, #4]
 800c022:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c024:	4b1b      	ldr	r3, [pc, #108]	@ (800c094 <prvAddNewTaskToReadyList+0xd4>)
 800c026:	681b      	ldr	r3, [r3, #0]
 800c028:	429a      	cmp	r2, r3
 800c02a:	d903      	bls.n	800c034 <prvAddNewTaskToReadyList+0x74>
 800c02c:	687b      	ldr	r3, [r7, #4]
 800c02e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c030:	4a18      	ldr	r2, [pc, #96]	@ (800c094 <prvAddNewTaskToReadyList+0xd4>)
 800c032:	6013      	str	r3, [r2, #0]
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c038:	4613      	mov	r3, r2
 800c03a:	009b      	lsls	r3, r3, #2
 800c03c:	4413      	add	r3, r2
 800c03e:	009b      	lsls	r3, r3, #2
 800c040:	4a15      	ldr	r2, [pc, #84]	@ (800c098 <prvAddNewTaskToReadyList+0xd8>)
 800c042:	441a      	add	r2, r3
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	3304      	adds	r3, #4
 800c048:	4619      	mov	r1, r3
 800c04a:	4610      	mov	r0, r2
 800c04c:	f7ff f8ad 	bl	800b1aa <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800c050:	f001 fa5c 	bl	800d50c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800c054:	4b0d      	ldr	r3, [pc, #52]	@ (800c08c <prvAddNewTaskToReadyList+0xcc>)
 800c056:	681b      	ldr	r3, [r3, #0]
 800c058:	2b00      	cmp	r3, #0
 800c05a:	d00e      	beq.n	800c07a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800c05c:	4b0a      	ldr	r3, [pc, #40]	@ (800c088 <prvAddNewTaskToReadyList+0xc8>)
 800c05e:	681b      	ldr	r3, [r3, #0]
 800c060:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c062:	687b      	ldr	r3, [r7, #4]
 800c064:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c066:	429a      	cmp	r2, r3
 800c068:	d207      	bcs.n	800c07a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800c06a:	4b0c      	ldr	r3, [pc, #48]	@ (800c09c <prvAddNewTaskToReadyList+0xdc>)
 800c06c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c070:	601a      	str	r2, [r3, #0]
 800c072:	f3bf 8f4f 	dsb	sy
 800c076:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c07a:	bf00      	nop
 800c07c:	3708      	adds	r7, #8
 800c07e:	46bd      	mov	sp, r7
 800c080:	bd80      	pop	{r7, pc}
 800c082:	bf00      	nop
 800c084:	20001c28 	.word	0x20001c28
 800c088:	20001754 	.word	0x20001754
 800c08c:	20001c34 	.word	0x20001c34
 800c090:	20001c44 	.word	0x20001c44
 800c094:	20001c30 	.word	0x20001c30
 800c098:	20001758 	.word	0x20001758
 800c09c:	e000ed04 	.word	0xe000ed04

0800c0a0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800c0a0:	b580      	push	{r7, lr}
 800c0a2:	b084      	sub	sp, #16
 800c0a4:	af00      	add	r7, sp, #0
 800c0a6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800c0a8:	2300      	movs	r3, #0
 800c0aa:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800c0ac:	687b      	ldr	r3, [r7, #4]
 800c0ae:	2b00      	cmp	r3, #0
 800c0b0:	d018      	beq.n	800c0e4 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800c0b2:	4b14      	ldr	r3, [pc, #80]	@ (800c104 <vTaskDelay+0x64>)
 800c0b4:	681b      	ldr	r3, [r3, #0]
 800c0b6:	2b00      	cmp	r3, #0
 800c0b8:	d00b      	beq.n	800c0d2 <vTaskDelay+0x32>
	__asm volatile
 800c0ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c0be:	f383 8811 	msr	BASEPRI, r3
 800c0c2:	f3bf 8f6f 	isb	sy
 800c0c6:	f3bf 8f4f 	dsb	sy
 800c0ca:	60bb      	str	r3, [r7, #8]
}
 800c0cc:	bf00      	nop
 800c0ce:	bf00      	nop
 800c0d0:	e7fd      	b.n	800c0ce <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800c0d2:	f000 f88b 	bl	800c1ec <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800c0d6:	2100      	movs	r1, #0
 800c0d8:	6878      	ldr	r0, [r7, #4]
 800c0da:	f000 fd09 	bl	800caf0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800c0de:	f000 f893 	bl	800c208 <xTaskResumeAll>
 800c0e2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800c0e4:	68fb      	ldr	r3, [r7, #12]
 800c0e6:	2b00      	cmp	r3, #0
 800c0e8:	d107      	bne.n	800c0fa <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800c0ea:	4b07      	ldr	r3, [pc, #28]	@ (800c108 <vTaskDelay+0x68>)
 800c0ec:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c0f0:	601a      	str	r2, [r3, #0]
 800c0f2:	f3bf 8f4f 	dsb	sy
 800c0f6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800c0fa:	bf00      	nop
 800c0fc:	3710      	adds	r7, #16
 800c0fe:	46bd      	mov	sp, r7
 800c100:	bd80      	pop	{r7, pc}
 800c102:	bf00      	nop
 800c104:	20001c50 	.word	0x20001c50
 800c108:	e000ed04 	.word	0xe000ed04

0800c10c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800c10c:	b580      	push	{r7, lr}
 800c10e:	b08a      	sub	sp, #40	@ 0x28
 800c110:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800c112:	2300      	movs	r3, #0
 800c114:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800c116:	2300      	movs	r3, #0
 800c118:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800c11a:	463a      	mov	r2, r7
 800c11c:	1d39      	adds	r1, r7, #4
 800c11e:	f107 0308 	add.w	r3, r7, #8
 800c122:	4618      	mov	r0, r3
 800c124:	f7fe ffe0 	bl	800b0e8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800c128:	6839      	ldr	r1, [r7, #0]
 800c12a:	687b      	ldr	r3, [r7, #4]
 800c12c:	68ba      	ldr	r2, [r7, #8]
 800c12e:	9202      	str	r2, [sp, #8]
 800c130:	9301      	str	r3, [sp, #4]
 800c132:	2300      	movs	r3, #0
 800c134:	9300      	str	r3, [sp, #0]
 800c136:	2300      	movs	r3, #0
 800c138:	460a      	mov	r2, r1
 800c13a:	4924      	ldr	r1, [pc, #144]	@ (800c1cc <vTaskStartScheduler+0xc0>)
 800c13c:	4824      	ldr	r0, [pc, #144]	@ (800c1d0 <vTaskStartScheduler+0xc4>)
 800c13e:	f7ff fdf1 	bl	800bd24 <xTaskCreateStatic>
 800c142:	4603      	mov	r3, r0
 800c144:	4a23      	ldr	r2, [pc, #140]	@ (800c1d4 <vTaskStartScheduler+0xc8>)
 800c146:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800c148:	4b22      	ldr	r3, [pc, #136]	@ (800c1d4 <vTaskStartScheduler+0xc8>)
 800c14a:	681b      	ldr	r3, [r3, #0]
 800c14c:	2b00      	cmp	r3, #0
 800c14e:	d002      	beq.n	800c156 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800c150:	2301      	movs	r3, #1
 800c152:	617b      	str	r3, [r7, #20]
 800c154:	e001      	b.n	800c15a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800c156:	2300      	movs	r3, #0
 800c158:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800c15a:	697b      	ldr	r3, [r7, #20]
 800c15c:	2b01      	cmp	r3, #1
 800c15e:	d102      	bne.n	800c166 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800c160:	f000 fd1a 	bl	800cb98 <xTimerCreateTimerTask>
 800c164:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800c166:	697b      	ldr	r3, [r7, #20]
 800c168:	2b01      	cmp	r3, #1
 800c16a:	d11b      	bne.n	800c1a4 <vTaskStartScheduler+0x98>
	__asm volatile
 800c16c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c170:	f383 8811 	msr	BASEPRI, r3
 800c174:	f3bf 8f6f 	isb	sy
 800c178:	f3bf 8f4f 	dsb	sy
 800c17c:	613b      	str	r3, [r7, #16]
}
 800c17e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800c180:	4b15      	ldr	r3, [pc, #84]	@ (800c1d8 <vTaskStartScheduler+0xcc>)
 800c182:	681b      	ldr	r3, [r3, #0]
 800c184:	3354      	adds	r3, #84	@ 0x54
 800c186:	4a15      	ldr	r2, [pc, #84]	@ (800c1dc <vTaskStartScheduler+0xd0>)
 800c188:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800c18a:	4b15      	ldr	r3, [pc, #84]	@ (800c1e0 <vTaskStartScheduler+0xd4>)
 800c18c:	f04f 32ff 	mov.w	r2, #4294967295
 800c190:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800c192:	4b14      	ldr	r3, [pc, #80]	@ (800c1e4 <vTaskStartScheduler+0xd8>)
 800c194:	2201      	movs	r2, #1
 800c196:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800c198:	4b13      	ldr	r3, [pc, #76]	@ (800c1e8 <vTaskStartScheduler+0xdc>)
 800c19a:	2200      	movs	r2, #0
 800c19c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800c19e:	f001 f8df 	bl	800d360 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800c1a2:	e00f      	b.n	800c1c4 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800c1a4:	697b      	ldr	r3, [r7, #20]
 800c1a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c1aa:	d10b      	bne.n	800c1c4 <vTaskStartScheduler+0xb8>
	__asm volatile
 800c1ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c1b0:	f383 8811 	msr	BASEPRI, r3
 800c1b4:	f3bf 8f6f 	isb	sy
 800c1b8:	f3bf 8f4f 	dsb	sy
 800c1bc:	60fb      	str	r3, [r7, #12]
}
 800c1be:	bf00      	nop
 800c1c0:	bf00      	nop
 800c1c2:	e7fd      	b.n	800c1c0 <vTaskStartScheduler+0xb4>
}
 800c1c4:	bf00      	nop
 800c1c6:	3718      	adds	r7, #24
 800c1c8:	46bd      	mov	sp, r7
 800c1ca:	bd80      	pop	{r7, pc}
 800c1cc:	08011190 	.word	0x08011190
 800c1d0:	0800c81d 	.word	0x0800c81d
 800c1d4:	20001c4c 	.word	0x20001c4c
 800c1d8:	20001754 	.word	0x20001754
 800c1dc:	20000264 	.word	0x20000264
 800c1e0:	20001c48 	.word	0x20001c48
 800c1e4:	20001c34 	.word	0x20001c34
 800c1e8:	20001c2c 	.word	0x20001c2c

0800c1ec <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800c1ec:	b480      	push	{r7}
 800c1ee:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800c1f0:	4b04      	ldr	r3, [pc, #16]	@ (800c204 <vTaskSuspendAll+0x18>)
 800c1f2:	681b      	ldr	r3, [r3, #0]
 800c1f4:	3301      	adds	r3, #1
 800c1f6:	4a03      	ldr	r2, [pc, #12]	@ (800c204 <vTaskSuspendAll+0x18>)
 800c1f8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800c1fa:	bf00      	nop
 800c1fc:	46bd      	mov	sp, r7
 800c1fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c202:	4770      	bx	lr
 800c204:	20001c50 	.word	0x20001c50

0800c208 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800c208:	b580      	push	{r7, lr}
 800c20a:	b084      	sub	sp, #16
 800c20c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800c20e:	2300      	movs	r3, #0
 800c210:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800c212:	2300      	movs	r3, #0
 800c214:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800c216:	4b42      	ldr	r3, [pc, #264]	@ (800c320 <xTaskResumeAll+0x118>)
 800c218:	681b      	ldr	r3, [r3, #0]
 800c21a:	2b00      	cmp	r3, #0
 800c21c:	d10b      	bne.n	800c236 <xTaskResumeAll+0x2e>
	__asm volatile
 800c21e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c222:	f383 8811 	msr	BASEPRI, r3
 800c226:	f3bf 8f6f 	isb	sy
 800c22a:	f3bf 8f4f 	dsb	sy
 800c22e:	603b      	str	r3, [r7, #0]
}
 800c230:	bf00      	nop
 800c232:	bf00      	nop
 800c234:	e7fd      	b.n	800c232 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800c236:	f001 f937 	bl	800d4a8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800c23a:	4b39      	ldr	r3, [pc, #228]	@ (800c320 <xTaskResumeAll+0x118>)
 800c23c:	681b      	ldr	r3, [r3, #0]
 800c23e:	3b01      	subs	r3, #1
 800c240:	4a37      	ldr	r2, [pc, #220]	@ (800c320 <xTaskResumeAll+0x118>)
 800c242:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c244:	4b36      	ldr	r3, [pc, #216]	@ (800c320 <xTaskResumeAll+0x118>)
 800c246:	681b      	ldr	r3, [r3, #0]
 800c248:	2b00      	cmp	r3, #0
 800c24a:	d162      	bne.n	800c312 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800c24c:	4b35      	ldr	r3, [pc, #212]	@ (800c324 <xTaskResumeAll+0x11c>)
 800c24e:	681b      	ldr	r3, [r3, #0]
 800c250:	2b00      	cmp	r3, #0
 800c252:	d05e      	beq.n	800c312 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c254:	e02f      	b.n	800c2b6 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c256:	4b34      	ldr	r3, [pc, #208]	@ (800c328 <xTaskResumeAll+0x120>)
 800c258:	68db      	ldr	r3, [r3, #12]
 800c25a:	68db      	ldr	r3, [r3, #12]
 800c25c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c25e:	68fb      	ldr	r3, [r7, #12]
 800c260:	3318      	adds	r3, #24
 800c262:	4618      	mov	r0, r3
 800c264:	f7fe fffe 	bl	800b264 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c268:	68fb      	ldr	r3, [r7, #12]
 800c26a:	3304      	adds	r3, #4
 800c26c:	4618      	mov	r0, r3
 800c26e:	f7fe fff9 	bl	800b264 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800c272:	68fb      	ldr	r3, [r7, #12]
 800c274:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c276:	4b2d      	ldr	r3, [pc, #180]	@ (800c32c <xTaskResumeAll+0x124>)
 800c278:	681b      	ldr	r3, [r3, #0]
 800c27a:	429a      	cmp	r2, r3
 800c27c:	d903      	bls.n	800c286 <xTaskResumeAll+0x7e>
 800c27e:	68fb      	ldr	r3, [r7, #12]
 800c280:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c282:	4a2a      	ldr	r2, [pc, #168]	@ (800c32c <xTaskResumeAll+0x124>)
 800c284:	6013      	str	r3, [r2, #0]
 800c286:	68fb      	ldr	r3, [r7, #12]
 800c288:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c28a:	4613      	mov	r3, r2
 800c28c:	009b      	lsls	r3, r3, #2
 800c28e:	4413      	add	r3, r2
 800c290:	009b      	lsls	r3, r3, #2
 800c292:	4a27      	ldr	r2, [pc, #156]	@ (800c330 <xTaskResumeAll+0x128>)
 800c294:	441a      	add	r2, r3
 800c296:	68fb      	ldr	r3, [r7, #12]
 800c298:	3304      	adds	r3, #4
 800c29a:	4619      	mov	r1, r3
 800c29c:	4610      	mov	r0, r2
 800c29e:	f7fe ff84 	bl	800b1aa <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c2a2:	68fb      	ldr	r3, [r7, #12]
 800c2a4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c2a6:	4b23      	ldr	r3, [pc, #140]	@ (800c334 <xTaskResumeAll+0x12c>)
 800c2a8:	681b      	ldr	r3, [r3, #0]
 800c2aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c2ac:	429a      	cmp	r2, r3
 800c2ae:	d302      	bcc.n	800c2b6 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800c2b0:	4b21      	ldr	r3, [pc, #132]	@ (800c338 <xTaskResumeAll+0x130>)
 800c2b2:	2201      	movs	r2, #1
 800c2b4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c2b6:	4b1c      	ldr	r3, [pc, #112]	@ (800c328 <xTaskResumeAll+0x120>)
 800c2b8:	681b      	ldr	r3, [r3, #0]
 800c2ba:	2b00      	cmp	r3, #0
 800c2bc:	d1cb      	bne.n	800c256 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800c2be:	68fb      	ldr	r3, [r7, #12]
 800c2c0:	2b00      	cmp	r3, #0
 800c2c2:	d001      	beq.n	800c2c8 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800c2c4:	f000 fb66 	bl	800c994 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800c2c8:	4b1c      	ldr	r3, [pc, #112]	@ (800c33c <xTaskResumeAll+0x134>)
 800c2ca:	681b      	ldr	r3, [r3, #0]
 800c2cc:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800c2ce:	687b      	ldr	r3, [r7, #4]
 800c2d0:	2b00      	cmp	r3, #0
 800c2d2:	d010      	beq.n	800c2f6 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800c2d4:	f000 f846 	bl	800c364 <xTaskIncrementTick>
 800c2d8:	4603      	mov	r3, r0
 800c2da:	2b00      	cmp	r3, #0
 800c2dc:	d002      	beq.n	800c2e4 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800c2de:	4b16      	ldr	r3, [pc, #88]	@ (800c338 <xTaskResumeAll+0x130>)
 800c2e0:	2201      	movs	r2, #1
 800c2e2:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800c2e4:	687b      	ldr	r3, [r7, #4]
 800c2e6:	3b01      	subs	r3, #1
 800c2e8:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800c2ea:	687b      	ldr	r3, [r7, #4]
 800c2ec:	2b00      	cmp	r3, #0
 800c2ee:	d1f1      	bne.n	800c2d4 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800c2f0:	4b12      	ldr	r3, [pc, #72]	@ (800c33c <xTaskResumeAll+0x134>)
 800c2f2:	2200      	movs	r2, #0
 800c2f4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800c2f6:	4b10      	ldr	r3, [pc, #64]	@ (800c338 <xTaskResumeAll+0x130>)
 800c2f8:	681b      	ldr	r3, [r3, #0]
 800c2fa:	2b00      	cmp	r3, #0
 800c2fc:	d009      	beq.n	800c312 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800c2fe:	2301      	movs	r3, #1
 800c300:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800c302:	4b0f      	ldr	r3, [pc, #60]	@ (800c340 <xTaskResumeAll+0x138>)
 800c304:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c308:	601a      	str	r2, [r3, #0]
 800c30a:	f3bf 8f4f 	dsb	sy
 800c30e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c312:	f001 f8fb 	bl	800d50c <vPortExitCritical>

	return xAlreadyYielded;
 800c316:	68bb      	ldr	r3, [r7, #8]
}
 800c318:	4618      	mov	r0, r3
 800c31a:	3710      	adds	r7, #16
 800c31c:	46bd      	mov	sp, r7
 800c31e:	bd80      	pop	{r7, pc}
 800c320:	20001c50 	.word	0x20001c50
 800c324:	20001c28 	.word	0x20001c28
 800c328:	20001be8 	.word	0x20001be8
 800c32c:	20001c30 	.word	0x20001c30
 800c330:	20001758 	.word	0x20001758
 800c334:	20001754 	.word	0x20001754
 800c338:	20001c3c 	.word	0x20001c3c
 800c33c:	20001c38 	.word	0x20001c38
 800c340:	e000ed04 	.word	0xe000ed04

0800c344 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800c344:	b480      	push	{r7}
 800c346:	b083      	sub	sp, #12
 800c348:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800c34a:	4b05      	ldr	r3, [pc, #20]	@ (800c360 <xTaskGetTickCount+0x1c>)
 800c34c:	681b      	ldr	r3, [r3, #0]
 800c34e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800c350:	687b      	ldr	r3, [r7, #4]
}
 800c352:	4618      	mov	r0, r3
 800c354:	370c      	adds	r7, #12
 800c356:	46bd      	mov	sp, r7
 800c358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c35c:	4770      	bx	lr
 800c35e:	bf00      	nop
 800c360:	20001c2c 	.word	0x20001c2c

0800c364 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800c364:	b580      	push	{r7, lr}
 800c366:	b086      	sub	sp, #24
 800c368:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800c36a:	2300      	movs	r3, #0
 800c36c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c36e:	4b4f      	ldr	r3, [pc, #316]	@ (800c4ac <xTaskIncrementTick+0x148>)
 800c370:	681b      	ldr	r3, [r3, #0]
 800c372:	2b00      	cmp	r3, #0
 800c374:	f040 8090 	bne.w	800c498 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800c378:	4b4d      	ldr	r3, [pc, #308]	@ (800c4b0 <xTaskIncrementTick+0x14c>)
 800c37a:	681b      	ldr	r3, [r3, #0]
 800c37c:	3301      	adds	r3, #1
 800c37e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800c380:	4a4b      	ldr	r2, [pc, #300]	@ (800c4b0 <xTaskIncrementTick+0x14c>)
 800c382:	693b      	ldr	r3, [r7, #16]
 800c384:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800c386:	693b      	ldr	r3, [r7, #16]
 800c388:	2b00      	cmp	r3, #0
 800c38a:	d121      	bne.n	800c3d0 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800c38c:	4b49      	ldr	r3, [pc, #292]	@ (800c4b4 <xTaskIncrementTick+0x150>)
 800c38e:	681b      	ldr	r3, [r3, #0]
 800c390:	681b      	ldr	r3, [r3, #0]
 800c392:	2b00      	cmp	r3, #0
 800c394:	d00b      	beq.n	800c3ae <xTaskIncrementTick+0x4a>
	__asm volatile
 800c396:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c39a:	f383 8811 	msr	BASEPRI, r3
 800c39e:	f3bf 8f6f 	isb	sy
 800c3a2:	f3bf 8f4f 	dsb	sy
 800c3a6:	603b      	str	r3, [r7, #0]
}
 800c3a8:	bf00      	nop
 800c3aa:	bf00      	nop
 800c3ac:	e7fd      	b.n	800c3aa <xTaskIncrementTick+0x46>
 800c3ae:	4b41      	ldr	r3, [pc, #260]	@ (800c4b4 <xTaskIncrementTick+0x150>)
 800c3b0:	681b      	ldr	r3, [r3, #0]
 800c3b2:	60fb      	str	r3, [r7, #12]
 800c3b4:	4b40      	ldr	r3, [pc, #256]	@ (800c4b8 <xTaskIncrementTick+0x154>)
 800c3b6:	681b      	ldr	r3, [r3, #0]
 800c3b8:	4a3e      	ldr	r2, [pc, #248]	@ (800c4b4 <xTaskIncrementTick+0x150>)
 800c3ba:	6013      	str	r3, [r2, #0]
 800c3bc:	4a3e      	ldr	r2, [pc, #248]	@ (800c4b8 <xTaskIncrementTick+0x154>)
 800c3be:	68fb      	ldr	r3, [r7, #12]
 800c3c0:	6013      	str	r3, [r2, #0]
 800c3c2:	4b3e      	ldr	r3, [pc, #248]	@ (800c4bc <xTaskIncrementTick+0x158>)
 800c3c4:	681b      	ldr	r3, [r3, #0]
 800c3c6:	3301      	adds	r3, #1
 800c3c8:	4a3c      	ldr	r2, [pc, #240]	@ (800c4bc <xTaskIncrementTick+0x158>)
 800c3ca:	6013      	str	r3, [r2, #0]
 800c3cc:	f000 fae2 	bl	800c994 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800c3d0:	4b3b      	ldr	r3, [pc, #236]	@ (800c4c0 <xTaskIncrementTick+0x15c>)
 800c3d2:	681b      	ldr	r3, [r3, #0]
 800c3d4:	693a      	ldr	r2, [r7, #16]
 800c3d6:	429a      	cmp	r2, r3
 800c3d8:	d349      	bcc.n	800c46e <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c3da:	4b36      	ldr	r3, [pc, #216]	@ (800c4b4 <xTaskIncrementTick+0x150>)
 800c3dc:	681b      	ldr	r3, [r3, #0]
 800c3de:	681b      	ldr	r3, [r3, #0]
 800c3e0:	2b00      	cmp	r3, #0
 800c3e2:	d104      	bne.n	800c3ee <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c3e4:	4b36      	ldr	r3, [pc, #216]	@ (800c4c0 <xTaskIncrementTick+0x15c>)
 800c3e6:	f04f 32ff 	mov.w	r2, #4294967295
 800c3ea:	601a      	str	r2, [r3, #0]
					break;
 800c3ec:	e03f      	b.n	800c46e <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c3ee:	4b31      	ldr	r3, [pc, #196]	@ (800c4b4 <xTaskIncrementTick+0x150>)
 800c3f0:	681b      	ldr	r3, [r3, #0]
 800c3f2:	68db      	ldr	r3, [r3, #12]
 800c3f4:	68db      	ldr	r3, [r3, #12]
 800c3f6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800c3f8:	68bb      	ldr	r3, [r7, #8]
 800c3fa:	685b      	ldr	r3, [r3, #4]
 800c3fc:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800c3fe:	693a      	ldr	r2, [r7, #16]
 800c400:	687b      	ldr	r3, [r7, #4]
 800c402:	429a      	cmp	r2, r3
 800c404:	d203      	bcs.n	800c40e <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800c406:	4a2e      	ldr	r2, [pc, #184]	@ (800c4c0 <xTaskIncrementTick+0x15c>)
 800c408:	687b      	ldr	r3, [r7, #4]
 800c40a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800c40c:	e02f      	b.n	800c46e <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c40e:	68bb      	ldr	r3, [r7, #8]
 800c410:	3304      	adds	r3, #4
 800c412:	4618      	mov	r0, r3
 800c414:	f7fe ff26 	bl	800b264 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800c418:	68bb      	ldr	r3, [r7, #8]
 800c41a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c41c:	2b00      	cmp	r3, #0
 800c41e:	d004      	beq.n	800c42a <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c420:	68bb      	ldr	r3, [r7, #8]
 800c422:	3318      	adds	r3, #24
 800c424:	4618      	mov	r0, r3
 800c426:	f7fe ff1d 	bl	800b264 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800c42a:	68bb      	ldr	r3, [r7, #8]
 800c42c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c42e:	4b25      	ldr	r3, [pc, #148]	@ (800c4c4 <xTaskIncrementTick+0x160>)
 800c430:	681b      	ldr	r3, [r3, #0]
 800c432:	429a      	cmp	r2, r3
 800c434:	d903      	bls.n	800c43e <xTaskIncrementTick+0xda>
 800c436:	68bb      	ldr	r3, [r7, #8]
 800c438:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c43a:	4a22      	ldr	r2, [pc, #136]	@ (800c4c4 <xTaskIncrementTick+0x160>)
 800c43c:	6013      	str	r3, [r2, #0]
 800c43e:	68bb      	ldr	r3, [r7, #8]
 800c440:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c442:	4613      	mov	r3, r2
 800c444:	009b      	lsls	r3, r3, #2
 800c446:	4413      	add	r3, r2
 800c448:	009b      	lsls	r3, r3, #2
 800c44a:	4a1f      	ldr	r2, [pc, #124]	@ (800c4c8 <xTaskIncrementTick+0x164>)
 800c44c:	441a      	add	r2, r3
 800c44e:	68bb      	ldr	r3, [r7, #8]
 800c450:	3304      	adds	r3, #4
 800c452:	4619      	mov	r1, r3
 800c454:	4610      	mov	r0, r2
 800c456:	f7fe fea8 	bl	800b1aa <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c45a:	68bb      	ldr	r3, [r7, #8]
 800c45c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c45e:	4b1b      	ldr	r3, [pc, #108]	@ (800c4cc <xTaskIncrementTick+0x168>)
 800c460:	681b      	ldr	r3, [r3, #0]
 800c462:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c464:	429a      	cmp	r2, r3
 800c466:	d3b8      	bcc.n	800c3da <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800c468:	2301      	movs	r3, #1
 800c46a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c46c:	e7b5      	b.n	800c3da <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800c46e:	4b17      	ldr	r3, [pc, #92]	@ (800c4cc <xTaskIncrementTick+0x168>)
 800c470:	681b      	ldr	r3, [r3, #0]
 800c472:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c474:	4914      	ldr	r1, [pc, #80]	@ (800c4c8 <xTaskIncrementTick+0x164>)
 800c476:	4613      	mov	r3, r2
 800c478:	009b      	lsls	r3, r3, #2
 800c47a:	4413      	add	r3, r2
 800c47c:	009b      	lsls	r3, r3, #2
 800c47e:	440b      	add	r3, r1
 800c480:	681b      	ldr	r3, [r3, #0]
 800c482:	2b01      	cmp	r3, #1
 800c484:	d901      	bls.n	800c48a <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800c486:	2301      	movs	r3, #1
 800c488:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800c48a:	4b11      	ldr	r3, [pc, #68]	@ (800c4d0 <xTaskIncrementTick+0x16c>)
 800c48c:	681b      	ldr	r3, [r3, #0]
 800c48e:	2b00      	cmp	r3, #0
 800c490:	d007      	beq.n	800c4a2 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800c492:	2301      	movs	r3, #1
 800c494:	617b      	str	r3, [r7, #20]
 800c496:	e004      	b.n	800c4a2 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800c498:	4b0e      	ldr	r3, [pc, #56]	@ (800c4d4 <xTaskIncrementTick+0x170>)
 800c49a:	681b      	ldr	r3, [r3, #0]
 800c49c:	3301      	adds	r3, #1
 800c49e:	4a0d      	ldr	r2, [pc, #52]	@ (800c4d4 <xTaskIncrementTick+0x170>)
 800c4a0:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800c4a2:	697b      	ldr	r3, [r7, #20]
}
 800c4a4:	4618      	mov	r0, r3
 800c4a6:	3718      	adds	r7, #24
 800c4a8:	46bd      	mov	sp, r7
 800c4aa:	bd80      	pop	{r7, pc}
 800c4ac:	20001c50 	.word	0x20001c50
 800c4b0:	20001c2c 	.word	0x20001c2c
 800c4b4:	20001be0 	.word	0x20001be0
 800c4b8:	20001be4 	.word	0x20001be4
 800c4bc:	20001c40 	.word	0x20001c40
 800c4c0:	20001c48 	.word	0x20001c48
 800c4c4:	20001c30 	.word	0x20001c30
 800c4c8:	20001758 	.word	0x20001758
 800c4cc:	20001754 	.word	0x20001754
 800c4d0:	20001c3c 	.word	0x20001c3c
 800c4d4:	20001c38 	.word	0x20001c38

0800c4d8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800c4d8:	b480      	push	{r7}
 800c4da:	b085      	sub	sp, #20
 800c4dc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800c4de:	4b2b      	ldr	r3, [pc, #172]	@ (800c58c <vTaskSwitchContext+0xb4>)
 800c4e0:	681b      	ldr	r3, [r3, #0]
 800c4e2:	2b00      	cmp	r3, #0
 800c4e4:	d003      	beq.n	800c4ee <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800c4e6:	4b2a      	ldr	r3, [pc, #168]	@ (800c590 <vTaskSwitchContext+0xb8>)
 800c4e8:	2201      	movs	r2, #1
 800c4ea:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800c4ec:	e047      	b.n	800c57e <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 800c4ee:	4b28      	ldr	r3, [pc, #160]	@ (800c590 <vTaskSwitchContext+0xb8>)
 800c4f0:	2200      	movs	r2, #0
 800c4f2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c4f4:	4b27      	ldr	r3, [pc, #156]	@ (800c594 <vTaskSwitchContext+0xbc>)
 800c4f6:	681b      	ldr	r3, [r3, #0]
 800c4f8:	60fb      	str	r3, [r7, #12]
 800c4fa:	e011      	b.n	800c520 <vTaskSwitchContext+0x48>
 800c4fc:	68fb      	ldr	r3, [r7, #12]
 800c4fe:	2b00      	cmp	r3, #0
 800c500:	d10b      	bne.n	800c51a <vTaskSwitchContext+0x42>
	__asm volatile
 800c502:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c506:	f383 8811 	msr	BASEPRI, r3
 800c50a:	f3bf 8f6f 	isb	sy
 800c50e:	f3bf 8f4f 	dsb	sy
 800c512:	607b      	str	r3, [r7, #4]
}
 800c514:	bf00      	nop
 800c516:	bf00      	nop
 800c518:	e7fd      	b.n	800c516 <vTaskSwitchContext+0x3e>
 800c51a:	68fb      	ldr	r3, [r7, #12]
 800c51c:	3b01      	subs	r3, #1
 800c51e:	60fb      	str	r3, [r7, #12]
 800c520:	491d      	ldr	r1, [pc, #116]	@ (800c598 <vTaskSwitchContext+0xc0>)
 800c522:	68fa      	ldr	r2, [r7, #12]
 800c524:	4613      	mov	r3, r2
 800c526:	009b      	lsls	r3, r3, #2
 800c528:	4413      	add	r3, r2
 800c52a:	009b      	lsls	r3, r3, #2
 800c52c:	440b      	add	r3, r1
 800c52e:	681b      	ldr	r3, [r3, #0]
 800c530:	2b00      	cmp	r3, #0
 800c532:	d0e3      	beq.n	800c4fc <vTaskSwitchContext+0x24>
 800c534:	68fa      	ldr	r2, [r7, #12]
 800c536:	4613      	mov	r3, r2
 800c538:	009b      	lsls	r3, r3, #2
 800c53a:	4413      	add	r3, r2
 800c53c:	009b      	lsls	r3, r3, #2
 800c53e:	4a16      	ldr	r2, [pc, #88]	@ (800c598 <vTaskSwitchContext+0xc0>)
 800c540:	4413      	add	r3, r2
 800c542:	60bb      	str	r3, [r7, #8]
 800c544:	68bb      	ldr	r3, [r7, #8]
 800c546:	685b      	ldr	r3, [r3, #4]
 800c548:	685a      	ldr	r2, [r3, #4]
 800c54a:	68bb      	ldr	r3, [r7, #8]
 800c54c:	605a      	str	r2, [r3, #4]
 800c54e:	68bb      	ldr	r3, [r7, #8]
 800c550:	685a      	ldr	r2, [r3, #4]
 800c552:	68bb      	ldr	r3, [r7, #8]
 800c554:	3308      	adds	r3, #8
 800c556:	429a      	cmp	r2, r3
 800c558:	d104      	bne.n	800c564 <vTaskSwitchContext+0x8c>
 800c55a:	68bb      	ldr	r3, [r7, #8]
 800c55c:	685b      	ldr	r3, [r3, #4]
 800c55e:	685a      	ldr	r2, [r3, #4]
 800c560:	68bb      	ldr	r3, [r7, #8]
 800c562:	605a      	str	r2, [r3, #4]
 800c564:	68bb      	ldr	r3, [r7, #8]
 800c566:	685b      	ldr	r3, [r3, #4]
 800c568:	68db      	ldr	r3, [r3, #12]
 800c56a:	4a0c      	ldr	r2, [pc, #48]	@ (800c59c <vTaskSwitchContext+0xc4>)
 800c56c:	6013      	str	r3, [r2, #0]
 800c56e:	4a09      	ldr	r2, [pc, #36]	@ (800c594 <vTaskSwitchContext+0xbc>)
 800c570:	68fb      	ldr	r3, [r7, #12]
 800c572:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800c574:	4b09      	ldr	r3, [pc, #36]	@ (800c59c <vTaskSwitchContext+0xc4>)
 800c576:	681b      	ldr	r3, [r3, #0]
 800c578:	3354      	adds	r3, #84	@ 0x54
 800c57a:	4a09      	ldr	r2, [pc, #36]	@ (800c5a0 <vTaskSwitchContext+0xc8>)
 800c57c:	6013      	str	r3, [r2, #0]
}
 800c57e:	bf00      	nop
 800c580:	3714      	adds	r7, #20
 800c582:	46bd      	mov	sp, r7
 800c584:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c588:	4770      	bx	lr
 800c58a:	bf00      	nop
 800c58c:	20001c50 	.word	0x20001c50
 800c590:	20001c3c 	.word	0x20001c3c
 800c594:	20001c30 	.word	0x20001c30
 800c598:	20001758 	.word	0x20001758
 800c59c:	20001754 	.word	0x20001754
 800c5a0:	20000264 	.word	0x20000264

0800c5a4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800c5a4:	b580      	push	{r7, lr}
 800c5a6:	b084      	sub	sp, #16
 800c5a8:	af00      	add	r7, sp, #0
 800c5aa:	6078      	str	r0, [r7, #4]
 800c5ac:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800c5ae:	687b      	ldr	r3, [r7, #4]
 800c5b0:	2b00      	cmp	r3, #0
 800c5b2:	d10b      	bne.n	800c5cc <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800c5b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c5b8:	f383 8811 	msr	BASEPRI, r3
 800c5bc:	f3bf 8f6f 	isb	sy
 800c5c0:	f3bf 8f4f 	dsb	sy
 800c5c4:	60fb      	str	r3, [r7, #12]
}
 800c5c6:	bf00      	nop
 800c5c8:	bf00      	nop
 800c5ca:	e7fd      	b.n	800c5c8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800c5cc:	4b07      	ldr	r3, [pc, #28]	@ (800c5ec <vTaskPlaceOnEventList+0x48>)
 800c5ce:	681b      	ldr	r3, [r3, #0]
 800c5d0:	3318      	adds	r3, #24
 800c5d2:	4619      	mov	r1, r3
 800c5d4:	6878      	ldr	r0, [r7, #4]
 800c5d6:	f7fe fe0c 	bl	800b1f2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800c5da:	2101      	movs	r1, #1
 800c5dc:	6838      	ldr	r0, [r7, #0]
 800c5de:	f000 fa87 	bl	800caf0 <prvAddCurrentTaskToDelayedList>
}
 800c5e2:	bf00      	nop
 800c5e4:	3710      	adds	r7, #16
 800c5e6:	46bd      	mov	sp, r7
 800c5e8:	bd80      	pop	{r7, pc}
 800c5ea:	bf00      	nop
 800c5ec:	20001754 	.word	0x20001754

0800c5f0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800c5f0:	b580      	push	{r7, lr}
 800c5f2:	b086      	sub	sp, #24
 800c5f4:	af00      	add	r7, sp, #0
 800c5f6:	60f8      	str	r0, [r7, #12]
 800c5f8:	60b9      	str	r1, [r7, #8]
 800c5fa:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800c5fc:	68fb      	ldr	r3, [r7, #12]
 800c5fe:	2b00      	cmp	r3, #0
 800c600:	d10b      	bne.n	800c61a <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800c602:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c606:	f383 8811 	msr	BASEPRI, r3
 800c60a:	f3bf 8f6f 	isb	sy
 800c60e:	f3bf 8f4f 	dsb	sy
 800c612:	617b      	str	r3, [r7, #20]
}
 800c614:	bf00      	nop
 800c616:	bf00      	nop
 800c618:	e7fd      	b.n	800c616 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800c61a:	4b0a      	ldr	r3, [pc, #40]	@ (800c644 <vTaskPlaceOnEventListRestricted+0x54>)
 800c61c:	681b      	ldr	r3, [r3, #0]
 800c61e:	3318      	adds	r3, #24
 800c620:	4619      	mov	r1, r3
 800c622:	68f8      	ldr	r0, [r7, #12]
 800c624:	f7fe fdc1 	bl	800b1aa <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800c628:	687b      	ldr	r3, [r7, #4]
 800c62a:	2b00      	cmp	r3, #0
 800c62c:	d002      	beq.n	800c634 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800c62e:	f04f 33ff 	mov.w	r3, #4294967295
 800c632:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800c634:	6879      	ldr	r1, [r7, #4]
 800c636:	68b8      	ldr	r0, [r7, #8]
 800c638:	f000 fa5a 	bl	800caf0 <prvAddCurrentTaskToDelayedList>
	}
 800c63c:	bf00      	nop
 800c63e:	3718      	adds	r7, #24
 800c640:	46bd      	mov	sp, r7
 800c642:	bd80      	pop	{r7, pc}
 800c644:	20001754 	.word	0x20001754

0800c648 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800c648:	b580      	push	{r7, lr}
 800c64a:	b086      	sub	sp, #24
 800c64c:	af00      	add	r7, sp, #0
 800c64e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c650:	687b      	ldr	r3, [r7, #4]
 800c652:	68db      	ldr	r3, [r3, #12]
 800c654:	68db      	ldr	r3, [r3, #12]
 800c656:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800c658:	693b      	ldr	r3, [r7, #16]
 800c65a:	2b00      	cmp	r3, #0
 800c65c:	d10b      	bne.n	800c676 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800c65e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c662:	f383 8811 	msr	BASEPRI, r3
 800c666:	f3bf 8f6f 	isb	sy
 800c66a:	f3bf 8f4f 	dsb	sy
 800c66e:	60fb      	str	r3, [r7, #12]
}
 800c670:	bf00      	nop
 800c672:	bf00      	nop
 800c674:	e7fd      	b.n	800c672 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800c676:	693b      	ldr	r3, [r7, #16]
 800c678:	3318      	adds	r3, #24
 800c67a:	4618      	mov	r0, r3
 800c67c:	f7fe fdf2 	bl	800b264 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c680:	4b1d      	ldr	r3, [pc, #116]	@ (800c6f8 <xTaskRemoveFromEventList+0xb0>)
 800c682:	681b      	ldr	r3, [r3, #0]
 800c684:	2b00      	cmp	r3, #0
 800c686:	d11d      	bne.n	800c6c4 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800c688:	693b      	ldr	r3, [r7, #16]
 800c68a:	3304      	adds	r3, #4
 800c68c:	4618      	mov	r0, r3
 800c68e:	f7fe fde9 	bl	800b264 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800c692:	693b      	ldr	r3, [r7, #16]
 800c694:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c696:	4b19      	ldr	r3, [pc, #100]	@ (800c6fc <xTaskRemoveFromEventList+0xb4>)
 800c698:	681b      	ldr	r3, [r3, #0]
 800c69a:	429a      	cmp	r2, r3
 800c69c:	d903      	bls.n	800c6a6 <xTaskRemoveFromEventList+0x5e>
 800c69e:	693b      	ldr	r3, [r7, #16]
 800c6a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c6a2:	4a16      	ldr	r2, [pc, #88]	@ (800c6fc <xTaskRemoveFromEventList+0xb4>)
 800c6a4:	6013      	str	r3, [r2, #0]
 800c6a6:	693b      	ldr	r3, [r7, #16]
 800c6a8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c6aa:	4613      	mov	r3, r2
 800c6ac:	009b      	lsls	r3, r3, #2
 800c6ae:	4413      	add	r3, r2
 800c6b0:	009b      	lsls	r3, r3, #2
 800c6b2:	4a13      	ldr	r2, [pc, #76]	@ (800c700 <xTaskRemoveFromEventList+0xb8>)
 800c6b4:	441a      	add	r2, r3
 800c6b6:	693b      	ldr	r3, [r7, #16]
 800c6b8:	3304      	adds	r3, #4
 800c6ba:	4619      	mov	r1, r3
 800c6bc:	4610      	mov	r0, r2
 800c6be:	f7fe fd74 	bl	800b1aa <vListInsertEnd>
 800c6c2:	e005      	b.n	800c6d0 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800c6c4:	693b      	ldr	r3, [r7, #16]
 800c6c6:	3318      	adds	r3, #24
 800c6c8:	4619      	mov	r1, r3
 800c6ca:	480e      	ldr	r0, [pc, #56]	@ (800c704 <xTaskRemoveFromEventList+0xbc>)
 800c6cc:	f7fe fd6d 	bl	800b1aa <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800c6d0:	693b      	ldr	r3, [r7, #16]
 800c6d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c6d4:	4b0c      	ldr	r3, [pc, #48]	@ (800c708 <xTaskRemoveFromEventList+0xc0>)
 800c6d6:	681b      	ldr	r3, [r3, #0]
 800c6d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c6da:	429a      	cmp	r2, r3
 800c6dc:	d905      	bls.n	800c6ea <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800c6de:	2301      	movs	r3, #1
 800c6e0:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800c6e2:	4b0a      	ldr	r3, [pc, #40]	@ (800c70c <xTaskRemoveFromEventList+0xc4>)
 800c6e4:	2201      	movs	r2, #1
 800c6e6:	601a      	str	r2, [r3, #0]
 800c6e8:	e001      	b.n	800c6ee <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800c6ea:	2300      	movs	r3, #0
 800c6ec:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800c6ee:	697b      	ldr	r3, [r7, #20]
}
 800c6f0:	4618      	mov	r0, r3
 800c6f2:	3718      	adds	r7, #24
 800c6f4:	46bd      	mov	sp, r7
 800c6f6:	bd80      	pop	{r7, pc}
 800c6f8:	20001c50 	.word	0x20001c50
 800c6fc:	20001c30 	.word	0x20001c30
 800c700:	20001758 	.word	0x20001758
 800c704:	20001be8 	.word	0x20001be8
 800c708:	20001754 	.word	0x20001754
 800c70c:	20001c3c 	.word	0x20001c3c

0800c710 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800c710:	b480      	push	{r7}
 800c712:	b083      	sub	sp, #12
 800c714:	af00      	add	r7, sp, #0
 800c716:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800c718:	4b06      	ldr	r3, [pc, #24]	@ (800c734 <vTaskInternalSetTimeOutState+0x24>)
 800c71a:	681a      	ldr	r2, [r3, #0]
 800c71c:	687b      	ldr	r3, [r7, #4]
 800c71e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800c720:	4b05      	ldr	r3, [pc, #20]	@ (800c738 <vTaskInternalSetTimeOutState+0x28>)
 800c722:	681a      	ldr	r2, [r3, #0]
 800c724:	687b      	ldr	r3, [r7, #4]
 800c726:	605a      	str	r2, [r3, #4]
}
 800c728:	bf00      	nop
 800c72a:	370c      	adds	r7, #12
 800c72c:	46bd      	mov	sp, r7
 800c72e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c732:	4770      	bx	lr
 800c734:	20001c40 	.word	0x20001c40
 800c738:	20001c2c 	.word	0x20001c2c

0800c73c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800c73c:	b580      	push	{r7, lr}
 800c73e:	b088      	sub	sp, #32
 800c740:	af00      	add	r7, sp, #0
 800c742:	6078      	str	r0, [r7, #4]
 800c744:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800c746:	687b      	ldr	r3, [r7, #4]
 800c748:	2b00      	cmp	r3, #0
 800c74a:	d10b      	bne.n	800c764 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800c74c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c750:	f383 8811 	msr	BASEPRI, r3
 800c754:	f3bf 8f6f 	isb	sy
 800c758:	f3bf 8f4f 	dsb	sy
 800c75c:	613b      	str	r3, [r7, #16]
}
 800c75e:	bf00      	nop
 800c760:	bf00      	nop
 800c762:	e7fd      	b.n	800c760 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800c764:	683b      	ldr	r3, [r7, #0]
 800c766:	2b00      	cmp	r3, #0
 800c768:	d10b      	bne.n	800c782 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800c76a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c76e:	f383 8811 	msr	BASEPRI, r3
 800c772:	f3bf 8f6f 	isb	sy
 800c776:	f3bf 8f4f 	dsb	sy
 800c77a:	60fb      	str	r3, [r7, #12]
}
 800c77c:	bf00      	nop
 800c77e:	bf00      	nop
 800c780:	e7fd      	b.n	800c77e <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800c782:	f000 fe91 	bl	800d4a8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800c786:	4b1d      	ldr	r3, [pc, #116]	@ (800c7fc <xTaskCheckForTimeOut+0xc0>)
 800c788:	681b      	ldr	r3, [r3, #0]
 800c78a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800c78c:	687b      	ldr	r3, [r7, #4]
 800c78e:	685b      	ldr	r3, [r3, #4]
 800c790:	69ba      	ldr	r2, [r7, #24]
 800c792:	1ad3      	subs	r3, r2, r3
 800c794:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800c796:	683b      	ldr	r3, [r7, #0]
 800c798:	681b      	ldr	r3, [r3, #0]
 800c79a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c79e:	d102      	bne.n	800c7a6 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800c7a0:	2300      	movs	r3, #0
 800c7a2:	61fb      	str	r3, [r7, #28]
 800c7a4:	e023      	b.n	800c7ee <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800c7a6:	687b      	ldr	r3, [r7, #4]
 800c7a8:	681a      	ldr	r2, [r3, #0]
 800c7aa:	4b15      	ldr	r3, [pc, #84]	@ (800c800 <xTaskCheckForTimeOut+0xc4>)
 800c7ac:	681b      	ldr	r3, [r3, #0]
 800c7ae:	429a      	cmp	r2, r3
 800c7b0:	d007      	beq.n	800c7c2 <xTaskCheckForTimeOut+0x86>
 800c7b2:	687b      	ldr	r3, [r7, #4]
 800c7b4:	685b      	ldr	r3, [r3, #4]
 800c7b6:	69ba      	ldr	r2, [r7, #24]
 800c7b8:	429a      	cmp	r2, r3
 800c7ba:	d302      	bcc.n	800c7c2 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800c7bc:	2301      	movs	r3, #1
 800c7be:	61fb      	str	r3, [r7, #28]
 800c7c0:	e015      	b.n	800c7ee <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800c7c2:	683b      	ldr	r3, [r7, #0]
 800c7c4:	681b      	ldr	r3, [r3, #0]
 800c7c6:	697a      	ldr	r2, [r7, #20]
 800c7c8:	429a      	cmp	r2, r3
 800c7ca:	d20b      	bcs.n	800c7e4 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800c7cc:	683b      	ldr	r3, [r7, #0]
 800c7ce:	681a      	ldr	r2, [r3, #0]
 800c7d0:	697b      	ldr	r3, [r7, #20]
 800c7d2:	1ad2      	subs	r2, r2, r3
 800c7d4:	683b      	ldr	r3, [r7, #0]
 800c7d6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800c7d8:	6878      	ldr	r0, [r7, #4]
 800c7da:	f7ff ff99 	bl	800c710 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800c7de:	2300      	movs	r3, #0
 800c7e0:	61fb      	str	r3, [r7, #28]
 800c7e2:	e004      	b.n	800c7ee <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800c7e4:	683b      	ldr	r3, [r7, #0]
 800c7e6:	2200      	movs	r2, #0
 800c7e8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800c7ea:	2301      	movs	r3, #1
 800c7ec:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800c7ee:	f000 fe8d 	bl	800d50c <vPortExitCritical>

	return xReturn;
 800c7f2:	69fb      	ldr	r3, [r7, #28]
}
 800c7f4:	4618      	mov	r0, r3
 800c7f6:	3720      	adds	r7, #32
 800c7f8:	46bd      	mov	sp, r7
 800c7fa:	bd80      	pop	{r7, pc}
 800c7fc:	20001c2c 	.word	0x20001c2c
 800c800:	20001c40 	.word	0x20001c40

0800c804 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800c804:	b480      	push	{r7}
 800c806:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800c808:	4b03      	ldr	r3, [pc, #12]	@ (800c818 <vTaskMissedYield+0x14>)
 800c80a:	2201      	movs	r2, #1
 800c80c:	601a      	str	r2, [r3, #0]
}
 800c80e:	bf00      	nop
 800c810:	46bd      	mov	sp, r7
 800c812:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c816:	4770      	bx	lr
 800c818:	20001c3c 	.word	0x20001c3c

0800c81c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800c81c:	b580      	push	{r7, lr}
 800c81e:	b082      	sub	sp, #8
 800c820:	af00      	add	r7, sp, #0
 800c822:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800c824:	f000 f852 	bl	800c8cc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800c828:	4b06      	ldr	r3, [pc, #24]	@ (800c844 <prvIdleTask+0x28>)
 800c82a:	681b      	ldr	r3, [r3, #0]
 800c82c:	2b01      	cmp	r3, #1
 800c82e:	d9f9      	bls.n	800c824 <prvIdleTask+0x8>
			{
				taskYIELD();
 800c830:	4b05      	ldr	r3, [pc, #20]	@ (800c848 <prvIdleTask+0x2c>)
 800c832:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c836:	601a      	str	r2, [r3, #0]
 800c838:	f3bf 8f4f 	dsb	sy
 800c83c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800c840:	e7f0      	b.n	800c824 <prvIdleTask+0x8>
 800c842:	bf00      	nop
 800c844:	20001758 	.word	0x20001758
 800c848:	e000ed04 	.word	0xe000ed04

0800c84c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800c84c:	b580      	push	{r7, lr}
 800c84e:	b082      	sub	sp, #8
 800c850:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c852:	2300      	movs	r3, #0
 800c854:	607b      	str	r3, [r7, #4]
 800c856:	e00c      	b.n	800c872 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800c858:	687a      	ldr	r2, [r7, #4]
 800c85a:	4613      	mov	r3, r2
 800c85c:	009b      	lsls	r3, r3, #2
 800c85e:	4413      	add	r3, r2
 800c860:	009b      	lsls	r3, r3, #2
 800c862:	4a12      	ldr	r2, [pc, #72]	@ (800c8ac <prvInitialiseTaskLists+0x60>)
 800c864:	4413      	add	r3, r2
 800c866:	4618      	mov	r0, r3
 800c868:	f7fe fc72 	bl	800b150 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c86c:	687b      	ldr	r3, [r7, #4]
 800c86e:	3301      	adds	r3, #1
 800c870:	607b      	str	r3, [r7, #4]
 800c872:	687b      	ldr	r3, [r7, #4]
 800c874:	2b37      	cmp	r3, #55	@ 0x37
 800c876:	d9ef      	bls.n	800c858 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800c878:	480d      	ldr	r0, [pc, #52]	@ (800c8b0 <prvInitialiseTaskLists+0x64>)
 800c87a:	f7fe fc69 	bl	800b150 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800c87e:	480d      	ldr	r0, [pc, #52]	@ (800c8b4 <prvInitialiseTaskLists+0x68>)
 800c880:	f7fe fc66 	bl	800b150 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800c884:	480c      	ldr	r0, [pc, #48]	@ (800c8b8 <prvInitialiseTaskLists+0x6c>)
 800c886:	f7fe fc63 	bl	800b150 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800c88a:	480c      	ldr	r0, [pc, #48]	@ (800c8bc <prvInitialiseTaskLists+0x70>)
 800c88c:	f7fe fc60 	bl	800b150 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800c890:	480b      	ldr	r0, [pc, #44]	@ (800c8c0 <prvInitialiseTaskLists+0x74>)
 800c892:	f7fe fc5d 	bl	800b150 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800c896:	4b0b      	ldr	r3, [pc, #44]	@ (800c8c4 <prvInitialiseTaskLists+0x78>)
 800c898:	4a05      	ldr	r2, [pc, #20]	@ (800c8b0 <prvInitialiseTaskLists+0x64>)
 800c89a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800c89c:	4b0a      	ldr	r3, [pc, #40]	@ (800c8c8 <prvInitialiseTaskLists+0x7c>)
 800c89e:	4a05      	ldr	r2, [pc, #20]	@ (800c8b4 <prvInitialiseTaskLists+0x68>)
 800c8a0:	601a      	str	r2, [r3, #0]
}
 800c8a2:	bf00      	nop
 800c8a4:	3708      	adds	r7, #8
 800c8a6:	46bd      	mov	sp, r7
 800c8a8:	bd80      	pop	{r7, pc}
 800c8aa:	bf00      	nop
 800c8ac:	20001758 	.word	0x20001758
 800c8b0:	20001bb8 	.word	0x20001bb8
 800c8b4:	20001bcc 	.word	0x20001bcc
 800c8b8:	20001be8 	.word	0x20001be8
 800c8bc:	20001bfc 	.word	0x20001bfc
 800c8c0:	20001c14 	.word	0x20001c14
 800c8c4:	20001be0 	.word	0x20001be0
 800c8c8:	20001be4 	.word	0x20001be4

0800c8cc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800c8cc:	b580      	push	{r7, lr}
 800c8ce:	b082      	sub	sp, #8
 800c8d0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c8d2:	e019      	b.n	800c908 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800c8d4:	f000 fde8 	bl	800d4a8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c8d8:	4b10      	ldr	r3, [pc, #64]	@ (800c91c <prvCheckTasksWaitingTermination+0x50>)
 800c8da:	68db      	ldr	r3, [r3, #12]
 800c8dc:	68db      	ldr	r3, [r3, #12]
 800c8de:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c8e0:	687b      	ldr	r3, [r7, #4]
 800c8e2:	3304      	adds	r3, #4
 800c8e4:	4618      	mov	r0, r3
 800c8e6:	f7fe fcbd 	bl	800b264 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800c8ea:	4b0d      	ldr	r3, [pc, #52]	@ (800c920 <prvCheckTasksWaitingTermination+0x54>)
 800c8ec:	681b      	ldr	r3, [r3, #0]
 800c8ee:	3b01      	subs	r3, #1
 800c8f0:	4a0b      	ldr	r2, [pc, #44]	@ (800c920 <prvCheckTasksWaitingTermination+0x54>)
 800c8f2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800c8f4:	4b0b      	ldr	r3, [pc, #44]	@ (800c924 <prvCheckTasksWaitingTermination+0x58>)
 800c8f6:	681b      	ldr	r3, [r3, #0]
 800c8f8:	3b01      	subs	r3, #1
 800c8fa:	4a0a      	ldr	r2, [pc, #40]	@ (800c924 <prvCheckTasksWaitingTermination+0x58>)
 800c8fc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800c8fe:	f000 fe05 	bl	800d50c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800c902:	6878      	ldr	r0, [r7, #4]
 800c904:	f000 f810 	bl	800c928 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c908:	4b06      	ldr	r3, [pc, #24]	@ (800c924 <prvCheckTasksWaitingTermination+0x58>)
 800c90a:	681b      	ldr	r3, [r3, #0]
 800c90c:	2b00      	cmp	r3, #0
 800c90e:	d1e1      	bne.n	800c8d4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800c910:	bf00      	nop
 800c912:	bf00      	nop
 800c914:	3708      	adds	r7, #8
 800c916:	46bd      	mov	sp, r7
 800c918:	bd80      	pop	{r7, pc}
 800c91a:	bf00      	nop
 800c91c:	20001bfc 	.word	0x20001bfc
 800c920:	20001c28 	.word	0x20001c28
 800c924:	20001c10 	.word	0x20001c10

0800c928 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800c928:	b580      	push	{r7, lr}
 800c92a:	b084      	sub	sp, #16
 800c92c:	af00      	add	r7, sp, #0
 800c92e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800c930:	687b      	ldr	r3, [r7, #4]
 800c932:	3354      	adds	r3, #84	@ 0x54
 800c934:	4618      	mov	r0, r3
 800c936:	f002 fa1f 	bl	800ed78 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800c93a:	687b      	ldr	r3, [r7, #4]
 800c93c:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800c940:	2b00      	cmp	r3, #0
 800c942:	d108      	bne.n	800c956 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800c944:	687b      	ldr	r3, [r7, #4]
 800c946:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c948:	4618      	mov	r0, r3
 800c94a:	f000 ff9d 	bl	800d888 <vPortFree>
				vPortFree( pxTCB );
 800c94e:	6878      	ldr	r0, [r7, #4]
 800c950:	f000 ff9a 	bl	800d888 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800c954:	e019      	b.n	800c98a <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800c956:	687b      	ldr	r3, [r7, #4]
 800c958:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800c95c:	2b01      	cmp	r3, #1
 800c95e:	d103      	bne.n	800c968 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800c960:	6878      	ldr	r0, [r7, #4]
 800c962:	f000 ff91 	bl	800d888 <vPortFree>
	}
 800c966:	e010      	b.n	800c98a <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800c968:	687b      	ldr	r3, [r7, #4]
 800c96a:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800c96e:	2b02      	cmp	r3, #2
 800c970:	d00b      	beq.n	800c98a <prvDeleteTCB+0x62>
	__asm volatile
 800c972:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c976:	f383 8811 	msr	BASEPRI, r3
 800c97a:	f3bf 8f6f 	isb	sy
 800c97e:	f3bf 8f4f 	dsb	sy
 800c982:	60fb      	str	r3, [r7, #12]
}
 800c984:	bf00      	nop
 800c986:	bf00      	nop
 800c988:	e7fd      	b.n	800c986 <prvDeleteTCB+0x5e>
	}
 800c98a:	bf00      	nop
 800c98c:	3710      	adds	r7, #16
 800c98e:	46bd      	mov	sp, r7
 800c990:	bd80      	pop	{r7, pc}
	...

0800c994 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800c994:	b480      	push	{r7}
 800c996:	b083      	sub	sp, #12
 800c998:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c99a:	4b0c      	ldr	r3, [pc, #48]	@ (800c9cc <prvResetNextTaskUnblockTime+0x38>)
 800c99c:	681b      	ldr	r3, [r3, #0]
 800c99e:	681b      	ldr	r3, [r3, #0]
 800c9a0:	2b00      	cmp	r3, #0
 800c9a2:	d104      	bne.n	800c9ae <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800c9a4:	4b0a      	ldr	r3, [pc, #40]	@ (800c9d0 <prvResetNextTaskUnblockTime+0x3c>)
 800c9a6:	f04f 32ff 	mov.w	r2, #4294967295
 800c9aa:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800c9ac:	e008      	b.n	800c9c0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c9ae:	4b07      	ldr	r3, [pc, #28]	@ (800c9cc <prvResetNextTaskUnblockTime+0x38>)
 800c9b0:	681b      	ldr	r3, [r3, #0]
 800c9b2:	68db      	ldr	r3, [r3, #12]
 800c9b4:	68db      	ldr	r3, [r3, #12]
 800c9b6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800c9b8:	687b      	ldr	r3, [r7, #4]
 800c9ba:	685b      	ldr	r3, [r3, #4]
 800c9bc:	4a04      	ldr	r2, [pc, #16]	@ (800c9d0 <prvResetNextTaskUnblockTime+0x3c>)
 800c9be:	6013      	str	r3, [r2, #0]
}
 800c9c0:	bf00      	nop
 800c9c2:	370c      	adds	r7, #12
 800c9c4:	46bd      	mov	sp, r7
 800c9c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9ca:	4770      	bx	lr
 800c9cc:	20001be0 	.word	0x20001be0
 800c9d0:	20001c48 	.word	0x20001c48

0800c9d4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800c9d4:	b480      	push	{r7}
 800c9d6:	b083      	sub	sp, #12
 800c9d8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800c9da:	4b0b      	ldr	r3, [pc, #44]	@ (800ca08 <xTaskGetSchedulerState+0x34>)
 800c9dc:	681b      	ldr	r3, [r3, #0]
 800c9de:	2b00      	cmp	r3, #0
 800c9e0:	d102      	bne.n	800c9e8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800c9e2:	2301      	movs	r3, #1
 800c9e4:	607b      	str	r3, [r7, #4]
 800c9e6:	e008      	b.n	800c9fa <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c9e8:	4b08      	ldr	r3, [pc, #32]	@ (800ca0c <xTaskGetSchedulerState+0x38>)
 800c9ea:	681b      	ldr	r3, [r3, #0]
 800c9ec:	2b00      	cmp	r3, #0
 800c9ee:	d102      	bne.n	800c9f6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800c9f0:	2302      	movs	r3, #2
 800c9f2:	607b      	str	r3, [r7, #4]
 800c9f4:	e001      	b.n	800c9fa <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800c9f6:	2300      	movs	r3, #0
 800c9f8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800c9fa:	687b      	ldr	r3, [r7, #4]
	}
 800c9fc:	4618      	mov	r0, r3
 800c9fe:	370c      	adds	r7, #12
 800ca00:	46bd      	mov	sp, r7
 800ca02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca06:	4770      	bx	lr
 800ca08:	20001c34 	.word	0x20001c34
 800ca0c:	20001c50 	.word	0x20001c50

0800ca10 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800ca10:	b580      	push	{r7, lr}
 800ca12:	b086      	sub	sp, #24
 800ca14:	af00      	add	r7, sp, #0
 800ca16:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800ca18:	687b      	ldr	r3, [r7, #4]
 800ca1a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800ca1c:	2300      	movs	r3, #0
 800ca1e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800ca20:	687b      	ldr	r3, [r7, #4]
 800ca22:	2b00      	cmp	r3, #0
 800ca24:	d058      	beq.n	800cad8 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800ca26:	4b2f      	ldr	r3, [pc, #188]	@ (800cae4 <xTaskPriorityDisinherit+0xd4>)
 800ca28:	681b      	ldr	r3, [r3, #0]
 800ca2a:	693a      	ldr	r2, [r7, #16]
 800ca2c:	429a      	cmp	r2, r3
 800ca2e:	d00b      	beq.n	800ca48 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800ca30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ca34:	f383 8811 	msr	BASEPRI, r3
 800ca38:	f3bf 8f6f 	isb	sy
 800ca3c:	f3bf 8f4f 	dsb	sy
 800ca40:	60fb      	str	r3, [r7, #12]
}
 800ca42:	bf00      	nop
 800ca44:	bf00      	nop
 800ca46:	e7fd      	b.n	800ca44 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800ca48:	693b      	ldr	r3, [r7, #16]
 800ca4a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ca4c:	2b00      	cmp	r3, #0
 800ca4e:	d10b      	bne.n	800ca68 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800ca50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ca54:	f383 8811 	msr	BASEPRI, r3
 800ca58:	f3bf 8f6f 	isb	sy
 800ca5c:	f3bf 8f4f 	dsb	sy
 800ca60:	60bb      	str	r3, [r7, #8]
}
 800ca62:	bf00      	nop
 800ca64:	bf00      	nop
 800ca66:	e7fd      	b.n	800ca64 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800ca68:	693b      	ldr	r3, [r7, #16]
 800ca6a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ca6c:	1e5a      	subs	r2, r3, #1
 800ca6e:	693b      	ldr	r3, [r7, #16]
 800ca70:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800ca72:	693b      	ldr	r3, [r7, #16]
 800ca74:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ca76:	693b      	ldr	r3, [r7, #16]
 800ca78:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ca7a:	429a      	cmp	r2, r3
 800ca7c:	d02c      	beq.n	800cad8 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800ca7e:	693b      	ldr	r3, [r7, #16]
 800ca80:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ca82:	2b00      	cmp	r3, #0
 800ca84:	d128      	bne.n	800cad8 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ca86:	693b      	ldr	r3, [r7, #16]
 800ca88:	3304      	adds	r3, #4
 800ca8a:	4618      	mov	r0, r3
 800ca8c:	f7fe fbea 	bl	800b264 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800ca90:	693b      	ldr	r3, [r7, #16]
 800ca92:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800ca94:	693b      	ldr	r3, [r7, #16]
 800ca96:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ca98:	693b      	ldr	r3, [r7, #16]
 800ca9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ca9c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800caa0:	693b      	ldr	r3, [r7, #16]
 800caa2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800caa4:	693b      	ldr	r3, [r7, #16]
 800caa6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800caa8:	4b0f      	ldr	r3, [pc, #60]	@ (800cae8 <xTaskPriorityDisinherit+0xd8>)
 800caaa:	681b      	ldr	r3, [r3, #0]
 800caac:	429a      	cmp	r2, r3
 800caae:	d903      	bls.n	800cab8 <xTaskPriorityDisinherit+0xa8>
 800cab0:	693b      	ldr	r3, [r7, #16]
 800cab2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cab4:	4a0c      	ldr	r2, [pc, #48]	@ (800cae8 <xTaskPriorityDisinherit+0xd8>)
 800cab6:	6013      	str	r3, [r2, #0]
 800cab8:	693b      	ldr	r3, [r7, #16]
 800caba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cabc:	4613      	mov	r3, r2
 800cabe:	009b      	lsls	r3, r3, #2
 800cac0:	4413      	add	r3, r2
 800cac2:	009b      	lsls	r3, r3, #2
 800cac4:	4a09      	ldr	r2, [pc, #36]	@ (800caec <xTaskPriorityDisinherit+0xdc>)
 800cac6:	441a      	add	r2, r3
 800cac8:	693b      	ldr	r3, [r7, #16]
 800caca:	3304      	adds	r3, #4
 800cacc:	4619      	mov	r1, r3
 800cace:	4610      	mov	r0, r2
 800cad0:	f7fe fb6b 	bl	800b1aa <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800cad4:	2301      	movs	r3, #1
 800cad6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800cad8:	697b      	ldr	r3, [r7, #20]
	}
 800cada:	4618      	mov	r0, r3
 800cadc:	3718      	adds	r7, #24
 800cade:	46bd      	mov	sp, r7
 800cae0:	bd80      	pop	{r7, pc}
 800cae2:	bf00      	nop
 800cae4:	20001754 	.word	0x20001754
 800cae8:	20001c30 	.word	0x20001c30
 800caec:	20001758 	.word	0x20001758

0800caf0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800caf0:	b580      	push	{r7, lr}
 800caf2:	b084      	sub	sp, #16
 800caf4:	af00      	add	r7, sp, #0
 800caf6:	6078      	str	r0, [r7, #4]
 800caf8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800cafa:	4b21      	ldr	r3, [pc, #132]	@ (800cb80 <prvAddCurrentTaskToDelayedList+0x90>)
 800cafc:	681b      	ldr	r3, [r3, #0]
 800cafe:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800cb00:	4b20      	ldr	r3, [pc, #128]	@ (800cb84 <prvAddCurrentTaskToDelayedList+0x94>)
 800cb02:	681b      	ldr	r3, [r3, #0]
 800cb04:	3304      	adds	r3, #4
 800cb06:	4618      	mov	r0, r3
 800cb08:	f7fe fbac 	bl	800b264 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800cb0c:	687b      	ldr	r3, [r7, #4]
 800cb0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cb12:	d10a      	bne.n	800cb2a <prvAddCurrentTaskToDelayedList+0x3a>
 800cb14:	683b      	ldr	r3, [r7, #0]
 800cb16:	2b00      	cmp	r3, #0
 800cb18:	d007      	beq.n	800cb2a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800cb1a:	4b1a      	ldr	r3, [pc, #104]	@ (800cb84 <prvAddCurrentTaskToDelayedList+0x94>)
 800cb1c:	681b      	ldr	r3, [r3, #0]
 800cb1e:	3304      	adds	r3, #4
 800cb20:	4619      	mov	r1, r3
 800cb22:	4819      	ldr	r0, [pc, #100]	@ (800cb88 <prvAddCurrentTaskToDelayedList+0x98>)
 800cb24:	f7fe fb41 	bl	800b1aa <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800cb28:	e026      	b.n	800cb78 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800cb2a:	68fa      	ldr	r2, [r7, #12]
 800cb2c:	687b      	ldr	r3, [r7, #4]
 800cb2e:	4413      	add	r3, r2
 800cb30:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800cb32:	4b14      	ldr	r3, [pc, #80]	@ (800cb84 <prvAddCurrentTaskToDelayedList+0x94>)
 800cb34:	681b      	ldr	r3, [r3, #0]
 800cb36:	68ba      	ldr	r2, [r7, #8]
 800cb38:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800cb3a:	68ba      	ldr	r2, [r7, #8]
 800cb3c:	68fb      	ldr	r3, [r7, #12]
 800cb3e:	429a      	cmp	r2, r3
 800cb40:	d209      	bcs.n	800cb56 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800cb42:	4b12      	ldr	r3, [pc, #72]	@ (800cb8c <prvAddCurrentTaskToDelayedList+0x9c>)
 800cb44:	681a      	ldr	r2, [r3, #0]
 800cb46:	4b0f      	ldr	r3, [pc, #60]	@ (800cb84 <prvAddCurrentTaskToDelayedList+0x94>)
 800cb48:	681b      	ldr	r3, [r3, #0]
 800cb4a:	3304      	adds	r3, #4
 800cb4c:	4619      	mov	r1, r3
 800cb4e:	4610      	mov	r0, r2
 800cb50:	f7fe fb4f 	bl	800b1f2 <vListInsert>
}
 800cb54:	e010      	b.n	800cb78 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800cb56:	4b0e      	ldr	r3, [pc, #56]	@ (800cb90 <prvAddCurrentTaskToDelayedList+0xa0>)
 800cb58:	681a      	ldr	r2, [r3, #0]
 800cb5a:	4b0a      	ldr	r3, [pc, #40]	@ (800cb84 <prvAddCurrentTaskToDelayedList+0x94>)
 800cb5c:	681b      	ldr	r3, [r3, #0]
 800cb5e:	3304      	adds	r3, #4
 800cb60:	4619      	mov	r1, r3
 800cb62:	4610      	mov	r0, r2
 800cb64:	f7fe fb45 	bl	800b1f2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800cb68:	4b0a      	ldr	r3, [pc, #40]	@ (800cb94 <prvAddCurrentTaskToDelayedList+0xa4>)
 800cb6a:	681b      	ldr	r3, [r3, #0]
 800cb6c:	68ba      	ldr	r2, [r7, #8]
 800cb6e:	429a      	cmp	r2, r3
 800cb70:	d202      	bcs.n	800cb78 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800cb72:	4a08      	ldr	r2, [pc, #32]	@ (800cb94 <prvAddCurrentTaskToDelayedList+0xa4>)
 800cb74:	68bb      	ldr	r3, [r7, #8]
 800cb76:	6013      	str	r3, [r2, #0]
}
 800cb78:	bf00      	nop
 800cb7a:	3710      	adds	r7, #16
 800cb7c:	46bd      	mov	sp, r7
 800cb7e:	bd80      	pop	{r7, pc}
 800cb80:	20001c2c 	.word	0x20001c2c
 800cb84:	20001754 	.word	0x20001754
 800cb88:	20001c14 	.word	0x20001c14
 800cb8c:	20001be4 	.word	0x20001be4
 800cb90:	20001be0 	.word	0x20001be0
 800cb94:	20001c48 	.word	0x20001c48

0800cb98 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800cb98:	b580      	push	{r7, lr}
 800cb9a:	b08a      	sub	sp, #40	@ 0x28
 800cb9c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800cb9e:	2300      	movs	r3, #0
 800cba0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800cba2:	f000 fb13 	bl	800d1cc <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800cba6:	4b1d      	ldr	r3, [pc, #116]	@ (800cc1c <xTimerCreateTimerTask+0x84>)
 800cba8:	681b      	ldr	r3, [r3, #0]
 800cbaa:	2b00      	cmp	r3, #0
 800cbac:	d021      	beq.n	800cbf2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800cbae:	2300      	movs	r3, #0
 800cbb0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800cbb2:	2300      	movs	r3, #0
 800cbb4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800cbb6:	1d3a      	adds	r2, r7, #4
 800cbb8:	f107 0108 	add.w	r1, r7, #8
 800cbbc:	f107 030c 	add.w	r3, r7, #12
 800cbc0:	4618      	mov	r0, r3
 800cbc2:	f7fe faab 	bl	800b11c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800cbc6:	6879      	ldr	r1, [r7, #4]
 800cbc8:	68bb      	ldr	r3, [r7, #8]
 800cbca:	68fa      	ldr	r2, [r7, #12]
 800cbcc:	9202      	str	r2, [sp, #8]
 800cbce:	9301      	str	r3, [sp, #4]
 800cbd0:	2302      	movs	r3, #2
 800cbd2:	9300      	str	r3, [sp, #0]
 800cbd4:	2300      	movs	r3, #0
 800cbd6:	460a      	mov	r2, r1
 800cbd8:	4911      	ldr	r1, [pc, #68]	@ (800cc20 <xTimerCreateTimerTask+0x88>)
 800cbda:	4812      	ldr	r0, [pc, #72]	@ (800cc24 <xTimerCreateTimerTask+0x8c>)
 800cbdc:	f7ff f8a2 	bl	800bd24 <xTaskCreateStatic>
 800cbe0:	4603      	mov	r3, r0
 800cbe2:	4a11      	ldr	r2, [pc, #68]	@ (800cc28 <xTimerCreateTimerTask+0x90>)
 800cbe4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800cbe6:	4b10      	ldr	r3, [pc, #64]	@ (800cc28 <xTimerCreateTimerTask+0x90>)
 800cbe8:	681b      	ldr	r3, [r3, #0]
 800cbea:	2b00      	cmp	r3, #0
 800cbec:	d001      	beq.n	800cbf2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800cbee:	2301      	movs	r3, #1
 800cbf0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800cbf2:	697b      	ldr	r3, [r7, #20]
 800cbf4:	2b00      	cmp	r3, #0
 800cbf6:	d10b      	bne.n	800cc10 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800cbf8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cbfc:	f383 8811 	msr	BASEPRI, r3
 800cc00:	f3bf 8f6f 	isb	sy
 800cc04:	f3bf 8f4f 	dsb	sy
 800cc08:	613b      	str	r3, [r7, #16]
}
 800cc0a:	bf00      	nop
 800cc0c:	bf00      	nop
 800cc0e:	e7fd      	b.n	800cc0c <xTimerCreateTimerTask+0x74>
	return xReturn;
 800cc10:	697b      	ldr	r3, [r7, #20]
}
 800cc12:	4618      	mov	r0, r3
 800cc14:	3718      	adds	r7, #24
 800cc16:	46bd      	mov	sp, r7
 800cc18:	bd80      	pop	{r7, pc}
 800cc1a:	bf00      	nop
 800cc1c:	20001c84 	.word	0x20001c84
 800cc20:	08011198 	.word	0x08011198
 800cc24:	0800cd65 	.word	0x0800cd65
 800cc28:	20001c88 	.word	0x20001c88

0800cc2c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800cc2c:	b580      	push	{r7, lr}
 800cc2e:	b08a      	sub	sp, #40	@ 0x28
 800cc30:	af00      	add	r7, sp, #0
 800cc32:	60f8      	str	r0, [r7, #12]
 800cc34:	60b9      	str	r1, [r7, #8]
 800cc36:	607a      	str	r2, [r7, #4]
 800cc38:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800cc3a:	2300      	movs	r3, #0
 800cc3c:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800cc3e:	68fb      	ldr	r3, [r7, #12]
 800cc40:	2b00      	cmp	r3, #0
 800cc42:	d10b      	bne.n	800cc5c <xTimerGenericCommand+0x30>
	__asm volatile
 800cc44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cc48:	f383 8811 	msr	BASEPRI, r3
 800cc4c:	f3bf 8f6f 	isb	sy
 800cc50:	f3bf 8f4f 	dsb	sy
 800cc54:	623b      	str	r3, [r7, #32]
}
 800cc56:	bf00      	nop
 800cc58:	bf00      	nop
 800cc5a:	e7fd      	b.n	800cc58 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800cc5c:	4b19      	ldr	r3, [pc, #100]	@ (800ccc4 <xTimerGenericCommand+0x98>)
 800cc5e:	681b      	ldr	r3, [r3, #0]
 800cc60:	2b00      	cmp	r3, #0
 800cc62:	d02a      	beq.n	800ccba <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800cc64:	68bb      	ldr	r3, [r7, #8]
 800cc66:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800cc68:	687b      	ldr	r3, [r7, #4]
 800cc6a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800cc6c:	68fb      	ldr	r3, [r7, #12]
 800cc6e:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800cc70:	68bb      	ldr	r3, [r7, #8]
 800cc72:	2b05      	cmp	r3, #5
 800cc74:	dc18      	bgt.n	800cca8 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800cc76:	f7ff fead 	bl	800c9d4 <xTaskGetSchedulerState>
 800cc7a:	4603      	mov	r3, r0
 800cc7c:	2b02      	cmp	r3, #2
 800cc7e:	d109      	bne.n	800cc94 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800cc80:	4b10      	ldr	r3, [pc, #64]	@ (800ccc4 <xTimerGenericCommand+0x98>)
 800cc82:	6818      	ldr	r0, [r3, #0]
 800cc84:	f107 0110 	add.w	r1, r7, #16
 800cc88:	2300      	movs	r3, #0
 800cc8a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800cc8c:	f7fe fc5a 	bl	800b544 <xQueueGenericSend>
 800cc90:	6278      	str	r0, [r7, #36]	@ 0x24
 800cc92:	e012      	b.n	800ccba <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800cc94:	4b0b      	ldr	r3, [pc, #44]	@ (800ccc4 <xTimerGenericCommand+0x98>)
 800cc96:	6818      	ldr	r0, [r3, #0]
 800cc98:	f107 0110 	add.w	r1, r7, #16
 800cc9c:	2300      	movs	r3, #0
 800cc9e:	2200      	movs	r2, #0
 800cca0:	f7fe fc50 	bl	800b544 <xQueueGenericSend>
 800cca4:	6278      	str	r0, [r7, #36]	@ 0x24
 800cca6:	e008      	b.n	800ccba <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800cca8:	4b06      	ldr	r3, [pc, #24]	@ (800ccc4 <xTimerGenericCommand+0x98>)
 800ccaa:	6818      	ldr	r0, [r3, #0]
 800ccac:	f107 0110 	add.w	r1, r7, #16
 800ccb0:	2300      	movs	r3, #0
 800ccb2:	683a      	ldr	r2, [r7, #0]
 800ccb4:	f7fe fd48 	bl	800b748 <xQueueGenericSendFromISR>
 800ccb8:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800ccba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800ccbc:	4618      	mov	r0, r3
 800ccbe:	3728      	adds	r7, #40	@ 0x28
 800ccc0:	46bd      	mov	sp, r7
 800ccc2:	bd80      	pop	{r7, pc}
 800ccc4:	20001c84 	.word	0x20001c84

0800ccc8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800ccc8:	b580      	push	{r7, lr}
 800ccca:	b088      	sub	sp, #32
 800cccc:	af02      	add	r7, sp, #8
 800ccce:	6078      	str	r0, [r7, #4]
 800ccd0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ccd2:	4b23      	ldr	r3, [pc, #140]	@ (800cd60 <prvProcessExpiredTimer+0x98>)
 800ccd4:	681b      	ldr	r3, [r3, #0]
 800ccd6:	68db      	ldr	r3, [r3, #12]
 800ccd8:	68db      	ldr	r3, [r3, #12]
 800ccda:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ccdc:	697b      	ldr	r3, [r7, #20]
 800ccde:	3304      	adds	r3, #4
 800cce0:	4618      	mov	r0, r3
 800cce2:	f7fe fabf 	bl	800b264 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800cce6:	697b      	ldr	r3, [r7, #20]
 800cce8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ccec:	f003 0304 	and.w	r3, r3, #4
 800ccf0:	2b00      	cmp	r3, #0
 800ccf2:	d023      	beq.n	800cd3c <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800ccf4:	697b      	ldr	r3, [r7, #20]
 800ccf6:	699a      	ldr	r2, [r3, #24]
 800ccf8:	687b      	ldr	r3, [r7, #4]
 800ccfa:	18d1      	adds	r1, r2, r3
 800ccfc:	687b      	ldr	r3, [r7, #4]
 800ccfe:	683a      	ldr	r2, [r7, #0]
 800cd00:	6978      	ldr	r0, [r7, #20]
 800cd02:	f000 f8d5 	bl	800ceb0 <prvInsertTimerInActiveList>
 800cd06:	4603      	mov	r3, r0
 800cd08:	2b00      	cmp	r3, #0
 800cd0a:	d020      	beq.n	800cd4e <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800cd0c:	2300      	movs	r3, #0
 800cd0e:	9300      	str	r3, [sp, #0]
 800cd10:	2300      	movs	r3, #0
 800cd12:	687a      	ldr	r2, [r7, #4]
 800cd14:	2100      	movs	r1, #0
 800cd16:	6978      	ldr	r0, [r7, #20]
 800cd18:	f7ff ff88 	bl	800cc2c <xTimerGenericCommand>
 800cd1c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800cd1e:	693b      	ldr	r3, [r7, #16]
 800cd20:	2b00      	cmp	r3, #0
 800cd22:	d114      	bne.n	800cd4e <prvProcessExpiredTimer+0x86>
	__asm volatile
 800cd24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cd28:	f383 8811 	msr	BASEPRI, r3
 800cd2c:	f3bf 8f6f 	isb	sy
 800cd30:	f3bf 8f4f 	dsb	sy
 800cd34:	60fb      	str	r3, [r7, #12]
}
 800cd36:	bf00      	nop
 800cd38:	bf00      	nop
 800cd3a:	e7fd      	b.n	800cd38 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800cd3c:	697b      	ldr	r3, [r7, #20]
 800cd3e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800cd42:	f023 0301 	bic.w	r3, r3, #1
 800cd46:	b2da      	uxtb	r2, r3
 800cd48:	697b      	ldr	r3, [r7, #20]
 800cd4a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800cd4e:	697b      	ldr	r3, [r7, #20]
 800cd50:	6a1b      	ldr	r3, [r3, #32]
 800cd52:	6978      	ldr	r0, [r7, #20]
 800cd54:	4798      	blx	r3
}
 800cd56:	bf00      	nop
 800cd58:	3718      	adds	r7, #24
 800cd5a:	46bd      	mov	sp, r7
 800cd5c:	bd80      	pop	{r7, pc}
 800cd5e:	bf00      	nop
 800cd60:	20001c7c 	.word	0x20001c7c

0800cd64 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800cd64:	b580      	push	{r7, lr}
 800cd66:	b084      	sub	sp, #16
 800cd68:	af00      	add	r7, sp, #0
 800cd6a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800cd6c:	f107 0308 	add.w	r3, r7, #8
 800cd70:	4618      	mov	r0, r3
 800cd72:	f000 f859 	bl	800ce28 <prvGetNextExpireTime>
 800cd76:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800cd78:	68bb      	ldr	r3, [r7, #8]
 800cd7a:	4619      	mov	r1, r3
 800cd7c:	68f8      	ldr	r0, [r7, #12]
 800cd7e:	f000 f805 	bl	800cd8c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800cd82:	f000 f8d7 	bl	800cf34 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800cd86:	bf00      	nop
 800cd88:	e7f0      	b.n	800cd6c <prvTimerTask+0x8>
	...

0800cd8c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800cd8c:	b580      	push	{r7, lr}
 800cd8e:	b084      	sub	sp, #16
 800cd90:	af00      	add	r7, sp, #0
 800cd92:	6078      	str	r0, [r7, #4]
 800cd94:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800cd96:	f7ff fa29 	bl	800c1ec <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800cd9a:	f107 0308 	add.w	r3, r7, #8
 800cd9e:	4618      	mov	r0, r3
 800cda0:	f000 f866 	bl	800ce70 <prvSampleTimeNow>
 800cda4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800cda6:	68bb      	ldr	r3, [r7, #8]
 800cda8:	2b00      	cmp	r3, #0
 800cdaa:	d130      	bne.n	800ce0e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800cdac:	683b      	ldr	r3, [r7, #0]
 800cdae:	2b00      	cmp	r3, #0
 800cdb0:	d10a      	bne.n	800cdc8 <prvProcessTimerOrBlockTask+0x3c>
 800cdb2:	687a      	ldr	r2, [r7, #4]
 800cdb4:	68fb      	ldr	r3, [r7, #12]
 800cdb6:	429a      	cmp	r2, r3
 800cdb8:	d806      	bhi.n	800cdc8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800cdba:	f7ff fa25 	bl	800c208 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800cdbe:	68f9      	ldr	r1, [r7, #12]
 800cdc0:	6878      	ldr	r0, [r7, #4]
 800cdc2:	f7ff ff81 	bl	800ccc8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800cdc6:	e024      	b.n	800ce12 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800cdc8:	683b      	ldr	r3, [r7, #0]
 800cdca:	2b00      	cmp	r3, #0
 800cdcc:	d008      	beq.n	800cde0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800cdce:	4b13      	ldr	r3, [pc, #76]	@ (800ce1c <prvProcessTimerOrBlockTask+0x90>)
 800cdd0:	681b      	ldr	r3, [r3, #0]
 800cdd2:	681b      	ldr	r3, [r3, #0]
 800cdd4:	2b00      	cmp	r3, #0
 800cdd6:	d101      	bne.n	800cddc <prvProcessTimerOrBlockTask+0x50>
 800cdd8:	2301      	movs	r3, #1
 800cdda:	e000      	b.n	800cdde <prvProcessTimerOrBlockTask+0x52>
 800cddc:	2300      	movs	r3, #0
 800cdde:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800cde0:	4b0f      	ldr	r3, [pc, #60]	@ (800ce20 <prvProcessTimerOrBlockTask+0x94>)
 800cde2:	6818      	ldr	r0, [r3, #0]
 800cde4:	687a      	ldr	r2, [r7, #4]
 800cde6:	68fb      	ldr	r3, [r7, #12]
 800cde8:	1ad3      	subs	r3, r2, r3
 800cdea:	683a      	ldr	r2, [r7, #0]
 800cdec:	4619      	mov	r1, r3
 800cdee:	f7fe ff65 	bl	800bcbc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800cdf2:	f7ff fa09 	bl	800c208 <xTaskResumeAll>
 800cdf6:	4603      	mov	r3, r0
 800cdf8:	2b00      	cmp	r3, #0
 800cdfa:	d10a      	bne.n	800ce12 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800cdfc:	4b09      	ldr	r3, [pc, #36]	@ (800ce24 <prvProcessTimerOrBlockTask+0x98>)
 800cdfe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ce02:	601a      	str	r2, [r3, #0]
 800ce04:	f3bf 8f4f 	dsb	sy
 800ce08:	f3bf 8f6f 	isb	sy
}
 800ce0c:	e001      	b.n	800ce12 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800ce0e:	f7ff f9fb 	bl	800c208 <xTaskResumeAll>
}
 800ce12:	bf00      	nop
 800ce14:	3710      	adds	r7, #16
 800ce16:	46bd      	mov	sp, r7
 800ce18:	bd80      	pop	{r7, pc}
 800ce1a:	bf00      	nop
 800ce1c:	20001c80 	.word	0x20001c80
 800ce20:	20001c84 	.word	0x20001c84
 800ce24:	e000ed04 	.word	0xe000ed04

0800ce28 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800ce28:	b480      	push	{r7}
 800ce2a:	b085      	sub	sp, #20
 800ce2c:	af00      	add	r7, sp, #0
 800ce2e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800ce30:	4b0e      	ldr	r3, [pc, #56]	@ (800ce6c <prvGetNextExpireTime+0x44>)
 800ce32:	681b      	ldr	r3, [r3, #0]
 800ce34:	681b      	ldr	r3, [r3, #0]
 800ce36:	2b00      	cmp	r3, #0
 800ce38:	d101      	bne.n	800ce3e <prvGetNextExpireTime+0x16>
 800ce3a:	2201      	movs	r2, #1
 800ce3c:	e000      	b.n	800ce40 <prvGetNextExpireTime+0x18>
 800ce3e:	2200      	movs	r2, #0
 800ce40:	687b      	ldr	r3, [r7, #4]
 800ce42:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800ce44:	687b      	ldr	r3, [r7, #4]
 800ce46:	681b      	ldr	r3, [r3, #0]
 800ce48:	2b00      	cmp	r3, #0
 800ce4a:	d105      	bne.n	800ce58 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800ce4c:	4b07      	ldr	r3, [pc, #28]	@ (800ce6c <prvGetNextExpireTime+0x44>)
 800ce4e:	681b      	ldr	r3, [r3, #0]
 800ce50:	68db      	ldr	r3, [r3, #12]
 800ce52:	681b      	ldr	r3, [r3, #0]
 800ce54:	60fb      	str	r3, [r7, #12]
 800ce56:	e001      	b.n	800ce5c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800ce58:	2300      	movs	r3, #0
 800ce5a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800ce5c:	68fb      	ldr	r3, [r7, #12]
}
 800ce5e:	4618      	mov	r0, r3
 800ce60:	3714      	adds	r7, #20
 800ce62:	46bd      	mov	sp, r7
 800ce64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce68:	4770      	bx	lr
 800ce6a:	bf00      	nop
 800ce6c:	20001c7c 	.word	0x20001c7c

0800ce70 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800ce70:	b580      	push	{r7, lr}
 800ce72:	b084      	sub	sp, #16
 800ce74:	af00      	add	r7, sp, #0
 800ce76:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800ce78:	f7ff fa64 	bl	800c344 <xTaskGetTickCount>
 800ce7c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800ce7e:	4b0b      	ldr	r3, [pc, #44]	@ (800ceac <prvSampleTimeNow+0x3c>)
 800ce80:	681b      	ldr	r3, [r3, #0]
 800ce82:	68fa      	ldr	r2, [r7, #12]
 800ce84:	429a      	cmp	r2, r3
 800ce86:	d205      	bcs.n	800ce94 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800ce88:	f000 f93a 	bl	800d100 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800ce8c:	687b      	ldr	r3, [r7, #4]
 800ce8e:	2201      	movs	r2, #1
 800ce90:	601a      	str	r2, [r3, #0]
 800ce92:	e002      	b.n	800ce9a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800ce94:	687b      	ldr	r3, [r7, #4]
 800ce96:	2200      	movs	r2, #0
 800ce98:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800ce9a:	4a04      	ldr	r2, [pc, #16]	@ (800ceac <prvSampleTimeNow+0x3c>)
 800ce9c:	68fb      	ldr	r3, [r7, #12]
 800ce9e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800cea0:	68fb      	ldr	r3, [r7, #12]
}
 800cea2:	4618      	mov	r0, r3
 800cea4:	3710      	adds	r7, #16
 800cea6:	46bd      	mov	sp, r7
 800cea8:	bd80      	pop	{r7, pc}
 800ceaa:	bf00      	nop
 800ceac:	20001c8c 	.word	0x20001c8c

0800ceb0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800ceb0:	b580      	push	{r7, lr}
 800ceb2:	b086      	sub	sp, #24
 800ceb4:	af00      	add	r7, sp, #0
 800ceb6:	60f8      	str	r0, [r7, #12]
 800ceb8:	60b9      	str	r1, [r7, #8]
 800ceba:	607a      	str	r2, [r7, #4]
 800cebc:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800cebe:	2300      	movs	r3, #0
 800cec0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800cec2:	68fb      	ldr	r3, [r7, #12]
 800cec4:	68ba      	ldr	r2, [r7, #8]
 800cec6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800cec8:	68fb      	ldr	r3, [r7, #12]
 800ceca:	68fa      	ldr	r2, [r7, #12]
 800cecc:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800cece:	68ba      	ldr	r2, [r7, #8]
 800ced0:	687b      	ldr	r3, [r7, #4]
 800ced2:	429a      	cmp	r2, r3
 800ced4:	d812      	bhi.n	800cefc <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ced6:	687a      	ldr	r2, [r7, #4]
 800ced8:	683b      	ldr	r3, [r7, #0]
 800ceda:	1ad2      	subs	r2, r2, r3
 800cedc:	68fb      	ldr	r3, [r7, #12]
 800cede:	699b      	ldr	r3, [r3, #24]
 800cee0:	429a      	cmp	r2, r3
 800cee2:	d302      	bcc.n	800ceea <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800cee4:	2301      	movs	r3, #1
 800cee6:	617b      	str	r3, [r7, #20]
 800cee8:	e01b      	b.n	800cf22 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800ceea:	4b10      	ldr	r3, [pc, #64]	@ (800cf2c <prvInsertTimerInActiveList+0x7c>)
 800ceec:	681a      	ldr	r2, [r3, #0]
 800ceee:	68fb      	ldr	r3, [r7, #12]
 800cef0:	3304      	adds	r3, #4
 800cef2:	4619      	mov	r1, r3
 800cef4:	4610      	mov	r0, r2
 800cef6:	f7fe f97c 	bl	800b1f2 <vListInsert>
 800cefa:	e012      	b.n	800cf22 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800cefc:	687a      	ldr	r2, [r7, #4]
 800cefe:	683b      	ldr	r3, [r7, #0]
 800cf00:	429a      	cmp	r2, r3
 800cf02:	d206      	bcs.n	800cf12 <prvInsertTimerInActiveList+0x62>
 800cf04:	68ba      	ldr	r2, [r7, #8]
 800cf06:	683b      	ldr	r3, [r7, #0]
 800cf08:	429a      	cmp	r2, r3
 800cf0a:	d302      	bcc.n	800cf12 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800cf0c:	2301      	movs	r3, #1
 800cf0e:	617b      	str	r3, [r7, #20]
 800cf10:	e007      	b.n	800cf22 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800cf12:	4b07      	ldr	r3, [pc, #28]	@ (800cf30 <prvInsertTimerInActiveList+0x80>)
 800cf14:	681a      	ldr	r2, [r3, #0]
 800cf16:	68fb      	ldr	r3, [r7, #12]
 800cf18:	3304      	adds	r3, #4
 800cf1a:	4619      	mov	r1, r3
 800cf1c:	4610      	mov	r0, r2
 800cf1e:	f7fe f968 	bl	800b1f2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800cf22:	697b      	ldr	r3, [r7, #20]
}
 800cf24:	4618      	mov	r0, r3
 800cf26:	3718      	adds	r7, #24
 800cf28:	46bd      	mov	sp, r7
 800cf2a:	bd80      	pop	{r7, pc}
 800cf2c:	20001c80 	.word	0x20001c80
 800cf30:	20001c7c 	.word	0x20001c7c

0800cf34 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800cf34:	b580      	push	{r7, lr}
 800cf36:	b08e      	sub	sp, #56	@ 0x38
 800cf38:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800cf3a:	e0ce      	b.n	800d0da <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800cf3c:	687b      	ldr	r3, [r7, #4]
 800cf3e:	2b00      	cmp	r3, #0
 800cf40:	da19      	bge.n	800cf76 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800cf42:	1d3b      	adds	r3, r7, #4
 800cf44:	3304      	adds	r3, #4
 800cf46:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800cf48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cf4a:	2b00      	cmp	r3, #0
 800cf4c:	d10b      	bne.n	800cf66 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800cf4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cf52:	f383 8811 	msr	BASEPRI, r3
 800cf56:	f3bf 8f6f 	isb	sy
 800cf5a:	f3bf 8f4f 	dsb	sy
 800cf5e:	61fb      	str	r3, [r7, #28]
}
 800cf60:	bf00      	nop
 800cf62:	bf00      	nop
 800cf64:	e7fd      	b.n	800cf62 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800cf66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cf68:	681b      	ldr	r3, [r3, #0]
 800cf6a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800cf6c:	6850      	ldr	r0, [r2, #4]
 800cf6e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800cf70:	6892      	ldr	r2, [r2, #8]
 800cf72:	4611      	mov	r1, r2
 800cf74:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800cf76:	687b      	ldr	r3, [r7, #4]
 800cf78:	2b00      	cmp	r3, #0
 800cf7a:	f2c0 80ae 	blt.w	800d0da <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800cf7e:	68fb      	ldr	r3, [r7, #12]
 800cf80:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800cf82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cf84:	695b      	ldr	r3, [r3, #20]
 800cf86:	2b00      	cmp	r3, #0
 800cf88:	d004      	beq.n	800cf94 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800cf8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cf8c:	3304      	adds	r3, #4
 800cf8e:	4618      	mov	r0, r3
 800cf90:	f7fe f968 	bl	800b264 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800cf94:	463b      	mov	r3, r7
 800cf96:	4618      	mov	r0, r3
 800cf98:	f7ff ff6a 	bl	800ce70 <prvSampleTimeNow>
 800cf9c:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800cf9e:	687b      	ldr	r3, [r7, #4]
 800cfa0:	2b09      	cmp	r3, #9
 800cfa2:	f200 8097 	bhi.w	800d0d4 <prvProcessReceivedCommands+0x1a0>
 800cfa6:	a201      	add	r2, pc, #4	@ (adr r2, 800cfac <prvProcessReceivedCommands+0x78>)
 800cfa8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cfac:	0800cfd5 	.word	0x0800cfd5
 800cfb0:	0800cfd5 	.word	0x0800cfd5
 800cfb4:	0800cfd5 	.word	0x0800cfd5
 800cfb8:	0800d04b 	.word	0x0800d04b
 800cfbc:	0800d05f 	.word	0x0800d05f
 800cfc0:	0800d0ab 	.word	0x0800d0ab
 800cfc4:	0800cfd5 	.word	0x0800cfd5
 800cfc8:	0800cfd5 	.word	0x0800cfd5
 800cfcc:	0800d04b 	.word	0x0800d04b
 800cfd0:	0800d05f 	.word	0x0800d05f
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800cfd4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cfd6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800cfda:	f043 0301 	orr.w	r3, r3, #1
 800cfde:	b2da      	uxtb	r2, r3
 800cfe0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cfe2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800cfe6:	68ba      	ldr	r2, [r7, #8]
 800cfe8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cfea:	699b      	ldr	r3, [r3, #24]
 800cfec:	18d1      	adds	r1, r2, r3
 800cfee:	68bb      	ldr	r3, [r7, #8]
 800cff0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800cff2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800cff4:	f7ff ff5c 	bl	800ceb0 <prvInsertTimerInActiveList>
 800cff8:	4603      	mov	r3, r0
 800cffa:	2b00      	cmp	r3, #0
 800cffc:	d06c      	beq.n	800d0d8 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800cffe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d000:	6a1b      	ldr	r3, [r3, #32]
 800d002:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d004:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800d006:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d008:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800d00c:	f003 0304 	and.w	r3, r3, #4
 800d010:	2b00      	cmp	r3, #0
 800d012:	d061      	beq.n	800d0d8 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800d014:	68ba      	ldr	r2, [r7, #8]
 800d016:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d018:	699b      	ldr	r3, [r3, #24]
 800d01a:	441a      	add	r2, r3
 800d01c:	2300      	movs	r3, #0
 800d01e:	9300      	str	r3, [sp, #0]
 800d020:	2300      	movs	r3, #0
 800d022:	2100      	movs	r1, #0
 800d024:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d026:	f7ff fe01 	bl	800cc2c <xTimerGenericCommand>
 800d02a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800d02c:	6a3b      	ldr	r3, [r7, #32]
 800d02e:	2b00      	cmp	r3, #0
 800d030:	d152      	bne.n	800d0d8 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800d032:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d036:	f383 8811 	msr	BASEPRI, r3
 800d03a:	f3bf 8f6f 	isb	sy
 800d03e:	f3bf 8f4f 	dsb	sy
 800d042:	61bb      	str	r3, [r7, #24]
}
 800d044:	bf00      	nop
 800d046:	bf00      	nop
 800d048:	e7fd      	b.n	800d046 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800d04a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d04c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800d050:	f023 0301 	bic.w	r3, r3, #1
 800d054:	b2da      	uxtb	r2, r3
 800d056:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d058:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800d05c:	e03d      	b.n	800d0da <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800d05e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d060:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800d064:	f043 0301 	orr.w	r3, r3, #1
 800d068:	b2da      	uxtb	r2, r3
 800d06a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d06c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800d070:	68ba      	ldr	r2, [r7, #8]
 800d072:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d074:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800d076:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d078:	699b      	ldr	r3, [r3, #24]
 800d07a:	2b00      	cmp	r3, #0
 800d07c:	d10b      	bne.n	800d096 <prvProcessReceivedCommands+0x162>
	__asm volatile
 800d07e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d082:	f383 8811 	msr	BASEPRI, r3
 800d086:	f3bf 8f6f 	isb	sy
 800d08a:	f3bf 8f4f 	dsb	sy
 800d08e:	617b      	str	r3, [r7, #20]
}
 800d090:	bf00      	nop
 800d092:	bf00      	nop
 800d094:	e7fd      	b.n	800d092 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800d096:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d098:	699a      	ldr	r2, [r3, #24]
 800d09a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d09c:	18d1      	adds	r1, r2, r3
 800d09e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d0a0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d0a2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d0a4:	f7ff ff04 	bl	800ceb0 <prvInsertTimerInActiveList>
					break;
 800d0a8:	e017      	b.n	800d0da <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800d0aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d0ac:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800d0b0:	f003 0302 	and.w	r3, r3, #2
 800d0b4:	2b00      	cmp	r3, #0
 800d0b6:	d103      	bne.n	800d0c0 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800d0b8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d0ba:	f000 fbe5 	bl	800d888 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800d0be:	e00c      	b.n	800d0da <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800d0c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d0c2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800d0c6:	f023 0301 	bic.w	r3, r3, #1
 800d0ca:	b2da      	uxtb	r2, r3
 800d0cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d0ce:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800d0d2:	e002      	b.n	800d0da <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800d0d4:	bf00      	nop
 800d0d6:	e000      	b.n	800d0da <prvProcessReceivedCommands+0x1a6>
					break;
 800d0d8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800d0da:	4b08      	ldr	r3, [pc, #32]	@ (800d0fc <prvProcessReceivedCommands+0x1c8>)
 800d0dc:	681b      	ldr	r3, [r3, #0]
 800d0de:	1d39      	adds	r1, r7, #4
 800d0e0:	2200      	movs	r2, #0
 800d0e2:	4618      	mov	r0, r3
 800d0e4:	f7fe fbce 	bl	800b884 <xQueueReceive>
 800d0e8:	4603      	mov	r3, r0
 800d0ea:	2b00      	cmp	r3, #0
 800d0ec:	f47f af26 	bne.w	800cf3c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800d0f0:	bf00      	nop
 800d0f2:	bf00      	nop
 800d0f4:	3730      	adds	r7, #48	@ 0x30
 800d0f6:	46bd      	mov	sp, r7
 800d0f8:	bd80      	pop	{r7, pc}
 800d0fa:	bf00      	nop
 800d0fc:	20001c84 	.word	0x20001c84

0800d100 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800d100:	b580      	push	{r7, lr}
 800d102:	b088      	sub	sp, #32
 800d104:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800d106:	e049      	b.n	800d19c <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800d108:	4b2e      	ldr	r3, [pc, #184]	@ (800d1c4 <prvSwitchTimerLists+0xc4>)
 800d10a:	681b      	ldr	r3, [r3, #0]
 800d10c:	68db      	ldr	r3, [r3, #12]
 800d10e:	681b      	ldr	r3, [r3, #0]
 800d110:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d112:	4b2c      	ldr	r3, [pc, #176]	@ (800d1c4 <prvSwitchTimerLists+0xc4>)
 800d114:	681b      	ldr	r3, [r3, #0]
 800d116:	68db      	ldr	r3, [r3, #12]
 800d118:	68db      	ldr	r3, [r3, #12]
 800d11a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d11c:	68fb      	ldr	r3, [r7, #12]
 800d11e:	3304      	adds	r3, #4
 800d120:	4618      	mov	r0, r3
 800d122:	f7fe f89f 	bl	800b264 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d126:	68fb      	ldr	r3, [r7, #12]
 800d128:	6a1b      	ldr	r3, [r3, #32]
 800d12a:	68f8      	ldr	r0, [r7, #12]
 800d12c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800d12e:	68fb      	ldr	r3, [r7, #12]
 800d130:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800d134:	f003 0304 	and.w	r3, r3, #4
 800d138:	2b00      	cmp	r3, #0
 800d13a:	d02f      	beq.n	800d19c <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800d13c:	68fb      	ldr	r3, [r7, #12]
 800d13e:	699b      	ldr	r3, [r3, #24]
 800d140:	693a      	ldr	r2, [r7, #16]
 800d142:	4413      	add	r3, r2
 800d144:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800d146:	68ba      	ldr	r2, [r7, #8]
 800d148:	693b      	ldr	r3, [r7, #16]
 800d14a:	429a      	cmp	r2, r3
 800d14c:	d90e      	bls.n	800d16c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800d14e:	68fb      	ldr	r3, [r7, #12]
 800d150:	68ba      	ldr	r2, [r7, #8]
 800d152:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800d154:	68fb      	ldr	r3, [r7, #12]
 800d156:	68fa      	ldr	r2, [r7, #12]
 800d158:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800d15a:	4b1a      	ldr	r3, [pc, #104]	@ (800d1c4 <prvSwitchTimerLists+0xc4>)
 800d15c:	681a      	ldr	r2, [r3, #0]
 800d15e:	68fb      	ldr	r3, [r7, #12]
 800d160:	3304      	adds	r3, #4
 800d162:	4619      	mov	r1, r3
 800d164:	4610      	mov	r0, r2
 800d166:	f7fe f844 	bl	800b1f2 <vListInsert>
 800d16a:	e017      	b.n	800d19c <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800d16c:	2300      	movs	r3, #0
 800d16e:	9300      	str	r3, [sp, #0]
 800d170:	2300      	movs	r3, #0
 800d172:	693a      	ldr	r2, [r7, #16]
 800d174:	2100      	movs	r1, #0
 800d176:	68f8      	ldr	r0, [r7, #12]
 800d178:	f7ff fd58 	bl	800cc2c <xTimerGenericCommand>
 800d17c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800d17e:	687b      	ldr	r3, [r7, #4]
 800d180:	2b00      	cmp	r3, #0
 800d182:	d10b      	bne.n	800d19c <prvSwitchTimerLists+0x9c>
	__asm volatile
 800d184:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d188:	f383 8811 	msr	BASEPRI, r3
 800d18c:	f3bf 8f6f 	isb	sy
 800d190:	f3bf 8f4f 	dsb	sy
 800d194:	603b      	str	r3, [r7, #0]
}
 800d196:	bf00      	nop
 800d198:	bf00      	nop
 800d19a:	e7fd      	b.n	800d198 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800d19c:	4b09      	ldr	r3, [pc, #36]	@ (800d1c4 <prvSwitchTimerLists+0xc4>)
 800d19e:	681b      	ldr	r3, [r3, #0]
 800d1a0:	681b      	ldr	r3, [r3, #0]
 800d1a2:	2b00      	cmp	r3, #0
 800d1a4:	d1b0      	bne.n	800d108 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800d1a6:	4b07      	ldr	r3, [pc, #28]	@ (800d1c4 <prvSwitchTimerLists+0xc4>)
 800d1a8:	681b      	ldr	r3, [r3, #0]
 800d1aa:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800d1ac:	4b06      	ldr	r3, [pc, #24]	@ (800d1c8 <prvSwitchTimerLists+0xc8>)
 800d1ae:	681b      	ldr	r3, [r3, #0]
 800d1b0:	4a04      	ldr	r2, [pc, #16]	@ (800d1c4 <prvSwitchTimerLists+0xc4>)
 800d1b2:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800d1b4:	4a04      	ldr	r2, [pc, #16]	@ (800d1c8 <prvSwitchTimerLists+0xc8>)
 800d1b6:	697b      	ldr	r3, [r7, #20]
 800d1b8:	6013      	str	r3, [r2, #0]
}
 800d1ba:	bf00      	nop
 800d1bc:	3718      	adds	r7, #24
 800d1be:	46bd      	mov	sp, r7
 800d1c0:	bd80      	pop	{r7, pc}
 800d1c2:	bf00      	nop
 800d1c4:	20001c7c 	.word	0x20001c7c
 800d1c8:	20001c80 	.word	0x20001c80

0800d1cc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800d1cc:	b580      	push	{r7, lr}
 800d1ce:	b082      	sub	sp, #8
 800d1d0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800d1d2:	f000 f969 	bl	800d4a8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800d1d6:	4b15      	ldr	r3, [pc, #84]	@ (800d22c <prvCheckForValidListAndQueue+0x60>)
 800d1d8:	681b      	ldr	r3, [r3, #0]
 800d1da:	2b00      	cmp	r3, #0
 800d1dc:	d120      	bne.n	800d220 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800d1de:	4814      	ldr	r0, [pc, #80]	@ (800d230 <prvCheckForValidListAndQueue+0x64>)
 800d1e0:	f7fd ffb6 	bl	800b150 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800d1e4:	4813      	ldr	r0, [pc, #76]	@ (800d234 <prvCheckForValidListAndQueue+0x68>)
 800d1e6:	f7fd ffb3 	bl	800b150 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800d1ea:	4b13      	ldr	r3, [pc, #76]	@ (800d238 <prvCheckForValidListAndQueue+0x6c>)
 800d1ec:	4a10      	ldr	r2, [pc, #64]	@ (800d230 <prvCheckForValidListAndQueue+0x64>)
 800d1ee:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800d1f0:	4b12      	ldr	r3, [pc, #72]	@ (800d23c <prvCheckForValidListAndQueue+0x70>)
 800d1f2:	4a10      	ldr	r2, [pc, #64]	@ (800d234 <prvCheckForValidListAndQueue+0x68>)
 800d1f4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800d1f6:	2300      	movs	r3, #0
 800d1f8:	9300      	str	r3, [sp, #0]
 800d1fa:	4b11      	ldr	r3, [pc, #68]	@ (800d240 <prvCheckForValidListAndQueue+0x74>)
 800d1fc:	4a11      	ldr	r2, [pc, #68]	@ (800d244 <prvCheckForValidListAndQueue+0x78>)
 800d1fe:	2110      	movs	r1, #16
 800d200:	200a      	movs	r0, #10
 800d202:	f7fe f8c3 	bl	800b38c <xQueueGenericCreateStatic>
 800d206:	4603      	mov	r3, r0
 800d208:	4a08      	ldr	r2, [pc, #32]	@ (800d22c <prvCheckForValidListAndQueue+0x60>)
 800d20a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800d20c:	4b07      	ldr	r3, [pc, #28]	@ (800d22c <prvCheckForValidListAndQueue+0x60>)
 800d20e:	681b      	ldr	r3, [r3, #0]
 800d210:	2b00      	cmp	r3, #0
 800d212:	d005      	beq.n	800d220 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800d214:	4b05      	ldr	r3, [pc, #20]	@ (800d22c <prvCheckForValidListAndQueue+0x60>)
 800d216:	681b      	ldr	r3, [r3, #0]
 800d218:	490b      	ldr	r1, [pc, #44]	@ (800d248 <prvCheckForValidListAndQueue+0x7c>)
 800d21a:	4618      	mov	r0, r3
 800d21c:	f7fe fd24 	bl	800bc68 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800d220:	f000 f974 	bl	800d50c <vPortExitCritical>
}
 800d224:	bf00      	nop
 800d226:	46bd      	mov	sp, r7
 800d228:	bd80      	pop	{r7, pc}
 800d22a:	bf00      	nop
 800d22c:	20001c84 	.word	0x20001c84
 800d230:	20001c54 	.word	0x20001c54
 800d234:	20001c68 	.word	0x20001c68
 800d238:	20001c7c 	.word	0x20001c7c
 800d23c:	20001c80 	.word	0x20001c80
 800d240:	20001d30 	.word	0x20001d30
 800d244:	20001c90 	.word	0x20001c90
 800d248:	080111a0 	.word	0x080111a0

0800d24c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800d24c:	b480      	push	{r7}
 800d24e:	b085      	sub	sp, #20
 800d250:	af00      	add	r7, sp, #0
 800d252:	60f8      	str	r0, [r7, #12]
 800d254:	60b9      	str	r1, [r7, #8]
 800d256:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800d258:	68fb      	ldr	r3, [r7, #12]
 800d25a:	3b04      	subs	r3, #4
 800d25c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800d25e:	68fb      	ldr	r3, [r7, #12]
 800d260:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800d264:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d266:	68fb      	ldr	r3, [r7, #12]
 800d268:	3b04      	subs	r3, #4
 800d26a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800d26c:	68bb      	ldr	r3, [r7, #8]
 800d26e:	f023 0201 	bic.w	r2, r3, #1
 800d272:	68fb      	ldr	r3, [r7, #12]
 800d274:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d276:	68fb      	ldr	r3, [r7, #12]
 800d278:	3b04      	subs	r3, #4
 800d27a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800d27c:	4a0c      	ldr	r2, [pc, #48]	@ (800d2b0 <pxPortInitialiseStack+0x64>)
 800d27e:	68fb      	ldr	r3, [r7, #12]
 800d280:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800d282:	68fb      	ldr	r3, [r7, #12]
 800d284:	3b14      	subs	r3, #20
 800d286:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800d288:	687a      	ldr	r2, [r7, #4]
 800d28a:	68fb      	ldr	r3, [r7, #12]
 800d28c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800d28e:	68fb      	ldr	r3, [r7, #12]
 800d290:	3b04      	subs	r3, #4
 800d292:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800d294:	68fb      	ldr	r3, [r7, #12]
 800d296:	f06f 0202 	mvn.w	r2, #2
 800d29a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800d29c:	68fb      	ldr	r3, [r7, #12]
 800d29e:	3b20      	subs	r3, #32
 800d2a0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800d2a2:	68fb      	ldr	r3, [r7, #12]
}
 800d2a4:	4618      	mov	r0, r3
 800d2a6:	3714      	adds	r7, #20
 800d2a8:	46bd      	mov	sp, r7
 800d2aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2ae:	4770      	bx	lr
 800d2b0:	0800d2b5 	.word	0x0800d2b5

0800d2b4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800d2b4:	b480      	push	{r7}
 800d2b6:	b085      	sub	sp, #20
 800d2b8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800d2ba:	2300      	movs	r3, #0
 800d2bc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800d2be:	4b13      	ldr	r3, [pc, #76]	@ (800d30c <prvTaskExitError+0x58>)
 800d2c0:	681b      	ldr	r3, [r3, #0]
 800d2c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d2c6:	d00b      	beq.n	800d2e0 <prvTaskExitError+0x2c>
	__asm volatile
 800d2c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d2cc:	f383 8811 	msr	BASEPRI, r3
 800d2d0:	f3bf 8f6f 	isb	sy
 800d2d4:	f3bf 8f4f 	dsb	sy
 800d2d8:	60fb      	str	r3, [r7, #12]
}
 800d2da:	bf00      	nop
 800d2dc:	bf00      	nop
 800d2de:	e7fd      	b.n	800d2dc <prvTaskExitError+0x28>
	__asm volatile
 800d2e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d2e4:	f383 8811 	msr	BASEPRI, r3
 800d2e8:	f3bf 8f6f 	isb	sy
 800d2ec:	f3bf 8f4f 	dsb	sy
 800d2f0:	60bb      	str	r3, [r7, #8]
}
 800d2f2:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800d2f4:	bf00      	nop
 800d2f6:	687b      	ldr	r3, [r7, #4]
 800d2f8:	2b00      	cmp	r3, #0
 800d2fa:	d0fc      	beq.n	800d2f6 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800d2fc:	bf00      	nop
 800d2fe:	bf00      	nop
 800d300:	3714      	adds	r7, #20
 800d302:	46bd      	mov	sp, r7
 800d304:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d308:	4770      	bx	lr
 800d30a:	bf00      	nop
 800d30c:	200000e8 	.word	0x200000e8

0800d310 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800d310:	4b07      	ldr	r3, [pc, #28]	@ (800d330 <pxCurrentTCBConst2>)
 800d312:	6819      	ldr	r1, [r3, #0]
 800d314:	6808      	ldr	r0, [r1, #0]
 800d316:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d31a:	f380 8809 	msr	PSP, r0
 800d31e:	f3bf 8f6f 	isb	sy
 800d322:	f04f 0000 	mov.w	r0, #0
 800d326:	f380 8811 	msr	BASEPRI, r0
 800d32a:	4770      	bx	lr
 800d32c:	f3af 8000 	nop.w

0800d330 <pxCurrentTCBConst2>:
 800d330:	20001754 	.word	0x20001754
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800d334:	bf00      	nop
 800d336:	bf00      	nop

0800d338 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800d338:	4808      	ldr	r0, [pc, #32]	@ (800d35c <prvPortStartFirstTask+0x24>)
 800d33a:	6800      	ldr	r0, [r0, #0]
 800d33c:	6800      	ldr	r0, [r0, #0]
 800d33e:	f380 8808 	msr	MSP, r0
 800d342:	f04f 0000 	mov.w	r0, #0
 800d346:	f380 8814 	msr	CONTROL, r0
 800d34a:	b662      	cpsie	i
 800d34c:	b661      	cpsie	f
 800d34e:	f3bf 8f4f 	dsb	sy
 800d352:	f3bf 8f6f 	isb	sy
 800d356:	df00      	svc	0
 800d358:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800d35a:	bf00      	nop
 800d35c:	e000ed08 	.word	0xe000ed08

0800d360 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800d360:	b580      	push	{r7, lr}
 800d362:	b086      	sub	sp, #24
 800d364:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800d366:	4b47      	ldr	r3, [pc, #284]	@ (800d484 <xPortStartScheduler+0x124>)
 800d368:	681b      	ldr	r3, [r3, #0]
 800d36a:	4a47      	ldr	r2, [pc, #284]	@ (800d488 <xPortStartScheduler+0x128>)
 800d36c:	4293      	cmp	r3, r2
 800d36e:	d10b      	bne.n	800d388 <xPortStartScheduler+0x28>
	__asm volatile
 800d370:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d374:	f383 8811 	msr	BASEPRI, r3
 800d378:	f3bf 8f6f 	isb	sy
 800d37c:	f3bf 8f4f 	dsb	sy
 800d380:	613b      	str	r3, [r7, #16]
}
 800d382:	bf00      	nop
 800d384:	bf00      	nop
 800d386:	e7fd      	b.n	800d384 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800d388:	4b3e      	ldr	r3, [pc, #248]	@ (800d484 <xPortStartScheduler+0x124>)
 800d38a:	681b      	ldr	r3, [r3, #0]
 800d38c:	4a3f      	ldr	r2, [pc, #252]	@ (800d48c <xPortStartScheduler+0x12c>)
 800d38e:	4293      	cmp	r3, r2
 800d390:	d10b      	bne.n	800d3aa <xPortStartScheduler+0x4a>
	__asm volatile
 800d392:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d396:	f383 8811 	msr	BASEPRI, r3
 800d39a:	f3bf 8f6f 	isb	sy
 800d39e:	f3bf 8f4f 	dsb	sy
 800d3a2:	60fb      	str	r3, [r7, #12]
}
 800d3a4:	bf00      	nop
 800d3a6:	bf00      	nop
 800d3a8:	e7fd      	b.n	800d3a6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800d3aa:	4b39      	ldr	r3, [pc, #228]	@ (800d490 <xPortStartScheduler+0x130>)
 800d3ac:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800d3ae:	697b      	ldr	r3, [r7, #20]
 800d3b0:	781b      	ldrb	r3, [r3, #0]
 800d3b2:	b2db      	uxtb	r3, r3
 800d3b4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800d3b6:	697b      	ldr	r3, [r7, #20]
 800d3b8:	22ff      	movs	r2, #255	@ 0xff
 800d3ba:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800d3bc:	697b      	ldr	r3, [r7, #20]
 800d3be:	781b      	ldrb	r3, [r3, #0]
 800d3c0:	b2db      	uxtb	r3, r3
 800d3c2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800d3c4:	78fb      	ldrb	r3, [r7, #3]
 800d3c6:	b2db      	uxtb	r3, r3
 800d3c8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800d3cc:	b2da      	uxtb	r2, r3
 800d3ce:	4b31      	ldr	r3, [pc, #196]	@ (800d494 <xPortStartScheduler+0x134>)
 800d3d0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800d3d2:	4b31      	ldr	r3, [pc, #196]	@ (800d498 <xPortStartScheduler+0x138>)
 800d3d4:	2207      	movs	r2, #7
 800d3d6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d3d8:	e009      	b.n	800d3ee <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800d3da:	4b2f      	ldr	r3, [pc, #188]	@ (800d498 <xPortStartScheduler+0x138>)
 800d3dc:	681b      	ldr	r3, [r3, #0]
 800d3de:	3b01      	subs	r3, #1
 800d3e0:	4a2d      	ldr	r2, [pc, #180]	@ (800d498 <xPortStartScheduler+0x138>)
 800d3e2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800d3e4:	78fb      	ldrb	r3, [r7, #3]
 800d3e6:	b2db      	uxtb	r3, r3
 800d3e8:	005b      	lsls	r3, r3, #1
 800d3ea:	b2db      	uxtb	r3, r3
 800d3ec:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d3ee:	78fb      	ldrb	r3, [r7, #3]
 800d3f0:	b2db      	uxtb	r3, r3
 800d3f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d3f6:	2b80      	cmp	r3, #128	@ 0x80
 800d3f8:	d0ef      	beq.n	800d3da <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800d3fa:	4b27      	ldr	r3, [pc, #156]	@ (800d498 <xPortStartScheduler+0x138>)
 800d3fc:	681b      	ldr	r3, [r3, #0]
 800d3fe:	f1c3 0307 	rsb	r3, r3, #7
 800d402:	2b04      	cmp	r3, #4
 800d404:	d00b      	beq.n	800d41e <xPortStartScheduler+0xbe>
	__asm volatile
 800d406:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d40a:	f383 8811 	msr	BASEPRI, r3
 800d40e:	f3bf 8f6f 	isb	sy
 800d412:	f3bf 8f4f 	dsb	sy
 800d416:	60bb      	str	r3, [r7, #8]
}
 800d418:	bf00      	nop
 800d41a:	bf00      	nop
 800d41c:	e7fd      	b.n	800d41a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800d41e:	4b1e      	ldr	r3, [pc, #120]	@ (800d498 <xPortStartScheduler+0x138>)
 800d420:	681b      	ldr	r3, [r3, #0]
 800d422:	021b      	lsls	r3, r3, #8
 800d424:	4a1c      	ldr	r2, [pc, #112]	@ (800d498 <xPortStartScheduler+0x138>)
 800d426:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800d428:	4b1b      	ldr	r3, [pc, #108]	@ (800d498 <xPortStartScheduler+0x138>)
 800d42a:	681b      	ldr	r3, [r3, #0]
 800d42c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800d430:	4a19      	ldr	r2, [pc, #100]	@ (800d498 <xPortStartScheduler+0x138>)
 800d432:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800d434:	687b      	ldr	r3, [r7, #4]
 800d436:	b2da      	uxtb	r2, r3
 800d438:	697b      	ldr	r3, [r7, #20]
 800d43a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800d43c:	4b17      	ldr	r3, [pc, #92]	@ (800d49c <xPortStartScheduler+0x13c>)
 800d43e:	681b      	ldr	r3, [r3, #0]
 800d440:	4a16      	ldr	r2, [pc, #88]	@ (800d49c <xPortStartScheduler+0x13c>)
 800d442:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800d446:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800d448:	4b14      	ldr	r3, [pc, #80]	@ (800d49c <xPortStartScheduler+0x13c>)
 800d44a:	681b      	ldr	r3, [r3, #0]
 800d44c:	4a13      	ldr	r2, [pc, #76]	@ (800d49c <xPortStartScheduler+0x13c>)
 800d44e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800d452:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800d454:	f000 f8da 	bl	800d60c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800d458:	4b11      	ldr	r3, [pc, #68]	@ (800d4a0 <xPortStartScheduler+0x140>)
 800d45a:	2200      	movs	r2, #0
 800d45c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800d45e:	f000 f8f9 	bl	800d654 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800d462:	4b10      	ldr	r3, [pc, #64]	@ (800d4a4 <xPortStartScheduler+0x144>)
 800d464:	681b      	ldr	r3, [r3, #0]
 800d466:	4a0f      	ldr	r2, [pc, #60]	@ (800d4a4 <xPortStartScheduler+0x144>)
 800d468:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800d46c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800d46e:	f7ff ff63 	bl	800d338 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800d472:	f7ff f831 	bl	800c4d8 <vTaskSwitchContext>
	prvTaskExitError();
 800d476:	f7ff ff1d 	bl	800d2b4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800d47a:	2300      	movs	r3, #0
}
 800d47c:	4618      	mov	r0, r3
 800d47e:	3718      	adds	r7, #24
 800d480:	46bd      	mov	sp, r7
 800d482:	bd80      	pop	{r7, pc}
 800d484:	e000ed00 	.word	0xe000ed00
 800d488:	410fc271 	.word	0x410fc271
 800d48c:	410fc270 	.word	0x410fc270
 800d490:	e000e400 	.word	0xe000e400
 800d494:	20001d80 	.word	0x20001d80
 800d498:	20001d84 	.word	0x20001d84
 800d49c:	e000ed20 	.word	0xe000ed20
 800d4a0:	200000e8 	.word	0x200000e8
 800d4a4:	e000ef34 	.word	0xe000ef34

0800d4a8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800d4a8:	b480      	push	{r7}
 800d4aa:	b083      	sub	sp, #12
 800d4ac:	af00      	add	r7, sp, #0
	__asm volatile
 800d4ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d4b2:	f383 8811 	msr	BASEPRI, r3
 800d4b6:	f3bf 8f6f 	isb	sy
 800d4ba:	f3bf 8f4f 	dsb	sy
 800d4be:	607b      	str	r3, [r7, #4]
}
 800d4c0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800d4c2:	4b10      	ldr	r3, [pc, #64]	@ (800d504 <vPortEnterCritical+0x5c>)
 800d4c4:	681b      	ldr	r3, [r3, #0]
 800d4c6:	3301      	adds	r3, #1
 800d4c8:	4a0e      	ldr	r2, [pc, #56]	@ (800d504 <vPortEnterCritical+0x5c>)
 800d4ca:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800d4cc:	4b0d      	ldr	r3, [pc, #52]	@ (800d504 <vPortEnterCritical+0x5c>)
 800d4ce:	681b      	ldr	r3, [r3, #0]
 800d4d0:	2b01      	cmp	r3, #1
 800d4d2:	d110      	bne.n	800d4f6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800d4d4:	4b0c      	ldr	r3, [pc, #48]	@ (800d508 <vPortEnterCritical+0x60>)
 800d4d6:	681b      	ldr	r3, [r3, #0]
 800d4d8:	b2db      	uxtb	r3, r3
 800d4da:	2b00      	cmp	r3, #0
 800d4dc:	d00b      	beq.n	800d4f6 <vPortEnterCritical+0x4e>
	__asm volatile
 800d4de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d4e2:	f383 8811 	msr	BASEPRI, r3
 800d4e6:	f3bf 8f6f 	isb	sy
 800d4ea:	f3bf 8f4f 	dsb	sy
 800d4ee:	603b      	str	r3, [r7, #0]
}
 800d4f0:	bf00      	nop
 800d4f2:	bf00      	nop
 800d4f4:	e7fd      	b.n	800d4f2 <vPortEnterCritical+0x4a>
	}
}
 800d4f6:	bf00      	nop
 800d4f8:	370c      	adds	r7, #12
 800d4fa:	46bd      	mov	sp, r7
 800d4fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d500:	4770      	bx	lr
 800d502:	bf00      	nop
 800d504:	200000e8 	.word	0x200000e8
 800d508:	e000ed04 	.word	0xe000ed04

0800d50c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800d50c:	b480      	push	{r7}
 800d50e:	b083      	sub	sp, #12
 800d510:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800d512:	4b12      	ldr	r3, [pc, #72]	@ (800d55c <vPortExitCritical+0x50>)
 800d514:	681b      	ldr	r3, [r3, #0]
 800d516:	2b00      	cmp	r3, #0
 800d518:	d10b      	bne.n	800d532 <vPortExitCritical+0x26>
	__asm volatile
 800d51a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d51e:	f383 8811 	msr	BASEPRI, r3
 800d522:	f3bf 8f6f 	isb	sy
 800d526:	f3bf 8f4f 	dsb	sy
 800d52a:	607b      	str	r3, [r7, #4]
}
 800d52c:	bf00      	nop
 800d52e:	bf00      	nop
 800d530:	e7fd      	b.n	800d52e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800d532:	4b0a      	ldr	r3, [pc, #40]	@ (800d55c <vPortExitCritical+0x50>)
 800d534:	681b      	ldr	r3, [r3, #0]
 800d536:	3b01      	subs	r3, #1
 800d538:	4a08      	ldr	r2, [pc, #32]	@ (800d55c <vPortExitCritical+0x50>)
 800d53a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800d53c:	4b07      	ldr	r3, [pc, #28]	@ (800d55c <vPortExitCritical+0x50>)
 800d53e:	681b      	ldr	r3, [r3, #0]
 800d540:	2b00      	cmp	r3, #0
 800d542:	d105      	bne.n	800d550 <vPortExitCritical+0x44>
 800d544:	2300      	movs	r3, #0
 800d546:	603b      	str	r3, [r7, #0]
	__asm volatile
 800d548:	683b      	ldr	r3, [r7, #0]
 800d54a:	f383 8811 	msr	BASEPRI, r3
}
 800d54e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800d550:	bf00      	nop
 800d552:	370c      	adds	r7, #12
 800d554:	46bd      	mov	sp, r7
 800d556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d55a:	4770      	bx	lr
 800d55c:	200000e8 	.word	0x200000e8

0800d560 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800d560:	f3ef 8009 	mrs	r0, PSP
 800d564:	f3bf 8f6f 	isb	sy
 800d568:	4b15      	ldr	r3, [pc, #84]	@ (800d5c0 <pxCurrentTCBConst>)
 800d56a:	681a      	ldr	r2, [r3, #0]
 800d56c:	f01e 0f10 	tst.w	lr, #16
 800d570:	bf08      	it	eq
 800d572:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800d576:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d57a:	6010      	str	r0, [r2, #0]
 800d57c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800d580:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800d584:	f380 8811 	msr	BASEPRI, r0
 800d588:	f3bf 8f4f 	dsb	sy
 800d58c:	f3bf 8f6f 	isb	sy
 800d590:	f7fe ffa2 	bl	800c4d8 <vTaskSwitchContext>
 800d594:	f04f 0000 	mov.w	r0, #0
 800d598:	f380 8811 	msr	BASEPRI, r0
 800d59c:	bc09      	pop	{r0, r3}
 800d59e:	6819      	ldr	r1, [r3, #0]
 800d5a0:	6808      	ldr	r0, [r1, #0]
 800d5a2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d5a6:	f01e 0f10 	tst.w	lr, #16
 800d5aa:	bf08      	it	eq
 800d5ac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800d5b0:	f380 8809 	msr	PSP, r0
 800d5b4:	f3bf 8f6f 	isb	sy
 800d5b8:	4770      	bx	lr
 800d5ba:	bf00      	nop
 800d5bc:	f3af 8000 	nop.w

0800d5c0 <pxCurrentTCBConst>:
 800d5c0:	20001754 	.word	0x20001754
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800d5c4:	bf00      	nop
 800d5c6:	bf00      	nop

0800d5c8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800d5c8:	b580      	push	{r7, lr}
 800d5ca:	b082      	sub	sp, #8
 800d5cc:	af00      	add	r7, sp, #0
	__asm volatile
 800d5ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d5d2:	f383 8811 	msr	BASEPRI, r3
 800d5d6:	f3bf 8f6f 	isb	sy
 800d5da:	f3bf 8f4f 	dsb	sy
 800d5de:	607b      	str	r3, [r7, #4]
}
 800d5e0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800d5e2:	f7fe febf 	bl	800c364 <xTaskIncrementTick>
 800d5e6:	4603      	mov	r3, r0
 800d5e8:	2b00      	cmp	r3, #0
 800d5ea:	d003      	beq.n	800d5f4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800d5ec:	4b06      	ldr	r3, [pc, #24]	@ (800d608 <xPortSysTickHandler+0x40>)
 800d5ee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d5f2:	601a      	str	r2, [r3, #0]
 800d5f4:	2300      	movs	r3, #0
 800d5f6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800d5f8:	683b      	ldr	r3, [r7, #0]
 800d5fa:	f383 8811 	msr	BASEPRI, r3
}
 800d5fe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800d600:	bf00      	nop
 800d602:	3708      	adds	r7, #8
 800d604:	46bd      	mov	sp, r7
 800d606:	bd80      	pop	{r7, pc}
 800d608:	e000ed04 	.word	0xe000ed04

0800d60c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800d60c:	b480      	push	{r7}
 800d60e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800d610:	4b0b      	ldr	r3, [pc, #44]	@ (800d640 <vPortSetupTimerInterrupt+0x34>)
 800d612:	2200      	movs	r2, #0
 800d614:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800d616:	4b0b      	ldr	r3, [pc, #44]	@ (800d644 <vPortSetupTimerInterrupt+0x38>)
 800d618:	2200      	movs	r2, #0
 800d61a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800d61c:	4b0a      	ldr	r3, [pc, #40]	@ (800d648 <vPortSetupTimerInterrupt+0x3c>)
 800d61e:	681b      	ldr	r3, [r3, #0]
 800d620:	4a0a      	ldr	r2, [pc, #40]	@ (800d64c <vPortSetupTimerInterrupt+0x40>)
 800d622:	fba2 2303 	umull	r2, r3, r2, r3
 800d626:	099b      	lsrs	r3, r3, #6
 800d628:	4a09      	ldr	r2, [pc, #36]	@ (800d650 <vPortSetupTimerInterrupt+0x44>)
 800d62a:	3b01      	subs	r3, #1
 800d62c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800d62e:	4b04      	ldr	r3, [pc, #16]	@ (800d640 <vPortSetupTimerInterrupt+0x34>)
 800d630:	2207      	movs	r2, #7
 800d632:	601a      	str	r2, [r3, #0]
}
 800d634:	bf00      	nop
 800d636:	46bd      	mov	sp, r7
 800d638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d63c:	4770      	bx	lr
 800d63e:	bf00      	nop
 800d640:	e000e010 	.word	0xe000e010
 800d644:	e000e018 	.word	0xe000e018
 800d648:	20000090 	.word	0x20000090
 800d64c:	10624dd3 	.word	0x10624dd3
 800d650:	e000e014 	.word	0xe000e014

0800d654 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800d654:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800d664 <vPortEnableVFP+0x10>
 800d658:	6801      	ldr	r1, [r0, #0]
 800d65a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800d65e:	6001      	str	r1, [r0, #0]
 800d660:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800d662:	bf00      	nop
 800d664:	e000ed88 	.word	0xe000ed88

0800d668 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800d668:	b480      	push	{r7}
 800d66a:	b085      	sub	sp, #20
 800d66c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800d66e:	f3ef 8305 	mrs	r3, IPSR
 800d672:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800d674:	68fb      	ldr	r3, [r7, #12]
 800d676:	2b0f      	cmp	r3, #15
 800d678:	d915      	bls.n	800d6a6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800d67a:	4a18      	ldr	r2, [pc, #96]	@ (800d6dc <vPortValidateInterruptPriority+0x74>)
 800d67c:	68fb      	ldr	r3, [r7, #12]
 800d67e:	4413      	add	r3, r2
 800d680:	781b      	ldrb	r3, [r3, #0]
 800d682:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800d684:	4b16      	ldr	r3, [pc, #88]	@ (800d6e0 <vPortValidateInterruptPriority+0x78>)
 800d686:	781b      	ldrb	r3, [r3, #0]
 800d688:	7afa      	ldrb	r2, [r7, #11]
 800d68a:	429a      	cmp	r2, r3
 800d68c:	d20b      	bcs.n	800d6a6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800d68e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d692:	f383 8811 	msr	BASEPRI, r3
 800d696:	f3bf 8f6f 	isb	sy
 800d69a:	f3bf 8f4f 	dsb	sy
 800d69e:	607b      	str	r3, [r7, #4]
}
 800d6a0:	bf00      	nop
 800d6a2:	bf00      	nop
 800d6a4:	e7fd      	b.n	800d6a2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800d6a6:	4b0f      	ldr	r3, [pc, #60]	@ (800d6e4 <vPortValidateInterruptPriority+0x7c>)
 800d6a8:	681b      	ldr	r3, [r3, #0]
 800d6aa:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800d6ae:	4b0e      	ldr	r3, [pc, #56]	@ (800d6e8 <vPortValidateInterruptPriority+0x80>)
 800d6b0:	681b      	ldr	r3, [r3, #0]
 800d6b2:	429a      	cmp	r2, r3
 800d6b4:	d90b      	bls.n	800d6ce <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800d6b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d6ba:	f383 8811 	msr	BASEPRI, r3
 800d6be:	f3bf 8f6f 	isb	sy
 800d6c2:	f3bf 8f4f 	dsb	sy
 800d6c6:	603b      	str	r3, [r7, #0]
}
 800d6c8:	bf00      	nop
 800d6ca:	bf00      	nop
 800d6cc:	e7fd      	b.n	800d6ca <vPortValidateInterruptPriority+0x62>
	}
 800d6ce:	bf00      	nop
 800d6d0:	3714      	adds	r7, #20
 800d6d2:	46bd      	mov	sp, r7
 800d6d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6d8:	4770      	bx	lr
 800d6da:	bf00      	nop
 800d6dc:	e000e3f0 	.word	0xe000e3f0
 800d6e0:	20001d80 	.word	0x20001d80
 800d6e4:	e000ed0c 	.word	0xe000ed0c
 800d6e8:	20001d84 	.word	0x20001d84

0800d6ec <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800d6ec:	b580      	push	{r7, lr}
 800d6ee:	b08a      	sub	sp, #40	@ 0x28
 800d6f0:	af00      	add	r7, sp, #0
 800d6f2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800d6f4:	2300      	movs	r3, #0
 800d6f6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800d6f8:	f7fe fd78 	bl	800c1ec <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800d6fc:	4b5c      	ldr	r3, [pc, #368]	@ (800d870 <pvPortMalloc+0x184>)
 800d6fe:	681b      	ldr	r3, [r3, #0]
 800d700:	2b00      	cmp	r3, #0
 800d702:	d101      	bne.n	800d708 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800d704:	f000 f924 	bl	800d950 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800d708:	4b5a      	ldr	r3, [pc, #360]	@ (800d874 <pvPortMalloc+0x188>)
 800d70a:	681a      	ldr	r2, [r3, #0]
 800d70c:	687b      	ldr	r3, [r7, #4]
 800d70e:	4013      	ands	r3, r2
 800d710:	2b00      	cmp	r3, #0
 800d712:	f040 8095 	bne.w	800d840 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800d716:	687b      	ldr	r3, [r7, #4]
 800d718:	2b00      	cmp	r3, #0
 800d71a:	d01e      	beq.n	800d75a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800d71c:	2208      	movs	r2, #8
 800d71e:	687b      	ldr	r3, [r7, #4]
 800d720:	4413      	add	r3, r2
 800d722:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800d724:	687b      	ldr	r3, [r7, #4]
 800d726:	f003 0307 	and.w	r3, r3, #7
 800d72a:	2b00      	cmp	r3, #0
 800d72c:	d015      	beq.n	800d75a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800d72e:	687b      	ldr	r3, [r7, #4]
 800d730:	f023 0307 	bic.w	r3, r3, #7
 800d734:	3308      	adds	r3, #8
 800d736:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d738:	687b      	ldr	r3, [r7, #4]
 800d73a:	f003 0307 	and.w	r3, r3, #7
 800d73e:	2b00      	cmp	r3, #0
 800d740:	d00b      	beq.n	800d75a <pvPortMalloc+0x6e>
	__asm volatile
 800d742:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d746:	f383 8811 	msr	BASEPRI, r3
 800d74a:	f3bf 8f6f 	isb	sy
 800d74e:	f3bf 8f4f 	dsb	sy
 800d752:	617b      	str	r3, [r7, #20]
}
 800d754:	bf00      	nop
 800d756:	bf00      	nop
 800d758:	e7fd      	b.n	800d756 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800d75a:	687b      	ldr	r3, [r7, #4]
 800d75c:	2b00      	cmp	r3, #0
 800d75e:	d06f      	beq.n	800d840 <pvPortMalloc+0x154>
 800d760:	4b45      	ldr	r3, [pc, #276]	@ (800d878 <pvPortMalloc+0x18c>)
 800d762:	681b      	ldr	r3, [r3, #0]
 800d764:	687a      	ldr	r2, [r7, #4]
 800d766:	429a      	cmp	r2, r3
 800d768:	d86a      	bhi.n	800d840 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800d76a:	4b44      	ldr	r3, [pc, #272]	@ (800d87c <pvPortMalloc+0x190>)
 800d76c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800d76e:	4b43      	ldr	r3, [pc, #268]	@ (800d87c <pvPortMalloc+0x190>)
 800d770:	681b      	ldr	r3, [r3, #0]
 800d772:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d774:	e004      	b.n	800d780 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800d776:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d778:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800d77a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d77c:	681b      	ldr	r3, [r3, #0]
 800d77e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d780:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d782:	685b      	ldr	r3, [r3, #4]
 800d784:	687a      	ldr	r2, [r7, #4]
 800d786:	429a      	cmp	r2, r3
 800d788:	d903      	bls.n	800d792 <pvPortMalloc+0xa6>
 800d78a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d78c:	681b      	ldr	r3, [r3, #0]
 800d78e:	2b00      	cmp	r3, #0
 800d790:	d1f1      	bne.n	800d776 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800d792:	4b37      	ldr	r3, [pc, #220]	@ (800d870 <pvPortMalloc+0x184>)
 800d794:	681b      	ldr	r3, [r3, #0]
 800d796:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d798:	429a      	cmp	r2, r3
 800d79a:	d051      	beq.n	800d840 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800d79c:	6a3b      	ldr	r3, [r7, #32]
 800d79e:	681b      	ldr	r3, [r3, #0]
 800d7a0:	2208      	movs	r2, #8
 800d7a2:	4413      	add	r3, r2
 800d7a4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800d7a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d7a8:	681a      	ldr	r2, [r3, #0]
 800d7aa:	6a3b      	ldr	r3, [r7, #32]
 800d7ac:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800d7ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d7b0:	685a      	ldr	r2, [r3, #4]
 800d7b2:	687b      	ldr	r3, [r7, #4]
 800d7b4:	1ad2      	subs	r2, r2, r3
 800d7b6:	2308      	movs	r3, #8
 800d7b8:	005b      	lsls	r3, r3, #1
 800d7ba:	429a      	cmp	r2, r3
 800d7bc:	d920      	bls.n	800d800 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800d7be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d7c0:	687b      	ldr	r3, [r7, #4]
 800d7c2:	4413      	add	r3, r2
 800d7c4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d7c6:	69bb      	ldr	r3, [r7, #24]
 800d7c8:	f003 0307 	and.w	r3, r3, #7
 800d7cc:	2b00      	cmp	r3, #0
 800d7ce:	d00b      	beq.n	800d7e8 <pvPortMalloc+0xfc>
	__asm volatile
 800d7d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d7d4:	f383 8811 	msr	BASEPRI, r3
 800d7d8:	f3bf 8f6f 	isb	sy
 800d7dc:	f3bf 8f4f 	dsb	sy
 800d7e0:	613b      	str	r3, [r7, #16]
}
 800d7e2:	bf00      	nop
 800d7e4:	bf00      	nop
 800d7e6:	e7fd      	b.n	800d7e4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800d7e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d7ea:	685a      	ldr	r2, [r3, #4]
 800d7ec:	687b      	ldr	r3, [r7, #4]
 800d7ee:	1ad2      	subs	r2, r2, r3
 800d7f0:	69bb      	ldr	r3, [r7, #24]
 800d7f2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800d7f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d7f6:	687a      	ldr	r2, [r7, #4]
 800d7f8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800d7fa:	69b8      	ldr	r0, [r7, #24]
 800d7fc:	f000 f90a 	bl	800da14 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800d800:	4b1d      	ldr	r3, [pc, #116]	@ (800d878 <pvPortMalloc+0x18c>)
 800d802:	681a      	ldr	r2, [r3, #0]
 800d804:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d806:	685b      	ldr	r3, [r3, #4]
 800d808:	1ad3      	subs	r3, r2, r3
 800d80a:	4a1b      	ldr	r2, [pc, #108]	@ (800d878 <pvPortMalloc+0x18c>)
 800d80c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800d80e:	4b1a      	ldr	r3, [pc, #104]	@ (800d878 <pvPortMalloc+0x18c>)
 800d810:	681a      	ldr	r2, [r3, #0]
 800d812:	4b1b      	ldr	r3, [pc, #108]	@ (800d880 <pvPortMalloc+0x194>)
 800d814:	681b      	ldr	r3, [r3, #0]
 800d816:	429a      	cmp	r2, r3
 800d818:	d203      	bcs.n	800d822 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800d81a:	4b17      	ldr	r3, [pc, #92]	@ (800d878 <pvPortMalloc+0x18c>)
 800d81c:	681b      	ldr	r3, [r3, #0]
 800d81e:	4a18      	ldr	r2, [pc, #96]	@ (800d880 <pvPortMalloc+0x194>)
 800d820:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800d822:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d824:	685a      	ldr	r2, [r3, #4]
 800d826:	4b13      	ldr	r3, [pc, #76]	@ (800d874 <pvPortMalloc+0x188>)
 800d828:	681b      	ldr	r3, [r3, #0]
 800d82a:	431a      	orrs	r2, r3
 800d82c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d82e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800d830:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d832:	2200      	movs	r2, #0
 800d834:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800d836:	4b13      	ldr	r3, [pc, #76]	@ (800d884 <pvPortMalloc+0x198>)
 800d838:	681b      	ldr	r3, [r3, #0]
 800d83a:	3301      	adds	r3, #1
 800d83c:	4a11      	ldr	r2, [pc, #68]	@ (800d884 <pvPortMalloc+0x198>)
 800d83e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800d840:	f7fe fce2 	bl	800c208 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800d844:	69fb      	ldr	r3, [r7, #28]
 800d846:	f003 0307 	and.w	r3, r3, #7
 800d84a:	2b00      	cmp	r3, #0
 800d84c:	d00b      	beq.n	800d866 <pvPortMalloc+0x17a>
	__asm volatile
 800d84e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d852:	f383 8811 	msr	BASEPRI, r3
 800d856:	f3bf 8f6f 	isb	sy
 800d85a:	f3bf 8f4f 	dsb	sy
 800d85e:	60fb      	str	r3, [r7, #12]
}
 800d860:	bf00      	nop
 800d862:	bf00      	nop
 800d864:	e7fd      	b.n	800d862 <pvPortMalloc+0x176>
	return pvReturn;
 800d866:	69fb      	ldr	r3, [r7, #28]
}
 800d868:	4618      	mov	r0, r3
 800d86a:	3728      	adds	r7, #40	@ 0x28
 800d86c:	46bd      	mov	sp, r7
 800d86e:	bd80      	pop	{r7, pc}
 800d870:	20005990 	.word	0x20005990
 800d874:	200059a4 	.word	0x200059a4
 800d878:	20005994 	.word	0x20005994
 800d87c:	20005988 	.word	0x20005988
 800d880:	20005998 	.word	0x20005998
 800d884:	2000599c 	.word	0x2000599c

0800d888 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800d888:	b580      	push	{r7, lr}
 800d88a:	b086      	sub	sp, #24
 800d88c:	af00      	add	r7, sp, #0
 800d88e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800d890:	687b      	ldr	r3, [r7, #4]
 800d892:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800d894:	687b      	ldr	r3, [r7, #4]
 800d896:	2b00      	cmp	r3, #0
 800d898:	d04f      	beq.n	800d93a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800d89a:	2308      	movs	r3, #8
 800d89c:	425b      	negs	r3, r3
 800d89e:	697a      	ldr	r2, [r7, #20]
 800d8a0:	4413      	add	r3, r2
 800d8a2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800d8a4:	697b      	ldr	r3, [r7, #20]
 800d8a6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800d8a8:	693b      	ldr	r3, [r7, #16]
 800d8aa:	685a      	ldr	r2, [r3, #4]
 800d8ac:	4b25      	ldr	r3, [pc, #148]	@ (800d944 <vPortFree+0xbc>)
 800d8ae:	681b      	ldr	r3, [r3, #0]
 800d8b0:	4013      	ands	r3, r2
 800d8b2:	2b00      	cmp	r3, #0
 800d8b4:	d10b      	bne.n	800d8ce <vPortFree+0x46>
	__asm volatile
 800d8b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d8ba:	f383 8811 	msr	BASEPRI, r3
 800d8be:	f3bf 8f6f 	isb	sy
 800d8c2:	f3bf 8f4f 	dsb	sy
 800d8c6:	60fb      	str	r3, [r7, #12]
}
 800d8c8:	bf00      	nop
 800d8ca:	bf00      	nop
 800d8cc:	e7fd      	b.n	800d8ca <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800d8ce:	693b      	ldr	r3, [r7, #16]
 800d8d0:	681b      	ldr	r3, [r3, #0]
 800d8d2:	2b00      	cmp	r3, #0
 800d8d4:	d00b      	beq.n	800d8ee <vPortFree+0x66>
	__asm volatile
 800d8d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d8da:	f383 8811 	msr	BASEPRI, r3
 800d8de:	f3bf 8f6f 	isb	sy
 800d8e2:	f3bf 8f4f 	dsb	sy
 800d8e6:	60bb      	str	r3, [r7, #8]
}
 800d8e8:	bf00      	nop
 800d8ea:	bf00      	nop
 800d8ec:	e7fd      	b.n	800d8ea <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800d8ee:	693b      	ldr	r3, [r7, #16]
 800d8f0:	685a      	ldr	r2, [r3, #4]
 800d8f2:	4b14      	ldr	r3, [pc, #80]	@ (800d944 <vPortFree+0xbc>)
 800d8f4:	681b      	ldr	r3, [r3, #0]
 800d8f6:	4013      	ands	r3, r2
 800d8f8:	2b00      	cmp	r3, #0
 800d8fa:	d01e      	beq.n	800d93a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800d8fc:	693b      	ldr	r3, [r7, #16]
 800d8fe:	681b      	ldr	r3, [r3, #0]
 800d900:	2b00      	cmp	r3, #0
 800d902:	d11a      	bne.n	800d93a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800d904:	693b      	ldr	r3, [r7, #16]
 800d906:	685a      	ldr	r2, [r3, #4]
 800d908:	4b0e      	ldr	r3, [pc, #56]	@ (800d944 <vPortFree+0xbc>)
 800d90a:	681b      	ldr	r3, [r3, #0]
 800d90c:	43db      	mvns	r3, r3
 800d90e:	401a      	ands	r2, r3
 800d910:	693b      	ldr	r3, [r7, #16]
 800d912:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800d914:	f7fe fc6a 	bl	800c1ec <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800d918:	693b      	ldr	r3, [r7, #16]
 800d91a:	685a      	ldr	r2, [r3, #4]
 800d91c:	4b0a      	ldr	r3, [pc, #40]	@ (800d948 <vPortFree+0xc0>)
 800d91e:	681b      	ldr	r3, [r3, #0]
 800d920:	4413      	add	r3, r2
 800d922:	4a09      	ldr	r2, [pc, #36]	@ (800d948 <vPortFree+0xc0>)
 800d924:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800d926:	6938      	ldr	r0, [r7, #16]
 800d928:	f000 f874 	bl	800da14 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800d92c:	4b07      	ldr	r3, [pc, #28]	@ (800d94c <vPortFree+0xc4>)
 800d92e:	681b      	ldr	r3, [r3, #0]
 800d930:	3301      	adds	r3, #1
 800d932:	4a06      	ldr	r2, [pc, #24]	@ (800d94c <vPortFree+0xc4>)
 800d934:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800d936:	f7fe fc67 	bl	800c208 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800d93a:	bf00      	nop
 800d93c:	3718      	adds	r7, #24
 800d93e:	46bd      	mov	sp, r7
 800d940:	bd80      	pop	{r7, pc}
 800d942:	bf00      	nop
 800d944:	200059a4 	.word	0x200059a4
 800d948:	20005994 	.word	0x20005994
 800d94c:	200059a0 	.word	0x200059a0

0800d950 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800d950:	b480      	push	{r7}
 800d952:	b085      	sub	sp, #20
 800d954:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800d956:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800d95a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800d95c:	4b27      	ldr	r3, [pc, #156]	@ (800d9fc <prvHeapInit+0xac>)
 800d95e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800d960:	68fb      	ldr	r3, [r7, #12]
 800d962:	f003 0307 	and.w	r3, r3, #7
 800d966:	2b00      	cmp	r3, #0
 800d968:	d00c      	beq.n	800d984 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800d96a:	68fb      	ldr	r3, [r7, #12]
 800d96c:	3307      	adds	r3, #7
 800d96e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d970:	68fb      	ldr	r3, [r7, #12]
 800d972:	f023 0307 	bic.w	r3, r3, #7
 800d976:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800d978:	68ba      	ldr	r2, [r7, #8]
 800d97a:	68fb      	ldr	r3, [r7, #12]
 800d97c:	1ad3      	subs	r3, r2, r3
 800d97e:	4a1f      	ldr	r2, [pc, #124]	@ (800d9fc <prvHeapInit+0xac>)
 800d980:	4413      	add	r3, r2
 800d982:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800d984:	68fb      	ldr	r3, [r7, #12]
 800d986:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800d988:	4a1d      	ldr	r2, [pc, #116]	@ (800da00 <prvHeapInit+0xb0>)
 800d98a:	687b      	ldr	r3, [r7, #4]
 800d98c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800d98e:	4b1c      	ldr	r3, [pc, #112]	@ (800da00 <prvHeapInit+0xb0>)
 800d990:	2200      	movs	r2, #0
 800d992:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800d994:	687b      	ldr	r3, [r7, #4]
 800d996:	68ba      	ldr	r2, [r7, #8]
 800d998:	4413      	add	r3, r2
 800d99a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800d99c:	2208      	movs	r2, #8
 800d99e:	68fb      	ldr	r3, [r7, #12]
 800d9a0:	1a9b      	subs	r3, r3, r2
 800d9a2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d9a4:	68fb      	ldr	r3, [r7, #12]
 800d9a6:	f023 0307 	bic.w	r3, r3, #7
 800d9aa:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800d9ac:	68fb      	ldr	r3, [r7, #12]
 800d9ae:	4a15      	ldr	r2, [pc, #84]	@ (800da04 <prvHeapInit+0xb4>)
 800d9b0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800d9b2:	4b14      	ldr	r3, [pc, #80]	@ (800da04 <prvHeapInit+0xb4>)
 800d9b4:	681b      	ldr	r3, [r3, #0]
 800d9b6:	2200      	movs	r2, #0
 800d9b8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800d9ba:	4b12      	ldr	r3, [pc, #72]	@ (800da04 <prvHeapInit+0xb4>)
 800d9bc:	681b      	ldr	r3, [r3, #0]
 800d9be:	2200      	movs	r2, #0
 800d9c0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800d9c2:	687b      	ldr	r3, [r7, #4]
 800d9c4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800d9c6:	683b      	ldr	r3, [r7, #0]
 800d9c8:	68fa      	ldr	r2, [r7, #12]
 800d9ca:	1ad2      	subs	r2, r2, r3
 800d9cc:	683b      	ldr	r3, [r7, #0]
 800d9ce:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800d9d0:	4b0c      	ldr	r3, [pc, #48]	@ (800da04 <prvHeapInit+0xb4>)
 800d9d2:	681a      	ldr	r2, [r3, #0]
 800d9d4:	683b      	ldr	r3, [r7, #0]
 800d9d6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d9d8:	683b      	ldr	r3, [r7, #0]
 800d9da:	685b      	ldr	r3, [r3, #4]
 800d9dc:	4a0a      	ldr	r2, [pc, #40]	@ (800da08 <prvHeapInit+0xb8>)
 800d9de:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d9e0:	683b      	ldr	r3, [r7, #0]
 800d9e2:	685b      	ldr	r3, [r3, #4]
 800d9e4:	4a09      	ldr	r2, [pc, #36]	@ (800da0c <prvHeapInit+0xbc>)
 800d9e6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800d9e8:	4b09      	ldr	r3, [pc, #36]	@ (800da10 <prvHeapInit+0xc0>)
 800d9ea:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800d9ee:	601a      	str	r2, [r3, #0]
}
 800d9f0:	bf00      	nop
 800d9f2:	3714      	adds	r7, #20
 800d9f4:	46bd      	mov	sp, r7
 800d9f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9fa:	4770      	bx	lr
 800d9fc:	20001d88 	.word	0x20001d88
 800da00:	20005988 	.word	0x20005988
 800da04:	20005990 	.word	0x20005990
 800da08:	20005998 	.word	0x20005998
 800da0c:	20005994 	.word	0x20005994
 800da10:	200059a4 	.word	0x200059a4

0800da14 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800da14:	b480      	push	{r7}
 800da16:	b085      	sub	sp, #20
 800da18:	af00      	add	r7, sp, #0
 800da1a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800da1c:	4b28      	ldr	r3, [pc, #160]	@ (800dac0 <prvInsertBlockIntoFreeList+0xac>)
 800da1e:	60fb      	str	r3, [r7, #12]
 800da20:	e002      	b.n	800da28 <prvInsertBlockIntoFreeList+0x14>
 800da22:	68fb      	ldr	r3, [r7, #12]
 800da24:	681b      	ldr	r3, [r3, #0]
 800da26:	60fb      	str	r3, [r7, #12]
 800da28:	68fb      	ldr	r3, [r7, #12]
 800da2a:	681b      	ldr	r3, [r3, #0]
 800da2c:	687a      	ldr	r2, [r7, #4]
 800da2e:	429a      	cmp	r2, r3
 800da30:	d8f7      	bhi.n	800da22 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800da32:	68fb      	ldr	r3, [r7, #12]
 800da34:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800da36:	68fb      	ldr	r3, [r7, #12]
 800da38:	685b      	ldr	r3, [r3, #4]
 800da3a:	68ba      	ldr	r2, [r7, #8]
 800da3c:	4413      	add	r3, r2
 800da3e:	687a      	ldr	r2, [r7, #4]
 800da40:	429a      	cmp	r2, r3
 800da42:	d108      	bne.n	800da56 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800da44:	68fb      	ldr	r3, [r7, #12]
 800da46:	685a      	ldr	r2, [r3, #4]
 800da48:	687b      	ldr	r3, [r7, #4]
 800da4a:	685b      	ldr	r3, [r3, #4]
 800da4c:	441a      	add	r2, r3
 800da4e:	68fb      	ldr	r3, [r7, #12]
 800da50:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800da52:	68fb      	ldr	r3, [r7, #12]
 800da54:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800da56:	687b      	ldr	r3, [r7, #4]
 800da58:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800da5a:	687b      	ldr	r3, [r7, #4]
 800da5c:	685b      	ldr	r3, [r3, #4]
 800da5e:	68ba      	ldr	r2, [r7, #8]
 800da60:	441a      	add	r2, r3
 800da62:	68fb      	ldr	r3, [r7, #12]
 800da64:	681b      	ldr	r3, [r3, #0]
 800da66:	429a      	cmp	r2, r3
 800da68:	d118      	bne.n	800da9c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800da6a:	68fb      	ldr	r3, [r7, #12]
 800da6c:	681a      	ldr	r2, [r3, #0]
 800da6e:	4b15      	ldr	r3, [pc, #84]	@ (800dac4 <prvInsertBlockIntoFreeList+0xb0>)
 800da70:	681b      	ldr	r3, [r3, #0]
 800da72:	429a      	cmp	r2, r3
 800da74:	d00d      	beq.n	800da92 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800da76:	687b      	ldr	r3, [r7, #4]
 800da78:	685a      	ldr	r2, [r3, #4]
 800da7a:	68fb      	ldr	r3, [r7, #12]
 800da7c:	681b      	ldr	r3, [r3, #0]
 800da7e:	685b      	ldr	r3, [r3, #4]
 800da80:	441a      	add	r2, r3
 800da82:	687b      	ldr	r3, [r7, #4]
 800da84:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800da86:	68fb      	ldr	r3, [r7, #12]
 800da88:	681b      	ldr	r3, [r3, #0]
 800da8a:	681a      	ldr	r2, [r3, #0]
 800da8c:	687b      	ldr	r3, [r7, #4]
 800da8e:	601a      	str	r2, [r3, #0]
 800da90:	e008      	b.n	800daa4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800da92:	4b0c      	ldr	r3, [pc, #48]	@ (800dac4 <prvInsertBlockIntoFreeList+0xb0>)
 800da94:	681a      	ldr	r2, [r3, #0]
 800da96:	687b      	ldr	r3, [r7, #4]
 800da98:	601a      	str	r2, [r3, #0]
 800da9a:	e003      	b.n	800daa4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800da9c:	68fb      	ldr	r3, [r7, #12]
 800da9e:	681a      	ldr	r2, [r3, #0]
 800daa0:	687b      	ldr	r3, [r7, #4]
 800daa2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800daa4:	68fa      	ldr	r2, [r7, #12]
 800daa6:	687b      	ldr	r3, [r7, #4]
 800daa8:	429a      	cmp	r2, r3
 800daaa:	d002      	beq.n	800dab2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800daac:	68fb      	ldr	r3, [r7, #12]
 800daae:	687a      	ldr	r2, [r7, #4]
 800dab0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800dab2:	bf00      	nop
 800dab4:	3714      	adds	r7, #20
 800dab6:	46bd      	mov	sp, r7
 800dab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dabc:	4770      	bx	lr
 800dabe:	bf00      	nop
 800dac0:	20005988 	.word	0x20005988
 800dac4:	20005990 	.word	0x20005990

0800dac8 <malloc>:
 800dac8:	4b02      	ldr	r3, [pc, #8]	@ (800dad4 <malloc+0xc>)
 800daca:	4601      	mov	r1, r0
 800dacc:	6818      	ldr	r0, [r3, #0]
 800dace:	f000 b82d 	b.w	800db2c <_malloc_r>
 800dad2:	bf00      	nop
 800dad4:	20000264 	.word	0x20000264

0800dad8 <free>:
 800dad8:	4b02      	ldr	r3, [pc, #8]	@ (800dae4 <free+0xc>)
 800dada:	4601      	mov	r1, r0
 800dadc:	6818      	ldr	r0, [r3, #0]
 800dade:	f001 ba33 	b.w	800ef48 <_free_r>
 800dae2:	bf00      	nop
 800dae4:	20000264 	.word	0x20000264

0800dae8 <sbrk_aligned>:
 800dae8:	b570      	push	{r4, r5, r6, lr}
 800daea:	4e0f      	ldr	r6, [pc, #60]	@ (800db28 <sbrk_aligned+0x40>)
 800daec:	460c      	mov	r4, r1
 800daee:	6831      	ldr	r1, [r6, #0]
 800daf0:	4605      	mov	r5, r0
 800daf2:	b911      	cbnz	r1, 800dafa <sbrk_aligned+0x12>
 800daf4:	f001 f9ba 	bl	800ee6c <_sbrk_r>
 800daf8:	6030      	str	r0, [r6, #0]
 800dafa:	4621      	mov	r1, r4
 800dafc:	4628      	mov	r0, r5
 800dafe:	f001 f9b5 	bl	800ee6c <_sbrk_r>
 800db02:	1c43      	adds	r3, r0, #1
 800db04:	d103      	bne.n	800db0e <sbrk_aligned+0x26>
 800db06:	f04f 34ff 	mov.w	r4, #4294967295
 800db0a:	4620      	mov	r0, r4
 800db0c:	bd70      	pop	{r4, r5, r6, pc}
 800db0e:	1cc4      	adds	r4, r0, #3
 800db10:	f024 0403 	bic.w	r4, r4, #3
 800db14:	42a0      	cmp	r0, r4
 800db16:	d0f8      	beq.n	800db0a <sbrk_aligned+0x22>
 800db18:	1a21      	subs	r1, r4, r0
 800db1a:	4628      	mov	r0, r5
 800db1c:	f001 f9a6 	bl	800ee6c <_sbrk_r>
 800db20:	3001      	adds	r0, #1
 800db22:	d1f2      	bne.n	800db0a <sbrk_aligned+0x22>
 800db24:	e7ef      	b.n	800db06 <sbrk_aligned+0x1e>
 800db26:	bf00      	nop
 800db28:	200059a8 	.word	0x200059a8

0800db2c <_malloc_r>:
 800db2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800db30:	1ccd      	adds	r5, r1, #3
 800db32:	f025 0503 	bic.w	r5, r5, #3
 800db36:	3508      	adds	r5, #8
 800db38:	2d0c      	cmp	r5, #12
 800db3a:	bf38      	it	cc
 800db3c:	250c      	movcc	r5, #12
 800db3e:	2d00      	cmp	r5, #0
 800db40:	4606      	mov	r6, r0
 800db42:	db01      	blt.n	800db48 <_malloc_r+0x1c>
 800db44:	42a9      	cmp	r1, r5
 800db46:	d904      	bls.n	800db52 <_malloc_r+0x26>
 800db48:	230c      	movs	r3, #12
 800db4a:	6033      	str	r3, [r6, #0]
 800db4c:	2000      	movs	r0, #0
 800db4e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800db52:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800dc28 <_malloc_r+0xfc>
 800db56:	f000 f869 	bl	800dc2c <__malloc_lock>
 800db5a:	f8d8 3000 	ldr.w	r3, [r8]
 800db5e:	461c      	mov	r4, r3
 800db60:	bb44      	cbnz	r4, 800dbb4 <_malloc_r+0x88>
 800db62:	4629      	mov	r1, r5
 800db64:	4630      	mov	r0, r6
 800db66:	f7ff ffbf 	bl	800dae8 <sbrk_aligned>
 800db6a:	1c43      	adds	r3, r0, #1
 800db6c:	4604      	mov	r4, r0
 800db6e:	d158      	bne.n	800dc22 <_malloc_r+0xf6>
 800db70:	f8d8 4000 	ldr.w	r4, [r8]
 800db74:	4627      	mov	r7, r4
 800db76:	2f00      	cmp	r7, #0
 800db78:	d143      	bne.n	800dc02 <_malloc_r+0xd6>
 800db7a:	2c00      	cmp	r4, #0
 800db7c:	d04b      	beq.n	800dc16 <_malloc_r+0xea>
 800db7e:	6823      	ldr	r3, [r4, #0]
 800db80:	4639      	mov	r1, r7
 800db82:	4630      	mov	r0, r6
 800db84:	eb04 0903 	add.w	r9, r4, r3
 800db88:	f001 f970 	bl	800ee6c <_sbrk_r>
 800db8c:	4581      	cmp	r9, r0
 800db8e:	d142      	bne.n	800dc16 <_malloc_r+0xea>
 800db90:	6821      	ldr	r1, [r4, #0]
 800db92:	1a6d      	subs	r5, r5, r1
 800db94:	4629      	mov	r1, r5
 800db96:	4630      	mov	r0, r6
 800db98:	f7ff ffa6 	bl	800dae8 <sbrk_aligned>
 800db9c:	3001      	adds	r0, #1
 800db9e:	d03a      	beq.n	800dc16 <_malloc_r+0xea>
 800dba0:	6823      	ldr	r3, [r4, #0]
 800dba2:	442b      	add	r3, r5
 800dba4:	6023      	str	r3, [r4, #0]
 800dba6:	f8d8 3000 	ldr.w	r3, [r8]
 800dbaa:	685a      	ldr	r2, [r3, #4]
 800dbac:	bb62      	cbnz	r2, 800dc08 <_malloc_r+0xdc>
 800dbae:	f8c8 7000 	str.w	r7, [r8]
 800dbb2:	e00f      	b.n	800dbd4 <_malloc_r+0xa8>
 800dbb4:	6822      	ldr	r2, [r4, #0]
 800dbb6:	1b52      	subs	r2, r2, r5
 800dbb8:	d420      	bmi.n	800dbfc <_malloc_r+0xd0>
 800dbba:	2a0b      	cmp	r2, #11
 800dbbc:	d917      	bls.n	800dbee <_malloc_r+0xc2>
 800dbbe:	1961      	adds	r1, r4, r5
 800dbc0:	42a3      	cmp	r3, r4
 800dbc2:	6025      	str	r5, [r4, #0]
 800dbc4:	bf18      	it	ne
 800dbc6:	6059      	strne	r1, [r3, #4]
 800dbc8:	6863      	ldr	r3, [r4, #4]
 800dbca:	bf08      	it	eq
 800dbcc:	f8c8 1000 	streq.w	r1, [r8]
 800dbd0:	5162      	str	r2, [r4, r5]
 800dbd2:	604b      	str	r3, [r1, #4]
 800dbd4:	4630      	mov	r0, r6
 800dbd6:	f000 f82f 	bl	800dc38 <__malloc_unlock>
 800dbda:	f104 000b 	add.w	r0, r4, #11
 800dbde:	1d23      	adds	r3, r4, #4
 800dbe0:	f020 0007 	bic.w	r0, r0, #7
 800dbe4:	1ac2      	subs	r2, r0, r3
 800dbe6:	bf1c      	itt	ne
 800dbe8:	1a1b      	subne	r3, r3, r0
 800dbea:	50a3      	strne	r3, [r4, r2]
 800dbec:	e7af      	b.n	800db4e <_malloc_r+0x22>
 800dbee:	6862      	ldr	r2, [r4, #4]
 800dbf0:	42a3      	cmp	r3, r4
 800dbf2:	bf0c      	ite	eq
 800dbf4:	f8c8 2000 	streq.w	r2, [r8]
 800dbf8:	605a      	strne	r2, [r3, #4]
 800dbfa:	e7eb      	b.n	800dbd4 <_malloc_r+0xa8>
 800dbfc:	4623      	mov	r3, r4
 800dbfe:	6864      	ldr	r4, [r4, #4]
 800dc00:	e7ae      	b.n	800db60 <_malloc_r+0x34>
 800dc02:	463c      	mov	r4, r7
 800dc04:	687f      	ldr	r7, [r7, #4]
 800dc06:	e7b6      	b.n	800db76 <_malloc_r+0x4a>
 800dc08:	461a      	mov	r2, r3
 800dc0a:	685b      	ldr	r3, [r3, #4]
 800dc0c:	42a3      	cmp	r3, r4
 800dc0e:	d1fb      	bne.n	800dc08 <_malloc_r+0xdc>
 800dc10:	2300      	movs	r3, #0
 800dc12:	6053      	str	r3, [r2, #4]
 800dc14:	e7de      	b.n	800dbd4 <_malloc_r+0xa8>
 800dc16:	230c      	movs	r3, #12
 800dc18:	6033      	str	r3, [r6, #0]
 800dc1a:	4630      	mov	r0, r6
 800dc1c:	f000 f80c 	bl	800dc38 <__malloc_unlock>
 800dc20:	e794      	b.n	800db4c <_malloc_r+0x20>
 800dc22:	6005      	str	r5, [r0, #0]
 800dc24:	e7d6      	b.n	800dbd4 <_malloc_r+0xa8>
 800dc26:	bf00      	nop
 800dc28:	200059ac 	.word	0x200059ac

0800dc2c <__malloc_lock>:
 800dc2c:	4801      	ldr	r0, [pc, #4]	@ (800dc34 <__malloc_lock+0x8>)
 800dc2e:	f001 b96a 	b.w	800ef06 <__retarget_lock_acquire_recursive>
 800dc32:	bf00      	nop
 800dc34:	20005af0 	.word	0x20005af0

0800dc38 <__malloc_unlock>:
 800dc38:	4801      	ldr	r0, [pc, #4]	@ (800dc40 <__malloc_unlock+0x8>)
 800dc3a:	f001 b965 	b.w	800ef08 <__retarget_lock_release_recursive>
 800dc3e:	bf00      	nop
 800dc40:	20005af0 	.word	0x20005af0

0800dc44 <realloc>:
 800dc44:	4b02      	ldr	r3, [pc, #8]	@ (800dc50 <realloc+0xc>)
 800dc46:	460a      	mov	r2, r1
 800dc48:	4601      	mov	r1, r0
 800dc4a:	6818      	ldr	r0, [r3, #0]
 800dc4c:	f000 b802 	b.w	800dc54 <_realloc_r>
 800dc50:	20000264 	.word	0x20000264

0800dc54 <_realloc_r>:
 800dc54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dc58:	4680      	mov	r8, r0
 800dc5a:	4615      	mov	r5, r2
 800dc5c:	460c      	mov	r4, r1
 800dc5e:	b921      	cbnz	r1, 800dc6a <_realloc_r+0x16>
 800dc60:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800dc64:	4611      	mov	r1, r2
 800dc66:	f7ff bf61 	b.w	800db2c <_malloc_r>
 800dc6a:	b92a      	cbnz	r2, 800dc78 <_realloc_r+0x24>
 800dc6c:	f001 f96c 	bl	800ef48 <_free_r>
 800dc70:	2400      	movs	r4, #0
 800dc72:	4620      	mov	r0, r4
 800dc74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dc78:	f002 f9ae 	bl	800ffd8 <_malloc_usable_size_r>
 800dc7c:	4285      	cmp	r5, r0
 800dc7e:	4606      	mov	r6, r0
 800dc80:	d802      	bhi.n	800dc88 <_realloc_r+0x34>
 800dc82:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800dc86:	d8f4      	bhi.n	800dc72 <_realloc_r+0x1e>
 800dc88:	4629      	mov	r1, r5
 800dc8a:	4640      	mov	r0, r8
 800dc8c:	f7ff ff4e 	bl	800db2c <_malloc_r>
 800dc90:	4607      	mov	r7, r0
 800dc92:	2800      	cmp	r0, #0
 800dc94:	d0ec      	beq.n	800dc70 <_realloc_r+0x1c>
 800dc96:	42b5      	cmp	r5, r6
 800dc98:	462a      	mov	r2, r5
 800dc9a:	4621      	mov	r1, r4
 800dc9c:	bf28      	it	cs
 800dc9e:	4632      	movcs	r2, r6
 800dca0:	f001 f93b 	bl	800ef1a <memcpy>
 800dca4:	4621      	mov	r1, r4
 800dca6:	4640      	mov	r0, r8
 800dca8:	f001 f94e 	bl	800ef48 <_free_r>
 800dcac:	463c      	mov	r4, r7
 800dcae:	e7e0      	b.n	800dc72 <_realloc_r+0x1e>

0800dcb0 <sulp>:
 800dcb0:	b570      	push	{r4, r5, r6, lr}
 800dcb2:	4604      	mov	r4, r0
 800dcb4:	460d      	mov	r5, r1
 800dcb6:	ec45 4b10 	vmov	d0, r4, r5
 800dcba:	4616      	mov	r6, r2
 800dcbc:	f002 f84e 	bl	800fd5c <__ulp>
 800dcc0:	ec51 0b10 	vmov	r0, r1, d0
 800dcc4:	b17e      	cbz	r6, 800dce6 <sulp+0x36>
 800dcc6:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800dcca:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800dcce:	2b00      	cmp	r3, #0
 800dcd0:	dd09      	ble.n	800dce6 <sulp+0x36>
 800dcd2:	051b      	lsls	r3, r3, #20
 800dcd4:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800dcd8:	2400      	movs	r4, #0
 800dcda:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800dcde:	4622      	mov	r2, r4
 800dce0:	462b      	mov	r3, r5
 800dce2:	f7f2 fca1 	bl	8000628 <__aeabi_dmul>
 800dce6:	ec41 0b10 	vmov	d0, r0, r1
 800dcea:	bd70      	pop	{r4, r5, r6, pc}
 800dcec:	0000      	movs	r0, r0
	...

0800dcf0 <_strtod_l>:
 800dcf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dcf4:	b09f      	sub	sp, #124	@ 0x7c
 800dcf6:	460c      	mov	r4, r1
 800dcf8:	9217      	str	r2, [sp, #92]	@ 0x5c
 800dcfa:	2200      	movs	r2, #0
 800dcfc:	921a      	str	r2, [sp, #104]	@ 0x68
 800dcfe:	9005      	str	r0, [sp, #20]
 800dd00:	f04f 0a00 	mov.w	sl, #0
 800dd04:	f04f 0b00 	mov.w	fp, #0
 800dd08:	460a      	mov	r2, r1
 800dd0a:	9219      	str	r2, [sp, #100]	@ 0x64
 800dd0c:	7811      	ldrb	r1, [r2, #0]
 800dd0e:	292b      	cmp	r1, #43	@ 0x2b
 800dd10:	d04a      	beq.n	800dda8 <_strtod_l+0xb8>
 800dd12:	d838      	bhi.n	800dd86 <_strtod_l+0x96>
 800dd14:	290d      	cmp	r1, #13
 800dd16:	d832      	bhi.n	800dd7e <_strtod_l+0x8e>
 800dd18:	2908      	cmp	r1, #8
 800dd1a:	d832      	bhi.n	800dd82 <_strtod_l+0x92>
 800dd1c:	2900      	cmp	r1, #0
 800dd1e:	d03b      	beq.n	800dd98 <_strtod_l+0xa8>
 800dd20:	2200      	movs	r2, #0
 800dd22:	920b      	str	r2, [sp, #44]	@ 0x2c
 800dd24:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800dd26:	782a      	ldrb	r2, [r5, #0]
 800dd28:	2a30      	cmp	r2, #48	@ 0x30
 800dd2a:	f040 80b3 	bne.w	800de94 <_strtod_l+0x1a4>
 800dd2e:	786a      	ldrb	r2, [r5, #1]
 800dd30:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800dd34:	2a58      	cmp	r2, #88	@ 0x58
 800dd36:	d16e      	bne.n	800de16 <_strtod_l+0x126>
 800dd38:	9302      	str	r3, [sp, #8]
 800dd3a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800dd3c:	9301      	str	r3, [sp, #4]
 800dd3e:	ab1a      	add	r3, sp, #104	@ 0x68
 800dd40:	9300      	str	r3, [sp, #0]
 800dd42:	4a8e      	ldr	r2, [pc, #568]	@ (800df7c <_strtod_l+0x28c>)
 800dd44:	9805      	ldr	r0, [sp, #20]
 800dd46:	ab1b      	add	r3, sp, #108	@ 0x6c
 800dd48:	a919      	add	r1, sp, #100	@ 0x64
 800dd4a:	f001 f9af 	bl	800f0ac <__gethex>
 800dd4e:	f010 060f 	ands.w	r6, r0, #15
 800dd52:	4604      	mov	r4, r0
 800dd54:	d005      	beq.n	800dd62 <_strtod_l+0x72>
 800dd56:	2e06      	cmp	r6, #6
 800dd58:	d128      	bne.n	800ddac <_strtod_l+0xbc>
 800dd5a:	3501      	adds	r5, #1
 800dd5c:	2300      	movs	r3, #0
 800dd5e:	9519      	str	r5, [sp, #100]	@ 0x64
 800dd60:	930b      	str	r3, [sp, #44]	@ 0x2c
 800dd62:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800dd64:	2b00      	cmp	r3, #0
 800dd66:	f040 858e 	bne.w	800e886 <_strtod_l+0xb96>
 800dd6a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800dd6c:	b1cb      	cbz	r3, 800dda2 <_strtod_l+0xb2>
 800dd6e:	4652      	mov	r2, sl
 800dd70:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800dd74:	ec43 2b10 	vmov	d0, r2, r3
 800dd78:	b01f      	add	sp, #124	@ 0x7c
 800dd7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dd7e:	2920      	cmp	r1, #32
 800dd80:	d1ce      	bne.n	800dd20 <_strtod_l+0x30>
 800dd82:	3201      	adds	r2, #1
 800dd84:	e7c1      	b.n	800dd0a <_strtod_l+0x1a>
 800dd86:	292d      	cmp	r1, #45	@ 0x2d
 800dd88:	d1ca      	bne.n	800dd20 <_strtod_l+0x30>
 800dd8a:	2101      	movs	r1, #1
 800dd8c:	910b      	str	r1, [sp, #44]	@ 0x2c
 800dd8e:	1c51      	adds	r1, r2, #1
 800dd90:	9119      	str	r1, [sp, #100]	@ 0x64
 800dd92:	7852      	ldrb	r2, [r2, #1]
 800dd94:	2a00      	cmp	r2, #0
 800dd96:	d1c5      	bne.n	800dd24 <_strtod_l+0x34>
 800dd98:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800dd9a:	9419      	str	r4, [sp, #100]	@ 0x64
 800dd9c:	2b00      	cmp	r3, #0
 800dd9e:	f040 8570 	bne.w	800e882 <_strtod_l+0xb92>
 800dda2:	4652      	mov	r2, sl
 800dda4:	465b      	mov	r3, fp
 800dda6:	e7e5      	b.n	800dd74 <_strtod_l+0x84>
 800dda8:	2100      	movs	r1, #0
 800ddaa:	e7ef      	b.n	800dd8c <_strtod_l+0x9c>
 800ddac:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800ddae:	b13a      	cbz	r2, 800ddc0 <_strtod_l+0xd0>
 800ddb0:	2135      	movs	r1, #53	@ 0x35
 800ddb2:	a81c      	add	r0, sp, #112	@ 0x70
 800ddb4:	f002 f8cc 	bl	800ff50 <__copybits>
 800ddb8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800ddba:	9805      	ldr	r0, [sp, #20]
 800ddbc:	f001 fc9a 	bl	800f6f4 <_Bfree>
 800ddc0:	3e01      	subs	r6, #1
 800ddc2:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800ddc4:	2e04      	cmp	r6, #4
 800ddc6:	d806      	bhi.n	800ddd6 <_strtod_l+0xe6>
 800ddc8:	e8df f006 	tbb	[pc, r6]
 800ddcc:	201d0314 	.word	0x201d0314
 800ddd0:	14          	.byte	0x14
 800ddd1:	00          	.byte	0x00
 800ddd2:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800ddd6:	05e1      	lsls	r1, r4, #23
 800ddd8:	bf48      	it	mi
 800ddda:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800ddde:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800dde2:	0d1b      	lsrs	r3, r3, #20
 800dde4:	051b      	lsls	r3, r3, #20
 800dde6:	2b00      	cmp	r3, #0
 800dde8:	d1bb      	bne.n	800dd62 <_strtod_l+0x72>
 800ddea:	f001 f861 	bl	800eeb0 <__errno>
 800ddee:	2322      	movs	r3, #34	@ 0x22
 800ddf0:	6003      	str	r3, [r0, #0]
 800ddf2:	e7b6      	b.n	800dd62 <_strtod_l+0x72>
 800ddf4:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800ddf8:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800ddfc:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800de00:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800de04:	e7e7      	b.n	800ddd6 <_strtod_l+0xe6>
 800de06:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 800df84 <_strtod_l+0x294>
 800de0a:	e7e4      	b.n	800ddd6 <_strtod_l+0xe6>
 800de0c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800de10:	f04f 3aff 	mov.w	sl, #4294967295
 800de14:	e7df      	b.n	800ddd6 <_strtod_l+0xe6>
 800de16:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800de18:	1c5a      	adds	r2, r3, #1
 800de1a:	9219      	str	r2, [sp, #100]	@ 0x64
 800de1c:	785b      	ldrb	r3, [r3, #1]
 800de1e:	2b30      	cmp	r3, #48	@ 0x30
 800de20:	d0f9      	beq.n	800de16 <_strtod_l+0x126>
 800de22:	2b00      	cmp	r3, #0
 800de24:	d09d      	beq.n	800dd62 <_strtod_l+0x72>
 800de26:	2301      	movs	r3, #1
 800de28:	9309      	str	r3, [sp, #36]	@ 0x24
 800de2a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800de2c:	930c      	str	r3, [sp, #48]	@ 0x30
 800de2e:	2300      	movs	r3, #0
 800de30:	9308      	str	r3, [sp, #32]
 800de32:	930a      	str	r3, [sp, #40]	@ 0x28
 800de34:	461f      	mov	r7, r3
 800de36:	220a      	movs	r2, #10
 800de38:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800de3a:	7805      	ldrb	r5, [r0, #0]
 800de3c:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800de40:	b2d9      	uxtb	r1, r3
 800de42:	2909      	cmp	r1, #9
 800de44:	d928      	bls.n	800de98 <_strtod_l+0x1a8>
 800de46:	494e      	ldr	r1, [pc, #312]	@ (800df80 <_strtod_l+0x290>)
 800de48:	2201      	movs	r2, #1
 800de4a:	f000 ff60 	bl	800ed0e <strncmp>
 800de4e:	2800      	cmp	r0, #0
 800de50:	d032      	beq.n	800deb8 <_strtod_l+0x1c8>
 800de52:	2000      	movs	r0, #0
 800de54:	462a      	mov	r2, r5
 800de56:	4681      	mov	r9, r0
 800de58:	463d      	mov	r5, r7
 800de5a:	4603      	mov	r3, r0
 800de5c:	2a65      	cmp	r2, #101	@ 0x65
 800de5e:	d001      	beq.n	800de64 <_strtod_l+0x174>
 800de60:	2a45      	cmp	r2, #69	@ 0x45
 800de62:	d114      	bne.n	800de8e <_strtod_l+0x19e>
 800de64:	b91d      	cbnz	r5, 800de6e <_strtod_l+0x17e>
 800de66:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800de68:	4302      	orrs	r2, r0
 800de6a:	d095      	beq.n	800dd98 <_strtod_l+0xa8>
 800de6c:	2500      	movs	r5, #0
 800de6e:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800de70:	1c62      	adds	r2, r4, #1
 800de72:	9219      	str	r2, [sp, #100]	@ 0x64
 800de74:	7862      	ldrb	r2, [r4, #1]
 800de76:	2a2b      	cmp	r2, #43	@ 0x2b
 800de78:	d077      	beq.n	800df6a <_strtod_l+0x27a>
 800de7a:	2a2d      	cmp	r2, #45	@ 0x2d
 800de7c:	d07b      	beq.n	800df76 <_strtod_l+0x286>
 800de7e:	f04f 0c00 	mov.w	ip, #0
 800de82:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800de86:	2909      	cmp	r1, #9
 800de88:	f240 8082 	bls.w	800df90 <_strtod_l+0x2a0>
 800de8c:	9419      	str	r4, [sp, #100]	@ 0x64
 800de8e:	f04f 0800 	mov.w	r8, #0
 800de92:	e0a2      	b.n	800dfda <_strtod_l+0x2ea>
 800de94:	2300      	movs	r3, #0
 800de96:	e7c7      	b.n	800de28 <_strtod_l+0x138>
 800de98:	2f08      	cmp	r7, #8
 800de9a:	bfd5      	itete	le
 800de9c:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800de9e:	9908      	ldrgt	r1, [sp, #32]
 800dea0:	fb02 3301 	mlale	r3, r2, r1, r3
 800dea4:	fb02 3301 	mlagt	r3, r2, r1, r3
 800dea8:	f100 0001 	add.w	r0, r0, #1
 800deac:	bfd4      	ite	le
 800deae:	930a      	strle	r3, [sp, #40]	@ 0x28
 800deb0:	9308      	strgt	r3, [sp, #32]
 800deb2:	3701      	adds	r7, #1
 800deb4:	9019      	str	r0, [sp, #100]	@ 0x64
 800deb6:	e7bf      	b.n	800de38 <_strtod_l+0x148>
 800deb8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800deba:	1c5a      	adds	r2, r3, #1
 800debc:	9219      	str	r2, [sp, #100]	@ 0x64
 800debe:	785a      	ldrb	r2, [r3, #1]
 800dec0:	b37f      	cbz	r7, 800df22 <_strtod_l+0x232>
 800dec2:	4681      	mov	r9, r0
 800dec4:	463d      	mov	r5, r7
 800dec6:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800deca:	2b09      	cmp	r3, #9
 800decc:	d912      	bls.n	800def4 <_strtod_l+0x204>
 800dece:	2301      	movs	r3, #1
 800ded0:	e7c4      	b.n	800de5c <_strtod_l+0x16c>
 800ded2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ded4:	1c5a      	adds	r2, r3, #1
 800ded6:	9219      	str	r2, [sp, #100]	@ 0x64
 800ded8:	785a      	ldrb	r2, [r3, #1]
 800deda:	3001      	adds	r0, #1
 800dedc:	2a30      	cmp	r2, #48	@ 0x30
 800dede:	d0f8      	beq.n	800ded2 <_strtod_l+0x1e2>
 800dee0:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800dee4:	2b08      	cmp	r3, #8
 800dee6:	f200 84d3 	bhi.w	800e890 <_strtod_l+0xba0>
 800deea:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800deec:	930c      	str	r3, [sp, #48]	@ 0x30
 800deee:	4681      	mov	r9, r0
 800def0:	2000      	movs	r0, #0
 800def2:	4605      	mov	r5, r0
 800def4:	3a30      	subs	r2, #48	@ 0x30
 800def6:	f100 0301 	add.w	r3, r0, #1
 800defa:	d02a      	beq.n	800df52 <_strtod_l+0x262>
 800defc:	4499      	add	r9, r3
 800defe:	eb00 0c05 	add.w	ip, r0, r5
 800df02:	462b      	mov	r3, r5
 800df04:	210a      	movs	r1, #10
 800df06:	4563      	cmp	r3, ip
 800df08:	d10d      	bne.n	800df26 <_strtod_l+0x236>
 800df0a:	1c69      	adds	r1, r5, #1
 800df0c:	4401      	add	r1, r0
 800df0e:	4428      	add	r0, r5
 800df10:	2808      	cmp	r0, #8
 800df12:	dc16      	bgt.n	800df42 <_strtod_l+0x252>
 800df14:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800df16:	230a      	movs	r3, #10
 800df18:	fb03 2300 	mla	r3, r3, r0, r2
 800df1c:	930a      	str	r3, [sp, #40]	@ 0x28
 800df1e:	2300      	movs	r3, #0
 800df20:	e018      	b.n	800df54 <_strtod_l+0x264>
 800df22:	4638      	mov	r0, r7
 800df24:	e7da      	b.n	800dedc <_strtod_l+0x1ec>
 800df26:	2b08      	cmp	r3, #8
 800df28:	f103 0301 	add.w	r3, r3, #1
 800df2c:	dc03      	bgt.n	800df36 <_strtod_l+0x246>
 800df2e:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800df30:	434e      	muls	r6, r1
 800df32:	960a      	str	r6, [sp, #40]	@ 0x28
 800df34:	e7e7      	b.n	800df06 <_strtod_l+0x216>
 800df36:	2b10      	cmp	r3, #16
 800df38:	bfde      	ittt	le
 800df3a:	9e08      	ldrle	r6, [sp, #32]
 800df3c:	434e      	mulle	r6, r1
 800df3e:	9608      	strle	r6, [sp, #32]
 800df40:	e7e1      	b.n	800df06 <_strtod_l+0x216>
 800df42:	280f      	cmp	r0, #15
 800df44:	dceb      	bgt.n	800df1e <_strtod_l+0x22e>
 800df46:	9808      	ldr	r0, [sp, #32]
 800df48:	230a      	movs	r3, #10
 800df4a:	fb03 2300 	mla	r3, r3, r0, r2
 800df4e:	9308      	str	r3, [sp, #32]
 800df50:	e7e5      	b.n	800df1e <_strtod_l+0x22e>
 800df52:	4629      	mov	r1, r5
 800df54:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800df56:	1c50      	adds	r0, r2, #1
 800df58:	9019      	str	r0, [sp, #100]	@ 0x64
 800df5a:	7852      	ldrb	r2, [r2, #1]
 800df5c:	4618      	mov	r0, r3
 800df5e:	460d      	mov	r5, r1
 800df60:	e7b1      	b.n	800dec6 <_strtod_l+0x1d6>
 800df62:	f04f 0900 	mov.w	r9, #0
 800df66:	2301      	movs	r3, #1
 800df68:	e77d      	b.n	800de66 <_strtod_l+0x176>
 800df6a:	f04f 0c00 	mov.w	ip, #0
 800df6e:	1ca2      	adds	r2, r4, #2
 800df70:	9219      	str	r2, [sp, #100]	@ 0x64
 800df72:	78a2      	ldrb	r2, [r4, #2]
 800df74:	e785      	b.n	800de82 <_strtod_l+0x192>
 800df76:	f04f 0c01 	mov.w	ip, #1
 800df7a:	e7f8      	b.n	800df6e <_strtod_l+0x27e>
 800df7c:	08011208 	.word	0x08011208
 800df80:	080111e4 	.word	0x080111e4
 800df84:	7ff00000 	.word	0x7ff00000
 800df88:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800df8a:	1c51      	adds	r1, r2, #1
 800df8c:	9119      	str	r1, [sp, #100]	@ 0x64
 800df8e:	7852      	ldrb	r2, [r2, #1]
 800df90:	2a30      	cmp	r2, #48	@ 0x30
 800df92:	d0f9      	beq.n	800df88 <_strtod_l+0x298>
 800df94:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800df98:	2908      	cmp	r1, #8
 800df9a:	f63f af78 	bhi.w	800de8e <_strtod_l+0x19e>
 800df9e:	3a30      	subs	r2, #48	@ 0x30
 800dfa0:	920e      	str	r2, [sp, #56]	@ 0x38
 800dfa2:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800dfa4:	920f      	str	r2, [sp, #60]	@ 0x3c
 800dfa6:	f04f 080a 	mov.w	r8, #10
 800dfaa:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800dfac:	1c56      	adds	r6, r2, #1
 800dfae:	9619      	str	r6, [sp, #100]	@ 0x64
 800dfb0:	7852      	ldrb	r2, [r2, #1]
 800dfb2:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800dfb6:	f1be 0f09 	cmp.w	lr, #9
 800dfba:	d939      	bls.n	800e030 <_strtod_l+0x340>
 800dfbc:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800dfbe:	1a76      	subs	r6, r6, r1
 800dfc0:	2e08      	cmp	r6, #8
 800dfc2:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800dfc6:	dc03      	bgt.n	800dfd0 <_strtod_l+0x2e0>
 800dfc8:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800dfca:	4588      	cmp	r8, r1
 800dfcc:	bfa8      	it	ge
 800dfce:	4688      	movge	r8, r1
 800dfd0:	f1bc 0f00 	cmp.w	ip, #0
 800dfd4:	d001      	beq.n	800dfda <_strtod_l+0x2ea>
 800dfd6:	f1c8 0800 	rsb	r8, r8, #0
 800dfda:	2d00      	cmp	r5, #0
 800dfdc:	d14e      	bne.n	800e07c <_strtod_l+0x38c>
 800dfde:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800dfe0:	4308      	orrs	r0, r1
 800dfe2:	f47f aebe 	bne.w	800dd62 <_strtod_l+0x72>
 800dfe6:	2b00      	cmp	r3, #0
 800dfe8:	f47f aed6 	bne.w	800dd98 <_strtod_l+0xa8>
 800dfec:	2a69      	cmp	r2, #105	@ 0x69
 800dfee:	d028      	beq.n	800e042 <_strtod_l+0x352>
 800dff0:	dc25      	bgt.n	800e03e <_strtod_l+0x34e>
 800dff2:	2a49      	cmp	r2, #73	@ 0x49
 800dff4:	d025      	beq.n	800e042 <_strtod_l+0x352>
 800dff6:	2a4e      	cmp	r2, #78	@ 0x4e
 800dff8:	f47f aece 	bne.w	800dd98 <_strtod_l+0xa8>
 800dffc:	499b      	ldr	r1, [pc, #620]	@ (800e26c <_strtod_l+0x57c>)
 800dffe:	a819      	add	r0, sp, #100	@ 0x64
 800e000:	f001 fa76 	bl	800f4f0 <__match>
 800e004:	2800      	cmp	r0, #0
 800e006:	f43f aec7 	beq.w	800dd98 <_strtod_l+0xa8>
 800e00a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800e00c:	781b      	ldrb	r3, [r3, #0]
 800e00e:	2b28      	cmp	r3, #40	@ 0x28
 800e010:	d12e      	bne.n	800e070 <_strtod_l+0x380>
 800e012:	4997      	ldr	r1, [pc, #604]	@ (800e270 <_strtod_l+0x580>)
 800e014:	aa1c      	add	r2, sp, #112	@ 0x70
 800e016:	a819      	add	r0, sp, #100	@ 0x64
 800e018:	f001 fa7e 	bl	800f518 <__hexnan>
 800e01c:	2805      	cmp	r0, #5
 800e01e:	d127      	bne.n	800e070 <_strtod_l+0x380>
 800e020:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800e022:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800e026:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800e02a:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800e02e:	e698      	b.n	800dd62 <_strtod_l+0x72>
 800e030:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800e032:	fb08 2101 	mla	r1, r8, r1, r2
 800e036:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800e03a:	920e      	str	r2, [sp, #56]	@ 0x38
 800e03c:	e7b5      	b.n	800dfaa <_strtod_l+0x2ba>
 800e03e:	2a6e      	cmp	r2, #110	@ 0x6e
 800e040:	e7da      	b.n	800dff8 <_strtod_l+0x308>
 800e042:	498c      	ldr	r1, [pc, #560]	@ (800e274 <_strtod_l+0x584>)
 800e044:	a819      	add	r0, sp, #100	@ 0x64
 800e046:	f001 fa53 	bl	800f4f0 <__match>
 800e04a:	2800      	cmp	r0, #0
 800e04c:	f43f aea4 	beq.w	800dd98 <_strtod_l+0xa8>
 800e050:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800e052:	4989      	ldr	r1, [pc, #548]	@ (800e278 <_strtod_l+0x588>)
 800e054:	3b01      	subs	r3, #1
 800e056:	a819      	add	r0, sp, #100	@ 0x64
 800e058:	9319      	str	r3, [sp, #100]	@ 0x64
 800e05a:	f001 fa49 	bl	800f4f0 <__match>
 800e05e:	b910      	cbnz	r0, 800e066 <_strtod_l+0x376>
 800e060:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800e062:	3301      	adds	r3, #1
 800e064:	9319      	str	r3, [sp, #100]	@ 0x64
 800e066:	f8df b220 	ldr.w	fp, [pc, #544]	@ 800e288 <_strtod_l+0x598>
 800e06a:	f04f 0a00 	mov.w	sl, #0
 800e06e:	e678      	b.n	800dd62 <_strtod_l+0x72>
 800e070:	4882      	ldr	r0, [pc, #520]	@ (800e27c <_strtod_l+0x58c>)
 800e072:	f000 ff61 	bl	800ef38 <nan>
 800e076:	ec5b ab10 	vmov	sl, fp, d0
 800e07a:	e672      	b.n	800dd62 <_strtod_l+0x72>
 800e07c:	eba8 0309 	sub.w	r3, r8, r9
 800e080:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800e082:	9309      	str	r3, [sp, #36]	@ 0x24
 800e084:	2f00      	cmp	r7, #0
 800e086:	bf08      	it	eq
 800e088:	462f      	moveq	r7, r5
 800e08a:	2d10      	cmp	r5, #16
 800e08c:	462c      	mov	r4, r5
 800e08e:	bfa8      	it	ge
 800e090:	2410      	movge	r4, #16
 800e092:	f7f2 fa4f 	bl	8000534 <__aeabi_ui2d>
 800e096:	2d09      	cmp	r5, #9
 800e098:	4682      	mov	sl, r0
 800e09a:	468b      	mov	fp, r1
 800e09c:	dc13      	bgt.n	800e0c6 <_strtod_l+0x3d6>
 800e09e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e0a0:	2b00      	cmp	r3, #0
 800e0a2:	f43f ae5e 	beq.w	800dd62 <_strtod_l+0x72>
 800e0a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e0a8:	dd78      	ble.n	800e19c <_strtod_l+0x4ac>
 800e0aa:	2b16      	cmp	r3, #22
 800e0ac:	dc5f      	bgt.n	800e16e <_strtod_l+0x47e>
 800e0ae:	4974      	ldr	r1, [pc, #464]	@ (800e280 <_strtod_l+0x590>)
 800e0b0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800e0b4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e0b8:	4652      	mov	r2, sl
 800e0ba:	465b      	mov	r3, fp
 800e0bc:	f7f2 fab4 	bl	8000628 <__aeabi_dmul>
 800e0c0:	4682      	mov	sl, r0
 800e0c2:	468b      	mov	fp, r1
 800e0c4:	e64d      	b.n	800dd62 <_strtod_l+0x72>
 800e0c6:	4b6e      	ldr	r3, [pc, #440]	@ (800e280 <_strtod_l+0x590>)
 800e0c8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800e0cc:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800e0d0:	f7f2 faaa 	bl	8000628 <__aeabi_dmul>
 800e0d4:	4682      	mov	sl, r0
 800e0d6:	9808      	ldr	r0, [sp, #32]
 800e0d8:	468b      	mov	fp, r1
 800e0da:	f7f2 fa2b 	bl	8000534 <__aeabi_ui2d>
 800e0de:	4602      	mov	r2, r0
 800e0e0:	460b      	mov	r3, r1
 800e0e2:	4650      	mov	r0, sl
 800e0e4:	4659      	mov	r1, fp
 800e0e6:	f7f2 f8e9 	bl	80002bc <__adddf3>
 800e0ea:	2d0f      	cmp	r5, #15
 800e0ec:	4682      	mov	sl, r0
 800e0ee:	468b      	mov	fp, r1
 800e0f0:	ddd5      	ble.n	800e09e <_strtod_l+0x3ae>
 800e0f2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e0f4:	1b2c      	subs	r4, r5, r4
 800e0f6:	441c      	add	r4, r3
 800e0f8:	2c00      	cmp	r4, #0
 800e0fa:	f340 8096 	ble.w	800e22a <_strtod_l+0x53a>
 800e0fe:	f014 030f 	ands.w	r3, r4, #15
 800e102:	d00a      	beq.n	800e11a <_strtod_l+0x42a>
 800e104:	495e      	ldr	r1, [pc, #376]	@ (800e280 <_strtod_l+0x590>)
 800e106:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800e10a:	4652      	mov	r2, sl
 800e10c:	465b      	mov	r3, fp
 800e10e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e112:	f7f2 fa89 	bl	8000628 <__aeabi_dmul>
 800e116:	4682      	mov	sl, r0
 800e118:	468b      	mov	fp, r1
 800e11a:	f034 040f 	bics.w	r4, r4, #15
 800e11e:	d073      	beq.n	800e208 <_strtod_l+0x518>
 800e120:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800e124:	dd48      	ble.n	800e1b8 <_strtod_l+0x4c8>
 800e126:	2400      	movs	r4, #0
 800e128:	46a0      	mov	r8, r4
 800e12a:	940a      	str	r4, [sp, #40]	@ 0x28
 800e12c:	46a1      	mov	r9, r4
 800e12e:	9a05      	ldr	r2, [sp, #20]
 800e130:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800e288 <_strtod_l+0x598>
 800e134:	2322      	movs	r3, #34	@ 0x22
 800e136:	6013      	str	r3, [r2, #0]
 800e138:	f04f 0a00 	mov.w	sl, #0
 800e13c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e13e:	2b00      	cmp	r3, #0
 800e140:	f43f ae0f 	beq.w	800dd62 <_strtod_l+0x72>
 800e144:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800e146:	9805      	ldr	r0, [sp, #20]
 800e148:	f001 fad4 	bl	800f6f4 <_Bfree>
 800e14c:	9805      	ldr	r0, [sp, #20]
 800e14e:	4649      	mov	r1, r9
 800e150:	f001 fad0 	bl	800f6f4 <_Bfree>
 800e154:	9805      	ldr	r0, [sp, #20]
 800e156:	4641      	mov	r1, r8
 800e158:	f001 facc 	bl	800f6f4 <_Bfree>
 800e15c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800e15e:	9805      	ldr	r0, [sp, #20]
 800e160:	f001 fac8 	bl	800f6f4 <_Bfree>
 800e164:	9805      	ldr	r0, [sp, #20]
 800e166:	4621      	mov	r1, r4
 800e168:	f001 fac4 	bl	800f6f4 <_Bfree>
 800e16c:	e5f9      	b.n	800dd62 <_strtod_l+0x72>
 800e16e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e170:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800e174:	4293      	cmp	r3, r2
 800e176:	dbbc      	blt.n	800e0f2 <_strtod_l+0x402>
 800e178:	4c41      	ldr	r4, [pc, #260]	@ (800e280 <_strtod_l+0x590>)
 800e17a:	f1c5 050f 	rsb	r5, r5, #15
 800e17e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800e182:	4652      	mov	r2, sl
 800e184:	465b      	mov	r3, fp
 800e186:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e18a:	f7f2 fa4d 	bl	8000628 <__aeabi_dmul>
 800e18e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e190:	1b5d      	subs	r5, r3, r5
 800e192:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800e196:	e9d4 2300 	ldrd	r2, r3, [r4]
 800e19a:	e78f      	b.n	800e0bc <_strtod_l+0x3cc>
 800e19c:	3316      	adds	r3, #22
 800e19e:	dba8      	blt.n	800e0f2 <_strtod_l+0x402>
 800e1a0:	4b37      	ldr	r3, [pc, #220]	@ (800e280 <_strtod_l+0x590>)
 800e1a2:	eba9 0808 	sub.w	r8, r9, r8
 800e1a6:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800e1aa:	e9d8 2300 	ldrd	r2, r3, [r8]
 800e1ae:	4650      	mov	r0, sl
 800e1b0:	4659      	mov	r1, fp
 800e1b2:	f7f2 fb63 	bl	800087c <__aeabi_ddiv>
 800e1b6:	e783      	b.n	800e0c0 <_strtod_l+0x3d0>
 800e1b8:	4b32      	ldr	r3, [pc, #200]	@ (800e284 <_strtod_l+0x594>)
 800e1ba:	9308      	str	r3, [sp, #32]
 800e1bc:	2300      	movs	r3, #0
 800e1be:	1124      	asrs	r4, r4, #4
 800e1c0:	4650      	mov	r0, sl
 800e1c2:	4659      	mov	r1, fp
 800e1c4:	461e      	mov	r6, r3
 800e1c6:	2c01      	cmp	r4, #1
 800e1c8:	dc21      	bgt.n	800e20e <_strtod_l+0x51e>
 800e1ca:	b10b      	cbz	r3, 800e1d0 <_strtod_l+0x4e0>
 800e1cc:	4682      	mov	sl, r0
 800e1ce:	468b      	mov	fp, r1
 800e1d0:	492c      	ldr	r1, [pc, #176]	@ (800e284 <_strtod_l+0x594>)
 800e1d2:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800e1d6:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800e1da:	4652      	mov	r2, sl
 800e1dc:	465b      	mov	r3, fp
 800e1de:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e1e2:	f7f2 fa21 	bl	8000628 <__aeabi_dmul>
 800e1e6:	4b28      	ldr	r3, [pc, #160]	@ (800e288 <_strtod_l+0x598>)
 800e1e8:	460a      	mov	r2, r1
 800e1ea:	400b      	ands	r3, r1
 800e1ec:	4927      	ldr	r1, [pc, #156]	@ (800e28c <_strtod_l+0x59c>)
 800e1ee:	428b      	cmp	r3, r1
 800e1f0:	4682      	mov	sl, r0
 800e1f2:	d898      	bhi.n	800e126 <_strtod_l+0x436>
 800e1f4:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800e1f8:	428b      	cmp	r3, r1
 800e1fa:	bf86      	itte	hi
 800e1fc:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 800e290 <_strtod_l+0x5a0>
 800e200:	f04f 3aff 	movhi.w	sl, #4294967295
 800e204:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800e208:	2300      	movs	r3, #0
 800e20a:	9308      	str	r3, [sp, #32]
 800e20c:	e07a      	b.n	800e304 <_strtod_l+0x614>
 800e20e:	07e2      	lsls	r2, r4, #31
 800e210:	d505      	bpl.n	800e21e <_strtod_l+0x52e>
 800e212:	9b08      	ldr	r3, [sp, #32]
 800e214:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e218:	f7f2 fa06 	bl	8000628 <__aeabi_dmul>
 800e21c:	2301      	movs	r3, #1
 800e21e:	9a08      	ldr	r2, [sp, #32]
 800e220:	3208      	adds	r2, #8
 800e222:	3601      	adds	r6, #1
 800e224:	1064      	asrs	r4, r4, #1
 800e226:	9208      	str	r2, [sp, #32]
 800e228:	e7cd      	b.n	800e1c6 <_strtod_l+0x4d6>
 800e22a:	d0ed      	beq.n	800e208 <_strtod_l+0x518>
 800e22c:	4264      	negs	r4, r4
 800e22e:	f014 020f 	ands.w	r2, r4, #15
 800e232:	d00a      	beq.n	800e24a <_strtod_l+0x55a>
 800e234:	4b12      	ldr	r3, [pc, #72]	@ (800e280 <_strtod_l+0x590>)
 800e236:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e23a:	4650      	mov	r0, sl
 800e23c:	4659      	mov	r1, fp
 800e23e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e242:	f7f2 fb1b 	bl	800087c <__aeabi_ddiv>
 800e246:	4682      	mov	sl, r0
 800e248:	468b      	mov	fp, r1
 800e24a:	1124      	asrs	r4, r4, #4
 800e24c:	d0dc      	beq.n	800e208 <_strtod_l+0x518>
 800e24e:	2c1f      	cmp	r4, #31
 800e250:	dd20      	ble.n	800e294 <_strtod_l+0x5a4>
 800e252:	2400      	movs	r4, #0
 800e254:	46a0      	mov	r8, r4
 800e256:	940a      	str	r4, [sp, #40]	@ 0x28
 800e258:	46a1      	mov	r9, r4
 800e25a:	9a05      	ldr	r2, [sp, #20]
 800e25c:	2322      	movs	r3, #34	@ 0x22
 800e25e:	f04f 0a00 	mov.w	sl, #0
 800e262:	f04f 0b00 	mov.w	fp, #0
 800e266:	6013      	str	r3, [r2, #0]
 800e268:	e768      	b.n	800e13c <_strtod_l+0x44c>
 800e26a:	bf00      	nop
 800e26c:	080111ef 	.word	0x080111ef
 800e270:	080111f4 	.word	0x080111f4
 800e274:	080111e6 	.word	0x080111e6
 800e278:	080111e9 	.word	0x080111e9
 800e27c:	0801159e 	.word	0x0801159e
 800e280:	08011468 	.word	0x08011468
 800e284:	08011440 	.word	0x08011440
 800e288:	7ff00000 	.word	0x7ff00000
 800e28c:	7ca00000 	.word	0x7ca00000
 800e290:	7fefffff 	.word	0x7fefffff
 800e294:	f014 0310 	ands.w	r3, r4, #16
 800e298:	bf18      	it	ne
 800e29a:	236a      	movne	r3, #106	@ 0x6a
 800e29c:	4ea9      	ldr	r6, [pc, #676]	@ (800e544 <_strtod_l+0x854>)
 800e29e:	9308      	str	r3, [sp, #32]
 800e2a0:	4650      	mov	r0, sl
 800e2a2:	4659      	mov	r1, fp
 800e2a4:	2300      	movs	r3, #0
 800e2a6:	07e2      	lsls	r2, r4, #31
 800e2a8:	d504      	bpl.n	800e2b4 <_strtod_l+0x5c4>
 800e2aa:	e9d6 2300 	ldrd	r2, r3, [r6]
 800e2ae:	f7f2 f9bb 	bl	8000628 <__aeabi_dmul>
 800e2b2:	2301      	movs	r3, #1
 800e2b4:	1064      	asrs	r4, r4, #1
 800e2b6:	f106 0608 	add.w	r6, r6, #8
 800e2ba:	d1f4      	bne.n	800e2a6 <_strtod_l+0x5b6>
 800e2bc:	b10b      	cbz	r3, 800e2c2 <_strtod_l+0x5d2>
 800e2be:	4682      	mov	sl, r0
 800e2c0:	468b      	mov	fp, r1
 800e2c2:	9b08      	ldr	r3, [sp, #32]
 800e2c4:	b1b3      	cbz	r3, 800e2f4 <_strtod_l+0x604>
 800e2c6:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800e2ca:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800e2ce:	2b00      	cmp	r3, #0
 800e2d0:	4659      	mov	r1, fp
 800e2d2:	dd0f      	ble.n	800e2f4 <_strtod_l+0x604>
 800e2d4:	2b1f      	cmp	r3, #31
 800e2d6:	dd55      	ble.n	800e384 <_strtod_l+0x694>
 800e2d8:	2b34      	cmp	r3, #52	@ 0x34
 800e2da:	bfde      	ittt	le
 800e2dc:	f04f 33ff 	movle.w	r3, #4294967295
 800e2e0:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800e2e4:	4093      	lslle	r3, r2
 800e2e6:	f04f 0a00 	mov.w	sl, #0
 800e2ea:	bfcc      	ite	gt
 800e2ec:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800e2f0:	ea03 0b01 	andle.w	fp, r3, r1
 800e2f4:	2200      	movs	r2, #0
 800e2f6:	2300      	movs	r3, #0
 800e2f8:	4650      	mov	r0, sl
 800e2fa:	4659      	mov	r1, fp
 800e2fc:	f7f2 fbfc 	bl	8000af8 <__aeabi_dcmpeq>
 800e300:	2800      	cmp	r0, #0
 800e302:	d1a6      	bne.n	800e252 <_strtod_l+0x562>
 800e304:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e306:	9300      	str	r3, [sp, #0]
 800e308:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800e30a:	9805      	ldr	r0, [sp, #20]
 800e30c:	462b      	mov	r3, r5
 800e30e:	463a      	mov	r2, r7
 800e310:	f001 fa58 	bl	800f7c4 <__s2b>
 800e314:	900a      	str	r0, [sp, #40]	@ 0x28
 800e316:	2800      	cmp	r0, #0
 800e318:	f43f af05 	beq.w	800e126 <_strtod_l+0x436>
 800e31c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e31e:	2a00      	cmp	r2, #0
 800e320:	eba9 0308 	sub.w	r3, r9, r8
 800e324:	bfa8      	it	ge
 800e326:	2300      	movge	r3, #0
 800e328:	9312      	str	r3, [sp, #72]	@ 0x48
 800e32a:	2400      	movs	r4, #0
 800e32c:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800e330:	9316      	str	r3, [sp, #88]	@ 0x58
 800e332:	46a0      	mov	r8, r4
 800e334:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e336:	9805      	ldr	r0, [sp, #20]
 800e338:	6859      	ldr	r1, [r3, #4]
 800e33a:	f001 f99b 	bl	800f674 <_Balloc>
 800e33e:	4681      	mov	r9, r0
 800e340:	2800      	cmp	r0, #0
 800e342:	f43f aef4 	beq.w	800e12e <_strtod_l+0x43e>
 800e346:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e348:	691a      	ldr	r2, [r3, #16]
 800e34a:	3202      	adds	r2, #2
 800e34c:	f103 010c 	add.w	r1, r3, #12
 800e350:	0092      	lsls	r2, r2, #2
 800e352:	300c      	adds	r0, #12
 800e354:	f000 fde1 	bl	800ef1a <memcpy>
 800e358:	ec4b ab10 	vmov	d0, sl, fp
 800e35c:	9805      	ldr	r0, [sp, #20]
 800e35e:	aa1c      	add	r2, sp, #112	@ 0x70
 800e360:	a91b      	add	r1, sp, #108	@ 0x6c
 800e362:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800e366:	f001 fd69 	bl	800fe3c <__d2b>
 800e36a:	901a      	str	r0, [sp, #104]	@ 0x68
 800e36c:	2800      	cmp	r0, #0
 800e36e:	f43f aede 	beq.w	800e12e <_strtod_l+0x43e>
 800e372:	9805      	ldr	r0, [sp, #20]
 800e374:	2101      	movs	r1, #1
 800e376:	f001 fabb 	bl	800f8f0 <__i2b>
 800e37a:	4680      	mov	r8, r0
 800e37c:	b948      	cbnz	r0, 800e392 <_strtod_l+0x6a2>
 800e37e:	f04f 0800 	mov.w	r8, #0
 800e382:	e6d4      	b.n	800e12e <_strtod_l+0x43e>
 800e384:	f04f 32ff 	mov.w	r2, #4294967295
 800e388:	fa02 f303 	lsl.w	r3, r2, r3
 800e38c:	ea03 0a0a 	and.w	sl, r3, sl
 800e390:	e7b0      	b.n	800e2f4 <_strtod_l+0x604>
 800e392:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800e394:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800e396:	2d00      	cmp	r5, #0
 800e398:	bfab      	itete	ge
 800e39a:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800e39c:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800e39e:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800e3a0:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800e3a2:	bfac      	ite	ge
 800e3a4:	18ef      	addge	r7, r5, r3
 800e3a6:	1b5e      	sublt	r6, r3, r5
 800e3a8:	9b08      	ldr	r3, [sp, #32]
 800e3aa:	1aed      	subs	r5, r5, r3
 800e3ac:	4415      	add	r5, r2
 800e3ae:	4b66      	ldr	r3, [pc, #408]	@ (800e548 <_strtod_l+0x858>)
 800e3b0:	3d01      	subs	r5, #1
 800e3b2:	429d      	cmp	r5, r3
 800e3b4:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800e3b8:	da50      	bge.n	800e45c <_strtod_l+0x76c>
 800e3ba:	1b5b      	subs	r3, r3, r5
 800e3bc:	2b1f      	cmp	r3, #31
 800e3be:	eba2 0203 	sub.w	r2, r2, r3
 800e3c2:	f04f 0101 	mov.w	r1, #1
 800e3c6:	dc3d      	bgt.n	800e444 <_strtod_l+0x754>
 800e3c8:	fa01 f303 	lsl.w	r3, r1, r3
 800e3cc:	9313      	str	r3, [sp, #76]	@ 0x4c
 800e3ce:	2300      	movs	r3, #0
 800e3d0:	9310      	str	r3, [sp, #64]	@ 0x40
 800e3d2:	18bd      	adds	r5, r7, r2
 800e3d4:	9b08      	ldr	r3, [sp, #32]
 800e3d6:	42af      	cmp	r7, r5
 800e3d8:	4416      	add	r6, r2
 800e3da:	441e      	add	r6, r3
 800e3dc:	463b      	mov	r3, r7
 800e3de:	bfa8      	it	ge
 800e3e0:	462b      	movge	r3, r5
 800e3e2:	42b3      	cmp	r3, r6
 800e3e4:	bfa8      	it	ge
 800e3e6:	4633      	movge	r3, r6
 800e3e8:	2b00      	cmp	r3, #0
 800e3ea:	bfc2      	ittt	gt
 800e3ec:	1aed      	subgt	r5, r5, r3
 800e3ee:	1af6      	subgt	r6, r6, r3
 800e3f0:	1aff      	subgt	r7, r7, r3
 800e3f2:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800e3f4:	2b00      	cmp	r3, #0
 800e3f6:	dd16      	ble.n	800e426 <_strtod_l+0x736>
 800e3f8:	4641      	mov	r1, r8
 800e3fa:	9805      	ldr	r0, [sp, #20]
 800e3fc:	461a      	mov	r2, r3
 800e3fe:	f001 fb37 	bl	800fa70 <__pow5mult>
 800e402:	4680      	mov	r8, r0
 800e404:	2800      	cmp	r0, #0
 800e406:	d0ba      	beq.n	800e37e <_strtod_l+0x68e>
 800e408:	4601      	mov	r1, r0
 800e40a:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800e40c:	9805      	ldr	r0, [sp, #20]
 800e40e:	f001 fa85 	bl	800f91c <__multiply>
 800e412:	900e      	str	r0, [sp, #56]	@ 0x38
 800e414:	2800      	cmp	r0, #0
 800e416:	f43f ae8a 	beq.w	800e12e <_strtod_l+0x43e>
 800e41a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800e41c:	9805      	ldr	r0, [sp, #20]
 800e41e:	f001 f969 	bl	800f6f4 <_Bfree>
 800e422:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e424:	931a      	str	r3, [sp, #104]	@ 0x68
 800e426:	2d00      	cmp	r5, #0
 800e428:	dc1d      	bgt.n	800e466 <_strtod_l+0x776>
 800e42a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e42c:	2b00      	cmp	r3, #0
 800e42e:	dd23      	ble.n	800e478 <_strtod_l+0x788>
 800e430:	4649      	mov	r1, r9
 800e432:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800e434:	9805      	ldr	r0, [sp, #20]
 800e436:	f001 fb1b 	bl	800fa70 <__pow5mult>
 800e43a:	4681      	mov	r9, r0
 800e43c:	b9e0      	cbnz	r0, 800e478 <_strtod_l+0x788>
 800e43e:	f04f 0900 	mov.w	r9, #0
 800e442:	e674      	b.n	800e12e <_strtod_l+0x43e>
 800e444:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800e448:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800e44c:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800e450:	35e2      	adds	r5, #226	@ 0xe2
 800e452:	fa01 f305 	lsl.w	r3, r1, r5
 800e456:	9310      	str	r3, [sp, #64]	@ 0x40
 800e458:	9113      	str	r1, [sp, #76]	@ 0x4c
 800e45a:	e7ba      	b.n	800e3d2 <_strtod_l+0x6e2>
 800e45c:	2300      	movs	r3, #0
 800e45e:	9310      	str	r3, [sp, #64]	@ 0x40
 800e460:	2301      	movs	r3, #1
 800e462:	9313      	str	r3, [sp, #76]	@ 0x4c
 800e464:	e7b5      	b.n	800e3d2 <_strtod_l+0x6e2>
 800e466:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800e468:	9805      	ldr	r0, [sp, #20]
 800e46a:	462a      	mov	r2, r5
 800e46c:	f001 fb5a 	bl	800fb24 <__lshift>
 800e470:	901a      	str	r0, [sp, #104]	@ 0x68
 800e472:	2800      	cmp	r0, #0
 800e474:	d1d9      	bne.n	800e42a <_strtod_l+0x73a>
 800e476:	e65a      	b.n	800e12e <_strtod_l+0x43e>
 800e478:	2e00      	cmp	r6, #0
 800e47a:	dd07      	ble.n	800e48c <_strtod_l+0x79c>
 800e47c:	4649      	mov	r1, r9
 800e47e:	9805      	ldr	r0, [sp, #20]
 800e480:	4632      	mov	r2, r6
 800e482:	f001 fb4f 	bl	800fb24 <__lshift>
 800e486:	4681      	mov	r9, r0
 800e488:	2800      	cmp	r0, #0
 800e48a:	d0d8      	beq.n	800e43e <_strtod_l+0x74e>
 800e48c:	2f00      	cmp	r7, #0
 800e48e:	dd08      	ble.n	800e4a2 <_strtod_l+0x7b2>
 800e490:	4641      	mov	r1, r8
 800e492:	9805      	ldr	r0, [sp, #20]
 800e494:	463a      	mov	r2, r7
 800e496:	f001 fb45 	bl	800fb24 <__lshift>
 800e49a:	4680      	mov	r8, r0
 800e49c:	2800      	cmp	r0, #0
 800e49e:	f43f ae46 	beq.w	800e12e <_strtod_l+0x43e>
 800e4a2:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800e4a4:	9805      	ldr	r0, [sp, #20]
 800e4a6:	464a      	mov	r2, r9
 800e4a8:	f001 fbc4 	bl	800fc34 <__mdiff>
 800e4ac:	4604      	mov	r4, r0
 800e4ae:	2800      	cmp	r0, #0
 800e4b0:	f43f ae3d 	beq.w	800e12e <_strtod_l+0x43e>
 800e4b4:	68c3      	ldr	r3, [r0, #12]
 800e4b6:	930f      	str	r3, [sp, #60]	@ 0x3c
 800e4b8:	2300      	movs	r3, #0
 800e4ba:	60c3      	str	r3, [r0, #12]
 800e4bc:	4641      	mov	r1, r8
 800e4be:	f001 fb9d 	bl	800fbfc <__mcmp>
 800e4c2:	2800      	cmp	r0, #0
 800e4c4:	da46      	bge.n	800e554 <_strtod_l+0x864>
 800e4c6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e4c8:	ea53 030a 	orrs.w	r3, r3, sl
 800e4cc:	d16c      	bne.n	800e5a8 <_strtod_l+0x8b8>
 800e4ce:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800e4d2:	2b00      	cmp	r3, #0
 800e4d4:	d168      	bne.n	800e5a8 <_strtod_l+0x8b8>
 800e4d6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800e4da:	0d1b      	lsrs	r3, r3, #20
 800e4dc:	051b      	lsls	r3, r3, #20
 800e4de:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800e4e2:	d961      	bls.n	800e5a8 <_strtod_l+0x8b8>
 800e4e4:	6963      	ldr	r3, [r4, #20]
 800e4e6:	b913      	cbnz	r3, 800e4ee <_strtod_l+0x7fe>
 800e4e8:	6923      	ldr	r3, [r4, #16]
 800e4ea:	2b01      	cmp	r3, #1
 800e4ec:	dd5c      	ble.n	800e5a8 <_strtod_l+0x8b8>
 800e4ee:	4621      	mov	r1, r4
 800e4f0:	2201      	movs	r2, #1
 800e4f2:	9805      	ldr	r0, [sp, #20]
 800e4f4:	f001 fb16 	bl	800fb24 <__lshift>
 800e4f8:	4641      	mov	r1, r8
 800e4fa:	4604      	mov	r4, r0
 800e4fc:	f001 fb7e 	bl	800fbfc <__mcmp>
 800e500:	2800      	cmp	r0, #0
 800e502:	dd51      	ble.n	800e5a8 <_strtod_l+0x8b8>
 800e504:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800e508:	9a08      	ldr	r2, [sp, #32]
 800e50a:	0d1b      	lsrs	r3, r3, #20
 800e50c:	051b      	lsls	r3, r3, #20
 800e50e:	2a00      	cmp	r2, #0
 800e510:	d06b      	beq.n	800e5ea <_strtod_l+0x8fa>
 800e512:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800e516:	d868      	bhi.n	800e5ea <_strtod_l+0x8fa>
 800e518:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800e51c:	f67f ae9d 	bls.w	800e25a <_strtod_l+0x56a>
 800e520:	4b0a      	ldr	r3, [pc, #40]	@ (800e54c <_strtod_l+0x85c>)
 800e522:	4650      	mov	r0, sl
 800e524:	4659      	mov	r1, fp
 800e526:	2200      	movs	r2, #0
 800e528:	f7f2 f87e 	bl	8000628 <__aeabi_dmul>
 800e52c:	4b08      	ldr	r3, [pc, #32]	@ (800e550 <_strtod_l+0x860>)
 800e52e:	400b      	ands	r3, r1
 800e530:	4682      	mov	sl, r0
 800e532:	468b      	mov	fp, r1
 800e534:	2b00      	cmp	r3, #0
 800e536:	f47f ae05 	bne.w	800e144 <_strtod_l+0x454>
 800e53a:	9a05      	ldr	r2, [sp, #20]
 800e53c:	2322      	movs	r3, #34	@ 0x22
 800e53e:	6013      	str	r3, [r2, #0]
 800e540:	e600      	b.n	800e144 <_strtod_l+0x454>
 800e542:	bf00      	nop
 800e544:	08011220 	.word	0x08011220
 800e548:	fffffc02 	.word	0xfffffc02
 800e54c:	39500000 	.word	0x39500000
 800e550:	7ff00000 	.word	0x7ff00000
 800e554:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800e558:	d165      	bne.n	800e626 <_strtod_l+0x936>
 800e55a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800e55c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800e560:	b35a      	cbz	r2, 800e5ba <_strtod_l+0x8ca>
 800e562:	4a9f      	ldr	r2, [pc, #636]	@ (800e7e0 <_strtod_l+0xaf0>)
 800e564:	4293      	cmp	r3, r2
 800e566:	d12b      	bne.n	800e5c0 <_strtod_l+0x8d0>
 800e568:	9b08      	ldr	r3, [sp, #32]
 800e56a:	4651      	mov	r1, sl
 800e56c:	b303      	cbz	r3, 800e5b0 <_strtod_l+0x8c0>
 800e56e:	4b9d      	ldr	r3, [pc, #628]	@ (800e7e4 <_strtod_l+0xaf4>)
 800e570:	465a      	mov	r2, fp
 800e572:	4013      	ands	r3, r2
 800e574:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800e578:	f04f 32ff 	mov.w	r2, #4294967295
 800e57c:	d81b      	bhi.n	800e5b6 <_strtod_l+0x8c6>
 800e57e:	0d1b      	lsrs	r3, r3, #20
 800e580:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800e584:	fa02 f303 	lsl.w	r3, r2, r3
 800e588:	4299      	cmp	r1, r3
 800e58a:	d119      	bne.n	800e5c0 <_strtod_l+0x8d0>
 800e58c:	4b96      	ldr	r3, [pc, #600]	@ (800e7e8 <_strtod_l+0xaf8>)
 800e58e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e590:	429a      	cmp	r2, r3
 800e592:	d102      	bne.n	800e59a <_strtod_l+0x8aa>
 800e594:	3101      	adds	r1, #1
 800e596:	f43f adca 	beq.w	800e12e <_strtod_l+0x43e>
 800e59a:	4b92      	ldr	r3, [pc, #584]	@ (800e7e4 <_strtod_l+0xaf4>)
 800e59c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e59e:	401a      	ands	r2, r3
 800e5a0:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800e5a4:	f04f 0a00 	mov.w	sl, #0
 800e5a8:	9b08      	ldr	r3, [sp, #32]
 800e5aa:	2b00      	cmp	r3, #0
 800e5ac:	d1b8      	bne.n	800e520 <_strtod_l+0x830>
 800e5ae:	e5c9      	b.n	800e144 <_strtod_l+0x454>
 800e5b0:	f04f 33ff 	mov.w	r3, #4294967295
 800e5b4:	e7e8      	b.n	800e588 <_strtod_l+0x898>
 800e5b6:	4613      	mov	r3, r2
 800e5b8:	e7e6      	b.n	800e588 <_strtod_l+0x898>
 800e5ba:	ea53 030a 	orrs.w	r3, r3, sl
 800e5be:	d0a1      	beq.n	800e504 <_strtod_l+0x814>
 800e5c0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800e5c2:	b1db      	cbz	r3, 800e5fc <_strtod_l+0x90c>
 800e5c4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e5c6:	4213      	tst	r3, r2
 800e5c8:	d0ee      	beq.n	800e5a8 <_strtod_l+0x8b8>
 800e5ca:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e5cc:	9a08      	ldr	r2, [sp, #32]
 800e5ce:	4650      	mov	r0, sl
 800e5d0:	4659      	mov	r1, fp
 800e5d2:	b1bb      	cbz	r3, 800e604 <_strtod_l+0x914>
 800e5d4:	f7ff fb6c 	bl	800dcb0 <sulp>
 800e5d8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e5dc:	ec53 2b10 	vmov	r2, r3, d0
 800e5e0:	f7f1 fe6c 	bl	80002bc <__adddf3>
 800e5e4:	4682      	mov	sl, r0
 800e5e6:	468b      	mov	fp, r1
 800e5e8:	e7de      	b.n	800e5a8 <_strtod_l+0x8b8>
 800e5ea:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800e5ee:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800e5f2:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800e5f6:	f04f 3aff 	mov.w	sl, #4294967295
 800e5fa:	e7d5      	b.n	800e5a8 <_strtod_l+0x8b8>
 800e5fc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800e5fe:	ea13 0f0a 	tst.w	r3, sl
 800e602:	e7e1      	b.n	800e5c8 <_strtod_l+0x8d8>
 800e604:	f7ff fb54 	bl	800dcb0 <sulp>
 800e608:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e60c:	ec53 2b10 	vmov	r2, r3, d0
 800e610:	f7f1 fe52 	bl	80002b8 <__aeabi_dsub>
 800e614:	2200      	movs	r2, #0
 800e616:	2300      	movs	r3, #0
 800e618:	4682      	mov	sl, r0
 800e61a:	468b      	mov	fp, r1
 800e61c:	f7f2 fa6c 	bl	8000af8 <__aeabi_dcmpeq>
 800e620:	2800      	cmp	r0, #0
 800e622:	d0c1      	beq.n	800e5a8 <_strtod_l+0x8b8>
 800e624:	e619      	b.n	800e25a <_strtod_l+0x56a>
 800e626:	4641      	mov	r1, r8
 800e628:	4620      	mov	r0, r4
 800e62a:	f001 fc5f 	bl	800feec <__ratio>
 800e62e:	ec57 6b10 	vmov	r6, r7, d0
 800e632:	2200      	movs	r2, #0
 800e634:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800e638:	4630      	mov	r0, r6
 800e63a:	4639      	mov	r1, r7
 800e63c:	f7f2 fa70 	bl	8000b20 <__aeabi_dcmple>
 800e640:	2800      	cmp	r0, #0
 800e642:	d06f      	beq.n	800e724 <_strtod_l+0xa34>
 800e644:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e646:	2b00      	cmp	r3, #0
 800e648:	d17a      	bne.n	800e740 <_strtod_l+0xa50>
 800e64a:	f1ba 0f00 	cmp.w	sl, #0
 800e64e:	d158      	bne.n	800e702 <_strtod_l+0xa12>
 800e650:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e652:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e656:	2b00      	cmp	r3, #0
 800e658:	d15a      	bne.n	800e710 <_strtod_l+0xa20>
 800e65a:	4b64      	ldr	r3, [pc, #400]	@ (800e7ec <_strtod_l+0xafc>)
 800e65c:	2200      	movs	r2, #0
 800e65e:	4630      	mov	r0, r6
 800e660:	4639      	mov	r1, r7
 800e662:	f7f2 fa53 	bl	8000b0c <__aeabi_dcmplt>
 800e666:	2800      	cmp	r0, #0
 800e668:	d159      	bne.n	800e71e <_strtod_l+0xa2e>
 800e66a:	4630      	mov	r0, r6
 800e66c:	4639      	mov	r1, r7
 800e66e:	4b60      	ldr	r3, [pc, #384]	@ (800e7f0 <_strtod_l+0xb00>)
 800e670:	2200      	movs	r2, #0
 800e672:	f7f1 ffd9 	bl	8000628 <__aeabi_dmul>
 800e676:	4606      	mov	r6, r0
 800e678:	460f      	mov	r7, r1
 800e67a:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800e67e:	9606      	str	r6, [sp, #24]
 800e680:	9307      	str	r3, [sp, #28]
 800e682:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800e686:	4d57      	ldr	r5, [pc, #348]	@ (800e7e4 <_strtod_l+0xaf4>)
 800e688:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800e68c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e68e:	401d      	ands	r5, r3
 800e690:	4b58      	ldr	r3, [pc, #352]	@ (800e7f4 <_strtod_l+0xb04>)
 800e692:	429d      	cmp	r5, r3
 800e694:	f040 80b2 	bne.w	800e7fc <_strtod_l+0xb0c>
 800e698:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e69a:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800e69e:	ec4b ab10 	vmov	d0, sl, fp
 800e6a2:	f001 fb5b 	bl	800fd5c <__ulp>
 800e6a6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800e6aa:	ec51 0b10 	vmov	r0, r1, d0
 800e6ae:	f7f1 ffbb 	bl	8000628 <__aeabi_dmul>
 800e6b2:	4652      	mov	r2, sl
 800e6b4:	465b      	mov	r3, fp
 800e6b6:	f7f1 fe01 	bl	80002bc <__adddf3>
 800e6ba:	460b      	mov	r3, r1
 800e6bc:	4949      	ldr	r1, [pc, #292]	@ (800e7e4 <_strtod_l+0xaf4>)
 800e6be:	4a4e      	ldr	r2, [pc, #312]	@ (800e7f8 <_strtod_l+0xb08>)
 800e6c0:	4019      	ands	r1, r3
 800e6c2:	4291      	cmp	r1, r2
 800e6c4:	4682      	mov	sl, r0
 800e6c6:	d942      	bls.n	800e74e <_strtod_l+0xa5e>
 800e6c8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800e6ca:	4b47      	ldr	r3, [pc, #284]	@ (800e7e8 <_strtod_l+0xaf8>)
 800e6cc:	429a      	cmp	r2, r3
 800e6ce:	d103      	bne.n	800e6d8 <_strtod_l+0x9e8>
 800e6d0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800e6d2:	3301      	adds	r3, #1
 800e6d4:	f43f ad2b 	beq.w	800e12e <_strtod_l+0x43e>
 800e6d8:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800e7e8 <_strtod_l+0xaf8>
 800e6dc:	f04f 3aff 	mov.w	sl, #4294967295
 800e6e0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800e6e2:	9805      	ldr	r0, [sp, #20]
 800e6e4:	f001 f806 	bl	800f6f4 <_Bfree>
 800e6e8:	9805      	ldr	r0, [sp, #20]
 800e6ea:	4649      	mov	r1, r9
 800e6ec:	f001 f802 	bl	800f6f4 <_Bfree>
 800e6f0:	9805      	ldr	r0, [sp, #20]
 800e6f2:	4641      	mov	r1, r8
 800e6f4:	f000 fffe 	bl	800f6f4 <_Bfree>
 800e6f8:	9805      	ldr	r0, [sp, #20]
 800e6fa:	4621      	mov	r1, r4
 800e6fc:	f000 fffa 	bl	800f6f4 <_Bfree>
 800e700:	e618      	b.n	800e334 <_strtod_l+0x644>
 800e702:	f1ba 0f01 	cmp.w	sl, #1
 800e706:	d103      	bne.n	800e710 <_strtod_l+0xa20>
 800e708:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e70a:	2b00      	cmp	r3, #0
 800e70c:	f43f ada5 	beq.w	800e25a <_strtod_l+0x56a>
 800e710:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800e7c0 <_strtod_l+0xad0>
 800e714:	4f35      	ldr	r7, [pc, #212]	@ (800e7ec <_strtod_l+0xafc>)
 800e716:	ed8d 7b06 	vstr	d7, [sp, #24]
 800e71a:	2600      	movs	r6, #0
 800e71c:	e7b1      	b.n	800e682 <_strtod_l+0x992>
 800e71e:	4f34      	ldr	r7, [pc, #208]	@ (800e7f0 <_strtod_l+0xb00>)
 800e720:	2600      	movs	r6, #0
 800e722:	e7aa      	b.n	800e67a <_strtod_l+0x98a>
 800e724:	4b32      	ldr	r3, [pc, #200]	@ (800e7f0 <_strtod_l+0xb00>)
 800e726:	4630      	mov	r0, r6
 800e728:	4639      	mov	r1, r7
 800e72a:	2200      	movs	r2, #0
 800e72c:	f7f1 ff7c 	bl	8000628 <__aeabi_dmul>
 800e730:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e732:	4606      	mov	r6, r0
 800e734:	460f      	mov	r7, r1
 800e736:	2b00      	cmp	r3, #0
 800e738:	d09f      	beq.n	800e67a <_strtod_l+0x98a>
 800e73a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800e73e:	e7a0      	b.n	800e682 <_strtod_l+0x992>
 800e740:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800e7c8 <_strtod_l+0xad8>
 800e744:	ed8d 7b06 	vstr	d7, [sp, #24]
 800e748:	ec57 6b17 	vmov	r6, r7, d7
 800e74c:	e799      	b.n	800e682 <_strtod_l+0x992>
 800e74e:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800e752:	9b08      	ldr	r3, [sp, #32]
 800e754:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800e758:	2b00      	cmp	r3, #0
 800e75a:	d1c1      	bne.n	800e6e0 <_strtod_l+0x9f0>
 800e75c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800e760:	0d1b      	lsrs	r3, r3, #20
 800e762:	051b      	lsls	r3, r3, #20
 800e764:	429d      	cmp	r5, r3
 800e766:	d1bb      	bne.n	800e6e0 <_strtod_l+0x9f0>
 800e768:	4630      	mov	r0, r6
 800e76a:	4639      	mov	r1, r7
 800e76c:	f7f2 fa56 	bl	8000c1c <__aeabi_d2lz>
 800e770:	f7f1 ff2c 	bl	80005cc <__aeabi_l2d>
 800e774:	4602      	mov	r2, r0
 800e776:	460b      	mov	r3, r1
 800e778:	4630      	mov	r0, r6
 800e77a:	4639      	mov	r1, r7
 800e77c:	f7f1 fd9c 	bl	80002b8 <__aeabi_dsub>
 800e780:	460b      	mov	r3, r1
 800e782:	4602      	mov	r2, r0
 800e784:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800e788:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800e78c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e78e:	ea46 060a 	orr.w	r6, r6, sl
 800e792:	431e      	orrs	r6, r3
 800e794:	d06f      	beq.n	800e876 <_strtod_l+0xb86>
 800e796:	a30e      	add	r3, pc, #56	@ (adr r3, 800e7d0 <_strtod_l+0xae0>)
 800e798:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e79c:	f7f2 f9b6 	bl	8000b0c <__aeabi_dcmplt>
 800e7a0:	2800      	cmp	r0, #0
 800e7a2:	f47f accf 	bne.w	800e144 <_strtod_l+0x454>
 800e7a6:	a30c      	add	r3, pc, #48	@ (adr r3, 800e7d8 <_strtod_l+0xae8>)
 800e7a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e7ac:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e7b0:	f7f2 f9ca 	bl	8000b48 <__aeabi_dcmpgt>
 800e7b4:	2800      	cmp	r0, #0
 800e7b6:	d093      	beq.n	800e6e0 <_strtod_l+0x9f0>
 800e7b8:	e4c4      	b.n	800e144 <_strtod_l+0x454>
 800e7ba:	bf00      	nop
 800e7bc:	f3af 8000 	nop.w
 800e7c0:	00000000 	.word	0x00000000
 800e7c4:	bff00000 	.word	0xbff00000
 800e7c8:	00000000 	.word	0x00000000
 800e7cc:	3ff00000 	.word	0x3ff00000
 800e7d0:	94a03595 	.word	0x94a03595
 800e7d4:	3fdfffff 	.word	0x3fdfffff
 800e7d8:	35afe535 	.word	0x35afe535
 800e7dc:	3fe00000 	.word	0x3fe00000
 800e7e0:	000fffff 	.word	0x000fffff
 800e7e4:	7ff00000 	.word	0x7ff00000
 800e7e8:	7fefffff 	.word	0x7fefffff
 800e7ec:	3ff00000 	.word	0x3ff00000
 800e7f0:	3fe00000 	.word	0x3fe00000
 800e7f4:	7fe00000 	.word	0x7fe00000
 800e7f8:	7c9fffff 	.word	0x7c9fffff
 800e7fc:	9b08      	ldr	r3, [sp, #32]
 800e7fe:	b323      	cbz	r3, 800e84a <_strtod_l+0xb5a>
 800e800:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800e804:	d821      	bhi.n	800e84a <_strtod_l+0xb5a>
 800e806:	a328      	add	r3, pc, #160	@ (adr r3, 800e8a8 <_strtod_l+0xbb8>)
 800e808:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e80c:	4630      	mov	r0, r6
 800e80e:	4639      	mov	r1, r7
 800e810:	f7f2 f986 	bl	8000b20 <__aeabi_dcmple>
 800e814:	b1a0      	cbz	r0, 800e840 <_strtod_l+0xb50>
 800e816:	4639      	mov	r1, r7
 800e818:	4630      	mov	r0, r6
 800e81a:	f7f2 f9c7 	bl	8000bac <__aeabi_d2uiz>
 800e81e:	2801      	cmp	r0, #1
 800e820:	bf38      	it	cc
 800e822:	2001      	movcc	r0, #1
 800e824:	f7f1 fe86 	bl	8000534 <__aeabi_ui2d>
 800e828:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e82a:	4606      	mov	r6, r0
 800e82c:	460f      	mov	r7, r1
 800e82e:	b9fb      	cbnz	r3, 800e870 <_strtod_l+0xb80>
 800e830:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800e834:	9014      	str	r0, [sp, #80]	@ 0x50
 800e836:	9315      	str	r3, [sp, #84]	@ 0x54
 800e838:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800e83c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800e840:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800e842:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800e846:	1b5b      	subs	r3, r3, r5
 800e848:	9311      	str	r3, [sp, #68]	@ 0x44
 800e84a:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800e84e:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800e852:	f001 fa83 	bl	800fd5c <__ulp>
 800e856:	4650      	mov	r0, sl
 800e858:	ec53 2b10 	vmov	r2, r3, d0
 800e85c:	4659      	mov	r1, fp
 800e85e:	f7f1 fee3 	bl	8000628 <__aeabi_dmul>
 800e862:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800e866:	f7f1 fd29 	bl	80002bc <__adddf3>
 800e86a:	4682      	mov	sl, r0
 800e86c:	468b      	mov	fp, r1
 800e86e:	e770      	b.n	800e752 <_strtod_l+0xa62>
 800e870:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800e874:	e7e0      	b.n	800e838 <_strtod_l+0xb48>
 800e876:	a30e      	add	r3, pc, #56	@ (adr r3, 800e8b0 <_strtod_l+0xbc0>)
 800e878:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e87c:	f7f2 f946 	bl	8000b0c <__aeabi_dcmplt>
 800e880:	e798      	b.n	800e7b4 <_strtod_l+0xac4>
 800e882:	2300      	movs	r3, #0
 800e884:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e886:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800e888:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800e88a:	6013      	str	r3, [r2, #0]
 800e88c:	f7ff ba6d 	b.w	800dd6a <_strtod_l+0x7a>
 800e890:	2a65      	cmp	r2, #101	@ 0x65
 800e892:	f43f ab66 	beq.w	800df62 <_strtod_l+0x272>
 800e896:	2a45      	cmp	r2, #69	@ 0x45
 800e898:	f43f ab63 	beq.w	800df62 <_strtod_l+0x272>
 800e89c:	2301      	movs	r3, #1
 800e89e:	f7ff bb9e 	b.w	800dfde <_strtod_l+0x2ee>
 800e8a2:	bf00      	nop
 800e8a4:	f3af 8000 	nop.w
 800e8a8:	ffc00000 	.word	0xffc00000
 800e8ac:	41dfffff 	.word	0x41dfffff
 800e8b0:	94a03595 	.word	0x94a03595
 800e8b4:	3fcfffff 	.word	0x3fcfffff

0800e8b8 <strtod>:
 800e8b8:	460a      	mov	r2, r1
 800e8ba:	4601      	mov	r1, r0
 800e8bc:	4802      	ldr	r0, [pc, #8]	@ (800e8c8 <strtod+0x10>)
 800e8be:	4b03      	ldr	r3, [pc, #12]	@ (800e8cc <strtod+0x14>)
 800e8c0:	6800      	ldr	r0, [r0, #0]
 800e8c2:	f7ff ba15 	b.w	800dcf0 <_strtod_l>
 800e8c6:	bf00      	nop
 800e8c8:	20000264 	.word	0x20000264
 800e8cc:	200000f8 	.word	0x200000f8

0800e8d0 <std>:
 800e8d0:	2300      	movs	r3, #0
 800e8d2:	b510      	push	{r4, lr}
 800e8d4:	4604      	mov	r4, r0
 800e8d6:	e9c0 3300 	strd	r3, r3, [r0]
 800e8da:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800e8de:	6083      	str	r3, [r0, #8]
 800e8e0:	8181      	strh	r1, [r0, #12]
 800e8e2:	6643      	str	r3, [r0, #100]	@ 0x64
 800e8e4:	81c2      	strh	r2, [r0, #14]
 800e8e6:	6183      	str	r3, [r0, #24]
 800e8e8:	4619      	mov	r1, r3
 800e8ea:	2208      	movs	r2, #8
 800e8ec:	305c      	adds	r0, #92	@ 0x5c
 800e8ee:	f000 f9f9 	bl	800ece4 <memset>
 800e8f2:	4b0d      	ldr	r3, [pc, #52]	@ (800e928 <std+0x58>)
 800e8f4:	6263      	str	r3, [r4, #36]	@ 0x24
 800e8f6:	4b0d      	ldr	r3, [pc, #52]	@ (800e92c <std+0x5c>)
 800e8f8:	62a3      	str	r3, [r4, #40]	@ 0x28
 800e8fa:	4b0d      	ldr	r3, [pc, #52]	@ (800e930 <std+0x60>)
 800e8fc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800e8fe:	4b0d      	ldr	r3, [pc, #52]	@ (800e934 <std+0x64>)
 800e900:	6323      	str	r3, [r4, #48]	@ 0x30
 800e902:	4b0d      	ldr	r3, [pc, #52]	@ (800e938 <std+0x68>)
 800e904:	6224      	str	r4, [r4, #32]
 800e906:	429c      	cmp	r4, r3
 800e908:	d006      	beq.n	800e918 <std+0x48>
 800e90a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800e90e:	4294      	cmp	r4, r2
 800e910:	d002      	beq.n	800e918 <std+0x48>
 800e912:	33d0      	adds	r3, #208	@ 0xd0
 800e914:	429c      	cmp	r4, r3
 800e916:	d105      	bne.n	800e924 <std+0x54>
 800e918:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800e91c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e920:	f000 baf0 	b.w	800ef04 <__retarget_lock_init_recursive>
 800e924:	bd10      	pop	{r4, pc}
 800e926:	bf00      	nop
 800e928:	0800eb35 	.word	0x0800eb35
 800e92c:	0800eb57 	.word	0x0800eb57
 800e930:	0800eb8f 	.word	0x0800eb8f
 800e934:	0800ebb3 	.word	0x0800ebb3
 800e938:	200059b0 	.word	0x200059b0

0800e93c <stdio_exit_handler>:
 800e93c:	4a02      	ldr	r2, [pc, #8]	@ (800e948 <stdio_exit_handler+0xc>)
 800e93e:	4903      	ldr	r1, [pc, #12]	@ (800e94c <stdio_exit_handler+0x10>)
 800e940:	4803      	ldr	r0, [pc, #12]	@ (800e950 <stdio_exit_handler+0x14>)
 800e942:	f000 b869 	b.w	800ea18 <_fwalk_sglue>
 800e946:	bf00      	nop
 800e948:	200000ec 	.word	0x200000ec
 800e94c:	080106a9 	.word	0x080106a9
 800e950:	20000268 	.word	0x20000268

0800e954 <cleanup_stdio>:
 800e954:	6841      	ldr	r1, [r0, #4]
 800e956:	4b0c      	ldr	r3, [pc, #48]	@ (800e988 <cleanup_stdio+0x34>)
 800e958:	4299      	cmp	r1, r3
 800e95a:	b510      	push	{r4, lr}
 800e95c:	4604      	mov	r4, r0
 800e95e:	d001      	beq.n	800e964 <cleanup_stdio+0x10>
 800e960:	f001 fea2 	bl	80106a8 <_fflush_r>
 800e964:	68a1      	ldr	r1, [r4, #8]
 800e966:	4b09      	ldr	r3, [pc, #36]	@ (800e98c <cleanup_stdio+0x38>)
 800e968:	4299      	cmp	r1, r3
 800e96a:	d002      	beq.n	800e972 <cleanup_stdio+0x1e>
 800e96c:	4620      	mov	r0, r4
 800e96e:	f001 fe9b 	bl	80106a8 <_fflush_r>
 800e972:	68e1      	ldr	r1, [r4, #12]
 800e974:	4b06      	ldr	r3, [pc, #24]	@ (800e990 <cleanup_stdio+0x3c>)
 800e976:	4299      	cmp	r1, r3
 800e978:	d004      	beq.n	800e984 <cleanup_stdio+0x30>
 800e97a:	4620      	mov	r0, r4
 800e97c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e980:	f001 be92 	b.w	80106a8 <_fflush_r>
 800e984:	bd10      	pop	{r4, pc}
 800e986:	bf00      	nop
 800e988:	200059b0 	.word	0x200059b0
 800e98c:	20005a18 	.word	0x20005a18
 800e990:	20005a80 	.word	0x20005a80

0800e994 <global_stdio_init.part.0>:
 800e994:	b510      	push	{r4, lr}
 800e996:	4b0b      	ldr	r3, [pc, #44]	@ (800e9c4 <global_stdio_init.part.0+0x30>)
 800e998:	4c0b      	ldr	r4, [pc, #44]	@ (800e9c8 <global_stdio_init.part.0+0x34>)
 800e99a:	4a0c      	ldr	r2, [pc, #48]	@ (800e9cc <global_stdio_init.part.0+0x38>)
 800e99c:	601a      	str	r2, [r3, #0]
 800e99e:	4620      	mov	r0, r4
 800e9a0:	2200      	movs	r2, #0
 800e9a2:	2104      	movs	r1, #4
 800e9a4:	f7ff ff94 	bl	800e8d0 <std>
 800e9a8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800e9ac:	2201      	movs	r2, #1
 800e9ae:	2109      	movs	r1, #9
 800e9b0:	f7ff ff8e 	bl	800e8d0 <std>
 800e9b4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800e9b8:	2202      	movs	r2, #2
 800e9ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e9be:	2112      	movs	r1, #18
 800e9c0:	f7ff bf86 	b.w	800e8d0 <std>
 800e9c4:	20005ae8 	.word	0x20005ae8
 800e9c8:	200059b0 	.word	0x200059b0
 800e9cc:	0800e93d 	.word	0x0800e93d

0800e9d0 <__sfp_lock_acquire>:
 800e9d0:	4801      	ldr	r0, [pc, #4]	@ (800e9d8 <__sfp_lock_acquire+0x8>)
 800e9d2:	f000 ba98 	b.w	800ef06 <__retarget_lock_acquire_recursive>
 800e9d6:	bf00      	nop
 800e9d8:	20005af1 	.word	0x20005af1

0800e9dc <__sfp_lock_release>:
 800e9dc:	4801      	ldr	r0, [pc, #4]	@ (800e9e4 <__sfp_lock_release+0x8>)
 800e9de:	f000 ba93 	b.w	800ef08 <__retarget_lock_release_recursive>
 800e9e2:	bf00      	nop
 800e9e4:	20005af1 	.word	0x20005af1

0800e9e8 <__sinit>:
 800e9e8:	b510      	push	{r4, lr}
 800e9ea:	4604      	mov	r4, r0
 800e9ec:	f7ff fff0 	bl	800e9d0 <__sfp_lock_acquire>
 800e9f0:	6a23      	ldr	r3, [r4, #32]
 800e9f2:	b11b      	cbz	r3, 800e9fc <__sinit+0x14>
 800e9f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e9f8:	f7ff bff0 	b.w	800e9dc <__sfp_lock_release>
 800e9fc:	4b04      	ldr	r3, [pc, #16]	@ (800ea10 <__sinit+0x28>)
 800e9fe:	6223      	str	r3, [r4, #32]
 800ea00:	4b04      	ldr	r3, [pc, #16]	@ (800ea14 <__sinit+0x2c>)
 800ea02:	681b      	ldr	r3, [r3, #0]
 800ea04:	2b00      	cmp	r3, #0
 800ea06:	d1f5      	bne.n	800e9f4 <__sinit+0xc>
 800ea08:	f7ff ffc4 	bl	800e994 <global_stdio_init.part.0>
 800ea0c:	e7f2      	b.n	800e9f4 <__sinit+0xc>
 800ea0e:	bf00      	nop
 800ea10:	0800e955 	.word	0x0800e955
 800ea14:	20005ae8 	.word	0x20005ae8

0800ea18 <_fwalk_sglue>:
 800ea18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ea1c:	4607      	mov	r7, r0
 800ea1e:	4688      	mov	r8, r1
 800ea20:	4614      	mov	r4, r2
 800ea22:	2600      	movs	r6, #0
 800ea24:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ea28:	f1b9 0901 	subs.w	r9, r9, #1
 800ea2c:	d505      	bpl.n	800ea3a <_fwalk_sglue+0x22>
 800ea2e:	6824      	ldr	r4, [r4, #0]
 800ea30:	2c00      	cmp	r4, #0
 800ea32:	d1f7      	bne.n	800ea24 <_fwalk_sglue+0xc>
 800ea34:	4630      	mov	r0, r6
 800ea36:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ea3a:	89ab      	ldrh	r3, [r5, #12]
 800ea3c:	2b01      	cmp	r3, #1
 800ea3e:	d907      	bls.n	800ea50 <_fwalk_sglue+0x38>
 800ea40:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ea44:	3301      	adds	r3, #1
 800ea46:	d003      	beq.n	800ea50 <_fwalk_sglue+0x38>
 800ea48:	4629      	mov	r1, r5
 800ea4a:	4638      	mov	r0, r7
 800ea4c:	47c0      	blx	r8
 800ea4e:	4306      	orrs	r6, r0
 800ea50:	3568      	adds	r5, #104	@ 0x68
 800ea52:	e7e9      	b.n	800ea28 <_fwalk_sglue+0x10>

0800ea54 <iprintf>:
 800ea54:	b40f      	push	{r0, r1, r2, r3}
 800ea56:	b507      	push	{r0, r1, r2, lr}
 800ea58:	4906      	ldr	r1, [pc, #24]	@ (800ea74 <iprintf+0x20>)
 800ea5a:	ab04      	add	r3, sp, #16
 800ea5c:	6808      	ldr	r0, [r1, #0]
 800ea5e:	f853 2b04 	ldr.w	r2, [r3], #4
 800ea62:	6881      	ldr	r1, [r0, #8]
 800ea64:	9301      	str	r3, [sp, #4]
 800ea66:	f001 faf5 	bl	8010054 <_vfiprintf_r>
 800ea6a:	b003      	add	sp, #12
 800ea6c:	f85d eb04 	ldr.w	lr, [sp], #4
 800ea70:	b004      	add	sp, #16
 800ea72:	4770      	bx	lr
 800ea74:	20000264 	.word	0x20000264

0800ea78 <_puts_r>:
 800ea78:	6a03      	ldr	r3, [r0, #32]
 800ea7a:	b570      	push	{r4, r5, r6, lr}
 800ea7c:	6884      	ldr	r4, [r0, #8]
 800ea7e:	4605      	mov	r5, r0
 800ea80:	460e      	mov	r6, r1
 800ea82:	b90b      	cbnz	r3, 800ea88 <_puts_r+0x10>
 800ea84:	f7ff ffb0 	bl	800e9e8 <__sinit>
 800ea88:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ea8a:	07db      	lsls	r3, r3, #31
 800ea8c:	d405      	bmi.n	800ea9a <_puts_r+0x22>
 800ea8e:	89a3      	ldrh	r3, [r4, #12]
 800ea90:	0598      	lsls	r0, r3, #22
 800ea92:	d402      	bmi.n	800ea9a <_puts_r+0x22>
 800ea94:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ea96:	f000 fa36 	bl	800ef06 <__retarget_lock_acquire_recursive>
 800ea9a:	89a3      	ldrh	r3, [r4, #12]
 800ea9c:	0719      	lsls	r1, r3, #28
 800ea9e:	d502      	bpl.n	800eaa6 <_puts_r+0x2e>
 800eaa0:	6923      	ldr	r3, [r4, #16]
 800eaa2:	2b00      	cmp	r3, #0
 800eaa4:	d135      	bne.n	800eb12 <_puts_r+0x9a>
 800eaa6:	4621      	mov	r1, r4
 800eaa8:	4628      	mov	r0, r5
 800eaaa:	f000 f8c5 	bl	800ec38 <__swsetup_r>
 800eaae:	b380      	cbz	r0, 800eb12 <_puts_r+0x9a>
 800eab0:	f04f 35ff 	mov.w	r5, #4294967295
 800eab4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800eab6:	07da      	lsls	r2, r3, #31
 800eab8:	d405      	bmi.n	800eac6 <_puts_r+0x4e>
 800eaba:	89a3      	ldrh	r3, [r4, #12]
 800eabc:	059b      	lsls	r3, r3, #22
 800eabe:	d402      	bmi.n	800eac6 <_puts_r+0x4e>
 800eac0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800eac2:	f000 fa21 	bl	800ef08 <__retarget_lock_release_recursive>
 800eac6:	4628      	mov	r0, r5
 800eac8:	bd70      	pop	{r4, r5, r6, pc}
 800eaca:	2b00      	cmp	r3, #0
 800eacc:	da04      	bge.n	800ead8 <_puts_r+0x60>
 800eace:	69a2      	ldr	r2, [r4, #24]
 800ead0:	429a      	cmp	r2, r3
 800ead2:	dc17      	bgt.n	800eb04 <_puts_r+0x8c>
 800ead4:	290a      	cmp	r1, #10
 800ead6:	d015      	beq.n	800eb04 <_puts_r+0x8c>
 800ead8:	6823      	ldr	r3, [r4, #0]
 800eada:	1c5a      	adds	r2, r3, #1
 800eadc:	6022      	str	r2, [r4, #0]
 800eade:	7019      	strb	r1, [r3, #0]
 800eae0:	68a3      	ldr	r3, [r4, #8]
 800eae2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800eae6:	3b01      	subs	r3, #1
 800eae8:	60a3      	str	r3, [r4, #8]
 800eaea:	2900      	cmp	r1, #0
 800eaec:	d1ed      	bne.n	800eaca <_puts_r+0x52>
 800eaee:	2b00      	cmp	r3, #0
 800eaf0:	da11      	bge.n	800eb16 <_puts_r+0x9e>
 800eaf2:	4622      	mov	r2, r4
 800eaf4:	210a      	movs	r1, #10
 800eaf6:	4628      	mov	r0, r5
 800eaf8:	f000 f85f 	bl	800ebba <__swbuf_r>
 800eafc:	3001      	adds	r0, #1
 800eafe:	d0d7      	beq.n	800eab0 <_puts_r+0x38>
 800eb00:	250a      	movs	r5, #10
 800eb02:	e7d7      	b.n	800eab4 <_puts_r+0x3c>
 800eb04:	4622      	mov	r2, r4
 800eb06:	4628      	mov	r0, r5
 800eb08:	f000 f857 	bl	800ebba <__swbuf_r>
 800eb0c:	3001      	adds	r0, #1
 800eb0e:	d1e7      	bne.n	800eae0 <_puts_r+0x68>
 800eb10:	e7ce      	b.n	800eab0 <_puts_r+0x38>
 800eb12:	3e01      	subs	r6, #1
 800eb14:	e7e4      	b.n	800eae0 <_puts_r+0x68>
 800eb16:	6823      	ldr	r3, [r4, #0]
 800eb18:	1c5a      	adds	r2, r3, #1
 800eb1a:	6022      	str	r2, [r4, #0]
 800eb1c:	220a      	movs	r2, #10
 800eb1e:	701a      	strb	r2, [r3, #0]
 800eb20:	e7ee      	b.n	800eb00 <_puts_r+0x88>
	...

0800eb24 <puts>:
 800eb24:	4b02      	ldr	r3, [pc, #8]	@ (800eb30 <puts+0xc>)
 800eb26:	4601      	mov	r1, r0
 800eb28:	6818      	ldr	r0, [r3, #0]
 800eb2a:	f7ff bfa5 	b.w	800ea78 <_puts_r>
 800eb2e:	bf00      	nop
 800eb30:	20000264 	.word	0x20000264

0800eb34 <__sread>:
 800eb34:	b510      	push	{r4, lr}
 800eb36:	460c      	mov	r4, r1
 800eb38:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800eb3c:	f000 f984 	bl	800ee48 <_read_r>
 800eb40:	2800      	cmp	r0, #0
 800eb42:	bfab      	itete	ge
 800eb44:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800eb46:	89a3      	ldrhlt	r3, [r4, #12]
 800eb48:	181b      	addge	r3, r3, r0
 800eb4a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800eb4e:	bfac      	ite	ge
 800eb50:	6563      	strge	r3, [r4, #84]	@ 0x54
 800eb52:	81a3      	strhlt	r3, [r4, #12]
 800eb54:	bd10      	pop	{r4, pc}

0800eb56 <__swrite>:
 800eb56:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eb5a:	461f      	mov	r7, r3
 800eb5c:	898b      	ldrh	r3, [r1, #12]
 800eb5e:	05db      	lsls	r3, r3, #23
 800eb60:	4605      	mov	r5, r0
 800eb62:	460c      	mov	r4, r1
 800eb64:	4616      	mov	r6, r2
 800eb66:	d505      	bpl.n	800eb74 <__swrite+0x1e>
 800eb68:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800eb6c:	2302      	movs	r3, #2
 800eb6e:	2200      	movs	r2, #0
 800eb70:	f000 f958 	bl	800ee24 <_lseek_r>
 800eb74:	89a3      	ldrh	r3, [r4, #12]
 800eb76:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800eb7a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800eb7e:	81a3      	strh	r3, [r4, #12]
 800eb80:	4632      	mov	r2, r6
 800eb82:	463b      	mov	r3, r7
 800eb84:	4628      	mov	r0, r5
 800eb86:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800eb8a:	f000 b97f 	b.w	800ee8c <_write_r>

0800eb8e <__sseek>:
 800eb8e:	b510      	push	{r4, lr}
 800eb90:	460c      	mov	r4, r1
 800eb92:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800eb96:	f000 f945 	bl	800ee24 <_lseek_r>
 800eb9a:	1c43      	adds	r3, r0, #1
 800eb9c:	89a3      	ldrh	r3, [r4, #12]
 800eb9e:	bf15      	itete	ne
 800eba0:	6560      	strne	r0, [r4, #84]	@ 0x54
 800eba2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800eba6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800ebaa:	81a3      	strheq	r3, [r4, #12]
 800ebac:	bf18      	it	ne
 800ebae:	81a3      	strhne	r3, [r4, #12]
 800ebb0:	bd10      	pop	{r4, pc}

0800ebb2 <__sclose>:
 800ebb2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ebb6:	f000 b8cf 	b.w	800ed58 <_close_r>

0800ebba <__swbuf_r>:
 800ebba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ebbc:	460e      	mov	r6, r1
 800ebbe:	4614      	mov	r4, r2
 800ebc0:	4605      	mov	r5, r0
 800ebc2:	b118      	cbz	r0, 800ebcc <__swbuf_r+0x12>
 800ebc4:	6a03      	ldr	r3, [r0, #32]
 800ebc6:	b90b      	cbnz	r3, 800ebcc <__swbuf_r+0x12>
 800ebc8:	f7ff ff0e 	bl	800e9e8 <__sinit>
 800ebcc:	69a3      	ldr	r3, [r4, #24]
 800ebce:	60a3      	str	r3, [r4, #8]
 800ebd0:	89a3      	ldrh	r3, [r4, #12]
 800ebd2:	071a      	lsls	r2, r3, #28
 800ebd4:	d501      	bpl.n	800ebda <__swbuf_r+0x20>
 800ebd6:	6923      	ldr	r3, [r4, #16]
 800ebd8:	b943      	cbnz	r3, 800ebec <__swbuf_r+0x32>
 800ebda:	4621      	mov	r1, r4
 800ebdc:	4628      	mov	r0, r5
 800ebde:	f000 f82b 	bl	800ec38 <__swsetup_r>
 800ebe2:	b118      	cbz	r0, 800ebec <__swbuf_r+0x32>
 800ebe4:	f04f 37ff 	mov.w	r7, #4294967295
 800ebe8:	4638      	mov	r0, r7
 800ebea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ebec:	6823      	ldr	r3, [r4, #0]
 800ebee:	6922      	ldr	r2, [r4, #16]
 800ebf0:	1a98      	subs	r0, r3, r2
 800ebf2:	6963      	ldr	r3, [r4, #20]
 800ebf4:	b2f6      	uxtb	r6, r6
 800ebf6:	4283      	cmp	r3, r0
 800ebf8:	4637      	mov	r7, r6
 800ebfa:	dc05      	bgt.n	800ec08 <__swbuf_r+0x4e>
 800ebfc:	4621      	mov	r1, r4
 800ebfe:	4628      	mov	r0, r5
 800ec00:	f001 fd52 	bl	80106a8 <_fflush_r>
 800ec04:	2800      	cmp	r0, #0
 800ec06:	d1ed      	bne.n	800ebe4 <__swbuf_r+0x2a>
 800ec08:	68a3      	ldr	r3, [r4, #8]
 800ec0a:	3b01      	subs	r3, #1
 800ec0c:	60a3      	str	r3, [r4, #8]
 800ec0e:	6823      	ldr	r3, [r4, #0]
 800ec10:	1c5a      	adds	r2, r3, #1
 800ec12:	6022      	str	r2, [r4, #0]
 800ec14:	701e      	strb	r6, [r3, #0]
 800ec16:	6962      	ldr	r2, [r4, #20]
 800ec18:	1c43      	adds	r3, r0, #1
 800ec1a:	429a      	cmp	r2, r3
 800ec1c:	d004      	beq.n	800ec28 <__swbuf_r+0x6e>
 800ec1e:	89a3      	ldrh	r3, [r4, #12]
 800ec20:	07db      	lsls	r3, r3, #31
 800ec22:	d5e1      	bpl.n	800ebe8 <__swbuf_r+0x2e>
 800ec24:	2e0a      	cmp	r6, #10
 800ec26:	d1df      	bne.n	800ebe8 <__swbuf_r+0x2e>
 800ec28:	4621      	mov	r1, r4
 800ec2a:	4628      	mov	r0, r5
 800ec2c:	f001 fd3c 	bl	80106a8 <_fflush_r>
 800ec30:	2800      	cmp	r0, #0
 800ec32:	d0d9      	beq.n	800ebe8 <__swbuf_r+0x2e>
 800ec34:	e7d6      	b.n	800ebe4 <__swbuf_r+0x2a>
	...

0800ec38 <__swsetup_r>:
 800ec38:	b538      	push	{r3, r4, r5, lr}
 800ec3a:	4b29      	ldr	r3, [pc, #164]	@ (800ece0 <__swsetup_r+0xa8>)
 800ec3c:	4605      	mov	r5, r0
 800ec3e:	6818      	ldr	r0, [r3, #0]
 800ec40:	460c      	mov	r4, r1
 800ec42:	b118      	cbz	r0, 800ec4c <__swsetup_r+0x14>
 800ec44:	6a03      	ldr	r3, [r0, #32]
 800ec46:	b90b      	cbnz	r3, 800ec4c <__swsetup_r+0x14>
 800ec48:	f7ff fece 	bl	800e9e8 <__sinit>
 800ec4c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ec50:	0719      	lsls	r1, r3, #28
 800ec52:	d422      	bmi.n	800ec9a <__swsetup_r+0x62>
 800ec54:	06da      	lsls	r2, r3, #27
 800ec56:	d407      	bmi.n	800ec68 <__swsetup_r+0x30>
 800ec58:	2209      	movs	r2, #9
 800ec5a:	602a      	str	r2, [r5, #0]
 800ec5c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ec60:	81a3      	strh	r3, [r4, #12]
 800ec62:	f04f 30ff 	mov.w	r0, #4294967295
 800ec66:	e033      	b.n	800ecd0 <__swsetup_r+0x98>
 800ec68:	0758      	lsls	r0, r3, #29
 800ec6a:	d512      	bpl.n	800ec92 <__swsetup_r+0x5a>
 800ec6c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ec6e:	b141      	cbz	r1, 800ec82 <__swsetup_r+0x4a>
 800ec70:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ec74:	4299      	cmp	r1, r3
 800ec76:	d002      	beq.n	800ec7e <__swsetup_r+0x46>
 800ec78:	4628      	mov	r0, r5
 800ec7a:	f000 f965 	bl	800ef48 <_free_r>
 800ec7e:	2300      	movs	r3, #0
 800ec80:	6363      	str	r3, [r4, #52]	@ 0x34
 800ec82:	89a3      	ldrh	r3, [r4, #12]
 800ec84:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800ec88:	81a3      	strh	r3, [r4, #12]
 800ec8a:	2300      	movs	r3, #0
 800ec8c:	6063      	str	r3, [r4, #4]
 800ec8e:	6923      	ldr	r3, [r4, #16]
 800ec90:	6023      	str	r3, [r4, #0]
 800ec92:	89a3      	ldrh	r3, [r4, #12]
 800ec94:	f043 0308 	orr.w	r3, r3, #8
 800ec98:	81a3      	strh	r3, [r4, #12]
 800ec9a:	6923      	ldr	r3, [r4, #16]
 800ec9c:	b94b      	cbnz	r3, 800ecb2 <__swsetup_r+0x7a>
 800ec9e:	89a3      	ldrh	r3, [r4, #12]
 800eca0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800eca4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800eca8:	d003      	beq.n	800ecb2 <__swsetup_r+0x7a>
 800ecaa:	4621      	mov	r1, r4
 800ecac:	4628      	mov	r0, r5
 800ecae:	f001 fd49 	bl	8010744 <__smakebuf_r>
 800ecb2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ecb6:	f013 0201 	ands.w	r2, r3, #1
 800ecba:	d00a      	beq.n	800ecd2 <__swsetup_r+0x9a>
 800ecbc:	2200      	movs	r2, #0
 800ecbe:	60a2      	str	r2, [r4, #8]
 800ecc0:	6962      	ldr	r2, [r4, #20]
 800ecc2:	4252      	negs	r2, r2
 800ecc4:	61a2      	str	r2, [r4, #24]
 800ecc6:	6922      	ldr	r2, [r4, #16]
 800ecc8:	b942      	cbnz	r2, 800ecdc <__swsetup_r+0xa4>
 800ecca:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800ecce:	d1c5      	bne.n	800ec5c <__swsetup_r+0x24>
 800ecd0:	bd38      	pop	{r3, r4, r5, pc}
 800ecd2:	0799      	lsls	r1, r3, #30
 800ecd4:	bf58      	it	pl
 800ecd6:	6962      	ldrpl	r2, [r4, #20]
 800ecd8:	60a2      	str	r2, [r4, #8]
 800ecda:	e7f4      	b.n	800ecc6 <__swsetup_r+0x8e>
 800ecdc:	2000      	movs	r0, #0
 800ecde:	e7f7      	b.n	800ecd0 <__swsetup_r+0x98>
 800ece0:	20000264 	.word	0x20000264

0800ece4 <memset>:
 800ece4:	4402      	add	r2, r0
 800ece6:	4603      	mov	r3, r0
 800ece8:	4293      	cmp	r3, r2
 800ecea:	d100      	bne.n	800ecee <memset+0xa>
 800ecec:	4770      	bx	lr
 800ecee:	f803 1b01 	strb.w	r1, [r3], #1
 800ecf2:	e7f9      	b.n	800ece8 <memset+0x4>

0800ecf4 <strchr>:
 800ecf4:	b2c9      	uxtb	r1, r1
 800ecf6:	4603      	mov	r3, r0
 800ecf8:	4618      	mov	r0, r3
 800ecfa:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ecfe:	b112      	cbz	r2, 800ed06 <strchr+0x12>
 800ed00:	428a      	cmp	r2, r1
 800ed02:	d1f9      	bne.n	800ecf8 <strchr+0x4>
 800ed04:	4770      	bx	lr
 800ed06:	2900      	cmp	r1, #0
 800ed08:	bf18      	it	ne
 800ed0a:	2000      	movne	r0, #0
 800ed0c:	4770      	bx	lr

0800ed0e <strncmp>:
 800ed0e:	b510      	push	{r4, lr}
 800ed10:	b16a      	cbz	r2, 800ed2e <strncmp+0x20>
 800ed12:	3901      	subs	r1, #1
 800ed14:	1884      	adds	r4, r0, r2
 800ed16:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ed1a:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800ed1e:	429a      	cmp	r2, r3
 800ed20:	d103      	bne.n	800ed2a <strncmp+0x1c>
 800ed22:	42a0      	cmp	r0, r4
 800ed24:	d001      	beq.n	800ed2a <strncmp+0x1c>
 800ed26:	2a00      	cmp	r2, #0
 800ed28:	d1f5      	bne.n	800ed16 <strncmp+0x8>
 800ed2a:	1ad0      	subs	r0, r2, r3
 800ed2c:	bd10      	pop	{r4, pc}
 800ed2e:	4610      	mov	r0, r2
 800ed30:	e7fc      	b.n	800ed2c <strncmp+0x1e>

0800ed32 <strncpy>:
 800ed32:	b510      	push	{r4, lr}
 800ed34:	3901      	subs	r1, #1
 800ed36:	4603      	mov	r3, r0
 800ed38:	b132      	cbz	r2, 800ed48 <strncpy+0x16>
 800ed3a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800ed3e:	f803 4b01 	strb.w	r4, [r3], #1
 800ed42:	3a01      	subs	r2, #1
 800ed44:	2c00      	cmp	r4, #0
 800ed46:	d1f7      	bne.n	800ed38 <strncpy+0x6>
 800ed48:	441a      	add	r2, r3
 800ed4a:	2100      	movs	r1, #0
 800ed4c:	4293      	cmp	r3, r2
 800ed4e:	d100      	bne.n	800ed52 <strncpy+0x20>
 800ed50:	bd10      	pop	{r4, pc}
 800ed52:	f803 1b01 	strb.w	r1, [r3], #1
 800ed56:	e7f9      	b.n	800ed4c <strncpy+0x1a>

0800ed58 <_close_r>:
 800ed58:	b538      	push	{r3, r4, r5, lr}
 800ed5a:	4d06      	ldr	r5, [pc, #24]	@ (800ed74 <_close_r+0x1c>)
 800ed5c:	2300      	movs	r3, #0
 800ed5e:	4604      	mov	r4, r0
 800ed60:	4608      	mov	r0, r1
 800ed62:	602b      	str	r3, [r5, #0]
 800ed64:	f7f4 f8ea 	bl	8002f3c <_close>
 800ed68:	1c43      	adds	r3, r0, #1
 800ed6a:	d102      	bne.n	800ed72 <_close_r+0x1a>
 800ed6c:	682b      	ldr	r3, [r5, #0]
 800ed6e:	b103      	cbz	r3, 800ed72 <_close_r+0x1a>
 800ed70:	6023      	str	r3, [r4, #0]
 800ed72:	bd38      	pop	{r3, r4, r5, pc}
 800ed74:	20005aec 	.word	0x20005aec

0800ed78 <_reclaim_reent>:
 800ed78:	4b29      	ldr	r3, [pc, #164]	@ (800ee20 <_reclaim_reent+0xa8>)
 800ed7a:	681b      	ldr	r3, [r3, #0]
 800ed7c:	4283      	cmp	r3, r0
 800ed7e:	b570      	push	{r4, r5, r6, lr}
 800ed80:	4604      	mov	r4, r0
 800ed82:	d04b      	beq.n	800ee1c <_reclaim_reent+0xa4>
 800ed84:	69c3      	ldr	r3, [r0, #28]
 800ed86:	b1ab      	cbz	r3, 800edb4 <_reclaim_reent+0x3c>
 800ed88:	68db      	ldr	r3, [r3, #12]
 800ed8a:	b16b      	cbz	r3, 800eda8 <_reclaim_reent+0x30>
 800ed8c:	2500      	movs	r5, #0
 800ed8e:	69e3      	ldr	r3, [r4, #28]
 800ed90:	68db      	ldr	r3, [r3, #12]
 800ed92:	5959      	ldr	r1, [r3, r5]
 800ed94:	2900      	cmp	r1, #0
 800ed96:	d13b      	bne.n	800ee10 <_reclaim_reent+0x98>
 800ed98:	3504      	adds	r5, #4
 800ed9a:	2d80      	cmp	r5, #128	@ 0x80
 800ed9c:	d1f7      	bne.n	800ed8e <_reclaim_reent+0x16>
 800ed9e:	69e3      	ldr	r3, [r4, #28]
 800eda0:	4620      	mov	r0, r4
 800eda2:	68d9      	ldr	r1, [r3, #12]
 800eda4:	f000 f8d0 	bl	800ef48 <_free_r>
 800eda8:	69e3      	ldr	r3, [r4, #28]
 800edaa:	6819      	ldr	r1, [r3, #0]
 800edac:	b111      	cbz	r1, 800edb4 <_reclaim_reent+0x3c>
 800edae:	4620      	mov	r0, r4
 800edb0:	f000 f8ca 	bl	800ef48 <_free_r>
 800edb4:	6961      	ldr	r1, [r4, #20]
 800edb6:	b111      	cbz	r1, 800edbe <_reclaim_reent+0x46>
 800edb8:	4620      	mov	r0, r4
 800edba:	f000 f8c5 	bl	800ef48 <_free_r>
 800edbe:	69e1      	ldr	r1, [r4, #28]
 800edc0:	b111      	cbz	r1, 800edc8 <_reclaim_reent+0x50>
 800edc2:	4620      	mov	r0, r4
 800edc4:	f000 f8c0 	bl	800ef48 <_free_r>
 800edc8:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800edca:	b111      	cbz	r1, 800edd2 <_reclaim_reent+0x5a>
 800edcc:	4620      	mov	r0, r4
 800edce:	f000 f8bb 	bl	800ef48 <_free_r>
 800edd2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800edd4:	b111      	cbz	r1, 800eddc <_reclaim_reent+0x64>
 800edd6:	4620      	mov	r0, r4
 800edd8:	f000 f8b6 	bl	800ef48 <_free_r>
 800eddc:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800edde:	b111      	cbz	r1, 800ede6 <_reclaim_reent+0x6e>
 800ede0:	4620      	mov	r0, r4
 800ede2:	f000 f8b1 	bl	800ef48 <_free_r>
 800ede6:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800ede8:	b111      	cbz	r1, 800edf0 <_reclaim_reent+0x78>
 800edea:	4620      	mov	r0, r4
 800edec:	f000 f8ac 	bl	800ef48 <_free_r>
 800edf0:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800edf2:	b111      	cbz	r1, 800edfa <_reclaim_reent+0x82>
 800edf4:	4620      	mov	r0, r4
 800edf6:	f000 f8a7 	bl	800ef48 <_free_r>
 800edfa:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800edfc:	b111      	cbz	r1, 800ee04 <_reclaim_reent+0x8c>
 800edfe:	4620      	mov	r0, r4
 800ee00:	f000 f8a2 	bl	800ef48 <_free_r>
 800ee04:	6a23      	ldr	r3, [r4, #32]
 800ee06:	b14b      	cbz	r3, 800ee1c <_reclaim_reent+0xa4>
 800ee08:	4620      	mov	r0, r4
 800ee0a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ee0e:	4718      	bx	r3
 800ee10:	680e      	ldr	r6, [r1, #0]
 800ee12:	4620      	mov	r0, r4
 800ee14:	f000 f898 	bl	800ef48 <_free_r>
 800ee18:	4631      	mov	r1, r6
 800ee1a:	e7bb      	b.n	800ed94 <_reclaim_reent+0x1c>
 800ee1c:	bd70      	pop	{r4, r5, r6, pc}
 800ee1e:	bf00      	nop
 800ee20:	20000264 	.word	0x20000264

0800ee24 <_lseek_r>:
 800ee24:	b538      	push	{r3, r4, r5, lr}
 800ee26:	4d07      	ldr	r5, [pc, #28]	@ (800ee44 <_lseek_r+0x20>)
 800ee28:	4604      	mov	r4, r0
 800ee2a:	4608      	mov	r0, r1
 800ee2c:	4611      	mov	r1, r2
 800ee2e:	2200      	movs	r2, #0
 800ee30:	602a      	str	r2, [r5, #0]
 800ee32:	461a      	mov	r2, r3
 800ee34:	f7f4 f8a9 	bl	8002f8a <_lseek>
 800ee38:	1c43      	adds	r3, r0, #1
 800ee3a:	d102      	bne.n	800ee42 <_lseek_r+0x1e>
 800ee3c:	682b      	ldr	r3, [r5, #0]
 800ee3e:	b103      	cbz	r3, 800ee42 <_lseek_r+0x1e>
 800ee40:	6023      	str	r3, [r4, #0]
 800ee42:	bd38      	pop	{r3, r4, r5, pc}
 800ee44:	20005aec 	.word	0x20005aec

0800ee48 <_read_r>:
 800ee48:	b538      	push	{r3, r4, r5, lr}
 800ee4a:	4d07      	ldr	r5, [pc, #28]	@ (800ee68 <_read_r+0x20>)
 800ee4c:	4604      	mov	r4, r0
 800ee4e:	4608      	mov	r0, r1
 800ee50:	4611      	mov	r1, r2
 800ee52:	2200      	movs	r2, #0
 800ee54:	602a      	str	r2, [r5, #0]
 800ee56:	461a      	mov	r2, r3
 800ee58:	f7f4 f837 	bl	8002eca <_read>
 800ee5c:	1c43      	adds	r3, r0, #1
 800ee5e:	d102      	bne.n	800ee66 <_read_r+0x1e>
 800ee60:	682b      	ldr	r3, [r5, #0]
 800ee62:	b103      	cbz	r3, 800ee66 <_read_r+0x1e>
 800ee64:	6023      	str	r3, [r4, #0]
 800ee66:	bd38      	pop	{r3, r4, r5, pc}
 800ee68:	20005aec 	.word	0x20005aec

0800ee6c <_sbrk_r>:
 800ee6c:	b538      	push	{r3, r4, r5, lr}
 800ee6e:	4d06      	ldr	r5, [pc, #24]	@ (800ee88 <_sbrk_r+0x1c>)
 800ee70:	2300      	movs	r3, #0
 800ee72:	4604      	mov	r4, r0
 800ee74:	4608      	mov	r0, r1
 800ee76:	602b      	str	r3, [r5, #0]
 800ee78:	f7f4 f894 	bl	8002fa4 <_sbrk>
 800ee7c:	1c43      	adds	r3, r0, #1
 800ee7e:	d102      	bne.n	800ee86 <_sbrk_r+0x1a>
 800ee80:	682b      	ldr	r3, [r5, #0]
 800ee82:	b103      	cbz	r3, 800ee86 <_sbrk_r+0x1a>
 800ee84:	6023      	str	r3, [r4, #0]
 800ee86:	bd38      	pop	{r3, r4, r5, pc}
 800ee88:	20005aec 	.word	0x20005aec

0800ee8c <_write_r>:
 800ee8c:	b538      	push	{r3, r4, r5, lr}
 800ee8e:	4d07      	ldr	r5, [pc, #28]	@ (800eeac <_write_r+0x20>)
 800ee90:	4604      	mov	r4, r0
 800ee92:	4608      	mov	r0, r1
 800ee94:	4611      	mov	r1, r2
 800ee96:	2200      	movs	r2, #0
 800ee98:	602a      	str	r2, [r5, #0]
 800ee9a:	461a      	mov	r2, r3
 800ee9c:	f7f4 f832 	bl	8002f04 <_write>
 800eea0:	1c43      	adds	r3, r0, #1
 800eea2:	d102      	bne.n	800eeaa <_write_r+0x1e>
 800eea4:	682b      	ldr	r3, [r5, #0]
 800eea6:	b103      	cbz	r3, 800eeaa <_write_r+0x1e>
 800eea8:	6023      	str	r3, [r4, #0]
 800eeaa:	bd38      	pop	{r3, r4, r5, pc}
 800eeac:	20005aec 	.word	0x20005aec

0800eeb0 <__errno>:
 800eeb0:	4b01      	ldr	r3, [pc, #4]	@ (800eeb8 <__errno+0x8>)
 800eeb2:	6818      	ldr	r0, [r3, #0]
 800eeb4:	4770      	bx	lr
 800eeb6:	bf00      	nop
 800eeb8:	20000264 	.word	0x20000264

0800eebc <__libc_init_array>:
 800eebc:	b570      	push	{r4, r5, r6, lr}
 800eebe:	4d0d      	ldr	r5, [pc, #52]	@ (800eef4 <__libc_init_array+0x38>)
 800eec0:	4c0d      	ldr	r4, [pc, #52]	@ (800eef8 <__libc_init_array+0x3c>)
 800eec2:	1b64      	subs	r4, r4, r5
 800eec4:	10a4      	asrs	r4, r4, #2
 800eec6:	2600      	movs	r6, #0
 800eec8:	42a6      	cmp	r6, r4
 800eeca:	d109      	bne.n	800eee0 <__libc_init_array+0x24>
 800eecc:	4d0b      	ldr	r5, [pc, #44]	@ (800eefc <__libc_init_array+0x40>)
 800eece:	4c0c      	ldr	r4, [pc, #48]	@ (800ef00 <__libc_init_array+0x44>)
 800eed0:	f001 fd26 	bl	8010920 <_init>
 800eed4:	1b64      	subs	r4, r4, r5
 800eed6:	10a4      	asrs	r4, r4, #2
 800eed8:	2600      	movs	r6, #0
 800eeda:	42a6      	cmp	r6, r4
 800eedc:	d105      	bne.n	800eeea <__libc_init_array+0x2e>
 800eede:	bd70      	pop	{r4, r5, r6, pc}
 800eee0:	f855 3b04 	ldr.w	r3, [r5], #4
 800eee4:	4798      	blx	r3
 800eee6:	3601      	adds	r6, #1
 800eee8:	e7ee      	b.n	800eec8 <__libc_init_array+0xc>
 800eeea:	f855 3b04 	ldr.w	r3, [r5], #4
 800eeee:	4798      	blx	r3
 800eef0:	3601      	adds	r6, #1
 800eef2:	e7f2      	b.n	800eeda <__libc_init_array+0x1e>
 800eef4:	080115a8 	.word	0x080115a8
 800eef8:	080115a8 	.word	0x080115a8
 800eefc:	080115a8 	.word	0x080115a8
 800ef00:	080115ac 	.word	0x080115ac

0800ef04 <__retarget_lock_init_recursive>:
 800ef04:	4770      	bx	lr

0800ef06 <__retarget_lock_acquire_recursive>:
 800ef06:	4770      	bx	lr

0800ef08 <__retarget_lock_release_recursive>:
 800ef08:	4770      	bx	lr

0800ef0a <strcpy>:
 800ef0a:	4603      	mov	r3, r0
 800ef0c:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ef10:	f803 2b01 	strb.w	r2, [r3], #1
 800ef14:	2a00      	cmp	r2, #0
 800ef16:	d1f9      	bne.n	800ef0c <strcpy+0x2>
 800ef18:	4770      	bx	lr

0800ef1a <memcpy>:
 800ef1a:	440a      	add	r2, r1
 800ef1c:	4291      	cmp	r1, r2
 800ef1e:	f100 33ff 	add.w	r3, r0, #4294967295
 800ef22:	d100      	bne.n	800ef26 <memcpy+0xc>
 800ef24:	4770      	bx	lr
 800ef26:	b510      	push	{r4, lr}
 800ef28:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ef2c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ef30:	4291      	cmp	r1, r2
 800ef32:	d1f9      	bne.n	800ef28 <memcpy+0xe>
 800ef34:	bd10      	pop	{r4, pc}
	...

0800ef38 <nan>:
 800ef38:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800ef40 <nan+0x8>
 800ef3c:	4770      	bx	lr
 800ef3e:	bf00      	nop
 800ef40:	00000000 	.word	0x00000000
 800ef44:	7ff80000 	.word	0x7ff80000

0800ef48 <_free_r>:
 800ef48:	b538      	push	{r3, r4, r5, lr}
 800ef4a:	4605      	mov	r5, r0
 800ef4c:	2900      	cmp	r1, #0
 800ef4e:	d041      	beq.n	800efd4 <_free_r+0x8c>
 800ef50:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ef54:	1f0c      	subs	r4, r1, #4
 800ef56:	2b00      	cmp	r3, #0
 800ef58:	bfb8      	it	lt
 800ef5a:	18e4      	addlt	r4, r4, r3
 800ef5c:	f7fe fe66 	bl	800dc2c <__malloc_lock>
 800ef60:	4a1d      	ldr	r2, [pc, #116]	@ (800efd8 <_free_r+0x90>)
 800ef62:	6813      	ldr	r3, [r2, #0]
 800ef64:	b933      	cbnz	r3, 800ef74 <_free_r+0x2c>
 800ef66:	6063      	str	r3, [r4, #4]
 800ef68:	6014      	str	r4, [r2, #0]
 800ef6a:	4628      	mov	r0, r5
 800ef6c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ef70:	f7fe be62 	b.w	800dc38 <__malloc_unlock>
 800ef74:	42a3      	cmp	r3, r4
 800ef76:	d908      	bls.n	800ef8a <_free_r+0x42>
 800ef78:	6820      	ldr	r0, [r4, #0]
 800ef7a:	1821      	adds	r1, r4, r0
 800ef7c:	428b      	cmp	r3, r1
 800ef7e:	bf01      	itttt	eq
 800ef80:	6819      	ldreq	r1, [r3, #0]
 800ef82:	685b      	ldreq	r3, [r3, #4]
 800ef84:	1809      	addeq	r1, r1, r0
 800ef86:	6021      	streq	r1, [r4, #0]
 800ef88:	e7ed      	b.n	800ef66 <_free_r+0x1e>
 800ef8a:	461a      	mov	r2, r3
 800ef8c:	685b      	ldr	r3, [r3, #4]
 800ef8e:	b10b      	cbz	r3, 800ef94 <_free_r+0x4c>
 800ef90:	42a3      	cmp	r3, r4
 800ef92:	d9fa      	bls.n	800ef8a <_free_r+0x42>
 800ef94:	6811      	ldr	r1, [r2, #0]
 800ef96:	1850      	adds	r0, r2, r1
 800ef98:	42a0      	cmp	r0, r4
 800ef9a:	d10b      	bne.n	800efb4 <_free_r+0x6c>
 800ef9c:	6820      	ldr	r0, [r4, #0]
 800ef9e:	4401      	add	r1, r0
 800efa0:	1850      	adds	r0, r2, r1
 800efa2:	4283      	cmp	r3, r0
 800efa4:	6011      	str	r1, [r2, #0]
 800efa6:	d1e0      	bne.n	800ef6a <_free_r+0x22>
 800efa8:	6818      	ldr	r0, [r3, #0]
 800efaa:	685b      	ldr	r3, [r3, #4]
 800efac:	6053      	str	r3, [r2, #4]
 800efae:	4408      	add	r0, r1
 800efb0:	6010      	str	r0, [r2, #0]
 800efb2:	e7da      	b.n	800ef6a <_free_r+0x22>
 800efb4:	d902      	bls.n	800efbc <_free_r+0x74>
 800efb6:	230c      	movs	r3, #12
 800efb8:	602b      	str	r3, [r5, #0]
 800efba:	e7d6      	b.n	800ef6a <_free_r+0x22>
 800efbc:	6820      	ldr	r0, [r4, #0]
 800efbe:	1821      	adds	r1, r4, r0
 800efc0:	428b      	cmp	r3, r1
 800efc2:	bf04      	itt	eq
 800efc4:	6819      	ldreq	r1, [r3, #0]
 800efc6:	685b      	ldreq	r3, [r3, #4]
 800efc8:	6063      	str	r3, [r4, #4]
 800efca:	bf04      	itt	eq
 800efcc:	1809      	addeq	r1, r1, r0
 800efce:	6021      	streq	r1, [r4, #0]
 800efd0:	6054      	str	r4, [r2, #4]
 800efd2:	e7ca      	b.n	800ef6a <_free_r+0x22>
 800efd4:	bd38      	pop	{r3, r4, r5, pc}
 800efd6:	bf00      	nop
 800efd8:	200059ac 	.word	0x200059ac

0800efdc <rshift>:
 800efdc:	6903      	ldr	r3, [r0, #16]
 800efde:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800efe2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800efe6:	ea4f 1261 	mov.w	r2, r1, asr #5
 800efea:	f100 0414 	add.w	r4, r0, #20
 800efee:	dd45      	ble.n	800f07c <rshift+0xa0>
 800eff0:	f011 011f 	ands.w	r1, r1, #31
 800eff4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800eff8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800effc:	d10c      	bne.n	800f018 <rshift+0x3c>
 800effe:	f100 0710 	add.w	r7, r0, #16
 800f002:	4629      	mov	r1, r5
 800f004:	42b1      	cmp	r1, r6
 800f006:	d334      	bcc.n	800f072 <rshift+0x96>
 800f008:	1a9b      	subs	r3, r3, r2
 800f00a:	009b      	lsls	r3, r3, #2
 800f00c:	1eea      	subs	r2, r5, #3
 800f00e:	4296      	cmp	r6, r2
 800f010:	bf38      	it	cc
 800f012:	2300      	movcc	r3, #0
 800f014:	4423      	add	r3, r4
 800f016:	e015      	b.n	800f044 <rshift+0x68>
 800f018:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800f01c:	f1c1 0820 	rsb	r8, r1, #32
 800f020:	40cf      	lsrs	r7, r1
 800f022:	f105 0e04 	add.w	lr, r5, #4
 800f026:	46a1      	mov	r9, r4
 800f028:	4576      	cmp	r6, lr
 800f02a:	46f4      	mov	ip, lr
 800f02c:	d815      	bhi.n	800f05a <rshift+0x7e>
 800f02e:	1a9a      	subs	r2, r3, r2
 800f030:	0092      	lsls	r2, r2, #2
 800f032:	3a04      	subs	r2, #4
 800f034:	3501      	adds	r5, #1
 800f036:	42ae      	cmp	r6, r5
 800f038:	bf38      	it	cc
 800f03a:	2200      	movcc	r2, #0
 800f03c:	18a3      	adds	r3, r4, r2
 800f03e:	50a7      	str	r7, [r4, r2]
 800f040:	b107      	cbz	r7, 800f044 <rshift+0x68>
 800f042:	3304      	adds	r3, #4
 800f044:	1b1a      	subs	r2, r3, r4
 800f046:	42a3      	cmp	r3, r4
 800f048:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800f04c:	bf08      	it	eq
 800f04e:	2300      	moveq	r3, #0
 800f050:	6102      	str	r2, [r0, #16]
 800f052:	bf08      	it	eq
 800f054:	6143      	streq	r3, [r0, #20]
 800f056:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f05a:	f8dc c000 	ldr.w	ip, [ip]
 800f05e:	fa0c fc08 	lsl.w	ip, ip, r8
 800f062:	ea4c 0707 	orr.w	r7, ip, r7
 800f066:	f849 7b04 	str.w	r7, [r9], #4
 800f06a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800f06e:	40cf      	lsrs	r7, r1
 800f070:	e7da      	b.n	800f028 <rshift+0x4c>
 800f072:	f851 cb04 	ldr.w	ip, [r1], #4
 800f076:	f847 cf04 	str.w	ip, [r7, #4]!
 800f07a:	e7c3      	b.n	800f004 <rshift+0x28>
 800f07c:	4623      	mov	r3, r4
 800f07e:	e7e1      	b.n	800f044 <rshift+0x68>

0800f080 <__hexdig_fun>:
 800f080:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800f084:	2b09      	cmp	r3, #9
 800f086:	d802      	bhi.n	800f08e <__hexdig_fun+0xe>
 800f088:	3820      	subs	r0, #32
 800f08a:	b2c0      	uxtb	r0, r0
 800f08c:	4770      	bx	lr
 800f08e:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800f092:	2b05      	cmp	r3, #5
 800f094:	d801      	bhi.n	800f09a <__hexdig_fun+0x1a>
 800f096:	3847      	subs	r0, #71	@ 0x47
 800f098:	e7f7      	b.n	800f08a <__hexdig_fun+0xa>
 800f09a:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800f09e:	2b05      	cmp	r3, #5
 800f0a0:	d801      	bhi.n	800f0a6 <__hexdig_fun+0x26>
 800f0a2:	3827      	subs	r0, #39	@ 0x27
 800f0a4:	e7f1      	b.n	800f08a <__hexdig_fun+0xa>
 800f0a6:	2000      	movs	r0, #0
 800f0a8:	4770      	bx	lr
	...

0800f0ac <__gethex>:
 800f0ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f0b0:	b085      	sub	sp, #20
 800f0b2:	468a      	mov	sl, r1
 800f0b4:	9302      	str	r3, [sp, #8]
 800f0b6:	680b      	ldr	r3, [r1, #0]
 800f0b8:	9001      	str	r0, [sp, #4]
 800f0ba:	4690      	mov	r8, r2
 800f0bc:	1c9c      	adds	r4, r3, #2
 800f0be:	46a1      	mov	r9, r4
 800f0c0:	f814 0b01 	ldrb.w	r0, [r4], #1
 800f0c4:	2830      	cmp	r0, #48	@ 0x30
 800f0c6:	d0fa      	beq.n	800f0be <__gethex+0x12>
 800f0c8:	eba9 0303 	sub.w	r3, r9, r3
 800f0cc:	f1a3 0b02 	sub.w	fp, r3, #2
 800f0d0:	f7ff ffd6 	bl	800f080 <__hexdig_fun>
 800f0d4:	4605      	mov	r5, r0
 800f0d6:	2800      	cmp	r0, #0
 800f0d8:	d168      	bne.n	800f1ac <__gethex+0x100>
 800f0da:	49a0      	ldr	r1, [pc, #640]	@ (800f35c <__gethex+0x2b0>)
 800f0dc:	2201      	movs	r2, #1
 800f0de:	4648      	mov	r0, r9
 800f0e0:	f7ff fe15 	bl	800ed0e <strncmp>
 800f0e4:	4607      	mov	r7, r0
 800f0e6:	2800      	cmp	r0, #0
 800f0e8:	d167      	bne.n	800f1ba <__gethex+0x10e>
 800f0ea:	f899 0001 	ldrb.w	r0, [r9, #1]
 800f0ee:	4626      	mov	r6, r4
 800f0f0:	f7ff ffc6 	bl	800f080 <__hexdig_fun>
 800f0f4:	2800      	cmp	r0, #0
 800f0f6:	d062      	beq.n	800f1be <__gethex+0x112>
 800f0f8:	4623      	mov	r3, r4
 800f0fa:	7818      	ldrb	r0, [r3, #0]
 800f0fc:	2830      	cmp	r0, #48	@ 0x30
 800f0fe:	4699      	mov	r9, r3
 800f100:	f103 0301 	add.w	r3, r3, #1
 800f104:	d0f9      	beq.n	800f0fa <__gethex+0x4e>
 800f106:	f7ff ffbb 	bl	800f080 <__hexdig_fun>
 800f10a:	fab0 f580 	clz	r5, r0
 800f10e:	096d      	lsrs	r5, r5, #5
 800f110:	f04f 0b01 	mov.w	fp, #1
 800f114:	464a      	mov	r2, r9
 800f116:	4616      	mov	r6, r2
 800f118:	3201      	adds	r2, #1
 800f11a:	7830      	ldrb	r0, [r6, #0]
 800f11c:	f7ff ffb0 	bl	800f080 <__hexdig_fun>
 800f120:	2800      	cmp	r0, #0
 800f122:	d1f8      	bne.n	800f116 <__gethex+0x6a>
 800f124:	498d      	ldr	r1, [pc, #564]	@ (800f35c <__gethex+0x2b0>)
 800f126:	2201      	movs	r2, #1
 800f128:	4630      	mov	r0, r6
 800f12a:	f7ff fdf0 	bl	800ed0e <strncmp>
 800f12e:	2800      	cmp	r0, #0
 800f130:	d13f      	bne.n	800f1b2 <__gethex+0x106>
 800f132:	b944      	cbnz	r4, 800f146 <__gethex+0x9a>
 800f134:	1c74      	adds	r4, r6, #1
 800f136:	4622      	mov	r2, r4
 800f138:	4616      	mov	r6, r2
 800f13a:	3201      	adds	r2, #1
 800f13c:	7830      	ldrb	r0, [r6, #0]
 800f13e:	f7ff ff9f 	bl	800f080 <__hexdig_fun>
 800f142:	2800      	cmp	r0, #0
 800f144:	d1f8      	bne.n	800f138 <__gethex+0x8c>
 800f146:	1ba4      	subs	r4, r4, r6
 800f148:	00a7      	lsls	r7, r4, #2
 800f14a:	7833      	ldrb	r3, [r6, #0]
 800f14c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800f150:	2b50      	cmp	r3, #80	@ 0x50
 800f152:	d13e      	bne.n	800f1d2 <__gethex+0x126>
 800f154:	7873      	ldrb	r3, [r6, #1]
 800f156:	2b2b      	cmp	r3, #43	@ 0x2b
 800f158:	d033      	beq.n	800f1c2 <__gethex+0x116>
 800f15a:	2b2d      	cmp	r3, #45	@ 0x2d
 800f15c:	d034      	beq.n	800f1c8 <__gethex+0x11c>
 800f15e:	1c71      	adds	r1, r6, #1
 800f160:	2400      	movs	r4, #0
 800f162:	7808      	ldrb	r0, [r1, #0]
 800f164:	f7ff ff8c 	bl	800f080 <__hexdig_fun>
 800f168:	1e43      	subs	r3, r0, #1
 800f16a:	b2db      	uxtb	r3, r3
 800f16c:	2b18      	cmp	r3, #24
 800f16e:	d830      	bhi.n	800f1d2 <__gethex+0x126>
 800f170:	f1a0 0210 	sub.w	r2, r0, #16
 800f174:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800f178:	f7ff ff82 	bl	800f080 <__hexdig_fun>
 800f17c:	f100 3cff 	add.w	ip, r0, #4294967295
 800f180:	fa5f fc8c 	uxtb.w	ip, ip
 800f184:	f1bc 0f18 	cmp.w	ip, #24
 800f188:	f04f 030a 	mov.w	r3, #10
 800f18c:	d91e      	bls.n	800f1cc <__gethex+0x120>
 800f18e:	b104      	cbz	r4, 800f192 <__gethex+0xe6>
 800f190:	4252      	negs	r2, r2
 800f192:	4417      	add	r7, r2
 800f194:	f8ca 1000 	str.w	r1, [sl]
 800f198:	b1ed      	cbz	r5, 800f1d6 <__gethex+0x12a>
 800f19a:	f1bb 0f00 	cmp.w	fp, #0
 800f19e:	bf0c      	ite	eq
 800f1a0:	2506      	moveq	r5, #6
 800f1a2:	2500      	movne	r5, #0
 800f1a4:	4628      	mov	r0, r5
 800f1a6:	b005      	add	sp, #20
 800f1a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f1ac:	2500      	movs	r5, #0
 800f1ae:	462c      	mov	r4, r5
 800f1b0:	e7b0      	b.n	800f114 <__gethex+0x68>
 800f1b2:	2c00      	cmp	r4, #0
 800f1b4:	d1c7      	bne.n	800f146 <__gethex+0x9a>
 800f1b6:	4627      	mov	r7, r4
 800f1b8:	e7c7      	b.n	800f14a <__gethex+0x9e>
 800f1ba:	464e      	mov	r6, r9
 800f1bc:	462f      	mov	r7, r5
 800f1be:	2501      	movs	r5, #1
 800f1c0:	e7c3      	b.n	800f14a <__gethex+0x9e>
 800f1c2:	2400      	movs	r4, #0
 800f1c4:	1cb1      	adds	r1, r6, #2
 800f1c6:	e7cc      	b.n	800f162 <__gethex+0xb6>
 800f1c8:	2401      	movs	r4, #1
 800f1ca:	e7fb      	b.n	800f1c4 <__gethex+0x118>
 800f1cc:	fb03 0002 	mla	r0, r3, r2, r0
 800f1d0:	e7ce      	b.n	800f170 <__gethex+0xc4>
 800f1d2:	4631      	mov	r1, r6
 800f1d4:	e7de      	b.n	800f194 <__gethex+0xe8>
 800f1d6:	eba6 0309 	sub.w	r3, r6, r9
 800f1da:	3b01      	subs	r3, #1
 800f1dc:	4629      	mov	r1, r5
 800f1de:	2b07      	cmp	r3, #7
 800f1e0:	dc0a      	bgt.n	800f1f8 <__gethex+0x14c>
 800f1e2:	9801      	ldr	r0, [sp, #4]
 800f1e4:	f000 fa46 	bl	800f674 <_Balloc>
 800f1e8:	4604      	mov	r4, r0
 800f1ea:	b940      	cbnz	r0, 800f1fe <__gethex+0x152>
 800f1ec:	4b5c      	ldr	r3, [pc, #368]	@ (800f360 <__gethex+0x2b4>)
 800f1ee:	4602      	mov	r2, r0
 800f1f0:	21e4      	movs	r1, #228	@ 0xe4
 800f1f2:	485c      	ldr	r0, [pc, #368]	@ (800f364 <__gethex+0x2b8>)
 800f1f4:	f001 fb04 	bl	8010800 <__assert_func>
 800f1f8:	3101      	adds	r1, #1
 800f1fa:	105b      	asrs	r3, r3, #1
 800f1fc:	e7ef      	b.n	800f1de <__gethex+0x132>
 800f1fe:	f100 0a14 	add.w	sl, r0, #20
 800f202:	2300      	movs	r3, #0
 800f204:	4655      	mov	r5, sl
 800f206:	469b      	mov	fp, r3
 800f208:	45b1      	cmp	r9, r6
 800f20a:	d337      	bcc.n	800f27c <__gethex+0x1d0>
 800f20c:	f845 bb04 	str.w	fp, [r5], #4
 800f210:	eba5 050a 	sub.w	r5, r5, sl
 800f214:	10ad      	asrs	r5, r5, #2
 800f216:	6125      	str	r5, [r4, #16]
 800f218:	4658      	mov	r0, fp
 800f21a:	f000 fb1d 	bl	800f858 <__hi0bits>
 800f21e:	016d      	lsls	r5, r5, #5
 800f220:	f8d8 6000 	ldr.w	r6, [r8]
 800f224:	1a2d      	subs	r5, r5, r0
 800f226:	42b5      	cmp	r5, r6
 800f228:	dd54      	ble.n	800f2d4 <__gethex+0x228>
 800f22a:	1bad      	subs	r5, r5, r6
 800f22c:	4629      	mov	r1, r5
 800f22e:	4620      	mov	r0, r4
 800f230:	f000 feb1 	bl	800ff96 <__any_on>
 800f234:	4681      	mov	r9, r0
 800f236:	b178      	cbz	r0, 800f258 <__gethex+0x1ac>
 800f238:	1e6b      	subs	r3, r5, #1
 800f23a:	1159      	asrs	r1, r3, #5
 800f23c:	f003 021f 	and.w	r2, r3, #31
 800f240:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800f244:	f04f 0901 	mov.w	r9, #1
 800f248:	fa09 f202 	lsl.w	r2, r9, r2
 800f24c:	420a      	tst	r2, r1
 800f24e:	d003      	beq.n	800f258 <__gethex+0x1ac>
 800f250:	454b      	cmp	r3, r9
 800f252:	dc36      	bgt.n	800f2c2 <__gethex+0x216>
 800f254:	f04f 0902 	mov.w	r9, #2
 800f258:	4629      	mov	r1, r5
 800f25a:	4620      	mov	r0, r4
 800f25c:	f7ff febe 	bl	800efdc <rshift>
 800f260:	442f      	add	r7, r5
 800f262:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800f266:	42bb      	cmp	r3, r7
 800f268:	da42      	bge.n	800f2f0 <__gethex+0x244>
 800f26a:	9801      	ldr	r0, [sp, #4]
 800f26c:	4621      	mov	r1, r4
 800f26e:	f000 fa41 	bl	800f6f4 <_Bfree>
 800f272:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800f274:	2300      	movs	r3, #0
 800f276:	6013      	str	r3, [r2, #0]
 800f278:	25a3      	movs	r5, #163	@ 0xa3
 800f27a:	e793      	b.n	800f1a4 <__gethex+0xf8>
 800f27c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800f280:	2a2e      	cmp	r2, #46	@ 0x2e
 800f282:	d012      	beq.n	800f2aa <__gethex+0x1fe>
 800f284:	2b20      	cmp	r3, #32
 800f286:	d104      	bne.n	800f292 <__gethex+0x1e6>
 800f288:	f845 bb04 	str.w	fp, [r5], #4
 800f28c:	f04f 0b00 	mov.w	fp, #0
 800f290:	465b      	mov	r3, fp
 800f292:	7830      	ldrb	r0, [r6, #0]
 800f294:	9303      	str	r3, [sp, #12]
 800f296:	f7ff fef3 	bl	800f080 <__hexdig_fun>
 800f29a:	9b03      	ldr	r3, [sp, #12]
 800f29c:	f000 000f 	and.w	r0, r0, #15
 800f2a0:	4098      	lsls	r0, r3
 800f2a2:	ea4b 0b00 	orr.w	fp, fp, r0
 800f2a6:	3304      	adds	r3, #4
 800f2a8:	e7ae      	b.n	800f208 <__gethex+0x15c>
 800f2aa:	45b1      	cmp	r9, r6
 800f2ac:	d8ea      	bhi.n	800f284 <__gethex+0x1d8>
 800f2ae:	492b      	ldr	r1, [pc, #172]	@ (800f35c <__gethex+0x2b0>)
 800f2b0:	9303      	str	r3, [sp, #12]
 800f2b2:	2201      	movs	r2, #1
 800f2b4:	4630      	mov	r0, r6
 800f2b6:	f7ff fd2a 	bl	800ed0e <strncmp>
 800f2ba:	9b03      	ldr	r3, [sp, #12]
 800f2bc:	2800      	cmp	r0, #0
 800f2be:	d1e1      	bne.n	800f284 <__gethex+0x1d8>
 800f2c0:	e7a2      	b.n	800f208 <__gethex+0x15c>
 800f2c2:	1ea9      	subs	r1, r5, #2
 800f2c4:	4620      	mov	r0, r4
 800f2c6:	f000 fe66 	bl	800ff96 <__any_on>
 800f2ca:	2800      	cmp	r0, #0
 800f2cc:	d0c2      	beq.n	800f254 <__gethex+0x1a8>
 800f2ce:	f04f 0903 	mov.w	r9, #3
 800f2d2:	e7c1      	b.n	800f258 <__gethex+0x1ac>
 800f2d4:	da09      	bge.n	800f2ea <__gethex+0x23e>
 800f2d6:	1b75      	subs	r5, r6, r5
 800f2d8:	4621      	mov	r1, r4
 800f2da:	9801      	ldr	r0, [sp, #4]
 800f2dc:	462a      	mov	r2, r5
 800f2de:	f000 fc21 	bl	800fb24 <__lshift>
 800f2e2:	1b7f      	subs	r7, r7, r5
 800f2e4:	4604      	mov	r4, r0
 800f2e6:	f100 0a14 	add.w	sl, r0, #20
 800f2ea:	f04f 0900 	mov.w	r9, #0
 800f2ee:	e7b8      	b.n	800f262 <__gethex+0x1b6>
 800f2f0:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800f2f4:	42bd      	cmp	r5, r7
 800f2f6:	dd6f      	ble.n	800f3d8 <__gethex+0x32c>
 800f2f8:	1bed      	subs	r5, r5, r7
 800f2fa:	42ae      	cmp	r6, r5
 800f2fc:	dc34      	bgt.n	800f368 <__gethex+0x2bc>
 800f2fe:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800f302:	2b02      	cmp	r3, #2
 800f304:	d022      	beq.n	800f34c <__gethex+0x2a0>
 800f306:	2b03      	cmp	r3, #3
 800f308:	d024      	beq.n	800f354 <__gethex+0x2a8>
 800f30a:	2b01      	cmp	r3, #1
 800f30c:	d115      	bne.n	800f33a <__gethex+0x28e>
 800f30e:	42ae      	cmp	r6, r5
 800f310:	d113      	bne.n	800f33a <__gethex+0x28e>
 800f312:	2e01      	cmp	r6, #1
 800f314:	d10b      	bne.n	800f32e <__gethex+0x282>
 800f316:	9a02      	ldr	r2, [sp, #8]
 800f318:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800f31c:	6013      	str	r3, [r2, #0]
 800f31e:	2301      	movs	r3, #1
 800f320:	6123      	str	r3, [r4, #16]
 800f322:	f8ca 3000 	str.w	r3, [sl]
 800f326:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f328:	2562      	movs	r5, #98	@ 0x62
 800f32a:	601c      	str	r4, [r3, #0]
 800f32c:	e73a      	b.n	800f1a4 <__gethex+0xf8>
 800f32e:	1e71      	subs	r1, r6, #1
 800f330:	4620      	mov	r0, r4
 800f332:	f000 fe30 	bl	800ff96 <__any_on>
 800f336:	2800      	cmp	r0, #0
 800f338:	d1ed      	bne.n	800f316 <__gethex+0x26a>
 800f33a:	9801      	ldr	r0, [sp, #4]
 800f33c:	4621      	mov	r1, r4
 800f33e:	f000 f9d9 	bl	800f6f4 <_Bfree>
 800f342:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800f344:	2300      	movs	r3, #0
 800f346:	6013      	str	r3, [r2, #0]
 800f348:	2550      	movs	r5, #80	@ 0x50
 800f34a:	e72b      	b.n	800f1a4 <__gethex+0xf8>
 800f34c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f34e:	2b00      	cmp	r3, #0
 800f350:	d1f3      	bne.n	800f33a <__gethex+0x28e>
 800f352:	e7e0      	b.n	800f316 <__gethex+0x26a>
 800f354:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f356:	2b00      	cmp	r3, #0
 800f358:	d1dd      	bne.n	800f316 <__gethex+0x26a>
 800f35a:	e7ee      	b.n	800f33a <__gethex+0x28e>
 800f35c:	080111e4 	.word	0x080111e4
 800f360:	08011351 	.word	0x08011351
 800f364:	08011362 	.word	0x08011362
 800f368:	1e6f      	subs	r7, r5, #1
 800f36a:	f1b9 0f00 	cmp.w	r9, #0
 800f36e:	d130      	bne.n	800f3d2 <__gethex+0x326>
 800f370:	b127      	cbz	r7, 800f37c <__gethex+0x2d0>
 800f372:	4639      	mov	r1, r7
 800f374:	4620      	mov	r0, r4
 800f376:	f000 fe0e 	bl	800ff96 <__any_on>
 800f37a:	4681      	mov	r9, r0
 800f37c:	117a      	asrs	r2, r7, #5
 800f37e:	2301      	movs	r3, #1
 800f380:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800f384:	f007 071f 	and.w	r7, r7, #31
 800f388:	40bb      	lsls	r3, r7
 800f38a:	4213      	tst	r3, r2
 800f38c:	4629      	mov	r1, r5
 800f38e:	4620      	mov	r0, r4
 800f390:	bf18      	it	ne
 800f392:	f049 0902 	orrne.w	r9, r9, #2
 800f396:	f7ff fe21 	bl	800efdc <rshift>
 800f39a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800f39e:	1b76      	subs	r6, r6, r5
 800f3a0:	2502      	movs	r5, #2
 800f3a2:	f1b9 0f00 	cmp.w	r9, #0
 800f3a6:	d047      	beq.n	800f438 <__gethex+0x38c>
 800f3a8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800f3ac:	2b02      	cmp	r3, #2
 800f3ae:	d015      	beq.n	800f3dc <__gethex+0x330>
 800f3b0:	2b03      	cmp	r3, #3
 800f3b2:	d017      	beq.n	800f3e4 <__gethex+0x338>
 800f3b4:	2b01      	cmp	r3, #1
 800f3b6:	d109      	bne.n	800f3cc <__gethex+0x320>
 800f3b8:	f019 0f02 	tst.w	r9, #2
 800f3bc:	d006      	beq.n	800f3cc <__gethex+0x320>
 800f3be:	f8da 3000 	ldr.w	r3, [sl]
 800f3c2:	ea49 0903 	orr.w	r9, r9, r3
 800f3c6:	f019 0f01 	tst.w	r9, #1
 800f3ca:	d10e      	bne.n	800f3ea <__gethex+0x33e>
 800f3cc:	f045 0510 	orr.w	r5, r5, #16
 800f3d0:	e032      	b.n	800f438 <__gethex+0x38c>
 800f3d2:	f04f 0901 	mov.w	r9, #1
 800f3d6:	e7d1      	b.n	800f37c <__gethex+0x2d0>
 800f3d8:	2501      	movs	r5, #1
 800f3da:	e7e2      	b.n	800f3a2 <__gethex+0x2f6>
 800f3dc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f3de:	f1c3 0301 	rsb	r3, r3, #1
 800f3e2:	930f      	str	r3, [sp, #60]	@ 0x3c
 800f3e4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f3e6:	2b00      	cmp	r3, #0
 800f3e8:	d0f0      	beq.n	800f3cc <__gethex+0x320>
 800f3ea:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800f3ee:	f104 0314 	add.w	r3, r4, #20
 800f3f2:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800f3f6:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800f3fa:	f04f 0c00 	mov.w	ip, #0
 800f3fe:	4618      	mov	r0, r3
 800f400:	f853 2b04 	ldr.w	r2, [r3], #4
 800f404:	f1b2 3fff 	cmp.w	r2, #4294967295
 800f408:	d01b      	beq.n	800f442 <__gethex+0x396>
 800f40a:	3201      	adds	r2, #1
 800f40c:	6002      	str	r2, [r0, #0]
 800f40e:	2d02      	cmp	r5, #2
 800f410:	f104 0314 	add.w	r3, r4, #20
 800f414:	d13c      	bne.n	800f490 <__gethex+0x3e4>
 800f416:	f8d8 2000 	ldr.w	r2, [r8]
 800f41a:	3a01      	subs	r2, #1
 800f41c:	42b2      	cmp	r2, r6
 800f41e:	d109      	bne.n	800f434 <__gethex+0x388>
 800f420:	1171      	asrs	r1, r6, #5
 800f422:	2201      	movs	r2, #1
 800f424:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800f428:	f006 061f 	and.w	r6, r6, #31
 800f42c:	fa02 f606 	lsl.w	r6, r2, r6
 800f430:	421e      	tst	r6, r3
 800f432:	d13a      	bne.n	800f4aa <__gethex+0x3fe>
 800f434:	f045 0520 	orr.w	r5, r5, #32
 800f438:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f43a:	601c      	str	r4, [r3, #0]
 800f43c:	9b02      	ldr	r3, [sp, #8]
 800f43e:	601f      	str	r7, [r3, #0]
 800f440:	e6b0      	b.n	800f1a4 <__gethex+0xf8>
 800f442:	4299      	cmp	r1, r3
 800f444:	f843 cc04 	str.w	ip, [r3, #-4]
 800f448:	d8d9      	bhi.n	800f3fe <__gethex+0x352>
 800f44a:	68a3      	ldr	r3, [r4, #8]
 800f44c:	459b      	cmp	fp, r3
 800f44e:	db17      	blt.n	800f480 <__gethex+0x3d4>
 800f450:	6861      	ldr	r1, [r4, #4]
 800f452:	9801      	ldr	r0, [sp, #4]
 800f454:	3101      	adds	r1, #1
 800f456:	f000 f90d 	bl	800f674 <_Balloc>
 800f45a:	4681      	mov	r9, r0
 800f45c:	b918      	cbnz	r0, 800f466 <__gethex+0x3ba>
 800f45e:	4b1a      	ldr	r3, [pc, #104]	@ (800f4c8 <__gethex+0x41c>)
 800f460:	4602      	mov	r2, r0
 800f462:	2184      	movs	r1, #132	@ 0x84
 800f464:	e6c5      	b.n	800f1f2 <__gethex+0x146>
 800f466:	6922      	ldr	r2, [r4, #16]
 800f468:	3202      	adds	r2, #2
 800f46a:	f104 010c 	add.w	r1, r4, #12
 800f46e:	0092      	lsls	r2, r2, #2
 800f470:	300c      	adds	r0, #12
 800f472:	f7ff fd52 	bl	800ef1a <memcpy>
 800f476:	4621      	mov	r1, r4
 800f478:	9801      	ldr	r0, [sp, #4]
 800f47a:	f000 f93b 	bl	800f6f4 <_Bfree>
 800f47e:	464c      	mov	r4, r9
 800f480:	6923      	ldr	r3, [r4, #16]
 800f482:	1c5a      	adds	r2, r3, #1
 800f484:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800f488:	6122      	str	r2, [r4, #16]
 800f48a:	2201      	movs	r2, #1
 800f48c:	615a      	str	r2, [r3, #20]
 800f48e:	e7be      	b.n	800f40e <__gethex+0x362>
 800f490:	6922      	ldr	r2, [r4, #16]
 800f492:	455a      	cmp	r2, fp
 800f494:	dd0b      	ble.n	800f4ae <__gethex+0x402>
 800f496:	2101      	movs	r1, #1
 800f498:	4620      	mov	r0, r4
 800f49a:	f7ff fd9f 	bl	800efdc <rshift>
 800f49e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800f4a2:	3701      	adds	r7, #1
 800f4a4:	42bb      	cmp	r3, r7
 800f4a6:	f6ff aee0 	blt.w	800f26a <__gethex+0x1be>
 800f4aa:	2501      	movs	r5, #1
 800f4ac:	e7c2      	b.n	800f434 <__gethex+0x388>
 800f4ae:	f016 061f 	ands.w	r6, r6, #31
 800f4b2:	d0fa      	beq.n	800f4aa <__gethex+0x3fe>
 800f4b4:	4453      	add	r3, sl
 800f4b6:	f1c6 0620 	rsb	r6, r6, #32
 800f4ba:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800f4be:	f000 f9cb 	bl	800f858 <__hi0bits>
 800f4c2:	42b0      	cmp	r0, r6
 800f4c4:	dbe7      	blt.n	800f496 <__gethex+0x3ea>
 800f4c6:	e7f0      	b.n	800f4aa <__gethex+0x3fe>
 800f4c8:	08011351 	.word	0x08011351

0800f4cc <L_shift>:
 800f4cc:	f1c2 0208 	rsb	r2, r2, #8
 800f4d0:	0092      	lsls	r2, r2, #2
 800f4d2:	b570      	push	{r4, r5, r6, lr}
 800f4d4:	f1c2 0620 	rsb	r6, r2, #32
 800f4d8:	6843      	ldr	r3, [r0, #4]
 800f4da:	6804      	ldr	r4, [r0, #0]
 800f4dc:	fa03 f506 	lsl.w	r5, r3, r6
 800f4e0:	432c      	orrs	r4, r5
 800f4e2:	40d3      	lsrs	r3, r2
 800f4e4:	6004      	str	r4, [r0, #0]
 800f4e6:	f840 3f04 	str.w	r3, [r0, #4]!
 800f4ea:	4288      	cmp	r0, r1
 800f4ec:	d3f4      	bcc.n	800f4d8 <L_shift+0xc>
 800f4ee:	bd70      	pop	{r4, r5, r6, pc}

0800f4f0 <__match>:
 800f4f0:	b530      	push	{r4, r5, lr}
 800f4f2:	6803      	ldr	r3, [r0, #0]
 800f4f4:	3301      	adds	r3, #1
 800f4f6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f4fa:	b914      	cbnz	r4, 800f502 <__match+0x12>
 800f4fc:	6003      	str	r3, [r0, #0]
 800f4fe:	2001      	movs	r0, #1
 800f500:	bd30      	pop	{r4, r5, pc}
 800f502:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f506:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800f50a:	2d19      	cmp	r5, #25
 800f50c:	bf98      	it	ls
 800f50e:	3220      	addls	r2, #32
 800f510:	42a2      	cmp	r2, r4
 800f512:	d0f0      	beq.n	800f4f6 <__match+0x6>
 800f514:	2000      	movs	r0, #0
 800f516:	e7f3      	b.n	800f500 <__match+0x10>

0800f518 <__hexnan>:
 800f518:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f51c:	680b      	ldr	r3, [r1, #0]
 800f51e:	6801      	ldr	r1, [r0, #0]
 800f520:	115e      	asrs	r6, r3, #5
 800f522:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800f526:	f013 031f 	ands.w	r3, r3, #31
 800f52a:	b087      	sub	sp, #28
 800f52c:	bf18      	it	ne
 800f52e:	3604      	addne	r6, #4
 800f530:	2500      	movs	r5, #0
 800f532:	1f37      	subs	r7, r6, #4
 800f534:	4682      	mov	sl, r0
 800f536:	4690      	mov	r8, r2
 800f538:	9301      	str	r3, [sp, #4]
 800f53a:	f846 5c04 	str.w	r5, [r6, #-4]
 800f53e:	46b9      	mov	r9, r7
 800f540:	463c      	mov	r4, r7
 800f542:	9502      	str	r5, [sp, #8]
 800f544:	46ab      	mov	fp, r5
 800f546:	784a      	ldrb	r2, [r1, #1]
 800f548:	1c4b      	adds	r3, r1, #1
 800f54a:	9303      	str	r3, [sp, #12]
 800f54c:	b342      	cbz	r2, 800f5a0 <__hexnan+0x88>
 800f54e:	4610      	mov	r0, r2
 800f550:	9105      	str	r1, [sp, #20]
 800f552:	9204      	str	r2, [sp, #16]
 800f554:	f7ff fd94 	bl	800f080 <__hexdig_fun>
 800f558:	2800      	cmp	r0, #0
 800f55a:	d151      	bne.n	800f600 <__hexnan+0xe8>
 800f55c:	9a04      	ldr	r2, [sp, #16]
 800f55e:	9905      	ldr	r1, [sp, #20]
 800f560:	2a20      	cmp	r2, #32
 800f562:	d818      	bhi.n	800f596 <__hexnan+0x7e>
 800f564:	9b02      	ldr	r3, [sp, #8]
 800f566:	459b      	cmp	fp, r3
 800f568:	dd13      	ble.n	800f592 <__hexnan+0x7a>
 800f56a:	454c      	cmp	r4, r9
 800f56c:	d206      	bcs.n	800f57c <__hexnan+0x64>
 800f56e:	2d07      	cmp	r5, #7
 800f570:	dc04      	bgt.n	800f57c <__hexnan+0x64>
 800f572:	462a      	mov	r2, r5
 800f574:	4649      	mov	r1, r9
 800f576:	4620      	mov	r0, r4
 800f578:	f7ff ffa8 	bl	800f4cc <L_shift>
 800f57c:	4544      	cmp	r4, r8
 800f57e:	d952      	bls.n	800f626 <__hexnan+0x10e>
 800f580:	2300      	movs	r3, #0
 800f582:	f1a4 0904 	sub.w	r9, r4, #4
 800f586:	f844 3c04 	str.w	r3, [r4, #-4]
 800f58a:	f8cd b008 	str.w	fp, [sp, #8]
 800f58e:	464c      	mov	r4, r9
 800f590:	461d      	mov	r5, r3
 800f592:	9903      	ldr	r1, [sp, #12]
 800f594:	e7d7      	b.n	800f546 <__hexnan+0x2e>
 800f596:	2a29      	cmp	r2, #41	@ 0x29
 800f598:	d157      	bne.n	800f64a <__hexnan+0x132>
 800f59a:	3102      	adds	r1, #2
 800f59c:	f8ca 1000 	str.w	r1, [sl]
 800f5a0:	f1bb 0f00 	cmp.w	fp, #0
 800f5a4:	d051      	beq.n	800f64a <__hexnan+0x132>
 800f5a6:	454c      	cmp	r4, r9
 800f5a8:	d206      	bcs.n	800f5b8 <__hexnan+0xa0>
 800f5aa:	2d07      	cmp	r5, #7
 800f5ac:	dc04      	bgt.n	800f5b8 <__hexnan+0xa0>
 800f5ae:	462a      	mov	r2, r5
 800f5b0:	4649      	mov	r1, r9
 800f5b2:	4620      	mov	r0, r4
 800f5b4:	f7ff ff8a 	bl	800f4cc <L_shift>
 800f5b8:	4544      	cmp	r4, r8
 800f5ba:	d936      	bls.n	800f62a <__hexnan+0x112>
 800f5bc:	f1a8 0204 	sub.w	r2, r8, #4
 800f5c0:	4623      	mov	r3, r4
 800f5c2:	f853 1b04 	ldr.w	r1, [r3], #4
 800f5c6:	f842 1f04 	str.w	r1, [r2, #4]!
 800f5ca:	429f      	cmp	r7, r3
 800f5cc:	d2f9      	bcs.n	800f5c2 <__hexnan+0xaa>
 800f5ce:	1b3b      	subs	r3, r7, r4
 800f5d0:	f023 0303 	bic.w	r3, r3, #3
 800f5d4:	3304      	adds	r3, #4
 800f5d6:	3401      	adds	r4, #1
 800f5d8:	3e03      	subs	r6, #3
 800f5da:	42b4      	cmp	r4, r6
 800f5dc:	bf88      	it	hi
 800f5de:	2304      	movhi	r3, #4
 800f5e0:	4443      	add	r3, r8
 800f5e2:	2200      	movs	r2, #0
 800f5e4:	f843 2b04 	str.w	r2, [r3], #4
 800f5e8:	429f      	cmp	r7, r3
 800f5ea:	d2fb      	bcs.n	800f5e4 <__hexnan+0xcc>
 800f5ec:	683b      	ldr	r3, [r7, #0]
 800f5ee:	b91b      	cbnz	r3, 800f5f8 <__hexnan+0xe0>
 800f5f0:	4547      	cmp	r7, r8
 800f5f2:	d128      	bne.n	800f646 <__hexnan+0x12e>
 800f5f4:	2301      	movs	r3, #1
 800f5f6:	603b      	str	r3, [r7, #0]
 800f5f8:	2005      	movs	r0, #5
 800f5fa:	b007      	add	sp, #28
 800f5fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f600:	3501      	adds	r5, #1
 800f602:	2d08      	cmp	r5, #8
 800f604:	f10b 0b01 	add.w	fp, fp, #1
 800f608:	dd06      	ble.n	800f618 <__hexnan+0x100>
 800f60a:	4544      	cmp	r4, r8
 800f60c:	d9c1      	bls.n	800f592 <__hexnan+0x7a>
 800f60e:	2300      	movs	r3, #0
 800f610:	f844 3c04 	str.w	r3, [r4, #-4]
 800f614:	2501      	movs	r5, #1
 800f616:	3c04      	subs	r4, #4
 800f618:	6822      	ldr	r2, [r4, #0]
 800f61a:	f000 000f 	and.w	r0, r0, #15
 800f61e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800f622:	6020      	str	r0, [r4, #0]
 800f624:	e7b5      	b.n	800f592 <__hexnan+0x7a>
 800f626:	2508      	movs	r5, #8
 800f628:	e7b3      	b.n	800f592 <__hexnan+0x7a>
 800f62a:	9b01      	ldr	r3, [sp, #4]
 800f62c:	2b00      	cmp	r3, #0
 800f62e:	d0dd      	beq.n	800f5ec <__hexnan+0xd4>
 800f630:	f1c3 0320 	rsb	r3, r3, #32
 800f634:	f04f 32ff 	mov.w	r2, #4294967295
 800f638:	40da      	lsrs	r2, r3
 800f63a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800f63e:	4013      	ands	r3, r2
 800f640:	f846 3c04 	str.w	r3, [r6, #-4]
 800f644:	e7d2      	b.n	800f5ec <__hexnan+0xd4>
 800f646:	3f04      	subs	r7, #4
 800f648:	e7d0      	b.n	800f5ec <__hexnan+0xd4>
 800f64a:	2004      	movs	r0, #4
 800f64c:	e7d5      	b.n	800f5fa <__hexnan+0xe2>

0800f64e <__ascii_mbtowc>:
 800f64e:	b082      	sub	sp, #8
 800f650:	b901      	cbnz	r1, 800f654 <__ascii_mbtowc+0x6>
 800f652:	a901      	add	r1, sp, #4
 800f654:	b142      	cbz	r2, 800f668 <__ascii_mbtowc+0x1a>
 800f656:	b14b      	cbz	r3, 800f66c <__ascii_mbtowc+0x1e>
 800f658:	7813      	ldrb	r3, [r2, #0]
 800f65a:	600b      	str	r3, [r1, #0]
 800f65c:	7812      	ldrb	r2, [r2, #0]
 800f65e:	1e10      	subs	r0, r2, #0
 800f660:	bf18      	it	ne
 800f662:	2001      	movne	r0, #1
 800f664:	b002      	add	sp, #8
 800f666:	4770      	bx	lr
 800f668:	4610      	mov	r0, r2
 800f66a:	e7fb      	b.n	800f664 <__ascii_mbtowc+0x16>
 800f66c:	f06f 0001 	mvn.w	r0, #1
 800f670:	e7f8      	b.n	800f664 <__ascii_mbtowc+0x16>
	...

0800f674 <_Balloc>:
 800f674:	b570      	push	{r4, r5, r6, lr}
 800f676:	69c6      	ldr	r6, [r0, #28]
 800f678:	4604      	mov	r4, r0
 800f67a:	460d      	mov	r5, r1
 800f67c:	b976      	cbnz	r6, 800f69c <_Balloc+0x28>
 800f67e:	2010      	movs	r0, #16
 800f680:	f7fe fa22 	bl	800dac8 <malloc>
 800f684:	4602      	mov	r2, r0
 800f686:	61e0      	str	r0, [r4, #28]
 800f688:	b920      	cbnz	r0, 800f694 <_Balloc+0x20>
 800f68a:	4b18      	ldr	r3, [pc, #96]	@ (800f6ec <_Balloc+0x78>)
 800f68c:	4818      	ldr	r0, [pc, #96]	@ (800f6f0 <_Balloc+0x7c>)
 800f68e:	216b      	movs	r1, #107	@ 0x6b
 800f690:	f001 f8b6 	bl	8010800 <__assert_func>
 800f694:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f698:	6006      	str	r6, [r0, #0]
 800f69a:	60c6      	str	r6, [r0, #12]
 800f69c:	69e6      	ldr	r6, [r4, #28]
 800f69e:	68f3      	ldr	r3, [r6, #12]
 800f6a0:	b183      	cbz	r3, 800f6c4 <_Balloc+0x50>
 800f6a2:	69e3      	ldr	r3, [r4, #28]
 800f6a4:	68db      	ldr	r3, [r3, #12]
 800f6a6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800f6aa:	b9b8      	cbnz	r0, 800f6dc <_Balloc+0x68>
 800f6ac:	2101      	movs	r1, #1
 800f6ae:	fa01 f605 	lsl.w	r6, r1, r5
 800f6b2:	1d72      	adds	r2, r6, #5
 800f6b4:	0092      	lsls	r2, r2, #2
 800f6b6:	4620      	mov	r0, r4
 800f6b8:	f001 f8c0 	bl	801083c <_calloc_r>
 800f6bc:	b160      	cbz	r0, 800f6d8 <_Balloc+0x64>
 800f6be:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800f6c2:	e00e      	b.n	800f6e2 <_Balloc+0x6e>
 800f6c4:	2221      	movs	r2, #33	@ 0x21
 800f6c6:	2104      	movs	r1, #4
 800f6c8:	4620      	mov	r0, r4
 800f6ca:	f001 f8b7 	bl	801083c <_calloc_r>
 800f6ce:	69e3      	ldr	r3, [r4, #28]
 800f6d0:	60f0      	str	r0, [r6, #12]
 800f6d2:	68db      	ldr	r3, [r3, #12]
 800f6d4:	2b00      	cmp	r3, #0
 800f6d6:	d1e4      	bne.n	800f6a2 <_Balloc+0x2e>
 800f6d8:	2000      	movs	r0, #0
 800f6da:	bd70      	pop	{r4, r5, r6, pc}
 800f6dc:	6802      	ldr	r2, [r0, #0]
 800f6de:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800f6e2:	2300      	movs	r3, #0
 800f6e4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800f6e8:	e7f7      	b.n	800f6da <_Balloc+0x66>
 800f6ea:	bf00      	nop
 800f6ec:	080113c2 	.word	0x080113c2
 800f6f0:	080113d9 	.word	0x080113d9

0800f6f4 <_Bfree>:
 800f6f4:	b570      	push	{r4, r5, r6, lr}
 800f6f6:	69c6      	ldr	r6, [r0, #28]
 800f6f8:	4605      	mov	r5, r0
 800f6fa:	460c      	mov	r4, r1
 800f6fc:	b976      	cbnz	r6, 800f71c <_Bfree+0x28>
 800f6fe:	2010      	movs	r0, #16
 800f700:	f7fe f9e2 	bl	800dac8 <malloc>
 800f704:	4602      	mov	r2, r0
 800f706:	61e8      	str	r0, [r5, #28]
 800f708:	b920      	cbnz	r0, 800f714 <_Bfree+0x20>
 800f70a:	4b09      	ldr	r3, [pc, #36]	@ (800f730 <_Bfree+0x3c>)
 800f70c:	4809      	ldr	r0, [pc, #36]	@ (800f734 <_Bfree+0x40>)
 800f70e:	218f      	movs	r1, #143	@ 0x8f
 800f710:	f001 f876 	bl	8010800 <__assert_func>
 800f714:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f718:	6006      	str	r6, [r0, #0]
 800f71a:	60c6      	str	r6, [r0, #12]
 800f71c:	b13c      	cbz	r4, 800f72e <_Bfree+0x3a>
 800f71e:	69eb      	ldr	r3, [r5, #28]
 800f720:	6862      	ldr	r2, [r4, #4]
 800f722:	68db      	ldr	r3, [r3, #12]
 800f724:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800f728:	6021      	str	r1, [r4, #0]
 800f72a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800f72e:	bd70      	pop	{r4, r5, r6, pc}
 800f730:	080113c2 	.word	0x080113c2
 800f734:	080113d9 	.word	0x080113d9

0800f738 <__multadd>:
 800f738:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f73c:	690d      	ldr	r5, [r1, #16]
 800f73e:	4607      	mov	r7, r0
 800f740:	460c      	mov	r4, r1
 800f742:	461e      	mov	r6, r3
 800f744:	f101 0c14 	add.w	ip, r1, #20
 800f748:	2000      	movs	r0, #0
 800f74a:	f8dc 3000 	ldr.w	r3, [ip]
 800f74e:	b299      	uxth	r1, r3
 800f750:	fb02 6101 	mla	r1, r2, r1, r6
 800f754:	0c1e      	lsrs	r6, r3, #16
 800f756:	0c0b      	lsrs	r3, r1, #16
 800f758:	fb02 3306 	mla	r3, r2, r6, r3
 800f75c:	b289      	uxth	r1, r1
 800f75e:	3001      	adds	r0, #1
 800f760:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800f764:	4285      	cmp	r5, r0
 800f766:	f84c 1b04 	str.w	r1, [ip], #4
 800f76a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800f76e:	dcec      	bgt.n	800f74a <__multadd+0x12>
 800f770:	b30e      	cbz	r6, 800f7b6 <__multadd+0x7e>
 800f772:	68a3      	ldr	r3, [r4, #8]
 800f774:	42ab      	cmp	r3, r5
 800f776:	dc19      	bgt.n	800f7ac <__multadd+0x74>
 800f778:	6861      	ldr	r1, [r4, #4]
 800f77a:	4638      	mov	r0, r7
 800f77c:	3101      	adds	r1, #1
 800f77e:	f7ff ff79 	bl	800f674 <_Balloc>
 800f782:	4680      	mov	r8, r0
 800f784:	b928      	cbnz	r0, 800f792 <__multadd+0x5a>
 800f786:	4602      	mov	r2, r0
 800f788:	4b0c      	ldr	r3, [pc, #48]	@ (800f7bc <__multadd+0x84>)
 800f78a:	480d      	ldr	r0, [pc, #52]	@ (800f7c0 <__multadd+0x88>)
 800f78c:	21ba      	movs	r1, #186	@ 0xba
 800f78e:	f001 f837 	bl	8010800 <__assert_func>
 800f792:	6922      	ldr	r2, [r4, #16]
 800f794:	3202      	adds	r2, #2
 800f796:	f104 010c 	add.w	r1, r4, #12
 800f79a:	0092      	lsls	r2, r2, #2
 800f79c:	300c      	adds	r0, #12
 800f79e:	f7ff fbbc 	bl	800ef1a <memcpy>
 800f7a2:	4621      	mov	r1, r4
 800f7a4:	4638      	mov	r0, r7
 800f7a6:	f7ff ffa5 	bl	800f6f4 <_Bfree>
 800f7aa:	4644      	mov	r4, r8
 800f7ac:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800f7b0:	3501      	adds	r5, #1
 800f7b2:	615e      	str	r6, [r3, #20]
 800f7b4:	6125      	str	r5, [r4, #16]
 800f7b6:	4620      	mov	r0, r4
 800f7b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f7bc:	08011351 	.word	0x08011351
 800f7c0:	080113d9 	.word	0x080113d9

0800f7c4 <__s2b>:
 800f7c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f7c8:	460c      	mov	r4, r1
 800f7ca:	4615      	mov	r5, r2
 800f7cc:	461f      	mov	r7, r3
 800f7ce:	2209      	movs	r2, #9
 800f7d0:	3308      	adds	r3, #8
 800f7d2:	4606      	mov	r6, r0
 800f7d4:	fb93 f3f2 	sdiv	r3, r3, r2
 800f7d8:	2100      	movs	r1, #0
 800f7da:	2201      	movs	r2, #1
 800f7dc:	429a      	cmp	r2, r3
 800f7de:	db09      	blt.n	800f7f4 <__s2b+0x30>
 800f7e0:	4630      	mov	r0, r6
 800f7e2:	f7ff ff47 	bl	800f674 <_Balloc>
 800f7e6:	b940      	cbnz	r0, 800f7fa <__s2b+0x36>
 800f7e8:	4602      	mov	r2, r0
 800f7ea:	4b19      	ldr	r3, [pc, #100]	@ (800f850 <__s2b+0x8c>)
 800f7ec:	4819      	ldr	r0, [pc, #100]	@ (800f854 <__s2b+0x90>)
 800f7ee:	21d3      	movs	r1, #211	@ 0xd3
 800f7f0:	f001 f806 	bl	8010800 <__assert_func>
 800f7f4:	0052      	lsls	r2, r2, #1
 800f7f6:	3101      	adds	r1, #1
 800f7f8:	e7f0      	b.n	800f7dc <__s2b+0x18>
 800f7fa:	9b08      	ldr	r3, [sp, #32]
 800f7fc:	6143      	str	r3, [r0, #20]
 800f7fe:	2d09      	cmp	r5, #9
 800f800:	f04f 0301 	mov.w	r3, #1
 800f804:	6103      	str	r3, [r0, #16]
 800f806:	dd16      	ble.n	800f836 <__s2b+0x72>
 800f808:	f104 0909 	add.w	r9, r4, #9
 800f80c:	46c8      	mov	r8, r9
 800f80e:	442c      	add	r4, r5
 800f810:	f818 3b01 	ldrb.w	r3, [r8], #1
 800f814:	4601      	mov	r1, r0
 800f816:	3b30      	subs	r3, #48	@ 0x30
 800f818:	220a      	movs	r2, #10
 800f81a:	4630      	mov	r0, r6
 800f81c:	f7ff ff8c 	bl	800f738 <__multadd>
 800f820:	45a0      	cmp	r8, r4
 800f822:	d1f5      	bne.n	800f810 <__s2b+0x4c>
 800f824:	f1a5 0408 	sub.w	r4, r5, #8
 800f828:	444c      	add	r4, r9
 800f82a:	1b2d      	subs	r5, r5, r4
 800f82c:	1963      	adds	r3, r4, r5
 800f82e:	42bb      	cmp	r3, r7
 800f830:	db04      	blt.n	800f83c <__s2b+0x78>
 800f832:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f836:	340a      	adds	r4, #10
 800f838:	2509      	movs	r5, #9
 800f83a:	e7f6      	b.n	800f82a <__s2b+0x66>
 800f83c:	f814 3b01 	ldrb.w	r3, [r4], #1
 800f840:	4601      	mov	r1, r0
 800f842:	3b30      	subs	r3, #48	@ 0x30
 800f844:	220a      	movs	r2, #10
 800f846:	4630      	mov	r0, r6
 800f848:	f7ff ff76 	bl	800f738 <__multadd>
 800f84c:	e7ee      	b.n	800f82c <__s2b+0x68>
 800f84e:	bf00      	nop
 800f850:	08011351 	.word	0x08011351
 800f854:	080113d9 	.word	0x080113d9

0800f858 <__hi0bits>:
 800f858:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800f85c:	4603      	mov	r3, r0
 800f85e:	bf36      	itet	cc
 800f860:	0403      	lslcc	r3, r0, #16
 800f862:	2000      	movcs	r0, #0
 800f864:	2010      	movcc	r0, #16
 800f866:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800f86a:	bf3c      	itt	cc
 800f86c:	021b      	lslcc	r3, r3, #8
 800f86e:	3008      	addcc	r0, #8
 800f870:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800f874:	bf3c      	itt	cc
 800f876:	011b      	lslcc	r3, r3, #4
 800f878:	3004      	addcc	r0, #4
 800f87a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800f87e:	bf3c      	itt	cc
 800f880:	009b      	lslcc	r3, r3, #2
 800f882:	3002      	addcc	r0, #2
 800f884:	2b00      	cmp	r3, #0
 800f886:	db05      	blt.n	800f894 <__hi0bits+0x3c>
 800f888:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800f88c:	f100 0001 	add.w	r0, r0, #1
 800f890:	bf08      	it	eq
 800f892:	2020      	moveq	r0, #32
 800f894:	4770      	bx	lr

0800f896 <__lo0bits>:
 800f896:	6803      	ldr	r3, [r0, #0]
 800f898:	4602      	mov	r2, r0
 800f89a:	f013 0007 	ands.w	r0, r3, #7
 800f89e:	d00b      	beq.n	800f8b8 <__lo0bits+0x22>
 800f8a0:	07d9      	lsls	r1, r3, #31
 800f8a2:	d421      	bmi.n	800f8e8 <__lo0bits+0x52>
 800f8a4:	0798      	lsls	r0, r3, #30
 800f8a6:	bf49      	itett	mi
 800f8a8:	085b      	lsrmi	r3, r3, #1
 800f8aa:	089b      	lsrpl	r3, r3, #2
 800f8ac:	2001      	movmi	r0, #1
 800f8ae:	6013      	strmi	r3, [r2, #0]
 800f8b0:	bf5c      	itt	pl
 800f8b2:	6013      	strpl	r3, [r2, #0]
 800f8b4:	2002      	movpl	r0, #2
 800f8b6:	4770      	bx	lr
 800f8b8:	b299      	uxth	r1, r3
 800f8ba:	b909      	cbnz	r1, 800f8c0 <__lo0bits+0x2a>
 800f8bc:	0c1b      	lsrs	r3, r3, #16
 800f8be:	2010      	movs	r0, #16
 800f8c0:	b2d9      	uxtb	r1, r3
 800f8c2:	b909      	cbnz	r1, 800f8c8 <__lo0bits+0x32>
 800f8c4:	3008      	adds	r0, #8
 800f8c6:	0a1b      	lsrs	r3, r3, #8
 800f8c8:	0719      	lsls	r1, r3, #28
 800f8ca:	bf04      	itt	eq
 800f8cc:	091b      	lsreq	r3, r3, #4
 800f8ce:	3004      	addeq	r0, #4
 800f8d0:	0799      	lsls	r1, r3, #30
 800f8d2:	bf04      	itt	eq
 800f8d4:	089b      	lsreq	r3, r3, #2
 800f8d6:	3002      	addeq	r0, #2
 800f8d8:	07d9      	lsls	r1, r3, #31
 800f8da:	d403      	bmi.n	800f8e4 <__lo0bits+0x4e>
 800f8dc:	085b      	lsrs	r3, r3, #1
 800f8de:	f100 0001 	add.w	r0, r0, #1
 800f8e2:	d003      	beq.n	800f8ec <__lo0bits+0x56>
 800f8e4:	6013      	str	r3, [r2, #0]
 800f8e6:	4770      	bx	lr
 800f8e8:	2000      	movs	r0, #0
 800f8ea:	4770      	bx	lr
 800f8ec:	2020      	movs	r0, #32
 800f8ee:	4770      	bx	lr

0800f8f0 <__i2b>:
 800f8f0:	b510      	push	{r4, lr}
 800f8f2:	460c      	mov	r4, r1
 800f8f4:	2101      	movs	r1, #1
 800f8f6:	f7ff febd 	bl	800f674 <_Balloc>
 800f8fa:	4602      	mov	r2, r0
 800f8fc:	b928      	cbnz	r0, 800f90a <__i2b+0x1a>
 800f8fe:	4b05      	ldr	r3, [pc, #20]	@ (800f914 <__i2b+0x24>)
 800f900:	4805      	ldr	r0, [pc, #20]	@ (800f918 <__i2b+0x28>)
 800f902:	f240 1145 	movw	r1, #325	@ 0x145
 800f906:	f000 ff7b 	bl	8010800 <__assert_func>
 800f90a:	2301      	movs	r3, #1
 800f90c:	6144      	str	r4, [r0, #20]
 800f90e:	6103      	str	r3, [r0, #16]
 800f910:	bd10      	pop	{r4, pc}
 800f912:	bf00      	nop
 800f914:	08011351 	.word	0x08011351
 800f918:	080113d9 	.word	0x080113d9

0800f91c <__multiply>:
 800f91c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f920:	4614      	mov	r4, r2
 800f922:	690a      	ldr	r2, [r1, #16]
 800f924:	6923      	ldr	r3, [r4, #16]
 800f926:	429a      	cmp	r2, r3
 800f928:	bfa8      	it	ge
 800f92a:	4623      	movge	r3, r4
 800f92c:	460f      	mov	r7, r1
 800f92e:	bfa4      	itt	ge
 800f930:	460c      	movge	r4, r1
 800f932:	461f      	movge	r7, r3
 800f934:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800f938:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800f93c:	68a3      	ldr	r3, [r4, #8]
 800f93e:	6861      	ldr	r1, [r4, #4]
 800f940:	eb0a 0609 	add.w	r6, sl, r9
 800f944:	42b3      	cmp	r3, r6
 800f946:	b085      	sub	sp, #20
 800f948:	bfb8      	it	lt
 800f94a:	3101      	addlt	r1, #1
 800f94c:	f7ff fe92 	bl	800f674 <_Balloc>
 800f950:	b930      	cbnz	r0, 800f960 <__multiply+0x44>
 800f952:	4602      	mov	r2, r0
 800f954:	4b44      	ldr	r3, [pc, #272]	@ (800fa68 <__multiply+0x14c>)
 800f956:	4845      	ldr	r0, [pc, #276]	@ (800fa6c <__multiply+0x150>)
 800f958:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800f95c:	f000 ff50 	bl	8010800 <__assert_func>
 800f960:	f100 0514 	add.w	r5, r0, #20
 800f964:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800f968:	462b      	mov	r3, r5
 800f96a:	2200      	movs	r2, #0
 800f96c:	4543      	cmp	r3, r8
 800f96e:	d321      	bcc.n	800f9b4 <__multiply+0x98>
 800f970:	f107 0114 	add.w	r1, r7, #20
 800f974:	f104 0214 	add.w	r2, r4, #20
 800f978:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800f97c:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800f980:	9302      	str	r3, [sp, #8]
 800f982:	1b13      	subs	r3, r2, r4
 800f984:	3b15      	subs	r3, #21
 800f986:	f023 0303 	bic.w	r3, r3, #3
 800f98a:	3304      	adds	r3, #4
 800f98c:	f104 0715 	add.w	r7, r4, #21
 800f990:	42ba      	cmp	r2, r7
 800f992:	bf38      	it	cc
 800f994:	2304      	movcc	r3, #4
 800f996:	9301      	str	r3, [sp, #4]
 800f998:	9b02      	ldr	r3, [sp, #8]
 800f99a:	9103      	str	r1, [sp, #12]
 800f99c:	428b      	cmp	r3, r1
 800f99e:	d80c      	bhi.n	800f9ba <__multiply+0x9e>
 800f9a0:	2e00      	cmp	r6, #0
 800f9a2:	dd03      	ble.n	800f9ac <__multiply+0x90>
 800f9a4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800f9a8:	2b00      	cmp	r3, #0
 800f9aa:	d05b      	beq.n	800fa64 <__multiply+0x148>
 800f9ac:	6106      	str	r6, [r0, #16]
 800f9ae:	b005      	add	sp, #20
 800f9b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f9b4:	f843 2b04 	str.w	r2, [r3], #4
 800f9b8:	e7d8      	b.n	800f96c <__multiply+0x50>
 800f9ba:	f8b1 a000 	ldrh.w	sl, [r1]
 800f9be:	f1ba 0f00 	cmp.w	sl, #0
 800f9c2:	d024      	beq.n	800fa0e <__multiply+0xf2>
 800f9c4:	f104 0e14 	add.w	lr, r4, #20
 800f9c8:	46a9      	mov	r9, r5
 800f9ca:	f04f 0c00 	mov.w	ip, #0
 800f9ce:	f85e 7b04 	ldr.w	r7, [lr], #4
 800f9d2:	f8d9 3000 	ldr.w	r3, [r9]
 800f9d6:	fa1f fb87 	uxth.w	fp, r7
 800f9da:	b29b      	uxth	r3, r3
 800f9dc:	fb0a 330b 	mla	r3, sl, fp, r3
 800f9e0:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800f9e4:	f8d9 7000 	ldr.w	r7, [r9]
 800f9e8:	4463      	add	r3, ip
 800f9ea:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800f9ee:	fb0a c70b 	mla	r7, sl, fp, ip
 800f9f2:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800f9f6:	b29b      	uxth	r3, r3
 800f9f8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800f9fc:	4572      	cmp	r2, lr
 800f9fe:	f849 3b04 	str.w	r3, [r9], #4
 800fa02:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800fa06:	d8e2      	bhi.n	800f9ce <__multiply+0xb2>
 800fa08:	9b01      	ldr	r3, [sp, #4]
 800fa0a:	f845 c003 	str.w	ip, [r5, r3]
 800fa0e:	9b03      	ldr	r3, [sp, #12]
 800fa10:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800fa14:	3104      	adds	r1, #4
 800fa16:	f1b9 0f00 	cmp.w	r9, #0
 800fa1a:	d021      	beq.n	800fa60 <__multiply+0x144>
 800fa1c:	682b      	ldr	r3, [r5, #0]
 800fa1e:	f104 0c14 	add.w	ip, r4, #20
 800fa22:	46ae      	mov	lr, r5
 800fa24:	f04f 0a00 	mov.w	sl, #0
 800fa28:	f8bc b000 	ldrh.w	fp, [ip]
 800fa2c:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800fa30:	fb09 770b 	mla	r7, r9, fp, r7
 800fa34:	4457      	add	r7, sl
 800fa36:	b29b      	uxth	r3, r3
 800fa38:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800fa3c:	f84e 3b04 	str.w	r3, [lr], #4
 800fa40:	f85c 3b04 	ldr.w	r3, [ip], #4
 800fa44:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800fa48:	f8be 3000 	ldrh.w	r3, [lr]
 800fa4c:	fb09 330a 	mla	r3, r9, sl, r3
 800fa50:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800fa54:	4562      	cmp	r2, ip
 800fa56:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800fa5a:	d8e5      	bhi.n	800fa28 <__multiply+0x10c>
 800fa5c:	9f01      	ldr	r7, [sp, #4]
 800fa5e:	51eb      	str	r3, [r5, r7]
 800fa60:	3504      	adds	r5, #4
 800fa62:	e799      	b.n	800f998 <__multiply+0x7c>
 800fa64:	3e01      	subs	r6, #1
 800fa66:	e79b      	b.n	800f9a0 <__multiply+0x84>
 800fa68:	08011351 	.word	0x08011351
 800fa6c:	080113d9 	.word	0x080113d9

0800fa70 <__pow5mult>:
 800fa70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fa74:	4615      	mov	r5, r2
 800fa76:	f012 0203 	ands.w	r2, r2, #3
 800fa7a:	4607      	mov	r7, r0
 800fa7c:	460e      	mov	r6, r1
 800fa7e:	d007      	beq.n	800fa90 <__pow5mult+0x20>
 800fa80:	4c25      	ldr	r4, [pc, #148]	@ (800fb18 <__pow5mult+0xa8>)
 800fa82:	3a01      	subs	r2, #1
 800fa84:	2300      	movs	r3, #0
 800fa86:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800fa8a:	f7ff fe55 	bl	800f738 <__multadd>
 800fa8e:	4606      	mov	r6, r0
 800fa90:	10ad      	asrs	r5, r5, #2
 800fa92:	d03d      	beq.n	800fb10 <__pow5mult+0xa0>
 800fa94:	69fc      	ldr	r4, [r7, #28]
 800fa96:	b97c      	cbnz	r4, 800fab8 <__pow5mult+0x48>
 800fa98:	2010      	movs	r0, #16
 800fa9a:	f7fe f815 	bl	800dac8 <malloc>
 800fa9e:	4602      	mov	r2, r0
 800faa0:	61f8      	str	r0, [r7, #28]
 800faa2:	b928      	cbnz	r0, 800fab0 <__pow5mult+0x40>
 800faa4:	4b1d      	ldr	r3, [pc, #116]	@ (800fb1c <__pow5mult+0xac>)
 800faa6:	481e      	ldr	r0, [pc, #120]	@ (800fb20 <__pow5mult+0xb0>)
 800faa8:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800faac:	f000 fea8 	bl	8010800 <__assert_func>
 800fab0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800fab4:	6004      	str	r4, [r0, #0]
 800fab6:	60c4      	str	r4, [r0, #12]
 800fab8:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800fabc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800fac0:	b94c      	cbnz	r4, 800fad6 <__pow5mult+0x66>
 800fac2:	f240 2171 	movw	r1, #625	@ 0x271
 800fac6:	4638      	mov	r0, r7
 800fac8:	f7ff ff12 	bl	800f8f0 <__i2b>
 800facc:	2300      	movs	r3, #0
 800face:	f8c8 0008 	str.w	r0, [r8, #8]
 800fad2:	4604      	mov	r4, r0
 800fad4:	6003      	str	r3, [r0, #0]
 800fad6:	f04f 0900 	mov.w	r9, #0
 800fada:	07eb      	lsls	r3, r5, #31
 800fadc:	d50a      	bpl.n	800faf4 <__pow5mult+0x84>
 800fade:	4631      	mov	r1, r6
 800fae0:	4622      	mov	r2, r4
 800fae2:	4638      	mov	r0, r7
 800fae4:	f7ff ff1a 	bl	800f91c <__multiply>
 800fae8:	4631      	mov	r1, r6
 800faea:	4680      	mov	r8, r0
 800faec:	4638      	mov	r0, r7
 800faee:	f7ff fe01 	bl	800f6f4 <_Bfree>
 800faf2:	4646      	mov	r6, r8
 800faf4:	106d      	asrs	r5, r5, #1
 800faf6:	d00b      	beq.n	800fb10 <__pow5mult+0xa0>
 800faf8:	6820      	ldr	r0, [r4, #0]
 800fafa:	b938      	cbnz	r0, 800fb0c <__pow5mult+0x9c>
 800fafc:	4622      	mov	r2, r4
 800fafe:	4621      	mov	r1, r4
 800fb00:	4638      	mov	r0, r7
 800fb02:	f7ff ff0b 	bl	800f91c <__multiply>
 800fb06:	6020      	str	r0, [r4, #0]
 800fb08:	f8c0 9000 	str.w	r9, [r0]
 800fb0c:	4604      	mov	r4, r0
 800fb0e:	e7e4      	b.n	800fada <__pow5mult+0x6a>
 800fb10:	4630      	mov	r0, r6
 800fb12:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fb16:	bf00      	nop
 800fb18:	08011434 	.word	0x08011434
 800fb1c:	080113c2 	.word	0x080113c2
 800fb20:	080113d9 	.word	0x080113d9

0800fb24 <__lshift>:
 800fb24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fb28:	460c      	mov	r4, r1
 800fb2a:	6849      	ldr	r1, [r1, #4]
 800fb2c:	6923      	ldr	r3, [r4, #16]
 800fb2e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800fb32:	68a3      	ldr	r3, [r4, #8]
 800fb34:	4607      	mov	r7, r0
 800fb36:	4691      	mov	r9, r2
 800fb38:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800fb3c:	f108 0601 	add.w	r6, r8, #1
 800fb40:	42b3      	cmp	r3, r6
 800fb42:	db0b      	blt.n	800fb5c <__lshift+0x38>
 800fb44:	4638      	mov	r0, r7
 800fb46:	f7ff fd95 	bl	800f674 <_Balloc>
 800fb4a:	4605      	mov	r5, r0
 800fb4c:	b948      	cbnz	r0, 800fb62 <__lshift+0x3e>
 800fb4e:	4602      	mov	r2, r0
 800fb50:	4b28      	ldr	r3, [pc, #160]	@ (800fbf4 <__lshift+0xd0>)
 800fb52:	4829      	ldr	r0, [pc, #164]	@ (800fbf8 <__lshift+0xd4>)
 800fb54:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800fb58:	f000 fe52 	bl	8010800 <__assert_func>
 800fb5c:	3101      	adds	r1, #1
 800fb5e:	005b      	lsls	r3, r3, #1
 800fb60:	e7ee      	b.n	800fb40 <__lshift+0x1c>
 800fb62:	2300      	movs	r3, #0
 800fb64:	f100 0114 	add.w	r1, r0, #20
 800fb68:	f100 0210 	add.w	r2, r0, #16
 800fb6c:	4618      	mov	r0, r3
 800fb6e:	4553      	cmp	r3, sl
 800fb70:	db33      	blt.n	800fbda <__lshift+0xb6>
 800fb72:	6920      	ldr	r0, [r4, #16]
 800fb74:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800fb78:	f104 0314 	add.w	r3, r4, #20
 800fb7c:	f019 091f 	ands.w	r9, r9, #31
 800fb80:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800fb84:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800fb88:	d02b      	beq.n	800fbe2 <__lshift+0xbe>
 800fb8a:	f1c9 0e20 	rsb	lr, r9, #32
 800fb8e:	468a      	mov	sl, r1
 800fb90:	2200      	movs	r2, #0
 800fb92:	6818      	ldr	r0, [r3, #0]
 800fb94:	fa00 f009 	lsl.w	r0, r0, r9
 800fb98:	4310      	orrs	r0, r2
 800fb9a:	f84a 0b04 	str.w	r0, [sl], #4
 800fb9e:	f853 2b04 	ldr.w	r2, [r3], #4
 800fba2:	459c      	cmp	ip, r3
 800fba4:	fa22 f20e 	lsr.w	r2, r2, lr
 800fba8:	d8f3      	bhi.n	800fb92 <__lshift+0x6e>
 800fbaa:	ebac 0304 	sub.w	r3, ip, r4
 800fbae:	3b15      	subs	r3, #21
 800fbb0:	f023 0303 	bic.w	r3, r3, #3
 800fbb4:	3304      	adds	r3, #4
 800fbb6:	f104 0015 	add.w	r0, r4, #21
 800fbba:	4584      	cmp	ip, r0
 800fbbc:	bf38      	it	cc
 800fbbe:	2304      	movcc	r3, #4
 800fbc0:	50ca      	str	r2, [r1, r3]
 800fbc2:	b10a      	cbz	r2, 800fbc8 <__lshift+0xa4>
 800fbc4:	f108 0602 	add.w	r6, r8, #2
 800fbc8:	3e01      	subs	r6, #1
 800fbca:	4638      	mov	r0, r7
 800fbcc:	612e      	str	r6, [r5, #16]
 800fbce:	4621      	mov	r1, r4
 800fbd0:	f7ff fd90 	bl	800f6f4 <_Bfree>
 800fbd4:	4628      	mov	r0, r5
 800fbd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fbda:	f842 0f04 	str.w	r0, [r2, #4]!
 800fbde:	3301      	adds	r3, #1
 800fbe0:	e7c5      	b.n	800fb6e <__lshift+0x4a>
 800fbe2:	3904      	subs	r1, #4
 800fbe4:	f853 2b04 	ldr.w	r2, [r3], #4
 800fbe8:	f841 2f04 	str.w	r2, [r1, #4]!
 800fbec:	459c      	cmp	ip, r3
 800fbee:	d8f9      	bhi.n	800fbe4 <__lshift+0xc0>
 800fbf0:	e7ea      	b.n	800fbc8 <__lshift+0xa4>
 800fbf2:	bf00      	nop
 800fbf4:	08011351 	.word	0x08011351
 800fbf8:	080113d9 	.word	0x080113d9

0800fbfc <__mcmp>:
 800fbfc:	690a      	ldr	r2, [r1, #16]
 800fbfe:	4603      	mov	r3, r0
 800fc00:	6900      	ldr	r0, [r0, #16]
 800fc02:	1a80      	subs	r0, r0, r2
 800fc04:	b530      	push	{r4, r5, lr}
 800fc06:	d10e      	bne.n	800fc26 <__mcmp+0x2a>
 800fc08:	3314      	adds	r3, #20
 800fc0a:	3114      	adds	r1, #20
 800fc0c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800fc10:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800fc14:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800fc18:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800fc1c:	4295      	cmp	r5, r2
 800fc1e:	d003      	beq.n	800fc28 <__mcmp+0x2c>
 800fc20:	d205      	bcs.n	800fc2e <__mcmp+0x32>
 800fc22:	f04f 30ff 	mov.w	r0, #4294967295
 800fc26:	bd30      	pop	{r4, r5, pc}
 800fc28:	42a3      	cmp	r3, r4
 800fc2a:	d3f3      	bcc.n	800fc14 <__mcmp+0x18>
 800fc2c:	e7fb      	b.n	800fc26 <__mcmp+0x2a>
 800fc2e:	2001      	movs	r0, #1
 800fc30:	e7f9      	b.n	800fc26 <__mcmp+0x2a>
	...

0800fc34 <__mdiff>:
 800fc34:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fc38:	4689      	mov	r9, r1
 800fc3a:	4606      	mov	r6, r0
 800fc3c:	4611      	mov	r1, r2
 800fc3e:	4648      	mov	r0, r9
 800fc40:	4614      	mov	r4, r2
 800fc42:	f7ff ffdb 	bl	800fbfc <__mcmp>
 800fc46:	1e05      	subs	r5, r0, #0
 800fc48:	d112      	bne.n	800fc70 <__mdiff+0x3c>
 800fc4a:	4629      	mov	r1, r5
 800fc4c:	4630      	mov	r0, r6
 800fc4e:	f7ff fd11 	bl	800f674 <_Balloc>
 800fc52:	4602      	mov	r2, r0
 800fc54:	b928      	cbnz	r0, 800fc62 <__mdiff+0x2e>
 800fc56:	4b3f      	ldr	r3, [pc, #252]	@ (800fd54 <__mdiff+0x120>)
 800fc58:	f240 2137 	movw	r1, #567	@ 0x237
 800fc5c:	483e      	ldr	r0, [pc, #248]	@ (800fd58 <__mdiff+0x124>)
 800fc5e:	f000 fdcf 	bl	8010800 <__assert_func>
 800fc62:	2301      	movs	r3, #1
 800fc64:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800fc68:	4610      	mov	r0, r2
 800fc6a:	b003      	add	sp, #12
 800fc6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fc70:	bfbc      	itt	lt
 800fc72:	464b      	movlt	r3, r9
 800fc74:	46a1      	movlt	r9, r4
 800fc76:	4630      	mov	r0, r6
 800fc78:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800fc7c:	bfba      	itte	lt
 800fc7e:	461c      	movlt	r4, r3
 800fc80:	2501      	movlt	r5, #1
 800fc82:	2500      	movge	r5, #0
 800fc84:	f7ff fcf6 	bl	800f674 <_Balloc>
 800fc88:	4602      	mov	r2, r0
 800fc8a:	b918      	cbnz	r0, 800fc94 <__mdiff+0x60>
 800fc8c:	4b31      	ldr	r3, [pc, #196]	@ (800fd54 <__mdiff+0x120>)
 800fc8e:	f240 2145 	movw	r1, #581	@ 0x245
 800fc92:	e7e3      	b.n	800fc5c <__mdiff+0x28>
 800fc94:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800fc98:	6926      	ldr	r6, [r4, #16]
 800fc9a:	60c5      	str	r5, [r0, #12]
 800fc9c:	f109 0310 	add.w	r3, r9, #16
 800fca0:	f109 0514 	add.w	r5, r9, #20
 800fca4:	f104 0e14 	add.w	lr, r4, #20
 800fca8:	f100 0b14 	add.w	fp, r0, #20
 800fcac:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800fcb0:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800fcb4:	9301      	str	r3, [sp, #4]
 800fcb6:	46d9      	mov	r9, fp
 800fcb8:	f04f 0c00 	mov.w	ip, #0
 800fcbc:	9b01      	ldr	r3, [sp, #4]
 800fcbe:	f85e 0b04 	ldr.w	r0, [lr], #4
 800fcc2:	f853 af04 	ldr.w	sl, [r3, #4]!
 800fcc6:	9301      	str	r3, [sp, #4]
 800fcc8:	fa1f f38a 	uxth.w	r3, sl
 800fccc:	4619      	mov	r1, r3
 800fcce:	b283      	uxth	r3, r0
 800fcd0:	1acb      	subs	r3, r1, r3
 800fcd2:	0c00      	lsrs	r0, r0, #16
 800fcd4:	4463      	add	r3, ip
 800fcd6:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800fcda:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800fcde:	b29b      	uxth	r3, r3
 800fce0:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800fce4:	4576      	cmp	r6, lr
 800fce6:	f849 3b04 	str.w	r3, [r9], #4
 800fcea:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800fcee:	d8e5      	bhi.n	800fcbc <__mdiff+0x88>
 800fcf0:	1b33      	subs	r3, r6, r4
 800fcf2:	3b15      	subs	r3, #21
 800fcf4:	f023 0303 	bic.w	r3, r3, #3
 800fcf8:	3415      	adds	r4, #21
 800fcfa:	3304      	adds	r3, #4
 800fcfc:	42a6      	cmp	r6, r4
 800fcfe:	bf38      	it	cc
 800fd00:	2304      	movcc	r3, #4
 800fd02:	441d      	add	r5, r3
 800fd04:	445b      	add	r3, fp
 800fd06:	461e      	mov	r6, r3
 800fd08:	462c      	mov	r4, r5
 800fd0a:	4544      	cmp	r4, r8
 800fd0c:	d30e      	bcc.n	800fd2c <__mdiff+0xf8>
 800fd0e:	f108 0103 	add.w	r1, r8, #3
 800fd12:	1b49      	subs	r1, r1, r5
 800fd14:	f021 0103 	bic.w	r1, r1, #3
 800fd18:	3d03      	subs	r5, #3
 800fd1a:	45a8      	cmp	r8, r5
 800fd1c:	bf38      	it	cc
 800fd1e:	2100      	movcc	r1, #0
 800fd20:	440b      	add	r3, r1
 800fd22:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800fd26:	b191      	cbz	r1, 800fd4e <__mdiff+0x11a>
 800fd28:	6117      	str	r7, [r2, #16]
 800fd2a:	e79d      	b.n	800fc68 <__mdiff+0x34>
 800fd2c:	f854 1b04 	ldr.w	r1, [r4], #4
 800fd30:	46e6      	mov	lr, ip
 800fd32:	0c08      	lsrs	r0, r1, #16
 800fd34:	fa1c fc81 	uxtah	ip, ip, r1
 800fd38:	4471      	add	r1, lr
 800fd3a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800fd3e:	b289      	uxth	r1, r1
 800fd40:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800fd44:	f846 1b04 	str.w	r1, [r6], #4
 800fd48:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800fd4c:	e7dd      	b.n	800fd0a <__mdiff+0xd6>
 800fd4e:	3f01      	subs	r7, #1
 800fd50:	e7e7      	b.n	800fd22 <__mdiff+0xee>
 800fd52:	bf00      	nop
 800fd54:	08011351 	.word	0x08011351
 800fd58:	080113d9 	.word	0x080113d9

0800fd5c <__ulp>:
 800fd5c:	b082      	sub	sp, #8
 800fd5e:	ed8d 0b00 	vstr	d0, [sp]
 800fd62:	9a01      	ldr	r2, [sp, #4]
 800fd64:	4b0f      	ldr	r3, [pc, #60]	@ (800fda4 <__ulp+0x48>)
 800fd66:	4013      	ands	r3, r2
 800fd68:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800fd6c:	2b00      	cmp	r3, #0
 800fd6e:	dc08      	bgt.n	800fd82 <__ulp+0x26>
 800fd70:	425b      	negs	r3, r3
 800fd72:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800fd76:	ea4f 5223 	mov.w	r2, r3, asr #20
 800fd7a:	da04      	bge.n	800fd86 <__ulp+0x2a>
 800fd7c:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800fd80:	4113      	asrs	r3, r2
 800fd82:	2200      	movs	r2, #0
 800fd84:	e008      	b.n	800fd98 <__ulp+0x3c>
 800fd86:	f1a2 0314 	sub.w	r3, r2, #20
 800fd8a:	2b1e      	cmp	r3, #30
 800fd8c:	bfda      	itte	le
 800fd8e:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800fd92:	40da      	lsrle	r2, r3
 800fd94:	2201      	movgt	r2, #1
 800fd96:	2300      	movs	r3, #0
 800fd98:	4619      	mov	r1, r3
 800fd9a:	4610      	mov	r0, r2
 800fd9c:	ec41 0b10 	vmov	d0, r0, r1
 800fda0:	b002      	add	sp, #8
 800fda2:	4770      	bx	lr
 800fda4:	7ff00000 	.word	0x7ff00000

0800fda8 <__b2d>:
 800fda8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fdac:	6906      	ldr	r6, [r0, #16]
 800fdae:	f100 0814 	add.w	r8, r0, #20
 800fdb2:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800fdb6:	1f37      	subs	r7, r6, #4
 800fdb8:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800fdbc:	4610      	mov	r0, r2
 800fdbe:	f7ff fd4b 	bl	800f858 <__hi0bits>
 800fdc2:	f1c0 0320 	rsb	r3, r0, #32
 800fdc6:	280a      	cmp	r0, #10
 800fdc8:	600b      	str	r3, [r1, #0]
 800fdca:	491b      	ldr	r1, [pc, #108]	@ (800fe38 <__b2d+0x90>)
 800fdcc:	dc15      	bgt.n	800fdfa <__b2d+0x52>
 800fdce:	f1c0 0c0b 	rsb	ip, r0, #11
 800fdd2:	fa22 f30c 	lsr.w	r3, r2, ip
 800fdd6:	45b8      	cmp	r8, r7
 800fdd8:	ea43 0501 	orr.w	r5, r3, r1
 800fddc:	bf34      	ite	cc
 800fdde:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800fde2:	2300      	movcs	r3, #0
 800fde4:	3015      	adds	r0, #21
 800fde6:	fa02 f000 	lsl.w	r0, r2, r0
 800fdea:	fa23 f30c 	lsr.w	r3, r3, ip
 800fdee:	4303      	orrs	r3, r0
 800fdf0:	461c      	mov	r4, r3
 800fdf2:	ec45 4b10 	vmov	d0, r4, r5
 800fdf6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fdfa:	45b8      	cmp	r8, r7
 800fdfc:	bf3a      	itte	cc
 800fdfe:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800fe02:	f1a6 0708 	subcc.w	r7, r6, #8
 800fe06:	2300      	movcs	r3, #0
 800fe08:	380b      	subs	r0, #11
 800fe0a:	d012      	beq.n	800fe32 <__b2d+0x8a>
 800fe0c:	f1c0 0120 	rsb	r1, r0, #32
 800fe10:	fa23 f401 	lsr.w	r4, r3, r1
 800fe14:	4082      	lsls	r2, r0
 800fe16:	4322      	orrs	r2, r4
 800fe18:	4547      	cmp	r7, r8
 800fe1a:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800fe1e:	bf8c      	ite	hi
 800fe20:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800fe24:	2200      	movls	r2, #0
 800fe26:	4083      	lsls	r3, r0
 800fe28:	40ca      	lsrs	r2, r1
 800fe2a:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800fe2e:	4313      	orrs	r3, r2
 800fe30:	e7de      	b.n	800fdf0 <__b2d+0x48>
 800fe32:	ea42 0501 	orr.w	r5, r2, r1
 800fe36:	e7db      	b.n	800fdf0 <__b2d+0x48>
 800fe38:	3ff00000 	.word	0x3ff00000

0800fe3c <__d2b>:
 800fe3c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800fe40:	460f      	mov	r7, r1
 800fe42:	2101      	movs	r1, #1
 800fe44:	ec59 8b10 	vmov	r8, r9, d0
 800fe48:	4616      	mov	r6, r2
 800fe4a:	f7ff fc13 	bl	800f674 <_Balloc>
 800fe4e:	4604      	mov	r4, r0
 800fe50:	b930      	cbnz	r0, 800fe60 <__d2b+0x24>
 800fe52:	4602      	mov	r2, r0
 800fe54:	4b23      	ldr	r3, [pc, #140]	@ (800fee4 <__d2b+0xa8>)
 800fe56:	4824      	ldr	r0, [pc, #144]	@ (800fee8 <__d2b+0xac>)
 800fe58:	f240 310f 	movw	r1, #783	@ 0x30f
 800fe5c:	f000 fcd0 	bl	8010800 <__assert_func>
 800fe60:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800fe64:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800fe68:	b10d      	cbz	r5, 800fe6e <__d2b+0x32>
 800fe6a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800fe6e:	9301      	str	r3, [sp, #4]
 800fe70:	f1b8 0300 	subs.w	r3, r8, #0
 800fe74:	d023      	beq.n	800febe <__d2b+0x82>
 800fe76:	4668      	mov	r0, sp
 800fe78:	9300      	str	r3, [sp, #0]
 800fe7a:	f7ff fd0c 	bl	800f896 <__lo0bits>
 800fe7e:	e9dd 1200 	ldrd	r1, r2, [sp]
 800fe82:	b1d0      	cbz	r0, 800feba <__d2b+0x7e>
 800fe84:	f1c0 0320 	rsb	r3, r0, #32
 800fe88:	fa02 f303 	lsl.w	r3, r2, r3
 800fe8c:	430b      	orrs	r3, r1
 800fe8e:	40c2      	lsrs	r2, r0
 800fe90:	6163      	str	r3, [r4, #20]
 800fe92:	9201      	str	r2, [sp, #4]
 800fe94:	9b01      	ldr	r3, [sp, #4]
 800fe96:	61a3      	str	r3, [r4, #24]
 800fe98:	2b00      	cmp	r3, #0
 800fe9a:	bf0c      	ite	eq
 800fe9c:	2201      	moveq	r2, #1
 800fe9e:	2202      	movne	r2, #2
 800fea0:	6122      	str	r2, [r4, #16]
 800fea2:	b1a5      	cbz	r5, 800fece <__d2b+0x92>
 800fea4:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800fea8:	4405      	add	r5, r0
 800feaa:	603d      	str	r5, [r7, #0]
 800feac:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800feb0:	6030      	str	r0, [r6, #0]
 800feb2:	4620      	mov	r0, r4
 800feb4:	b003      	add	sp, #12
 800feb6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800feba:	6161      	str	r1, [r4, #20]
 800febc:	e7ea      	b.n	800fe94 <__d2b+0x58>
 800febe:	a801      	add	r0, sp, #4
 800fec0:	f7ff fce9 	bl	800f896 <__lo0bits>
 800fec4:	9b01      	ldr	r3, [sp, #4]
 800fec6:	6163      	str	r3, [r4, #20]
 800fec8:	3020      	adds	r0, #32
 800feca:	2201      	movs	r2, #1
 800fecc:	e7e8      	b.n	800fea0 <__d2b+0x64>
 800fece:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800fed2:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800fed6:	6038      	str	r0, [r7, #0]
 800fed8:	6918      	ldr	r0, [r3, #16]
 800feda:	f7ff fcbd 	bl	800f858 <__hi0bits>
 800fede:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800fee2:	e7e5      	b.n	800feb0 <__d2b+0x74>
 800fee4:	08011351 	.word	0x08011351
 800fee8:	080113d9 	.word	0x080113d9

0800feec <__ratio>:
 800feec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fef0:	b085      	sub	sp, #20
 800fef2:	e9cd 1000 	strd	r1, r0, [sp]
 800fef6:	a902      	add	r1, sp, #8
 800fef8:	f7ff ff56 	bl	800fda8 <__b2d>
 800fefc:	9800      	ldr	r0, [sp, #0]
 800fefe:	a903      	add	r1, sp, #12
 800ff00:	ec55 4b10 	vmov	r4, r5, d0
 800ff04:	f7ff ff50 	bl	800fda8 <__b2d>
 800ff08:	9b01      	ldr	r3, [sp, #4]
 800ff0a:	6919      	ldr	r1, [r3, #16]
 800ff0c:	9b00      	ldr	r3, [sp, #0]
 800ff0e:	691b      	ldr	r3, [r3, #16]
 800ff10:	1ac9      	subs	r1, r1, r3
 800ff12:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800ff16:	1a9b      	subs	r3, r3, r2
 800ff18:	ec5b ab10 	vmov	sl, fp, d0
 800ff1c:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800ff20:	2b00      	cmp	r3, #0
 800ff22:	bfce      	itee	gt
 800ff24:	462a      	movgt	r2, r5
 800ff26:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800ff2a:	465a      	movle	r2, fp
 800ff2c:	462f      	mov	r7, r5
 800ff2e:	46d9      	mov	r9, fp
 800ff30:	bfcc      	ite	gt
 800ff32:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800ff36:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800ff3a:	464b      	mov	r3, r9
 800ff3c:	4652      	mov	r2, sl
 800ff3e:	4620      	mov	r0, r4
 800ff40:	4639      	mov	r1, r7
 800ff42:	f7f0 fc9b 	bl	800087c <__aeabi_ddiv>
 800ff46:	ec41 0b10 	vmov	d0, r0, r1
 800ff4a:	b005      	add	sp, #20
 800ff4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800ff50 <__copybits>:
 800ff50:	3901      	subs	r1, #1
 800ff52:	b570      	push	{r4, r5, r6, lr}
 800ff54:	1149      	asrs	r1, r1, #5
 800ff56:	6914      	ldr	r4, [r2, #16]
 800ff58:	3101      	adds	r1, #1
 800ff5a:	f102 0314 	add.w	r3, r2, #20
 800ff5e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800ff62:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800ff66:	1f05      	subs	r5, r0, #4
 800ff68:	42a3      	cmp	r3, r4
 800ff6a:	d30c      	bcc.n	800ff86 <__copybits+0x36>
 800ff6c:	1aa3      	subs	r3, r4, r2
 800ff6e:	3b11      	subs	r3, #17
 800ff70:	f023 0303 	bic.w	r3, r3, #3
 800ff74:	3211      	adds	r2, #17
 800ff76:	42a2      	cmp	r2, r4
 800ff78:	bf88      	it	hi
 800ff7a:	2300      	movhi	r3, #0
 800ff7c:	4418      	add	r0, r3
 800ff7e:	2300      	movs	r3, #0
 800ff80:	4288      	cmp	r0, r1
 800ff82:	d305      	bcc.n	800ff90 <__copybits+0x40>
 800ff84:	bd70      	pop	{r4, r5, r6, pc}
 800ff86:	f853 6b04 	ldr.w	r6, [r3], #4
 800ff8a:	f845 6f04 	str.w	r6, [r5, #4]!
 800ff8e:	e7eb      	b.n	800ff68 <__copybits+0x18>
 800ff90:	f840 3b04 	str.w	r3, [r0], #4
 800ff94:	e7f4      	b.n	800ff80 <__copybits+0x30>

0800ff96 <__any_on>:
 800ff96:	f100 0214 	add.w	r2, r0, #20
 800ff9a:	6900      	ldr	r0, [r0, #16]
 800ff9c:	114b      	asrs	r3, r1, #5
 800ff9e:	4298      	cmp	r0, r3
 800ffa0:	b510      	push	{r4, lr}
 800ffa2:	db11      	blt.n	800ffc8 <__any_on+0x32>
 800ffa4:	dd0a      	ble.n	800ffbc <__any_on+0x26>
 800ffa6:	f011 011f 	ands.w	r1, r1, #31
 800ffaa:	d007      	beq.n	800ffbc <__any_on+0x26>
 800ffac:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800ffb0:	fa24 f001 	lsr.w	r0, r4, r1
 800ffb4:	fa00 f101 	lsl.w	r1, r0, r1
 800ffb8:	428c      	cmp	r4, r1
 800ffba:	d10b      	bne.n	800ffd4 <__any_on+0x3e>
 800ffbc:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800ffc0:	4293      	cmp	r3, r2
 800ffc2:	d803      	bhi.n	800ffcc <__any_on+0x36>
 800ffc4:	2000      	movs	r0, #0
 800ffc6:	bd10      	pop	{r4, pc}
 800ffc8:	4603      	mov	r3, r0
 800ffca:	e7f7      	b.n	800ffbc <__any_on+0x26>
 800ffcc:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800ffd0:	2900      	cmp	r1, #0
 800ffd2:	d0f5      	beq.n	800ffc0 <__any_on+0x2a>
 800ffd4:	2001      	movs	r0, #1
 800ffd6:	e7f6      	b.n	800ffc6 <__any_on+0x30>

0800ffd8 <_malloc_usable_size_r>:
 800ffd8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ffdc:	1f18      	subs	r0, r3, #4
 800ffde:	2b00      	cmp	r3, #0
 800ffe0:	bfbc      	itt	lt
 800ffe2:	580b      	ldrlt	r3, [r1, r0]
 800ffe4:	18c0      	addlt	r0, r0, r3
 800ffe6:	4770      	bx	lr

0800ffe8 <__ascii_wctomb>:
 800ffe8:	4603      	mov	r3, r0
 800ffea:	4608      	mov	r0, r1
 800ffec:	b141      	cbz	r1, 8010000 <__ascii_wctomb+0x18>
 800ffee:	2aff      	cmp	r2, #255	@ 0xff
 800fff0:	d904      	bls.n	800fffc <__ascii_wctomb+0x14>
 800fff2:	228a      	movs	r2, #138	@ 0x8a
 800fff4:	601a      	str	r2, [r3, #0]
 800fff6:	f04f 30ff 	mov.w	r0, #4294967295
 800fffa:	4770      	bx	lr
 800fffc:	700a      	strb	r2, [r1, #0]
 800fffe:	2001      	movs	r0, #1
 8010000:	4770      	bx	lr

08010002 <__sfputc_r>:
 8010002:	6893      	ldr	r3, [r2, #8]
 8010004:	3b01      	subs	r3, #1
 8010006:	2b00      	cmp	r3, #0
 8010008:	b410      	push	{r4}
 801000a:	6093      	str	r3, [r2, #8]
 801000c:	da08      	bge.n	8010020 <__sfputc_r+0x1e>
 801000e:	6994      	ldr	r4, [r2, #24]
 8010010:	42a3      	cmp	r3, r4
 8010012:	db01      	blt.n	8010018 <__sfputc_r+0x16>
 8010014:	290a      	cmp	r1, #10
 8010016:	d103      	bne.n	8010020 <__sfputc_r+0x1e>
 8010018:	f85d 4b04 	ldr.w	r4, [sp], #4
 801001c:	f7fe bdcd 	b.w	800ebba <__swbuf_r>
 8010020:	6813      	ldr	r3, [r2, #0]
 8010022:	1c58      	adds	r0, r3, #1
 8010024:	6010      	str	r0, [r2, #0]
 8010026:	7019      	strb	r1, [r3, #0]
 8010028:	4608      	mov	r0, r1
 801002a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801002e:	4770      	bx	lr

08010030 <__sfputs_r>:
 8010030:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010032:	4606      	mov	r6, r0
 8010034:	460f      	mov	r7, r1
 8010036:	4614      	mov	r4, r2
 8010038:	18d5      	adds	r5, r2, r3
 801003a:	42ac      	cmp	r4, r5
 801003c:	d101      	bne.n	8010042 <__sfputs_r+0x12>
 801003e:	2000      	movs	r0, #0
 8010040:	e007      	b.n	8010052 <__sfputs_r+0x22>
 8010042:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010046:	463a      	mov	r2, r7
 8010048:	4630      	mov	r0, r6
 801004a:	f7ff ffda 	bl	8010002 <__sfputc_r>
 801004e:	1c43      	adds	r3, r0, #1
 8010050:	d1f3      	bne.n	801003a <__sfputs_r+0xa>
 8010052:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08010054 <_vfiprintf_r>:
 8010054:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010058:	460d      	mov	r5, r1
 801005a:	b09d      	sub	sp, #116	@ 0x74
 801005c:	4614      	mov	r4, r2
 801005e:	4698      	mov	r8, r3
 8010060:	4606      	mov	r6, r0
 8010062:	b118      	cbz	r0, 801006c <_vfiprintf_r+0x18>
 8010064:	6a03      	ldr	r3, [r0, #32]
 8010066:	b90b      	cbnz	r3, 801006c <_vfiprintf_r+0x18>
 8010068:	f7fe fcbe 	bl	800e9e8 <__sinit>
 801006c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801006e:	07d9      	lsls	r1, r3, #31
 8010070:	d405      	bmi.n	801007e <_vfiprintf_r+0x2a>
 8010072:	89ab      	ldrh	r3, [r5, #12]
 8010074:	059a      	lsls	r2, r3, #22
 8010076:	d402      	bmi.n	801007e <_vfiprintf_r+0x2a>
 8010078:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801007a:	f7fe ff44 	bl	800ef06 <__retarget_lock_acquire_recursive>
 801007e:	89ab      	ldrh	r3, [r5, #12]
 8010080:	071b      	lsls	r3, r3, #28
 8010082:	d501      	bpl.n	8010088 <_vfiprintf_r+0x34>
 8010084:	692b      	ldr	r3, [r5, #16]
 8010086:	b99b      	cbnz	r3, 80100b0 <_vfiprintf_r+0x5c>
 8010088:	4629      	mov	r1, r5
 801008a:	4630      	mov	r0, r6
 801008c:	f7fe fdd4 	bl	800ec38 <__swsetup_r>
 8010090:	b170      	cbz	r0, 80100b0 <_vfiprintf_r+0x5c>
 8010092:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8010094:	07dc      	lsls	r4, r3, #31
 8010096:	d504      	bpl.n	80100a2 <_vfiprintf_r+0x4e>
 8010098:	f04f 30ff 	mov.w	r0, #4294967295
 801009c:	b01d      	add	sp, #116	@ 0x74
 801009e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80100a2:	89ab      	ldrh	r3, [r5, #12]
 80100a4:	0598      	lsls	r0, r3, #22
 80100a6:	d4f7      	bmi.n	8010098 <_vfiprintf_r+0x44>
 80100a8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80100aa:	f7fe ff2d 	bl	800ef08 <__retarget_lock_release_recursive>
 80100ae:	e7f3      	b.n	8010098 <_vfiprintf_r+0x44>
 80100b0:	2300      	movs	r3, #0
 80100b2:	9309      	str	r3, [sp, #36]	@ 0x24
 80100b4:	2320      	movs	r3, #32
 80100b6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80100ba:	f8cd 800c 	str.w	r8, [sp, #12]
 80100be:	2330      	movs	r3, #48	@ 0x30
 80100c0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8010270 <_vfiprintf_r+0x21c>
 80100c4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80100c8:	f04f 0901 	mov.w	r9, #1
 80100cc:	4623      	mov	r3, r4
 80100ce:	469a      	mov	sl, r3
 80100d0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80100d4:	b10a      	cbz	r2, 80100da <_vfiprintf_r+0x86>
 80100d6:	2a25      	cmp	r2, #37	@ 0x25
 80100d8:	d1f9      	bne.n	80100ce <_vfiprintf_r+0x7a>
 80100da:	ebba 0b04 	subs.w	fp, sl, r4
 80100de:	d00b      	beq.n	80100f8 <_vfiprintf_r+0xa4>
 80100e0:	465b      	mov	r3, fp
 80100e2:	4622      	mov	r2, r4
 80100e4:	4629      	mov	r1, r5
 80100e6:	4630      	mov	r0, r6
 80100e8:	f7ff ffa2 	bl	8010030 <__sfputs_r>
 80100ec:	3001      	adds	r0, #1
 80100ee:	f000 80a7 	beq.w	8010240 <_vfiprintf_r+0x1ec>
 80100f2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80100f4:	445a      	add	r2, fp
 80100f6:	9209      	str	r2, [sp, #36]	@ 0x24
 80100f8:	f89a 3000 	ldrb.w	r3, [sl]
 80100fc:	2b00      	cmp	r3, #0
 80100fe:	f000 809f 	beq.w	8010240 <_vfiprintf_r+0x1ec>
 8010102:	2300      	movs	r3, #0
 8010104:	f04f 32ff 	mov.w	r2, #4294967295
 8010108:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801010c:	f10a 0a01 	add.w	sl, sl, #1
 8010110:	9304      	str	r3, [sp, #16]
 8010112:	9307      	str	r3, [sp, #28]
 8010114:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8010118:	931a      	str	r3, [sp, #104]	@ 0x68
 801011a:	4654      	mov	r4, sl
 801011c:	2205      	movs	r2, #5
 801011e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010122:	4853      	ldr	r0, [pc, #332]	@ (8010270 <_vfiprintf_r+0x21c>)
 8010124:	f7f0 f874 	bl	8000210 <memchr>
 8010128:	9a04      	ldr	r2, [sp, #16]
 801012a:	b9d8      	cbnz	r0, 8010164 <_vfiprintf_r+0x110>
 801012c:	06d1      	lsls	r1, r2, #27
 801012e:	bf44      	itt	mi
 8010130:	2320      	movmi	r3, #32
 8010132:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010136:	0713      	lsls	r3, r2, #28
 8010138:	bf44      	itt	mi
 801013a:	232b      	movmi	r3, #43	@ 0x2b
 801013c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010140:	f89a 3000 	ldrb.w	r3, [sl]
 8010144:	2b2a      	cmp	r3, #42	@ 0x2a
 8010146:	d015      	beq.n	8010174 <_vfiprintf_r+0x120>
 8010148:	9a07      	ldr	r2, [sp, #28]
 801014a:	4654      	mov	r4, sl
 801014c:	2000      	movs	r0, #0
 801014e:	f04f 0c0a 	mov.w	ip, #10
 8010152:	4621      	mov	r1, r4
 8010154:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010158:	3b30      	subs	r3, #48	@ 0x30
 801015a:	2b09      	cmp	r3, #9
 801015c:	d94b      	bls.n	80101f6 <_vfiprintf_r+0x1a2>
 801015e:	b1b0      	cbz	r0, 801018e <_vfiprintf_r+0x13a>
 8010160:	9207      	str	r2, [sp, #28]
 8010162:	e014      	b.n	801018e <_vfiprintf_r+0x13a>
 8010164:	eba0 0308 	sub.w	r3, r0, r8
 8010168:	fa09 f303 	lsl.w	r3, r9, r3
 801016c:	4313      	orrs	r3, r2
 801016e:	9304      	str	r3, [sp, #16]
 8010170:	46a2      	mov	sl, r4
 8010172:	e7d2      	b.n	801011a <_vfiprintf_r+0xc6>
 8010174:	9b03      	ldr	r3, [sp, #12]
 8010176:	1d19      	adds	r1, r3, #4
 8010178:	681b      	ldr	r3, [r3, #0]
 801017a:	9103      	str	r1, [sp, #12]
 801017c:	2b00      	cmp	r3, #0
 801017e:	bfbb      	ittet	lt
 8010180:	425b      	neglt	r3, r3
 8010182:	f042 0202 	orrlt.w	r2, r2, #2
 8010186:	9307      	strge	r3, [sp, #28]
 8010188:	9307      	strlt	r3, [sp, #28]
 801018a:	bfb8      	it	lt
 801018c:	9204      	strlt	r2, [sp, #16]
 801018e:	7823      	ldrb	r3, [r4, #0]
 8010190:	2b2e      	cmp	r3, #46	@ 0x2e
 8010192:	d10a      	bne.n	80101aa <_vfiprintf_r+0x156>
 8010194:	7863      	ldrb	r3, [r4, #1]
 8010196:	2b2a      	cmp	r3, #42	@ 0x2a
 8010198:	d132      	bne.n	8010200 <_vfiprintf_r+0x1ac>
 801019a:	9b03      	ldr	r3, [sp, #12]
 801019c:	1d1a      	adds	r2, r3, #4
 801019e:	681b      	ldr	r3, [r3, #0]
 80101a0:	9203      	str	r2, [sp, #12]
 80101a2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80101a6:	3402      	adds	r4, #2
 80101a8:	9305      	str	r3, [sp, #20]
 80101aa:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8010280 <_vfiprintf_r+0x22c>
 80101ae:	7821      	ldrb	r1, [r4, #0]
 80101b0:	2203      	movs	r2, #3
 80101b2:	4650      	mov	r0, sl
 80101b4:	f7f0 f82c 	bl	8000210 <memchr>
 80101b8:	b138      	cbz	r0, 80101ca <_vfiprintf_r+0x176>
 80101ba:	9b04      	ldr	r3, [sp, #16]
 80101bc:	eba0 000a 	sub.w	r0, r0, sl
 80101c0:	2240      	movs	r2, #64	@ 0x40
 80101c2:	4082      	lsls	r2, r0
 80101c4:	4313      	orrs	r3, r2
 80101c6:	3401      	adds	r4, #1
 80101c8:	9304      	str	r3, [sp, #16]
 80101ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 80101ce:	4829      	ldr	r0, [pc, #164]	@ (8010274 <_vfiprintf_r+0x220>)
 80101d0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80101d4:	2206      	movs	r2, #6
 80101d6:	f7f0 f81b 	bl	8000210 <memchr>
 80101da:	2800      	cmp	r0, #0
 80101dc:	d03f      	beq.n	801025e <_vfiprintf_r+0x20a>
 80101de:	4b26      	ldr	r3, [pc, #152]	@ (8010278 <_vfiprintf_r+0x224>)
 80101e0:	bb1b      	cbnz	r3, 801022a <_vfiprintf_r+0x1d6>
 80101e2:	9b03      	ldr	r3, [sp, #12]
 80101e4:	3307      	adds	r3, #7
 80101e6:	f023 0307 	bic.w	r3, r3, #7
 80101ea:	3308      	adds	r3, #8
 80101ec:	9303      	str	r3, [sp, #12]
 80101ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80101f0:	443b      	add	r3, r7
 80101f2:	9309      	str	r3, [sp, #36]	@ 0x24
 80101f4:	e76a      	b.n	80100cc <_vfiprintf_r+0x78>
 80101f6:	fb0c 3202 	mla	r2, ip, r2, r3
 80101fa:	460c      	mov	r4, r1
 80101fc:	2001      	movs	r0, #1
 80101fe:	e7a8      	b.n	8010152 <_vfiprintf_r+0xfe>
 8010200:	2300      	movs	r3, #0
 8010202:	3401      	adds	r4, #1
 8010204:	9305      	str	r3, [sp, #20]
 8010206:	4619      	mov	r1, r3
 8010208:	f04f 0c0a 	mov.w	ip, #10
 801020c:	4620      	mov	r0, r4
 801020e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010212:	3a30      	subs	r2, #48	@ 0x30
 8010214:	2a09      	cmp	r2, #9
 8010216:	d903      	bls.n	8010220 <_vfiprintf_r+0x1cc>
 8010218:	2b00      	cmp	r3, #0
 801021a:	d0c6      	beq.n	80101aa <_vfiprintf_r+0x156>
 801021c:	9105      	str	r1, [sp, #20]
 801021e:	e7c4      	b.n	80101aa <_vfiprintf_r+0x156>
 8010220:	fb0c 2101 	mla	r1, ip, r1, r2
 8010224:	4604      	mov	r4, r0
 8010226:	2301      	movs	r3, #1
 8010228:	e7f0      	b.n	801020c <_vfiprintf_r+0x1b8>
 801022a:	ab03      	add	r3, sp, #12
 801022c:	9300      	str	r3, [sp, #0]
 801022e:	462a      	mov	r2, r5
 8010230:	4b12      	ldr	r3, [pc, #72]	@ (801027c <_vfiprintf_r+0x228>)
 8010232:	a904      	add	r1, sp, #16
 8010234:	4630      	mov	r0, r6
 8010236:	f3af 8000 	nop.w
 801023a:	4607      	mov	r7, r0
 801023c:	1c78      	adds	r0, r7, #1
 801023e:	d1d6      	bne.n	80101ee <_vfiprintf_r+0x19a>
 8010240:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8010242:	07d9      	lsls	r1, r3, #31
 8010244:	d405      	bmi.n	8010252 <_vfiprintf_r+0x1fe>
 8010246:	89ab      	ldrh	r3, [r5, #12]
 8010248:	059a      	lsls	r2, r3, #22
 801024a:	d402      	bmi.n	8010252 <_vfiprintf_r+0x1fe>
 801024c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801024e:	f7fe fe5b 	bl	800ef08 <__retarget_lock_release_recursive>
 8010252:	89ab      	ldrh	r3, [r5, #12]
 8010254:	065b      	lsls	r3, r3, #25
 8010256:	f53f af1f 	bmi.w	8010098 <_vfiprintf_r+0x44>
 801025a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801025c:	e71e      	b.n	801009c <_vfiprintf_r+0x48>
 801025e:	ab03      	add	r3, sp, #12
 8010260:	9300      	str	r3, [sp, #0]
 8010262:	462a      	mov	r2, r5
 8010264:	4b05      	ldr	r3, [pc, #20]	@ (801027c <_vfiprintf_r+0x228>)
 8010266:	a904      	add	r1, sp, #16
 8010268:	4630      	mov	r0, r6
 801026a:	f000 f879 	bl	8010360 <_printf_i>
 801026e:	e7e4      	b.n	801023a <_vfiprintf_r+0x1e6>
 8010270:	08011530 	.word	0x08011530
 8010274:	0801153a 	.word	0x0801153a
 8010278:	00000000 	.word	0x00000000
 801027c:	08010031 	.word	0x08010031
 8010280:	08011536 	.word	0x08011536

08010284 <_printf_common>:
 8010284:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010288:	4616      	mov	r6, r2
 801028a:	4698      	mov	r8, r3
 801028c:	688a      	ldr	r2, [r1, #8]
 801028e:	690b      	ldr	r3, [r1, #16]
 8010290:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8010294:	4293      	cmp	r3, r2
 8010296:	bfb8      	it	lt
 8010298:	4613      	movlt	r3, r2
 801029a:	6033      	str	r3, [r6, #0]
 801029c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80102a0:	4607      	mov	r7, r0
 80102a2:	460c      	mov	r4, r1
 80102a4:	b10a      	cbz	r2, 80102aa <_printf_common+0x26>
 80102a6:	3301      	adds	r3, #1
 80102a8:	6033      	str	r3, [r6, #0]
 80102aa:	6823      	ldr	r3, [r4, #0]
 80102ac:	0699      	lsls	r1, r3, #26
 80102ae:	bf42      	ittt	mi
 80102b0:	6833      	ldrmi	r3, [r6, #0]
 80102b2:	3302      	addmi	r3, #2
 80102b4:	6033      	strmi	r3, [r6, #0]
 80102b6:	6825      	ldr	r5, [r4, #0]
 80102b8:	f015 0506 	ands.w	r5, r5, #6
 80102bc:	d106      	bne.n	80102cc <_printf_common+0x48>
 80102be:	f104 0a19 	add.w	sl, r4, #25
 80102c2:	68e3      	ldr	r3, [r4, #12]
 80102c4:	6832      	ldr	r2, [r6, #0]
 80102c6:	1a9b      	subs	r3, r3, r2
 80102c8:	42ab      	cmp	r3, r5
 80102ca:	dc26      	bgt.n	801031a <_printf_common+0x96>
 80102cc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80102d0:	6822      	ldr	r2, [r4, #0]
 80102d2:	3b00      	subs	r3, #0
 80102d4:	bf18      	it	ne
 80102d6:	2301      	movne	r3, #1
 80102d8:	0692      	lsls	r2, r2, #26
 80102da:	d42b      	bmi.n	8010334 <_printf_common+0xb0>
 80102dc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80102e0:	4641      	mov	r1, r8
 80102e2:	4638      	mov	r0, r7
 80102e4:	47c8      	blx	r9
 80102e6:	3001      	adds	r0, #1
 80102e8:	d01e      	beq.n	8010328 <_printf_common+0xa4>
 80102ea:	6823      	ldr	r3, [r4, #0]
 80102ec:	6922      	ldr	r2, [r4, #16]
 80102ee:	f003 0306 	and.w	r3, r3, #6
 80102f2:	2b04      	cmp	r3, #4
 80102f4:	bf02      	ittt	eq
 80102f6:	68e5      	ldreq	r5, [r4, #12]
 80102f8:	6833      	ldreq	r3, [r6, #0]
 80102fa:	1aed      	subeq	r5, r5, r3
 80102fc:	68a3      	ldr	r3, [r4, #8]
 80102fe:	bf0c      	ite	eq
 8010300:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8010304:	2500      	movne	r5, #0
 8010306:	4293      	cmp	r3, r2
 8010308:	bfc4      	itt	gt
 801030a:	1a9b      	subgt	r3, r3, r2
 801030c:	18ed      	addgt	r5, r5, r3
 801030e:	2600      	movs	r6, #0
 8010310:	341a      	adds	r4, #26
 8010312:	42b5      	cmp	r5, r6
 8010314:	d11a      	bne.n	801034c <_printf_common+0xc8>
 8010316:	2000      	movs	r0, #0
 8010318:	e008      	b.n	801032c <_printf_common+0xa8>
 801031a:	2301      	movs	r3, #1
 801031c:	4652      	mov	r2, sl
 801031e:	4641      	mov	r1, r8
 8010320:	4638      	mov	r0, r7
 8010322:	47c8      	blx	r9
 8010324:	3001      	adds	r0, #1
 8010326:	d103      	bne.n	8010330 <_printf_common+0xac>
 8010328:	f04f 30ff 	mov.w	r0, #4294967295
 801032c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010330:	3501      	adds	r5, #1
 8010332:	e7c6      	b.n	80102c2 <_printf_common+0x3e>
 8010334:	18e1      	adds	r1, r4, r3
 8010336:	1c5a      	adds	r2, r3, #1
 8010338:	2030      	movs	r0, #48	@ 0x30
 801033a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 801033e:	4422      	add	r2, r4
 8010340:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8010344:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8010348:	3302      	adds	r3, #2
 801034a:	e7c7      	b.n	80102dc <_printf_common+0x58>
 801034c:	2301      	movs	r3, #1
 801034e:	4622      	mov	r2, r4
 8010350:	4641      	mov	r1, r8
 8010352:	4638      	mov	r0, r7
 8010354:	47c8      	blx	r9
 8010356:	3001      	adds	r0, #1
 8010358:	d0e6      	beq.n	8010328 <_printf_common+0xa4>
 801035a:	3601      	adds	r6, #1
 801035c:	e7d9      	b.n	8010312 <_printf_common+0x8e>
	...

08010360 <_printf_i>:
 8010360:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8010364:	7e0f      	ldrb	r7, [r1, #24]
 8010366:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8010368:	2f78      	cmp	r7, #120	@ 0x78
 801036a:	4691      	mov	r9, r2
 801036c:	4680      	mov	r8, r0
 801036e:	460c      	mov	r4, r1
 8010370:	469a      	mov	sl, r3
 8010372:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8010376:	d807      	bhi.n	8010388 <_printf_i+0x28>
 8010378:	2f62      	cmp	r7, #98	@ 0x62
 801037a:	d80a      	bhi.n	8010392 <_printf_i+0x32>
 801037c:	2f00      	cmp	r7, #0
 801037e:	f000 80d2 	beq.w	8010526 <_printf_i+0x1c6>
 8010382:	2f58      	cmp	r7, #88	@ 0x58
 8010384:	f000 80b9 	beq.w	80104fa <_printf_i+0x19a>
 8010388:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801038c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8010390:	e03a      	b.n	8010408 <_printf_i+0xa8>
 8010392:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8010396:	2b15      	cmp	r3, #21
 8010398:	d8f6      	bhi.n	8010388 <_printf_i+0x28>
 801039a:	a101      	add	r1, pc, #4	@ (adr r1, 80103a0 <_printf_i+0x40>)
 801039c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80103a0:	080103f9 	.word	0x080103f9
 80103a4:	0801040d 	.word	0x0801040d
 80103a8:	08010389 	.word	0x08010389
 80103ac:	08010389 	.word	0x08010389
 80103b0:	08010389 	.word	0x08010389
 80103b4:	08010389 	.word	0x08010389
 80103b8:	0801040d 	.word	0x0801040d
 80103bc:	08010389 	.word	0x08010389
 80103c0:	08010389 	.word	0x08010389
 80103c4:	08010389 	.word	0x08010389
 80103c8:	08010389 	.word	0x08010389
 80103cc:	0801050d 	.word	0x0801050d
 80103d0:	08010437 	.word	0x08010437
 80103d4:	080104c7 	.word	0x080104c7
 80103d8:	08010389 	.word	0x08010389
 80103dc:	08010389 	.word	0x08010389
 80103e0:	0801052f 	.word	0x0801052f
 80103e4:	08010389 	.word	0x08010389
 80103e8:	08010437 	.word	0x08010437
 80103ec:	08010389 	.word	0x08010389
 80103f0:	08010389 	.word	0x08010389
 80103f4:	080104cf 	.word	0x080104cf
 80103f8:	6833      	ldr	r3, [r6, #0]
 80103fa:	1d1a      	adds	r2, r3, #4
 80103fc:	681b      	ldr	r3, [r3, #0]
 80103fe:	6032      	str	r2, [r6, #0]
 8010400:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8010404:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8010408:	2301      	movs	r3, #1
 801040a:	e09d      	b.n	8010548 <_printf_i+0x1e8>
 801040c:	6833      	ldr	r3, [r6, #0]
 801040e:	6820      	ldr	r0, [r4, #0]
 8010410:	1d19      	adds	r1, r3, #4
 8010412:	6031      	str	r1, [r6, #0]
 8010414:	0606      	lsls	r6, r0, #24
 8010416:	d501      	bpl.n	801041c <_printf_i+0xbc>
 8010418:	681d      	ldr	r5, [r3, #0]
 801041a:	e003      	b.n	8010424 <_printf_i+0xc4>
 801041c:	0645      	lsls	r5, r0, #25
 801041e:	d5fb      	bpl.n	8010418 <_printf_i+0xb8>
 8010420:	f9b3 5000 	ldrsh.w	r5, [r3]
 8010424:	2d00      	cmp	r5, #0
 8010426:	da03      	bge.n	8010430 <_printf_i+0xd0>
 8010428:	232d      	movs	r3, #45	@ 0x2d
 801042a:	426d      	negs	r5, r5
 801042c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8010430:	4859      	ldr	r0, [pc, #356]	@ (8010598 <_printf_i+0x238>)
 8010432:	230a      	movs	r3, #10
 8010434:	e011      	b.n	801045a <_printf_i+0xfa>
 8010436:	6821      	ldr	r1, [r4, #0]
 8010438:	6833      	ldr	r3, [r6, #0]
 801043a:	0608      	lsls	r0, r1, #24
 801043c:	f853 5b04 	ldr.w	r5, [r3], #4
 8010440:	d402      	bmi.n	8010448 <_printf_i+0xe8>
 8010442:	0649      	lsls	r1, r1, #25
 8010444:	bf48      	it	mi
 8010446:	b2ad      	uxthmi	r5, r5
 8010448:	2f6f      	cmp	r7, #111	@ 0x6f
 801044a:	4853      	ldr	r0, [pc, #332]	@ (8010598 <_printf_i+0x238>)
 801044c:	6033      	str	r3, [r6, #0]
 801044e:	bf14      	ite	ne
 8010450:	230a      	movne	r3, #10
 8010452:	2308      	moveq	r3, #8
 8010454:	2100      	movs	r1, #0
 8010456:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801045a:	6866      	ldr	r6, [r4, #4]
 801045c:	60a6      	str	r6, [r4, #8]
 801045e:	2e00      	cmp	r6, #0
 8010460:	bfa2      	ittt	ge
 8010462:	6821      	ldrge	r1, [r4, #0]
 8010464:	f021 0104 	bicge.w	r1, r1, #4
 8010468:	6021      	strge	r1, [r4, #0]
 801046a:	b90d      	cbnz	r5, 8010470 <_printf_i+0x110>
 801046c:	2e00      	cmp	r6, #0
 801046e:	d04b      	beq.n	8010508 <_printf_i+0x1a8>
 8010470:	4616      	mov	r6, r2
 8010472:	fbb5 f1f3 	udiv	r1, r5, r3
 8010476:	fb03 5711 	mls	r7, r3, r1, r5
 801047a:	5dc7      	ldrb	r7, [r0, r7]
 801047c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8010480:	462f      	mov	r7, r5
 8010482:	42bb      	cmp	r3, r7
 8010484:	460d      	mov	r5, r1
 8010486:	d9f4      	bls.n	8010472 <_printf_i+0x112>
 8010488:	2b08      	cmp	r3, #8
 801048a:	d10b      	bne.n	80104a4 <_printf_i+0x144>
 801048c:	6823      	ldr	r3, [r4, #0]
 801048e:	07df      	lsls	r7, r3, #31
 8010490:	d508      	bpl.n	80104a4 <_printf_i+0x144>
 8010492:	6923      	ldr	r3, [r4, #16]
 8010494:	6861      	ldr	r1, [r4, #4]
 8010496:	4299      	cmp	r1, r3
 8010498:	bfde      	ittt	le
 801049a:	2330      	movle	r3, #48	@ 0x30
 801049c:	f806 3c01 	strble.w	r3, [r6, #-1]
 80104a0:	f106 36ff 	addle.w	r6, r6, #4294967295
 80104a4:	1b92      	subs	r2, r2, r6
 80104a6:	6122      	str	r2, [r4, #16]
 80104a8:	f8cd a000 	str.w	sl, [sp]
 80104ac:	464b      	mov	r3, r9
 80104ae:	aa03      	add	r2, sp, #12
 80104b0:	4621      	mov	r1, r4
 80104b2:	4640      	mov	r0, r8
 80104b4:	f7ff fee6 	bl	8010284 <_printf_common>
 80104b8:	3001      	adds	r0, #1
 80104ba:	d14a      	bne.n	8010552 <_printf_i+0x1f2>
 80104bc:	f04f 30ff 	mov.w	r0, #4294967295
 80104c0:	b004      	add	sp, #16
 80104c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80104c6:	6823      	ldr	r3, [r4, #0]
 80104c8:	f043 0320 	orr.w	r3, r3, #32
 80104cc:	6023      	str	r3, [r4, #0]
 80104ce:	4833      	ldr	r0, [pc, #204]	@ (801059c <_printf_i+0x23c>)
 80104d0:	2778      	movs	r7, #120	@ 0x78
 80104d2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80104d6:	6823      	ldr	r3, [r4, #0]
 80104d8:	6831      	ldr	r1, [r6, #0]
 80104da:	061f      	lsls	r7, r3, #24
 80104dc:	f851 5b04 	ldr.w	r5, [r1], #4
 80104e0:	d402      	bmi.n	80104e8 <_printf_i+0x188>
 80104e2:	065f      	lsls	r7, r3, #25
 80104e4:	bf48      	it	mi
 80104e6:	b2ad      	uxthmi	r5, r5
 80104e8:	6031      	str	r1, [r6, #0]
 80104ea:	07d9      	lsls	r1, r3, #31
 80104ec:	bf44      	itt	mi
 80104ee:	f043 0320 	orrmi.w	r3, r3, #32
 80104f2:	6023      	strmi	r3, [r4, #0]
 80104f4:	b11d      	cbz	r5, 80104fe <_printf_i+0x19e>
 80104f6:	2310      	movs	r3, #16
 80104f8:	e7ac      	b.n	8010454 <_printf_i+0xf4>
 80104fa:	4827      	ldr	r0, [pc, #156]	@ (8010598 <_printf_i+0x238>)
 80104fc:	e7e9      	b.n	80104d2 <_printf_i+0x172>
 80104fe:	6823      	ldr	r3, [r4, #0]
 8010500:	f023 0320 	bic.w	r3, r3, #32
 8010504:	6023      	str	r3, [r4, #0]
 8010506:	e7f6      	b.n	80104f6 <_printf_i+0x196>
 8010508:	4616      	mov	r6, r2
 801050a:	e7bd      	b.n	8010488 <_printf_i+0x128>
 801050c:	6833      	ldr	r3, [r6, #0]
 801050e:	6825      	ldr	r5, [r4, #0]
 8010510:	6961      	ldr	r1, [r4, #20]
 8010512:	1d18      	adds	r0, r3, #4
 8010514:	6030      	str	r0, [r6, #0]
 8010516:	062e      	lsls	r6, r5, #24
 8010518:	681b      	ldr	r3, [r3, #0]
 801051a:	d501      	bpl.n	8010520 <_printf_i+0x1c0>
 801051c:	6019      	str	r1, [r3, #0]
 801051e:	e002      	b.n	8010526 <_printf_i+0x1c6>
 8010520:	0668      	lsls	r0, r5, #25
 8010522:	d5fb      	bpl.n	801051c <_printf_i+0x1bc>
 8010524:	8019      	strh	r1, [r3, #0]
 8010526:	2300      	movs	r3, #0
 8010528:	6123      	str	r3, [r4, #16]
 801052a:	4616      	mov	r6, r2
 801052c:	e7bc      	b.n	80104a8 <_printf_i+0x148>
 801052e:	6833      	ldr	r3, [r6, #0]
 8010530:	1d1a      	adds	r2, r3, #4
 8010532:	6032      	str	r2, [r6, #0]
 8010534:	681e      	ldr	r6, [r3, #0]
 8010536:	6862      	ldr	r2, [r4, #4]
 8010538:	2100      	movs	r1, #0
 801053a:	4630      	mov	r0, r6
 801053c:	f7ef fe68 	bl	8000210 <memchr>
 8010540:	b108      	cbz	r0, 8010546 <_printf_i+0x1e6>
 8010542:	1b80      	subs	r0, r0, r6
 8010544:	6060      	str	r0, [r4, #4]
 8010546:	6863      	ldr	r3, [r4, #4]
 8010548:	6123      	str	r3, [r4, #16]
 801054a:	2300      	movs	r3, #0
 801054c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8010550:	e7aa      	b.n	80104a8 <_printf_i+0x148>
 8010552:	6923      	ldr	r3, [r4, #16]
 8010554:	4632      	mov	r2, r6
 8010556:	4649      	mov	r1, r9
 8010558:	4640      	mov	r0, r8
 801055a:	47d0      	blx	sl
 801055c:	3001      	adds	r0, #1
 801055e:	d0ad      	beq.n	80104bc <_printf_i+0x15c>
 8010560:	6823      	ldr	r3, [r4, #0]
 8010562:	079b      	lsls	r3, r3, #30
 8010564:	d413      	bmi.n	801058e <_printf_i+0x22e>
 8010566:	68e0      	ldr	r0, [r4, #12]
 8010568:	9b03      	ldr	r3, [sp, #12]
 801056a:	4298      	cmp	r0, r3
 801056c:	bfb8      	it	lt
 801056e:	4618      	movlt	r0, r3
 8010570:	e7a6      	b.n	80104c0 <_printf_i+0x160>
 8010572:	2301      	movs	r3, #1
 8010574:	4632      	mov	r2, r6
 8010576:	4649      	mov	r1, r9
 8010578:	4640      	mov	r0, r8
 801057a:	47d0      	blx	sl
 801057c:	3001      	adds	r0, #1
 801057e:	d09d      	beq.n	80104bc <_printf_i+0x15c>
 8010580:	3501      	adds	r5, #1
 8010582:	68e3      	ldr	r3, [r4, #12]
 8010584:	9903      	ldr	r1, [sp, #12]
 8010586:	1a5b      	subs	r3, r3, r1
 8010588:	42ab      	cmp	r3, r5
 801058a:	dcf2      	bgt.n	8010572 <_printf_i+0x212>
 801058c:	e7eb      	b.n	8010566 <_printf_i+0x206>
 801058e:	2500      	movs	r5, #0
 8010590:	f104 0619 	add.w	r6, r4, #25
 8010594:	e7f5      	b.n	8010582 <_printf_i+0x222>
 8010596:	bf00      	nop
 8010598:	08011541 	.word	0x08011541
 801059c:	08011552 	.word	0x08011552

080105a0 <__sflush_r>:
 80105a0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80105a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80105a8:	0716      	lsls	r6, r2, #28
 80105aa:	4605      	mov	r5, r0
 80105ac:	460c      	mov	r4, r1
 80105ae:	d454      	bmi.n	801065a <__sflush_r+0xba>
 80105b0:	684b      	ldr	r3, [r1, #4]
 80105b2:	2b00      	cmp	r3, #0
 80105b4:	dc02      	bgt.n	80105bc <__sflush_r+0x1c>
 80105b6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80105b8:	2b00      	cmp	r3, #0
 80105ba:	dd48      	ble.n	801064e <__sflush_r+0xae>
 80105bc:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80105be:	2e00      	cmp	r6, #0
 80105c0:	d045      	beq.n	801064e <__sflush_r+0xae>
 80105c2:	2300      	movs	r3, #0
 80105c4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80105c8:	682f      	ldr	r7, [r5, #0]
 80105ca:	6a21      	ldr	r1, [r4, #32]
 80105cc:	602b      	str	r3, [r5, #0]
 80105ce:	d030      	beq.n	8010632 <__sflush_r+0x92>
 80105d0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80105d2:	89a3      	ldrh	r3, [r4, #12]
 80105d4:	0759      	lsls	r1, r3, #29
 80105d6:	d505      	bpl.n	80105e4 <__sflush_r+0x44>
 80105d8:	6863      	ldr	r3, [r4, #4]
 80105da:	1ad2      	subs	r2, r2, r3
 80105dc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80105de:	b10b      	cbz	r3, 80105e4 <__sflush_r+0x44>
 80105e0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80105e2:	1ad2      	subs	r2, r2, r3
 80105e4:	2300      	movs	r3, #0
 80105e6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80105e8:	6a21      	ldr	r1, [r4, #32]
 80105ea:	4628      	mov	r0, r5
 80105ec:	47b0      	blx	r6
 80105ee:	1c43      	adds	r3, r0, #1
 80105f0:	89a3      	ldrh	r3, [r4, #12]
 80105f2:	d106      	bne.n	8010602 <__sflush_r+0x62>
 80105f4:	6829      	ldr	r1, [r5, #0]
 80105f6:	291d      	cmp	r1, #29
 80105f8:	d82b      	bhi.n	8010652 <__sflush_r+0xb2>
 80105fa:	4a2a      	ldr	r2, [pc, #168]	@ (80106a4 <__sflush_r+0x104>)
 80105fc:	410a      	asrs	r2, r1
 80105fe:	07d6      	lsls	r6, r2, #31
 8010600:	d427      	bmi.n	8010652 <__sflush_r+0xb2>
 8010602:	2200      	movs	r2, #0
 8010604:	6062      	str	r2, [r4, #4]
 8010606:	04d9      	lsls	r1, r3, #19
 8010608:	6922      	ldr	r2, [r4, #16]
 801060a:	6022      	str	r2, [r4, #0]
 801060c:	d504      	bpl.n	8010618 <__sflush_r+0x78>
 801060e:	1c42      	adds	r2, r0, #1
 8010610:	d101      	bne.n	8010616 <__sflush_r+0x76>
 8010612:	682b      	ldr	r3, [r5, #0]
 8010614:	b903      	cbnz	r3, 8010618 <__sflush_r+0x78>
 8010616:	6560      	str	r0, [r4, #84]	@ 0x54
 8010618:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801061a:	602f      	str	r7, [r5, #0]
 801061c:	b1b9      	cbz	r1, 801064e <__sflush_r+0xae>
 801061e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8010622:	4299      	cmp	r1, r3
 8010624:	d002      	beq.n	801062c <__sflush_r+0x8c>
 8010626:	4628      	mov	r0, r5
 8010628:	f7fe fc8e 	bl	800ef48 <_free_r>
 801062c:	2300      	movs	r3, #0
 801062e:	6363      	str	r3, [r4, #52]	@ 0x34
 8010630:	e00d      	b.n	801064e <__sflush_r+0xae>
 8010632:	2301      	movs	r3, #1
 8010634:	4628      	mov	r0, r5
 8010636:	47b0      	blx	r6
 8010638:	4602      	mov	r2, r0
 801063a:	1c50      	adds	r0, r2, #1
 801063c:	d1c9      	bne.n	80105d2 <__sflush_r+0x32>
 801063e:	682b      	ldr	r3, [r5, #0]
 8010640:	2b00      	cmp	r3, #0
 8010642:	d0c6      	beq.n	80105d2 <__sflush_r+0x32>
 8010644:	2b1d      	cmp	r3, #29
 8010646:	d001      	beq.n	801064c <__sflush_r+0xac>
 8010648:	2b16      	cmp	r3, #22
 801064a:	d11e      	bne.n	801068a <__sflush_r+0xea>
 801064c:	602f      	str	r7, [r5, #0]
 801064e:	2000      	movs	r0, #0
 8010650:	e022      	b.n	8010698 <__sflush_r+0xf8>
 8010652:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010656:	b21b      	sxth	r3, r3
 8010658:	e01b      	b.n	8010692 <__sflush_r+0xf2>
 801065a:	690f      	ldr	r7, [r1, #16]
 801065c:	2f00      	cmp	r7, #0
 801065e:	d0f6      	beq.n	801064e <__sflush_r+0xae>
 8010660:	0793      	lsls	r3, r2, #30
 8010662:	680e      	ldr	r6, [r1, #0]
 8010664:	bf08      	it	eq
 8010666:	694b      	ldreq	r3, [r1, #20]
 8010668:	600f      	str	r7, [r1, #0]
 801066a:	bf18      	it	ne
 801066c:	2300      	movne	r3, #0
 801066e:	eba6 0807 	sub.w	r8, r6, r7
 8010672:	608b      	str	r3, [r1, #8]
 8010674:	f1b8 0f00 	cmp.w	r8, #0
 8010678:	dde9      	ble.n	801064e <__sflush_r+0xae>
 801067a:	6a21      	ldr	r1, [r4, #32]
 801067c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801067e:	4643      	mov	r3, r8
 8010680:	463a      	mov	r2, r7
 8010682:	4628      	mov	r0, r5
 8010684:	47b0      	blx	r6
 8010686:	2800      	cmp	r0, #0
 8010688:	dc08      	bgt.n	801069c <__sflush_r+0xfc>
 801068a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801068e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010692:	81a3      	strh	r3, [r4, #12]
 8010694:	f04f 30ff 	mov.w	r0, #4294967295
 8010698:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801069c:	4407      	add	r7, r0
 801069e:	eba8 0800 	sub.w	r8, r8, r0
 80106a2:	e7e7      	b.n	8010674 <__sflush_r+0xd4>
 80106a4:	dfbffffe 	.word	0xdfbffffe

080106a8 <_fflush_r>:
 80106a8:	b538      	push	{r3, r4, r5, lr}
 80106aa:	690b      	ldr	r3, [r1, #16]
 80106ac:	4605      	mov	r5, r0
 80106ae:	460c      	mov	r4, r1
 80106b0:	b913      	cbnz	r3, 80106b8 <_fflush_r+0x10>
 80106b2:	2500      	movs	r5, #0
 80106b4:	4628      	mov	r0, r5
 80106b6:	bd38      	pop	{r3, r4, r5, pc}
 80106b8:	b118      	cbz	r0, 80106c2 <_fflush_r+0x1a>
 80106ba:	6a03      	ldr	r3, [r0, #32]
 80106bc:	b90b      	cbnz	r3, 80106c2 <_fflush_r+0x1a>
 80106be:	f7fe f993 	bl	800e9e8 <__sinit>
 80106c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80106c6:	2b00      	cmp	r3, #0
 80106c8:	d0f3      	beq.n	80106b2 <_fflush_r+0xa>
 80106ca:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80106cc:	07d0      	lsls	r0, r2, #31
 80106ce:	d404      	bmi.n	80106da <_fflush_r+0x32>
 80106d0:	0599      	lsls	r1, r3, #22
 80106d2:	d402      	bmi.n	80106da <_fflush_r+0x32>
 80106d4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80106d6:	f7fe fc16 	bl	800ef06 <__retarget_lock_acquire_recursive>
 80106da:	4628      	mov	r0, r5
 80106dc:	4621      	mov	r1, r4
 80106de:	f7ff ff5f 	bl	80105a0 <__sflush_r>
 80106e2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80106e4:	07da      	lsls	r2, r3, #31
 80106e6:	4605      	mov	r5, r0
 80106e8:	d4e4      	bmi.n	80106b4 <_fflush_r+0xc>
 80106ea:	89a3      	ldrh	r3, [r4, #12]
 80106ec:	059b      	lsls	r3, r3, #22
 80106ee:	d4e1      	bmi.n	80106b4 <_fflush_r+0xc>
 80106f0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80106f2:	f7fe fc09 	bl	800ef08 <__retarget_lock_release_recursive>
 80106f6:	e7dd      	b.n	80106b4 <_fflush_r+0xc>

080106f8 <__swhatbuf_r>:
 80106f8:	b570      	push	{r4, r5, r6, lr}
 80106fa:	460c      	mov	r4, r1
 80106fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010700:	2900      	cmp	r1, #0
 8010702:	b096      	sub	sp, #88	@ 0x58
 8010704:	4615      	mov	r5, r2
 8010706:	461e      	mov	r6, r3
 8010708:	da0d      	bge.n	8010726 <__swhatbuf_r+0x2e>
 801070a:	89a3      	ldrh	r3, [r4, #12]
 801070c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8010710:	f04f 0100 	mov.w	r1, #0
 8010714:	bf14      	ite	ne
 8010716:	2340      	movne	r3, #64	@ 0x40
 8010718:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 801071c:	2000      	movs	r0, #0
 801071e:	6031      	str	r1, [r6, #0]
 8010720:	602b      	str	r3, [r5, #0]
 8010722:	b016      	add	sp, #88	@ 0x58
 8010724:	bd70      	pop	{r4, r5, r6, pc}
 8010726:	466a      	mov	r2, sp
 8010728:	f000 f848 	bl	80107bc <_fstat_r>
 801072c:	2800      	cmp	r0, #0
 801072e:	dbec      	blt.n	801070a <__swhatbuf_r+0x12>
 8010730:	9901      	ldr	r1, [sp, #4]
 8010732:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8010736:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801073a:	4259      	negs	r1, r3
 801073c:	4159      	adcs	r1, r3
 801073e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8010742:	e7eb      	b.n	801071c <__swhatbuf_r+0x24>

08010744 <__smakebuf_r>:
 8010744:	898b      	ldrh	r3, [r1, #12]
 8010746:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010748:	079d      	lsls	r5, r3, #30
 801074a:	4606      	mov	r6, r0
 801074c:	460c      	mov	r4, r1
 801074e:	d507      	bpl.n	8010760 <__smakebuf_r+0x1c>
 8010750:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8010754:	6023      	str	r3, [r4, #0]
 8010756:	6123      	str	r3, [r4, #16]
 8010758:	2301      	movs	r3, #1
 801075a:	6163      	str	r3, [r4, #20]
 801075c:	b003      	add	sp, #12
 801075e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010760:	ab01      	add	r3, sp, #4
 8010762:	466a      	mov	r2, sp
 8010764:	f7ff ffc8 	bl	80106f8 <__swhatbuf_r>
 8010768:	9f00      	ldr	r7, [sp, #0]
 801076a:	4605      	mov	r5, r0
 801076c:	4639      	mov	r1, r7
 801076e:	4630      	mov	r0, r6
 8010770:	f7fd f9dc 	bl	800db2c <_malloc_r>
 8010774:	b948      	cbnz	r0, 801078a <__smakebuf_r+0x46>
 8010776:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801077a:	059a      	lsls	r2, r3, #22
 801077c:	d4ee      	bmi.n	801075c <__smakebuf_r+0x18>
 801077e:	f023 0303 	bic.w	r3, r3, #3
 8010782:	f043 0302 	orr.w	r3, r3, #2
 8010786:	81a3      	strh	r3, [r4, #12]
 8010788:	e7e2      	b.n	8010750 <__smakebuf_r+0xc>
 801078a:	89a3      	ldrh	r3, [r4, #12]
 801078c:	6020      	str	r0, [r4, #0]
 801078e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010792:	81a3      	strh	r3, [r4, #12]
 8010794:	9b01      	ldr	r3, [sp, #4]
 8010796:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801079a:	b15b      	cbz	r3, 80107b4 <__smakebuf_r+0x70>
 801079c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80107a0:	4630      	mov	r0, r6
 80107a2:	f000 f81d 	bl	80107e0 <_isatty_r>
 80107a6:	b128      	cbz	r0, 80107b4 <__smakebuf_r+0x70>
 80107a8:	89a3      	ldrh	r3, [r4, #12]
 80107aa:	f023 0303 	bic.w	r3, r3, #3
 80107ae:	f043 0301 	orr.w	r3, r3, #1
 80107b2:	81a3      	strh	r3, [r4, #12]
 80107b4:	89a3      	ldrh	r3, [r4, #12]
 80107b6:	431d      	orrs	r5, r3
 80107b8:	81a5      	strh	r5, [r4, #12]
 80107ba:	e7cf      	b.n	801075c <__smakebuf_r+0x18>

080107bc <_fstat_r>:
 80107bc:	b538      	push	{r3, r4, r5, lr}
 80107be:	4d07      	ldr	r5, [pc, #28]	@ (80107dc <_fstat_r+0x20>)
 80107c0:	2300      	movs	r3, #0
 80107c2:	4604      	mov	r4, r0
 80107c4:	4608      	mov	r0, r1
 80107c6:	4611      	mov	r1, r2
 80107c8:	602b      	str	r3, [r5, #0]
 80107ca:	f7f2 fbc3 	bl	8002f54 <_fstat>
 80107ce:	1c43      	adds	r3, r0, #1
 80107d0:	d102      	bne.n	80107d8 <_fstat_r+0x1c>
 80107d2:	682b      	ldr	r3, [r5, #0]
 80107d4:	b103      	cbz	r3, 80107d8 <_fstat_r+0x1c>
 80107d6:	6023      	str	r3, [r4, #0]
 80107d8:	bd38      	pop	{r3, r4, r5, pc}
 80107da:	bf00      	nop
 80107dc:	20005aec 	.word	0x20005aec

080107e0 <_isatty_r>:
 80107e0:	b538      	push	{r3, r4, r5, lr}
 80107e2:	4d06      	ldr	r5, [pc, #24]	@ (80107fc <_isatty_r+0x1c>)
 80107e4:	2300      	movs	r3, #0
 80107e6:	4604      	mov	r4, r0
 80107e8:	4608      	mov	r0, r1
 80107ea:	602b      	str	r3, [r5, #0]
 80107ec:	f7f2 fbc2 	bl	8002f74 <_isatty>
 80107f0:	1c43      	adds	r3, r0, #1
 80107f2:	d102      	bne.n	80107fa <_isatty_r+0x1a>
 80107f4:	682b      	ldr	r3, [r5, #0]
 80107f6:	b103      	cbz	r3, 80107fa <_isatty_r+0x1a>
 80107f8:	6023      	str	r3, [r4, #0]
 80107fa:	bd38      	pop	{r3, r4, r5, pc}
 80107fc:	20005aec 	.word	0x20005aec

08010800 <__assert_func>:
 8010800:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8010802:	4614      	mov	r4, r2
 8010804:	461a      	mov	r2, r3
 8010806:	4b09      	ldr	r3, [pc, #36]	@ (801082c <__assert_func+0x2c>)
 8010808:	681b      	ldr	r3, [r3, #0]
 801080a:	4605      	mov	r5, r0
 801080c:	68d8      	ldr	r0, [r3, #12]
 801080e:	b954      	cbnz	r4, 8010826 <__assert_func+0x26>
 8010810:	4b07      	ldr	r3, [pc, #28]	@ (8010830 <__assert_func+0x30>)
 8010812:	461c      	mov	r4, r3
 8010814:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8010818:	9100      	str	r1, [sp, #0]
 801081a:	462b      	mov	r3, r5
 801081c:	4905      	ldr	r1, [pc, #20]	@ (8010834 <__assert_func+0x34>)
 801081e:	f000 f821 	bl	8010864 <fiprintf>
 8010822:	f000 f831 	bl	8010888 <abort>
 8010826:	4b04      	ldr	r3, [pc, #16]	@ (8010838 <__assert_func+0x38>)
 8010828:	e7f4      	b.n	8010814 <__assert_func+0x14>
 801082a:	bf00      	nop
 801082c:	20000264 	.word	0x20000264
 8010830:	0801159e 	.word	0x0801159e
 8010834:	08011570 	.word	0x08011570
 8010838:	08011563 	.word	0x08011563

0801083c <_calloc_r>:
 801083c:	b570      	push	{r4, r5, r6, lr}
 801083e:	fba1 5402 	umull	r5, r4, r1, r2
 8010842:	b93c      	cbnz	r4, 8010854 <_calloc_r+0x18>
 8010844:	4629      	mov	r1, r5
 8010846:	f7fd f971 	bl	800db2c <_malloc_r>
 801084a:	4606      	mov	r6, r0
 801084c:	b928      	cbnz	r0, 801085a <_calloc_r+0x1e>
 801084e:	2600      	movs	r6, #0
 8010850:	4630      	mov	r0, r6
 8010852:	bd70      	pop	{r4, r5, r6, pc}
 8010854:	220c      	movs	r2, #12
 8010856:	6002      	str	r2, [r0, #0]
 8010858:	e7f9      	b.n	801084e <_calloc_r+0x12>
 801085a:	462a      	mov	r2, r5
 801085c:	4621      	mov	r1, r4
 801085e:	f7fe fa41 	bl	800ece4 <memset>
 8010862:	e7f5      	b.n	8010850 <_calloc_r+0x14>

08010864 <fiprintf>:
 8010864:	b40e      	push	{r1, r2, r3}
 8010866:	b503      	push	{r0, r1, lr}
 8010868:	4601      	mov	r1, r0
 801086a:	ab03      	add	r3, sp, #12
 801086c:	4805      	ldr	r0, [pc, #20]	@ (8010884 <fiprintf+0x20>)
 801086e:	f853 2b04 	ldr.w	r2, [r3], #4
 8010872:	6800      	ldr	r0, [r0, #0]
 8010874:	9301      	str	r3, [sp, #4]
 8010876:	f7ff fbed 	bl	8010054 <_vfiprintf_r>
 801087a:	b002      	add	sp, #8
 801087c:	f85d eb04 	ldr.w	lr, [sp], #4
 8010880:	b003      	add	sp, #12
 8010882:	4770      	bx	lr
 8010884:	20000264 	.word	0x20000264

08010888 <abort>:
 8010888:	b508      	push	{r3, lr}
 801088a:	2006      	movs	r0, #6
 801088c:	f000 f82c 	bl	80108e8 <raise>
 8010890:	2001      	movs	r0, #1
 8010892:	f7f2 fb0f 	bl	8002eb4 <_exit>

08010896 <_raise_r>:
 8010896:	291f      	cmp	r1, #31
 8010898:	b538      	push	{r3, r4, r5, lr}
 801089a:	4605      	mov	r5, r0
 801089c:	460c      	mov	r4, r1
 801089e:	d904      	bls.n	80108aa <_raise_r+0x14>
 80108a0:	2316      	movs	r3, #22
 80108a2:	6003      	str	r3, [r0, #0]
 80108a4:	f04f 30ff 	mov.w	r0, #4294967295
 80108a8:	bd38      	pop	{r3, r4, r5, pc}
 80108aa:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80108ac:	b112      	cbz	r2, 80108b4 <_raise_r+0x1e>
 80108ae:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80108b2:	b94b      	cbnz	r3, 80108c8 <_raise_r+0x32>
 80108b4:	4628      	mov	r0, r5
 80108b6:	f000 f831 	bl	801091c <_getpid_r>
 80108ba:	4622      	mov	r2, r4
 80108bc:	4601      	mov	r1, r0
 80108be:	4628      	mov	r0, r5
 80108c0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80108c4:	f000 b818 	b.w	80108f8 <_kill_r>
 80108c8:	2b01      	cmp	r3, #1
 80108ca:	d00a      	beq.n	80108e2 <_raise_r+0x4c>
 80108cc:	1c59      	adds	r1, r3, #1
 80108ce:	d103      	bne.n	80108d8 <_raise_r+0x42>
 80108d0:	2316      	movs	r3, #22
 80108d2:	6003      	str	r3, [r0, #0]
 80108d4:	2001      	movs	r0, #1
 80108d6:	e7e7      	b.n	80108a8 <_raise_r+0x12>
 80108d8:	2100      	movs	r1, #0
 80108da:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80108de:	4620      	mov	r0, r4
 80108e0:	4798      	blx	r3
 80108e2:	2000      	movs	r0, #0
 80108e4:	e7e0      	b.n	80108a8 <_raise_r+0x12>
	...

080108e8 <raise>:
 80108e8:	4b02      	ldr	r3, [pc, #8]	@ (80108f4 <raise+0xc>)
 80108ea:	4601      	mov	r1, r0
 80108ec:	6818      	ldr	r0, [r3, #0]
 80108ee:	f7ff bfd2 	b.w	8010896 <_raise_r>
 80108f2:	bf00      	nop
 80108f4:	20000264 	.word	0x20000264

080108f8 <_kill_r>:
 80108f8:	b538      	push	{r3, r4, r5, lr}
 80108fa:	4d07      	ldr	r5, [pc, #28]	@ (8010918 <_kill_r+0x20>)
 80108fc:	2300      	movs	r3, #0
 80108fe:	4604      	mov	r4, r0
 8010900:	4608      	mov	r0, r1
 8010902:	4611      	mov	r1, r2
 8010904:	602b      	str	r3, [r5, #0]
 8010906:	f7f2 fac5 	bl	8002e94 <_kill>
 801090a:	1c43      	adds	r3, r0, #1
 801090c:	d102      	bne.n	8010914 <_kill_r+0x1c>
 801090e:	682b      	ldr	r3, [r5, #0]
 8010910:	b103      	cbz	r3, 8010914 <_kill_r+0x1c>
 8010912:	6023      	str	r3, [r4, #0]
 8010914:	bd38      	pop	{r3, r4, r5, pc}
 8010916:	bf00      	nop
 8010918:	20005aec 	.word	0x20005aec

0801091c <_getpid_r>:
 801091c:	f7f2 bab2 	b.w	8002e84 <_getpid>

08010920 <_init>:
 8010920:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010922:	bf00      	nop
 8010924:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010926:	bc08      	pop	{r3}
 8010928:	469e      	mov	lr, r3
 801092a:	4770      	bx	lr

0801092c <_fini>:
 801092c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801092e:	bf00      	nop
 8010930:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010932:	bc08      	pop	{r3}
 8010934:	469e      	mov	lr, r3
 8010936:	4770      	bx	lr
